
Sinus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcd0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800be70  0800be70  0001be70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c108  0800c108  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c108  0800c108  0001c108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c110  0800c110  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c110  0800c110  0001c110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c114  0800c114  0001c114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0800c118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fd8  20000150  0800c264  00020150  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003128  0800c264  00023128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bcae  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cf3  00000000  00000000  0003beb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b0  00000000  00000000  0003fba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001348  00000000  00000000  00041458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b912  00000000  00000000  000427a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e3c3  00000000  00000000  0005e0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a25c9  00000000  00000000  0007c475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000072d4  00000000  00000000  0011ea40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00125d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800be58 	.word	0x0800be58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	0800be58 	.word	0x0800be58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd0:	f000 b970 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	460f      	mov	r7, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4694      	mov	ip, r2
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0xe2>
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	b143      	cbz	r3, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	f1c3 0220 	rsb	r2, r3, #32
 8000c10:	409f      	lsls	r7, r3
 8000c12:	fa20 f202 	lsr.w	r2, r0, r2
 8000c16:	4317      	orrs	r7, r2
 8000c18:	409c      	lsls	r4, r3
 8000c1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1e:	fa1f f58c 	uxth.w	r5, ip
 8000c22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c26:	0c22      	lsrs	r2, r4, #16
 8000c28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c30:	fb01 f005 	mul.w	r0, r1, r5
 8000c34:	4290      	cmp	r0, r2
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c38:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c40:	f080 811c 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f240 8119 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	4462      	add	r2, ip
 8000c4e:	1a12      	subs	r2, r2, r0
 8000c50:	b2a4      	uxth	r4, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5e:	fb00 f505 	mul.w	r5, r0, r5
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x90>
 8000c66:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6e:	f080 8107 	bcs.w	8000e80 <__udivmoddi4+0x294>
 8000c72:	42a5      	cmp	r5, r4
 8000c74:	f240 8104 	bls.w	8000e80 <__udivmoddi4+0x294>
 8000c78:	4464      	add	r4, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11e      	cbz	r6, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40dc      	lsrs	r4, r3
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0xbc>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80ed 	beq.w	8000e76 <__udivmoddi4+0x28a>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d149      	bne.n	8000d44 <__udivmoddi4+0x158>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	d302      	bcc.n	8000cba <__udivmoddi4+0xce>
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	f200 80f8 	bhi.w	8000eaa <__udivmoddi4+0x2be>
 8000cba:	1a84      	subs	r4, r0, r2
 8000cbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d0e2      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000ccc:	e7df      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xe6>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cdc:	1a8a      	subs	r2, r1, r2
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cec:	fb07 2015 	mls	r0, r7, r5, r2
 8000cf0:	0c22      	lsrs	r2, r4, #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb0e f005 	mul.w	r0, lr, r5
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000cfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000d02:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2b8>
 8000d0e:	4645      	mov	r5, r8
 8000d10:	1a12      	subs	r2, r2, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d18:	fb07 2210 	mls	r2, r7, r0, r2
 8000d1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x14e>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x14c>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2c2>
 8000d38:	4610      	mov	r0, r2
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d42:	e79f      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d44:	f1c1 0720 	rsb	r7, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa05 f401 	lsl.w	r4, r5, r1
 8000d56:	fa20 f307 	lsr.w	r3, r0, r7
 8000d5a:	40fd      	lsrs	r5, r7
 8000d5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d74:	fb08 f50e 	mul.w	r5, r8, lr
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4464      	add	r4, ip
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	b29d      	uxth	r5, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2ac>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2ac>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	4464      	add	r4, ip
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fba3 9502 	umull	r9, r5, r3, r2
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	42ac      	cmp	r4, r5
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46ae      	mov	lr, r5
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x29c>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x298>
 8000ddc:	b156      	cbz	r6, 8000df4 <__udivmoddi4+0x208>
 8000dde:	ebb0 0208 	subs.w	r2, r0, r8
 8000de2:	eb64 040e 	sbc.w	r4, r4, lr
 8000de6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dea:	40ca      	lsrs	r2, r1
 8000dec:	40cc      	lsrs	r4, r1
 8000dee:	4317      	orrs	r7, r2
 8000df0:	e9c6 7400 	strd	r7, r4, [r6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfc:	f1c3 0120 	rsb	r1, r3, #32
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	fa20 f201 	lsr.w	r2, r0, r1
 8000e08:	fa25 f101 	lsr.w	r1, r5, r1
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	432a      	orrs	r2, r5
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e20:	0c11      	lsrs	r1, r2, #16
 8000e22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e26:	fb00 f50e 	mul.w	r5, r0, lr
 8000e2a:	428d      	cmp	r5, r1
 8000e2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x258>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1b49      	subs	r1, r1, r5
 8000e46:	b292      	uxth	r2, r2
 8000e48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	fb05 f10e 	mul.w	r1, r5, lr
 8000e58:	4291      	cmp	r1, r2
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x282>
 8000e5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e60:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e6a:	3d02      	subs	r5, #2
 8000e6c:	4462      	add	r2, ip
 8000e6e:	1a52      	subs	r2, r2, r1
 8000e70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0xfc>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e708      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000e7c:	4639      	mov	r1, r7
 8000e7e:	e6e6      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e80:	4610      	mov	r0, r2
 8000e82:	e6fb      	b.n	8000c7c <__udivmoddi4+0x90>
 8000e84:	4548      	cmp	r0, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e90:	3b01      	subs	r3, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e94:	4645      	mov	r5, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x282>
 8000e98:	462b      	mov	r3, r5
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x258>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea4:	3d02      	subs	r5, #2
 8000ea6:	4462      	add	r2, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e70a      	b.n	8000cc4 <__udivmoddi4+0xd8>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x14e>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebe:	f000 ff61 	bl	8001d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec2:	f000 f8cf 	bl	8001064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec6:	f000 fb15 	bl	80014f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000eca:	f000 f935 	bl	8001138 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000ece:	f000 f985 	bl	80011dc <MX_I2C2_Init>
  MX_SPI1_Init();
 8000ed2:	f000 f9b1 	bl	8001238 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000ed6:	f000 f9e5 	bl	80012a4 <MX_TIM3_Init>
  MX_TIM9_Init();
 8000eda:	f000 fa53 	bl	8001384 <MX_TIM9_Init>
  MX_TIM10_Init();
 8000ede:	f000 fa95 	bl	800140c <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8000ee2:	f000 fadd 	bl	80014a0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000ee6:	f008 fdad 	bl	8009a44 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

    // Activate necessary timers.
  	HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_1);
 8000eea:	2100      	movs	r1, #0
 8000eec:	4850      	ldr	r0, [pc, #320]	; (8001030 <main+0x178>)
 8000eee:	f004 f815 	bl	8004f1c <HAL_TIM_OC_Start>
  	HAL_TIM_OC_Start(&htim10, TIM_CHANNEL_1);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	484f      	ldr	r0, [pc, #316]	; (8001034 <main+0x17c>)
 8000ef6:	f004 f811 	bl	8004f1c <HAL_TIM_OC_Start>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000efa:	2100      	movs	r1, #0
 8000efc:	484e      	ldr	r0, [pc, #312]	; (8001038 <main+0x180>)
 8000efe:	f004 f90d 	bl	800511c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f02:	2104      	movs	r1, #4
 8000f04:	484c      	ldr	r0, [pc, #304]	; (8001038 <main+0x180>)
 8000f06:	f004 f909 	bl	800511c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000f0a:	2108      	movs	r1, #8
 8000f0c:	484a      	ldr	r0, [pc, #296]	; (8001038 <main+0x180>)
 8000f0e:	f004 f905 	bl	800511c <HAL_TIM_PWM_Start>

  	// Start Interrupts
  	HAL_TIM_Base_Start_IT(&htim9);
 8000f12:	4847      	ldr	r0, [pc, #284]	; (8001030 <main+0x178>)
 8000f14:	f003 ff50 	bl	8004db8 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim10);
 8000f18:	4846      	ldr	r0, [pc, #280]	; (8001034 <main+0x17c>)
 8000f1a:	f003 ff4d 	bl	8004db8 <HAL_TIM_Base_Start_IT>

  	// Fill sintab array
	for (int i = 0; i < AANTAL_TIJDSTAPPEN; i++) {
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	e038      	b.n	8000f96 <main+0xde>
		sintab[i] = sin(i*2*M_PI/AANTAL_TIJDSTAPPEN) * 0.5 + 0.5;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fafb 	bl	8000524 <__aeabi_i2d>
 8000f2e:	a33e      	add	r3, pc, #248	; (adr r3, 8001028 <main+0x170>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	f7ff fb60 	bl	80005f8 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8000f48:	f7ff fc80 	bl	800084c <__aeabi_ddiv>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	ec43 2b17 	vmov	d7, r2, r3
 8000f54:	eeb0 0a47 	vmov.f32	s0, s14
 8000f58:	eef0 0a67 	vmov.f32	s1, s15
 8000f5c:	f009 ff3c 	bl	800add8 <sin>
 8000f60:	ec51 0b10 	vmov	r0, r1, d0
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	4b34      	ldr	r3, [pc, #208]	; (800103c <main+0x184>)
 8000f6a:	f7ff fb45 	bl	80005f8 <__aeabi_dmul>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4610      	mov	r0, r2
 8000f74:	4619      	mov	r1, r3
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	4b30      	ldr	r3, [pc, #192]	; (800103c <main+0x184>)
 8000f7c:	f7ff f986 	bl	800028c <__adddf3>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	482e      	ldr	r0, [pc, #184]	; (8001040 <main+0x188>)
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	00c9      	lsls	r1, r1, #3
 8000f8a:	4401      	add	r1, r0
 8000f8c:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < AANTAL_TIJDSTAPPEN; i++) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3301      	adds	r3, #1
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f9c:	dbc2      	blt.n	8000f24 <main+0x6c>
	}

	// Enable Gate Drivers.
	GPIOC->ODR = 0xE000;
 8000f9e:	4b29      	ldr	r3, [pc, #164]	; (8001044 <main+0x18c>)
 8000fa0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000fa4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// Read Potentiometer data from ADC for RPM control.
	HAL_ADC_Start(&hadc1);
 8000fa6:	4828      	ldr	r0, [pc, #160]	; (8001048 <main+0x190>)
 8000fa8:	f000 ffc6 	bl	8001f38 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fb0:	4825      	ldr	r0, [pc, #148]	; (8001048 <main+0x190>)
 8000fb2:	f001 f875 	bl	80020a0 <HAL_ADC_PollForConversion>
	WantedRPM = HAL_ADC_GetValue(&hadc1);
 8000fb6:	4824      	ldr	r0, [pc, #144]	; (8001048 <main+0x190>)
 8000fb8:	f001 f8fd 	bl	80021b6 <HAL_ADC_GetValue>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4a23      	ldr	r2, [pc, #140]	; (800104c <main+0x194>)
 8000fc0:	6013      	str	r3, [r2, #0]

	// Keep RPM to the minimum set in main.h.
	if (WantedRPM < MinimumRPM) {
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <main+0x194>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b63      	cmp	r3, #99	; 0x63
 8000fc8:	d802      	bhi.n	8000fd0 <main+0x118>
		WantedRPM = MinimumRPM;
 8000fca:	4b20      	ldr	r3, [pc, #128]	; (800104c <main+0x194>)
 8000fcc:	2264      	movs	r2, #100	; 0x64
 8000fce:	601a      	str	r2, [r3, #0]
	}

	// Set PSC to appropriate value for RPM
	TIM10->PSC = (15 * Fapb2clk) / (256 * WantedRPM) - 1;
 8000fd0:	f003 fe06 	bl	8004be0 <HAL_RCC_GetPCLK2Freq>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	1a9b      	subs	r3, r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <main+0x194>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4a19      	ldr	r2, [pc, #100]	; (8001050 <main+0x198>)
 8000fec:	3b01      	subs	r3, #1
 8000fee:	6293      	str	r3, [r2, #40]	; 0x28

	// Send RPM data to PC
	len = snprintf(buf, sizeof(buf), "\n\rWanted RPM / Current RPM: %lu / %lu", WantedRPM, CurrentRPM);
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <main+0x194>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <main+0x19c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	4a16      	ldr	r2, [pc, #88]	; (8001058 <main+0x1a0>)
 8000ffe:	2140      	movs	r1, #64	; 0x40
 8001000:	4816      	ldr	r0, [pc, #88]	; (800105c <main+0x1a4>)
 8001002:	f009 fa2f 	bl	800a464 <sniprintf>
 8001006:	4603      	mov	r3, r0
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <main+0x1a8>)
 800100c:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS((uint8_t *) buf, len);
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <main+0x1a8>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	4619      	mov	r1, r3
 8001014:	4811      	ldr	r0, [pc, #68]	; (800105c <main+0x1a4>)
 8001016:	f008 fdd3 	bl	8009bc0 <CDC_Transmit_FS>
	HAL_Delay(10);
 800101a:	200a      	movs	r0, #10
 800101c:	f000 ff24 	bl	8001e68 <HAL_Delay>
	HAL_ADC_Start(&hadc1);
 8001020:	e7c1      	b.n	8000fa6 <main+0xee>
 8001022:	bf00      	nop
 8001024:	f3af 8000 	nop.w
 8001028:	54442d18 	.word	0x54442d18
 800102c:	400921fb 	.word	0x400921fb
 8001030:	200002a8 	.word	0x200002a8
 8001034:	200002f0 	.word	0x200002f0
 8001038:	20000260 	.word	0x20000260
 800103c:	3fe00000 	.word	0x3fe00000
 8001040:	20000388 	.word	0x20000388
 8001044:	40020800 	.word	0x40020800
 8001048:	2000016c 	.word	0x2000016c
 800104c:	20000380 	.word	0x20000380
 8001050:	40014400 	.word	0x40014400
 8001054:	20000384 	.word	0x20000384
 8001058:	0800be70 	.word	0x0800be70
 800105c:	20001388 	.word	0x20001388
 8001060:	2000037c 	.word	0x2000037c

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b094      	sub	sp, #80	; 0x50
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	2230      	movs	r2, #48	; 0x30
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f009 fa2a 	bl	800a4cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <SystemClock_Config+0xcc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	4a27      	ldr	r2, [pc, #156]	; (8001130 <SystemClock_Config+0xcc>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001096:	6413      	str	r3, [r2, #64]	; 0x40
 8001098:	4b25      	ldr	r3, [pc, #148]	; (8001130 <SystemClock_Config+0xcc>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	4b22      	ldr	r3, [pc, #136]	; (8001134 <SystemClock_Config+0xd0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a21      	ldr	r2, [pc, #132]	; (8001134 <SystemClock_Config+0xd0>)
 80010ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <SystemClock_Config+0xd0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c0:	2301      	movs	r3, #1
 80010c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ca:	2302      	movs	r3, #2
 80010cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010d4:	2319      	movs	r3, #25
 80010d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010d8:	23c0      	movs	r3, #192	; 0xc0
 80010da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010dc:	2302      	movs	r3, #2
 80010de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010e0:	2304      	movs	r3, #4
 80010e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 0320 	add.w	r3, r7, #32
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 f935 	bl	8004358 <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f4:	f000 fa76 	bl	80015e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f8:	230f      	movs	r3, #15
 80010fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fc:	2302      	movs	r3, #2
 80010fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001108:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800110e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2103      	movs	r1, #3
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fb96 	bl	8004848 <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001122:	f000 fa5f 	bl	80015e4 <Error_Handler>
  }
}
 8001126:	bf00      	nop
 8001128:	3750      	adds	r7, #80	; 0x50
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000

08001138 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <MX_ADC1_Init+0x98>)
 800114c:	4a21      	ldr	r2, [pc, #132]	; (80011d4 <MX_ADC1_Init+0x9c>)
 800114e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <MX_ADC1_Init+0x98>)
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001156:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <MX_ADC1_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_ADC1_Init+0x98>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001162:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_ADC1_Init+0x98>)
 8001164:	2200      	movs	r2, #0
 8001166:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_ADC1_Init+0x98>)
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_ADC1_Init+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_ADC1_Init+0x98>)
 8001178:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <MX_ADC1_Init+0xa0>)
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_ADC1_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_ADC1_Init+0x98>)
 8001184:	2201      	movs	r2, #1
 8001186:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_ADC1_Init+0x98>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_ADC1_Init+0x98>)
 8001192:	2201      	movs	r2, #1
 8001194:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001196:	480e      	ldr	r0, [pc, #56]	; (80011d0 <MX_ADC1_Init+0x98>)
 8001198:	f000 fe8a 	bl	8001eb0 <HAL_ADC_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011a2:	f000 fa1f 	bl	80015e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011a6:	2304      	movs	r3, #4
 80011a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_ADC1_Init+0x98>)
 80011b8:	f001 f80a 	bl	80021d0 <HAL_ADC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011c2:	f000 fa0f 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000016c 	.word	0x2000016c
 80011d4:	40012000 	.word	0x40012000
 80011d8:	0f000001 	.word	0x0f000001

080011dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_I2C2_Init+0x50>)
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <MX_I2C2_Init+0x54>)
 80011e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_I2C2_Init+0x50>)
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <MX_I2C2_Init+0x58>)
 80011ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_I2C2_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_I2C2_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_I2C2_Init+0x50>)
 80011fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_I2C2_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_I2C2_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_I2C2_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_I2C2_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_I2C2_Init+0x50>)
 800121a:	f001 fcdb 	bl	8002bd4 <HAL_I2C_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001224:	f000 f9de 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200001b4 	.word	0x200001b4
 8001230:	40005800 	.word	0x40005800
 8001234:	000186a0 	.word	0x000186a0

08001238 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_SPI1_Init+0x64>)
 800123e:	4a18      	ldr	r2, [pc, #96]	; (80012a0 <MX_SPI1_Init+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_SPI1_Init+0x64>)
 8001244:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001248:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_SPI1_Init+0x64>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_SPI1_Init+0x64>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_SPI1_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_SPI1_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_SPI1_Init+0x64>)
 8001264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001268:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_SPI1_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MX_SPI1_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_SPI1_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <MX_SPI1_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_SPI1_Init+0x64>)
 8001284:	220a      	movs	r2, #10
 8001286:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_SPI1_Init+0x64>)
 800128a:	f003 fcbd 	bl	8004c08 <HAL_SPI_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001294:	f000 f9a6 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000208 	.word	0x20000208
 80012a0:	40013000 	.word	0x40013000

080012a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
 80012c2:	615a      	str	r2, [r3, #20]
 80012c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012c6:	4b2d      	ldr	r3, [pc, #180]	; (800137c <MX_TIM3_Init+0xd8>)
 80012c8:	4a2d      	ldr	r2, [pc, #180]	; (8001380 <MX_TIM3_Init+0xdc>)
 80012ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012cc:	4b2b      	ldr	r3, [pc, #172]	; (800137c <MX_TIM3_Init+0xd8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b2a      	ldr	r3, [pc, #168]	; (800137c <MX_TIM3_Init+0xd8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1919;
 80012d8:	4b28      	ldr	r3, [pc, #160]	; (800137c <MX_TIM3_Init+0xd8>)
 80012da:	f240 727f 	movw	r2, #1919	; 0x77f
 80012de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b26      	ldr	r3, [pc, #152]	; (800137c <MX_TIM3_Init+0xd8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e6:	4b25      	ldr	r3, [pc, #148]	; (800137c <MX_TIM3_Init+0xd8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012ec:	4823      	ldr	r0, [pc, #140]	; (800137c <MX_TIM3_Init+0xd8>)
 80012ee:	f003 fec5 	bl	800507c <HAL_TIM_PWM_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80012f8:	f000 f974 	bl	80015e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001304:	f107 0320 	add.w	r3, r7, #32
 8001308:	4619      	mov	r1, r3
 800130a:	481c      	ldr	r0, [pc, #112]	; (800137c <MX_TIM3_Init+0xd8>)
 800130c:	f004 fc40 	bl	8005b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001316:	f000 f965 	bl	80015e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800131a:	2360      	movs	r3, #96	; 0x60
 800131c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	4619      	mov	r1, r3
 8001330:	4812      	ldr	r0, [pc, #72]	; (800137c <MX_TIM3_Init+0xd8>)
 8001332:	f004 f907 	bl	8005544 <HAL_TIM_PWM_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800133c:	f000 f952 	bl	80015e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2204      	movs	r2, #4
 8001344:	4619      	mov	r1, r3
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <MX_TIM3_Init+0xd8>)
 8001348:	f004 f8fc 	bl	8005544 <HAL_TIM_PWM_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001352:	f000 f947 	bl	80015e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2208      	movs	r2, #8
 800135a:	4619      	mov	r1, r3
 800135c:	4807      	ldr	r0, [pc, #28]	; (800137c <MX_TIM3_Init+0xd8>)
 800135e:	f004 f8f1 	bl	8005544 <HAL_TIM_PWM_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001368:	f000 f93c 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800136c:	4803      	ldr	r0, [pc, #12]	; (800137c <MX_TIM3_Init+0xd8>)
 800136e:	f000 fadf 	bl	8001930 <HAL_TIM_MspPostInit>

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000260 	.word	0x20000260
 8001380:	40000400 	.word	0x40000400

08001384 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <MX_TIM9_Init+0x80>)
 800139e:	4a1a      	ldr	r2, [pc, #104]	; (8001408 <MX_TIM9_Init+0x84>)
 80013a0:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1199;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <MX_TIM9_Init+0x80>)
 80013a4:	f240 42af 	movw	r2, #1199	; 0x4af
 80013a8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <MX_TIM9_Init+0x80>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_TIM9_Init+0x80>)
 80013b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013b6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_TIM9_Init+0x80>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_TIM9_Init+0x80>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 80013c4:	480f      	ldr	r0, [pc, #60]	; (8001404 <MX_TIM9_Init+0x80>)
 80013c6:	f003 fd59 	bl	8004e7c <HAL_TIM_OC_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 80013d0:	f000 f908 	bl	80015e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	4619      	mov	r1, r3
 80013ea:	4806      	ldr	r0, [pc, #24]	; (8001404 <MX_TIM9_Init+0x80>)
 80013ec:	f004 f84e 	bl	800548c <HAL_TIM_OC_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 80013f6:	f000 f8f5 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200002a8 	.word	0x200002a8
 8001408:	40014000 	.word	0x40014000

0800140c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <MX_TIM10_Init+0x8c>)
 8001426:	4a1d      	ldr	r2, [pc, #116]	; (800149c <MX_TIM10_Init+0x90>)
 8001428:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 65535;
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <MX_TIM10_Init+0x8c>)
 800142c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001430:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <MX_TIM10_Init+0x8c>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1;
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <MX_TIM10_Init+0x8c>)
 800143a:	2201      	movs	r2, #1
 800143c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <MX_TIM10_Init+0x8c>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_TIM10_Init+0x8c>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800144a:	4813      	ldr	r0, [pc, #76]	; (8001498 <MX_TIM10_Init+0x8c>)
 800144c:	f003 fc65 	bl	8004d1a <HAL_TIM_Base_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001456:	f000 f8c5 	bl	80015e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 800145a:	480f      	ldr	r0, [pc, #60]	; (8001498 <MX_TIM10_Init+0x8c>)
 800145c:	f003 fd0e 	bl	8004e7c <HAL_TIM_OC_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001466:	f000 f8bd 	bl	80015e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_TIM10_Init+0x8c>)
 8001482:	f004 f803 	bl	800548c <HAL_TIM_OC_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800148c:	f000 f8aa 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200002f0 	.word	0x200002f0
 800149c:	40014400 	.word	0x40014400

080014a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_USART1_UART_Init+0x4c>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <MX_USART1_UART_Init+0x50>)
 80014a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <MX_USART1_UART_Init+0x4c>)
 80014ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_USART1_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_USART1_UART_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <MX_USART1_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_USART1_UART_Init+0x4c>)
 80014c6:	220c      	movs	r2, #12
 80014c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <MX_USART1_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_USART1_UART_Init+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_USART1_UART_Init+0x4c>)
 80014d8:	f004 fbdc 	bl	8005c94 <HAL_UART_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014e2:	f000 f87f 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000338 	.word	0x20000338
 80014f0:	40011000 	.word	0x40011000

080014f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a31      	ldr	r2, [pc, #196]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <MX_GPIO_Init+0xe4>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <MX_GPIO_Init+0xe4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a2a      	ldr	r2, [pc, #168]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a23      	ldr	r2, [pc, #140]	; (80015d8 <MX_GPIO_Init+0xe4>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001580:	4816      	ldr	r0, [pc, #88]	; (80015dc <MX_GPIO_Init+0xe8>)
 8001582:	f001 fae9 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001586:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800158a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	2301      	movs	r3, #1
 800158e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	480f      	ldr	r0, [pc, #60]	; (80015dc <MX_GPIO_Init+0xe8>)
 80015a0:	f001 f956 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80015a4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80015a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	4809      	ldr	r0, [pc, #36]	; (80015e0 <MX_GPIO_Init+0xec>)
 80015bc:	f001 f948 	bl	8002850 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2017      	movs	r0, #23
 80015c6:	f001 f90c 	bl	80027e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015ca:	2017      	movs	r0, #23
 80015cc:	f001 f925 	bl	800281a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015d0:	bf00      	nop
 80015d2:	3728      	adds	r7, #40	; 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020800 	.word	0x40020800
 80015e0:	40020400 	.word	0x40020400

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>
	...

080015f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_MspInit+0x4c>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	4a0f      	ldr	r2, [pc, #60]	; (800163c <HAL_MspInit+0x4c>)
 8001600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001604:	6453      	str	r3, [r2, #68]	; 0x44
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_MspInit+0x4c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_MspInit+0x4c>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_MspInit+0x4c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a17      	ldr	r2, [pc, #92]	; (80016bc <HAL_ADC_MspInit+0x7c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d127      	bne.n	80016b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <HAL_ADC_MspInit+0x80>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	4a15      	ldr	r2, [pc, #84]	; (80016c0 <HAL_ADC_MspInit+0x80>)
 800166c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001670:	6453      	str	r3, [r2, #68]	; 0x44
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_ADC_MspInit+0x80>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_ADC_MspInit+0x80>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_ADC_MspInit+0x80>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_ADC_MspInit+0x80>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800169a:	2310      	movs	r3, #16
 800169c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169e:	2303      	movs	r3, #3
 80016a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <HAL_ADC_MspInit+0x84>)
 80016ae:	f001 f8cf 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016b2:	bf00      	nop
 80016b4:	3728      	adds	r7, #40	; 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40012000 	.word	0x40012000
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000

080016c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a22      	ldr	r2, [pc, #136]	; (8001770 <HAL_I2C_MspInit+0xa8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d13d      	bne.n	8001766 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b21      	ldr	r3, [pc, #132]	; (8001774 <HAL_I2C_MspInit+0xac>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a20      	ldr	r2, [pc, #128]	; (8001774 <HAL_I2C_MspInit+0xac>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <HAL_I2C_MspInit+0xac>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170c:	2312      	movs	r3, #18
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001718:	2304      	movs	r3, #4
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4815      	ldr	r0, [pc, #84]	; (8001778 <HAL_I2C_MspInit+0xb0>)
 8001724:	f001 f894 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800172e:	2312      	movs	r3, #18
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800173a:	2309      	movs	r3, #9
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <HAL_I2C_MspInit+0xb0>)
 8001746:	f001 f883 	bl	8002850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_I2C_MspInit+0xac>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <HAL_I2C_MspInit+0xac>)
 8001754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001758:	6413      	str	r3, [r2, #64]	; 0x40
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_I2C_MspInit+0xac>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001766:	bf00      	nop
 8001768:	3728      	adds	r7, #40	; 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40005800 	.word	0x40005800
 8001774:	40023800 	.word	0x40023800
 8001778:	40020400 	.word	0x40020400

0800177c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a28      	ldr	r2, [pc, #160]	; (800183c <HAL_SPI_MspInit+0xc0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d149      	bne.n	8001832 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <HAL_SPI_MspInit+0xc4>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a26      	ldr	r2, [pc, #152]	; (8001840 <HAL_SPI_MspInit+0xc4>)
 80017a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <HAL_SPI_MspInit+0xc4>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b20      	ldr	r3, [pc, #128]	; (8001840 <HAL_SPI_MspInit+0xc4>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <HAL_SPI_MspInit+0xc4>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <HAL_SPI_MspInit+0xc4>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_SPI_MspInit+0xc4>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a18      	ldr	r2, [pc, #96]	; (8001840 <HAL_SPI_MspInit+0xc4>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_SPI_MspInit+0xc4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017f2:	23a0      	movs	r3, #160	; 0xa0
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001802:	2305      	movs	r3, #5
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	480d      	ldr	r0, [pc, #52]	; (8001844 <HAL_SPI_MspInit+0xc8>)
 800180e:	f001 f81f 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001812:	2310      	movs	r3, #16
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001822:	2305      	movs	r3, #5
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	4806      	ldr	r0, [pc, #24]	; (8001848 <HAL_SPI_MspInit+0xcc>)
 800182e:	f001 f80f 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40013000 	.word	0x40013000
 8001840:	40023800 	.word	0x40023800
 8001844:	40020000 	.word	0x40020000
 8001848:	40020400 	.word	0x40020400

0800184c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <HAL_TIM_PWM_MspInit+0x3c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d10d      	bne.n	800187a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_TIM_PWM_MspInit+0x40>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4a09      	ldr	r2, [pc, #36]	; (800188c <HAL_TIM_PWM_MspInit+0x40>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6413      	str	r3, [r2, #64]	; 0x40
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <HAL_TIM_PWM_MspInit+0x40>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40000400 	.word	0x40000400
 800188c:	40023800 	.word	0x40023800

08001890 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM9)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <HAL_TIM_OC_MspInit+0x48>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d115      	bne.n	80018ce <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_TIM_OC_MspInit+0x4c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <HAL_TIM_OC_MspInit+0x4c>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_TIM_OC_MspInit+0x4c>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	2018      	movs	r0, #24
 80018c4:	f000 ff8d 	bl	80027e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80018c8:	2018      	movs	r0, #24
 80018ca:	f000 ffa6 	bl	800281a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40014000 	.word	0x40014000
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <HAL_TIM_Base_MspInit+0x48>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d115      	bne.n	800191e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_TIM_Base_MspInit+0x4c>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a0c      	ldr	r2, [pc, #48]	; (800192c <HAL_TIM_Base_MspInit+0x4c>)
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_TIM_Base_MspInit+0x4c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	2019      	movs	r0, #25
 8001914:	f000 ff65 	bl	80027e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001918:	2019      	movs	r0, #25
 800191a:	f000 ff7e 	bl	800281a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40014400 	.word	0x40014400
 800192c:	40023800 	.word	0x40023800

08001930 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a21      	ldr	r2, [pc, #132]	; (80019d4 <HAL_TIM_MspPostInit+0xa4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d13b      	bne.n	80019ca <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HAL_TIM_MspPostInit+0xa8>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a1f      	ldr	r2, [pc, #124]	; (80019d8 <HAL_TIM_MspPostInit+0xa8>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_TIM_MspPostInit+0xa8>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_TIM_MspPostInit+0xa8>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a18      	ldr	r2, [pc, #96]	; (80019d8 <HAL_TIM_MspPostInit+0xa8>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HAL_TIM_MspPostInit+0xa8>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800198a:	2340      	movs	r3, #64	; 0x40
 800198c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800199a:	2302      	movs	r3, #2
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	480d      	ldr	r0, [pc, #52]	; (80019dc <HAL_TIM_MspPostInit+0xac>)
 80019a6:	f000 ff53 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80019aa:	2321      	movs	r3, #33	; 0x21
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019ba:	2302      	movs	r3, #2
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	4806      	ldr	r0, [pc, #24]	; (80019e0 <HAL_TIM_MspPostInit+0xb0>)
 80019c6:	f000 ff43 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019ca:	bf00      	nop
 80019cc:	3728      	adds	r7, #40	; 0x28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40000400 	.word	0x40000400
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020000 	.word	0x40020000
 80019e0:	40020400 	.word	0x40020400

080019e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a28      	ldr	r2, [pc, #160]	; (8001aa4 <HAL_UART_MspInit+0xc0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d14a      	bne.n	8001a9c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <HAL_UART_MspInit+0xc4>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <HAL_UART_MspInit+0xc4>)
 8001a10:	f043 0310 	orr.w	r3, r3, #16
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_UART_MspInit+0xc4>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_UART_MspInit+0xc4>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a1f      	ldr	r2, [pc, #124]	; (8001aa8 <HAL_UART_MspInit+0xc4>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <HAL_UART_MspInit+0xc4>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_UART_MspInit+0xc4>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a18      	ldr	r2, [pc, #96]	; (8001aa8 <HAL_UART_MspInit+0xc4>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_UART_MspInit+0xc4>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	480d      	ldr	r0, [pc, #52]	; (8001aac <HAL_UART_MspInit+0xc8>)
 8001a78:	f000 feea 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a8c:	2307      	movs	r3, #7
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	4619      	mov	r1, r3
 8001a96:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <HAL_UART_MspInit+0xcc>)
 8001a98:	f000 feda 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a9c:	bf00      	nop
 8001a9e:	3728      	adds	r7, #40	; 0x28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40011000 	.word	0x40011000
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	40020400 	.word	0x40020400

08001ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <NMI_Handler+0x4>

08001aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <HardFault_Handler+0x4>

08001ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <MemManage_Handler+0x4>

08001ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b00:	f000 f992 	bl	8001e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	RPM++;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <EXTI9_5_IRQHandler+0x28>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <EXTI9_5_IRQHandler+0x28>)
 8001b16:	801a      	strh	r2, [r3, #0]

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001b18:	2040      	movs	r0, #64	; 0x40
 8001b1a:	f001 f837 	bl	8002b8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b1e:	2080      	movs	r0, #128	; 0x80
 8001b20:	f001 f834 	bl	8002b8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001b24:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b28:	f001 f830 	bl	8002b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	200013c8 	.word	0x200013c8

08001b34 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	// Calculate RPM and reset counter.
	CurrentRPM = 600 * (RPM / 6.0f);
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <TIM1_BRK_TIM9_IRQHandler+0x58>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	ee07 3a90 	vmov	s15, r3
 8001b40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b44:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001b48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b4c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001b90 <TIM1_BRK_TIM9_IRQHandler+0x5c>
 8001b50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b58:	ee17 3a90 	vmov	r3, s15
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <TIM1_BRK_TIM9_IRQHandler+0x60>)
 8001b60:	801a      	strh	r2, [r3, #0]
	RPM = 0;
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <TIM1_BRK_TIM9_IRQHandler+0x58>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	801a      	strh	r2, [r3, #0]

	// Disable Gate Drivers if RPM is too high.
	if (CurrentRPM > MaximumRPM) {
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <TIM1_BRK_TIM9_IRQHandler+0x60>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	f241 0204 	movw	r2, #4100	; 0x1004
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d905      	bls.n	8001b80 <TIM1_BRK_TIM9_IRQHandler+0x4c>
		GPIOC->ODR &= 0x1FFF;
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <TIM1_BRK_TIM9_IRQHandler+0x64>)
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <TIM1_BRK_TIM9_IRQHandler+0x64>)
 8001b7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b7e:	6153      	str	r3, [r2, #20]
	}

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001b80:	4806      	ldr	r0, [pc, #24]	; (8001b9c <TIM1_BRK_TIM9_IRQHandler+0x68>)
 8001b82:	f003 fb7b 	bl	800527c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200013c8 	.word	0x200013c8
 8001b90:	44160000 	.word	0x44160000
 8001b94:	20000384 	.word	0x20000384
 8001b98:	40020800 	.word	0x40020800
 8001b9c:	200002a8 	.word	0x200002a8

08001ba0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ba0:	b598      	push	{r3, r4, r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

	// Set PWM timers to next step in sinusoid generation
	TIM3->CCR1 = TIM3ARR * sintab[ (j + OffsetU) % AANTAL_TIJDSTAPPEN];
 8001ba4:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fcab 	bl	8000504 <__aeabi_ui2d>
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bb6:	4a33      	ldr	r2, [pc, #204]	; (8001c84 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4413      	add	r3, r2
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	f7fe fd1a 	bl	80005f8 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4c2c      	ldr	r4, [pc, #176]	; (8001c7c <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7fe ffd5 	bl	8000b7c <__aeabi_d2uiz>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6363      	str	r3, [r4, #52]	; 0x34
	TIM3->CCR2 = TIM3ARR * sintab[ (j + OffsetV) % AANTAL_TIJDSTAPPEN];
 8001bd6:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fc92 	bl	8000504 <__aeabi_ui2d>
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	33aa      	adds	r3, #170	; 0xaa
 8001be6:	425a      	negs	r2, r3
 8001be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bf0:	bf58      	it	pl
 8001bf2:	4253      	negpl	r3, r2
 8001bf4:	4a23      	ldr	r2, [pc, #140]	; (8001c84 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	f7fe fcfb 	bl	80005f8 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4c1d      	ldr	r4, [pc, #116]	; (8001c7c <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f7fe ffb6 	bl	8000b7c <__aeabi_d2uiz>
 8001c10:	4603      	mov	r3, r0
 8001c12:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM3->CCR3 = TIM3ARR * sintab[ (j + OffsetW) % AANTAL_TIJDSTAPPEN];
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc73 	bl	8000504 <__aeabi_ui2d>
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8001c26:	425a      	negs	r2, r3
 8001c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c30:	bf58      	it	pl
 8001c32:	4253      	negpl	r3, r2
 8001c34:	4a13      	ldr	r2, [pc, #76]	; (8001c84 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4413      	add	r3, r2
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	f7fe fcdb 	bl	80005f8 <__aeabi_dmul>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4c0d      	ldr	r4, [pc, #52]	; (8001c7c <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe ff96 	bl	8000b7c <__aeabi_d2uiz>
 8001c50:	4603      	mov	r3, r0
 8001c52:	63e3      	str	r3, [r4, #60]	; 0x3c

	j++;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8001c5e:	801a      	strh	r2, [r3, #0]

	if( j > AANTAL_TIJDSTAPPEN) {
 8001c60:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c68:	d902      	bls.n	8001c70 <TIM1_UP_TIM10_IRQHandler+0xd0>
		j = 0; // Reset j when full sinusoid has been made.
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <TIM1_UP_TIM10_IRQHandler+0xe8>)
 8001c72:	f003 fb03 	bl	800527c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd98      	pop	{r3, r4, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40000400 	.word	0x40000400
 8001c80:	200013ca 	.word	0x200013ca
 8001c84:	20000388 	.word	0x20000388
 8001c88:	200002f0 	.word	0x200002f0

08001c8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <OTG_FS_IRQHandler+0x10>)
 8001c92:	f001 fa33 	bl	80030fc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200028b4 	.word	0x200028b4

08001ca0 <_sbrk>:
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <_sbrk+0x5c>)
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <_sbrk+0x60>)
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <_sbrk+0x22>
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <_sbrk+0x64>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <_sbrk+0x68>)
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <_sbrk+0x64>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d207      	bcs.n	8001ce0 <_sbrk+0x40>
 8001cd0:	f008 fc04 	bl	800a4dc <__errno>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cde:	e009      	b.n	8001cf4 <_sbrk+0x54>
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <_sbrk+0x64>)
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20020000 	.word	0x20020000
 8001d00:	00000400 	.word	0x00000400
 8001d04:	200013cc 	.word	0x200013cc
 8001d08:	20003128 	.word	0x20003128

08001d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <SystemInit+0x20>)
 8001d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <SystemInit+0x20>)
 8001d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <Reset_Handler>:
 8001d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d68 <LoopFillZerobss+0x12>
 8001d34:	480d      	ldr	r0, [pc, #52]	; (8001d6c <LoopFillZerobss+0x16>)
 8001d36:	490e      	ldr	r1, [pc, #56]	; (8001d70 <LoopFillZerobss+0x1a>)
 8001d38:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <LoopFillZerobss+0x1e>)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:
 8001d3e:	58d4      	ldr	r4, [r2, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:
 8001d44:	18c4      	adds	r4, r0, r3
 8001d46:	428c      	cmp	r4, r1
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>
 8001d4a:	4a0b      	ldr	r2, [pc, #44]	; (8001d78 <LoopFillZerobss+0x22>)
 8001d4c:	4c0b      	ldr	r4, [pc, #44]	; (8001d7c <LoopFillZerobss+0x26>)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:
 8001d56:	42a2      	cmp	r2, r4
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>
 8001d5a:	f7ff ffd7 	bl	8001d0c <SystemInit>
 8001d5e:	f008 fbc3 	bl	800a4e8 <__libc_init_array>
 8001d62:	f7ff f8a9 	bl	8000eb8 <main>
 8001d66:	4770      	bx	lr
 8001d68:	20020000 	.word	0x20020000
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	2000014c 	.word	0x2000014c
 8001d74:	0800c118 	.word	0x0800c118
 8001d78:	20000150 	.word	0x20000150
 8001d7c:	20003128 	.word	0x20003128

08001d80 <ADC_IRQHandler>:
 8001d80:	e7fe      	b.n	8001d80 <ADC_IRQHandler>
	...

08001d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <HAL_Init+0x40>)
 8001d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_Init+0x40>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <HAL_Init+0x40>)
 8001d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <HAL_Init+0x40>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <HAL_Init+0x40>)
 8001da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dac:	2003      	movs	r0, #3
 8001dae:	f000 fd0d 	bl	80027cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db2:	200f      	movs	r0, #15
 8001db4:	f000 f808 	bl	8001dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db8:	f7ff fc1a 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023c00 	.word	0x40023c00

08001dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_InitTick+0x54>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_InitTick+0x58>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 fd25 	bl	8002836 <HAL_SYSTICK_Config>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00e      	b.n	8001e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b0f      	cmp	r3, #15
 8001dfa:	d80a      	bhi.n	8001e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e04:	f000 fced 	bl	80027e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e08:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <HAL_InitTick+0x5c>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000008 	.word	0x20000008
 8001e24:	20000004 	.word	0x20000004

08001e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_IncTick+0x20>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_IncTick+0x24>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <HAL_IncTick+0x24>)
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	200013d0 	.word	0x200013d0

08001e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return uwTick;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_GetTick+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	200013d0 	.word	0x200013d0

08001e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff ffee 	bl	8001e50 <HAL_GetTick>
 8001e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e80:	d005      	beq.n	8001e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_Delay+0x44>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e8e:	bf00      	nop
 8001e90:	f7ff ffde 	bl	8001e50 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d8f7      	bhi.n	8001e90 <HAL_Delay+0x28>
  {
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000008 	.word	0x20000008

08001eb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e033      	b.n	8001f2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fbb6 	bl	8001640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d118      	bne.n	8001f20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ef6:	f023 0302 	bic.w	r3, r3, #2
 8001efa:	f043 0202 	orr.w	r2, r3, #2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fa96 	bl	8002434 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f023 0303 	bic.w	r3, r3, #3
 8001f16:	f043 0201 	orr.w	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f1e:	e001      	b.n	8001f24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_Start+0x1a>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e097      	b.n	8002082 <HAL_ADC_Start+0x14a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d018      	beq.n	8001f9a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f78:	4b45      	ldr	r3, [pc, #276]	; (8002090 <HAL_ADC_Start+0x158>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a45      	ldr	r2, [pc, #276]	; (8002094 <HAL_ADC_Start+0x15c>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0c9a      	lsrs	r2, r3, #18
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f8c:	e002      	b.n	8001f94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f9      	bne.n	8001f8e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d15f      	bne.n	8002068 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d007      	beq.n	8001fda <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fd2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fe6:	d106      	bne.n	8001ff6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	f023 0206 	bic.w	r2, r3, #6
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ff4:	e002      	b.n	8001ffc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002004:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_ADC_Start+0x160>)
 8002006:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002010:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10f      	bne.n	800203e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d129      	bne.n	8002080 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	e020      	b.n	8002080 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a16      	ldr	r2, [pc, #88]	; (800209c <HAL_ADC_Start+0x164>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d11b      	bne.n	8002080 <HAL_ADC_Start+0x148>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d114      	bne.n	8002080 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	e00b      	b.n	8002080 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f043 0210 	orr.w	r2, r3, #16
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000000 	.word	0x20000000
 8002094:	431bde83 	.word	0x431bde83
 8002098:	40012300 	.word	0x40012300
 800209c:	40012000 	.word	0x40012000

080020a0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020bc:	d113      	bne.n	80020e6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020cc:	d10b      	bne.n	80020e6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f043 0220 	orr.w	r2, r3, #32
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e063      	b.n	80021ae <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80020e6:	f7ff feb3 	bl	8001e50 <HAL_GetTick>
 80020ea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020ec:	e021      	b.n	8002132 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f4:	d01d      	beq.n	8002132 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <HAL_ADC_PollForConversion+0x6c>
 80020fc:	f7ff fea8 	bl	8001e50 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d212      	bcs.n	8002132 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b02      	cmp	r3, #2
 8002118:	d00b      	beq.n	8002132 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f043 0204 	orr.w	r2, r3, #4
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e03d      	b.n	80021ae <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b02      	cmp	r3, #2
 800213e:	d1d6      	bne.n	80020ee <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0212 	mvn.w	r2, #18
 8002148:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d123      	bne.n	80021ac <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002168:	2b00      	cmp	r3, #0
 800216a:	d11f      	bne.n	80021ac <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002176:	2b00      	cmp	r3, #0
 8002178:	d006      	beq.n	8002188 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002184:	2b00      	cmp	r3, #0
 8002186:	d111      	bne.n	80021ac <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d105      	bne.n	80021ac <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 0201 	orr.w	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x1c>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e113      	b.n	8002414 <HAL_ADC_ConfigChannel+0x244>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b09      	cmp	r3, #9
 80021fa:	d925      	bls.n	8002248 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68d9      	ldr	r1, [r3, #12]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	4613      	mov	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4413      	add	r3, r2
 8002210:	3b1e      	subs	r3, #30
 8002212:	2207      	movs	r2, #7
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43da      	mvns	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	400a      	ands	r2, r1
 8002220:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68d9      	ldr	r1, [r3, #12]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	b29b      	uxth	r3, r3
 8002232:	4618      	mov	r0, r3
 8002234:	4603      	mov	r3, r0
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4403      	add	r3, r0
 800223a:	3b1e      	subs	r3, #30
 800223c:	409a      	lsls	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	e022      	b.n	800228e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6919      	ldr	r1, [r3, #16]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	2207      	movs	r2, #7
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43da      	mvns	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	400a      	ands	r2, r1
 800226a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6919      	ldr	r1, [r3, #16]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	4618      	mov	r0, r3
 800227e:	4603      	mov	r3, r0
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4403      	add	r3, r0
 8002284:	409a      	lsls	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b06      	cmp	r3, #6
 8002294:	d824      	bhi.n	80022e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	3b05      	subs	r3, #5
 80022a8:	221f      	movs	r2, #31
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	400a      	ands	r2, r1
 80022b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4618      	mov	r0, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	3b05      	subs	r3, #5
 80022d2:	fa00 f203 	lsl.w	r2, r0, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	635a      	str	r2, [r3, #52]	; 0x34
 80022de:	e04c      	b.n	800237a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b0c      	cmp	r3, #12
 80022e6:	d824      	bhi.n	8002332 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	3b23      	subs	r3, #35	; 0x23
 80022fa:	221f      	movs	r2, #31
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43da      	mvns	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	400a      	ands	r2, r1
 8002308:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	b29b      	uxth	r3, r3
 8002316:	4618      	mov	r0, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	3b23      	subs	r3, #35	; 0x23
 8002324:	fa00 f203 	lsl.w	r2, r0, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
 8002330:	e023      	b.n	800237a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	3b41      	subs	r3, #65	; 0x41
 8002344:	221f      	movs	r2, #31
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	400a      	ands	r2, r1
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	3b41      	subs	r3, #65	; 0x41
 800236e:	fa00 f203 	lsl.w	r2, r0, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800237a:	4b29      	ldr	r3, [pc, #164]	; (8002420 <HAL_ADC_ConfigChannel+0x250>)
 800237c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a28      	ldr	r2, [pc, #160]	; (8002424 <HAL_ADC_ConfigChannel+0x254>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d10f      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1d8>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b12      	cmp	r3, #18
 800238e:	d10b      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1d      	ldr	r2, [pc, #116]	; (8002424 <HAL_ADC_ConfigChannel+0x254>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d12b      	bne.n	800240a <HAL_ADC_ConfigChannel+0x23a>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <HAL_ADC_ConfigChannel+0x258>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d003      	beq.n	80023c4 <HAL_ADC_ConfigChannel+0x1f4>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b11      	cmp	r3, #17
 80023c2:	d122      	bne.n	800240a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a11      	ldr	r2, [pc, #68]	; (8002428 <HAL_ADC_ConfigChannel+0x258>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d111      	bne.n	800240a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_ADC_ConfigChannel+0x25c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a11      	ldr	r2, [pc, #68]	; (8002430 <HAL_ADC_ConfigChannel+0x260>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	0c9a      	lsrs	r2, r3, #18
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023fc:	e002      	b.n	8002404 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	3b01      	subs	r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f9      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40012300 	.word	0x40012300
 8002424:	40012000 	.word	0x40012000
 8002428:	10000012 	.word	0x10000012
 800242c:	20000000 	.word	0x20000000
 8002430:	431bde83 	.word	0x431bde83

08002434 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800243c:	4b79      	ldr	r3, [pc, #484]	; (8002624 <ADC_Init+0x1f0>)
 800243e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	431a      	orrs	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002468:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6859      	ldr	r1, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	021a      	lsls	r2, r3, #8
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800248c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6899      	ldr	r1, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	4a58      	ldr	r2, [pc, #352]	; (8002628 <ADC_Init+0x1f4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d022      	beq.n	8002512 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6899      	ldr	r1, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6899      	ldr	r1, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	e00f      	b.n	8002532 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002520:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002530:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0202 	bic.w	r2, r2, #2
 8002540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6899      	ldr	r1, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	7e1b      	ldrb	r3, [r3, #24]
 800254c:	005a      	lsls	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01b      	beq.n	8002598 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800256e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800257e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6859      	ldr	r1, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	3b01      	subs	r3, #1
 800258c:	035a      	lsls	r2, r3, #13
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	e007      	b.n	80025a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	051a      	lsls	r2, r3, #20
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6899      	ldr	r1, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025ea:	025a      	lsls	r2, r3, #9
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002602:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6899      	ldr	r1, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	029a      	lsls	r2, r3, #10
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	609a      	str	r2, [r3, #8]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	40012300 	.word	0x40012300
 8002628:	0f000001 	.word	0x0f000001

0800262c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <__NVIC_SetPriorityGrouping+0x44>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002648:	4013      	ands	r3, r2
 800264a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800265c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800265e:	4a04      	ldr	r2, [pc, #16]	; (8002670 <__NVIC_SetPriorityGrouping+0x44>)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	60d3      	str	r3, [r2, #12]
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <__NVIC_GetPriorityGrouping+0x18>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	f003 0307 	and.w	r3, r3, #7
}
 8002682:	4618      	mov	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	db0b      	blt.n	80026ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	f003 021f 	and.w	r2, r3, #31
 80026a8:	4907      	ldr	r1, [pc, #28]	; (80026c8 <__NVIC_EnableIRQ+0x38>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	2001      	movs	r0, #1
 80026b2:	fa00 f202 	lsl.w	r2, r0, r2
 80026b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	e000e100 	.word	0xe000e100

080026cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	6039      	str	r1, [r7, #0]
 80026d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	db0a      	blt.n	80026f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	490c      	ldr	r1, [pc, #48]	; (8002718 <__NVIC_SetPriority+0x4c>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	0112      	lsls	r2, r2, #4
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	440b      	add	r3, r1
 80026f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f4:	e00a      	b.n	800270c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4908      	ldr	r1, [pc, #32]	; (800271c <__NVIC_SetPriority+0x50>)
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	3b04      	subs	r3, #4
 8002704:	0112      	lsls	r2, r2, #4
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	440b      	add	r3, r1
 800270a:	761a      	strb	r2, [r3, #24]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000e100 	.word	0xe000e100
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f1c3 0307 	rsb	r3, r3, #7
 800273a:	2b04      	cmp	r3, #4
 800273c:	bf28      	it	cs
 800273e:	2304      	movcs	r3, #4
 8002740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3304      	adds	r3, #4
 8002746:	2b06      	cmp	r3, #6
 8002748:	d902      	bls.n	8002750 <NVIC_EncodePriority+0x30>
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3b03      	subs	r3, #3
 800274e:	e000      	b.n	8002752 <NVIC_EncodePriority+0x32>
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43da      	mvns	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	401a      	ands	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002768:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	43d9      	mvns	r1, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002778:	4313      	orrs	r3, r2
         );
}
 800277a:	4618      	mov	r0, r3
 800277c:	3724      	adds	r7, #36	; 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3b01      	subs	r3, #1
 8002794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002798:	d301      	bcc.n	800279e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800279a:	2301      	movs	r3, #1
 800279c:	e00f      	b.n	80027be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800279e:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <SysTick_Config+0x40>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027a6:	210f      	movs	r1, #15
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027ac:	f7ff ff8e 	bl	80026cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <SysTick_Config+0x40>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027b6:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <SysTick_Config+0x40>)
 80027b8:	2207      	movs	r2, #7
 80027ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	e000e010 	.word	0xe000e010

080027cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff ff29 	bl	800262c <__NVIC_SetPriorityGrouping>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027f4:	f7ff ff3e 	bl	8002674 <__NVIC_GetPriorityGrouping>
 80027f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	6978      	ldr	r0, [r7, #20]
 8002800:	f7ff ff8e 	bl	8002720 <NVIC_EncodePriority>
 8002804:	4602      	mov	r2, r0
 8002806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280a:	4611      	mov	r1, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff5d 	bl	80026cc <__NVIC_SetPriority>
}
 8002812:	bf00      	nop
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff31 	bl	8002690 <__NVIC_EnableIRQ>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff ffa2 	bl	8002788 <SysTick_Config>
 8002844:	4603      	mov	r3, r0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	e159      	b.n	8002b20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800286c:	2201      	movs	r2, #1
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	429a      	cmp	r2, r3
 8002886:	f040 8148 	bne.w	8002b1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b01      	cmp	r3, #1
 8002894:	d005      	beq.n	80028a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d130      	bne.n	8002904 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	2203      	movs	r2, #3
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d8:	2201      	movs	r2, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 0201 	and.w	r2, r3, #1
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	2b03      	cmp	r3, #3
 800290e:	d017      	beq.n	8002940 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	2203      	movs	r2, #3
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d123      	bne.n	8002994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	08da      	lsrs	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3208      	adds	r2, #8
 8002954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	220f      	movs	r2, #15
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	08da      	lsrs	r2, r3, #3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3208      	adds	r2, #8
 800298e:	69b9      	ldr	r1, [r7, #24]
 8002990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	2203      	movs	r2, #3
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0203 	and.w	r2, r3, #3
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80a2 	beq.w	8002b1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	4b57      	ldr	r3, [pc, #348]	; (8002b38 <HAL_GPIO_Init+0x2e8>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	4a56      	ldr	r2, [pc, #344]	; (8002b38 <HAL_GPIO_Init+0x2e8>)
 80029e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e4:	6453      	str	r3, [r2, #68]	; 0x44
 80029e6:	4b54      	ldr	r3, [pc, #336]	; (8002b38 <HAL_GPIO_Init+0x2e8>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029f2:	4a52      	ldr	r2, [pc, #328]	; (8002b3c <HAL_GPIO_Init+0x2ec>)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	089b      	lsrs	r3, r3, #2
 80029f8:	3302      	adds	r3, #2
 80029fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	220f      	movs	r2, #15
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a49      	ldr	r2, [pc, #292]	; (8002b40 <HAL_GPIO_Init+0x2f0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d019      	beq.n	8002a52 <HAL_GPIO_Init+0x202>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a48      	ldr	r2, [pc, #288]	; (8002b44 <HAL_GPIO_Init+0x2f4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <HAL_GPIO_Init+0x1fe>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a47      	ldr	r2, [pc, #284]	; (8002b48 <HAL_GPIO_Init+0x2f8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00d      	beq.n	8002a4a <HAL_GPIO_Init+0x1fa>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a46      	ldr	r2, [pc, #280]	; (8002b4c <HAL_GPIO_Init+0x2fc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d007      	beq.n	8002a46 <HAL_GPIO_Init+0x1f6>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a45      	ldr	r2, [pc, #276]	; (8002b50 <HAL_GPIO_Init+0x300>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <HAL_GPIO_Init+0x1f2>
 8002a3e:	2304      	movs	r3, #4
 8002a40:	e008      	b.n	8002a54 <HAL_GPIO_Init+0x204>
 8002a42:	2307      	movs	r3, #7
 8002a44:	e006      	b.n	8002a54 <HAL_GPIO_Init+0x204>
 8002a46:	2303      	movs	r3, #3
 8002a48:	e004      	b.n	8002a54 <HAL_GPIO_Init+0x204>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e002      	b.n	8002a54 <HAL_GPIO_Init+0x204>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_GPIO_Init+0x204>
 8002a52:	2300      	movs	r3, #0
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	f002 0203 	and.w	r2, r2, #3
 8002a5a:	0092      	lsls	r2, r2, #2
 8002a5c:	4093      	lsls	r3, r2
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a64:	4935      	ldr	r1, [pc, #212]	; (8002b3c <HAL_GPIO_Init+0x2ec>)
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	089b      	lsrs	r3, r3, #2
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a72:	4b38      	ldr	r3, [pc, #224]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a96:	4a2f      	ldr	r2, [pc, #188]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a9c:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac0:	4a24      	ldr	r2, [pc, #144]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ac6:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aea:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af0:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b14:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	2b0f      	cmp	r3, #15
 8002b24:	f67f aea2 	bls.w	800286c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40013800 	.word	0x40013800
 8002b40:	40020000 	.word	0x40020000
 8002b44:	40020400 	.word	0x40020400
 8002b48:	40020800 	.word	0x40020800
 8002b4c:	40020c00 	.word	0x40020c00
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40013c00 	.word	0x40013c00

08002b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
 8002b64:	4613      	mov	r3, r2
 8002b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b68:	787b      	ldrb	r3, [r7, #1]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6e:	887a      	ldrh	r2, [r7, #2]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b74:	e003      	b.n	8002b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	041a      	lsls	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	619a      	str	r2, [r3, #24]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b96:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d006      	beq.n	8002bb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ba2:	4a05      	ldr	r2, [pc, #20]	; (8002bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ba8:	88fb      	ldrh	r3, [r7, #6]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 f806 	bl	8002bbc <HAL_GPIO_EXTI_Callback>
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40013c00 	.word	0x40013c00

08002bbc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e12b      	b.n	8002e3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fe fd64 	bl	80016c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2224      	movs	r2, #36	; 0x24
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c38:	f001 ffbe 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8002c3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4a81      	ldr	r2, [pc, #516]	; (8002e48 <HAL_I2C_Init+0x274>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d807      	bhi.n	8002c58 <HAL_I2C_Init+0x84>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4a80      	ldr	r2, [pc, #512]	; (8002e4c <HAL_I2C_Init+0x278>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	bf94      	ite	ls
 8002c50:	2301      	movls	r3, #1
 8002c52:	2300      	movhi	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	e006      	b.n	8002c66 <HAL_I2C_Init+0x92>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4a7d      	ldr	r2, [pc, #500]	; (8002e50 <HAL_I2C_Init+0x27c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	bf94      	ite	ls
 8002c60:	2301      	movls	r3, #1
 8002c62:	2300      	movhi	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e0e7      	b.n	8002e3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4a78      	ldr	r2, [pc, #480]	; (8002e54 <HAL_I2C_Init+0x280>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	0c9b      	lsrs	r3, r3, #18
 8002c78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4a6a      	ldr	r2, [pc, #424]	; (8002e48 <HAL_I2C_Init+0x274>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d802      	bhi.n	8002ca8 <HAL_I2C_Init+0xd4>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	e009      	b.n	8002cbc <HAL_I2C_Init+0xe8>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	4a69      	ldr	r2, [pc, #420]	; (8002e58 <HAL_I2C_Init+0x284>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	099b      	lsrs	r3, r3, #6
 8002cba:	3301      	adds	r3, #1
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	495c      	ldr	r1, [pc, #368]	; (8002e48 <HAL_I2C_Init+0x274>)
 8002cd8:	428b      	cmp	r3, r1
 8002cda:	d819      	bhi.n	8002d10 <HAL_I2C_Init+0x13c>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1e59      	subs	r1, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cea:	1c59      	adds	r1, r3, #1
 8002cec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cf0:	400b      	ands	r3, r1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HAL_I2C_Init+0x138>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1e59      	subs	r1, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d04:	3301      	adds	r3, #1
 8002d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0a:	e051      	b.n	8002db0 <HAL_I2C_Init+0x1dc>
 8002d0c:	2304      	movs	r3, #4
 8002d0e:	e04f      	b.n	8002db0 <HAL_I2C_Init+0x1dc>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d111      	bne.n	8002d3c <HAL_I2C_Init+0x168>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1e58      	subs	r0, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	440b      	add	r3, r1
 8002d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e012      	b.n	8002d62 <HAL_I2C_Init+0x18e>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1e58      	subs	r0, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	0099      	lsls	r1, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_I2C_Init+0x196>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e022      	b.n	8002db0 <HAL_I2C_Init+0x1dc>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10e      	bne.n	8002d90 <HAL_I2C_Init+0x1bc>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1e58      	subs	r0, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6859      	ldr	r1, [r3, #4]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	440b      	add	r3, r1
 8002d80:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d84:	3301      	adds	r3, #1
 8002d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d8e:	e00f      	b.n	8002db0 <HAL_I2C_Init+0x1dc>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	1e58      	subs	r0, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	0099      	lsls	r1, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da6:	3301      	adds	r3, #1
 8002da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	6809      	ldr	r1, [r1, #0]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69da      	ldr	r2, [r3, #28]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6911      	ldr	r1, [r2, #16]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68d2      	ldr	r2, [r2, #12]
 8002dea:	4311      	orrs	r1, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	430b      	orrs	r3, r1
 8002df2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	000186a0 	.word	0x000186a0
 8002e4c:	001e847f 	.word	0x001e847f
 8002e50:	003d08ff 	.word	0x003d08ff
 8002e54:	431bde83 	.word	0x431bde83
 8002e58:	10624dd3 	.word	0x10624dd3

08002e5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e5e:	b08f      	sub	sp, #60	; 0x3c
 8002e60:	af0a      	add	r7, sp, #40	; 0x28
 8002e62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e10f      	b.n	800308e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d106      	bne.n	8002e8e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f006 ffe1 	bl	8009e50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2203      	movs	r2, #3
 8002e92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f003 fac8 	bl	8006442 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	687e      	ldr	r6, [r7, #4]
 8002eba:	466d      	mov	r5, sp
 8002ebc:	f106 0410 	add.w	r4, r6, #16
 8002ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ecc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ed0:	1d33      	adds	r3, r6, #4
 8002ed2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ed4:	6838      	ldr	r0, [r7, #0]
 8002ed6:	f003 f99f 	bl	8006218 <USB_CoreInit>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0d0      	b.n	800308e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 fab6 	bl	8006464 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]
 8002efc:	e04a      	b.n	8002f94 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	333d      	adds	r3, #61	; 0x3d
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f12:	7bfa      	ldrb	r2, [r7, #15]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	333c      	adds	r3, #60	; 0x3c
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	b298      	uxth	r0, r3
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3344      	adds	r3, #68	; 0x44
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f3e:	7bfa      	ldrb	r2, [r7, #15]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	3340      	adds	r3, #64	; 0x40
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f52:	7bfa      	ldrb	r2, [r7, #15]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	3348      	adds	r3, #72	; 0x48
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f66:	7bfa      	ldrb	r2, [r7, #15]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	334c      	adds	r3, #76	; 0x4c
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f7a:	7bfa      	ldrb	r2, [r7, #15]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	3354      	adds	r3, #84	; 0x54
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	3301      	adds	r3, #1
 8002f92:	73fb      	strb	r3, [r7, #15]
 8002f94:	7bfa      	ldrb	r2, [r7, #15]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d3af      	bcc.n	8002efe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	e044      	b.n	800302e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fa4:	7bfa      	ldrb	r2, [r7, #15]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fba:	7bfa      	ldrb	r2, [r7, #15]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fe6:	7bfa      	ldrb	r2, [r7, #15]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003012:	7bfa      	ldrb	r2, [r7, #15]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	3301      	adds	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	d3b5      	bcc.n	8002fa4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	603b      	str	r3, [r7, #0]
 800303e:	687e      	ldr	r6, [r7, #4]
 8003040:	466d      	mov	r5, sp
 8003042:	f106 0410 	add.w	r4, r6, #16
 8003046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800304a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800304c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800304e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003052:	e885 0003 	stmia.w	r5, {r0, r1}
 8003056:	1d33      	adds	r3, r6, #4
 8003058:	cb0e      	ldmia	r3, {r1, r2, r3}
 800305a:	6838      	ldr	r0, [r7, #0]
 800305c:	f003 fa4e 	bl	80064fc <USB_DevInit>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2202      	movs	r2, #2
 800306a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e00d      	b.n	800308e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f004 fb9d 	bl	80077c6 <USB_DevDisconnect>

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003096 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_PCD_Start+0x1c>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e020      	b.n	80030f4 <HAL_PCD_Start+0x5e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d109      	bne.n	80030d6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d005      	beq.n	80030d6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f003 f9a0 	bl	8006420 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f004 fb4d 	bl	8007784 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b08d      	sub	sp, #52	; 0x34
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f004 fc0b 	bl	800792e <USB_GetMode>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	f040 848a 	bne.w	8003a34 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f004 fb6f 	bl	8007808 <USB_ReadInterrupts>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 8480 	beq.w	8003a32 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f004 fb5c 	bl	8007808 <USB_ReadInterrupts>
 8003150:	4603      	mov	r3, r0
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b02      	cmp	r3, #2
 8003158:	d107      	bne.n	800316a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f002 0202 	and.w	r2, r2, #2
 8003168:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f004 fb4a 	bl	8007808 <USB_ReadInterrupts>
 8003174:	4603      	mov	r3, r0
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	2b10      	cmp	r3, #16
 800317c:	d161      	bne.n	8003242 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699a      	ldr	r2, [r3, #24]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0210 	bic.w	r2, r2, #16
 800318c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f003 020f 	and.w	r2, r3, #15
 800319a:	4613      	mov	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	3304      	adds	r3, #4
 80031ac:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	0c5b      	lsrs	r3, r3, #17
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d124      	bne.n	8003204 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d035      	beq.n	8003232 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	6a38      	ldr	r0, [r7, #32]
 80031da:	f004 f981 	bl	80074e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031ea:	441a      	add	r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	6a1a      	ldr	r2, [r3, #32]
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031fc:	441a      	add	r2, r3
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	621a      	str	r2, [r3, #32]
 8003202:	e016      	b.n	8003232 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	0c5b      	lsrs	r3, r3, #17
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	2b06      	cmp	r3, #6
 800320e:	d110      	bne.n	8003232 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003216:	2208      	movs	r2, #8
 8003218:	4619      	mov	r1, r3
 800321a:	6a38      	ldr	r0, [r7, #32]
 800321c:	f004 f960 	bl	80074e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	6a1a      	ldr	r2, [r3, #32]
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	091b      	lsrs	r3, r3, #4
 8003228:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800322c:	441a      	add	r2, r3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699a      	ldr	r2, [r3, #24]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0210 	orr.w	r2, r2, #16
 8003240:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f004 fade 	bl	8007808 <USB_ReadInterrupts>
 800324c:	4603      	mov	r3, r0
 800324e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003252:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003256:	f040 80a7 	bne.w	80033a8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f004 fae3 	bl	800782e <USB_ReadDevAllOutEpInterrupt>
 8003268:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800326a:	e099      	b.n	80033a0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 808e 	beq.w	8003394 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f004 fb07 	bl	8007896 <USB_ReadDevOutEPInterrupt>
 8003288:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00c      	beq.n	80032ae <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a0:	461a      	mov	r2, r3
 80032a2:	2301      	movs	r3, #1
 80032a4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80032a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fec3 	bl	8004034 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00c      	beq.n	80032d2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c4:	461a      	mov	r2, r3
 80032c6:	2308      	movs	r3, #8
 80032c8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80032ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 ff99 	bl	8004204 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e8:	461a      	mov	r2, r3
 80032ea:	2310      	movs	r3, #16
 80032ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d030      	beq.n	800335a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003300:	2b80      	cmp	r3, #128	; 0x80
 8003302:	d109      	bne.n	8003318 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003316:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	4413      	add	r3, r2
 800332a:	3304      	adds	r3, #4
 800332c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	78db      	ldrb	r3, [r3, #3]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d108      	bne.n	8003348 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2200      	movs	r2, #0
 800333a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	b2db      	uxtb	r3, r3
 8003340:	4619      	mov	r1, r3
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f006 fe80 	bl	800a048 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003354:	461a      	mov	r2, r3
 8003356:	2302      	movs	r3, #2
 8003358:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	4413      	add	r3, r2
 800336c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003370:	461a      	mov	r2, r3
 8003372:	2320      	movs	r3, #32
 8003374:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d009      	beq.n	8003394 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338c:	461a      	mov	r2, r3
 800338e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003392:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	3301      	adds	r3, #1
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f47f af62 	bne.w	800326c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f004 fa2b 	bl	8007808 <USB_ReadInterrupts>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033bc:	f040 80db 	bne.w	8003576 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f004 fa4c 	bl	8007862 <USB_ReadDevAllInEpInterrupt>
 80033ca:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80033d0:	e0cd      	b.n	800356e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80c2 	beq.w	8003562 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	4611      	mov	r1, r2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f004 fa72 	bl	80078d2 <USB_ReadDevInEPInterrupt>
 80033ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d057      	beq.n	80034aa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	2201      	movs	r2, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800340e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	43db      	mvns	r3, r3
 8003414:	69f9      	ldr	r1, [r7, #28]
 8003416:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800341a:	4013      	ands	r3, r2
 800341c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	4413      	add	r3, r2
 8003426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342a:	461a      	mov	r2, r3
 800342c:	2301      	movs	r3, #1
 800342e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d132      	bne.n	800349e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343c:	4613      	mov	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	334c      	adds	r3, #76	; 0x4c
 8003448:	6819      	ldr	r1, [r3, #0]
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4403      	add	r3, r0
 8003458:	3348      	adds	r3, #72	; 0x48
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4419      	add	r1, r3
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003462:	4613      	mov	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4403      	add	r3, r0
 800346c:	334c      	adds	r3, #76	; 0x4c
 800346e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	2b00      	cmp	r3, #0
 8003474:	d113      	bne.n	800349e <HAL_PCD_IRQHandler+0x3a2>
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347a:	4613      	mov	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	3354      	adds	r3, #84	; 0x54
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d108      	bne.n	800349e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003496:	461a      	mov	r2, r3
 8003498:	2101      	movs	r1, #1
 800349a:	f004 fa79 	bl	8007990 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	4619      	mov	r1, r3
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f006 fd54 	bl	8009f52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c0:	461a      	mov	r2, r3
 80034c2:	2308      	movs	r3, #8
 80034c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034dc:	461a      	mov	r2, r3
 80034de:	2310      	movs	r3, #16
 80034e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f8:	461a      	mov	r2, r3
 80034fa:	2340      	movs	r3, #64	; 0x40
 80034fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d023      	beq.n	8003550 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800350a:	6a38      	ldr	r0, [r7, #32]
 800350c:	f003 f95a 	bl	80067c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	3338      	adds	r3, #56	; 0x38
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	4413      	add	r3, r2
 8003520:	3304      	adds	r3, #4
 8003522:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	78db      	ldrb	r3, [r3, #3]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d108      	bne.n	800353e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2200      	movs	r2, #0
 8003530:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	b2db      	uxtb	r3, r3
 8003536:	4619      	mov	r1, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f006 fd97 	bl	800a06c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354a:	461a      	mov	r2, r3
 800354c:	2302      	movs	r3, #2
 800354e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800355a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fcdb 	bl	8003f18 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	3301      	adds	r3, #1
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	f47f af2e 	bne.w	80033d2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f004 f944 	bl	8007808 <USB_ReadInterrupts>
 8003580:	4603      	mov	r3, r0
 8003582:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003586:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800358a:	d122      	bne.n	80035d2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d108      	bne.n	80035bc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035b2:	2100      	movs	r1, #0
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fec3 	bl	8004340 <HAL_PCDEx_LPM_Callback>
 80035ba:	e002      	b.n	80035c2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f006 fd35 	bl	800a02c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695a      	ldr	r2, [r3, #20]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80035d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f004 f916 	bl	8007808 <USB_ReadInterrupts>
 80035dc:	4603      	mov	r3, r0
 80035de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e6:	d112      	bne.n	800360e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d102      	bne.n	80035fe <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f006 fcf1 	bl	8009fe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800360c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f004 f8f8 	bl	8007808 <USB_ReadInterrupts>
 8003618:	4603      	mov	r3, r0
 800361a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800361e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003622:	f040 80b7 	bne.w	8003794 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2110      	movs	r1, #16
 8003640:	4618      	mov	r0, r3
 8003642:	f003 f8bf 	bl	80067c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003646:	2300      	movs	r3, #0
 8003648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800364a:	e046      	b.n	80036da <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003658:	461a      	mov	r2, r3
 800365a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800365e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003670:	0151      	lsls	r1, r2, #5
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	440a      	add	r2, r1
 8003676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800367a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800367e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	4413      	add	r3, r2
 8003688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368c:	461a      	mov	r2, r3
 800368e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003692:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a4:	0151      	lsls	r1, r2, #5
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	440a      	add	r2, r1
 80036aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c4:	0151      	lsls	r1, r2, #5
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	440a      	add	r2, r1
 80036ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036d2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d6:	3301      	adds	r3, #1
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d3b3      	bcc.n	800364c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036f2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036f6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d016      	beq.n	800372e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003710:	f043 030b 	orr.w	r3, r3, #11
 8003714:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	69fa      	ldr	r2, [r7, #28]
 8003722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003726:	f043 030b 	orr.w	r3, r3, #11
 800372a:	6453      	str	r3, [r2, #68]	; 0x44
 800372c:	e015      	b.n	800375a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800373c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003740:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003744:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003754:	f043 030b 	orr.w	r3, r3, #11
 8003758:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003768:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800376c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800377e:	461a      	mov	r2, r3
 8003780:	f004 f906 	bl	8007990 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003792:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f004 f835 	bl	8007808 <USB_ReadInterrupts>
 800379e:	4603      	mov	r3, r0
 80037a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a8:	d124      	bne.n	80037f4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f004 f8cb 	bl	800794a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f003 f880 	bl	80068be <USB_GetDevSpeed>
 80037be:	4603      	mov	r3, r0
 80037c0:	461a      	mov	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681c      	ldr	r4, [r3, #0]
 80037ca:	f001 f9e9 	bl	8004ba0 <HAL_RCC_GetHCLKFreq>
 80037ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	4620      	mov	r0, r4
 80037da:	f002 fd7f 	bl	80062dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f006 fbdf 	bl	8009fa2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80037f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f004 f805 	bl	8007808 <USB_ReadInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b08      	cmp	r3, #8
 8003806:	d10a      	bne.n	800381e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f006 fbbc 	bl	8009f86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f002 0208 	and.w	r2, r2, #8
 800381c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f003 fff0 	bl	8007808 <USB_ReadInterrupts>
 8003828:	4603      	mov	r3, r0
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	2b80      	cmp	r3, #128	; 0x80
 8003830:	d122      	bne.n	8003878 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800383e:	2301      	movs	r3, #1
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
 8003842:	e014      	b.n	800386e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d105      	bne.n	8003868 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	b2db      	uxtb	r3, r3
 8003860:	4619      	mov	r1, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fb27 	bl	8003eb6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	3301      	adds	r3, #1
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003874:	429a      	cmp	r2, r3
 8003876:	d3e5      	bcc.n	8003844 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f003 ffc3 	bl	8007808 <USB_ReadInterrupts>
 8003882:	4603      	mov	r3, r0
 8003884:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800388c:	d13b      	bne.n	8003906 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800388e:	2301      	movs	r3, #1
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
 8003892:	e02b      	b.n	80038ec <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a8:	4613      	mov	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	3340      	adds	r3, #64	; 0x40
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d115      	bne.n	80038e6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80038ba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038bc:	2b00      	cmp	r3, #0
 80038be:	da12      	bge.n	80038e6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	333f      	adds	r3, #63	; 0x3f
 80038d0:	2201      	movs	r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	4619      	mov	r1, r3
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fae8 	bl	8003eb6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	3301      	adds	r3, #1
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d3ce      	bcc.n	8003894 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003904:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f003 ff7c 	bl	8007808 <USB_ReadInterrupts>
 8003910:	4603      	mov	r3, r0
 8003912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003916:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800391a:	d155      	bne.n	80039c8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800391c:	2301      	movs	r3, #1
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
 8003920:	e045      	b.n	80039ae <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d12e      	bne.n	80039a8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800394a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800394c:	2b00      	cmp	r3, #0
 800394e:	da2b      	bge.n	80039a8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800395c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003960:	429a      	cmp	r2, r3
 8003962:	d121      	bne.n	80039a8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003968:	4613      	mov	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003976:	2201      	movs	r2, #1
 8003978:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10a      	bne.n	80039a8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039a4:	6053      	str	r3, [r2, #4]
            break;
 80039a6:	e007      	b.n	80039b8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	3301      	adds	r3, #1
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d3b4      	bcc.n	8003922 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80039c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f003 ff1b 	bl	8007808 <USB_ReadInterrupts>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039dc:	d10a      	bne.n	80039f4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f006 fb56 	bl	800a090 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80039f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f003 ff05 	bl	8007808 <USB_ReadInterrupts>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d115      	bne.n	8003a34 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f006 fb46 	bl	800a0ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	605a      	str	r2, [r3, #4]
 8003a30:	e000      	b.n	8003a34 <HAL_PCD_IRQHandler+0x938>
      return;
 8003a32:	bf00      	nop
    }
  }
}
 8003a34:	3734      	adds	r7, #52	; 0x34
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd90      	pop	{r4, r7, pc}

08003a3a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	460b      	mov	r3, r1
 8003a44:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_PCD_SetAddress+0x1a>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e013      	b.n	8003a7c <HAL_PCD_SetAddress+0x42>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f003 fe63 	bl	8007738 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	4608      	mov	r0, r1
 8003a8e:	4611      	mov	r1, r2
 8003a90:	461a      	mov	r2, r3
 8003a92:	4603      	mov	r3, r0
 8003a94:	70fb      	strb	r3, [r7, #3]
 8003a96:	460b      	mov	r3, r1
 8003a98:	803b      	strh	r3, [r7, #0]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003aa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	da0f      	bge.n	8003aca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	f003 020f 	and.w	r2, r3, #15
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	3338      	adds	r3, #56	; 0x38
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	3304      	adds	r3, #4
 8003ac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	705a      	strb	r2, [r3, #1]
 8003ac8:	e00f      	b.n	8003aea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	f003 020f 	and.w	r2, r3, #15
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	4413      	add	r3, r2
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003af6:	883a      	ldrh	r2, [r7, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	78ba      	ldrb	r2, [r7, #2]
 8003b00:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	785b      	ldrb	r3, [r3, #1]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d004      	beq.n	8003b14 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b14:	78bb      	ldrb	r3, [r7, #2]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d102      	bne.n	8003b20 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_PCD_EP_Open+0xaa>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e00e      	b.n	8003b4c <HAL_PCD_EP_Open+0xc8>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68f9      	ldr	r1, [r7, #12]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f002 fee3 	bl	8006908 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003b4a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	da0f      	bge.n	8003b88 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	f003 020f 	and.w	r2, r3, #15
 8003b6e:	4613      	mov	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	3338      	adds	r3, #56	; 0x38
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	705a      	strb	r2, [r3, #1]
 8003b86:	e00f      	b.n	8003ba8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	f003 020f 	and.w	r2, r3, #15
 8003b8e:	4613      	mov	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_PCD_EP_Close+0x6e>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e00e      	b.n	8003be0 <HAL_PCD_EP_Close+0x8c>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68f9      	ldr	r1, [r7, #12]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f002 ff21 	bl	8006a18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bf8:	7afb      	ldrb	r3, [r7, #11]
 8003bfa:	f003 020f 	and.w	r2, r3, #15
 8003bfe:	4613      	mov	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3304      	adds	r3, #4
 8003c10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2200      	movs	r2, #0
 8003c22:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2200      	movs	r2, #0
 8003c28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c2a:	7afb      	ldrb	r3, [r7, #11]
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d102      	bne.n	8003c44 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c44:	7afb      	ldrb	r3, [r7, #11]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	461a      	mov	r2, r3
 8003c5a:	6979      	ldr	r1, [r7, #20]
 8003c5c:	f003 fa00 	bl	8007060 <USB_EP0StartXfer>
 8003c60:	e008      	b.n	8003c74 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6979      	ldr	r1, [r7, #20]
 8003c70:	f002 ffae 	bl	8006bd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	460b      	mov	r3, r1
 8003c88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	f003 020f 	and.w	r2, r3, #15
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003ca0:	681b      	ldr	r3, [r3, #0]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cbe:	7afb      	ldrb	r3, [r7, #11]
 8003cc0:	f003 020f 	and.w	r2, r3, #15
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	3338      	adds	r3, #56	; 0x38
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2201      	movs	r2, #1
 8003cec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cee:	7afb      	ldrb	r3, [r7, #11]
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d102      	bne.n	8003d08 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d08:	7afb      	ldrb	r3, [r7, #11]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	6979      	ldr	r1, [r7, #20]
 8003d20:	f003 f99e 	bl	8007060 <USB_EP0StartXfer>
 8003d24:	e008      	b.n	8003d38 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	6979      	ldr	r1, [r7, #20]
 8003d34:	f002 ff4c 	bl	8006bd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d4e:	78fb      	ldrb	r3, [r7, #3]
 8003d50:	f003 020f 	and.w	r2, r3, #15
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d901      	bls.n	8003d60 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e050      	b.n	8003e02 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	da0f      	bge.n	8003d88 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	f003 020f 	and.w	r2, r3, #15
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	3338      	adds	r3, #56	; 0x38
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	705a      	strb	r2, [r3, #1]
 8003d86:	e00d      	b.n	8003da4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d88:	78fa      	ldrb	r2, [r7, #3]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	4413      	add	r3, r2
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_PCD_EP_SetStall+0x82>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e01e      	b.n	8003e02 <HAL_PCD_EP_SetStall+0xc0>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68f9      	ldr	r1, [r7, #12]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f003 fbdc 	bl	8007590 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	b2d9      	uxtb	r1, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003df2:	461a      	mov	r2, r3
 8003df4:	f003 fdcc 	bl	8007990 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	460b      	mov	r3, r1
 8003e14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	f003 020f 	and.w	r2, r3, #15
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d901      	bls.n	8003e28 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e042      	b.n	8003eae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	da0f      	bge.n	8003e50 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	f003 020f 	and.w	r2, r3, #15
 8003e36:	4613      	mov	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	3338      	adds	r3, #56	; 0x38
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4413      	add	r3, r2
 8003e44:	3304      	adds	r3, #4
 8003e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	705a      	strb	r2, [r3, #1]
 8003e4e:	e00f      	b.n	8003e70 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	f003 020f 	and.w	r2, r3, #15
 8003e56:	4613      	mov	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	3304      	adds	r3, #4
 8003e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e76:	78fb      	ldrb	r3, [r7, #3]
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_PCD_EP_ClrStall+0x86>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e00e      	b.n	8003eae <HAL_PCD_EP_ClrStall+0xa4>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68f9      	ldr	r1, [r7, #12]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f003 fbe4 	bl	800766c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003ec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	da0c      	bge.n	8003ee4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	f003 020f 	and.w	r2, r3, #15
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	3338      	adds	r3, #56	; 0x38
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	4413      	add	r3, r2
 8003ede:	3304      	adds	r3, #4
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	e00c      	b.n	8003efe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	f003 020f 	and.w	r2, r3, #15
 8003eea:	4613      	mov	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	4413      	add	r3, r2
 8003efa:	3304      	adds	r3, #4
 8003efc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68f9      	ldr	r1, [r7, #12]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f003 fa03 	bl	8007310 <USB_EPStopXfer>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f0e:	7afb      	ldrb	r3, [r7, #11]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	; 0x28
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	3338      	adds	r3, #56	; 0x38
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a1a      	ldr	r2, [r3, #32]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d901      	bls.n	8003f50 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e06c      	b.n	800402a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	699a      	ldr	r2, [r3, #24]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d902      	bls.n	8003f6c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	3303      	adds	r3, #3
 8003f70:	089b      	lsrs	r3, r3, #2
 8003f72:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f74:	e02b      	b.n	8003fce <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	699a      	ldr	r2, [r3, #24]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d902      	bls.n	8003f92 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3303      	adds	r3, #3
 8003f96:	089b      	lsrs	r3, r3, #2
 8003f98:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6919      	ldr	r1, [r3, #16]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	4603      	mov	r3, r0
 8003fb0:	6978      	ldr	r0, [r7, #20]
 8003fb2:	f003 fa57 	bl	8007464 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	441a      	add	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1a      	ldr	r2, [r3, #32]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	441a      	add	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d809      	bhi.n	8003ff8 <PCD_WriteEmptyTxFifo+0xe0>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a1a      	ldr	r2, [r3, #32]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d203      	bcs.n	8003ff8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1be      	bne.n	8003f76 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	699a      	ldr	r2, [r3, #24]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	429a      	cmp	r2, r3
 8004002:	d811      	bhi.n	8004028 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	2201      	movs	r2, #1
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	43db      	mvns	r3, r3
 800401e:	6939      	ldr	r1, [r7, #16]
 8004020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004024:	4013      	ands	r3, r2
 8004026:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	333c      	adds	r3, #60	; 0x3c
 800404c:	3304      	adds	r3, #4
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d17b      	bne.n	8004162 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d015      	beq.n	80040a0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	4a61      	ldr	r2, [pc, #388]	; (80041fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	f240 80b9 	bls.w	80041f0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 80b3 	beq.w	80041f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004096:	461a      	mov	r2, r3
 8004098:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800409c:	6093      	str	r3, [r2, #8]
 800409e:	e0a7      	b.n	80041f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b6:	461a      	mov	r2, r3
 80040b8:	2320      	movs	r3, #32
 80040ba:	6093      	str	r3, [r2, #8]
 80040bc:	e098      	b.n	80041f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f040 8093 	bne.w	80041f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	4a4b      	ldr	r2, [pc, #300]	; (80041fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d90f      	bls.n	80040f2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e8:	461a      	mov	r2, r3
 80040ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ee:	6093      	str	r3, [r2, #8]
 80040f0:	e07e      	b.n	80041f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	4613      	mov	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	4413      	add	r3, r2
 8004104:	3304      	adds	r3, #4
 8004106:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	69da      	ldr	r2, [r3, #28]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	0159      	lsls	r1, r3, #5
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	440b      	add	r3, r1
 8004114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800411e:	1ad2      	subs	r2, r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d114      	bne.n	8004154 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800413c:	461a      	mov	r2, r3
 800413e:	2101      	movs	r1, #1
 8004140:	f003 fc26 	bl	8007990 <USB_EP0_OutStart>
 8004144:	e006      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	441a      	add	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	4619      	mov	r1, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f005 fede 	bl	8009f1c <HAL_PCD_DataOutStageCallback>
 8004160:	e046      	b.n	80041f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	4a26      	ldr	r2, [pc, #152]	; (8004200 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d124      	bne.n	80041b4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004180:	461a      	mov	r2, r3
 8004182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004186:	6093      	str	r3, [r2, #8]
 8004188:	e032      	b.n	80041f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a0:	461a      	mov	r2, r3
 80041a2:	2320      	movs	r3, #32
 80041a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	4619      	mov	r1, r3
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f005 feb5 	bl	8009f1c <HAL_PCD_DataOutStageCallback>
 80041b2:	e01d      	b.n	80041f0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d114      	bne.n	80041e4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	4613      	mov	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d108      	bne.n	80041e4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041dc:	461a      	mov	r2, r3
 80041de:	2100      	movs	r1, #0
 80041e0:	f003 fbd6 	bl	8007990 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	4619      	mov	r1, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f005 fe96 	bl	8009f1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	4f54300a 	.word	0x4f54300a
 8004200:	4f54310a 	.word	0x4f54310a

08004204 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	333c      	adds	r3, #60	; 0x3c
 800421c:	3304      	adds	r3, #4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4a15      	ldr	r2, [pc, #84]	; (800428c <PCD_EP_OutSetupPacket_int+0x88>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d90e      	bls.n	8004258 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004240:	2b00      	cmp	r3, #0
 8004242:	d009      	beq.n	8004258 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004250:	461a      	mov	r2, r3
 8004252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004256:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f005 fe4d 	bl	8009ef8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4a0a      	ldr	r2, [pc, #40]	; (800428c <PCD_EP_OutSetupPacket_int+0x88>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d90c      	bls.n	8004280 <PCD_EP_OutSetupPacket_int+0x7c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d108      	bne.n	8004280 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004278:	461a      	mov	r2, r3
 800427a:	2101      	movs	r1, #1
 800427c:	f003 fb88 	bl	8007990 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	4f54300a 	.word	0x4f54300a

08004290 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	70fb      	strb	r3, [r7, #3]
 800429c:	4613      	mov	r3, r2
 800429e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d107      	bne.n	80042be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042ae:	883b      	ldrh	r3, [r7, #0]
 80042b0:	0419      	lsls	r1, r3, #16
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28
 80042bc:	e028      	b.n	8004310 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	4413      	add	r3, r2
 80042ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042cc:	2300      	movs	r3, #0
 80042ce:	73fb      	strb	r3, [r7, #15]
 80042d0:	e00d      	b.n	80042ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
 80042d8:	3340      	adds	r3, #64	; 0x40
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	0c1b      	lsrs	r3, r3, #16
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	4413      	add	r3, r2
 80042e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	3301      	adds	r3, #1
 80042ec:	73fb      	strb	r3, [r7, #15]
 80042ee:	7bfa      	ldrb	r2, [r7, #15]
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d3ec      	bcc.n	80042d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042f8:	883b      	ldrh	r3, [r7, #0]
 80042fa:	0418      	lsls	r0, r3, #16
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6819      	ldr	r1, [r3, #0]
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	3b01      	subs	r3, #1
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	4302      	orrs	r2, r0
 8004308:	3340      	adds	r3, #64	; 0x40
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	460b      	mov	r3, r1
 8004328:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	887a      	ldrh	r2, [r7, #2]
 8004330:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e267      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d075      	beq.n	8004462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004376:	4b88      	ldr	r3, [pc, #544]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b04      	cmp	r3, #4
 8004380:	d00c      	beq.n	800439c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004382:	4b85      	ldr	r3, [pc, #532]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800438a:	2b08      	cmp	r3, #8
 800438c:	d112      	bne.n	80043b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800438e:	4b82      	ldr	r3, [pc, #520]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800439a:	d10b      	bne.n	80043b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439c:	4b7e      	ldr	r3, [pc, #504]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d05b      	beq.n	8004460 <HAL_RCC_OscConfig+0x108>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d157      	bne.n	8004460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e242      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043bc:	d106      	bne.n	80043cc <HAL_RCC_OscConfig+0x74>
 80043be:	4b76      	ldr	r3, [pc, #472]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a75      	ldr	r2, [pc, #468]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e01d      	b.n	8004408 <HAL_RCC_OscConfig+0xb0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043d4:	d10c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x98>
 80043d6:	4b70      	ldr	r3, [pc, #448]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a6f      	ldr	r2, [pc, #444]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	4b6d      	ldr	r3, [pc, #436]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6c      	ldr	r2, [pc, #432]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	e00b      	b.n	8004408 <HAL_RCC_OscConfig+0xb0>
 80043f0:	4b69      	ldr	r3, [pc, #420]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a68      	ldr	r2, [pc, #416]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	4b66      	ldr	r3, [pc, #408]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a65      	ldr	r2, [pc, #404]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d013      	beq.n	8004438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004410:	f7fd fd1e 	bl	8001e50 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004418:	f7fd fd1a 	bl	8001e50 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	; 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e207      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442a:	4b5b      	ldr	r3, [pc, #364]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0xc0>
 8004436:	e014      	b.n	8004462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fd fd0a 	bl	8001e50 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004440:	f7fd fd06 	bl	8001e50 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e1f3      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004452:	4b51      	ldr	r3, [pc, #324]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0xe8>
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d063      	beq.n	8004536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800446e:	4b4a      	ldr	r3, [pc, #296]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00b      	beq.n	8004492 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800447a:	4b47      	ldr	r3, [pc, #284]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004482:	2b08      	cmp	r3, #8
 8004484:	d11c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004486:	4b44      	ldr	r3, [pc, #272]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d116      	bne.n	80044c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004492:	4b41      	ldr	r3, [pc, #260]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <HAL_RCC_OscConfig+0x152>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d001      	beq.n	80044aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e1c7      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044aa:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4937      	ldr	r1, [pc, #220]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044be:	e03a      	b.n	8004536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d020      	beq.n	800450a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044c8:	4b34      	ldr	r3, [pc, #208]	; (800459c <HAL_RCC_OscConfig+0x244>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ce:	f7fd fcbf 	bl	8001e50 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044d6:	f7fd fcbb 	bl	8001e50 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e1a8      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e8:	4b2b      	ldr	r3, [pc, #172]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f4:	4b28      	ldr	r3, [pc, #160]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4925      	ldr	r1, [pc, #148]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004504:	4313      	orrs	r3, r2
 8004506:	600b      	str	r3, [r1, #0]
 8004508:	e015      	b.n	8004536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800450a:	4b24      	ldr	r3, [pc, #144]	; (800459c <HAL_RCC_OscConfig+0x244>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fd fc9e 	bl	8001e50 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004518:	f7fd fc9a 	bl	8001e50 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e187      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452a:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d036      	beq.n	80045b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d016      	beq.n	8004578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800454a:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <HAL_RCC_OscConfig+0x248>)
 800454c:	2201      	movs	r2, #1
 800454e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004550:	f7fd fc7e 	bl	8001e50 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004558:	f7fd fc7a 	bl	8001e50 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e167      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800456c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0x200>
 8004576:	e01b      	b.n	80045b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004578:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <HAL_RCC_OscConfig+0x248>)
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457e:	f7fd fc67 	bl	8001e50 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004584:	e00e      	b.n	80045a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004586:	f7fd fc63 	bl	8001e50 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d907      	bls.n	80045a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e150      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
 8004598:	40023800 	.word	0x40023800
 800459c:	42470000 	.word	0x42470000
 80045a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a4:	4b88      	ldr	r3, [pc, #544]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1ea      	bne.n	8004586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8097 	beq.w	80046ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045be:	2300      	movs	r3, #0
 80045c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045c2:	4b81      	ldr	r3, [pc, #516]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10f      	bne.n	80045ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	4b7d      	ldr	r3, [pc, #500]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	4a7c      	ldr	r2, [pc, #496]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045dc:	6413      	str	r3, [r2, #64]	; 0x40
 80045de:	4b7a      	ldr	r3, [pc, #488]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ea:	2301      	movs	r3, #1
 80045ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ee:	4b77      	ldr	r3, [pc, #476]	; (80047cc <HAL_RCC_OscConfig+0x474>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d118      	bne.n	800462c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045fa:	4b74      	ldr	r3, [pc, #464]	; (80047cc <HAL_RCC_OscConfig+0x474>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a73      	ldr	r2, [pc, #460]	; (80047cc <HAL_RCC_OscConfig+0x474>)
 8004600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004606:	f7fd fc23 	bl	8001e50 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800460e:	f7fd fc1f 	bl	8001e50 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e10c      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004620:	4b6a      	ldr	r3, [pc, #424]	; (80047cc <HAL_RCC_OscConfig+0x474>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f0      	beq.n	800460e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d106      	bne.n	8004642 <HAL_RCC_OscConfig+0x2ea>
 8004634:	4b64      	ldr	r3, [pc, #400]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	4a63      	ldr	r2, [pc, #396]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	6713      	str	r3, [r2, #112]	; 0x70
 8004640:	e01c      	b.n	800467c <HAL_RCC_OscConfig+0x324>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b05      	cmp	r3, #5
 8004648:	d10c      	bne.n	8004664 <HAL_RCC_OscConfig+0x30c>
 800464a:	4b5f      	ldr	r3, [pc, #380]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	4a5e      	ldr	r2, [pc, #376]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004650:	f043 0304 	orr.w	r3, r3, #4
 8004654:	6713      	str	r3, [r2, #112]	; 0x70
 8004656:	4b5c      	ldr	r3, [pc, #368]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	4a5b      	ldr	r2, [pc, #364]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	6713      	str	r3, [r2, #112]	; 0x70
 8004662:	e00b      	b.n	800467c <HAL_RCC_OscConfig+0x324>
 8004664:	4b58      	ldr	r3, [pc, #352]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	4a57      	ldr	r2, [pc, #348]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	6713      	str	r3, [r2, #112]	; 0x70
 8004670:	4b55      	ldr	r3, [pc, #340]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	4a54      	ldr	r2, [pc, #336]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004676:	f023 0304 	bic.w	r3, r3, #4
 800467a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d015      	beq.n	80046b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004684:	f7fd fbe4 	bl	8001e50 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468a:	e00a      	b.n	80046a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800468c:	f7fd fbe0 	bl	8001e50 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	; 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e0cb      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a2:	4b49      	ldr	r3, [pc, #292]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0ee      	beq.n	800468c <HAL_RCC_OscConfig+0x334>
 80046ae:	e014      	b.n	80046da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b0:	f7fd fbce 	bl	8001e50 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b8:	f7fd fbca 	bl	8001e50 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e0b5      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ce:	4b3e      	ldr	r3, [pc, #248]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1ee      	bne.n	80046b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046da:	7dfb      	ldrb	r3, [r7, #23]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d105      	bne.n	80046ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e0:	4b39      	ldr	r3, [pc, #228]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	4a38      	ldr	r2, [pc, #224]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 80a1 	beq.w	8004838 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046f6:	4b34      	ldr	r3, [pc, #208]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d05c      	beq.n	80047bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d141      	bne.n	800478e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470a:	4b31      	ldr	r3, [pc, #196]	; (80047d0 <HAL_RCC_OscConfig+0x478>)
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fd fb9e 	bl	8001e50 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004718:	f7fd fb9a 	bl	8001e50 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e087      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472a:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69da      	ldr	r2, [r3, #28]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	019b      	lsls	r3, r3, #6
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	3b01      	subs	r3, #1
 8004750:	041b      	lsls	r3, r3, #16
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	061b      	lsls	r3, r3, #24
 800475a:	491b      	ldr	r1, [pc, #108]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800475c:	4313      	orrs	r3, r2
 800475e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004760:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <HAL_RCC_OscConfig+0x478>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004766:	f7fd fb73 	bl	8001e50 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476e:	f7fd fb6f 	bl	8001e50 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e05c      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x416>
 800478c:	e054      	b.n	8004838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <HAL_RCC_OscConfig+0x478>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fd fb5c 	bl	8001e50 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800479c:	f7fd fb58 	bl	8001e50 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e045      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x444>
 80047ba:	e03d      	b.n	8004838 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d107      	bne.n	80047d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e038      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40007000 	.word	0x40007000
 80047d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <HAL_RCC_OscConfig+0x4ec>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d028      	beq.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d121      	bne.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d11a      	bne.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004804:	4013      	ands	r3, r2
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800480a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800480c:	4293      	cmp	r3, r2
 800480e:	d111      	bne.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	085b      	lsrs	r3, r3, #1
 800481c:	3b01      	subs	r3, #1
 800481e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004820:	429a      	cmp	r2, r3
 8004822:	d107      	bne.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800

08004848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0cc      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800485c:	4b68      	ldr	r3, [pc, #416]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d90c      	bls.n	8004884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b65      	ldr	r3, [pc, #404]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004872:	4b63      	ldr	r3, [pc, #396]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0b8      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d020      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800489c:	4b59      	ldr	r3, [pc, #356]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	4a58      	ldr	r2, [pc, #352]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b4:	4b53      	ldr	r3, [pc, #332]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	4a52      	ldr	r2, [pc, #328]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c0:	4b50      	ldr	r3, [pc, #320]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	494d      	ldr	r1, [pc, #308]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d044      	beq.n	8004968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d107      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e6:	4b47      	ldr	r3, [pc, #284]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d119      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e07f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d003      	beq.n	8004906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004902:	2b03      	cmp	r3, #3
 8004904:	d107      	bne.n	8004916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004906:	4b3f      	ldr	r3, [pc, #252]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e06f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004916:	4b3b      	ldr	r3, [pc, #236]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e067      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004926:	4b37      	ldr	r3, [pc, #220]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f023 0203 	bic.w	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	4934      	ldr	r1, [pc, #208]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	4313      	orrs	r3, r2
 8004936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004938:	f7fd fa8a 	bl	8001e50 <HAL_GetTick>
 800493c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493e:	e00a      	b.n	8004956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004940:	f7fd fa86 	bl	8001e50 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	f241 3288 	movw	r2, #5000	; 0x1388
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e04f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004956:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 020c 	and.w	r2, r3, #12
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	429a      	cmp	r2, r3
 8004966:	d1eb      	bne.n	8004940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d20c      	bcs.n	8004990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	4b22      	ldr	r3, [pc, #136]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e032      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800499c:	4b19      	ldr	r3, [pc, #100]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4916      	ldr	r1, [pc, #88]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d009      	beq.n	80049ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ba:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	490e      	ldr	r1, [pc, #56]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ce:	f000 f821 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 80049d2:	4602      	mov	r2, r0
 80049d4:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	091b      	lsrs	r3, r3, #4
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	490a      	ldr	r1, [pc, #40]	; (8004a08 <HAL_RCC_ClockConfig+0x1c0>)
 80049e0:	5ccb      	ldrb	r3, [r1, r3]
 80049e2:	fa22 f303 	lsr.w	r3, r2, r3
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <HAL_RCC_ClockConfig+0x1c4>)
 80049e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ea:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <HAL_RCC_ClockConfig+0x1c8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fd f9ea 	bl	8001dc8 <HAL_InitTick>

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40023c00 	.word	0x40023c00
 8004a04:	40023800 	.word	0x40023800
 8004a08:	0800bee0 	.word	0x0800bee0
 8004a0c:	20000000 	.word	0x20000000
 8004a10:	20000004 	.word	0x20000004

08004a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a18:	b090      	sub	sp, #64	; 0x40
 8004a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a20:	2300      	movs	r3, #0
 8004a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a24:	2300      	movs	r3, #0
 8004a26:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a2c:	4b59      	ldr	r3, [pc, #356]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d00d      	beq.n	8004a54 <HAL_RCC_GetSysClockFreq+0x40>
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	f200 80a1 	bhi.w	8004b80 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0x34>
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d003      	beq.n	8004a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a46:	e09b      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a48:	4b53      	ldr	r3, [pc, #332]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a4a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a4c:	e09b      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a4e:	4b53      	ldr	r3, [pc, #332]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8004a50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a52:	e098      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a54:	4b4f      	ldr	r3, [pc, #316]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a5c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a5e:	4b4d      	ldr	r3, [pc, #308]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d028      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a6a:	4b4a      	ldr	r3, [pc, #296]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	099b      	lsrs	r3, r3, #6
 8004a70:	2200      	movs	r2, #0
 8004a72:	623b      	str	r3, [r7, #32]
 8004a74:	627a      	str	r2, [r7, #36]	; 0x24
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	4b47      	ldr	r3, [pc, #284]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8004a80:	fb03 f201 	mul.w	r2, r3, r1
 8004a84:	2300      	movs	r3, #0
 8004a86:	fb00 f303 	mul.w	r3, r0, r3
 8004a8a:	4413      	add	r3, r2
 8004a8c:	4a43      	ldr	r2, [pc, #268]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8004a8e:	fba0 1202 	umull	r1, r2, r0, r2
 8004a92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a94:	460a      	mov	r2, r1
 8004a96:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a9a:	4413      	add	r3, r2
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	61bb      	str	r3, [r7, #24]
 8004aa4:	61fa      	str	r2, [r7, #28]
 8004aa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004aae:	f7fc f885 	bl	8000bbc <__aeabi_uldivmod>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aba:	e053      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004abc:	4b35      	ldr	r3, [pc, #212]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	099b      	lsrs	r3, r3, #6
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	617a      	str	r2, [r7, #20]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ace:	f04f 0b00 	mov.w	fp, #0
 8004ad2:	4652      	mov	r2, sl
 8004ad4:	465b      	mov	r3, fp
 8004ad6:	f04f 0000 	mov.w	r0, #0
 8004ada:	f04f 0100 	mov.w	r1, #0
 8004ade:	0159      	lsls	r1, r3, #5
 8004ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ae4:	0150      	lsls	r0, r2, #5
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	ebb2 080a 	subs.w	r8, r2, sl
 8004aee:	eb63 090b 	sbc.w	r9, r3, fp
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004afe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b06:	ebb2 0408 	subs.w	r4, r2, r8
 8004b0a:	eb63 0509 	sbc.w	r5, r3, r9
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	00eb      	lsls	r3, r5, #3
 8004b18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b1c:	00e2      	lsls	r2, r4, #3
 8004b1e:	4614      	mov	r4, r2
 8004b20:	461d      	mov	r5, r3
 8004b22:	eb14 030a 	adds.w	r3, r4, sl
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	eb45 030b 	adc.w	r3, r5, fp
 8004b2c:	607b      	str	r3, [r7, #4]
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	028b      	lsls	r3, r1, #10
 8004b3e:	4621      	mov	r1, r4
 8004b40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b44:	4621      	mov	r1, r4
 8004b46:	028a      	lsls	r2, r1, #10
 8004b48:	4610      	mov	r0, r2
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4e:	2200      	movs	r2, #0
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	60fa      	str	r2, [r7, #12]
 8004b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b58:	f7fc f830 	bl	8000bbc <__aeabi_uldivmod>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4613      	mov	r3, r2
 8004b62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	0c1b      	lsrs	r3, r3, #16
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	3301      	adds	r3, #1
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b7e:	e002      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3740      	adds	r7, #64	; 0x40
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b92:	bf00      	nop
 8004b94:	40023800 	.word	0x40023800
 8004b98:	00f42400 	.word	0x00f42400
 8004b9c:	017d7840 	.word	0x017d7840

08004ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba4:	4b03      	ldr	r3, [pc, #12]	; (8004bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000000 	.word	0x20000000

08004bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bbc:	f7ff fff0 	bl	8004ba0 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	0a9b      	lsrs	r3, r3, #10
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4903      	ldr	r1, [pc, #12]	; (8004bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bce:	5ccb      	ldrb	r3, [r1, r3]
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	0800bef0 	.word	0x0800bef0

08004be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004be4:	f7ff ffdc 	bl	8004ba0 <HAL_RCC_GetHCLKFreq>
 8004be8:	4602      	mov	r2, r0
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	0b5b      	lsrs	r3, r3, #13
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	4903      	ldr	r1, [pc, #12]	; (8004c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bf6:	5ccb      	ldrb	r3, [r1, r3]
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40023800 	.word	0x40023800
 8004c04:	0800bef0 	.word	0x0800bef0

08004c08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e07b      	b.n	8004d12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d108      	bne.n	8004c34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c2a:	d009      	beq.n	8004c40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	61da      	str	r2, [r3, #28]
 8004c32:	e005      	b.n	8004c40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fc fd8e 	bl	800177c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc4:	ea42 0103 	orr.w	r1, r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	0c1b      	lsrs	r3, r3, #16
 8004cde:	f003 0104 	and.w	r1, r3, #4
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	f003 0210 	and.w	r2, r3, #16
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e041      	b.n	8004db0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7fc fdcd 	bl	80018e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4619      	mov	r1, r3
 8004d58:	4610      	mov	r0, r2
 8004d5a:	f000 fce7 	bl	800572c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d001      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e044      	b.n	8004e5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a1e      	ldr	r2, [pc, #120]	; (8004e68 <HAL_TIM_Base_Start_IT+0xb0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d018      	beq.n	8004e24 <HAL_TIM_Base_Start_IT+0x6c>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfa:	d013      	beq.n	8004e24 <HAL_TIM_Base_Start_IT+0x6c>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1a      	ldr	r2, [pc, #104]	; (8004e6c <HAL_TIM_Base_Start_IT+0xb4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00e      	beq.n	8004e24 <HAL_TIM_Base_Start_IT+0x6c>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a19      	ldr	r2, [pc, #100]	; (8004e70 <HAL_TIM_Base_Start_IT+0xb8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d009      	beq.n	8004e24 <HAL_TIM_Base_Start_IT+0x6c>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a17      	ldr	r2, [pc, #92]	; (8004e74 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d004      	beq.n	8004e24 <HAL_TIM_Base_Start_IT+0x6c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a16      	ldr	r2, [pc, #88]	; (8004e78 <HAL_TIM_Base_Start_IT+0xc0>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d111      	bne.n	8004e48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b06      	cmp	r3, #6
 8004e34:	d010      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0201 	orr.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e46:	e007      	b.n	8004e58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40010000 	.word	0x40010000
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40000c00 	.word	0x40000c00
 8004e78:	40014000 	.word	0x40014000

08004e7c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e041      	b.n	8004f12 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7fc fcf4 	bl	8001890 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f000 fc36 	bl	800572c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d109      	bne.n	8004f40 <HAL_TIM_OC_Start+0x24>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	bf14      	ite	ne
 8004f38:	2301      	movne	r3, #1
 8004f3a:	2300      	moveq	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	e022      	b.n	8004f86 <HAL_TIM_OC_Start+0x6a>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d109      	bne.n	8004f5a <HAL_TIM_OC_Start+0x3e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	bf14      	ite	ne
 8004f52:	2301      	movne	r3, #1
 8004f54:	2300      	moveq	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	e015      	b.n	8004f86 <HAL_TIM_OC_Start+0x6a>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d109      	bne.n	8004f74 <HAL_TIM_OC_Start+0x58>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	bf14      	ite	ne
 8004f6c:	2301      	movne	r3, #1
 8004f6e:	2300      	moveq	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	e008      	b.n	8004f86 <HAL_TIM_OC_Start+0x6a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	bf14      	ite	ne
 8004f80:	2301      	movne	r3, #1
 8004f82:	2300      	moveq	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e068      	b.n	8005060 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d104      	bne.n	8004f9e <HAL_TIM_OC_Start+0x82>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f9c:	e013      	b.n	8004fc6 <HAL_TIM_OC_Start+0xaa>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d104      	bne.n	8004fae <HAL_TIM_OC_Start+0x92>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fac:	e00b      	b.n	8004fc6 <HAL_TIM_OC_Start+0xaa>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d104      	bne.n	8004fbe <HAL_TIM_OC_Start+0xa2>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fbc:	e003      	b.n	8004fc6 <HAL_TIM_OC_Start+0xaa>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	6839      	ldr	r1, [r7, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fdb8 	bl	8005b44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a23      	ldr	r2, [pc, #140]	; (8005068 <HAL_TIM_OC_Start+0x14c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d107      	bne.n	8004fee <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a1d      	ldr	r2, [pc, #116]	; (8005068 <HAL_TIM_OC_Start+0x14c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d018      	beq.n	800502a <HAL_TIM_OC_Start+0x10e>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005000:	d013      	beq.n	800502a <HAL_TIM_OC_Start+0x10e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a19      	ldr	r2, [pc, #100]	; (800506c <HAL_TIM_OC_Start+0x150>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00e      	beq.n	800502a <HAL_TIM_OC_Start+0x10e>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a17      	ldr	r2, [pc, #92]	; (8005070 <HAL_TIM_OC_Start+0x154>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d009      	beq.n	800502a <HAL_TIM_OC_Start+0x10e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a16      	ldr	r2, [pc, #88]	; (8005074 <HAL_TIM_OC_Start+0x158>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d004      	beq.n	800502a <HAL_TIM_OC_Start+0x10e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a14      	ldr	r2, [pc, #80]	; (8005078 <HAL_TIM_OC_Start+0x15c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d111      	bne.n	800504e <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b06      	cmp	r3, #6
 800503a:	d010      	beq.n	800505e <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504c:	e007      	b.n	800505e <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0201 	orr.w	r2, r2, #1
 800505c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	40010000 	.word	0x40010000
 800506c:	40000400 	.word	0x40000400
 8005070:	40000800 	.word	0x40000800
 8005074:	40000c00 	.word	0x40000c00
 8005078:	40014000 	.word	0x40014000

0800507c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e041      	b.n	8005112 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d106      	bne.n	80050a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7fc fbd2 	bl	800184c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f000 fb36 	bl	800572c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d109      	bne.n	8005140 <HAL_TIM_PWM_Start+0x24>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	bf14      	ite	ne
 8005138:	2301      	movne	r3, #1
 800513a:	2300      	moveq	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	e022      	b.n	8005186 <HAL_TIM_PWM_Start+0x6a>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b04      	cmp	r3, #4
 8005144:	d109      	bne.n	800515a <HAL_TIM_PWM_Start+0x3e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	bf14      	ite	ne
 8005152:	2301      	movne	r3, #1
 8005154:	2300      	moveq	r3, #0
 8005156:	b2db      	uxtb	r3, r3
 8005158:	e015      	b.n	8005186 <HAL_TIM_PWM_Start+0x6a>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b08      	cmp	r3, #8
 800515e:	d109      	bne.n	8005174 <HAL_TIM_PWM_Start+0x58>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b01      	cmp	r3, #1
 800516a:	bf14      	ite	ne
 800516c:	2301      	movne	r3, #1
 800516e:	2300      	moveq	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	e008      	b.n	8005186 <HAL_TIM_PWM_Start+0x6a>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	bf14      	ite	ne
 8005180:	2301      	movne	r3, #1
 8005182:	2300      	moveq	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e068      	b.n	8005260 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <HAL_TIM_PWM_Start+0x82>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800519c:	e013      	b.n	80051c6 <HAL_TIM_PWM_Start+0xaa>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d104      	bne.n	80051ae <HAL_TIM_PWM_Start+0x92>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051ac:	e00b      	b.n	80051c6 <HAL_TIM_PWM_Start+0xaa>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d104      	bne.n	80051be <HAL_TIM_PWM_Start+0xa2>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051bc:	e003      	b.n	80051c6 <HAL_TIM_PWM_Start+0xaa>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2202      	movs	r2, #2
 80051c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2201      	movs	r2, #1
 80051cc:	6839      	ldr	r1, [r7, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fcb8 	bl	8005b44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a23      	ldr	r2, [pc, #140]	; (8005268 <HAL_TIM_PWM_Start+0x14c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d107      	bne.n	80051ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1d      	ldr	r2, [pc, #116]	; (8005268 <HAL_TIM_PWM_Start+0x14c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d018      	beq.n	800522a <HAL_TIM_PWM_Start+0x10e>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005200:	d013      	beq.n	800522a <HAL_TIM_PWM_Start+0x10e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a19      	ldr	r2, [pc, #100]	; (800526c <HAL_TIM_PWM_Start+0x150>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00e      	beq.n	800522a <HAL_TIM_PWM_Start+0x10e>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a17      	ldr	r2, [pc, #92]	; (8005270 <HAL_TIM_PWM_Start+0x154>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d009      	beq.n	800522a <HAL_TIM_PWM_Start+0x10e>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a16      	ldr	r2, [pc, #88]	; (8005274 <HAL_TIM_PWM_Start+0x158>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d004      	beq.n	800522a <HAL_TIM_PWM_Start+0x10e>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a14      	ldr	r2, [pc, #80]	; (8005278 <HAL_TIM_PWM_Start+0x15c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d111      	bne.n	800524e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b06      	cmp	r3, #6
 800523a:	d010      	beq.n	800525e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800524c:	e007      	b.n	800525e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 0201 	orr.w	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40010000 	.word	0x40010000
 800526c:	40000400 	.word	0x40000400
 8005270:	40000800 	.word	0x40000800
 8005274:	40000c00 	.word	0x40000c00
 8005278:	40014000 	.word	0x40014000

0800527c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b02      	cmp	r3, #2
 8005290:	d122      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b02      	cmp	r3, #2
 800529e:	d11b      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0202 	mvn.w	r2, #2
 80052a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fa16 	bl	80056f0 <HAL_TIM_IC_CaptureCallback>
 80052c4:	e005      	b.n	80052d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fa08 	bl	80056dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fa19 	bl	8005704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d122      	bne.n	800532c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d11b      	bne.n	800532c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0204 	mvn.w	r2, #4
 80052fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2202      	movs	r2, #2
 8005302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f9ec 	bl	80056f0 <HAL_TIM_IC_CaptureCallback>
 8005318:	e005      	b.n	8005326 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f9de 	bl	80056dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f9ef 	bl	8005704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b08      	cmp	r3, #8
 8005338:	d122      	bne.n	8005380 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b08      	cmp	r3, #8
 8005346:	d11b      	bne.n	8005380 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0208 	mvn.w	r2, #8
 8005350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2204      	movs	r2, #4
 8005356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f9c2 	bl	80056f0 <HAL_TIM_IC_CaptureCallback>
 800536c:	e005      	b.n	800537a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f9b4 	bl	80056dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f9c5 	bl	8005704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0310 	and.w	r3, r3, #16
 800538a:	2b10      	cmp	r3, #16
 800538c:	d122      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f003 0310 	and.w	r3, r3, #16
 8005398:	2b10      	cmp	r3, #16
 800539a:	d11b      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0210 	mvn.w	r2, #16
 80053a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2208      	movs	r2, #8
 80053aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f998 	bl	80056f0 <HAL_TIM_IC_CaptureCallback>
 80053c0:	e005      	b.n	80053ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f98a 	bl	80056dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f99b 	bl	8005704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d10e      	bne.n	8005400 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d107      	bne.n	8005400 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0201 	mvn.w	r2, #1
 80053f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f964 	bl	80056c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540a:	2b80      	cmp	r3, #128	; 0x80
 800540c:	d10e      	bne.n	800542c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005418:	2b80      	cmp	r3, #128	; 0x80
 800541a:	d107      	bne.n	800542c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fc2a 	bl	8005c80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005436:	2b40      	cmp	r3, #64	; 0x40
 8005438:	d10e      	bne.n	8005458 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d107      	bne.n	8005458 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f960 	bl	8005718 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b20      	cmp	r3, #32
 8005464:	d10e      	bne.n	8005484 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b20      	cmp	r3, #32
 8005472:	d107      	bne.n	8005484 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f06f 0220 	mvn.w	r2, #32
 800547c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fbf4 	bl	8005c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d101      	bne.n	80054aa <HAL_TIM_OC_ConfigChannel+0x1e>
 80054a6:	2302      	movs	r3, #2
 80054a8:	e048      	b.n	800553c <HAL_TIM_OC_ConfigChannel+0xb0>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b0c      	cmp	r3, #12
 80054b6:	d839      	bhi.n	800552c <HAL_TIM_OC_ConfigChannel+0xa0>
 80054b8:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	080054f5 	.word	0x080054f5
 80054c4:	0800552d 	.word	0x0800552d
 80054c8:	0800552d 	.word	0x0800552d
 80054cc:	0800552d 	.word	0x0800552d
 80054d0:	08005503 	.word	0x08005503
 80054d4:	0800552d 	.word	0x0800552d
 80054d8:	0800552d 	.word	0x0800552d
 80054dc:	0800552d 	.word	0x0800552d
 80054e0:	08005511 	.word	0x08005511
 80054e4:	0800552d 	.word	0x0800552d
 80054e8:	0800552d 	.word	0x0800552d
 80054ec:	0800552d 	.word	0x0800552d
 80054f0:	0800551f 	.word	0x0800551f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 f996 	bl	800582c <TIM_OC1_SetConfig>
      break;
 8005500:	e017      	b.n	8005532 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	4618      	mov	r0, r3
 800550a:	f000 f9f5 	bl	80058f8 <TIM_OC2_SetConfig>
      break;
 800550e:	e010      	b.n	8005532 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68b9      	ldr	r1, [r7, #8]
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fa5a 	bl	80059d0 <TIM_OC3_SetConfig>
      break;
 800551c:	e009      	b.n	8005532 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68b9      	ldr	r1, [r7, #8]
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fabd 	bl	8005aa4 <TIM_OC4_SetConfig>
      break;
 800552a:	e002      	b.n	8005532 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	75fb      	strb	r3, [r7, #23]
      break;
 8005530:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800553a:	7dfb      	ldrb	r3, [r7, #23]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005550:	2300      	movs	r3, #0
 8005552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800555e:	2302      	movs	r3, #2
 8005560:	e0ae      	b.n	80056c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b0c      	cmp	r3, #12
 800556e:	f200 809f 	bhi.w	80056b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005572:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	080055ad 	.word	0x080055ad
 800557c:	080056b1 	.word	0x080056b1
 8005580:	080056b1 	.word	0x080056b1
 8005584:	080056b1 	.word	0x080056b1
 8005588:	080055ed 	.word	0x080055ed
 800558c:	080056b1 	.word	0x080056b1
 8005590:	080056b1 	.word	0x080056b1
 8005594:	080056b1 	.word	0x080056b1
 8005598:	0800562f 	.word	0x0800562f
 800559c:	080056b1 	.word	0x080056b1
 80055a0:	080056b1 	.word	0x080056b1
 80055a4:	080056b1 	.word	0x080056b1
 80055a8:	0800566f 	.word	0x0800566f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 f93a 	bl	800582c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0208 	orr.w	r2, r2, #8
 80055c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0204 	bic.w	r2, r2, #4
 80055d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6999      	ldr	r1, [r3, #24]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	691a      	ldr	r2, [r3, #16]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	619a      	str	r2, [r3, #24]
      break;
 80055ea:	e064      	b.n	80056b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 f980 	bl	80058f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699a      	ldr	r2, [r3, #24]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699a      	ldr	r2, [r3, #24]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6999      	ldr	r1, [r3, #24]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	021a      	lsls	r2, r3, #8
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	619a      	str	r2, [r3, #24]
      break;
 800562c:	e043      	b.n	80056b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	4618      	mov	r0, r3
 8005636:	f000 f9cb 	bl	80059d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69da      	ldr	r2, [r3, #28]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 0208 	orr.w	r2, r2, #8
 8005648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0204 	bic.w	r2, r2, #4
 8005658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69d9      	ldr	r1, [r3, #28]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	61da      	str	r2, [r3, #28]
      break;
 800566c:	e023      	b.n	80056b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68b9      	ldr	r1, [r7, #8]
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fa15 	bl	8005aa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69da      	ldr	r2, [r3, #28]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69da      	ldr	r2, [r3, #28]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69d9      	ldr	r1, [r3, #28]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	021a      	lsls	r2, r3, #8
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	61da      	str	r2, [r3, #28]
      break;
 80056ae:	e002      	b.n	80056b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	75fb      	strb	r3, [r7, #23]
      break;
 80056b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056be:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a34      	ldr	r2, [pc, #208]	; (8005810 <TIM_Base_SetConfig+0xe4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00f      	beq.n	8005764 <TIM_Base_SetConfig+0x38>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574a:	d00b      	beq.n	8005764 <TIM_Base_SetConfig+0x38>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a31      	ldr	r2, [pc, #196]	; (8005814 <TIM_Base_SetConfig+0xe8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d007      	beq.n	8005764 <TIM_Base_SetConfig+0x38>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a30      	ldr	r2, [pc, #192]	; (8005818 <TIM_Base_SetConfig+0xec>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d003      	beq.n	8005764 <TIM_Base_SetConfig+0x38>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a2f      	ldr	r2, [pc, #188]	; (800581c <TIM_Base_SetConfig+0xf0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d108      	bne.n	8005776 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a25      	ldr	r2, [pc, #148]	; (8005810 <TIM_Base_SetConfig+0xe4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d01b      	beq.n	80057b6 <TIM_Base_SetConfig+0x8a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005784:	d017      	beq.n	80057b6 <TIM_Base_SetConfig+0x8a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a22      	ldr	r2, [pc, #136]	; (8005814 <TIM_Base_SetConfig+0xe8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d013      	beq.n	80057b6 <TIM_Base_SetConfig+0x8a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a21      	ldr	r2, [pc, #132]	; (8005818 <TIM_Base_SetConfig+0xec>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00f      	beq.n	80057b6 <TIM_Base_SetConfig+0x8a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a20      	ldr	r2, [pc, #128]	; (800581c <TIM_Base_SetConfig+0xf0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00b      	beq.n	80057b6 <TIM_Base_SetConfig+0x8a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a1f      	ldr	r2, [pc, #124]	; (8005820 <TIM_Base_SetConfig+0xf4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d007      	beq.n	80057b6 <TIM_Base_SetConfig+0x8a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a1e      	ldr	r2, [pc, #120]	; (8005824 <TIM_Base_SetConfig+0xf8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d003      	beq.n	80057b6 <TIM_Base_SetConfig+0x8a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a1d      	ldr	r2, [pc, #116]	; (8005828 <TIM_Base_SetConfig+0xfc>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d108      	bne.n	80057c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a08      	ldr	r2, [pc, #32]	; (8005810 <TIM_Base_SetConfig+0xe4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d103      	bne.n	80057fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	691a      	ldr	r2, [r3, #16]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	615a      	str	r2, [r3, #20]
}
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40010000 	.word	0x40010000
 8005814:	40000400 	.word	0x40000400
 8005818:	40000800 	.word	0x40000800
 800581c:	40000c00 	.word	0x40000c00
 8005820:	40014000 	.word	0x40014000
 8005824:	40014400 	.word	0x40014400
 8005828:	40014800 	.word	0x40014800

0800582c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	f023 0201 	bic.w	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0303 	bic.w	r3, r3, #3
 8005862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f023 0302 	bic.w	r3, r3, #2
 8005874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a1c      	ldr	r2, [pc, #112]	; (80058f4 <TIM_OC1_SetConfig+0xc8>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d10c      	bne.n	80058a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f023 0308 	bic.w	r3, r3, #8
 800588e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f023 0304 	bic.w	r3, r3, #4
 80058a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a13      	ldr	r2, [pc, #76]	; (80058f4 <TIM_OC1_SetConfig+0xc8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d111      	bne.n	80058ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	621a      	str	r2, [r3, #32]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	40010000 	.word	0x40010000

080058f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	f023 0210 	bic.w	r2, r3, #16
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800592e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4313      	orrs	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f023 0320 	bic.w	r3, r3, #32
 8005942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a1e      	ldr	r2, [pc, #120]	; (80059cc <TIM_OC2_SetConfig+0xd4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d10d      	bne.n	8005974 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800595e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005972:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a15      	ldr	r2, [pc, #84]	; (80059cc <TIM_OC2_SetConfig+0xd4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d113      	bne.n	80059a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005982:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800598a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	4313      	orrs	r3, r2
 8005996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	621a      	str	r2, [r3, #32]
}
 80059be:	bf00      	nop
 80059c0:	371c      	adds	r7, #28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40010000 	.word	0x40010000

080059d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1d      	ldr	r2, [pc, #116]	; (8005aa0 <TIM_OC3_SetConfig+0xd0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d10d      	bne.n	8005a4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	021b      	lsls	r3, r3, #8
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a14      	ldr	r2, [pc, #80]	; (8005aa0 <TIM_OC3_SetConfig+0xd0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d113      	bne.n	8005a7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	621a      	str	r2, [r3, #32]
}
 8005a94:	bf00      	nop
 8005a96:	371c      	adds	r7, #28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	40010000 	.word	0x40010000

08005aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	021b      	lsls	r3, r3, #8
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	031b      	lsls	r3, r3, #12
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a10      	ldr	r2, [pc, #64]	; (8005b40 <TIM_OC4_SetConfig+0x9c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d109      	bne.n	8005b18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	019b      	lsls	r3, r3, #6
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	621a      	str	r2, [r3, #32]
}
 8005b32:	bf00      	nop
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40010000 	.word	0x40010000

08005b44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f003 031f 	and.w	r3, r3, #31
 8005b56:	2201      	movs	r2, #1
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a1a      	ldr	r2, [r3, #32]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	43db      	mvns	r3, r3
 8005b66:	401a      	ands	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a1a      	ldr	r2, [r3, #32]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f003 031f 	and.w	r3, r3, #31
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	621a      	str	r2, [r3, #32]
}
 8005b82:	bf00      	nop
 8005b84:	371c      	adds	r7, #28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
	...

08005b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e050      	b.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a1c      	ldr	r2, [pc, #112]	; (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d018      	beq.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf4:	d013      	beq.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a18      	ldr	r2, [pc, #96]	; (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00e      	beq.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a16      	ldr	r2, [pc, #88]	; (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d009      	beq.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a15      	ldr	r2, [pc, #84]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d004      	beq.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a13      	ldr	r2, [pc, #76]	; (8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d10c      	bne.n	8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40010000 	.word	0x40010000
 8005c5c:	40000400 	.word	0x40000400
 8005c60:	40000800 	.word	0x40000800
 8005c64:	40000c00 	.word	0x40000c00
 8005c68:	40014000 	.word	0x40014000

08005c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e03f      	b.n	8005d26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7fb fe92 	bl	80019e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2224      	movs	r2, #36	; 0x24
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f829 	bl	8005d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	695a      	ldr	r2, [r3, #20]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d34:	b0c0      	sub	sp, #256	; 0x100
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4c:	68d9      	ldr	r1, [r3, #12]
 8005d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	ea40 0301 	orr.w	r3, r0, r1
 8005d58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d88:	f021 010c 	bic.w	r1, r1, #12
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d96:	430b      	orrs	r3, r1
 8005d98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005daa:	6999      	ldr	r1, [r3, #24]
 8005dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	ea40 0301 	orr.w	r3, r0, r1
 8005db6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	4b8f      	ldr	r3, [pc, #572]	; (8005ffc <UART_SetConfig+0x2cc>)
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d005      	beq.n	8005dd0 <UART_SetConfig+0xa0>
 8005dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	4b8d      	ldr	r3, [pc, #564]	; (8006000 <UART_SetConfig+0x2d0>)
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d104      	bne.n	8005dda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dd0:	f7fe ff06 	bl	8004be0 <HAL_RCC_GetPCLK2Freq>
 8005dd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005dd8:	e003      	b.n	8005de2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dda:	f7fe feed 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8005dde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dec:	f040 810c 	bne.w	8006008 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df4:	2200      	movs	r2, #0
 8005df6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dfa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005dfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e02:	4622      	mov	r2, r4
 8005e04:	462b      	mov	r3, r5
 8005e06:	1891      	adds	r1, r2, r2
 8005e08:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e0a:	415b      	adcs	r3, r3
 8005e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e12:	4621      	mov	r1, r4
 8005e14:	eb12 0801 	adds.w	r8, r2, r1
 8005e18:	4629      	mov	r1, r5
 8005e1a:	eb43 0901 	adc.w	r9, r3, r1
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	f04f 0300 	mov.w	r3, #0
 8005e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e32:	4690      	mov	r8, r2
 8005e34:	4699      	mov	r9, r3
 8005e36:	4623      	mov	r3, r4
 8005e38:	eb18 0303 	adds.w	r3, r8, r3
 8005e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e40:	462b      	mov	r3, r5
 8005e42:	eb49 0303 	adc.w	r3, r9, r3
 8005e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e5e:	460b      	mov	r3, r1
 8005e60:	18db      	adds	r3, r3, r3
 8005e62:	653b      	str	r3, [r7, #80]	; 0x50
 8005e64:	4613      	mov	r3, r2
 8005e66:	eb42 0303 	adc.w	r3, r2, r3
 8005e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8005e6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e74:	f7fa fea2 	bl	8000bbc <__aeabi_uldivmod>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4b61      	ldr	r3, [pc, #388]	; (8006004 <UART_SetConfig+0x2d4>)
 8005e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e82:	095b      	lsrs	r3, r3, #5
 8005e84:	011c      	lsls	r4, r3, #4
 8005e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e98:	4642      	mov	r2, r8
 8005e9a:	464b      	mov	r3, r9
 8005e9c:	1891      	adds	r1, r2, r2
 8005e9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ea0:	415b      	adcs	r3, r3
 8005ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ea8:	4641      	mov	r1, r8
 8005eaa:	eb12 0a01 	adds.w	sl, r2, r1
 8005eae:	4649      	mov	r1, r9
 8005eb0:	eb43 0b01 	adc.w	fp, r3, r1
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	f04f 0300 	mov.w	r3, #0
 8005ebc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ec0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ec8:	4692      	mov	sl, r2
 8005eca:	469b      	mov	fp, r3
 8005ecc:	4643      	mov	r3, r8
 8005ece:	eb1a 0303 	adds.w	r3, sl, r3
 8005ed2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ed6:	464b      	mov	r3, r9
 8005ed8:	eb4b 0303 	adc.w	r3, fp, r3
 8005edc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ef0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	18db      	adds	r3, r3, r3
 8005ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8005efa:	4613      	mov	r3, r2
 8005efc:	eb42 0303 	adc.w	r3, r2, r3
 8005f00:	647b      	str	r3, [r7, #68]	; 0x44
 8005f02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f0a:	f7fa fe57 	bl	8000bbc <__aeabi_uldivmod>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4611      	mov	r1, r2
 8005f14:	4b3b      	ldr	r3, [pc, #236]	; (8006004 <UART_SetConfig+0x2d4>)
 8005f16:	fba3 2301 	umull	r2, r3, r3, r1
 8005f1a:	095b      	lsrs	r3, r3, #5
 8005f1c:	2264      	movs	r2, #100	; 0x64
 8005f1e:	fb02 f303 	mul.w	r3, r2, r3
 8005f22:	1acb      	subs	r3, r1, r3
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f2a:	4b36      	ldr	r3, [pc, #216]	; (8006004 <UART_SetConfig+0x2d4>)
 8005f2c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f30:	095b      	lsrs	r3, r3, #5
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f38:	441c      	add	r4, r3
 8005f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	464b      	mov	r3, r9
 8005f50:	1891      	adds	r1, r2, r2
 8005f52:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f54:	415b      	adcs	r3, r3
 8005f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f5c:	4641      	mov	r1, r8
 8005f5e:	1851      	adds	r1, r2, r1
 8005f60:	6339      	str	r1, [r7, #48]	; 0x30
 8005f62:	4649      	mov	r1, r9
 8005f64:	414b      	adcs	r3, r1
 8005f66:	637b      	str	r3, [r7, #52]	; 0x34
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f74:	4659      	mov	r1, fp
 8005f76:	00cb      	lsls	r3, r1, #3
 8005f78:	4651      	mov	r1, sl
 8005f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f7e:	4651      	mov	r1, sl
 8005f80:	00ca      	lsls	r2, r1, #3
 8005f82:	4610      	mov	r0, r2
 8005f84:	4619      	mov	r1, r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	4642      	mov	r2, r8
 8005f8a:	189b      	adds	r3, r3, r2
 8005f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f90:	464b      	mov	r3, r9
 8005f92:	460a      	mov	r2, r1
 8005f94:	eb42 0303 	adc.w	r3, r2, r3
 8005f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fa8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005fac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	18db      	adds	r3, r3, r3
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	eb42 0303 	adc.w	r3, r2, r3
 8005fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005fc6:	f7fa fdf9 	bl	8000bbc <__aeabi_uldivmod>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4b0d      	ldr	r3, [pc, #52]	; (8006004 <UART_SetConfig+0x2d4>)
 8005fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd4:	095b      	lsrs	r3, r3, #5
 8005fd6:	2164      	movs	r1, #100	; 0x64
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	3332      	adds	r3, #50	; 0x32
 8005fe2:	4a08      	ldr	r2, [pc, #32]	; (8006004 <UART_SetConfig+0x2d4>)
 8005fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	f003 0207 	and.w	r2, r3, #7
 8005fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4422      	add	r2, r4
 8005ff6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ff8:	e106      	b.n	8006208 <UART_SetConfig+0x4d8>
 8005ffa:	bf00      	nop
 8005ffc:	40011000 	.word	0x40011000
 8006000:	40011400 	.word	0x40011400
 8006004:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800600c:	2200      	movs	r2, #0
 800600e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006012:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006016:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800601a:	4642      	mov	r2, r8
 800601c:	464b      	mov	r3, r9
 800601e:	1891      	adds	r1, r2, r2
 8006020:	6239      	str	r1, [r7, #32]
 8006022:	415b      	adcs	r3, r3
 8006024:	627b      	str	r3, [r7, #36]	; 0x24
 8006026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800602a:	4641      	mov	r1, r8
 800602c:	1854      	adds	r4, r2, r1
 800602e:	4649      	mov	r1, r9
 8006030:	eb43 0501 	adc.w	r5, r3, r1
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	00eb      	lsls	r3, r5, #3
 800603e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006042:	00e2      	lsls	r2, r4, #3
 8006044:	4614      	mov	r4, r2
 8006046:	461d      	mov	r5, r3
 8006048:	4643      	mov	r3, r8
 800604a:	18e3      	adds	r3, r4, r3
 800604c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006050:	464b      	mov	r3, r9
 8006052:	eb45 0303 	adc.w	r3, r5, r3
 8006056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006066:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800606a:	f04f 0200 	mov.w	r2, #0
 800606e:	f04f 0300 	mov.w	r3, #0
 8006072:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006076:	4629      	mov	r1, r5
 8006078:	008b      	lsls	r3, r1, #2
 800607a:	4621      	mov	r1, r4
 800607c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006080:	4621      	mov	r1, r4
 8006082:	008a      	lsls	r2, r1, #2
 8006084:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006088:	f7fa fd98 	bl	8000bbc <__aeabi_uldivmod>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4b60      	ldr	r3, [pc, #384]	; (8006214 <UART_SetConfig+0x4e4>)
 8006092:	fba3 2302 	umull	r2, r3, r3, r2
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	011c      	lsls	r4, r3, #4
 800609a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80060a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80060ac:	4642      	mov	r2, r8
 80060ae:	464b      	mov	r3, r9
 80060b0:	1891      	adds	r1, r2, r2
 80060b2:	61b9      	str	r1, [r7, #24]
 80060b4:	415b      	adcs	r3, r3
 80060b6:	61fb      	str	r3, [r7, #28]
 80060b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060bc:	4641      	mov	r1, r8
 80060be:	1851      	adds	r1, r2, r1
 80060c0:	6139      	str	r1, [r7, #16]
 80060c2:	4649      	mov	r1, r9
 80060c4:	414b      	adcs	r3, r1
 80060c6:	617b      	str	r3, [r7, #20]
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060d4:	4659      	mov	r1, fp
 80060d6:	00cb      	lsls	r3, r1, #3
 80060d8:	4651      	mov	r1, sl
 80060da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060de:	4651      	mov	r1, sl
 80060e0:	00ca      	lsls	r2, r1, #3
 80060e2:	4610      	mov	r0, r2
 80060e4:	4619      	mov	r1, r3
 80060e6:	4603      	mov	r3, r0
 80060e8:	4642      	mov	r2, r8
 80060ea:	189b      	adds	r3, r3, r2
 80060ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060f0:	464b      	mov	r3, r9
 80060f2:	460a      	mov	r2, r1
 80060f4:	eb42 0303 	adc.w	r3, r2, r3
 80060f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	67bb      	str	r3, [r7, #120]	; 0x78
 8006106:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	f04f 0300 	mov.w	r3, #0
 8006110:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006114:	4649      	mov	r1, r9
 8006116:	008b      	lsls	r3, r1, #2
 8006118:	4641      	mov	r1, r8
 800611a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800611e:	4641      	mov	r1, r8
 8006120:	008a      	lsls	r2, r1, #2
 8006122:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006126:	f7fa fd49 	bl	8000bbc <__aeabi_uldivmod>
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	4611      	mov	r1, r2
 8006130:	4b38      	ldr	r3, [pc, #224]	; (8006214 <UART_SetConfig+0x4e4>)
 8006132:	fba3 2301 	umull	r2, r3, r3, r1
 8006136:	095b      	lsrs	r3, r3, #5
 8006138:	2264      	movs	r2, #100	; 0x64
 800613a:	fb02 f303 	mul.w	r3, r2, r3
 800613e:	1acb      	subs	r3, r1, r3
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	3332      	adds	r3, #50	; 0x32
 8006144:	4a33      	ldr	r2, [pc, #204]	; (8006214 <UART_SetConfig+0x4e4>)
 8006146:	fba2 2303 	umull	r2, r3, r2, r3
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006150:	441c      	add	r4, r3
 8006152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006156:	2200      	movs	r2, #0
 8006158:	673b      	str	r3, [r7, #112]	; 0x70
 800615a:	677a      	str	r2, [r7, #116]	; 0x74
 800615c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006160:	4642      	mov	r2, r8
 8006162:	464b      	mov	r3, r9
 8006164:	1891      	adds	r1, r2, r2
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	415b      	adcs	r3, r3
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006170:	4641      	mov	r1, r8
 8006172:	1851      	adds	r1, r2, r1
 8006174:	6039      	str	r1, [r7, #0]
 8006176:	4649      	mov	r1, r9
 8006178:	414b      	adcs	r3, r1
 800617a:	607b      	str	r3, [r7, #4]
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006188:	4659      	mov	r1, fp
 800618a:	00cb      	lsls	r3, r1, #3
 800618c:	4651      	mov	r1, sl
 800618e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006192:	4651      	mov	r1, sl
 8006194:	00ca      	lsls	r2, r1, #3
 8006196:	4610      	mov	r0, r2
 8006198:	4619      	mov	r1, r3
 800619a:	4603      	mov	r3, r0
 800619c:	4642      	mov	r2, r8
 800619e:	189b      	adds	r3, r3, r2
 80061a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80061a2:	464b      	mov	r3, r9
 80061a4:	460a      	mov	r2, r1
 80061a6:	eb42 0303 	adc.w	r3, r2, r3
 80061aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	663b      	str	r3, [r7, #96]	; 0x60
 80061b6:	667a      	str	r2, [r7, #100]	; 0x64
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	f04f 0300 	mov.w	r3, #0
 80061c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80061c4:	4649      	mov	r1, r9
 80061c6:	008b      	lsls	r3, r1, #2
 80061c8:	4641      	mov	r1, r8
 80061ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ce:	4641      	mov	r1, r8
 80061d0:	008a      	lsls	r2, r1, #2
 80061d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80061d6:	f7fa fcf1 	bl	8000bbc <__aeabi_uldivmod>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4b0d      	ldr	r3, [pc, #52]	; (8006214 <UART_SetConfig+0x4e4>)
 80061e0:	fba3 1302 	umull	r1, r3, r3, r2
 80061e4:	095b      	lsrs	r3, r3, #5
 80061e6:	2164      	movs	r1, #100	; 0x64
 80061e8:	fb01 f303 	mul.w	r3, r1, r3
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	3332      	adds	r3, #50	; 0x32
 80061f2:	4a08      	ldr	r2, [pc, #32]	; (8006214 <UART_SetConfig+0x4e4>)
 80061f4:	fba2 2303 	umull	r2, r3, r2, r3
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	f003 020f 	and.w	r2, r3, #15
 80061fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4422      	add	r2, r4
 8006206:	609a      	str	r2, [r3, #8]
}
 8006208:	bf00      	nop
 800620a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800620e:	46bd      	mov	sp, r7
 8006210:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006214:	51eb851f 	.word	0x51eb851f

08006218 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006218:	b084      	sub	sp, #16
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	f107 001c 	add.w	r0, r7, #28
 8006226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	2b01      	cmp	r3, #1
 800622e:	d122      	bne.n	8006276 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d105      	bne.n	800626a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f001 fbee 	bl	8007a4c <USB_CoreReset>
 8006270:	4603      	mov	r3, r0
 8006272:	73fb      	strb	r3, [r7, #15]
 8006274:	e01a      	b.n	80062ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f001 fbe2 	bl	8007a4c <USB_CoreReset>
 8006288:	4603      	mov	r3, r0
 800628a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800628c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	639a      	str	r2, [r3, #56]	; 0x38
 800629e:	e005      	b.n	80062ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d10b      	bne.n	80062ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f043 0206 	orr.w	r2, r3, #6
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f043 0220 	orr.w	r2, r3, #32
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062d6:	b004      	add	sp, #16
 80062d8:	4770      	bx	lr
	...

080062dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	4613      	mov	r3, r2
 80062e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d165      	bne.n	80063bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	4a41      	ldr	r2, [pc, #260]	; (80063f8 <USB_SetTurnaroundTime+0x11c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d906      	bls.n	8006306 <USB_SetTurnaroundTime+0x2a>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4a40      	ldr	r2, [pc, #256]	; (80063fc <USB_SetTurnaroundTime+0x120>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d202      	bcs.n	8006306 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006300:	230f      	movs	r3, #15
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	e062      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4a3c      	ldr	r2, [pc, #240]	; (80063fc <USB_SetTurnaroundTime+0x120>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d306      	bcc.n	800631c <USB_SetTurnaroundTime+0x40>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4a3b      	ldr	r2, [pc, #236]	; (8006400 <USB_SetTurnaroundTime+0x124>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d202      	bcs.n	800631c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006316:	230e      	movs	r3, #14
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	e057      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4a38      	ldr	r2, [pc, #224]	; (8006400 <USB_SetTurnaroundTime+0x124>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d306      	bcc.n	8006332 <USB_SetTurnaroundTime+0x56>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4a37      	ldr	r2, [pc, #220]	; (8006404 <USB_SetTurnaroundTime+0x128>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d202      	bcs.n	8006332 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800632c:	230d      	movs	r3, #13
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e04c      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4a33      	ldr	r2, [pc, #204]	; (8006404 <USB_SetTurnaroundTime+0x128>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d306      	bcc.n	8006348 <USB_SetTurnaroundTime+0x6c>
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	4a32      	ldr	r2, [pc, #200]	; (8006408 <USB_SetTurnaroundTime+0x12c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d802      	bhi.n	8006348 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006342:	230c      	movs	r3, #12
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e041      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4a2f      	ldr	r2, [pc, #188]	; (8006408 <USB_SetTurnaroundTime+0x12c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d906      	bls.n	800635e <USB_SetTurnaroundTime+0x82>
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4a2e      	ldr	r2, [pc, #184]	; (800640c <USB_SetTurnaroundTime+0x130>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d802      	bhi.n	800635e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006358:	230b      	movs	r3, #11
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	e036      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	4a2a      	ldr	r2, [pc, #168]	; (800640c <USB_SetTurnaroundTime+0x130>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d906      	bls.n	8006374 <USB_SetTurnaroundTime+0x98>
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	4a29      	ldr	r2, [pc, #164]	; (8006410 <USB_SetTurnaroundTime+0x134>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d802      	bhi.n	8006374 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800636e:	230a      	movs	r3, #10
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	e02b      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4a26      	ldr	r2, [pc, #152]	; (8006410 <USB_SetTurnaroundTime+0x134>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d906      	bls.n	800638a <USB_SetTurnaroundTime+0xae>
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4a25      	ldr	r2, [pc, #148]	; (8006414 <USB_SetTurnaroundTime+0x138>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d202      	bcs.n	800638a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006384:	2309      	movs	r3, #9
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	e020      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	4a21      	ldr	r2, [pc, #132]	; (8006414 <USB_SetTurnaroundTime+0x138>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d306      	bcc.n	80063a0 <USB_SetTurnaroundTime+0xc4>
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	4a20      	ldr	r2, [pc, #128]	; (8006418 <USB_SetTurnaroundTime+0x13c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d802      	bhi.n	80063a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800639a:	2308      	movs	r3, #8
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	e015      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4a1d      	ldr	r2, [pc, #116]	; (8006418 <USB_SetTurnaroundTime+0x13c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d906      	bls.n	80063b6 <USB_SetTurnaroundTime+0xda>
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4a1c      	ldr	r2, [pc, #112]	; (800641c <USB_SetTurnaroundTime+0x140>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d202      	bcs.n	80063b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80063b0:	2307      	movs	r3, #7
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	e00a      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80063b6:	2306      	movs	r3, #6
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	e007      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80063bc:	79fb      	ldrb	r3, [r7, #7]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d102      	bne.n	80063c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80063c2:	2309      	movs	r3, #9
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	e001      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80063c8:	2309      	movs	r3, #9
 80063ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	029b      	lsls	r3, r3, #10
 80063e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80063e4:	431a      	orrs	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	00d8acbf 	.word	0x00d8acbf
 80063fc:	00e4e1c0 	.word	0x00e4e1c0
 8006400:	00f42400 	.word	0x00f42400
 8006404:	01067380 	.word	0x01067380
 8006408:	011a499f 	.word	0x011a499f
 800640c:	01312cff 	.word	0x01312cff
 8006410:	014ca43f 	.word	0x014ca43f
 8006414:	016e3600 	.word	0x016e3600
 8006418:	01a6ab1f 	.word	0x01a6ab1f
 800641c:	01e84800 	.word	0x01e84800

08006420 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f043 0201 	orr.w	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f023 0201 	bic.w	r2, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d115      	bne.n	80064b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006492:	2001      	movs	r0, #1
 8006494:	f7fb fce8 	bl	8001e68 <HAL_Delay>
      ms++;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3301      	adds	r3, #1
 800649c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fa45 	bl	800792e <USB_GetMode>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d01e      	beq.n	80064e8 <USB_SetCurrentMode+0x84>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b31      	cmp	r3, #49	; 0x31
 80064ae:	d9f0      	bls.n	8006492 <USB_SetCurrentMode+0x2e>
 80064b0:	e01a      	b.n	80064e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d115      	bne.n	80064e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064c4:	2001      	movs	r0, #1
 80064c6:	f7fb fccf 	bl	8001e68 <HAL_Delay>
      ms++;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3301      	adds	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 fa2c 	bl	800792e <USB_GetMode>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <USB_SetCurrentMode+0x84>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b31      	cmp	r3, #49	; 0x31
 80064e0:	d9f0      	bls.n	80064c4 <USB_SetCurrentMode+0x60>
 80064e2:	e001      	b.n	80064e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e005      	b.n	80064f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b32      	cmp	r3, #50	; 0x32
 80064ec:	d101      	bne.n	80064f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e000      	b.n	80064f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064fc:	b084      	sub	sp, #16
 80064fe:	b580      	push	{r7, lr}
 8006500:	b086      	sub	sp, #24
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800650a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006516:	2300      	movs	r3, #0
 8006518:	613b      	str	r3, [r7, #16]
 800651a:	e009      	b.n	8006530 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	3340      	adds	r3, #64	; 0x40
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	2200      	movs	r2, #0
 8006528:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	3301      	adds	r3, #1
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b0e      	cmp	r3, #14
 8006534:	d9f2      	bls.n	800651c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006538:	2b00      	cmp	r3, #0
 800653a:	d11c      	bne.n	8006576 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800654a:	f043 0302 	orr.w	r3, r3, #2
 800654e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	639a      	str	r2, [r3, #56]	; 0x38
 8006574:	e00b      	b.n	800658e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006594:	461a      	mov	r2, r3
 8006596:	2300      	movs	r3, #0
 8006598:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a0:	4619      	mov	r1, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a8:	461a      	mov	r2, r3
 80065aa:	680b      	ldr	r3, [r1, #0]
 80065ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d10c      	bne.n	80065ce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d104      	bne.n	80065c4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065ba:	2100      	movs	r1, #0
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f965 	bl	800688c <USB_SetDevSpeed>
 80065c2:	e008      	b.n	80065d6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065c4:	2101      	movs	r1, #1
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f960 	bl	800688c <USB_SetDevSpeed>
 80065cc:	e003      	b.n	80065d6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065ce:	2103      	movs	r1, #3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f95b 	bl	800688c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065d6:	2110      	movs	r1, #16
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f8f3 	bl	80067c4 <USB_FlushTxFifo>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f91f 	bl	800682c <USB_FlushRxFifo>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fe:	461a      	mov	r2, r3
 8006600:	2300      	movs	r3, #0
 8006602:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660a:	461a      	mov	r2, r3
 800660c:	2300      	movs	r3, #0
 800660e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006616:	461a      	mov	r2, r3
 8006618:	2300      	movs	r3, #0
 800661a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800661c:	2300      	movs	r3, #0
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	e043      	b.n	80066aa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006634:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006638:	d118      	bne.n	800666c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10a      	bne.n	8006656 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664c:	461a      	mov	r2, r3
 800664e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	e013      	b.n	800667e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4413      	add	r3, r2
 800665e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006662:	461a      	mov	r2, r3
 8006664:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	e008      	b.n	800667e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006678:	461a      	mov	r2, r3
 800667a:	2300      	movs	r3, #0
 800667c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668a:	461a      	mov	r2, r3
 800668c:	2300      	movs	r3, #0
 800668e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669c:	461a      	mov	r2, r3
 800669e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	3301      	adds	r3, #1
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d3b7      	bcc.n	8006622 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066b2:	2300      	movs	r3, #0
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	e043      	b.n	8006740 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ce:	d118      	bne.n	8006702 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e2:	461a      	mov	r2, r3
 80066e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	e013      	b.n	8006714 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f8:	461a      	mov	r2, r3
 80066fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	e008      	b.n	8006714 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670e:	461a      	mov	r2, r3
 8006710:	2300      	movs	r3, #0
 8006712:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006720:	461a      	mov	r2, r3
 8006722:	2300      	movs	r3, #0
 8006724:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006732:	461a      	mov	r2, r3
 8006734:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006738:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	3301      	adds	r3, #1
 800673e:	613b      	str	r3, [r7, #16]
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	429a      	cmp	r2, r3
 8006746:	d3b7      	bcc.n	80066b8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800675a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006768:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	2b00      	cmp	r3, #0
 800676e:	d105      	bne.n	800677c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	f043 0210 	orr.w	r2, r3, #16
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	699a      	ldr	r2, [r3, #24]
 8006780:	4b0f      	ldr	r3, [pc, #60]	; (80067c0 <USB_DevInit+0x2c4>)
 8006782:	4313      	orrs	r3, r2
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678a:	2b00      	cmp	r3, #0
 800678c:	d005      	beq.n	800679a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	f043 0208 	orr.w	r2, r3, #8
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800679a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800679c:	2b01      	cmp	r3, #1
 800679e:	d107      	bne.n	80067b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067a8:	f043 0304 	orr.w	r3, r3, #4
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067bc:	b004      	add	sp, #16
 80067be:	4770      	bx	lr
 80067c0:	803c3800 	.word	0x803c3800

080067c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3301      	adds	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4a13      	ldr	r2, [pc, #76]	; (8006828 <USB_FlushTxFifo+0x64>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d901      	bls.n	80067e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e01b      	b.n	800681c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	daf2      	bge.n	80067d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	019b      	lsls	r3, r3, #6
 80067f4:	f043 0220 	orr.w	r2, r3, #32
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3301      	adds	r3, #1
 8006800:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4a08      	ldr	r2, [pc, #32]	; (8006828 <USB_FlushTxFifo+0x64>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d901      	bls.n	800680e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e006      	b.n	800681c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b20      	cmp	r3, #32
 8006818:	d0f0      	beq.n	80067fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	00030d40 	.word	0x00030d40

0800682c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3301      	adds	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4a11      	ldr	r2, [pc, #68]	; (8006888 <USB_FlushRxFifo+0x5c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d901      	bls.n	800684a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e018      	b.n	800687c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	2b00      	cmp	r3, #0
 8006850:	daf2      	bge.n	8006838 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2210      	movs	r2, #16
 800685a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4a08      	ldr	r2, [pc, #32]	; (8006888 <USB_FlushRxFifo+0x5c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d901      	bls.n	800686e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e006      	b.n	800687c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0310 	and.w	r3, r3, #16
 8006876:	2b10      	cmp	r3, #16
 8006878:	d0f0      	beq.n	800685c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	00030d40 	.word	0x00030d40

0800688c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	68f9      	ldr	r1, [r7, #12]
 80068a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ac:	4313      	orrs	r3, r2
 80068ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80068be:	b480      	push	{r7}
 80068c0:	b087      	sub	sp, #28
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f003 0306 	and.w	r3, r3, #6
 80068d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d102      	bne.n	80068e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80068de:	2300      	movs	r3, #0
 80068e0:	75fb      	strb	r3, [r7, #23]
 80068e2:	e00a      	b.n	80068fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d002      	beq.n	80068f0 <USB_GetDevSpeed+0x32>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b06      	cmp	r3, #6
 80068ee:	d102      	bne.n	80068f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80068f0:	2302      	movs	r3, #2
 80068f2:	75fb      	strb	r3, [r7, #23]
 80068f4:	e001      	b.n	80068fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80068f6:	230f      	movs	r3, #15
 80068f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80068fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	785b      	ldrb	r3, [r3, #1]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d13a      	bne.n	800699a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692a:	69da      	ldr	r2, [r3, #28]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	f003 030f 	and.w	r3, r3, #15
 8006934:	2101      	movs	r1, #1
 8006936:	fa01 f303 	lsl.w	r3, r1, r3
 800693a:	b29b      	uxth	r3, r3
 800693c:	68f9      	ldr	r1, [r7, #12]
 800693e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006942:	4313      	orrs	r3, r2
 8006944:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d155      	bne.n	8006a08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	791b      	ldrb	r3, [r3, #4]
 8006976:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006978:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	059b      	lsls	r3, r3, #22
 800697e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006980:	4313      	orrs	r3, r2
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	0151      	lsls	r1, r2, #5
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	440a      	add	r2, r1
 800698a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800698e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	e036      	b.n	8006a08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a0:	69da      	ldr	r2, [r3, #28]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	f003 030f 	and.w	r3, r3, #15
 80069aa:	2101      	movs	r1, #1
 80069ac:	fa01 f303 	lsl.w	r3, r1, r3
 80069b0:	041b      	lsls	r3, r3, #16
 80069b2:	68f9      	ldr	r1, [r7, #12]
 80069b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069b8:	4313      	orrs	r3, r2
 80069ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d11a      	bne.n	8006a08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	791b      	ldrb	r3, [r3, #4]
 80069ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069ee:	430b      	orrs	r3, r1
 80069f0:	4313      	orrs	r3, r2
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	0151      	lsls	r1, r2, #5
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	440a      	add	r2, r1
 80069fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
	...

08006a18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	785b      	ldrb	r3, [r3, #1]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d161      	bne.n	8006af8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a4a:	d11f      	bne.n	8006a8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	0151      	lsls	r1, r2, #5
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	440a      	add	r2, r1
 8006a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	0151      	lsls	r1, r2, #5
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	440a      	add	r2, r1
 8006a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	f003 030f 	and.w	r3, r3, #15
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	43db      	mvns	r3, r3
 8006aa6:	68f9      	ldr	r1, [r7, #12]
 8006aa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aac:	4013      	ands	r3, r2
 8006aae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab6:	69da      	ldr	r2, [r3, #28]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	f003 030f 	and.w	r3, r3, #15
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	43db      	mvns	r3, r3
 8006aca:	68f9      	ldr	r1, [r7, #12]
 8006acc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	0159      	lsls	r1, r3, #5
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	440b      	add	r3, r1
 8006aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aee:	4619      	mov	r1, r3
 8006af0:	4b35      	ldr	r3, [pc, #212]	; (8006bc8 <USB_DeactivateEndpoint+0x1b0>)
 8006af2:	4013      	ands	r3, r2
 8006af4:	600b      	str	r3, [r1, #0]
 8006af6:	e060      	b.n	8006bba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b0e:	d11f      	bne.n	8006b50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	0151      	lsls	r1, r2, #5
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	440a      	add	r2, r1
 8006b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	0151      	lsls	r1, r2, #5
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	440a      	add	r2, r1
 8006b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	2101      	movs	r1, #1
 8006b62:	fa01 f303 	lsl.w	r3, r1, r3
 8006b66:	041b      	lsls	r3, r3, #16
 8006b68:	43db      	mvns	r3, r3
 8006b6a:	68f9      	ldr	r1, [r7, #12]
 8006b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b70:	4013      	ands	r3, r2
 8006b72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7a:	69da      	ldr	r2, [r3, #28]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	f003 030f 	and.w	r3, r3, #15
 8006b84:	2101      	movs	r1, #1
 8006b86:	fa01 f303 	lsl.w	r3, r1, r3
 8006b8a:	041b      	lsls	r3, r3, #16
 8006b8c:	43db      	mvns	r3, r3
 8006b8e:	68f9      	ldr	r1, [r7, #12]
 8006b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b94:	4013      	ands	r3, r2
 8006b96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	0159      	lsls	r1, r3, #5
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	440b      	add	r3, r1
 8006bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <USB_DeactivateEndpoint+0x1b4>)
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	ec337800 	.word	0xec337800
 8006bcc:	eff37800 	.word	0xeff37800

08006bd0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08a      	sub	sp, #40	; 0x28
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	785b      	ldrb	r3, [r3, #1]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	f040 815c 	bne.w	8006eaa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d132      	bne.n	8006c60 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	0151      	lsls	r1, r2, #5
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	440a      	add	r2, r1
 8006c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	0151      	lsls	r1, r2, #5
 8006c30:	69fa      	ldr	r2, [r7, #28]
 8006c32:	440a      	add	r2, r1
 8006c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	0151      	lsls	r1, r2, #5
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	440a      	add	r2, r1
 8006c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c58:	0cdb      	lsrs	r3, r3, #19
 8006c5a:	04db      	lsls	r3, r3, #19
 8006c5c:	6113      	str	r3, [r2, #16]
 8006c5e:	e074      	b.n	8006d4a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	0151      	lsls	r1, r2, #5
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	440a      	add	r2, r1
 8006c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c7a:	0cdb      	lsrs	r3, r3, #19
 8006c7c:	04db      	lsls	r3, r3, #19
 8006c7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	0151      	lsls	r1, r2, #5
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	440a      	add	r2, r1
 8006c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ca2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	6999      	ldr	r1, [r3, #24]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	440b      	add	r3, r1
 8006cbc:	1e59      	subs	r1, r3, #1
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cc6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006cc8:	4b9d      	ldr	r3, [pc, #628]	; (8006f40 <USB_EPStartXfer+0x370>)
 8006cca:	400b      	ands	r3, r1
 8006ccc:	69b9      	ldr	r1, [r7, #24]
 8006cce:	0148      	lsls	r0, r1, #5
 8006cd0:	69f9      	ldr	r1, [r7, #28]
 8006cd2:	4401      	add	r1, r0
 8006cd4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce8:	691a      	ldr	r2, [r3, #16]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cf2:	69b9      	ldr	r1, [r7, #24]
 8006cf4:	0148      	lsls	r0, r1, #5
 8006cf6:	69f9      	ldr	r1, [r7, #28]
 8006cf8:	4401      	add	r1, r0
 8006cfa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	791b      	ldrb	r3, [r3, #4]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d11f      	bne.n	8006d4a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	69fa      	ldr	r2, [r7, #28]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d24:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006d28:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	0151      	lsls	r1, r2, #5
 8006d3c:	69fa      	ldr	r2, [r7, #28]
 8006d3e:	440a      	add	r2, r1
 8006d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d48:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006d4a:	79fb      	ldrb	r3, [r7, #7]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d14b      	bne.n	8006de8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d009      	beq.n	8006d6c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d64:	461a      	mov	r2, r3
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	791b      	ldrb	r3, [r3, #4]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d128      	bne.n	8006dc6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d110      	bne.n	8006da6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	0151      	lsls	r1, r2, #5
 8006d96:	69fa      	ldr	r2, [r7, #28]
 8006d98:	440a      	add	r2, r1
 8006d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	e00f      	b.n	8006dc6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	0151      	lsls	r1, r2, #5
 8006db8:	69fa      	ldr	r2, [r7, #28]
 8006dba:	440a      	add	r2, r1
 8006dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dc4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	0151      	lsls	r1, r2, #5
 8006dd8:	69fa      	ldr	r2, [r7, #28]
 8006dda:	440a      	add	r2, r1
 8006ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	e133      	b.n	8007050 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	0151      	lsls	r1, r2, #5
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	440a      	add	r2, r1
 8006dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e06:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	791b      	ldrb	r3, [r3, #4]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d015      	beq.n	8006e3c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 811b 	beq.w	8007050 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	f003 030f 	and.w	r3, r3, #15
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e30:	69f9      	ldr	r1, [r7, #28]
 8006e32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e36:	4313      	orrs	r3, r2
 8006e38:	634b      	str	r3, [r1, #52]	; 0x34
 8006e3a:	e109      	b.n	8007050 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d110      	bne.n	8006e6e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	0151      	lsls	r1, r2, #5
 8006e5e:	69fa      	ldr	r2, [r7, #28]
 8006e60:	440a      	add	r2, r1
 8006e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e6a:	6013      	str	r3, [r2, #0]
 8006e6c:	e00f      	b.n	8006e8e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	0151      	lsls	r1, r2, #5
 8006e80:	69fa      	ldr	r2, [r7, #28]
 8006e82:	440a      	add	r2, r1
 8006e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e8c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	6919      	ldr	r1, [r3, #16]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	781a      	ldrb	r2, [r3, #0]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	b298      	uxth	r0, r3
 8006e9c:	79fb      	ldrb	r3, [r7, #7]
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 fade 	bl	8007464 <USB_WritePacket>
 8006ea8:	e0d2      	b.n	8007050 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	0151      	lsls	r1, r2, #5
 8006ebc:	69fa      	ldr	r2, [r7, #28]
 8006ebe:	440a      	add	r2, r1
 8006ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ec4:	0cdb      	lsrs	r3, r3, #19
 8006ec6:	04db      	lsls	r3, r3, #19
 8006ec8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	0151      	lsls	r1, r2, #5
 8006edc:	69fa      	ldr	r2, [r7, #28]
 8006ede:	440a      	add	r2, r1
 8006ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ee4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ee8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006eec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d126      	bne.n	8006f44 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f0c:	69b9      	ldr	r1, [r7, #24]
 8006f0e:	0148      	lsls	r0, r1, #5
 8006f10:	69f9      	ldr	r1, [r7, #28]
 8006f12:	4401      	add	r1, r0
 8006f14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	0151      	lsls	r1, r2, #5
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	440a      	add	r2, r1
 8006f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f3a:	6113      	str	r3, [r2, #16]
 8006f3c:	e03a      	b.n	8006fb4 <USB_EPStartXfer+0x3e4>
 8006f3e:	bf00      	nop
 8006f40:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	699a      	ldr	r2, [r3, #24]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	1e5a      	subs	r2, r3, #1
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f58:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	8afa      	ldrh	r2, [r7, #22]
 8006f60:	fb03 f202 	mul.w	r2, r3, r2
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f74:	691a      	ldr	r2, [r3, #16]
 8006f76:	8afb      	ldrh	r3, [r7, #22]
 8006f78:	04d9      	lsls	r1, r3, #19
 8006f7a:	4b38      	ldr	r3, [pc, #224]	; (800705c <USB_EPStartXfer+0x48c>)
 8006f7c:	400b      	ands	r3, r1
 8006f7e:	69b9      	ldr	r1, [r7, #24]
 8006f80:	0148      	lsls	r0, r1, #5
 8006f82:	69f9      	ldr	r1, [r7, #28]
 8006f84:	4401      	add	r1, r0
 8006f86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9a:	691a      	ldr	r2, [r3, #16]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fa4:	69b9      	ldr	r1, [r7, #24]
 8006fa6:	0148      	lsls	r0, r1, #5
 8006fa8:	69f9      	ldr	r1, [r7, #28]
 8006faa:	4401      	add	r1, r0
 8006fac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fb4:	79fb      	ldrb	r3, [r7, #7]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d10d      	bne.n	8006fd6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d009      	beq.n	8006fd6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	6919      	ldr	r1, [r3, #16]
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd2:	460a      	mov	r2, r1
 8006fd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	791b      	ldrb	r3, [r3, #4]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d128      	bne.n	8007030 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d110      	bne.n	8007010 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	0151      	lsls	r1, r2, #5
 8007000:	69fa      	ldr	r2, [r7, #28]
 8007002:	440a      	add	r2, r1
 8007004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007008:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	e00f      	b.n	8007030 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	0151      	lsls	r1, r2, #5
 8007022:	69fa      	ldr	r2, [r7, #28]
 8007024:	440a      	add	r2, r1
 8007026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800702a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800702e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	0151      	lsls	r1, r2, #5
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	440a      	add	r2, r1
 8007046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800704a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800704e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3720      	adds	r7, #32
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	1ff80000 	.word	0x1ff80000

08007060 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	4613      	mov	r3, r2
 800706c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	785b      	ldrb	r3, [r3, #1]
 800707c:	2b01      	cmp	r3, #1
 800707e:	f040 80ce 	bne.w	800721e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d132      	bne.n	80070f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	4413      	add	r3, r2
 8007092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	0151      	lsls	r1, r2, #5
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	440a      	add	r2, r1
 80070a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	0151      	lsls	r1, r2, #5
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	440a      	add	r2, r1
 80070c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	0151      	lsls	r1, r2, #5
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	440a      	add	r2, r1
 80070e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e8:	0cdb      	lsrs	r3, r3, #19
 80070ea:	04db      	lsls	r3, r3, #19
 80070ec:	6113      	str	r3, [r2, #16]
 80070ee:	e04e      	b.n	800718e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800710a:	0cdb      	lsrs	r3, r3, #19
 800710c:	04db      	lsls	r3, r3, #19
 800710e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	0151      	lsls	r1, r2, #5
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	440a      	add	r2, r1
 8007126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800712a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800712e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007132:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	699a      	ldr	r2, [r3, #24]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	429a      	cmp	r2, r3
 800713e:	d903      	bls.n	8007148 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	68da      	ldr	r2, [r3, #12]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	440a      	add	r2, r1
 800715e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007162:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007166:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007174:	691a      	ldr	r2, [r3, #16]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800717e:	6939      	ldr	r1, [r7, #16]
 8007180:	0148      	lsls	r0, r1, #5
 8007182:	6979      	ldr	r1, [r7, #20]
 8007184:	4401      	add	r1, r0
 8007186:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800718a:	4313      	orrs	r3, r2
 800718c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800718e:	79fb      	ldrb	r3, [r7, #7]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d11e      	bne.n	80071d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d009      	beq.n	80071b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a8:	461a      	mov	r2, r3
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	0151      	lsls	r1, r2, #5
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	440a      	add	r2, r1
 80071c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071ce:	6013      	str	r3, [r2, #0]
 80071d0:	e097      	b.n	8007302 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	0151      	lsls	r1, r2, #5
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	440a      	add	r2, r1
 80071e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 8083 	beq.w	8007302 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	f003 030f 	and.w	r3, r3, #15
 800720c:	2101      	movs	r1, #1
 800720e:	fa01 f303 	lsl.w	r3, r1, r3
 8007212:	6979      	ldr	r1, [r7, #20]
 8007214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007218:	4313      	orrs	r3, r2
 800721a:	634b      	str	r3, [r1, #52]	; 0x34
 800721c:	e071      	b.n	8007302 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	0151      	lsls	r1, r2, #5
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	440a      	add	r2, r1
 8007234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007238:	0cdb      	lsrs	r3, r3, #19
 800723a:	04db      	lsls	r3, r3, #19
 800723c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	4413      	add	r3, r2
 8007246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	0151      	lsls	r1, r2, #5
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	440a      	add	r2, r1
 8007254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007258:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800725c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007260:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	68da      	ldr	r2, [r3, #12]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	0151      	lsls	r1, r2, #5
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	440a      	add	r2, r1
 8007290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007294:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007298:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a6:	691a      	ldr	r2, [r3, #16]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	69db      	ldr	r3, [r3, #28]
 80072ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072b0:	6939      	ldr	r1, [r7, #16]
 80072b2:	0148      	lsls	r0, r1, #5
 80072b4:	6979      	ldr	r1, [r7, #20]
 80072b6:	4401      	add	r1, r0
 80072b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072bc:	4313      	orrs	r3, r2
 80072be:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80072c0:	79fb      	ldrb	r3, [r7, #7]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d10d      	bne.n	80072e2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	6919      	ldr	r1, [r3, #16]
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072de:	460a      	mov	r2, r1
 80072e0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	0151      	lsls	r1, r2, #5
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	440a      	add	r2, r1
 80072f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007300:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	371c      	adds	r7, #28
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	785b      	ldrb	r3, [r3, #1]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d14a      	bne.n	80073c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007342:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007346:	f040 8086 	bne.w	8007456 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	7812      	ldrb	r2, [r2, #0]
 800735e:	0151      	lsls	r1, r2, #5
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	440a      	add	r2, r1
 8007364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007368:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800736c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	7812      	ldrb	r2, [r2, #0]
 8007382:	0151      	lsls	r1, r2, #5
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	440a      	add	r2, r1
 8007388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800738c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007390:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	3301      	adds	r3, #1
 8007396:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f242 7210 	movw	r2, #10000	; 0x2710
 800739e:	4293      	cmp	r3, r2
 80073a0:	d902      	bls.n	80073a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	75fb      	strb	r3, [r7, #23]
          break;
 80073a6:	e056      	b.n	8007456 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073c0:	d0e7      	beq.n	8007392 <USB_EPStopXfer+0x82>
 80073c2:	e048      	b.n	8007456 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073dc:	d13b      	bne.n	8007456 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	7812      	ldrb	r2, [r2, #0]
 80073f2:	0151      	lsls	r1, r2, #5
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	440a      	add	r2, r1
 80073f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007400:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	4413      	add	r3, r2
 800740c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	7812      	ldrb	r2, [r2, #0]
 8007416:	0151      	lsls	r1, r2, #5
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	440a      	add	r2, r1
 800741c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007420:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007424:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3301      	adds	r3, #1
 800742a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007432:	4293      	cmp	r3, r2
 8007434:	d902      	bls.n	800743c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	75fb      	strb	r3, [r7, #23]
          break;
 800743a:	e00c      	b.n	8007456 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007454:	d0e7      	beq.n	8007426 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007456:	7dfb      	ldrb	r3, [r7, #23]
}
 8007458:	4618      	mov	r0, r3
 800745a:	371c      	adds	r7, #28
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007464:	b480      	push	{r7}
 8007466:	b089      	sub	sp, #36	; 0x24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	4611      	mov	r1, r2
 8007470:	461a      	mov	r2, r3
 8007472:	460b      	mov	r3, r1
 8007474:	71fb      	strb	r3, [r7, #7]
 8007476:	4613      	mov	r3, r2
 8007478:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007482:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007486:	2b00      	cmp	r3, #0
 8007488:	d123      	bne.n	80074d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800748a:	88bb      	ldrh	r3, [r7, #4]
 800748c:	3303      	adds	r3, #3
 800748e:	089b      	lsrs	r3, r3, #2
 8007490:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007492:	2300      	movs	r3, #0
 8007494:	61bb      	str	r3, [r7, #24]
 8007496:	e018      	b.n	80074ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	031a      	lsls	r2, r3, #12
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074a4:	461a      	mov	r2, r3
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	3301      	adds	r3, #1
 80074b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	3301      	adds	r3, #1
 80074b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	3301      	adds	r3, #1
 80074bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	3301      	adds	r3, #1
 80074c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	3301      	adds	r3, #1
 80074c8:	61bb      	str	r3, [r7, #24]
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d3e2      	bcc.n	8007498 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3724      	adds	r7, #36	; 0x24
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b08b      	sub	sp, #44	; 0x2c
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	4613      	mov	r3, r2
 80074ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80074f6:	88fb      	ldrh	r3, [r7, #6]
 80074f8:	089b      	lsrs	r3, r3, #2
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80074fe:	88fb      	ldrh	r3, [r7, #6]
 8007500:	f003 0303 	and.w	r3, r3, #3
 8007504:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007506:	2300      	movs	r3, #0
 8007508:	623b      	str	r3, [r7, #32]
 800750a:	e014      	b.n	8007536 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	601a      	str	r2, [r3, #0]
    pDest++;
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	3301      	adds	r3, #1
 800751c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	3301      	adds	r3, #1
 8007522:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	3301      	adds	r3, #1
 8007528:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	3301      	adds	r3, #1
 800752e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	3301      	adds	r3, #1
 8007534:	623b      	str	r3, [r7, #32]
 8007536:	6a3a      	ldr	r2, [r7, #32]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	429a      	cmp	r2, r3
 800753c:	d3e6      	bcc.n	800750c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800753e:	8bfb      	ldrh	r3, [r7, #30]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d01e      	beq.n	8007582 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800754e:	461a      	mov	r2, r3
 8007550:	f107 0310 	add.w	r3, r7, #16
 8007554:	6812      	ldr	r2, [r2, #0]
 8007556:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	b2db      	uxtb	r3, r3
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	fa22 f303 	lsr.w	r3, r2, r3
 8007564:	b2da      	uxtb	r2, r3
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	701a      	strb	r2, [r3, #0]
      i++;
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	3301      	adds	r3, #1
 800756e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	3301      	adds	r3, #1
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007576:	8bfb      	ldrh	r3, [r7, #30]
 8007578:	3b01      	subs	r3, #1
 800757a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800757c:	8bfb      	ldrh	r3, [r7, #30]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1ea      	bne.n	8007558 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007584:	4618      	mov	r0, r3
 8007586:	372c      	adds	r7, #44	; 0x2c
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	785b      	ldrb	r3, [r3, #1]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d12c      	bne.n	8007606 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	db12      	blt.n	80075e4 <USB_EPSetStall+0x54>
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00f      	beq.n	80075e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	0151      	lsls	r1, r2, #5
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	440a      	add	r2, r1
 80075da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	0151      	lsls	r1, r2, #5
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	440a      	add	r2, r1
 80075fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007602:	6013      	str	r3, [r2, #0]
 8007604:	e02b      	b.n	800765e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4413      	add	r3, r2
 800760e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	db12      	blt.n	800763e <USB_EPSetStall+0xae>
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00f      	beq.n	800763e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	4413      	add	r3, r2
 8007626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	0151      	lsls	r1, r2, #5
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	440a      	add	r2, r1
 8007634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007638:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800763c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	0151      	lsls	r1, r2, #5
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	440a      	add	r2, r1
 8007654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800765c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	785b      	ldrb	r3, [r3, #1]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d128      	bne.n	80076da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	0151      	lsls	r1, r2, #5
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	440a      	add	r2, r1
 800769e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	791b      	ldrb	r3, [r3, #4]
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d003      	beq.n	80076b8 <USB_EPClearStall+0x4c>
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	791b      	ldrb	r3, [r3, #4]
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d138      	bne.n	800772a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	0151      	lsls	r1, r2, #5
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	440a      	add	r2, r1
 80076ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	e027      	b.n	800772a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	0151      	lsls	r1, r2, #5
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	440a      	add	r2, r1
 80076f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	791b      	ldrb	r3, [r3, #4]
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d003      	beq.n	800770a <USB_EPClearStall+0x9e>
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	791b      	ldrb	r3, [r3, #4]
 8007706:	2b02      	cmp	r3, #2
 8007708:	d10f      	bne.n	800772a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4413      	add	r3, r2
 8007712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	0151      	lsls	r1, r2, #5
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	440a      	add	r2, r1
 8007720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007728:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007756:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800775a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800776c:	68f9      	ldr	r1, [r7, #12]
 800776e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007772:	4313      	orrs	r3, r2
 8007774:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800779e:	f023 0303 	bic.w	r3, r3, #3
 80077a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077b2:	f023 0302 	bic.w	r3, r3, #2
 80077b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b085      	sub	sp, #20
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077e0:	f023 0303 	bic.w	r3, r3, #3
 80077e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077f4:	f043 0302 	orr.w	r3, r3, #2
 80077f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4013      	ands	r3, r2
 800781e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007820:	68fb      	ldr	r3, [r7, #12]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800782e:	b480      	push	{r7}
 8007830:	b085      	sub	sp, #20
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	4013      	ands	r3, r2
 8007850:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	0c1b      	lsrs	r3, r3, #16
}
 8007856:	4618      	mov	r0, r3
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007862:	b480      	push	{r7}
 8007864:	b085      	sub	sp, #20
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	4013      	ands	r3, r2
 8007884:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	b29b      	uxth	r3, r3
}
 800788a:	4618      	mov	r0, r3
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007896:	b480      	push	{r7}
 8007898:	b085      	sub	sp, #20
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	460b      	mov	r3, r1
 80078a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078a6:	78fb      	ldrb	r3, [r7, #3]
 80078a8:	015a      	lsls	r2, r3, #5
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	4413      	add	r3, r2
 80078ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	4013      	ands	r3, r2
 80078c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078c4:	68bb      	ldr	r3, [r7, #8]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b087      	sub	sp, #28
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80078f6:	78fb      	ldrb	r3, [r7, #3]
 80078f8:	f003 030f 	and.w	r3, r3, #15
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007902:	01db      	lsls	r3, r3, #7
 8007904:	b2db      	uxtb	r3, r3
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4313      	orrs	r3, r2
 800790a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800790c:	78fb      	ldrb	r3, [r7, #3]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4013      	ands	r3, r2
 800791e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007920:	68bb      	ldr	r3, [r7, #8]
}
 8007922:	4618      	mov	r0, r3
 8007924:	371c      	adds	r7, #28
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	f003 0301 	and.w	r3, r3, #1
}
 800793e:	4618      	mov	r0, r3
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800794a:	b480      	push	{r7}
 800794c:	b085      	sub	sp, #20
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007964:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007968:	f023 0307 	bic.w	r3, r3, #7
 800796c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800797c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007980:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007990:	b480      	push	{r7}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	460b      	mov	r3, r1
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	333c      	adds	r3, #60	; 0x3c
 80079a6:	3304      	adds	r3, #4
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	4a26      	ldr	r2, [pc, #152]	; (8007a48 <USB_EP0_OutStart+0xb8>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d90a      	bls.n	80079ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079c4:	d101      	bne.n	80079ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	e037      	b.n	8007a3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d0:	461a      	mov	r2, r3
 80079d2:	2300      	movs	r3, #0
 80079d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f8:	f043 0318 	orr.w	r3, r3, #24
 80079fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007a10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a12:	7afb      	ldrb	r3, [r7, #11]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d10f      	bne.n	8007a38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1e:	461a      	mov	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a32:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007a36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	371c      	adds	r7, #28
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	4f54300a 	.word	0x4f54300a

08007a4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	4a13      	ldr	r2, [pc, #76]	; (8007ab0 <USB_CoreReset+0x64>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d901      	bls.n	8007a6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e01b      	b.n	8007aa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	daf2      	bge.n	8007a58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	f043 0201 	orr.w	r2, r3, #1
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3301      	adds	r3, #1
 8007a86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4a09      	ldr	r2, [pc, #36]	; (8007ab0 <USB_CoreReset+0x64>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d901      	bls.n	8007a94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e006      	b.n	8007aa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d0f0      	beq.n	8007a82 <USB_CoreReset+0x36>

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	00030d40 	.word	0x00030d40

08007ab4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ac0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ac4:	f002 fc8a 	bl	800a3dc <USBD_static_malloc>
 8007ac8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d109      	bne.n	8007ae4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	32b0      	adds	r2, #176	; 0xb0
 8007ada:	2100      	movs	r1, #0
 8007adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	e0d4      	b.n	8007c8e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007ae4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007ae8:	2100      	movs	r1, #0
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f002 fcee 	bl	800a4cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	32b0      	adds	r2, #176	; 0xb0
 8007afa:	68f9      	ldr	r1, [r7, #12]
 8007afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	32b0      	adds	r2, #176	; 0xb0
 8007b0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	7c1b      	ldrb	r3, [r3, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d138      	bne.n	8007b8e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b1c:	4b5e      	ldr	r3, [pc, #376]	; (8007c98 <USBD_CDC_Init+0x1e4>)
 8007b1e:	7819      	ldrb	r1, [r3, #0]
 8007b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b24:	2202      	movs	r2, #2
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f002 fb35 	bl	800a196 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b2c:	4b5a      	ldr	r3, [pc, #360]	; (8007c98 <USBD_CDC_Init+0x1e4>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	f003 020f 	and.w	r2, r3, #15
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	4613      	mov	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	4413      	add	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	440b      	add	r3, r1
 8007b40:	3324      	adds	r3, #36	; 0x24
 8007b42:	2201      	movs	r2, #1
 8007b44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b46:	4b55      	ldr	r3, [pc, #340]	; (8007c9c <USBD_CDC_Init+0x1e8>)
 8007b48:	7819      	ldrb	r1, [r3, #0]
 8007b4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b4e:	2202      	movs	r2, #2
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f002 fb20 	bl	800a196 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b56:	4b51      	ldr	r3, [pc, #324]	; (8007c9c <USBD_CDC_Init+0x1e8>)
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	f003 020f 	and.w	r2, r3, #15
 8007b5e:	6879      	ldr	r1, [r7, #4]
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	440b      	add	r3, r1
 8007b6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b6e:	2201      	movs	r2, #1
 8007b70:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b72:	4b4b      	ldr	r3, [pc, #300]	; (8007ca0 <USBD_CDC_Init+0x1ec>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	f003 020f 	and.w	r2, r3, #15
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	440b      	add	r3, r1
 8007b86:	3326      	adds	r3, #38	; 0x26
 8007b88:	2210      	movs	r2, #16
 8007b8a:	801a      	strh	r2, [r3, #0]
 8007b8c:	e035      	b.n	8007bfa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b8e:	4b42      	ldr	r3, [pc, #264]	; (8007c98 <USBD_CDC_Init+0x1e4>)
 8007b90:	7819      	ldrb	r1, [r3, #0]
 8007b92:	2340      	movs	r3, #64	; 0x40
 8007b94:	2202      	movs	r2, #2
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f002 fafd 	bl	800a196 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b9c:	4b3e      	ldr	r3, [pc, #248]	; (8007c98 <USBD_CDC_Init+0x1e4>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	f003 020f 	and.w	r2, r3, #15
 8007ba4:	6879      	ldr	r1, [r7, #4]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	440b      	add	r3, r1
 8007bb0:	3324      	adds	r3, #36	; 0x24
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007bb6:	4b39      	ldr	r3, [pc, #228]	; (8007c9c <USBD_CDC_Init+0x1e8>)
 8007bb8:	7819      	ldrb	r1, [r3, #0]
 8007bba:	2340      	movs	r3, #64	; 0x40
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f002 fae9 	bl	800a196 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007bc4:	4b35      	ldr	r3, [pc, #212]	; (8007c9c <USBD_CDC_Init+0x1e8>)
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	f003 020f 	and.w	r2, r3, #15
 8007bcc:	6879      	ldr	r1, [r7, #4]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	440b      	add	r3, r1
 8007bd8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bdc:	2201      	movs	r2, #1
 8007bde:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007be0:	4b2f      	ldr	r3, [pc, #188]	; (8007ca0 <USBD_CDC_Init+0x1ec>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	f003 020f 	and.w	r2, r3, #15
 8007be8:	6879      	ldr	r1, [r7, #4]
 8007bea:	4613      	mov	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	440b      	add	r3, r1
 8007bf4:	3326      	adds	r3, #38	; 0x26
 8007bf6:	2210      	movs	r2, #16
 8007bf8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007bfa:	4b29      	ldr	r3, [pc, #164]	; (8007ca0 <USBD_CDC_Init+0x1ec>)
 8007bfc:	7819      	ldrb	r1, [r3, #0]
 8007bfe:	2308      	movs	r3, #8
 8007c00:	2203      	movs	r2, #3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f002 fac7 	bl	800a196 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007c08:	4b25      	ldr	r3, [pc, #148]	; (8007ca0 <USBD_CDC_Init+0x1ec>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	f003 020f 	and.w	r2, r3, #15
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	440b      	add	r3, r1
 8007c1c:	3324      	adds	r3, #36	; 0x24
 8007c1e:	2201      	movs	r2, #1
 8007c20:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	33b0      	adds	r3, #176	; 0xb0
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	e018      	b.n	8007c8e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	7c1b      	ldrb	r3, [r3, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10a      	bne.n	8007c7a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c64:	4b0d      	ldr	r3, [pc, #52]	; (8007c9c <USBD_CDC_Init+0x1e8>)
 8007c66:	7819      	ldrb	r1, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f002 fb7e 	bl	800a374 <USBD_LL_PrepareReceive>
 8007c78:	e008      	b.n	8007c8c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c7a:	4b08      	ldr	r3, [pc, #32]	; (8007c9c <USBD_CDC_Init+0x1e8>)
 8007c7c:	7819      	ldrb	r1, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c84:	2340      	movs	r3, #64	; 0x40
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f002 fb74 	bl	800a374 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20000093 	.word	0x20000093
 8007c9c:	20000094 	.word	0x20000094
 8007ca0:	20000095 	.word	0x20000095

08007ca4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007cb0:	4b3a      	ldr	r3, [pc, #232]	; (8007d9c <USBD_CDC_DeInit+0xf8>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f002 fa93 	bl	800a1e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007cbc:	4b37      	ldr	r3, [pc, #220]	; (8007d9c <USBD_CDC_DeInit+0xf8>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	f003 020f 	and.w	r2, r3, #15
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	440b      	add	r3, r1
 8007cd0:	3324      	adds	r3, #36	; 0x24
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007cd6:	4b32      	ldr	r3, [pc, #200]	; (8007da0 <USBD_CDC_DeInit+0xfc>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f002 fa80 	bl	800a1e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007ce2:	4b2f      	ldr	r3, [pc, #188]	; (8007da0 <USBD_CDC_DeInit+0xfc>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	f003 020f 	and.w	r2, r3, #15
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	4613      	mov	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	440b      	add	r3, r1
 8007cf6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007cfe:	4b29      	ldr	r3, [pc, #164]	; (8007da4 <USBD_CDC_DeInit+0x100>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f002 fa6c 	bl	800a1e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007d0a:	4b26      	ldr	r3, [pc, #152]	; (8007da4 <USBD_CDC_DeInit+0x100>)
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	f003 020f 	and.w	r2, r3, #15
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	440b      	add	r3, r1
 8007d1e:	3324      	adds	r3, #36	; 0x24
 8007d20:	2200      	movs	r2, #0
 8007d22:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007d24:	4b1f      	ldr	r3, [pc, #124]	; (8007da4 <USBD_CDC_DeInit+0x100>)
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	f003 020f 	and.w	r2, r3, #15
 8007d2c:	6879      	ldr	r1, [r7, #4]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	440b      	add	r3, r1
 8007d38:	3326      	adds	r3, #38	; 0x26
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	32b0      	adds	r2, #176	; 0xb0
 8007d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d01f      	beq.n	8007d90 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	33b0      	adds	r3, #176	; 0xb0
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	32b0      	adds	r2, #176	; 0xb0
 8007d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f002 fb40 	bl	800a3f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	32b0      	adds	r2, #176	; 0xb0
 8007d82:	2100      	movs	r1, #0
 8007d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20000093 	.word	0x20000093
 8007da0:	20000094 	.word	0x20000094
 8007da4:	20000095 	.word	0x20000095

08007da8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	32b0      	adds	r2, #176	; 0xb0
 8007dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e0bf      	b.n	8007f58 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d050      	beq.n	8007e86 <USBD_CDC_Setup+0xde>
 8007de4:	2b20      	cmp	r3, #32
 8007de6:	f040 80af 	bne.w	8007f48 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	88db      	ldrh	r3, [r3, #6]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d03a      	beq.n	8007e68 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	b25b      	sxtb	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	da1b      	bge.n	8007e34 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	33b0      	adds	r3, #176	; 0xb0
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007e12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	88d2      	ldrh	r2, [r2, #6]
 8007e18:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	88db      	ldrh	r3, [r3, #6]
 8007e1e:	2b07      	cmp	r3, #7
 8007e20:	bf28      	it	cs
 8007e22:	2307      	movcs	r3, #7
 8007e24:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	89fa      	ldrh	r2, [r7, #14]
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f001 fd89 	bl	8009944 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e32:	e090      	b.n	8007f56 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	785a      	ldrb	r2, [r3, #1]
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	88db      	ldrh	r3, [r3, #6]
 8007e42:	2b3f      	cmp	r3, #63	; 0x3f
 8007e44:	d803      	bhi.n	8007e4e <USBD_CDC_Setup+0xa6>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	88db      	ldrh	r3, [r3, #6]
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	e000      	b.n	8007e50 <USBD_CDC_Setup+0xa8>
 8007e4e:	2240      	movs	r2, #64	; 0x40
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007e56:	6939      	ldr	r1, [r7, #16]
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007e5e:	461a      	mov	r2, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f001 fd9b 	bl	800999c <USBD_CtlPrepareRx>
      break;
 8007e66:	e076      	b.n	8007f56 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	33b0      	adds	r3, #176	; 0xb0
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	7850      	ldrb	r0, [r2, #1]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	4798      	blx	r3
      break;
 8007e84:	e067      	b.n	8007f56 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	785b      	ldrb	r3, [r3, #1]
 8007e8a:	2b0b      	cmp	r3, #11
 8007e8c:	d851      	bhi.n	8007f32 <USBD_CDC_Setup+0x18a>
 8007e8e:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <USBD_CDC_Setup+0xec>)
 8007e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e94:	08007ec5 	.word	0x08007ec5
 8007e98:	08007f41 	.word	0x08007f41
 8007e9c:	08007f33 	.word	0x08007f33
 8007ea0:	08007f33 	.word	0x08007f33
 8007ea4:	08007f33 	.word	0x08007f33
 8007ea8:	08007f33 	.word	0x08007f33
 8007eac:	08007f33 	.word	0x08007f33
 8007eb0:	08007f33 	.word	0x08007f33
 8007eb4:	08007f33 	.word	0x08007f33
 8007eb8:	08007f33 	.word	0x08007f33
 8007ebc:	08007eef 	.word	0x08007eef
 8007ec0:	08007f19 	.word	0x08007f19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d107      	bne.n	8007ee0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ed0:	f107 030a 	add.w	r3, r7, #10
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 fd33 	bl	8009944 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ede:	e032      	b.n	8007f46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f001 fcbd 	bl	8009862 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	75fb      	strb	r3, [r7, #23]
          break;
 8007eec:	e02b      	b.n	8007f46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d107      	bne.n	8007f0a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007efa:	f107 030d 	add.w	r3, r7, #13
 8007efe:	2201      	movs	r2, #1
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f001 fd1e 	bl	8009944 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f08:	e01d      	b.n	8007f46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f001 fca8 	bl	8009862 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f12:	2303      	movs	r3, #3
 8007f14:	75fb      	strb	r3, [r7, #23]
          break;
 8007f16:	e016      	b.n	8007f46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b03      	cmp	r3, #3
 8007f22:	d00f      	beq.n	8007f44 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 fc9b 	bl	8009862 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f30:	e008      	b.n	8007f44 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 fc94 	bl	8009862 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f3e:	e002      	b.n	8007f46 <USBD_CDC_Setup+0x19e>
          break;
 8007f40:	bf00      	nop
 8007f42:	e008      	b.n	8007f56 <USBD_CDC_Setup+0x1ae>
          break;
 8007f44:	bf00      	nop
      }
      break;
 8007f46:	e006      	b.n	8007f56 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f001 fc89 	bl	8009862 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f50:	2303      	movs	r3, #3
 8007f52:	75fb      	strb	r3, [r7, #23]
      break;
 8007f54:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3718      	adds	r7, #24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	32b0      	adds	r2, #176	; 0xb0
 8007f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e065      	b.n	8008056 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	32b0      	adds	r2, #176	; 0xb0
 8007f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	f003 020f 	and.w	r2, r3, #15
 8007fa0:	6879      	ldr	r1, [r7, #4]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	440b      	add	r3, r1
 8007fac:	3318      	adds	r3, #24
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d02f      	beq.n	8008014 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007fb4:	78fb      	ldrb	r3, [r7, #3]
 8007fb6:	f003 020f 	and.w	r2, r3, #15
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	440b      	add	r3, r1
 8007fc6:	3318      	adds	r3, #24
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	f003 010f 	and.w	r1, r3, #15
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	00db      	lsls	r3, r3, #3
 8007fd6:	440b      	add	r3, r1
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4403      	add	r3, r0
 8007fdc:	3348      	adds	r3, #72	; 0x48
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007fe4:	fb01 f303 	mul.w	r3, r1, r3
 8007fe8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d112      	bne.n	8008014 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	f003 020f 	and.w	r2, r3, #15
 8007ff4:	6879      	ldr	r1, [r7, #4]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	440b      	add	r3, r1
 8008000:	3318      	adds	r3, #24
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008006:	78f9      	ldrb	r1, [r7, #3]
 8008008:	2300      	movs	r3, #0
 800800a:	2200      	movs	r2, #0
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f002 f990 	bl	800a332 <USBD_LL_Transmit>
 8008012:	e01f      	b.n	8008054 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2200      	movs	r2, #0
 8008018:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	33b0      	adds	r3, #176	; 0xb0
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d010      	beq.n	8008054 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	33b0      	adds	r3, #176	; 0xb0
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008050:	78fa      	ldrb	r2, [r7, #3]
 8008052:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b084      	sub	sp, #16
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	460b      	mov	r3, r1
 8008068:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	32b0      	adds	r2, #176	; 0xb0
 8008074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008078:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	32b0      	adds	r2, #176	; 0xb0
 8008084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800808c:	2303      	movs	r3, #3
 800808e:	e01a      	b.n	80080c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008090:	78fb      	ldrb	r3, [r7, #3]
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f002 f98e 	bl	800a3b6 <USBD_LL_GetRxDataSize>
 800809a:	4602      	mov	r2, r0
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	33b0      	adds	r3, #176	; 0xb0
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80080c0:	4611      	mov	r1, r2
 80080c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	32b0      	adds	r2, #176	; 0xb0
 80080e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d101      	bne.n	80080f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e025      	b.n	800813c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	33b0      	adds	r3, #176	; 0xb0
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d01a      	beq.n	800813a <USBD_CDC_EP0_RxReady+0x6c>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800810a:	2bff      	cmp	r3, #255	; 0xff
 800810c:	d015      	beq.n	800813a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	33b0      	adds	r3, #176	; 0xb0
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008126:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800812e:	b292      	uxth	r2, r2
 8008130:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	22ff      	movs	r2, #255	; 0xff
 8008136:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800814c:	2182      	movs	r1, #130	; 0x82
 800814e:	4818      	ldr	r0, [pc, #96]	; (80081b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008150:	f000 fd4f 	bl	8008bf2 <USBD_GetEpDesc>
 8008154:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008156:	2101      	movs	r1, #1
 8008158:	4815      	ldr	r0, [pc, #84]	; (80081b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800815a:	f000 fd4a 	bl	8008bf2 <USBD_GetEpDesc>
 800815e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008160:	2181      	movs	r1, #129	; 0x81
 8008162:	4813      	ldr	r0, [pc, #76]	; (80081b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008164:	f000 fd45 	bl	8008bf2 <USBD_GetEpDesc>
 8008168:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2210      	movs	r2, #16
 8008174:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d006      	beq.n	800818a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	2200      	movs	r2, #0
 8008180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008184:	711a      	strb	r2, [r3, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d006      	beq.n	800819e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008198:	711a      	strb	r2, [r3, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2243      	movs	r2, #67	; 0x43
 80081a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081a4:	4b02      	ldr	r3, [pc, #8]	; (80081b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3718      	adds	r7, #24
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	20000050 	.word	0x20000050

080081b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081bc:	2182      	movs	r1, #130	; 0x82
 80081be:	4818      	ldr	r0, [pc, #96]	; (8008220 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081c0:	f000 fd17 	bl	8008bf2 <USBD_GetEpDesc>
 80081c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081c6:	2101      	movs	r1, #1
 80081c8:	4815      	ldr	r0, [pc, #84]	; (8008220 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081ca:	f000 fd12 	bl	8008bf2 <USBD_GetEpDesc>
 80081ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081d0:	2181      	movs	r1, #129	; 0x81
 80081d2:	4813      	ldr	r0, [pc, #76]	; (8008220 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081d4:	f000 fd0d 	bl	8008bf2 <USBD_GetEpDesc>
 80081d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d002      	beq.n	80081e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	2210      	movs	r2, #16
 80081e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d006      	beq.n	80081fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	2200      	movs	r2, #0
 80081f0:	711a      	strb	r2, [r3, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f042 0202 	orr.w	r2, r2, #2
 80081f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d006      	beq.n	800820e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	711a      	strb	r2, [r3, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f042 0202 	orr.w	r2, r2, #2
 800820c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2243      	movs	r2, #67	; 0x43
 8008212:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008214:	4b02      	ldr	r3, [pc, #8]	; (8008220 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	20000050 	.word	0x20000050

08008224 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800822c:	2182      	movs	r1, #130	; 0x82
 800822e:	4818      	ldr	r0, [pc, #96]	; (8008290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008230:	f000 fcdf 	bl	8008bf2 <USBD_GetEpDesc>
 8008234:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008236:	2101      	movs	r1, #1
 8008238:	4815      	ldr	r0, [pc, #84]	; (8008290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800823a:	f000 fcda 	bl	8008bf2 <USBD_GetEpDesc>
 800823e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008240:	2181      	movs	r1, #129	; 0x81
 8008242:	4813      	ldr	r0, [pc, #76]	; (8008290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008244:	f000 fcd5 	bl	8008bf2 <USBD_GetEpDesc>
 8008248:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	2210      	movs	r2, #16
 8008254:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d006      	beq.n	800826a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	2200      	movs	r2, #0
 8008260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008264:	711a      	strb	r2, [r3, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d006      	beq.n	800827e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008278:	711a      	strb	r2, [r3, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2243      	movs	r2, #67	; 0x43
 8008282:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008284:	4b02      	ldr	r3, [pc, #8]	; (8008290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008286:	4618      	mov	r0, r3
 8008288:	3718      	adds	r7, #24
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	20000050 	.word	0x20000050

08008294 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	220a      	movs	r2, #10
 80082a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80082a2:	4b03      	ldr	r3, [pc, #12]	; (80082b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	2000000c 	.word	0x2000000c

080082b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e009      	b.n	80082dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	33b0      	adds	r3, #176	; 0xb0
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	32b0      	adds	r2, #176	; 0xb0
 80082fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008302:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800830a:	2303      	movs	r3, #3
 800830c:	e008      	b.n	8008320 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	371c      	adds	r7, #28
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	32b0      	adds	r2, #176	; 0xb0
 8008340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008344:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800834c:	2303      	movs	r3, #3
 800834e:	e004      	b.n	800835a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
	...

08008368 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	32b0      	adds	r2, #176	; 0xb0
 800837a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008380:	2301      	movs	r3, #1
 8008382:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	32b0      	adds	r2, #176	; 0xb0
 800838e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008396:	2303      	movs	r3, #3
 8008398:	e025      	b.n	80083e6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d11f      	bne.n	80083e4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80083ac:	4b10      	ldr	r3, [pc, #64]	; (80083f0 <USBD_CDC_TransmitPacket+0x88>)
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	f003 020f 	and.w	r2, r3, #15
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4403      	add	r3, r0
 80083c6:	3318      	adds	r3, #24
 80083c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80083ca:	4b09      	ldr	r3, [pc, #36]	; (80083f0 <USBD_CDC_TransmitPacket+0x88>)
 80083cc:	7819      	ldrb	r1, [r3, #0]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f001 ffa9 	bl	800a332 <USBD_LL_Transmit>

    ret = USBD_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	20000093 	.word	0x20000093

080083f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	32b0      	adds	r2, #176	; 0xb0
 8008406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800840a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	32b0      	adds	r2, #176	; 0xb0
 8008416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800841e:	2303      	movs	r3, #3
 8008420:	e018      	b.n	8008454 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	7c1b      	ldrb	r3, [r3, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10a      	bne.n	8008440 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800842a:	4b0c      	ldr	r3, [pc, #48]	; (800845c <USBD_CDC_ReceivePacket+0x68>)
 800842c:	7819      	ldrb	r1, [r3, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f001 ff9b 	bl	800a374 <USBD_LL_PrepareReceive>
 800843e:	e008      	b.n	8008452 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008440:	4b06      	ldr	r3, [pc, #24]	; (800845c <USBD_CDC_ReceivePacket+0x68>)
 8008442:	7819      	ldrb	r1, [r3, #0]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800844a:	2340      	movs	r3, #64	; 0x40
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f001 ff91 	bl	800a374 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20000094 	.word	0x20000094

08008460 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	4613      	mov	r3, r2
 800846c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d101      	bne.n	8008478 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008474:	2303      	movs	r3, #3
 8008476:	e01f      	b.n	80084b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	79fa      	ldrb	r2, [r7, #7]
 80084aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f001 fe0b 	bl	800a0c8 <USBD_LL_Init>
 80084b2:	4603      	mov	r3, r0
 80084b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80084b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e025      	b.n	8008524 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	32ae      	adds	r2, #174	; 0xae
 80084ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00f      	beq.n	8008514 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	32ae      	adds	r2, #174	; 0xae
 80084fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008504:	f107 020e 	add.w	r2, r7, #14
 8008508:	4610      	mov	r0, r2
 800850a:	4798      	blx	r3
 800850c:	4602      	mov	r2, r0
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 fe13 	bl	800a160 <USBD_LL_Start>
 800853a:	4603      	mov	r3, r0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800854c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800854e:	4618      	mov	r0, r3
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	460b      	mov	r3, r1
 8008564:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008570:	2b00      	cmp	r3, #0
 8008572:	d009      	beq.n	8008588 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	78fa      	ldrb	r2, [r7, #3]
 800857e:	4611      	mov	r1, r2
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	4798      	blx	r3
 8008584:	4603      	mov	r3, r0
 8008586:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008588:	7bfb      	ldrb	r3, [r7, #15]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b084      	sub	sp, #16
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	460b      	mov	r3, r1
 800859c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	78fa      	ldrb	r2, [r7, #3]
 80085ac:	4611      	mov	r1, r2
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	4798      	blx	r3
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80085b8:	2303      	movs	r3, #3
 80085ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	4618      	mov	r0, r3
 80085da:	f001 f908 	bl	80097ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80085ec:	461a      	mov	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80085fa:	f003 031f 	and.w	r3, r3, #31
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d01a      	beq.n	8008638 <USBD_LL_SetupStage+0x72>
 8008602:	2b02      	cmp	r3, #2
 8008604:	d822      	bhi.n	800864c <USBD_LL_SetupStage+0x86>
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <USBD_LL_SetupStage+0x4a>
 800860a:	2b01      	cmp	r3, #1
 800860c:	d00a      	beq.n	8008624 <USBD_LL_SetupStage+0x5e>
 800860e:	e01d      	b.n	800864c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fb5f 	bl	8008cdc <USBD_StdDevReq>
 800861e:	4603      	mov	r3, r0
 8008620:	73fb      	strb	r3, [r7, #15]
      break;
 8008622:	e020      	b.n	8008666 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fbc7 	bl	8008dc0 <USBD_StdItfReq>
 8008632:	4603      	mov	r3, r0
 8008634:	73fb      	strb	r3, [r7, #15]
      break;
 8008636:	e016      	b.n	8008666 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fc29 	bl	8008e98 <USBD_StdEPReq>
 8008646:	4603      	mov	r3, r0
 8008648:	73fb      	strb	r3, [r7, #15]
      break;
 800864a:	e00c      	b.n	8008666 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008652:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008656:	b2db      	uxtb	r3, r3
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 fde0 	bl	800a220 <USBD_LL_StallEP>
 8008660:	4603      	mov	r3, r0
 8008662:	73fb      	strb	r3, [r7, #15]
      break;
 8008664:	bf00      	nop
  }

  return ret;
 8008666:	7bfb      	ldrb	r3, [r7, #15]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	460b      	mov	r3, r1
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008682:	7afb      	ldrb	r3, [r7, #11]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d16e      	bne.n	8008766 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800868e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008696:	2b03      	cmp	r3, #3
 8008698:	f040 8098 	bne.w	80087cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	689a      	ldr	r2, [r3, #8]
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d913      	bls.n	80086d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	689a      	ldr	r2, [r3, #8]
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	1ad2      	subs	r2, r2, r3
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	4293      	cmp	r3, r2
 80086c0:	bf28      	it	cs
 80086c2:	4613      	movcs	r3, r2
 80086c4:	461a      	mov	r2, r3
 80086c6:	6879      	ldr	r1, [r7, #4]
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f001 f984 	bl	80099d6 <USBD_CtlContinueRx>
 80086ce:	e07d      	b.n	80087cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086d6:	f003 031f 	and.w	r3, r3, #31
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d014      	beq.n	8008708 <USBD_LL_DataOutStage+0x98>
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d81d      	bhi.n	800871e <USBD_LL_DataOutStage+0xae>
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <USBD_LL_DataOutStage+0x7c>
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d003      	beq.n	80086f2 <USBD_LL_DataOutStage+0x82>
 80086ea:	e018      	b.n	800871e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	75bb      	strb	r3, [r7, #22]
            break;
 80086f0:	e018      	b.n	8008724 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	4619      	mov	r1, r3
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 fa5e 	bl	8008bbe <USBD_CoreFindIF>
 8008702:	4603      	mov	r3, r0
 8008704:	75bb      	strb	r3, [r7, #22]
            break;
 8008706:	e00d      	b.n	8008724 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800870e:	b2db      	uxtb	r3, r3
 8008710:	4619      	mov	r1, r3
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f000 fa60 	bl	8008bd8 <USBD_CoreFindEP>
 8008718:	4603      	mov	r3, r0
 800871a:	75bb      	strb	r3, [r7, #22]
            break;
 800871c:	e002      	b.n	8008724 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800871e:	2300      	movs	r3, #0
 8008720:	75bb      	strb	r3, [r7, #22]
            break;
 8008722:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008724:	7dbb      	ldrb	r3, [r7, #22]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d119      	bne.n	800875e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b03      	cmp	r3, #3
 8008734:	d113      	bne.n	800875e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008736:	7dba      	ldrb	r2, [r7, #22]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	32ae      	adds	r2, #174	; 0xae
 800873c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00b      	beq.n	800875e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008746:	7dba      	ldrb	r2, [r7, #22]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800874e:	7dba      	ldrb	r2, [r7, #22]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	32ae      	adds	r2, #174	; 0xae
 8008754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f001 f94a 	bl	80099f8 <USBD_CtlSendStatus>
 8008764:	e032      	b.n	80087cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008766:	7afb      	ldrb	r3, [r7, #11]
 8008768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800876c:	b2db      	uxtb	r3, r3
 800876e:	4619      	mov	r1, r3
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 fa31 	bl	8008bd8 <USBD_CoreFindEP>
 8008776:	4603      	mov	r3, r0
 8008778:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800877a:	7dbb      	ldrb	r3, [r7, #22]
 800877c:	2bff      	cmp	r3, #255	; 0xff
 800877e:	d025      	beq.n	80087cc <USBD_LL_DataOutStage+0x15c>
 8008780:	7dbb      	ldrb	r3, [r7, #22]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d122      	bne.n	80087cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b03      	cmp	r3, #3
 8008790:	d117      	bne.n	80087c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008792:	7dba      	ldrb	r2, [r7, #22]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	32ae      	adds	r2, #174	; 0xae
 8008798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00f      	beq.n	80087c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80087a2:	7dba      	ldrb	r2, [r7, #22]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80087aa:	7dba      	ldrb	r2, [r7, #22]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	32ae      	adds	r2, #174	; 0xae
 80087b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	7afa      	ldrb	r2, [r7, #11]
 80087b8:	4611      	mov	r1, r2
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	4798      	blx	r3
 80087be:	4603      	mov	r3, r0
 80087c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
 80087ca:	e000      	b.n	80087ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b086      	sub	sp, #24
 80087da:	af00      	add	r7, sp, #0
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	460b      	mov	r3, r1
 80087e0:	607a      	str	r2, [r7, #4]
 80087e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80087e4:	7afb      	ldrb	r3, [r7, #11]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d16f      	bne.n	80088ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3314      	adds	r3, #20
 80087ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d15a      	bne.n	80088b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	689a      	ldr	r2, [r3, #8]
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	429a      	cmp	r2, r3
 8008804:	d914      	bls.n	8008830 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	689a      	ldr	r2, [r3, #8]
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	1ad2      	subs	r2, r2, r3
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	461a      	mov	r2, r3
 800881a:	6879      	ldr	r1, [r7, #4]
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f001 f8ac 	bl	800997a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008822:	2300      	movs	r3, #0
 8008824:	2200      	movs	r2, #0
 8008826:	2100      	movs	r1, #0
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f001 fda3 	bl	800a374 <USBD_LL_PrepareReceive>
 800882e:	e03f      	b.n	80088b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	68da      	ldr	r2, [r3, #12]
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	429a      	cmp	r2, r3
 800883a:	d11c      	bne.n	8008876 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008844:	429a      	cmp	r2, r3
 8008846:	d316      	bcc.n	8008876 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008852:	429a      	cmp	r2, r3
 8008854:	d20f      	bcs.n	8008876 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008856:	2200      	movs	r2, #0
 8008858:	2100      	movs	r1, #0
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f001 f88d 	bl	800997a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008868:	2300      	movs	r3, #0
 800886a:	2200      	movs	r2, #0
 800886c:	2100      	movs	r1, #0
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f001 fd80 	bl	800a374 <USBD_LL_PrepareReceive>
 8008874:	e01c      	b.n	80088b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800887c:	b2db      	uxtb	r3, r3
 800887e:	2b03      	cmp	r3, #3
 8008880:	d10f      	bne.n	80088a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d009      	beq.n	80088a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088a2:	2180      	movs	r1, #128	; 0x80
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f001 fcbb 	bl	800a220 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f001 f8b7 	bl	8009a1e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d03a      	beq.n	8008930 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7ff fe42 	bl	8008544 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80088c8:	e032      	b.n	8008930 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80088ca:	7afb      	ldrb	r3, [r7, #11]
 80088cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	4619      	mov	r1, r3
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f000 f97f 	bl	8008bd8 <USBD_CoreFindEP>
 80088da:	4603      	mov	r3, r0
 80088dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	2bff      	cmp	r3, #255	; 0xff
 80088e2:	d025      	beq.n	8008930 <USBD_LL_DataInStage+0x15a>
 80088e4:	7dfb      	ldrb	r3, [r7, #23]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d122      	bne.n	8008930 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	d11c      	bne.n	8008930 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80088f6:	7dfa      	ldrb	r2, [r7, #23]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	32ae      	adds	r2, #174	; 0xae
 80088fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d014      	beq.n	8008930 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008906:	7dfa      	ldrb	r2, [r7, #23]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800890e:	7dfa      	ldrb	r2, [r7, #23]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	32ae      	adds	r2, #174	; 0xae
 8008914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	7afa      	ldrb	r2, [r7, #11]
 800891c:	4611      	mov	r1, r2
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	4798      	blx	r3
 8008922:	4603      	mov	r3, r0
 8008924:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008926:	7dbb      	ldrb	r3, [r7, #22]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800892c:	7dbb      	ldrb	r3, [r7, #22]
 800892e:	e000      	b.n	8008932 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3718      	adds	r7, #24
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008972:	2b00      	cmp	r3, #0
 8008974:	d014      	beq.n	80089a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00e      	beq.n	80089a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	6852      	ldr	r2, [r2, #4]
 800898e:	b2d2      	uxtb	r2, r2
 8008990:	4611      	mov	r1, r2
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	4798      	blx	r3
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d001      	beq.n	80089a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800899c:	2303      	movs	r3, #3
 800899e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089a0:	2340      	movs	r3, #64	; 0x40
 80089a2:	2200      	movs	r2, #0
 80089a4:	2100      	movs	r1, #0
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f001 fbf5 	bl	800a196 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2240      	movs	r2, #64	; 0x40
 80089b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089bc:	2340      	movs	r3, #64	; 0x40
 80089be:	2200      	movs	r2, #0
 80089c0:	2180      	movs	r1, #128	; 0x80
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f001 fbe7 	bl	800a196 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2240      	movs	r2, #64	; 0x40
 80089d2:	621a      	str	r2, [r3, #32]

  return ret;
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089de:	b480      	push	{r7}
 80089e0:	b083      	sub	sp, #12
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	78fa      	ldrb	r2, [r7, #3]
 80089ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2204      	movs	r2, #4
 8008a18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	d106      	bne.n	8008a4c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d110      	bne.n	8008a90 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00b      	beq.n	8008a90 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7e:	69db      	ldr	r3, [r3, #28]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d005      	beq.n	8008a90 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b082      	sub	sp, #8
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	32ae      	adds	r2, #174	; 0xae
 8008ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d101      	bne.n	8008abc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e01c      	b.n	8008af6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	d115      	bne.n	8008af4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	32ae      	adds	r2, #174	; 0xae
 8008ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad6:	6a1b      	ldr	r3, [r3, #32]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00b      	beq.n	8008af4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	32ae      	adds	r2, #174	; 0xae
 8008ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	78fa      	ldrb	r2, [r7, #3]
 8008aee:	4611      	mov	r1, r2
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b082      	sub	sp, #8
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	460b      	mov	r3, r1
 8008b08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	32ae      	adds	r2, #174	; 0xae
 8008b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d101      	bne.n	8008b20 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e01c      	b.n	8008b5a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	2b03      	cmp	r3, #3
 8008b2a:	d115      	bne.n	8008b58 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	32ae      	adds	r2, #174	; 0xae
 8008b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00b      	beq.n	8008b58 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	32ae      	adds	r2, #174	; 0xae
 8008b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	78fa      	ldrb	r2, [r7, #3]
 8008b52:	4611      	mov	r1, r2
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b083      	sub	sp, #12
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00e      	beq.n	8008bb4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	6852      	ldr	r2, [r2, #4]
 8008ba2:	b2d2      	uxtb	r2, r2
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	4798      	blx	r3
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008bca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008be4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b086      	sub	sp, #24
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008c06:	2300      	movs	r3, #0
 8008c08:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	885b      	ldrh	r3, [r3, #2]
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d920      	bls.n	8008c5c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c22:	e013      	b.n	8008c4c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c24:	f107 030a 	add.w	r3, r7, #10
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6978      	ldr	r0, [r7, #20]
 8008c2c:	f000 f81b 	bl	8008c66 <USBD_GetNextDesc>
 8008c30:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	785b      	ldrb	r3, [r3, #1]
 8008c36:	2b05      	cmp	r3, #5
 8008c38:	d108      	bne.n	8008c4c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	789b      	ldrb	r3, [r3, #2]
 8008c42:	78fa      	ldrb	r2, [r7, #3]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d008      	beq.n	8008c5a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	885b      	ldrh	r3, [r3, #2]
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	897b      	ldrh	r3, [r7, #10]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d8e5      	bhi.n	8008c24 <USBD_GetEpDesc+0x32>
 8008c58:	e000      	b.n	8008c5c <USBD_GetEpDesc+0x6a>
          break;
 8008c5a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008c5c:	693b      	ldr	r3, [r7, #16]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3718      	adds	r7, #24
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b085      	sub	sp, #20
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	881a      	ldrh	r2, [r3, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	4413      	add	r3, r2
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4413      	add	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c92:	68fb      	ldr	r3, [r7, #12]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008cbe:	8a3b      	ldrh	r3, [r7, #16]
 8008cc0:	021b      	lsls	r3, r3, #8
 8008cc2:	b21a      	sxth	r2, r3
 8008cc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	b21b      	sxth	r3, r3
 8008ccc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008cce:	89fb      	ldrh	r3, [r7, #14]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	371c      	adds	r7, #28
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cf2:	2b40      	cmp	r3, #64	; 0x40
 8008cf4:	d005      	beq.n	8008d02 <USBD_StdDevReq+0x26>
 8008cf6:	2b40      	cmp	r3, #64	; 0x40
 8008cf8:	d857      	bhi.n	8008daa <USBD_StdDevReq+0xce>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00f      	beq.n	8008d1e <USBD_StdDevReq+0x42>
 8008cfe:	2b20      	cmp	r3, #32
 8008d00:	d153      	bne.n	8008daa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	32ae      	adds	r2, #174	; 0xae
 8008d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	4798      	blx	r3
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d1c:	e04a      	b.n	8008db4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	785b      	ldrb	r3, [r3, #1]
 8008d22:	2b09      	cmp	r3, #9
 8008d24:	d83b      	bhi.n	8008d9e <USBD_StdDevReq+0xc2>
 8008d26:	a201      	add	r2, pc, #4	; (adr r2, 8008d2c <USBD_StdDevReq+0x50>)
 8008d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2c:	08008d81 	.word	0x08008d81
 8008d30:	08008d95 	.word	0x08008d95
 8008d34:	08008d9f 	.word	0x08008d9f
 8008d38:	08008d8b 	.word	0x08008d8b
 8008d3c:	08008d9f 	.word	0x08008d9f
 8008d40:	08008d5f 	.word	0x08008d5f
 8008d44:	08008d55 	.word	0x08008d55
 8008d48:	08008d9f 	.word	0x08008d9f
 8008d4c:	08008d77 	.word	0x08008d77
 8008d50:	08008d69 	.word	0x08008d69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fa3c 	bl	80091d4 <USBD_GetDescriptor>
          break;
 8008d5c:	e024      	b.n	8008da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fba1 	bl	80094a8 <USBD_SetAddress>
          break;
 8008d66:	e01f      	b.n	8008da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fbe0 	bl	8009530 <USBD_SetConfig>
 8008d70:	4603      	mov	r3, r0
 8008d72:	73fb      	strb	r3, [r7, #15]
          break;
 8008d74:	e018      	b.n	8008da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fc83 	bl	8009684 <USBD_GetConfig>
          break;
 8008d7e:	e013      	b.n	8008da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fcb4 	bl	80096f0 <USBD_GetStatus>
          break;
 8008d88:	e00e      	b.n	8008da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fce3 	bl	8009758 <USBD_SetFeature>
          break;
 8008d92:	e009      	b.n	8008da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fd07 	bl	80097aa <USBD_ClrFeature>
          break;
 8008d9c:	e004      	b.n	8008da8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fd5e 	bl	8009862 <USBD_CtlError>
          break;
 8008da6:	bf00      	nop
      }
      break;
 8008da8:	e004      	b.n	8008db4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fd58 	bl	8009862 <USBD_CtlError>
      break;
 8008db2:	bf00      	nop
  }

  return ret;
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop

08008dc0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dd6:	2b40      	cmp	r3, #64	; 0x40
 8008dd8:	d005      	beq.n	8008de6 <USBD_StdItfReq+0x26>
 8008dda:	2b40      	cmp	r3, #64	; 0x40
 8008ddc:	d852      	bhi.n	8008e84 <USBD_StdItfReq+0xc4>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <USBD_StdItfReq+0x26>
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	d14e      	bne.n	8008e84 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	3b01      	subs	r3, #1
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d840      	bhi.n	8008e76 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	889b      	ldrh	r3, [r3, #4]
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d836      	bhi.n	8008e6c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	889b      	ldrh	r3, [r3, #4]
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7ff fed9 	bl	8008bbe <USBD_CoreFindIF>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	2bff      	cmp	r3, #255	; 0xff
 8008e14:	d01d      	beq.n	8008e52 <USBD_StdItfReq+0x92>
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d11a      	bne.n	8008e52 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e1c:	7bba      	ldrb	r2, [r7, #14]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	32ae      	adds	r2, #174	; 0xae
 8008e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00f      	beq.n	8008e4c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e2c:	7bba      	ldrb	r2, [r7, #14]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e34:	7bba      	ldrb	r2, [r7, #14]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	32ae      	adds	r2, #174	; 0xae
 8008e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	4798      	blx	r3
 8008e46:	4603      	mov	r3, r0
 8008e48:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e4a:	e004      	b.n	8008e56 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e50:	e001      	b.n	8008e56 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008e52:	2303      	movs	r3, #3
 8008e54:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	88db      	ldrh	r3, [r3, #6]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d110      	bne.n	8008e80 <USBD_StdItfReq+0xc0>
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10d      	bne.n	8008e80 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fdc7 	bl	80099f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e6a:	e009      	b.n	8008e80 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fcf7 	bl	8009862 <USBD_CtlError>
          break;
 8008e74:	e004      	b.n	8008e80 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fcf2 	bl	8009862 <USBD_CtlError>
          break;
 8008e7e:	e000      	b.n	8008e82 <USBD_StdItfReq+0xc2>
          break;
 8008e80:	bf00      	nop
      }
      break;
 8008e82:	e004      	b.n	8008e8e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fceb 	bl	8009862 <USBD_CtlError>
      break;
 8008e8c:	bf00      	nop
  }

  return ret;
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	889b      	ldrh	r3, [r3, #4]
 8008eaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eb4:	2b40      	cmp	r3, #64	; 0x40
 8008eb6:	d007      	beq.n	8008ec8 <USBD_StdEPReq+0x30>
 8008eb8:	2b40      	cmp	r3, #64	; 0x40
 8008eba:	f200 817f 	bhi.w	80091bc <USBD_StdEPReq+0x324>
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d02a      	beq.n	8008f18 <USBD_StdEPReq+0x80>
 8008ec2:	2b20      	cmp	r3, #32
 8008ec4:	f040 817a 	bne.w	80091bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff fe83 	bl	8008bd8 <USBD_CoreFindEP>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ed6:	7b7b      	ldrb	r3, [r7, #13]
 8008ed8:	2bff      	cmp	r3, #255	; 0xff
 8008eda:	f000 8174 	beq.w	80091c6 <USBD_StdEPReq+0x32e>
 8008ede:	7b7b      	ldrb	r3, [r7, #13]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f040 8170 	bne.w	80091c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008ee6:	7b7a      	ldrb	r2, [r7, #13]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008eee:	7b7a      	ldrb	r2, [r7, #13]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	32ae      	adds	r2, #174	; 0xae
 8008ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 8163 	beq.w	80091c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f00:	7b7a      	ldrb	r2, [r7, #13]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	32ae      	adds	r2, #174	; 0xae
 8008f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	4798      	blx	r3
 8008f12:	4603      	mov	r3, r0
 8008f14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f16:	e156      	b.n	80091c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	785b      	ldrb	r3, [r3, #1]
 8008f1c:	2b03      	cmp	r3, #3
 8008f1e:	d008      	beq.n	8008f32 <USBD_StdEPReq+0x9a>
 8008f20:	2b03      	cmp	r3, #3
 8008f22:	f300 8145 	bgt.w	80091b0 <USBD_StdEPReq+0x318>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f000 809b 	beq.w	8009062 <USBD_StdEPReq+0x1ca>
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d03c      	beq.n	8008faa <USBD_StdEPReq+0x112>
 8008f30:	e13e      	b.n	80091b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d002      	beq.n	8008f44 <USBD_StdEPReq+0xac>
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d016      	beq.n	8008f70 <USBD_StdEPReq+0xd8>
 8008f42:	e02c      	b.n	8008f9e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00d      	beq.n	8008f66 <USBD_StdEPReq+0xce>
 8008f4a:	7bbb      	ldrb	r3, [r7, #14]
 8008f4c:	2b80      	cmp	r3, #128	; 0x80
 8008f4e:	d00a      	beq.n	8008f66 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f50:	7bbb      	ldrb	r3, [r7, #14]
 8008f52:	4619      	mov	r1, r3
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f001 f963 	bl	800a220 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f5a:	2180      	movs	r1, #128	; 0x80
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f001 f95f 	bl	800a220 <USBD_LL_StallEP>
 8008f62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f64:	e020      	b.n	8008fa8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fc7a 	bl	8009862 <USBD_CtlError>
              break;
 8008f6e:	e01b      	b.n	8008fa8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	885b      	ldrh	r3, [r3, #2]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10e      	bne.n	8008f96 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00b      	beq.n	8008f96 <USBD_StdEPReq+0xfe>
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
 8008f80:	2b80      	cmp	r3, #128	; 0x80
 8008f82:	d008      	beq.n	8008f96 <USBD_StdEPReq+0xfe>
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	88db      	ldrh	r3, [r3, #6]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d104      	bne.n	8008f96 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f8c:	7bbb      	ldrb	r3, [r7, #14]
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f001 f945 	bl	800a220 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fd2e 	bl	80099f8 <USBD_CtlSendStatus>

              break;
 8008f9c:	e004      	b.n	8008fa8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fc5e 	bl	8009862 <USBD_CtlError>
              break;
 8008fa6:	bf00      	nop
          }
          break;
 8008fa8:	e107      	b.n	80091ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d002      	beq.n	8008fbc <USBD_StdEPReq+0x124>
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d016      	beq.n	8008fe8 <USBD_StdEPReq+0x150>
 8008fba:	e04b      	b.n	8009054 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fbc:	7bbb      	ldrb	r3, [r7, #14]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00d      	beq.n	8008fde <USBD_StdEPReq+0x146>
 8008fc2:	7bbb      	ldrb	r3, [r7, #14]
 8008fc4:	2b80      	cmp	r3, #128	; 0x80
 8008fc6:	d00a      	beq.n	8008fde <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f001 f927 	bl	800a220 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fd2:	2180      	movs	r1, #128	; 0x80
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f001 f923 	bl	800a220 <USBD_LL_StallEP>
 8008fda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fdc:	e040      	b.n	8009060 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fc3e 	bl	8009862 <USBD_CtlError>
              break;
 8008fe6:	e03b      	b.n	8009060 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	885b      	ldrh	r3, [r3, #2]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d136      	bne.n	800905e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d004      	beq.n	8009004 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f001 f92d 	bl	800a25e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 fcf7 	bl	80099f8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800900a:	7bbb      	ldrb	r3, [r7, #14]
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7ff fde2 	bl	8008bd8 <USBD_CoreFindEP>
 8009014:	4603      	mov	r3, r0
 8009016:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009018:	7b7b      	ldrb	r3, [r7, #13]
 800901a:	2bff      	cmp	r3, #255	; 0xff
 800901c:	d01f      	beq.n	800905e <USBD_StdEPReq+0x1c6>
 800901e:	7b7b      	ldrb	r3, [r7, #13]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d11c      	bne.n	800905e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009024:	7b7a      	ldrb	r2, [r7, #13]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800902c:	7b7a      	ldrb	r2, [r7, #13]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	32ae      	adds	r2, #174	; 0xae
 8009032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d010      	beq.n	800905e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800903c:	7b7a      	ldrb	r2, [r7, #13]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	32ae      	adds	r2, #174	; 0xae
 8009042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	4798      	blx	r3
 800904e:	4603      	mov	r3, r0
 8009050:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009052:	e004      	b.n	800905e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fc03 	bl	8009862 <USBD_CtlError>
              break;
 800905c:	e000      	b.n	8009060 <USBD_StdEPReq+0x1c8>
              break;
 800905e:	bf00      	nop
          }
          break;
 8009060:	e0ab      	b.n	80091ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b02      	cmp	r3, #2
 800906c:	d002      	beq.n	8009074 <USBD_StdEPReq+0x1dc>
 800906e:	2b03      	cmp	r3, #3
 8009070:	d032      	beq.n	80090d8 <USBD_StdEPReq+0x240>
 8009072:	e097      	b.n	80091a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009074:	7bbb      	ldrb	r3, [r7, #14]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d007      	beq.n	800908a <USBD_StdEPReq+0x1f2>
 800907a:	7bbb      	ldrb	r3, [r7, #14]
 800907c:	2b80      	cmp	r3, #128	; 0x80
 800907e:	d004      	beq.n	800908a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fbed 	bl	8009862 <USBD_CtlError>
                break;
 8009088:	e091      	b.n	80091ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800908a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800908e:	2b00      	cmp	r3, #0
 8009090:	da0b      	bge.n	80090aa <USBD_StdEPReq+0x212>
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009098:	4613      	mov	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	3310      	adds	r3, #16
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	4413      	add	r3, r2
 80090a6:	3304      	adds	r3, #4
 80090a8:	e00b      	b.n	80090c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090b0:	4613      	mov	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	4413      	add	r3, r2
 80090c0:	3304      	adds	r3, #4
 80090c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2200      	movs	r2, #0
 80090c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2202      	movs	r2, #2
 80090ce:	4619      	mov	r1, r3
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fc37 	bl	8009944 <USBD_CtlSendData>
              break;
 80090d6:	e06a      	b.n	80091ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	da11      	bge.n	8009104 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
 80090e2:	f003 020f 	and.w	r2, r3, #15
 80090e6:	6879      	ldr	r1, [r7, #4]
 80090e8:	4613      	mov	r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4413      	add	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	440b      	add	r3, r1
 80090f2:	3324      	adds	r3, #36	; 0x24
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d117      	bne.n	800912a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fbb0 	bl	8009862 <USBD_CtlError>
                  break;
 8009102:	e054      	b.n	80091ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009104:	7bbb      	ldrb	r3, [r7, #14]
 8009106:	f003 020f 	and.w	r2, r3, #15
 800910a:	6879      	ldr	r1, [r7, #4]
 800910c:	4613      	mov	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	440b      	add	r3, r1
 8009116:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d104      	bne.n	800912a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fb9d 	bl	8009862 <USBD_CtlError>
                  break;
 8009128:	e041      	b.n	80091ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800912a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800912e:	2b00      	cmp	r3, #0
 8009130:	da0b      	bge.n	800914a <USBD_StdEPReq+0x2b2>
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009138:	4613      	mov	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	3310      	adds	r3, #16
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	4413      	add	r3, r2
 8009146:	3304      	adds	r3, #4
 8009148:	e00b      	b.n	8009162 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	4413      	add	r3, r2
 8009160:	3304      	adds	r3, #4
 8009162:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009164:	7bbb      	ldrb	r3, [r7, #14]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d002      	beq.n	8009170 <USBD_StdEPReq+0x2d8>
 800916a:	7bbb      	ldrb	r3, [r7, #14]
 800916c:	2b80      	cmp	r3, #128	; 0x80
 800916e:	d103      	bne.n	8009178 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2200      	movs	r2, #0
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	e00e      	b.n	8009196 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009178:	7bbb      	ldrb	r3, [r7, #14]
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f001 f88d 	bl	800a29c <USBD_LL_IsStallEP>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d003      	beq.n	8009190 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	2201      	movs	r2, #1
 800918c:	601a      	str	r2, [r3, #0]
 800918e:	e002      	b.n	8009196 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2202      	movs	r2, #2
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fbd1 	bl	8009944 <USBD_CtlSendData>
              break;
 80091a2:	e004      	b.n	80091ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fb5b 	bl	8009862 <USBD_CtlError>
              break;
 80091ac:	bf00      	nop
          }
          break;
 80091ae:	e004      	b.n	80091ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fb55 	bl	8009862 <USBD_CtlError>
          break;
 80091b8:	bf00      	nop
      }
      break;
 80091ba:	e005      	b.n	80091c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fb4f 	bl	8009862 <USBD_CtlError>
      break;
 80091c4:	e000      	b.n	80091c8 <USBD_StdEPReq+0x330>
      break;
 80091c6:	bf00      	nop
  }

  return ret;
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
	...

080091d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091de:	2300      	movs	r3, #0
 80091e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80091e2:	2300      	movs	r3, #0
 80091e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	885b      	ldrh	r3, [r3, #2]
 80091ee:	0a1b      	lsrs	r3, r3, #8
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	3b01      	subs	r3, #1
 80091f4:	2b06      	cmp	r3, #6
 80091f6:	f200 8128 	bhi.w	800944a <USBD_GetDescriptor+0x276>
 80091fa:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <USBD_GetDescriptor+0x2c>)
 80091fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009200:	0800921d 	.word	0x0800921d
 8009204:	08009235 	.word	0x08009235
 8009208:	08009275 	.word	0x08009275
 800920c:	0800944b 	.word	0x0800944b
 8009210:	0800944b 	.word	0x0800944b
 8009214:	080093eb 	.word	0x080093eb
 8009218:	08009417 	.word	0x08009417
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	7c12      	ldrb	r2, [r2, #16]
 8009228:	f107 0108 	add.w	r1, r7, #8
 800922c:	4610      	mov	r0, r2
 800922e:	4798      	blx	r3
 8009230:	60f8      	str	r0, [r7, #12]
      break;
 8009232:	e112      	b.n	800945a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	7c1b      	ldrb	r3, [r3, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10d      	bne.n	8009258 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009244:	f107 0208 	add.w	r2, r7, #8
 8009248:	4610      	mov	r0, r2
 800924a:	4798      	blx	r3
 800924c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	3301      	adds	r3, #1
 8009252:	2202      	movs	r2, #2
 8009254:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009256:	e100      	b.n	800945a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009260:	f107 0208 	add.w	r2, r7, #8
 8009264:	4610      	mov	r0, r2
 8009266:	4798      	blx	r3
 8009268:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3301      	adds	r3, #1
 800926e:	2202      	movs	r2, #2
 8009270:	701a      	strb	r2, [r3, #0]
      break;
 8009272:	e0f2      	b.n	800945a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	885b      	ldrh	r3, [r3, #2]
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b05      	cmp	r3, #5
 800927c:	f200 80ac 	bhi.w	80093d8 <USBD_GetDescriptor+0x204>
 8009280:	a201      	add	r2, pc, #4	; (adr r2, 8009288 <USBD_GetDescriptor+0xb4>)
 8009282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009286:	bf00      	nop
 8009288:	080092a1 	.word	0x080092a1
 800928c:	080092d5 	.word	0x080092d5
 8009290:	08009309 	.word	0x08009309
 8009294:	0800933d 	.word	0x0800933d
 8009298:	08009371 	.word	0x08009371
 800929c:	080093a5 	.word	0x080093a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00b      	beq.n	80092c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	7c12      	ldrb	r2, [r2, #16]
 80092b8:	f107 0108 	add.w	r1, r7, #8
 80092bc:	4610      	mov	r0, r2
 80092be:	4798      	blx	r3
 80092c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092c2:	e091      	b.n	80093e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 facb 	bl	8009862 <USBD_CtlError>
            err++;
 80092cc:	7afb      	ldrb	r3, [r7, #11]
 80092ce:	3301      	adds	r3, #1
 80092d0:	72fb      	strb	r3, [r7, #11]
          break;
 80092d2:	e089      	b.n	80093e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00b      	beq.n	80092f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	7c12      	ldrb	r2, [r2, #16]
 80092ec:	f107 0108 	add.w	r1, r7, #8
 80092f0:	4610      	mov	r0, r2
 80092f2:	4798      	blx	r3
 80092f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092f6:	e077      	b.n	80093e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fab1 	bl	8009862 <USBD_CtlError>
            err++;
 8009300:	7afb      	ldrb	r3, [r7, #11]
 8009302:	3301      	adds	r3, #1
 8009304:	72fb      	strb	r3, [r7, #11]
          break;
 8009306:	e06f      	b.n	80093e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00b      	beq.n	800932c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	7c12      	ldrb	r2, [r2, #16]
 8009320:	f107 0108 	add.w	r1, r7, #8
 8009324:	4610      	mov	r0, r2
 8009326:	4798      	blx	r3
 8009328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800932a:	e05d      	b.n	80093e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fa97 	bl	8009862 <USBD_CtlError>
            err++;
 8009334:	7afb      	ldrb	r3, [r7, #11]
 8009336:	3301      	adds	r3, #1
 8009338:	72fb      	strb	r3, [r7, #11]
          break;
 800933a:	e055      	b.n	80093e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00b      	beq.n	8009360 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	7c12      	ldrb	r2, [r2, #16]
 8009354:	f107 0108 	add.w	r1, r7, #8
 8009358:	4610      	mov	r0, r2
 800935a:	4798      	blx	r3
 800935c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800935e:	e043      	b.n	80093e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fa7d 	bl	8009862 <USBD_CtlError>
            err++;
 8009368:	7afb      	ldrb	r3, [r7, #11]
 800936a:	3301      	adds	r3, #1
 800936c:	72fb      	strb	r3, [r7, #11]
          break;
 800936e:	e03b      	b.n	80093e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00b      	beq.n	8009394 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	7c12      	ldrb	r2, [r2, #16]
 8009388:	f107 0108 	add.w	r1, r7, #8
 800938c:	4610      	mov	r0, r2
 800938e:	4798      	blx	r3
 8009390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009392:	e029      	b.n	80093e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fa63 	bl	8009862 <USBD_CtlError>
            err++;
 800939c:	7afb      	ldrb	r3, [r7, #11]
 800939e:	3301      	adds	r3, #1
 80093a0:	72fb      	strb	r3, [r7, #11]
          break;
 80093a2:	e021      	b.n	80093e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00b      	beq.n	80093c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	7c12      	ldrb	r2, [r2, #16]
 80093bc:	f107 0108 	add.w	r1, r7, #8
 80093c0:	4610      	mov	r0, r2
 80093c2:	4798      	blx	r3
 80093c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093c6:	e00f      	b.n	80093e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 fa49 	bl	8009862 <USBD_CtlError>
            err++;
 80093d0:	7afb      	ldrb	r3, [r7, #11]
 80093d2:	3301      	adds	r3, #1
 80093d4:	72fb      	strb	r3, [r7, #11]
          break;
 80093d6:	e007      	b.n	80093e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fa41 	bl	8009862 <USBD_CtlError>
          err++;
 80093e0:	7afb      	ldrb	r3, [r7, #11]
 80093e2:	3301      	adds	r3, #1
 80093e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80093e6:	bf00      	nop
      }
      break;
 80093e8:	e037      	b.n	800945a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	7c1b      	ldrb	r3, [r3, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d109      	bne.n	8009406 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fa:	f107 0208 	add.w	r2, r7, #8
 80093fe:	4610      	mov	r0, r2
 8009400:	4798      	blx	r3
 8009402:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009404:	e029      	b.n	800945a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fa2a 	bl	8009862 <USBD_CtlError>
        err++;
 800940e:	7afb      	ldrb	r3, [r7, #11]
 8009410:	3301      	adds	r3, #1
 8009412:	72fb      	strb	r3, [r7, #11]
      break;
 8009414:	e021      	b.n	800945a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	7c1b      	ldrb	r3, [r3, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10d      	bne.n	800943a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009426:	f107 0208 	add.w	r2, r7, #8
 800942a:	4610      	mov	r0, r2
 800942c:	4798      	blx	r3
 800942e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3301      	adds	r3, #1
 8009434:	2207      	movs	r2, #7
 8009436:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009438:	e00f      	b.n	800945a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fa10 	bl	8009862 <USBD_CtlError>
        err++;
 8009442:	7afb      	ldrb	r3, [r7, #11]
 8009444:	3301      	adds	r3, #1
 8009446:	72fb      	strb	r3, [r7, #11]
      break;
 8009448:	e007      	b.n	800945a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fa08 	bl	8009862 <USBD_CtlError>
      err++;
 8009452:	7afb      	ldrb	r3, [r7, #11]
 8009454:	3301      	adds	r3, #1
 8009456:	72fb      	strb	r3, [r7, #11]
      break;
 8009458:	bf00      	nop
  }

  if (err != 0U)
 800945a:	7afb      	ldrb	r3, [r7, #11]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d11e      	bne.n	800949e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	88db      	ldrh	r3, [r3, #6]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d016      	beq.n	8009496 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009468:	893b      	ldrh	r3, [r7, #8]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00e      	beq.n	800948c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	88da      	ldrh	r2, [r3, #6]
 8009472:	893b      	ldrh	r3, [r7, #8]
 8009474:	4293      	cmp	r3, r2
 8009476:	bf28      	it	cs
 8009478:	4613      	movcs	r3, r2
 800947a:	b29b      	uxth	r3, r3
 800947c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800947e:	893b      	ldrh	r3, [r7, #8]
 8009480:	461a      	mov	r2, r3
 8009482:	68f9      	ldr	r1, [r7, #12]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fa5d 	bl	8009944 <USBD_CtlSendData>
 800948a:	e009      	b.n	80094a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800948c:	6839      	ldr	r1, [r7, #0]
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f9e7 	bl	8009862 <USBD_CtlError>
 8009494:	e004      	b.n	80094a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 faae 	bl	80099f8 <USBD_CtlSendStatus>
 800949c:	e000      	b.n	80094a0 <USBD_GetDescriptor+0x2cc>
    return;
 800949e:	bf00      	nop
  }
}
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop

080094a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	889b      	ldrh	r3, [r3, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d131      	bne.n	800951e <USBD_SetAddress+0x76>
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	88db      	ldrh	r3, [r3, #6]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d12d      	bne.n	800951e <USBD_SetAddress+0x76>
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	885b      	ldrh	r3, [r3, #2]
 80094c6:	2b7f      	cmp	r3, #127	; 0x7f
 80094c8:	d829      	bhi.n	800951e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	885b      	ldrh	r3, [r3, #2]
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d104      	bne.n	80094ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f9bc 	bl	8009862 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ea:	e01d      	b.n	8009528 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	7bfa      	ldrb	r2, [r7, #15]
 80094f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fefb 	bl	800a2f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fa7a 	bl	80099f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d004      	beq.n	8009514 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2202      	movs	r2, #2
 800950e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009512:	e009      	b.n	8009528 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800951c:	e004      	b.n	8009528 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f99e 	bl	8009862 <USBD_CtlError>
  }
}
 8009526:	bf00      	nop
 8009528:	bf00      	nop
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	885b      	ldrh	r3, [r3, #2]
 8009542:	b2da      	uxtb	r2, r3
 8009544:	4b4e      	ldr	r3, [pc, #312]	; (8009680 <USBD_SetConfig+0x150>)
 8009546:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009548:	4b4d      	ldr	r3, [pc, #308]	; (8009680 <USBD_SetConfig+0x150>)
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d905      	bls.n	800955c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009550:	6839      	ldr	r1, [r7, #0]
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f985 	bl	8009862 <USBD_CtlError>
    return USBD_FAIL;
 8009558:	2303      	movs	r3, #3
 800955a:	e08c      	b.n	8009676 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009562:	b2db      	uxtb	r3, r3
 8009564:	2b02      	cmp	r3, #2
 8009566:	d002      	beq.n	800956e <USBD_SetConfig+0x3e>
 8009568:	2b03      	cmp	r3, #3
 800956a:	d029      	beq.n	80095c0 <USBD_SetConfig+0x90>
 800956c:	e075      	b.n	800965a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800956e:	4b44      	ldr	r3, [pc, #272]	; (8009680 <USBD_SetConfig+0x150>)
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d020      	beq.n	80095b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009576:	4b42      	ldr	r3, [pc, #264]	; (8009680 <USBD_SetConfig+0x150>)
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009580:	4b3f      	ldr	r3, [pc, #252]	; (8009680 <USBD_SetConfig+0x150>)
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7fe ffe7 	bl	800855a <USBD_SetClassConfig>
 800958c:	4603      	mov	r3, r0
 800958e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009590:	7bfb      	ldrb	r3, [r7, #15]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d008      	beq.n	80095a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f962 	bl	8009862 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2202      	movs	r2, #2
 80095a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095a6:	e065      	b.n	8009674 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fa25 	bl	80099f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2203      	movs	r2, #3
 80095b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80095b6:	e05d      	b.n	8009674 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fa1d 	bl	80099f8 <USBD_CtlSendStatus>
      break;
 80095be:	e059      	b.n	8009674 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095c0:	4b2f      	ldr	r3, [pc, #188]	; (8009680 <USBD_SetConfig+0x150>)
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d112      	bne.n	80095ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2202      	movs	r2, #2
 80095cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80095d0:	4b2b      	ldr	r3, [pc, #172]	; (8009680 <USBD_SetConfig+0x150>)
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	461a      	mov	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095da:	4b29      	ldr	r3, [pc, #164]	; (8009680 <USBD_SetConfig+0x150>)
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7fe ffd6 	bl	8008592 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fa06 	bl	80099f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095ec:	e042      	b.n	8009674 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80095ee:	4b24      	ldr	r3, [pc, #144]	; (8009680 <USBD_SetConfig+0x150>)
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	461a      	mov	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d02a      	beq.n	8009652 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	b2db      	uxtb	r3, r3
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7fe ffc4 	bl	8008592 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800960a:	4b1d      	ldr	r3, [pc, #116]	; (8009680 <USBD_SetConfig+0x150>)
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009614:	4b1a      	ldr	r3, [pc, #104]	; (8009680 <USBD_SetConfig+0x150>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	4619      	mov	r1, r3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7fe ff9d 	bl	800855a <USBD_SetClassConfig>
 8009620:	4603      	mov	r3, r0
 8009622:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00f      	beq.n	800964a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800962a:	6839      	ldr	r1, [r7, #0]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f918 	bl	8009862 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	b2db      	uxtb	r3, r3
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7fe ffa9 	bl	8008592 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2202      	movs	r2, #2
 8009644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009648:	e014      	b.n	8009674 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f9d4 	bl	80099f8 <USBD_CtlSendStatus>
      break;
 8009650:	e010      	b.n	8009674 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f9d0 	bl	80099f8 <USBD_CtlSendStatus>
      break;
 8009658:	e00c      	b.n	8009674 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f900 	bl	8009862 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009662:	4b07      	ldr	r3, [pc, #28]	; (8009680 <USBD_SetConfig+0x150>)
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7fe ff92 	bl	8008592 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800966e:	2303      	movs	r3, #3
 8009670:	73fb      	strb	r3, [r7, #15]
      break;
 8009672:	bf00      	nop
  }

  return ret;
 8009674:	7bfb      	ldrb	r3, [r7, #15]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	200013d4 	.word	0x200013d4

08009684 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	88db      	ldrh	r3, [r3, #6]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d004      	beq.n	80096a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f8e2 	bl	8009862 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800969e:	e023      	b.n	80096e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	dc02      	bgt.n	80096b2 <USBD_GetConfig+0x2e>
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	dc03      	bgt.n	80096b8 <USBD_GetConfig+0x34>
 80096b0:	e015      	b.n	80096de <USBD_GetConfig+0x5a>
 80096b2:	2b03      	cmp	r3, #3
 80096b4:	d00b      	beq.n	80096ce <USBD_GetConfig+0x4a>
 80096b6:	e012      	b.n	80096de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	3308      	adds	r3, #8
 80096c2:	2201      	movs	r2, #1
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f93c 	bl	8009944 <USBD_CtlSendData>
        break;
 80096cc:	e00c      	b.n	80096e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	3304      	adds	r3, #4
 80096d2:	2201      	movs	r2, #1
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f934 	bl	8009944 <USBD_CtlSendData>
        break;
 80096dc:	e004      	b.n	80096e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f8be 	bl	8009862 <USBD_CtlError>
        break;
 80096e6:	bf00      	nop
}
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009700:	b2db      	uxtb	r3, r3
 8009702:	3b01      	subs	r3, #1
 8009704:	2b02      	cmp	r3, #2
 8009706:	d81e      	bhi.n	8009746 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	88db      	ldrh	r3, [r3, #6]
 800970c:	2b02      	cmp	r3, #2
 800970e:	d004      	beq.n	800971a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f8a5 	bl	8009862 <USBD_CtlError>
        break;
 8009718:	e01a      	b.n	8009750 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009726:	2b00      	cmp	r3, #0
 8009728:	d005      	beq.n	8009736 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	f043 0202 	orr.w	r2, r3, #2
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	330c      	adds	r3, #12
 800973a:	2202      	movs	r2, #2
 800973c:	4619      	mov	r1, r3
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f900 	bl	8009944 <USBD_CtlSendData>
      break;
 8009744:	e004      	b.n	8009750 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f88a 	bl	8009862 <USBD_CtlError>
      break;
 800974e:	bf00      	nop
  }
}
 8009750:	bf00      	nop
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	885b      	ldrh	r3, [r3, #2]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d107      	bne.n	800977a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2201      	movs	r2, #1
 800976e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f940 	bl	80099f8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009778:	e013      	b.n	80097a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	885b      	ldrh	r3, [r3, #2]
 800977e:	2b02      	cmp	r3, #2
 8009780:	d10b      	bne.n	800979a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	889b      	ldrh	r3, [r3, #4]
 8009786:	0a1b      	lsrs	r3, r3, #8
 8009788:	b29b      	uxth	r3, r3
 800978a:	b2da      	uxtb	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f930 	bl	80099f8 <USBD_CtlSendStatus>
}
 8009798:	e003      	b.n	80097a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f860 	bl	8009862 <USBD_CtlError>
}
 80097a2:	bf00      	nop
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b082      	sub	sp, #8
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	3b01      	subs	r3, #1
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d80b      	bhi.n	80097da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	885b      	ldrh	r3, [r3, #2]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d10c      	bne.n	80097e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f910 	bl	80099f8 <USBD_CtlSendStatus>
      }
      break;
 80097d8:	e004      	b.n	80097e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f840 	bl	8009862 <USBD_CtlError>
      break;
 80097e2:	e000      	b.n	80097e6 <USBD_ClrFeature+0x3c>
      break;
 80097e4:	bf00      	nop
  }
}
 80097e6:	bf00      	nop
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	781a      	ldrb	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	3301      	adds	r3, #1
 8009808:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	781a      	ldrb	r2, [r3, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3301      	adds	r3, #1
 8009816:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f7ff fa41 	bl	8008ca0 <SWAPBYTE>
 800981e:	4603      	mov	r3, r0
 8009820:	461a      	mov	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3301      	adds	r3, #1
 800982a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	3301      	adds	r3, #1
 8009830:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f7ff fa34 	bl	8008ca0 <SWAPBYTE>
 8009838:	4603      	mov	r3, r0
 800983a:	461a      	mov	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	3301      	adds	r3, #1
 8009844:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3301      	adds	r3, #1
 800984a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f7ff fa27 	bl	8008ca0 <SWAPBYTE>
 8009852:	4603      	mov	r3, r0
 8009854:	461a      	mov	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	80da      	strh	r2, [r3, #6]
}
 800985a:	bf00      	nop
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b082      	sub	sp, #8
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800986c:	2180      	movs	r1, #128	; 0x80
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 fcd6 	bl	800a220 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009874:	2100      	movs	r1, #0
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fcd2 	bl	800a220 <USBD_LL_StallEP>
}
 800987c:	bf00      	nop
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b086      	sub	sp, #24
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009890:	2300      	movs	r3, #0
 8009892:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d036      	beq.n	8009908 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800989e:	6938      	ldr	r0, [r7, #16]
 80098a0:	f000 f836 	bl	8009910 <USBD_GetLen>
 80098a4:	4603      	mov	r3, r0
 80098a6:	3301      	adds	r3, #1
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	005b      	lsls	r3, r3, #1
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	4413      	add	r3, r2
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	7812      	ldrb	r2, [r2, #0]
 80098bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	3301      	adds	r3, #1
 80098c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098c4:	7dfb      	ldrb	r3, [r7, #23]
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	4413      	add	r3, r2
 80098ca:	2203      	movs	r2, #3
 80098cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80098ce:	7dfb      	ldrb	r3, [r7, #23]
 80098d0:	3301      	adds	r3, #1
 80098d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80098d4:	e013      	b.n	80098fe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80098d6:	7dfb      	ldrb	r3, [r7, #23]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	4413      	add	r3, r2
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	7812      	ldrb	r2, [r2, #0]
 80098e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	3301      	adds	r3, #1
 80098e6:	613b      	str	r3, [r7, #16]
    idx++;
 80098e8:	7dfb      	ldrb	r3, [r7, #23]
 80098ea:	3301      	adds	r3, #1
 80098ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	4413      	add	r3, r2
 80098f4:	2200      	movs	r2, #0
 80098f6:	701a      	strb	r2, [r3, #0]
    idx++;
 80098f8:	7dfb      	ldrb	r3, [r7, #23]
 80098fa:	3301      	adds	r3, #1
 80098fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1e7      	bne.n	80098d6 <USBD_GetString+0x52>
 8009906:	e000      	b.n	800990a <USBD_GetString+0x86>
    return;
 8009908:	bf00      	nop
  }
}
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009918:	2300      	movs	r3, #0
 800991a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009920:	e005      	b.n	800992e <USBD_GetLen+0x1e>
  {
    len++;
 8009922:	7bfb      	ldrb	r3, [r7, #15]
 8009924:	3301      	adds	r3, #1
 8009926:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	3301      	adds	r3, #1
 800992c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1f5      	bne.n	8009922 <USBD_GetLen+0x12>
  }

  return len;
 8009936:	7bfb      	ldrb	r3, [r7, #15]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2202      	movs	r2, #2
 8009954:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	2100      	movs	r1, #0
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 fce1 	bl	800a332 <USBD_LL_Transmit>

  return USBD_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	60f8      	str	r0, [r7, #12]
 8009982:	60b9      	str	r1, [r7, #8]
 8009984:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	2100      	movs	r1, #0
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f000 fcd0 	bl	800a332 <USBD_LL_Transmit>

  return USBD_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2203      	movs	r2, #3
 80099ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	2100      	movs	r1, #0
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f000 fcd4 	bl	800a374 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	60f8      	str	r0, [r7, #12]
 80099de:	60b9      	str	r1, [r7, #8]
 80099e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	2100      	movs	r1, #0
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f000 fcc3 	bl	800a374 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2204      	movs	r2, #4
 8009a04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a08:	2300      	movs	r3, #0
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fc8f 	bl	800a332 <USBD_LL_Transmit>

  return USBD_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b082      	sub	sp, #8
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2205      	movs	r2, #5
 8009a2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a2e:	2300      	movs	r3, #0
 8009a30:	2200      	movs	r2, #0
 8009a32:	2100      	movs	r1, #0
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fc9d 	bl	800a374 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	4912      	ldr	r1, [pc, #72]	; (8009a94 <MX_USB_DEVICE_Init+0x50>)
 8009a4c:	4812      	ldr	r0, [pc, #72]	; (8009a98 <MX_USB_DEVICE_Init+0x54>)
 8009a4e:	f7fe fd07 	bl	8008460 <USBD_Init>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d001      	beq.n	8009a5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a58:	f7f7 fdc4 	bl	80015e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a5c:	490f      	ldr	r1, [pc, #60]	; (8009a9c <MX_USB_DEVICE_Init+0x58>)
 8009a5e:	480e      	ldr	r0, [pc, #56]	; (8009a98 <MX_USB_DEVICE_Init+0x54>)
 8009a60:	f7fe fd2e 	bl	80084c0 <USBD_RegisterClass>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d001      	beq.n	8009a6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a6a:	f7f7 fdbb 	bl	80015e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a6e:	490c      	ldr	r1, [pc, #48]	; (8009aa0 <MX_USB_DEVICE_Init+0x5c>)
 8009a70:	4809      	ldr	r0, [pc, #36]	; (8009a98 <MX_USB_DEVICE_Init+0x54>)
 8009a72:	f7fe fc1f 	bl	80082b4 <USBD_CDC_RegisterInterface>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d001      	beq.n	8009a80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a7c:	f7f7 fdb2 	bl	80015e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009a80:	4805      	ldr	r0, [pc, #20]	; (8009a98 <MX_USB_DEVICE_Init+0x54>)
 8009a82:	f7fe fd53 	bl	800852c <USBD_Start>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a8c:	f7f7 fdaa 	bl	80015e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a90:	bf00      	nop
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	200000ac 	.word	0x200000ac
 8009a98:	200013d8 	.word	0x200013d8
 8009a9c:	20000018 	.word	0x20000018
 8009aa0:	20000098 	.word	0x20000098

08009aa4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	4905      	ldr	r1, [pc, #20]	; (8009ac0 <CDC_Init_FS+0x1c>)
 8009aac:	4805      	ldr	r0, [pc, #20]	; (8009ac4 <CDC_Init_FS+0x20>)
 8009aae:	f7fe fc1b 	bl	80082e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009ab2:	4905      	ldr	r1, [pc, #20]	; (8009ac8 <CDC_Init_FS+0x24>)
 8009ab4:	4803      	ldr	r0, [pc, #12]	; (8009ac4 <CDC_Init_FS+0x20>)
 8009ab6:	f7fe fc39 	bl	800832c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009aba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	20001eb4 	.word	0x20001eb4
 8009ac4:	200013d8 	.word	0x200013d8
 8009ac8:	200016b4 	.word	0x200016b4

08009acc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009acc:	b480      	push	{r7}
 8009ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ad0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	6039      	str	r1, [r7, #0]
 8009ae6:	71fb      	strb	r3, [r7, #7]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009aec:	79fb      	ldrb	r3, [r7, #7]
 8009aee:	2b23      	cmp	r3, #35	; 0x23
 8009af0:	d84a      	bhi.n	8009b88 <CDC_Control_FS+0xac>
 8009af2:	a201      	add	r2, pc, #4	; (adr r2, 8009af8 <CDC_Control_FS+0x1c>)
 8009af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af8:	08009b89 	.word	0x08009b89
 8009afc:	08009b89 	.word	0x08009b89
 8009b00:	08009b89 	.word	0x08009b89
 8009b04:	08009b89 	.word	0x08009b89
 8009b08:	08009b89 	.word	0x08009b89
 8009b0c:	08009b89 	.word	0x08009b89
 8009b10:	08009b89 	.word	0x08009b89
 8009b14:	08009b89 	.word	0x08009b89
 8009b18:	08009b89 	.word	0x08009b89
 8009b1c:	08009b89 	.word	0x08009b89
 8009b20:	08009b89 	.word	0x08009b89
 8009b24:	08009b89 	.word	0x08009b89
 8009b28:	08009b89 	.word	0x08009b89
 8009b2c:	08009b89 	.word	0x08009b89
 8009b30:	08009b89 	.word	0x08009b89
 8009b34:	08009b89 	.word	0x08009b89
 8009b38:	08009b89 	.word	0x08009b89
 8009b3c:	08009b89 	.word	0x08009b89
 8009b40:	08009b89 	.word	0x08009b89
 8009b44:	08009b89 	.word	0x08009b89
 8009b48:	08009b89 	.word	0x08009b89
 8009b4c:	08009b89 	.word	0x08009b89
 8009b50:	08009b89 	.word	0x08009b89
 8009b54:	08009b89 	.word	0x08009b89
 8009b58:	08009b89 	.word	0x08009b89
 8009b5c:	08009b89 	.word	0x08009b89
 8009b60:	08009b89 	.word	0x08009b89
 8009b64:	08009b89 	.word	0x08009b89
 8009b68:	08009b89 	.word	0x08009b89
 8009b6c:	08009b89 	.word	0x08009b89
 8009b70:	08009b89 	.word	0x08009b89
 8009b74:	08009b89 	.word	0x08009b89
 8009b78:	08009b89 	.word	0x08009b89
 8009b7c:	08009b89 	.word	0x08009b89
 8009b80:	08009b89 	.word	0x08009b89
 8009b84:	08009b89 	.word	0x08009b89
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b88:	bf00      	nop
  }

  return (USBD_OK);
 8009b8a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009ba2:	6879      	ldr	r1, [r7, #4]
 8009ba4:	4805      	ldr	r0, [pc, #20]	; (8009bbc <CDC_Receive_FS+0x24>)
 8009ba6:	f7fe fbc1 	bl	800832c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009baa:	4804      	ldr	r0, [pc, #16]	; (8009bbc <CDC_Receive_FS+0x24>)
 8009bac:	f7fe fc22 	bl	80083f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009bb0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	200013d8 	.word	0x200013d8

08009bc0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009bd0:	4b0d      	ldr	r3, [pc, #52]	; (8009c08 <CDC_Transmit_FS+0x48>)
 8009bd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bd6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e00b      	b.n	8009bfe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009be6:	887b      	ldrh	r3, [r7, #2]
 8009be8:	461a      	mov	r2, r3
 8009bea:	6879      	ldr	r1, [r7, #4]
 8009bec:	4806      	ldr	r0, [pc, #24]	; (8009c08 <CDC_Transmit_FS+0x48>)
 8009bee:	f7fe fb7b 	bl	80082e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009bf2:	4805      	ldr	r0, [pc, #20]	; (8009c08 <CDC_Transmit_FS+0x48>)
 8009bf4:	f7fe fbb8 	bl	8008368 <USBD_CDC_TransmitPacket>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	200013d8 	.word	0x200013d8

08009c0c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	4613      	mov	r3, r2
 8009c18:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009c1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	371c      	adds	r7, #28
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
	...

08009c30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	6039      	str	r1, [r7, #0]
 8009c3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	2212      	movs	r2, #18
 8009c40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c42:	4b03      	ldr	r3, [pc, #12]	; (8009c50 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	200000c8 	.word	0x200000c8

08009c54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	6039      	str	r1, [r7, #0]
 8009c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	2204      	movs	r2, #4
 8009c64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c66:	4b03      	ldr	r3, [pc, #12]	; (8009c74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr
 8009c74:	200000dc 	.word	0x200000dc

08009c78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	4603      	mov	r3, r0
 8009c80:	6039      	str	r1, [r7, #0]
 8009c82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c84:	79fb      	ldrb	r3, [r7, #7]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d105      	bne.n	8009c96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	4907      	ldr	r1, [pc, #28]	; (8009cac <USBD_FS_ProductStrDescriptor+0x34>)
 8009c8e:	4808      	ldr	r0, [pc, #32]	; (8009cb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c90:	f7ff fdf8 	bl	8009884 <USBD_GetString>
 8009c94:	e004      	b.n	8009ca0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c96:	683a      	ldr	r2, [r7, #0]
 8009c98:	4904      	ldr	r1, [pc, #16]	; (8009cac <USBD_FS_ProductStrDescriptor+0x34>)
 8009c9a:	4805      	ldr	r0, [pc, #20]	; (8009cb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c9c:	f7ff fdf2 	bl	8009884 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ca0:	4b02      	ldr	r3, [pc, #8]	; (8009cac <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	200026b4 	.word	0x200026b4
 8009cb0:	0800be98 	.word	0x0800be98

08009cb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	6039      	str	r1, [r7, #0]
 8009cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009cc0:	683a      	ldr	r2, [r7, #0]
 8009cc2:	4904      	ldr	r1, [pc, #16]	; (8009cd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009cc4:	4804      	ldr	r0, [pc, #16]	; (8009cd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009cc6:	f7ff fddd 	bl	8009884 <USBD_GetString>
  return USBD_StrDesc;
 8009cca:	4b02      	ldr	r3, [pc, #8]	; (8009cd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	200026b4 	.word	0x200026b4
 8009cd8:	0800beb0 	.word	0x0800beb0

08009cdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	6039      	str	r1, [r7, #0]
 8009ce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	221a      	movs	r2, #26
 8009cec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009cee:	f000 f843 	bl	8009d78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009cf2:	4b02      	ldr	r3, [pc, #8]	; (8009cfc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	200000e0 	.word	0x200000e0

08009d00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	4603      	mov	r3, r0
 8009d08:	6039      	str	r1, [r7, #0]
 8009d0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d0c:	79fb      	ldrb	r3, [r7, #7]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d105      	bne.n	8009d1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	4907      	ldr	r1, [pc, #28]	; (8009d34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d16:	4808      	ldr	r0, [pc, #32]	; (8009d38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d18:	f7ff fdb4 	bl	8009884 <USBD_GetString>
 8009d1c:	e004      	b.n	8009d28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d1e:	683a      	ldr	r2, [r7, #0]
 8009d20:	4904      	ldr	r1, [pc, #16]	; (8009d34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d22:	4805      	ldr	r0, [pc, #20]	; (8009d38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d24:	f7ff fdae 	bl	8009884 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d28:	4b02      	ldr	r3, [pc, #8]	; (8009d34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	200026b4 	.word	0x200026b4
 8009d38:	0800bec4 	.word	0x0800bec4

08009d3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	4603      	mov	r3, r0
 8009d44:	6039      	str	r1, [r7, #0]
 8009d46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d48:	79fb      	ldrb	r3, [r7, #7]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d105      	bne.n	8009d5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d4e:	683a      	ldr	r2, [r7, #0]
 8009d50:	4907      	ldr	r1, [pc, #28]	; (8009d70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d52:	4808      	ldr	r0, [pc, #32]	; (8009d74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d54:	f7ff fd96 	bl	8009884 <USBD_GetString>
 8009d58:	e004      	b.n	8009d64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d5a:	683a      	ldr	r2, [r7, #0]
 8009d5c:	4904      	ldr	r1, [pc, #16]	; (8009d70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d5e:	4805      	ldr	r0, [pc, #20]	; (8009d74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d60:	f7ff fd90 	bl	8009884 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d64:	4b02      	ldr	r3, [pc, #8]	; (8009d70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	200026b4 	.word	0x200026b4
 8009d74:	0800bed0 	.word	0x0800bed0

08009d78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d7e:	4b0f      	ldr	r3, [pc, #60]	; (8009dbc <Get_SerialNum+0x44>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d84:	4b0e      	ldr	r3, [pc, #56]	; (8009dc0 <Get_SerialNum+0x48>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d8a:	4b0e      	ldr	r3, [pc, #56]	; (8009dc4 <Get_SerialNum+0x4c>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4413      	add	r3, r2
 8009d96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d009      	beq.n	8009db2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d9e:	2208      	movs	r2, #8
 8009da0:	4909      	ldr	r1, [pc, #36]	; (8009dc8 <Get_SerialNum+0x50>)
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 f814 	bl	8009dd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009da8:	2204      	movs	r2, #4
 8009daa:	4908      	ldr	r1, [pc, #32]	; (8009dcc <Get_SerialNum+0x54>)
 8009dac:	68b8      	ldr	r0, [r7, #8]
 8009dae:	f000 f80f 	bl	8009dd0 <IntToUnicode>
  }
}
 8009db2:	bf00      	nop
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	1fff7a10 	.word	0x1fff7a10
 8009dc0:	1fff7a14 	.word	0x1fff7a14
 8009dc4:	1fff7a18 	.word	0x1fff7a18
 8009dc8:	200000e2 	.word	0x200000e2
 8009dcc:	200000f2 	.word	0x200000f2

08009dd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b087      	sub	sp, #28
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009dde:	2300      	movs	r3, #0
 8009de0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009de2:	2300      	movs	r3, #0
 8009de4:	75fb      	strb	r3, [r7, #23]
 8009de6:	e027      	b.n	8009e38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	0f1b      	lsrs	r3, r3, #28
 8009dec:	2b09      	cmp	r3, #9
 8009dee:	d80b      	bhi.n	8009e08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	0f1b      	lsrs	r3, r3, #28
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	7dfb      	ldrb	r3, [r7, #23]
 8009df8:	005b      	lsls	r3, r3, #1
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	440b      	add	r3, r1
 8009e00:	3230      	adds	r2, #48	; 0x30
 8009e02:	b2d2      	uxtb	r2, r2
 8009e04:	701a      	strb	r2, [r3, #0]
 8009e06:	e00a      	b.n	8009e1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	0f1b      	lsrs	r3, r3, #28
 8009e0c:	b2da      	uxtb	r2, r3
 8009e0e:	7dfb      	ldrb	r3, [r7, #23]
 8009e10:	005b      	lsls	r3, r3, #1
 8009e12:	4619      	mov	r1, r3
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	440b      	add	r3, r1
 8009e18:	3237      	adds	r2, #55	; 0x37
 8009e1a:	b2d2      	uxtb	r2, r2
 8009e1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	011b      	lsls	r3, r3, #4
 8009e22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
 8009e26:	005b      	lsls	r3, r3, #1
 8009e28:	3301      	adds	r3, #1
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	2200      	movs	r2, #0
 8009e30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e32:	7dfb      	ldrb	r3, [r7, #23]
 8009e34:	3301      	adds	r3, #1
 8009e36:	75fb      	strb	r3, [r7, #23]
 8009e38:	7dfa      	ldrb	r2, [r7, #23]
 8009e3a:	79fb      	ldrb	r3, [r7, #7]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d3d3      	bcc.n	8009de8 <IntToUnicode+0x18>
  }
}
 8009e40:	bf00      	nop
 8009e42:	bf00      	nop
 8009e44:	371c      	adds	r7, #28
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
	...

08009e50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b08a      	sub	sp, #40	; 0x28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e58:	f107 0314 	add.w	r3, r7, #20
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	601a      	str	r2, [r3, #0]
 8009e60:	605a      	str	r2, [r3, #4]
 8009e62:	609a      	str	r2, [r3, #8]
 8009e64:	60da      	str	r2, [r3, #12]
 8009e66:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e70:	d13a      	bne.n	8009ee8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e72:	2300      	movs	r3, #0
 8009e74:	613b      	str	r3, [r7, #16]
 8009e76:	4b1e      	ldr	r3, [pc, #120]	; (8009ef0 <HAL_PCD_MspInit+0xa0>)
 8009e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e7a:	4a1d      	ldr	r2, [pc, #116]	; (8009ef0 <HAL_PCD_MspInit+0xa0>)
 8009e7c:	f043 0301 	orr.w	r3, r3, #1
 8009e80:	6313      	str	r3, [r2, #48]	; 0x30
 8009e82:	4b1b      	ldr	r3, [pc, #108]	; (8009ef0 <HAL_PCD_MspInit+0xa0>)
 8009e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e86:	f003 0301 	and.w	r3, r3, #1
 8009e8a:	613b      	str	r3, [r7, #16]
 8009e8c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009e8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e94:	2302      	movs	r3, #2
 8009e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ea0:	230a      	movs	r3, #10
 8009ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ea4:	f107 0314 	add.w	r3, r7, #20
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4812      	ldr	r0, [pc, #72]	; (8009ef4 <HAL_PCD_MspInit+0xa4>)
 8009eac:	f7f8 fcd0 	bl	8002850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009eb0:	4b0f      	ldr	r3, [pc, #60]	; (8009ef0 <HAL_PCD_MspInit+0xa0>)
 8009eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb4:	4a0e      	ldr	r2, [pc, #56]	; (8009ef0 <HAL_PCD_MspInit+0xa0>)
 8009eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eba:	6353      	str	r3, [r2, #52]	; 0x34
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	60fb      	str	r3, [r7, #12]
 8009ec0:	4b0b      	ldr	r3, [pc, #44]	; (8009ef0 <HAL_PCD_MspInit+0xa0>)
 8009ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ec4:	4a0a      	ldr	r2, [pc, #40]	; (8009ef0 <HAL_PCD_MspInit+0xa0>)
 8009ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009eca:	6453      	str	r3, [r2, #68]	; 0x44
 8009ecc:	4b08      	ldr	r3, [pc, #32]	; (8009ef0 <HAL_PCD_MspInit+0xa0>)
 8009ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ed4:	60fb      	str	r3, [r7, #12]
 8009ed6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009ed8:	2200      	movs	r2, #0
 8009eda:	2100      	movs	r1, #0
 8009edc:	2043      	movs	r0, #67	; 0x43
 8009ede:	f7f8 fc80 	bl	80027e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ee2:	2043      	movs	r0, #67	; 0x43
 8009ee4:	f7f8 fc99 	bl	800281a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ee8:	bf00      	nop
 8009eea:	3728      	adds	r7, #40	; 0x28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	40023800 	.word	0x40023800
 8009ef4:	40020000 	.word	0x40020000

08009ef8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	4610      	mov	r0, r2
 8009f10:	f7fe fb59 	bl	80085c6 <USBD_LL_SetupStage>
}
 8009f14:	bf00      	nop
 8009f16:	3708      	adds	r7, #8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	460b      	mov	r3, r1
 8009f26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009f2e:	78fa      	ldrb	r2, [r7, #3]
 8009f30:	6879      	ldr	r1, [r7, #4]
 8009f32:	4613      	mov	r3, r2
 8009f34:	00db      	lsls	r3, r3, #3
 8009f36:	4413      	add	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	440b      	add	r3, r1
 8009f3c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	78fb      	ldrb	r3, [r7, #3]
 8009f44:	4619      	mov	r1, r3
 8009f46:	f7fe fb93 	bl	8008670 <USBD_LL_DataOutStage>
}
 8009f4a:	bf00      	nop
 8009f4c:	3708      	adds	r7, #8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b082      	sub	sp, #8
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009f64:	78fa      	ldrb	r2, [r7, #3]
 8009f66:	6879      	ldr	r1, [r7, #4]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	00db      	lsls	r3, r3, #3
 8009f6c:	4413      	add	r3, r2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	440b      	add	r3, r1
 8009f72:	334c      	adds	r3, #76	; 0x4c
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	78fb      	ldrb	r3, [r7, #3]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	f7fe fc2c 	bl	80087d6 <USBD_LL_DataInStage>
}
 8009f7e:	bf00      	nop
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b082      	sub	sp, #8
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7fe fd60 	bl	8008a5a <USBD_LL_SOF>
}
 8009f9a:	bf00      	nop
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009faa:	2301      	movs	r3, #1
 8009fac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d001      	beq.n	8009fba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009fb6:	f7f7 fb15 	bl	80015e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fc0:	7bfa      	ldrb	r2, [r7, #15]
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7fe fd0a 	bl	80089de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fe fcb2 	bl	800893a <USBD_LL_Reset>
}
 8009fd6:	bf00      	nop
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
	...

08009fe0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fe fd05 	bl	80089fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	6812      	ldr	r2, [r2, #0]
 800a002:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a006:	f043 0301 	orr.w	r3, r3, #1
 800a00a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a1b      	ldr	r3, [r3, #32]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d005      	beq.n	800a020 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a014:	4b04      	ldr	r3, [pc, #16]	; (800a028 <HAL_PCD_SuspendCallback+0x48>)
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	4a03      	ldr	r2, [pc, #12]	; (800a028 <HAL_PCD_SuspendCallback+0x48>)
 800a01a:	f043 0306 	orr.w	r3, r3, #6
 800a01e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a020:	bf00      	nop
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	e000ed00 	.word	0xe000ed00

0800a02c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe fcf5 	bl	8008a2a <USBD_LL_Resume>
}
 800a040:	bf00      	nop
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	460b      	mov	r3, r1
 800a052:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a05a:	78fa      	ldrb	r2, [r7, #3]
 800a05c:	4611      	mov	r1, r2
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fe fd4d 	bl	8008afe <USBD_LL_IsoOUTIncomplete>
}
 800a064:	bf00      	nop
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	460b      	mov	r3, r1
 800a076:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a07e:	78fa      	ldrb	r2, [r7, #3]
 800a080:	4611      	mov	r1, r2
 800a082:	4618      	mov	r0, r3
 800a084:	f7fe fd09 	bl	8008a9a <USBD_LL_IsoINIncomplete>
}
 800a088:	bf00      	nop
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fe fd5f 	bl	8008b62 <USBD_LL_DevConnected>
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fe fd5c 	bl	8008b78 <USBD_LL_DevDisconnected>
}
 800a0c0:	bf00      	nop
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d13c      	bne.n	800a152 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a0d8:	4a20      	ldr	r2, [pc, #128]	; (800a15c <USBD_LL_Init+0x94>)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a1e      	ldr	r2, [pc, #120]	; (800a15c <USBD_LL_Init+0x94>)
 800a0e4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a0e8:	4b1c      	ldr	r3, [pc, #112]	; (800a15c <USBD_LL_Init+0x94>)
 800a0ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a0ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a0f0:	4b1a      	ldr	r3, [pc, #104]	; (800a15c <USBD_LL_Init+0x94>)
 800a0f2:	2204      	movs	r2, #4
 800a0f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a0f6:	4b19      	ldr	r3, [pc, #100]	; (800a15c <USBD_LL_Init+0x94>)
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a0fc:	4b17      	ldr	r3, [pc, #92]	; (800a15c <USBD_LL_Init+0x94>)
 800a0fe:	2200      	movs	r2, #0
 800a100:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a102:	4b16      	ldr	r3, [pc, #88]	; (800a15c <USBD_LL_Init+0x94>)
 800a104:	2202      	movs	r2, #2
 800a106:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a108:	4b14      	ldr	r3, [pc, #80]	; (800a15c <USBD_LL_Init+0x94>)
 800a10a:	2200      	movs	r2, #0
 800a10c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a10e:	4b13      	ldr	r3, [pc, #76]	; (800a15c <USBD_LL_Init+0x94>)
 800a110:	2200      	movs	r2, #0
 800a112:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a114:	4b11      	ldr	r3, [pc, #68]	; (800a15c <USBD_LL_Init+0x94>)
 800a116:	2200      	movs	r2, #0
 800a118:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a11a:	4b10      	ldr	r3, [pc, #64]	; (800a15c <USBD_LL_Init+0x94>)
 800a11c:	2200      	movs	r2, #0
 800a11e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a120:	4b0e      	ldr	r3, [pc, #56]	; (800a15c <USBD_LL_Init+0x94>)
 800a122:	2200      	movs	r2, #0
 800a124:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a126:	480d      	ldr	r0, [pc, #52]	; (800a15c <USBD_LL_Init+0x94>)
 800a128:	f7f8 fe98 	bl	8002e5c <HAL_PCD_Init>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a132:	f7f7 fa57 	bl	80015e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a136:	2180      	movs	r1, #128	; 0x80
 800a138:	4808      	ldr	r0, [pc, #32]	; (800a15c <USBD_LL_Init+0x94>)
 800a13a:	f7fa f8f0 	bl	800431e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a13e:	2240      	movs	r2, #64	; 0x40
 800a140:	2100      	movs	r1, #0
 800a142:	4806      	ldr	r0, [pc, #24]	; (800a15c <USBD_LL_Init+0x94>)
 800a144:	f7fa f8a4 	bl	8004290 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a148:	2280      	movs	r2, #128	; 0x80
 800a14a:	2101      	movs	r1, #1
 800a14c:	4803      	ldr	r0, [pc, #12]	; (800a15c <USBD_LL_Init+0x94>)
 800a14e:	f7fa f89f 	bl	8004290 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	200028b4 	.word	0x200028b4

0800a160 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a168:	2300      	movs	r3, #0
 800a16a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a16c:	2300      	movs	r3, #0
 800a16e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a176:	4618      	mov	r0, r3
 800a178:	f7f8 ff8d 	bl	8003096 <HAL_PCD_Start>
 800a17c:	4603      	mov	r3, r0
 800a17e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a180:	7bfb      	ldrb	r3, [r7, #15]
 800a182:	4618      	mov	r0, r3
 800a184:	f000 f942 	bl	800a40c <USBD_Get_USB_Status>
 800a188:	4603      	mov	r3, r0
 800a18a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a18c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b084      	sub	sp, #16
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	4608      	mov	r0, r1
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	70fb      	strb	r3, [r7, #3]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	70bb      	strb	r3, [r7, #2]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a1be:	78bb      	ldrb	r3, [r7, #2]
 800a1c0:	883a      	ldrh	r2, [r7, #0]
 800a1c2:	78f9      	ldrb	r1, [r7, #3]
 800a1c4:	f7f9 fc5e 	bl	8003a84 <HAL_PCD_EP_Open>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 f91c 	bl	800a40c <USBD_Get_USB_Status>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b084      	sub	sp, #16
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1fc:	78fa      	ldrb	r2, [r7, #3]
 800a1fe:	4611      	mov	r1, r2
 800a200:	4618      	mov	r0, r3
 800a202:	f7f9 fca7 	bl	8003b54 <HAL_PCD_EP_Close>
 800a206:	4603      	mov	r3, r0
 800a208:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a20a:	7bfb      	ldrb	r3, [r7, #15]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 f8fd 	bl	800a40c <USBD_Get_USB_Status>
 800a212:	4603      	mov	r3, r0
 800a214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a216:	7bbb      	ldrb	r3, [r7, #14]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	460b      	mov	r3, r1
 800a22a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a230:	2300      	movs	r3, #0
 800a232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a23a:	78fa      	ldrb	r2, [r7, #3]
 800a23c:	4611      	mov	r1, r2
 800a23e:	4618      	mov	r0, r3
 800a240:	f7f9 fd7f 	bl	8003d42 <HAL_PCD_EP_SetStall>
 800a244:	4603      	mov	r3, r0
 800a246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a248:	7bfb      	ldrb	r3, [r7, #15]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f000 f8de 	bl	800a40c <USBD_Get_USB_Status>
 800a250:	4603      	mov	r3, r0
 800a252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a254:	7bbb      	ldrb	r3, [r7, #14]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b084      	sub	sp, #16
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	460b      	mov	r3, r1
 800a268:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a278:	78fa      	ldrb	r2, [r7, #3]
 800a27a:	4611      	mov	r1, r2
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7f9 fdc4 	bl	8003e0a <HAL_PCD_EP_ClrStall>
 800a282:	4603      	mov	r3, r0
 800a284:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a286:	7bfb      	ldrb	r3, [r7, #15]
 800a288:	4618      	mov	r0, r3
 800a28a:	f000 f8bf 	bl	800a40c <USBD_Get_USB_Status>
 800a28e:	4603      	mov	r3, r0
 800a290:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a292:	7bbb      	ldrb	r3, [r7, #14]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3710      	adds	r7, #16
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a2b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	da0b      	bge.n	800a2d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a2b8:	78fb      	ldrb	r3, [r7, #3]
 800a2ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2be:	68f9      	ldr	r1, [r7, #12]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	00db      	lsls	r3, r3, #3
 800a2c4:	4413      	add	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	440b      	add	r3, r1
 800a2ca:	333e      	adds	r3, #62	; 0x3e
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	e00b      	b.n	800a2e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a2d0:	78fb      	ldrb	r3, [r7, #3]
 800a2d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2d6:	68f9      	ldr	r1, [r7, #12]
 800a2d8:	4613      	mov	r3, r2
 800a2da:	00db      	lsls	r3, r3, #3
 800a2dc:	4413      	add	r3, r2
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	440b      	add	r3, r1
 800a2e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a2e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a300:	2300      	movs	r3, #0
 800a302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a30e:	78fa      	ldrb	r2, [r7, #3]
 800a310:	4611      	mov	r1, r2
 800a312:	4618      	mov	r0, r3
 800a314:	f7f9 fb91 	bl	8003a3a <HAL_PCD_SetAddress>
 800a318:	4603      	mov	r3, r0
 800a31a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a31c:	7bfb      	ldrb	r3, [r7, #15]
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 f874 	bl	800a40c <USBD_Get_USB_Status>
 800a324:	4603      	mov	r3, r0
 800a326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a328:	7bbb      	ldrb	r3, [r7, #14]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b086      	sub	sp, #24
 800a336:	af00      	add	r7, sp, #0
 800a338:	60f8      	str	r0, [r7, #12]
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	603b      	str	r3, [r7, #0]
 800a33e:	460b      	mov	r3, r1
 800a340:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a350:	7af9      	ldrb	r1, [r7, #11]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	f7f9 fcaa 	bl	8003cae <HAL_PCD_EP_Transmit>
 800a35a:	4603      	mov	r3, r0
 800a35c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a35e:	7dfb      	ldrb	r3, [r7, #23]
 800a360:	4618      	mov	r0, r3
 800a362:	f000 f853 	bl	800a40c <USBD_Get_USB_Status>
 800a366:	4603      	mov	r3, r0
 800a368:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a36a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3718      	adds	r7, #24
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	607a      	str	r2, [r7, #4]
 800a37e:	603b      	str	r3, [r7, #0]
 800a380:	460b      	mov	r3, r1
 800a382:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a388:	2300      	movs	r3, #0
 800a38a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a392:	7af9      	ldrb	r1, [r7, #11]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	f7f9 fc26 	bl	8003be8 <HAL_PCD_EP_Receive>
 800a39c:	4603      	mov	r3, r0
 800a39e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3a0:	7dfb      	ldrb	r3, [r7, #23]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f000 f832 	bl	800a40c <USBD_Get_USB_Status>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3ac:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3718      	adds	r7, #24
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b082      	sub	sp, #8
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
 800a3be:	460b      	mov	r3, r1
 800a3c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3c8:	78fa      	ldrb	r2, [r7, #3]
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7f9 fc56 	bl	8003c7e <HAL_PCD_EP_GetRxCount>
 800a3d2:	4603      	mov	r3, r0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3708      	adds	r7, #8
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a3e4:	4b03      	ldr	r3, [pc, #12]	; (800a3f4 <USBD_static_malloc+0x18>)
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	20002dc0 	.word	0x20002dc0

0800a3f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]

}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	4603      	mov	r3, r0
 800a414:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a416:	2300      	movs	r3, #0
 800a418:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a41a:	79fb      	ldrb	r3, [r7, #7]
 800a41c:	2b03      	cmp	r3, #3
 800a41e:	d817      	bhi.n	800a450 <USBD_Get_USB_Status+0x44>
 800a420:	a201      	add	r2, pc, #4	; (adr r2, 800a428 <USBD_Get_USB_Status+0x1c>)
 800a422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a426:	bf00      	nop
 800a428:	0800a439 	.word	0x0800a439
 800a42c:	0800a43f 	.word	0x0800a43f
 800a430:	0800a445 	.word	0x0800a445
 800a434:	0800a44b 	.word	0x0800a44b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a438:	2300      	movs	r3, #0
 800a43a:	73fb      	strb	r3, [r7, #15]
    break;
 800a43c:	e00b      	b.n	800a456 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a43e:	2303      	movs	r3, #3
 800a440:	73fb      	strb	r3, [r7, #15]
    break;
 800a442:	e008      	b.n	800a456 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a444:	2301      	movs	r3, #1
 800a446:	73fb      	strb	r3, [r7, #15]
    break;
 800a448:	e005      	b.n	800a456 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a44a:	2303      	movs	r3, #3
 800a44c:	73fb      	strb	r3, [r7, #15]
    break;
 800a44e:	e002      	b.n	800a456 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a450:	2303      	movs	r3, #3
 800a452:	73fb      	strb	r3, [r7, #15]
    break;
 800a454:	bf00      	nop
  }
  return usb_status;
 800a456:	7bfb      	ldrb	r3, [r7, #15]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3714      	adds	r7, #20
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <sniprintf>:
 800a464:	b40c      	push	{r2, r3}
 800a466:	b530      	push	{r4, r5, lr}
 800a468:	4b17      	ldr	r3, [pc, #92]	; (800a4c8 <sniprintf+0x64>)
 800a46a:	1e0c      	subs	r4, r1, #0
 800a46c:	681d      	ldr	r5, [r3, #0]
 800a46e:	b09d      	sub	sp, #116	; 0x74
 800a470:	da08      	bge.n	800a484 <sniprintf+0x20>
 800a472:	238b      	movs	r3, #139	; 0x8b
 800a474:	602b      	str	r3, [r5, #0]
 800a476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a47a:	b01d      	add	sp, #116	; 0x74
 800a47c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a480:	b002      	add	sp, #8
 800a482:	4770      	bx	lr
 800a484:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a488:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a48c:	bf14      	ite	ne
 800a48e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a492:	4623      	moveq	r3, r4
 800a494:	9304      	str	r3, [sp, #16]
 800a496:	9307      	str	r3, [sp, #28]
 800a498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a49c:	9002      	str	r0, [sp, #8]
 800a49e:	9006      	str	r0, [sp, #24]
 800a4a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a4a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a4a6:	ab21      	add	r3, sp, #132	; 0x84
 800a4a8:	a902      	add	r1, sp, #8
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	9301      	str	r3, [sp, #4]
 800a4ae:	f000 f993 	bl	800a7d8 <_svfiprintf_r>
 800a4b2:	1c43      	adds	r3, r0, #1
 800a4b4:	bfbc      	itt	lt
 800a4b6:	238b      	movlt	r3, #139	; 0x8b
 800a4b8:	602b      	strlt	r3, [r5, #0]
 800a4ba:	2c00      	cmp	r4, #0
 800a4bc:	d0dd      	beq.n	800a47a <sniprintf+0x16>
 800a4be:	9b02      	ldr	r3, [sp, #8]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	701a      	strb	r2, [r3, #0]
 800a4c4:	e7d9      	b.n	800a47a <sniprintf+0x16>
 800a4c6:	bf00      	nop
 800a4c8:	20000148 	.word	0x20000148

0800a4cc <memset>:
 800a4cc:	4402      	add	r2, r0
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d100      	bne.n	800a4d6 <memset+0xa>
 800a4d4:	4770      	bx	lr
 800a4d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a4da:	e7f9      	b.n	800a4d0 <memset+0x4>

0800a4dc <__errno>:
 800a4dc:	4b01      	ldr	r3, [pc, #4]	; (800a4e4 <__errno+0x8>)
 800a4de:	6818      	ldr	r0, [r3, #0]
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	20000148 	.word	0x20000148

0800a4e8 <__libc_init_array>:
 800a4e8:	b570      	push	{r4, r5, r6, lr}
 800a4ea:	4d0d      	ldr	r5, [pc, #52]	; (800a520 <__libc_init_array+0x38>)
 800a4ec:	4c0d      	ldr	r4, [pc, #52]	; (800a524 <__libc_init_array+0x3c>)
 800a4ee:	1b64      	subs	r4, r4, r5
 800a4f0:	10a4      	asrs	r4, r4, #2
 800a4f2:	2600      	movs	r6, #0
 800a4f4:	42a6      	cmp	r6, r4
 800a4f6:	d109      	bne.n	800a50c <__libc_init_array+0x24>
 800a4f8:	4d0b      	ldr	r5, [pc, #44]	; (800a528 <__libc_init_array+0x40>)
 800a4fa:	4c0c      	ldr	r4, [pc, #48]	; (800a52c <__libc_init_array+0x44>)
 800a4fc:	f001 fcac 	bl	800be58 <_init>
 800a500:	1b64      	subs	r4, r4, r5
 800a502:	10a4      	asrs	r4, r4, #2
 800a504:	2600      	movs	r6, #0
 800a506:	42a6      	cmp	r6, r4
 800a508:	d105      	bne.n	800a516 <__libc_init_array+0x2e>
 800a50a:	bd70      	pop	{r4, r5, r6, pc}
 800a50c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a510:	4798      	blx	r3
 800a512:	3601      	adds	r6, #1
 800a514:	e7ee      	b.n	800a4f4 <__libc_init_array+0xc>
 800a516:	f855 3b04 	ldr.w	r3, [r5], #4
 800a51a:	4798      	blx	r3
 800a51c:	3601      	adds	r6, #1
 800a51e:	e7f2      	b.n	800a506 <__libc_init_array+0x1e>
 800a520:	0800c110 	.word	0x0800c110
 800a524:	0800c110 	.word	0x0800c110
 800a528:	0800c110 	.word	0x0800c110
 800a52c:	0800c114 	.word	0x0800c114

0800a530 <__retarget_lock_acquire_recursive>:
 800a530:	4770      	bx	lr

0800a532 <__retarget_lock_release_recursive>:
 800a532:	4770      	bx	lr

0800a534 <_free_r>:
 800a534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a536:	2900      	cmp	r1, #0
 800a538:	d044      	beq.n	800a5c4 <_free_r+0x90>
 800a53a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a53e:	9001      	str	r0, [sp, #4]
 800a540:	2b00      	cmp	r3, #0
 800a542:	f1a1 0404 	sub.w	r4, r1, #4
 800a546:	bfb8      	it	lt
 800a548:	18e4      	addlt	r4, r4, r3
 800a54a:	f000 f8df 	bl	800a70c <__malloc_lock>
 800a54e:	4a1e      	ldr	r2, [pc, #120]	; (800a5c8 <_free_r+0x94>)
 800a550:	9801      	ldr	r0, [sp, #4]
 800a552:	6813      	ldr	r3, [r2, #0]
 800a554:	b933      	cbnz	r3, 800a564 <_free_r+0x30>
 800a556:	6063      	str	r3, [r4, #4]
 800a558:	6014      	str	r4, [r2, #0]
 800a55a:	b003      	add	sp, #12
 800a55c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a560:	f000 b8da 	b.w	800a718 <__malloc_unlock>
 800a564:	42a3      	cmp	r3, r4
 800a566:	d908      	bls.n	800a57a <_free_r+0x46>
 800a568:	6825      	ldr	r5, [r4, #0]
 800a56a:	1961      	adds	r1, r4, r5
 800a56c:	428b      	cmp	r3, r1
 800a56e:	bf01      	itttt	eq
 800a570:	6819      	ldreq	r1, [r3, #0]
 800a572:	685b      	ldreq	r3, [r3, #4]
 800a574:	1949      	addeq	r1, r1, r5
 800a576:	6021      	streq	r1, [r4, #0]
 800a578:	e7ed      	b.n	800a556 <_free_r+0x22>
 800a57a:	461a      	mov	r2, r3
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	b10b      	cbz	r3, 800a584 <_free_r+0x50>
 800a580:	42a3      	cmp	r3, r4
 800a582:	d9fa      	bls.n	800a57a <_free_r+0x46>
 800a584:	6811      	ldr	r1, [r2, #0]
 800a586:	1855      	adds	r5, r2, r1
 800a588:	42a5      	cmp	r5, r4
 800a58a:	d10b      	bne.n	800a5a4 <_free_r+0x70>
 800a58c:	6824      	ldr	r4, [r4, #0]
 800a58e:	4421      	add	r1, r4
 800a590:	1854      	adds	r4, r2, r1
 800a592:	42a3      	cmp	r3, r4
 800a594:	6011      	str	r1, [r2, #0]
 800a596:	d1e0      	bne.n	800a55a <_free_r+0x26>
 800a598:	681c      	ldr	r4, [r3, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	6053      	str	r3, [r2, #4]
 800a59e:	440c      	add	r4, r1
 800a5a0:	6014      	str	r4, [r2, #0]
 800a5a2:	e7da      	b.n	800a55a <_free_r+0x26>
 800a5a4:	d902      	bls.n	800a5ac <_free_r+0x78>
 800a5a6:	230c      	movs	r3, #12
 800a5a8:	6003      	str	r3, [r0, #0]
 800a5aa:	e7d6      	b.n	800a55a <_free_r+0x26>
 800a5ac:	6825      	ldr	r5, [r4, #0]
 800a5ae:	1961      	adds	r1, r4, r5
 800a5b0:	428b      	cmp	r3, r1
 800a5b2:	bf04      	itt	eq
 800a5b4:	6819      	ldreq	r1, [r3, #0]
 800a5b6:	685b      	ldreq	r3, [r3, #4]
 800a5b8:	6063      	str	r3, [r4, #4]
 800a5ba:	bf04      	itt	eq
 800a5bc:	1949      	addeq	r1, r1, r5
 800a5be:	6021      	streq	r1, [r4, #0]
 800a5c0:	6054      	str	r4, [r2, #4]
 800a5c2:	e7ca      	b.n	800a55a <_free_r+0x26>
 800a5c4:	b003      	add	sp, #12
 800a5c6:	bd30      	pop	{r4, r5, pc}
 800a5c8:	20003120 	.word	0x20003120

0800a5cc <sbrk_aligned>:
 800a5cc:	b570      	push	{r4, r5, r6, lr}
 800a5ce:	4e0e      	ldr	r6, [pc, #56]	; (800a608 <sbrk_aligned+0x3c>)
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	6831      	ldr	r1, [r6, #0]
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	b911      	cbnz	r1, 800a5de <sbrk_aligned+0x12>
 800a5d8:	f000 fba6 	bl	800ad28 <_sbrk_r>
 800a5dc:	6030      	str	r0, [r6, #0]
 800a5de:	4621      	mov	r1, r4
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	f000 fba1 	bl	800ad28 <_sbrk_r>
 800a5e6:	1c43      	adds	r3, r0, #1
 800a5e8:	d00a      	beq.n	800a600 <sbrk_aligned+0x34>
 800a5ea:	1cc4      	adds	r4, r0, #3
 800a5ec:	f024 0403 	bic.w	r4, r4, #3
 800a5f0:	42a0      	cmp	r0, r4
 800a5f2:	d007      	beq.n	800a604 <sbrk_aligned+0x38>
 800a5f4:	1a21      	subs	r1, r4, r0
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f000 fb96 	bl	800ad28 <_sbrk_r>
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	d101      	bne.n	800a604 <sbrk_aligned+0x38>
 800a600:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a604:	4620      	mov	r0, r4
 800a606:	bd70      	pop	{r4, r5, r6, pc}
 800a608:	20003124 	.word	0x20003124

0800a60c <_malloc_r>:
 800a60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a610:	1ccd      	adds	r5, r1, #3
 800a612:	f025 0503 	bic.w	r5, r5, #3
 800a616:	3508      	adds	r5, #8
 800a618:	2d0c      	cmp	r5, #12
 800a61a:	bf38      	it	cc
 800a61c:	250c      	movcc	r5, #12
 800a61e:	2d00      	cmp	r5, #0
 800a620:	4607      	mov	r7, r0
 800a622:	db01      	blt.n	800a628 <_malloc_r+0x1c>
 800a624:	42a9      	cmp	r1, r5
 800a626:	d905      	bls.n	800a634 <_malloc_r+0x28>
 800a628:	230c      	movs	r3, #12
 800a62a:	603b      	str	r3, [r7, #0]
 800a62c:	2600      	movs	r6, #0
 800a62e:	4630      	mov	r0, r6
 800a630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a634:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a708 <_malloc_r+0xfc>
 800a638:	f000 f868 	bl	800a70c <__malloc_lock>
 800a63c:	f8d8 3000 	ldr.w	r3, [r8]
 800a640:	461c      	mov	r4, r3
 800a642:	bb5c      	cbnz	r4, 800a69c <_malloc_r+0x90>
 800a644:	4629      	mov	r1, r5
 800a646:	4638      	mov	r0, r7
 800a648:	f7ff ffc0 	bl	800a5cc <sbrk_aligned>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	4604      	mov	r4, r0
 800a650:	d155      	bne.n	800a6fe <_malloc_r+0xf2>
 800a652:	f8d8 4000 	ldr.w	r4, [r8]
 800a656:	4626      	mov	r6, r4
 800a658:	2e00      	cmp	r6, #0
 800a65a:	d145      	bne.n	800a6e8 <_malloc_r+0xdc>
 800a65c:	2c00      	cmp	r4, #0
 800a65e:	d048      	beq.n	800a6f2 <_malloc_r+0xe6>
 800a660:	6823      	ldr	r3, [r4, #0]
 800a662:	4631      	mov	r1, r6
 800a664:	4638      	mov	r0, r7
 800a666:	eb04 0903 	add.w	r9, r4, r3
 800a66a:	f000 fb5d 	bl	800ad28 <_sbrk_r>
 800a66e:	4581      	cmp	r9, r0
 800a670:	d13f      	bne.n	800a6f2 <_malloc_r+0xe6>
 800a672:	6821      	ldr	r1, [r4, #0]
 800a674:	1a6d      	subs	r5, r5, r1
 800a676:	4629      	mov	r1, r5
 800a678:	4638      	mov	r0, r7
 800a67a:	f7ff ffa7 	bl	800a5cc <sbrk_aligned>
 800a67e:	3001      	adds	r0, #1
 800a680:	d037      	beq.n	800a6f2 <_malloc_r+0xe6>
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	442b      	add	r3, r5
 800a686:	6023      	str	r3, [r4, #0]
 800a688:	f8d8 3000 	ldr.w	r3, [r8]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d038      	beq.n	800a702 <_malloc_r+0xf6>
 800a690:	685a      	ldr	r2, [r3, #4]
 800a692:	42a2      	cmp	r2, r4
 800a694:	d12b      	bne.n	800a6ee <_malloc_r+0xe2>
 800a696:	2200      	movs	r2, #0
 800a698:	605a      	str	r2, [r3, #4]
 800a69a:	e00f      	b.n	800a6bc <_malloc_r+0xb0>
 800a69c:	6822      	ldr	r2, [r4, #0]
 800a69e:	1b52      	subs	r2, r2, r5
 800a6a0:	d41f      	bmi.n	800a6e2 <_malloc_r+0xd6>
 800a6a2:	2a0b      	cmp	r2, #11
 800a6a4:	d917      	bls.n	800a6d6 <_malloc_r+0xca>
 800a6a6:	1961      	adds	r1, r4, r5
 800a6a8:	42a3      	cmp	r3, r4
 800a6aa:	6025      	str	r5, [r4, #0]
 800a6ac:	bf18      	it	ne
 800a6ae:	6059      	strne	r1, [r3, #4]
 800a6b0:	6863      	ldr	r3, [r4, #4]
 800a6b2:	bf08      	it	eq
 800a6b4:	f8c8 1000 	streq.w	r1, [r8]
 800a6b8:	5162      	str	r2, [r4, r5]
 800a6ba:	604b      	str	r3, [r1, #4]
 800a6bc:	4638      	mov	r0, r7
 800a6be:	f104 060b 	add.w	r6, r4, #11
 800a6c2:	f000 f829 	bl	800a718 <__malloc_unlock>
 800a6c6:	f026 0607 	bic.w	r6, r6, #7
 800a6ca:	1d23      	adds	r3, r4, #4
 800a6cc:	1af2      	subs	r2, r6, r3
 800a6ce:	d0ae      	beq.n	800a62e <_malloc_r+0x22>
 800a6d0:	1b9b      	subs	r3, r3, r6
 800a6d2:	50a3      	str	r3, [r4, r2]
 800a6d4:	e7ab      	b.n	800a62e <_malloc_r+0x22>
 800a6d6:	42a3      	cmp	r3, r4
 800a6d8:	6862      	ldr	r2, [r4, #4]
 800a6da:	d1dd      	bne.n	800a698 <_malloc_r+0x8c>
 800a6dc:	f8c8 2000 	str.w	r2, [r8]
 800a6e0:	e7ec      	b.n	800a6bc <_malloc_r+0xb0>
 800a6e2:	4623      	mov	r3, r4
 800a6e4:	6864      	ldr	r4, [r4, #4]
 800a6e6:	e7ac      	b.n	800a642 <_malloc_r+0x36>
 800a6e8:	4634      	mov	r4, r6
 800a6ea:	6876      	ldr	r6, [r6, #4]
 800a6ec:	e7b4      	b.n	800a658 <_malloc_r+0x4c>
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	e7cc      	b.n	800a68c <_malloc_r+0x80>
 800a6f2:	230c      	movs	r3, #12
 800a6f4:	603b      	str	r3, [r7, #0]
 800a6f6:	4638      	mov	r0, r7
 800a6f8:	f000 f80e 	bl	800a718 <__malloc_unlock>
 800a6fc:	e797      	b.n	800a62e <_malloc_r+0x22>
 800a6fe:	6025      	str	r5, [r4, #0]
 800a700:	e7dc      	b.n	800a6bc <_malloc_r+0xb0>
 800a702:	605b      	str	r3, [r3, #4]
 800a704:	deff      	udf	#255	; 0xff
 800a706:	bf00      	nop
 800a708:	20003120 	.word	0x20003120

0800a70c <__malloc_lock>:
 800a70c:	4801      	ldr	r0, [pc, #4]	; (800a714 <__malloc_lock+0x8>)
 800a70e:	f7ff bf0f 	b.w	800a530 <__retarget_lock_acquire_recursive>
 800a712:	bf00      	nop
 800a714:	2000311c 	.word	0x2000311c

0800a718 <__malloc_unlock>:
 800a718:	4801      	ldr	r0, [pc, #4]	; (800a720 <__malloc_unlock+0x8>)
 800a71a:	f7ff bf0a 	b.w	800a532 <__retarget_lock_release_recursive>
 800a71e:	bf00      	nop
 800a720:	2000311c 	.word	0x2000311c

0800a724 <__ssputs_r>:
 800a724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a728:	688e      	ldr	r6, [r1, #8]
 800a72a:	461f      	mov	r7, r3
 800a72c:	42be      	cmp	r6, r7
 800a72e:	680b      	ldr	r3, [r1, #0]
 800a730:	4682      	mov	sl, r0
 800a732:	460c      	mov	r4, r1
 800a734:	4690      	mov	r8, r2
 800a736:	d82c      	bhi.n	800a792 <__ssputs_r+0x6e>
 800a738:	898a      	ldrh	r2, [r1, #12]
 800a73a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a73e:	d026      	beq.n	800a78e <__ssputs_r+0x6a>
 800a740:	6965      	ldr	r5, [r4, #20]
 800a742:	6909      	ldr	r1, [r1, #16]
 800a744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a748:	eba3 0901 	sub.w	r9, r3, r1
 800a74c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a750:	1c7b      	adds	r3, r7, #1
 800a752:	444b      	add	r3, r9
 800a754:	106d      	asrs	r5, r5, #1
 800a756:	429d      	cmp	r5, r3
 800a758:	bf38      	it	cc
 800a75a:	461d      	movcc	r5, r3
 800a75c:	0553      	lsls	r3, r2, #21
 800a75e:	d527      	bpl.n	800a7b0 <__ssputs_r+0x8c>
 800a760:	4629      	mov	r1, r5
 800a762:	f7ff ff53 	bl	800a60c <_malloc_r>
 800a766:	4606      	mov	r6, r0
 800a768:	b360      	cbz	r0, 800a7c4 <__ssputs_r+0xa0>
 800a76a:	6921      	ldr	r1, [r4, #16]
 800a76c:	464a      	mov	r2, r9
 800a76e:	f000 faeb 	bl	800ad48 <memcpy>
 800a772:	89a3      	ldrh	r3, [r4, #12]
 800a774:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a77c:	81a3      	strh	r3, [r4, #12]
 800a77e:	6126      	str	r6, [r4, #16]
 800a780:	6165      	str	r5, [r4, #20]
 800a782:	444e      	add	r6, r9
 800a784:	eba5 0509 	sub.w	r5, r5, r9
 800a788:	6026      	str	r6, [r4, #0]
 800a78a:	60a5      	str	r5, [r4, #8]
 800a78c:	463e      	mov	r6, r7
 800a78e:	42be      	cmp	r6, r7
 800a790:	d900      	bls.n	800a794 <__ssputs_r+0x70>
 800a792:	463e      	mov	r6, r7
 800a794:	6820      	ldr	r0, [r4, #0]
 800a796:	4632      	mov	r2, r6
 800a798:	4641      	mov	r1, r8
 800a79a:	f000 faab 	bl	800acf4 <memmove>
 800a79e:	68a3      	ldr	r3, [r4, #8]
 800a7a0:	1b9b      	subs	r3, r3, r6
 800a7a2:	60a3      	str	r3, [r4, #8]
 800a7a4:	6823      	ldr	r3, [r4, #0]
 800a7a6:	4433      	add	r3, r6
 800a7a8:	6023      	str	r3, [r4, #0]
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7b0:	462a      	mov	r2, r5
 800a7b2:	f000 fad7 	bl	800ad64 <_realloc_r>
 800a7b6:	4606      	mov	r6, r0
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d1e0      	bne.n	800a77e <__ssputs_r+0x5a>
 800a7bc:	6921      	ldr	r1, [r4, #16]
 800a7be:	4650      	mov	r0, sl
 800a7c0:	f7ff feb8 	bl	800a534 <_free_r>
 800a7c4:	230c      	movs	r3, #12
 800a7c6:	f8ca 3000 	str.w	r3, [sl]
 800a7ca:	89a3      	ldrh	r3, [r4, #12]
 800a7cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7d0:	81a3      	strh	r3, [r4, #12]
 800a7d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7d6:	e7e9      	b.n	800a7ac <__ssputs_r+0x88>

0800a7d8 <_svfiprintf_r>:
 800a7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7dc:	4698      	mov	r8, r3
 800a7de:	898b      	ldrh	r3, [r1, #12]
 800a7e0:	061b      	lsls	r3, r3, #24
 800a7e2:	b09d      	sub	sp, #116	; 0x74
 800a7e4:	4607      	mov	r7, r0
 800a7e6:	460d      	mov	r5, r1
 800a7e8:	4614      	mov	r4, r2
 800a7ea:	d50e      	bpl.n	800a80a <_svfiprintf_r+0x32>
 800a7ec:	690b      	ldr	r3, [r1, #16]
 800a7ee:	b963      	cbnz	r3, 800a80a <_svfiprintf_r+0x32>
 800a7f0:	2140      	movs	r1, #64	; 0x40
 800a7f2:	f7ff ff0b 	bl	800a60c <_malloc_r>
 800a7f6:	6028      	str	r0, [r5, #0]
 800a7f8:	6128      	str	r0, [r5, #16]
 800a7fa:	b920      	cbnz	r0, 800a806 <_svfiprintf_r+0x2e>
 800a7fc:	230c      	movs	r3, #12
 800a7fe:	603b      	str	r3, [r7, #0]
 800a800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a804:	e0d0      	b.n	800a9a8 <_svfiprintf_r+0x1d0>
 800a806:	2340      	movs	r3, #64	; 0x40
 800a808:	616b      	str	r3, [r5, #20]
 800a80a:	2300      	movs	r3, #0
 800a80c:	9309      	str	r3, [sp, #36]	; 0x24
 800a80e:	2320      	movs	r3, #32
 800a810:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a814:	f8cd 800c 	str.w	r8, [sp, #12]
 800a818:	2330      	movs	r3, #48	; 0x30
 800a81a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a9c0 <_svfiprintf_r+0x1e8>
 800a81e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a822:	f04f 0901 	mov.w	r9, #1
 800a826:	4623      	mov	r3, r4
 800a828:	469a      	mov	sl, r3
 800a82a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a82e:	b10a      	cbz	r2, 800a834 <_svfiprintf_r+0x5c>
 800a830:	2a25      	cmp	r2, #37	; 0x25
 800a832:	d1f9      	bne.n	800a828 <_svfiprintf_r+0x50>
 800a834:	ebba 0b04 	subs.w	fp, sl, r4
 800a838:	d00b      	beq.n	800a852 <_svfiprintf_r+0x7a>
 800a83a:	465b      	mov	r3, fp
 800a83c:	4622      	mov	r2, r4
 800a83e:	4629      	mov	r1, r5
 800a840:	4638      	mov	r0, r7
 800a842:	f7ff ff6f 	bl	800a724 <__ssputs_r>
 800a846:	3001      	adds	r0, #1
 800a848:	f000 80a9 	beq.w	800a99e <_svfiprintf_r+0x1c6>
 800a84c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a84e:	445a      	add	r2, fp
 800a850:	9209      	str	r2, [sp, #36]	; 0x24
 800a852:	f89a 3000 	ldrb.w	r3, [sl]
 800a856:	2b00      	cmp	r3, #0
 800a858:	f000 80a1 	beq.w	800a99e <_svfiprintf_r+0x1c6>
 800a85c:	2300      	movs	r3, #0
 800a85e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a866:	f10a 0a01 	add.w	sl, sl, #1
 800a86a:	9304      	str	r3, [sp, #16]
 800a86c:	9307      	str	r3, [sp, #28]
 800a86e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a872:	931a      	str	r3, [sp, #104]	; 0x68
 800a874:	4654      	mov	r4, sl
 800a876:	2205      	movs	r2, #5
 800a878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a87c:	4850      	ldr	r0, [pc, #320]	; (800a9c0 <_svfiprintf_r+0x1e8>)
 800a87e:	f7f5 fcaf 	bl	80001e0 <memchr>
 800a882:	9a04      	ldr	r2, [sp, #16]
 800a884:	b9d8      	cbnz	r0, 800a8be <_svfiprintf_r+0xe6>
 800a886:	06d0      	lsls	r0, r2, #27
 800a888:	bf44      	itt	mi
 800a88a:	2320      	movmi	r3, #32
 800a88c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a890:	0711      	lsls	r1, r2, #28
 800a892:	bf44      	itt	mi
 800a894:	232b      	movmi	r3, #43	; 0x2b
 800a896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a89a:	f89a 3000 	ldrb.w	r3, [sl]
 800a89e:	2b2a      	cmp	r3, #42	; 0x2a
 800a8a0:	d015      	beq.n	800a8ce <_svfiprintf_r+0xf6>
 800a8a2:	9a07      	ldr	r2, [sp, #28]
 800a8a4:	4654      	mov	r4, sl
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	f04f 0c0a 	mov.w	ip, #10
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8b2:	3b30      	subs	r3, #48	; 0x30
 800a8b4:	2b09      	cmp	r3, #9
 800a8b6:	d94d      	bls.n	800a954 <_svfiprintf_r+0x17c>
 800a8b8:	b1b0      	cbz	r0, 800a8e8 <_svfiprintf_r+0x110>
 800a8ba:	9207      	str	r2, [sp, #28]
 800a8bc:	e014      	b.n	800a8e8 <_svfiprintf_r+0x110>
 800a8be:	eba0 0308 	sub.w	r3, r0, r8
 800a8c2:	fa09 f303 	lsl.w	r3, r9, r3
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	9304      	str	r3, [sp, #16]
 800a8ca:	46a2      	mov	sl, r4
 800a8cc:	e7d2      	b.n	800a874 <_svfiprintf_r+0x9c>
 800a8ce:	9b03      	ldr	r3, [sp, #12]
 800a8d0:	1d19      	adds	r1, r3, #4
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	9103      	str	r1, [sp, #12]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	bfbb      	ittet	lt
 800a8da:	425b      	neglt	r3, r3
 800a8dc:	f042 0202 	orrlt.w	r2, r2, #2
 800a8e0:	9307      	strge	r3, [sp, #28]
 800a8e2:	9307      	strlt	r3, [sp, #28]
 800a8e4:	bfb8      	it	lt
 800a8e6:	9204      	strlt	r2, [sp, #16]
 800a8e8:	7823      	ldrb	r3, [r4, #0]
 800a8ea:	2b2e      	cmp	r3, #46	; 0x2e
 800a8ec:	d10c      	bne.n	800a908 <_svfiprintf_r+0x130>
 800a8ee:	7863      	ldrb	r3, [r4, #1]
 800a8f0:	2b2a      	cmp	r3, #42	; 0x2a
 800a8f2:	d134      	bne.n	800a95e <_svfiprintf_r+0x186>
 800a8f4:	9b03      	ldr	r3, [sp, #12]
 800a8f6:	1d1a      	adds	r2, r3, #4
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	9203      	str	r2, [sp, #12]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	bfb8      	it	lt
 800a900:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a904:	3402      	adds	r4, #2
 800a906:	9305      	str	r3, [sp, #20]
 800a908:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a9d0 <_svfiprintf_r+0x1f8>
 800a90c:	7821      	ldrb	r1, [r4, #0]
 800a90e:	2203      	movs	r2, #3
 800a910:	4650      	mov	r0, sl
 800a912:	f7f5 fc65 	bl	80001e0 <memchr>
 800a916:	b138      	cbz	r0, 800a928 <_svfiprintf_r+0x150>
 800a918:	9b04      	ldr	r3, [sp, #16]
 800a91a:	eba0 000a 	sub.w	r0, r0, sl
 800a91e:	2240      	movs	r2, #64	; 0x40
 800a920:	4082      	lsls	r2, r0
 800a922:	4313      	orrs	r3, r2
 800a924:	3401      	adds	r4, #1
 800a926:	9304      	str	r3, [sp, #16]
 800a928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a92c:	4825      	ldr	r0, [pc, #148]	; (800a9c4 <_svfiprintf_r+0x1ec>)
 800a92e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a932:	2206      	movs	r2, #6
 800a934:	f7f5 fc54 	bl	80001e0 <memchr>
 800a938:	2800      	cmp	r0, #0
 800a93a:	d038      	beq.n	800a9ae <_svfiprintf_r+0x1d6>
 800a93c:	4b22      	ldr	r3, [pc, #136]	; (800a9c8 <_svfiprintf_r+0x1f0>)
 800a93e:	bb1b      	cbnz	r3, 800a988 <_svfiprintf_r+0x1b0>
 800a940:	9b03      	ldr	r3, [sp, #12]
 800a942:	3307      	adds	r3, #7
 800a944:	f023 0307 	bic.w	r3, r3, #7
 800a948:	3308      	adds	r3, #8
 800a94a:	9303      	str	r3, [sp, #12]
 800a94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a94e:	4433      	add	r3, r6
 800a950:	9309      	str	r3, [sp, #36]	; 0x24
 800a952:	e768      	b.n	800a826 <_svfiprintf_r+0x4e>
 800a954:	fb0c 3202 	mla	r2, ip, r2, r3
 800a958:	460c      	mov	r4, r1
 800a95a:	2001      	movs	r0, #1
 800a95c:	e7a6      	b.n	800a8ac <_svfiprintf_r+0xd4>
 800a95e:	2300      	movs	r3, #0
 800a960:	3401      	adds	r4, #1
 800a962:	9305      	str	r3, [sp, #20]
 800a964:	4619      	mov	r1, r3
 800a966:	f04f 0c0a 	mov.w	ip, #10
 800a96a:	4620      	mov	r0, r4
 800a96c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a970:	3a30      	subs	r2, #48	; 0x30
 800a972:	2a09      	cmp	r2, #9
 800a974:	d903      	bls.n	800a97e <_svfiprintf_r+0x1a6>
 800a976:	2b00      	cmp	r3, #0
 800a978:	d0c6      	beq.n	800a908 <_svfiprintf_r+0x130>
 800a97a:	9105      	str	r1, [sp, #20]
 800a97c:	e7c4      	b.n	800a908 <_svfiprintf_r+0x130>
 800a97e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a982:	4604      	mov	r4, r0
 800a984:	2301      	movs	r3, #1
 800a986:	e7f0      	b.n	800a96a <_svfiprintf_r+0x192>
 800a988:	ab03      	add	r3, sp, #12
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	462a      	mov	r2, r5
 800a98e:	4b0f      	ldr	r3, [pc, #60]	; (800a9cc <_svfiprintf_r+0x1f4>)
 800a990:	a904      	add	r1, sp, #16
 800a992:	4638      	mov	r0, r7
 800a994:	f3af 8000 	nop.w
 800a998:	1c42      	adds	r2, r0, #1
 800a99a:	4606      	mov	r6, r0
 800a99c:	d1d6      	bne.n	800a94c <_svfiprintf_r+0x174>
 800a99e:	89ab      	ldrh	r3, [r5, #12]
 800a9a0:	065b      	lsls	r3, r3, #25
 800a9a2:	f53f af2d 	bmi.w	800a800 <_svfiprintf_r+0x28>
 800a9a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9a8:	b01d      	add	sp, #116	; 0x74
 800a9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ae:	ab03      	add	r3, sp, #12
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	462a      	mov	r2, r5
 800a9b4:	4b05      	ldr	r3, [pc, #20]	; (800a9cc <_svfiprintf_r+0x1f4>)
 800a9b6:	a904      	add	r1, sp, #16
 800a9b8:	4638      	mov	r0, r7
 800a9ba:	f000 f879 	bl	800aab0 <_printf_i>
 800a9be:	e7eb      	b.n	800a998 <_svfiprintf_r+0x1c0>
 800a9c0:	0800bef8 	.word	0x0800bef8
 800a9c4:	0800bf02 	.word	0x0800bf02
 800a9c8:	00000000 	.word	0x00000000
 800a9cc:	0800a725 	.word	0x0800a725
 800a9d0:	0800befe 	.word	0x0800befe

0800a9d4 <_printf_common>:
 800a9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d8:	4616      	mov	r6, r2
 800a9da:	4699      	mov	r9, r3
 800a9dc:	688a      	ldr	r2, [r1, #8]
 800a9de:	690b      	ldr	r3, [r1, #16]
 800a9e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	bfb8      	it	lt
 800a9e8:	4613      	movlt	r3, r2
 800a9ea:	6033      	str	r3, [r6, #0]
 800a9ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	b10a      	cbz	r2, 800a9fa <_printf_common+0x26>
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	6033      	str	r3, [r6, #0]
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	0699      	lsls	r1, r3, #26
 800a9fe:	bf42      	ittt	mi
 800aa00:	6833      	ldrmi	r3, [r6, #0]
 800aa02:	3302      	addmi	r3, #2
 800aa04:	6033      	strmi	r3, [r6, #0]
 800aa06:	6825      	ldr	r5, [r4, #0]
 800aa08:	f015 0506 	ands.w	r5, r5, #6
 800aa0c:	d106      	bne.n	800aa1c <_printf_common+0x48>
 800aa0e:	f104 0a19 	add.w	sl, r4, #25
 800aa12:	68e3      	ldr	r3, [r4, #12]
 800aa14:	6832      	ldr	r2, [r6, #0]
 800aa16:	1a9b      	subs	r3, r3, r2
 800aa18:	42ab      	cmp	r3, r5
 800aa1a:	dc26      	bgt.n	800aa6a <_printf_common+0x96>
 800aa1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa20:	1e13      	subs	r3, r2, #0
 800aa22:	6822      	ldr	r2, [r4, #0]
 800aa24:	bf18      	it	ne
 800aa26:	2301      	movne	r3, #1
 800aa28:	0692      	lsls	r2, r2, #26
 800aa2a:	d42b      	bmi.n	800aa84 <_printf_common+0xb0>
 800aa2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa30:	4649      	mov	r1, r9
 800aa32:	4638      	mov	r0, r7
 800aa34:	47c0      	blx	r8
 800aa36:	3001      	adds	r0, #1
 800aa38:	d01e      	beq.n	800aa78 <_printf_common+0xa4>
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	6922      	ldr	r2, [r4, #16]
 800aa3e:	f003 0306 	and.w	r3, r3, #6
 800aa42:	2b04      	cmp	r3, #4
 800aa44:	bf02      	ittt	eq
 800aa46:	68e5      	ldreq	r5, [r4, #12]
 800aa48:	6833      	ldreq	r3, [r6, #0]
 800aa4a:	1aed      	subeq	r5, r5, r3
 800aa4c:	68a3      	ldr	r3, [r4, #8]
 800aa4e:	bf0c      	ite	eq
 800aa50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa54:	2500      	movne	r5, #0
 800aa56:	4293      	cmp	r3, r2
 800aa58:	bfc4      	itt	gt
 800aa5a:	1a9b      	subgt	r3, r3, r2
 800aa5c:	18ed      	addgt	r5, r5, r3
 800aa5e:	2600      	movs	r6, #0
 800aa60:	341a      	adds	r4, #26
 800aa62:	42b5      	cmp	r5, r6
 800aa64:	d11a      	bne.n	800aa9c <_printf_common+0xc8>
 800aa66:	2000      	movs	r0, #0
 800aa68:	e008      	b.n	800aa7c <_printf_common+0xa8>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	4652      	mov	r2, sl
 800aa6e:	4649      	mov	r1, r9
 800aa70:	4638      	mov	r0, r7
 800aa72:	47c0      	blx	r8
 800aa74:	3001      	adds	r0, #1
 800aa76:	d103      	bne.n	800aa80 <_printf_common+0xac>
 800aa78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa80:	3501      	adds	r5, #1
 800aa82:	e7c6      	b.n	800aa12 <_printf_common+0x3e>
 800aa84:	18e1      	adds	r1, r4, r3
 800aa86:	1c5a      	adds	r2, r3, #1
 800aa88:	2030      	movs	r0, #48	; 0x30
 800aa8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa8e:	4422      	add	r2, r4
 800aa90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa98:	3302      	adds	r3, #2
 800aa9a:	e7c7      	b.n	800aa2c <_printf_common+0x58>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	4622      	mov	r2, r4
 800aaa0:	4649      	mov	r1, r9
 800aaa2:	4638      	mov	r0, r7
 800aaa4:	47c0      	blx	r8
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	d0e6      	beq.n	800aa78 <_printf_common+0xa4>
 800aaaa:	3601      	adds	r6, #1
 800aaac:	e7d9      	b.n	800aa62 <_printf_common+0x8e>
	...

0800aab0 <_printf_i>:
 800aab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aab4:	7e0f      	ldrb	r7, [r1, #24]
 800aab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aab8:	2f78      	cmp	r7, #120	; 0x78
 800aaba:	4691      	mov	r9, r2
 800aabc:	4680      	mov	r8, r0
 800aabe:	460c      	mov	r4, r1
 800aac0:	469a      	mov	sl, r3
 800aac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aac6:	d807      	bhi.n	800aad8 <_printf_i+0x28>
 800aac8:	2f62      	cmp	r7, #98	; 0x62
 800aaca:	d80a      	bhi.n	800aae2 <_printf_i+0x32>
 800aacc:	2f00      	cmp	r7, #0
 800aace:	f000 80d4 	beq.w	800ac7a <_printf_i+0x1ca>
 800aad2:	2f58      	cmp	r7, #88	; 0x58
 800aad4:	f000 80c0 	beq.w	800ac58 <_printf_i+0x1a8>
 800aad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aadc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aae0:	e03a      	b.n	800ab58 <_printf_i+0xa8>
 800aae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aae6:	2b15      	cmp	r3, #21
 800aae8:	d8f6      	bhi.n	800aad8 <_printf_i+0x28>
 800aaea:	a101      	add	r1, pc, #4	; (adr r1, 800aaf0 <_printf_i+0x40>)
 800aaec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aaf0:	0800ab49 	.word	0x0800ab49
 800aaf4:	0800ab5d 	.word	0x0800ab5d
 800aaf8:	0800aad9 	.word	0x0800aad9
 800aafc:	0800aad9 	.word	0x0800aad9
 800ab00:	0800aad9 	.word	0x0800aad9
 800ab04:	0800aad9 	.word	0x0800aad9
 800ab08:	0800ab5d 	.word	0x0800ab5d
 800ab0c:	0800aad9 	.word	0x0800aad9
 800ab10:	0800aad9 	.word	0x0800aad9
 800ab14:	0800aad9 	.word	0x0800aad9
 800ab18:	0800aad9 	.word	0x0800aad9
 800ab1c:	0800ac61 	.word	0x0800ac61
 800ab20:	0800ab89 	.word	0x0800ab89
 800ab24:	0800ac1b 	.word	0x0800ac1b
 800ab28:	0800aad9 	.word	0x0800aad9
 800ab2c:	0800aad9 	.word	0x0800aad9
 800ab30:	0800ac83 	.word	0x0800ac83
 800ab34:	0800aad9 	.word	0x0800aad9
 800ab38:	0800ab89 	.word	0x0800ab89
 800ab3c:	0800aad9 	.word	0x0800aad9
 800ab40:	0800aad9 	.word	0x0800aad9
 800ab44:	0800ac23 	.word	0x0800ac23
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	1d1a      	adds	r2, r3, #4
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	602a      	str	r2, [r5, #0]
 800ab50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e09f      	b.n	800ac9c <_printf_i+0x1ec>
 800ab5c:	6820      	ldr	r0, [r4, #0]
 800ab5e:	682b      	ldr	r3, [r5, #0]
 800ab60:	0607      	lsls	r7, r0, #24
 800ab62:	f103 0104 	add.w	r1, r3, #4
 800ab66:	6029      	str	r1, [r5, #0]
 800ab68:	d501      	bpl.n	800ab6e <_printf_i+0xbe>
 800ab6a:	681e      	ldr	r6, [r3, #0]
 800ab6c:	e003      	b.n	800ab76 <_printf_i+0xc6>
 800ab6e:	0646      	lsls	r6, r0, #25
 800ab70:	d5fb      	bpl.n	800ab6a <_printf_i+0xba>
 800ab72:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ab76:	2e00      	cmp	r6, #0
 800ab78:	da03      	bge.n	800ab82 <_printf_i+0xd2>
 800ab7a:	232d      	movs	r3, #45	; 0x2d
 800ab7c:	4276      	negs	r6, r6
 800ab7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab82:	485a      	ldr	r0, [pc, #360]	; (800acec <_printf_i+0x23c>)
 800ab84:	230a      	movs	r3, #10
 800ab86:	e012      	b.n	800abae <_printf_i+0xfe>
 800ab88:	682b      	ldr	r3, [r5, #0]
 800ab8a:	6820      	ldr	r0, [r4, #0]
 800ab8c:	1d19      	adds	r1, r3, #4
 800ab8e:	6029      	str	r1, [r5, #0]
 800ab90:	0605      	lsls	r5, r0, #24
 800ab92:	d501      	bpl.n	800ab98 <_printf_i+0xe8>
 800ab94:	681e      	ldr	r6, [r3, #0]
 800ab96:	e002      	b.n	800ab9e <_printf_i+0xee>
 800ab98:	0641      	lsls	r1, r0, #25
 800ab9a:	d5fb      	bpl.n	800ab94 <_printf_i+0xe4>
 800ab9c:	881e      	ldrh	r6, [r3, #0]
 800ab9e:	4853      	ldr	r0, [pc, #332]	; (800acec <_printf_i+0x23c>)
 800aba0:	2f6f      	cmp	r7, #111	; 0x6f
 800aba2:	bf0c      	ite	eq
 800aba4:	2308      	moveq	r3, #8
 800aba6:	230a      	movne	r3, #10
 800aba8:	2100      	movs	r1, #0
 800abaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abae:	6865      	ldr	r5, [r4, #4]
 800abb0:	60a5      	str	r5, [r4, #8]
 800abb2:	2d00      	cmp	r5, #0
 800abb4:	bfa2      	ittt	ge
 800abb6:	6821      	ldrge	r1, [r4, #0]
 800abb8:	f021 0104 	bicge.w	r1, r1, #4
 800abbc:	6021      	strge	r1, [r4, #0]
 800abbe:	b90e      	cbnz	r6, 800abc4 <_printf_i+0x114>
 800abc0:	2d00      	cmp	r5, #0
 800abc2:	d04b      	beq.n	800ac5c <_printf_i+0x1ac>
 800abc4:	4615      	mov	r5, r2
 800abc6:	fbb6 f1f3 	udiv	r1, r6, r3
 800abca:	fb03 6711 	mls	r7, r3, r1, r6
 800abce:	5dc7      	ldrb	r7, [r0, r7]
 800abd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800abd4:	4637      	mov	r7, r6
 800abd6:	42bb      	cmp	r3, r7
 800abd8:	460e      	mov	r6, r1
 800abda:	d9f4      	bls.n	800abc6 <_printf_i+0x116>
 800abdc:	2b08      	cmp	r3, #8
 800abde:	d10b      	bne.n	800abf8 <_printf_i+0x148>
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	07de      	lsls	r6, r3, #31
 800abe4:	d508      	bpl.n	800abf8 <_printf_i+0x148>
 800abe6:	6923      	ldr	r3, [r4, #16]
 800abe8:	6861      	ldr	r1, [r4, #4]
 800abea:	4299      	cmp	r1, r3
 800abec:	bfde      	ittt	le
 800abee:	2330      	movle	r3, #48	; 0x30
 800abf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800abf4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800abf8:	1b52      	subs	r2, r2, r5
 800abfa:	6122      	str	r2, [r4, #16]
 800abfc:	f8cd a000 	str.w	sl, [sp]
 800ac00:	464b      	mov	r3, r9
 800ac02:	aa03      	add	r2, sp, #12
 800ac04:	4621      	mov	r1, r4
 800ac06:	4640      	mov	r0, r8
 800ac08:	f7ff fee4 	bl	800a9d4 <_printf_common>
 800ac0c:	3001      	adds	r0, #1
 800ac0e:	d14a      	bne.n	800aca6 <_printf_i+0x1f6>
 800ac10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac14:	b004      	add	sp, #16
 800ac16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac1a:	6823      	ldr	r3, [r4, #0]
 800ac1c:	f043 0320 	orr.w	r3, r3, #32
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	4833      	ldr	r0, [pc, #204]	; (800acf0 <_printf_i+0x240>)
 800ac24:	2778      	movs	r7, #120	; 0x78
 800ac26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	6829      	ldr	r1, [r5, #0]
 800ac2e:	061f      	lsls	r7, r3, #24
 800ac30:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac34:	d402      	bmi.n	800ac3c <_printf_i+0x18c>
 800ac36:	065f      	lsls	r7, r3, #25
 800ac38:	bf48      	it	mi
 800ac3a:	b2b6      	uxthmi	r6, r6
 800ac3c:	07df      	lsls	r7, r3, #31
 800ac3e:	bf48      	it	mi
 800ac40:	f043 0320 	orrmi.w	r3, r3, #32
 800ac44:	6029      	str	r1, [r5, #0]
 800ac46:	bf48      	it	mi
 800ac48:	6023      	strmi	r3, [r4, #0]
 800ac4a:	b91e      	cbnz	r6, 800ac54 <_printf_i+0x1a4>
 800ac4c:	6823      	ldr	r3, [r4, #0]
 800ac4e:	f023 0320 	bic.w	r3, r3, #32
 800ac52:	6023      	str	r3, [r4, #0]
 800ac54:	2310      	movs	r3, #16
 800ac56:	e7a7      	b.n	800aba8 <_printf_i+0xf8>
 800ac58:	4824      	ldr	r0, [pc, #144]	; (800acec <_printf_i+0x23c>)
 800ac5a:	e7e4      	b.n	800ac26 <_printf_i+0x176>
 800ac5c:	4615      	mov	r5, r2
 800ac5e:	e7bd      	b.n	800abdc <_printf_i+0x12c>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	6826      	ldr	r6, [r4, #0]
 800ac64:	6961      	ldr	r1, [r4, #20]
 800ac66:	1d18      	adds	r0, r3, #4
 800ac68:	6028      	str	r0, [r5, #0]
 800ac6a:	0635      	lsls	r5, r6, #24
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	d501      	bpl.n	800ac74 <_printf_i+0x1c4>
 800ac70:	6019      	str	r1, [r3, #0]
 800ac72:	e002      	b.n	800ac7a <_printf_i+0x1ca>
 800ac74:	0670      	lsls	r0, r6, #25
 800ac76:	d5fb      	bpl.n	800ac70 <_printf_i+0x1c0>
 800ac78:	8019      	strh	r1, [r3, #0]
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	6123      	str	r3, [r4, #16]
 800ac7e:	4615      	mov	r5, r2
 800ac80:	e7bc      	b.n	800abfc <_printf_i+0x14c>
 800ac82:	682b      	ldr	r3, [r5, #0]
 800ac84:	1d1a      	adds	r2, r3, #4
 800ac86:	602a      	str	r2, [r5, #0]
 800ac88:	681d      	ldr	r5, [r3, #0]
 800ac8a:	6862      	ldr	r2, [r4, #4]
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	4628      	mov	r0, r5
 800ac90:	f7f5 faa6 	bl	80001e0 <memchr>
 800ac94:	b108      	cbz	r0, 800ac9a <_printf_i+0x1ea>
 800ac96:	1b40      	subs	r0, r0, r5
 800ac98:	6060      	str	r0, [r4, #4]
 800ac9a:	6863      	ldr	r3, [r4, #4]
 800ac9c:	6123      	str	r3, [r4, #16]
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aca4:	e7aa      	b.n	800abfc <_printf_i+0x14c>
 800aca6:	6923      	ldr	r3, [r4, #16]
 800aca8:	462a      	mov	r2, r5
 800acaa:	4649      	mov	r1, r9
 800acac:	4640      	mov	r0, r8
 800acae:	47d0      	blx	sl
 800acb0:	3001      	adds	r0, #1
 800acb2:	d0ad      	beq.n	800ac10 <_printf_i+0x160>
 800acb4:	6823      	ldr	r3, [r4, #0]
 800acb6:	079b      	lsls	r3, r3, #30
 800acb8:	d413      	bmi.n	800ace2 <_printf_i+0x232>
 800acba:	68e0      	ldr	r0, [r4, #12]
 800acbc:	9b03      	ldr	r3, [sp, #12]
 800acbe:	4298      	cmp	r0, r3
 800acc0:	bfb8      	it	lt
 800acc2:	4618      	movlt	r0, r3
 800acc4:	e7a6      	b.n	800ac14 <_printf_i+0x164>
 800acc6:	2301      	movs	r3, #1
 800acc8:	4632      	mov	r2, r6
 800acca:	4649      	mov	r1, r9
 800accc:	4640      	mov	r0, r8
 800acce:	47d0      	blx	sl
 800acd0:	3001      	adds	r0, #1
 800acd2:	d09d      	beq.n	800ac10 <_printf_i+0x160>
 800acd4:	3501      	adds	r5, #1
 800acd6:	68e3      	ldr	r3, [r4, #12]
 800acd8:	9903      	ldr	r1, [sp, #12]
 800acda:	1a5b      	subs	r3, r3, r1
 800acdc:	42ab      	cmp	r3, r5
 800acde:	dcf2      	bgt.n	800acc6 <_printf_i+0x216>
 800ace0:	e7eb      	b.n	800acba <_printf_i+0x20a>
 800ace2:	2500      	movs	r5, #0
 800ace4:	f104 0619 	add.w	r6, r4, #25
 800ace8:	e7f5      	b.n	800acd6 <_printf_i+0x226>
 800acea:	bf00      	nop
 800acec:	0800bf09 	.word	0x0800bf09
 800acf0:	0800bf1a 	.word	0x0800bf1a

0800acf4 <memmove>:
 800acf4:	4288      	cmp	r0, r1
 800acf6:	b510      	push	{r4, lr}
 800acf8:	eb01 0402 	add.w	r4, r1, r2
 800acfc:	d902      	bls.n	800ad04 <memmove+0x10>
 800acfe:	4284      	cmp	r4, r0
 800ad00:	4623      	mov	r3, r4
 800ad02:	d807      	bhi.n	800ad14 <memmove+0x20>
 800ad04:	1e43      	subs	r3, r0, #1
 800ad06:	42a1      	cmp	r1, r4
 800ad08:	d008      	beq.n	800ad1c <memmove+0x28>
 800ad0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad12:	e7f8      	b.n	800ad06 <memmove+0x12>
 800ad14:	4402      	add	r2, r0
 800ad16:	4601      	mov	r1, r0
 800ad18:	428a      	cmp	r2, r1
 800ad1a:	d100      	bne.n	800ad1e <memmove+0x2a>
 800ad1c:	bd10      	pop	{r4, pc}
 800ad1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad26:	e7f7      	b.n	800ad18 <memmove+0x24>

0800ad28 <_sbrk_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4d06      	ldr	r5, [pc, #24]	; (800ad44 <_sbrk_r+0x1c>)
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	4604      	mov	r4, r0
 800ad30:	4608      	mov	r0, r1
 800ad32:	602b      	str	r3, [r5, #0]
 800ad34:	f7f6 ffb4 	bl	8001ca0 <_sbrk>
 800ad38:	1c43      	adds	r3, r0, #1
 800ad3a:	d102      	bne.n	800ad42 <_sbrk_r+0x1a>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	b103      	cbz	r3, 800ad42 <_sbrk_r+0x1a>
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	bd38      	pop	{r3, r4, r5, pc}
 800ad44:	20003118 	.word	0x20003118

0800ad48 <memcpy>:
 800ad48:	440a      	add	r2, r1
 800ad4a:	4291      	cmp	r1, r2
 800ad4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ad50:	d100      	bne.n	800ad54 <memcpy+0xc>
 800ad52:	4770      	bx	lr
 800ad54:	b510      	push	{r4, lr}
 800ad56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad5e:	4291      	cmp	r1, r2
 800ad60:	d1f9      	bne.n	800ad56 <memcpy+0xe>
 800ad62:	bd10      	pop	{r4, pc}

0800ad64 <_realloc_r>:
 800ad64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad68:	4680      	mov	r8, r0
 800ad6a:	4614      	mov	r4, r2
 800ad6c:	460e      	mov	r6, r1
 800ad6e:	b921      	cbnz	r1, 800ad7a <_realloc_r+0x16>
 800ad70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad74:	4611      	mov	r1, r2
 800ad76:	f7ff bc49 	b.w	800a60c <_malloc_r>
 800ad7a:	b92a      	cbnz	r2, 800ad88 <_realloc_r+0x24>
 800ad7c:	f7ff fbda 	bl	800a534 <_free_r>
 800ad80:	4625      	mov	r5, r4
 800ad82:	4628      	mov	r0, r5
 800ad84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad88:	f000 f81b 	bl	800adc2 <_malloc_usable_size_r>
 800ad8c:	4284      	cmp	r4, r0
 800ad8e:	4607      	mov	r7, r0
 800ad90:	d802      	bhi.n	800ad98 <_realloc_r+0x34>
 800ad92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad96:	d812      	bhi.n	800adbe <_realloc_r+0x5a>
 800ad98:	4621      	mov	r1, r4
 800ad9a:	4640      	mov	r0, r8
 800ad9c:	f7ff fc36 	bl	800a60c <_malloc_r>
 800ada0:	4605      	mov	r5, r0
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d0ed      	beq.n	800ad82 <_realloc_r+0x1e>
 800ada6:	42bc      	cmp	r4, r7
 800ada8:	4622      	mov	r2, r4
 800adaa:	4631      	mov	r1, r6
 800adac:	bf28      	it	cs
 800adae:	463a      	movcs	r2, r7
 800adb0:	f7ff ffca 	bl	800ad48 <memcpy>
 800adb4:	4631      	mov	r1, r6
 800adb6:	4640      	mov	r0, r8
 800adb8:	f7ff fbbc 	bl	800a534 <_free_r>
 800adbc:	e7e1      	b.n	800ad82 <_realloc_r+0x1e>
 800adbe:	4635      	mov	r5, r6
 800adc0:	e7df      	b.n	800ad82 <_realloc_r+0x1e>

0800adc2 <_malloc_usable_size_r>:
 800adc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adc6:	1f18      	subs	r0, r3, #4
 800adc8:	2b00      	cmp	r3, #0
 800adca:	bfbc      	itt	lt
 800adcc:	580b      	ldrlt	r3, [r1, r0]
 800adce:	18c0      	addlt	r0, r0, r3
 800add0:	4770      	bx	lr
 800add2:	0000      	movs	r0, r0
 800add4:	0000      	movs	r0, r0
	...

0800add8 <sin>:
 800add8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adda:	ec53 2b10 	vmov	r2, r3, d0
 800adde:	4828      	ldr	r0, [pc, #160]	; (800ae80 <sin+0xa8>)
 800ade0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ade4:	4281      	cmp	r1, r0
 800ade6:	dc07      	bgt.n	800adf8 <sin+0x20>
 800ade8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ae78 <sin+0xa0>
 800adec:	2000      	movs	r0, #0
 800adee:	b005      	add	sp, #20
 800adf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800adf4:	f000 b910 	b.w	800b018 <__kernel_sin>
 800adf8:	4822      	ldr	r0, [pc, #136]	; (800ae84 <sin+0xac>)
 800adfa:	4281      	cmp	r1, r0
 800adfc:	dd09      	ble.n	800ae12 <sin+0x3a>
 800adfe:	ee10 0a10 	vmov	r0, s0
 800ae02:	4619      	mov	r1, r3
 800ae04:	f7f5 fa40 	bl	8000288 <__aeabi_dsub>
 800ae08:	ec41 0b10 	vmov	d0, r0, r1
 800ae0c:	b005      	add	sp, #20
 800ae0e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae12:	4668      	mov	r0, sp
 800ae14:	f000 f9c0 	bl	800b198 <__ieee754_rem_pio2>
 800ae18:	f000 0003 	and.w	r0, r0, #3
 800ae1c:	2801      	cmp	r0, #1
 800ae1e:	d00c      	beq.n	800ae3a <sin+0x62>
 800ae20:	2802      	cmp	r0, #2
 800ae22:	d011      	beq.n	800ae48 <sin+0x70>
 800ae24:	b9f0      	cbnz	r0, 800ae64 <sin+0x8c>
 800ae26:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ae2a:	ed9d 0b00 	vldr	d0, [sp]
 800ae2e:	2001      	movs	r0, #1
 800ae30:	f000 f8f2 	bl	800b018 <__kernel_sin>
 800ae34:	ec51 0b10 	vmov	r0, r1, d0
 800ae38:	e7e6      	b.n	800ae08 <sin+0x30>
 800ae3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ae3e:	ed9d 0b00 	vldr	d0, [sp]
 800ae42:	f000 f821 	bl	800ae88 <__kernel_cos>
 800ae46:	e7f5      	b.n	800ae34 <sin+0x5c>
 800ae48:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ae4c:	ed9d 0b00 	vldr	d0, [sp]
 800ae50:	2001      	movs	r0, #1
 800ae52:	f000 f8e1 	bl	800b018 <__kernel_sin>
 800ae56:	ec53 2b10 	vmov	r2, r3, d0
 800ae5a:	ee10 0a10 	vmov	r0, s0
 800ae5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ae62:	e7d1      	b.n	800ae08 <sin+0x30>
 800ae64:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ae68:	ed9d 0b00 	vldr	d0, [sp]
 800ae6c:	f000 f80c 	bl	800ae88 <__kernel_cos>
 800ae70:	e7f1      	b.n	800ae56 <sin+0x7e>
 800ae72:	bf00      	nop
 800ae74:	f3af 8000 	nop.w
	...
 800ae80:	3fe921fb 	.word	0x3fe921fb
 800ae84:	7fefffff 	.word	0x7fefffff

0800ae88 <__kernel_cos>:
 800ae88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8c:	ec57 6b10 	vmov	r6, r7, d0
 800ae90:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ae94:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ae98:	ed8d 1b00 	vstr	d1, [sp]
 800ae9c:	da07      	bge.n	800aeae <__kernel_cos+0x26>
 800ae9e:	ee10 0a10 	vmov	r0, s0
 800aea2:	4639      	mov	r1, r7
 800aea4:	f7f5 fe42 	bl	8000b2c <__aeabi_d2iz>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	f000 8088 	beq.w	800afbe <__kernel_cos+0x136>
 800aeae:	4632      	mov	r2, r6
 800aeb0:	463b      	mov	r3, r7
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	4639      	mov	r1, r7
 800aeb6:	f7f5 fb9f 	bl	80005f8 <__aeabi_dmul>
 800aeba:	4b51      	ldr	r3, [pc, #324]	; (800b000 <__kernel_cos+0x178>)
 800aebc:	2200      	movs	r2, #0
 800aebe:	4604      	mov	r4, r0
 800aec0:	460d      	mov	r5, r1
 800aec2:	f7f5 fb99 	bl	80005f8 <__aeabi_dmul>
 800aec6:	a340      	add	r3, pc, #256	; (adr r3, 800afc8 <__kernel_cos+0x140>)
 800aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aecc:	4682      	mov	sl, r0
 800aece:	468b      	mov	fp, r1
 800aed0:	4620      	mov	r0, r4
 800aed2:	4629      	mov	r1, r5
 800aed4:	f7f5 fb90 	bl	80005f8 <__aeabi_dmul>
 800aed8:	a33d      	add	r3, pc, #244	; (adr r3, 800afd0 <__kernel_cos+0x148>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	f7f5 f9d5 	bl	800028c <__adddf3>
 800aee2:	4622      	mov	r2, r4
 800aee4:	462b      	mov	r3, r5
 800aee6:	f7f5 fb87 	bl	80005f8 <__aeabi_dmul>
 800aeea:	a33b      	add	r3, pc, #236	; (adr r3, 800afd8 <__kernel_cos+0x150>)
 800aeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef0:	f7f5 f9ca 	bl	8000288 <__aeabi_dsub>
 800aef4:	4622      	mov	r2, r4
 800aef6:	462b      	mov	r3, r5
 800aef8:	f7f5 fb7e 	bl	80005f8 <__aeabi_dmul>
 800aefc:	a338      	add	r3, pc, #224	; (adr r3, 800afe0 <__kernel_cos+0x158>)
 800aefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af02:	f7f5 f9c3 	bl	800028c <__adddf3>
 800af06:	4622      	mov	r2, r4
 800af08:	462b      	mov	r3, r5
 800af0a:	f7f5 fb75 	bl	80005f8 <__aeabi_dmul>
 800af0e:	a336      	add	r3, pc, #216	; (adr r3, 800afe8 <__kernel_cos+0x160>)
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	f7f5 f9b8 	bl	8000288 <__aeabi_dsub>
 800af18:	4622      	mov	r2, r4
 800af1a:	462b      	mov	r3, r5
 800af1c:	f7f5 fb6c 	bl	80005f8 <__aeabi_dmul>
 800af20:	a333      	add	r3, pc, #204	; (adr r3, 800aff0 <__kernel_cos+0x168>)
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	f7f5 f9b1 	bl	800028c <__adddf3>
 800af2a:	4622      	mov	r2, r4
 800af2c:	462b      	mov	r3, r5
 800af2e:	f7f5 fb63 	bl	80005f8 <__aeabi_dmul>
 800af32:	4622      	mov	r2, r4
 800af34:	462b      	mov	r3, r5
 800af36:	f7f5 fb5f 	bl	80005f8 <__aeabi_dmul>
 800af3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af3e:	4604      	mov	r4, r0
 800af40:	460d      	mov	r5, r1
 800af42:	4630      	mov	r0, r6
 800af44:	4639      	mov	r1, r7
 800af46:	f7f5 fb57 	bl	80005f8 <__aeabi_dmul>
 800af4a:	460b      	mov	r3, r1
 800af4c:	4602      	mov	r2, r0
 800af4e:	4629      	mov	r1, r5
 800af50:	4620      	mov	r0, r4
 800af52:	f7f5 f999 	bl	8000288 <__aeabi_dsub>
 800af56:	4b2b      	ldr	r3, [pc, #172]	; (800b004 <__kernel_cos+0x17c>)
 800af58:	4598      	cmp	r8, r3
 800af5a:	4606      	mov	r6, r0
 800af5c:	460f      	mov	r7, r1
 800af5e:	dc10      	bgt.n	800af82 <__kernel_cos+0xfa>
 800af60:	4602      	mov	r2, r0
 800af62:	460b      	mov	r3, r1
 800af64:	4650      	mov	r0, sl
 800af66:	4659      	mov	r1, fp
 800af68:	f7f5 f98e 	bl	8000288 <__aeabi_dsub>
 800af6c:	460b      	mov	r3, r1
 800af6e:	4926      	ldr	r1, [pc, #152]	; (800b008 <__kernel_cos+0x180>)
 800af70:	4602      	mov	r2, r0
 800af72:	2000      	movs	r0, #0
 800af74:	f7f5 f988 	bl	8000288 <__aeabi_dsub>
 800af78:	ec41 0b10 	vmov	d0, r0, r1
 800af7c:	b003      	add	sp, #12
 800af7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af82:	4b22      	ldr	r3, [pc, #136]	; (800b00c <__kernel_cos+0x184>)
 800af84:	4920      	ldr	r1, [pc, #128]	; (800b008 <__kernel_cos+0x180>)
 800af86:	4598      	cmp	r8, r3
 800af88:	bfcc      	ite	gt
 800af8a:	4d21      	ldrgt	r5, [pc, #132]	; (800b010 <__kernel_cos+0x188>)
 800af8c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800af90:	2400      	movs	r4, #0
 800af92:	4622      	mov	r2, r4
 800af94:	462b      	mov	r3, r5
 800af96:	2000      	movs	r0, #0
 800af98:	f7f5 f976 	bl	8000288 <__aeabi_dsub>
 800af9c:	4622      	mov	r2, r4
 800af9e:	4680      	mov	r8, r0
 800afa0:	4689      	mov	r9, r1
 800afa2:	462b      	mov	r3, r5
 800afa4:	4650      	mov	r0, sl
 800afa6:	4659      	mov	r1, fp
 800afa8:	f7f5 f96e 	bl	8000288 <__aeabi_dsub>
 800afac:	4632      	mov	r2, r6
 800afae:	463b      	mov	r3, r7
 800afb0:	f7f5 f96a 	bl	8000288 <__aeabi_dsub>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	4640      	mov	r0, r8
 800afba:	4649      	mov	r1, r9
 800afbc:	e7da      	b.n	800af74 <__kernel_cos+0xec>
 800afbe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800aff8 <__kernel_cos+0x170>
 800afc2:	e7db      	b.n	800af7c <__kernel_cos+0xf4>
 800afc4:	f3af 8000 	nop.w
 800afc8:	be8838d4 	.word	0xbe8838d4
 800afcc:	bda8fae9 	.word	0xbda8fae9
 800afd0:	bdb4b1c4 	.word	0xbdb4b1c4
 800afd4:	3e21ee9e 	.word	0x3e21ee9e
 800afd8:	809c52ad 	.word	0x809c52ad
 800afdc:	3e927e4f 	.word	0x3e927e4f
 800afe0:	19cb1590 	.word	0x19cb1590
 800afe4:	3efa01a0 	.word	0x3efa01a0
 800afe8:	16c15177 	.word	0x16c15177
 800afec:	3f56c16c 	.word	0x3f56c16c
 800aff0:	5555554c 	.word	0x5555554c
 800aff4:	3fa55555 	.word	0x3fa55555
 800aff8:	00000000 	.word	0x00000000
 800affc:	3ff00000 	.word	0x3ff00000
 800b000:	3fe00000 	.word	0x3fe00000
 800b004:	3fd33332 	.word	0x3fd33332
 800b008:	3ff00000 	.word	0x3ff00000
 800b00c:	3fe90000 	.word	0x3fe90000
 800b010:	3fd20000 	.word	0x3fd20000
 800b014:	00000000 	.word	0x00000000

0800b018 <__kernel_sin>:
 800b018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01c:	ed2d 8b04 	vpush	{d8-d9}
 800b020:	eeb0 8a41 	vmov.f32	s16, s2
 800b024:	eef0 8a61 	vmov.f32	s17, s3
 800b028:	ec55 4b10 	vmov	r4, r5, d0
 800b02c:	b083      	sub	sp, #12
 800b02e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b032:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b036:	9001      	str	r0, [sp, #4]
 800b038:	da06      	bge.n	800b048 <__kernel_sin+0x30>
 800b03a:	ee10 0a10 	vmov	r0, s0
 800b03e:	4629      	mov	r1, r5
 800b040:	f7f5 fd74 	bl	8000b2c <__aeabi_d2iz>
 800b044:	2800      	cmp	r0, #0
 800b046:	d051      	beq.n	800b0ec <__kernel_sin+0xd4>
 800b048:	4622      	mov	r2, r4
 800b04a:	462b      	mov	r3, r5
 800b04c:	4620      	mov	r0, r4
 800b04e:	4629      	mov	r1, r5
 800b050:	f7f5 fad2 	bl	80005f8 <__aeabi_dmul>
 800b054:	4682      	mov	sl, r0
 800b056:	468b      	mov	fp, r1
 800b058:	4602      	mov	r2, r0
 800b05a:	460b      	mov	r3, r1
 800b05c:	4620      	mov	r0, r4
 800b05e:	4629      	mov	r1, r5
 800b060:	f7f5 faca 	bl	80005f8 <__aeabi_dmul>
 800b064:	a341      	add	r3, pc, #260	; (adr r3, 800b16c <__kernel_sin+0x154>)
 800b066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06a:	4680      	mov	r8, r0
 800b06c:	4689      	mov	r9, r1
 800b06e:	4650      	mov	r0, sl
 800b070:	4659      	mov	r1, fp
 800b072:	f7f5 fac1 	bl	80005f8 <__aeabi_dmul>
 800b076:	a33f      	add	r3, pc, #252	; (adr r3, 800b174 <__kernel_sin+0x15c>)
 800b078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07c:	f7f5 f904 	bl	8000288 <__aeabi_dsub>
 800b080:	4652      	mov	r2, sl
 800b082:	465b      	mov	r3, fp
 800b084:	f7f5 fab8 	bl	80005f8 <__aeabi_dmul>
 800b088:	a33c      	add	r3, pc, #240	; (adr r3, 800b17c <__kernel_sin+0x164>)
 800b08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08e:	f7f5 f8fd 	bl	800028c <__adddf3>
 800b092:	4652      	mov	r2, sl
 800b094:	465b      	mov	r3, fp
 800b096:	f7f5 faaf 	bl	80005f8 <__aeabi_dmul>
 800b09a:	a33a      	add	r3, pc, #232	; (adr r3, 800b184 <__kernel_sin+0x16c>)
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	f7f5 f8f2 	bl	8000288 <__aeabi_dsub>
 800b0a4:	4652      	mov	r2, sl
 800b0a6:	465b      	mov	r3, fp
 800b0a8:	f7f5 faa6 	bl	80005f8 <__aeabi_dmul>
 800b0ac:	a337      	add	r3, pc, #220	; (adr r3, 800b18c <__kernel_sin+0x174>)
 800b0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b2:	f7f5 f8eb 	bl	800028c <__adddf3>
 800b0b6:	9b01      	ldr	r3, [sp, #4]
 800b0b8:	4606      	mov	r6, r0
 800b0ba:	460f      	mov	r7, r1
 800b0bc:	b9eb      	cbnz	r3, 800b0fa <__kernel_sin+0xe2>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	4650      	mov	r0, sl
 800b0c4:	4659      	mov	r1, fp
 800b0c6:	f7f5 fa97 	bl	80005f8 <__aeabi_dmul>
 800b0ca:	a325      	add	r3, pc, #148	; (adr r3, 800b160 <__kernel_sin+0x148>)
 800b0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d0:	f7f5 f8da 	bl	8000288 <__aeabi_dsub>
 800b0d4:	4642      	mov	r2, r8
 800b0d6:	464b      	mov	r3, r9
 800b0d8:	f7f5 fa8e 	bl	80005f8 <__aeabi_dmul>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	4629      	mov	r1, r5
 800b0e4:	f7f5 f8d2 	bl	800028c <__adddf3>
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	460d      	mov	r5, r1
 800b0ec:	ec45 4b10 	vmov	d0, r4, r5
 800b0f0:	b003      	add	sp, #12
 800b0f2:	ecbd 8b04 	vpop	{d8-d9}
 800b0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fa:	4b1b      	ldr	r3, [pc, #108]	; (800b168 <__kernel_sin+0x150>)
 800b0fc:	ec51 0b18 	vmov	r0, r1, d8
 800b100:	2200      	movs	r2, #0
 800b102:	f7f5 fa79 	bl	80005f8 <__aeabi_dmul>
 800b106:	4632      	mov	r2, r6
 800b108:	ec41 0b19 	vmov	d9, r0, r1
 800b10c:	463b      	mov	r3, r7
 800b10e:	4640      	mov	r0, r8
 800b110:	4649      	mov	r1, r9
 800b112:	f7f5 fa71 	bl	80005f8 <__aeabi_dmul>
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	ec51 0b19 	vmov	r0, r1, d9
 800b11e:	f7f5 f8b3 	bl	8000288 <__aeabi_dsub>
 800b122:	4652      	mov	r2, sl
 800b124:	465b      	mov	r3, fp
 800b126:	f7f5 fa67 	bl	80005f8 <__aeabi_dmul>
 800b12a:	ec53 2b18 	vmov	r2, r3, d8
 800b12e:	f7f5 f8ab 	bl	8000288 <__aeabi_dsub>
 800b132:	a30b      	add	r3, pc, #44	; (adr r3, 800b160 <__kernel_sin+0x148>)
 800b134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b138:	4606      	mov	r6, r0
 800b13a:	460f      	mov	r7, r1
 800b13c:	4640      	mov	r0, r8
 800b13e:	4649      	mov	r1, r9
 800b140:	f7f5 fa5a 	bl	80005f8 <__aeabi_dmul>
 800b144:	4602      	mov	r2, r0
 800b146:	460b      	mov	r3, r1
 800b148:	4630      	mov	r0, r6
 800b14a:	4639      	mov	r1, r7
 800b14c:	f7f5 f89e 	bl	800028c <__adddf3>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	4620      	mov	r0, r4
 800b156:	4629      	mov	r1, r5
 800b158:	f7f5 f896 	bl	8000288 <__aeabi_dsub>
 800b15c:	e7c4      	b.n	800b0e8 <__kernel_sin+0xd0>
 800b15e:	bf00      	nop
 800b160:	55555549 	.word	0x55555549
 800b164:	3fc55555 	.word	0x3fc55555
 800b168:	3fe00000 	.word	0x3fe00000
 800b16c:	5acfd57c 	.word	0x5acfd57c
 800b170:	3de5d93a 	.word	0x3de5d93a
 800b174:	8a2b9ceb 	.word	0x8a2b9ceb
 800b178:	3e5ae5e6 	.word	0x3e5ae5e6
 800b17c:	57b1fe7d 	.word	0x57b1fe7d
 800b180:	3ec71de3 	.word	0x3ec71de3
 800b184:	19c161d5 	.word	0x19c161d5
 800b188:	3f2a01a0 	.word	0x3f2a01a0
 800b18c:	1110f8a6 	.word	0x1110f8a6
 800b190:	3f811111 	.word	0x3f811111
 800b194:	00000000 	.word	0x00000000

0800b198 <__ieee754_rem_pio2>:
 800b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19c:	ed2d 8b02 	vpush	{d8}
 800b1a0:	ec55 4b10 	vmov	r4, r5, d0
 800b1a4:	4bca      	ldr	r3, [pc, #808]	; (800b4d0 <__ieee754_rem_pio2+0x338>)
 800b1a6:	b08b      	sub	sp, #44	; 0x2c
 800b1a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b1ac:	4598      	cmp	r8, r3
 800b1ae:	4682      	mov	sl, r0
 800b1b0:	9502      	str	r5, [sp, #8]
 800b1b2:	dc08      	bgt.n	800b1c6 <__ieee754_rem_pio2+0x2e>
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	ed80 0b00 	vstr	d0, [r0]
 800b1bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b1c0:	f04f 0b00 	mov.w	fp, #0
 800b1c4:	e028      	b.n	800b218 <__ieee754_rem_pio2+0x80>
 800b1c6:	4bc3      	ldr	r3, [pc, #780]	; (800b4d4 <__ieee754_rem_pio2+0x33c>)
 800b1c8:	4598      	cmp	r8, r3
 800b1ca:	dc78      	bgt.n	800b2be <__ieee754_rem_pio2+0x126>
 800b1cc:	9b02      	ldr	r3, [sp, #8]
 800b1ce:	4ec2      	ldr	r6, [pc, #776]	; (800b4d8 <__ieee754_rem_pio2+0x340>)
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	ee10 0a10 	vmov	r0, s0
 800b1d6:	a3b0      	add	r3, pc, #704	; (adr r3, 800b498 <__ieee754_rem_pio2+0x300>)
 800b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1dc:	4629      	mov	r1, r5
 800b1de:	dd39      	ble.n	800b254 <__ieee754_rem_pio2+0xbc>
 800b1e0:	f7f5 f852 	bl	8000288 <__aeabi_dsub>
 800b1e4:	45b0      	cmp	r8, r6
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	460d      	mov	r5, r1
 800b1ea:	d01b      	beq.n	800b224 <__ieee754_rem_pio2+0x8c>
 800b1ec:	a3ac      	add	r3, pc, #688	; (adr r3, 800b4a0 <__ieee754_rem_pio2+0x308>)
 800b1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f2:	f7f5 f849 	bl	8000288 <__aeabi_dsub>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	e9ca 2300 	strd	r2, r3, [sl]
 800b1fe:	4620      	mov	r0, r4
 800b200:	4629      	mov	r1, r5
 800b202:	f7f5 f841 	bl	8000288 <__aeabi_dsub>
 800b206:	a3a6      	add	r3, pc, #664	; (adr r3, 800b4a0 <__ieee754_rem_pio2+0x308>)
 800b208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20c:	f7f5 f83c 	bl	8000288 <__aeabi_dsub>
 800b210:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b214:	f04f 0b01 	mov.w	fp, #1
 800b218:	4658      	mov	r0, fp
 800b21a:	b00b      	add	sp, #44	; 0x2c
 800b21c:	ecbd 8b02 	vpop	{d8}
 800b220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b224:	a3a0      	add	r3, pc, #640	; (adr r3, 800b4a8 <__ieee754_rem_pio2+0x310>)
 800b226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22a:	f7f5 f82d 	bl	8000288 <__aeabi_dsub>
 800b22e:	a3a0      	add	r3, pc, #640	; (adr r3, 800b4b0 <__ieee754_rem_pio2+0x318>)
 800b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b234:	4604      	mov	r4, r0
 800b236:	460d      	mov	r5, r1
 800b238:	f7f5 f826 	bl	8000288 <__aeabi_dsub>
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	e9ca 2300 	strd	r2, r3, [sl]
 800b244:	4620      	mov	r0, r4
 800b246:	4629      	mov	r1, r5
 800b248:	f7f5 f81e 	bl	8000288 <__aeabi_dsub>
 800b24c:	a398      	add	r3, pc, #608	; (adr r3, 800b4b0 <__ieee754_rem_pio2+0x318>)
 800b24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b252:	e7db      	b.n	800b20c <__ieee754_rem_pio2+0x74>
 800b254:	f7f5 f81a 	bl	800028c <__adddf3>
 800b258:	45b0      	cmp	r8, r6
 800b25a:	4604      	mov	r4, r0
 800b25c:	460d      	mov	r5, r1
 800b25e:	d016      	beq.n	800b28e <__ieee754_rem_pio2+0xf6>
 800b260:	a38f      	add	r3, pc, #572	; (adr r3, 800b4a0 <__ieee754_rem_pio2+0x308>)
 800b262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b266:	f7f5 f811 	bl	800028c <__adddf3>
 800b26a:	4602      	mov	r2, r0
 800b26c:	460b      	mov	r3, r1
 800b26e:	e9ca 2300 	strd	r2, r3, [sl]
 800b272:	4620      	mov	r0, r4
 800b274:	4629      	mov	r1, r5
 800b276:	f7f5 f807 	bl	8000288 <__aeabi_dsub>
 800b27a:	a389      	add	r3, pc, #548	; (adr r3, 800b4a0 <__ieee754_rem_pio2+0x308>)
 800b27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b280:	f7f5 f804 	bl	800028c <__adddf3>
 800b284:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800b288:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b28c:	e7c4      	b.n	800b218 <__ieee754_rem_pio2+0x80>
 800b28e:	a386      	add	r3, pc, #536	; (adr r3, 800b4a8 <__ieee754_rem_pio2+0x310>)
 800b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b294:	f7f4 fffa 	bl	800028c <__adddf3>
 800b298:	a385      	add	r3, pc, #532	; (adr r3, 800b4b0 <__ieee754_rem_pio2+0x318>)
 800b29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29e:	4604      	mov	r4, r0
 800b2a0:	460d      	mov	r5, r1
 800b2a2:	f7f4 fff3 	bl	800028c <__adddf3>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	e9ca 2300 	strd	r2, r3, [sl]
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	f7f4 ffe9 	bl	8000288 <__aeabi_dsub>
 800b2b6:	a37e      	add	r3, pc, #504	; (adr r3, 800b4b0 <__ieee754_rem_pio2+0x318>)
 800b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2bc:	e7e0      	b.n	800b280 <__ieee754_rem_pio2+0xe8>
 800b2be:	4b87      	ldr	r3, [pc, #540]	; (800b4dc <__ieee754_rem_pio2+0x344>)
 800b2c0:	4598      	cmp	r8, r3
 800b2c2:	f300 80d8 	bgt.w	800b476 <__ieee754_rem_pio2+0x2de>
 800b2c6:	f000 f96d 	bl	800b5a4 <fabs>
 800b2ca:	ec55 4b10 	vmov	r4, r5, d0
 800b2ce:	ee10 0a10 	vmov	r0, s0
 800b2d2:	a379      	add	r3, pc, #484	; (adr r3, 800b4b8 <__ieee754_rem_pio2+0x320>)
 800b2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d8:	4629      	mov	r1, r5
 800b2da:	f7f5 f98d 	bl	80005f8 <__aeabi_dmul>
 800b2de:	4b80      	ldr	r3, [pc, #512]	; (800b4e0 <__ieee754_rem_pio2+0x348>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f7f4 ffd3 	bl	800028c <__adddf3>
 800b2e6:	f7f5 fc21 	bl	8000b2c <__aeabi_d2iz>
 800b2ea:	4683      	mov	fp, r0
 800b2ec:	f7f5 f91a 	bl	8000524 <__aeabi_i2d>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	ec43 2b18 	vmov	d8, r2, r3
 800b2f8:	a367      	add	r3, pc, #412	; (adr r3, 800b498 <__ieee754_rem_pio2+0x300>)
 800b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fe:	f7f5 f97b 	bl	80005f8 <__aeabi_dmul>
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	4620      	mov	r0, r4
 800b308:	4629      	mov	r1, r5
 800b30a:	f7f4 ffbd 	bl	8000288 <__aeabi_dsub>
 800b30e:	a364      	add	r3, pc, #400	; (adr r3, 800b4a0 <__ieee754_rem_pio2+0x308>)
 800b310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b314:	4606      	mov	r6, r0
 800b316:	460f      	mov	r7, r1
 800b318:	ec51 0b18 	vmov	r0, r1, d8
 800b31c:	f7f5 f96c 	bl	80005f8 <__aeabi_dmul>
 800b320:	f1bb 0f1f 	cmp.w	fp, #31
 800b324:	4604      	mov	r4, r0
 800b326:	460d      	mov	r5, r1
 800b328:	dc0d      	bgt.n	800b346 <__ieee754_rem_pio2+0x1ae>
 800b32a:	4b6e      	ldr	r3, [pc, #440]	; (800b4e4 <__ieee754_rem_pio2+0x34c>)
 800b32c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800b330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b334:	4543      	cmp	r3, r8
 800b336:	d006      	beq.n	800b346 <__ieee754_rem_pio2+0x1ae>
 800b338:	4622      	mov	r2, r4
 800b33a:	462b      	mov	r3, r5
 800b33c:	4630      	mov	r0, r6
 800b33e:	4639      	mov	r1, r7
 800b340:	f7f4 ffa2 	bl	8000288 <__aeabi_dsub>
 800b344:	e00e      	b.n	800b364 <__ieee754_rem_pio2+0x1cc>
 800b346:	462b      	mov	r3, r5
 800b348:	4622      	mov	r2, r4
 800b34a:	4630      	mov	r0, r6
 800b34c:	4639      	mov	r1, r7
 800b34e:	f7f4 ff9b 	bl	8000288 <__aeabi_dsub>
 800b352:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b356:	9303      	str	r3, [sp, #12]
 800b358:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b35c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b360:	2b10      	cmp	r3, #16
 800b362:	dc02      	bgt.n	800b36a <__ieee754_rem_pio2+0x1d2>
 800b364:	e9ca 0100 	strd	r0, r1, [sl]
 800b368:	e039      	b.n	800b3de <__ieee754_rem_pio2+0x246>
 800b36a:	a34f      	add	r3, pc, #316	; (adr r3, 800b4a8 <__ieee754_rem_pio2+0x310>)
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	ec51 0b18 	vmov	r0, r1, d8
 800b374:	f7f5 f940 	bl	80005f8 <__aeabi_dmul>
 800b378:	4604      	mov	r4, r0
 800b37a:	460d      	mov	r5, r1
 800b37c:	4602      	mov	r2, r0
 800b37e:	460b      	mov	r3, r1
 800b380:	4630      	mov	r0, r6
 800b382:	4639      	mov	r1, r7
 800b384:	f7f4 ff80 	bl	8000288 <__aeabi_dsub>
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	4680      	mov	r8, r0
 800b38e:	4689      	mov	r9, r1
 800b390:	4630      	mov	r0, r6
 800b392:	4639      	mov	r1, r7
 800b394:	f7f4 ff78 	bl	8000288 <__aeabi_dsub>
 800b398:	4622      	mov	r2, r4
 800b39a:	462b      	mov	r3, r5
 800b39c:	f7f4 ff74 	bl	8000288 <__aeabi_dsub>
 800b3a0:	a343      	add	r3, pc, #268	; (adr r3, 800b4b0 <__ieee754_rem_pio2+0x318>)
 800b3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	460d      	mov	r5, r1
 800b3aa:	ec51 0b18 	vmov	r0, r1, d8
 800b3ae:	f7f5 f923 	bl	80005f8 <__aeabi_dmul>
 800b3b2:	4622      	mov	r2, r4
 800b3b4:	462b      	mov	r3, r5
 800b3b6:	f7f4 ff67 	bl	8000288 <__aeabi_dsub>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	460b      	mov	r3, r1
 800b3be:	4604      	mov	r4, r0
 800b3c0:	460d      	mov	r5, r1
 800b3c2:	4640      	mov	r0, r8
 800b3c4:	4649      	mov	r1, r9
 800b3c6:	f7f4 ff5f 	bl	8000288 <__aeabi_dsub>
 800b3ca:	9a03      	ldr	r2, [sp, #12]
 800b3cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	2b31      	cmp	r3, #49	; 0x31
 800b3d4:	dc24      	bgt.n	800b420 <__ieee754_rem_pio2+0x288>
 800b3d6:	e9ca 0100 	strd	r0, r1, [sl]
 800b3da:	4646      	mov	r6, r8
 800b3dc:	464f      	mov	r7, r9
 800b3de:	e9da 8900 	ldrd	r8, r9, [sl]
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	4642      	mov	r2, r8
 800b3e6:	464b      	mov	r3, r9
 800b3e8:	4639      	mov	r1, r7
 800b3ea:	f7f4 ff4d 	bl	8000288 <__aeabi_dsub>
 800b3ee:	462b      	mov	r3, r5
 800b3f0:	4622      	mov	r2, r4
 800b3f2:	f7f4 ff49 	bl	8000288 <__aeabi_dsub>
 800b3f6:	9b02      	ldr	r3, [sp, #8]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b3fe:	f6bf af0b 	bge.w	800b218 <__ieee754_rem_pio2+0x80>
 800b402:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b406:	f8ca 3004 	str.w	r3, [sl, #4]
 800b40a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b40e:	f8ca 8000 	str.w	r8, [sl]
 800b412:	f8ca 0008 	str.w	r0, [sl, #8]
 800b416:	f8ca 300c 	str.w	r3, [sl, #12]
 800b41a:	f1cb 0b00 	rsb	fp, fp, #0
 800b41e:	e6fb      	b.n	800b218 <__ieee754_rem_pio2+0x80>
 800b420:	a327      	add	r3, pc, #156	; (adr r3, 800b4c0 <__ieee754_rem_pio2+0x328>)
 800b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b426:	ec51 0b18 	vmov	r0, r1, d8
 800b42a:	f7f5 f8e5 	bl	80005f8 <__aeabi_dmul>
 800b42e:	4604      	mov	r4, r0
 800b430:	460d      	mov	r5, r1
 800b432:	4602      	mov	r2, r0
 800b434:	460b      	mov	r3, r1
 800b436:	4640      	mov	r0, r8
 800b438:	4649      	mov	r1, r9
 800b43a:	f7f4 ff25 	bl	8000288 <__aeabi_dsub>
 800b43e:	4602      	mov	r2, r0
 800b440:	460b      	mov	r3, r1
 800b442:	4606      	mov	r6, r0
 800b444:	460f      	mov	r7, r1
 800b446:	4640      	mov	r0, r8
 800b448:	4649      	mov	r1, r9
 800b44a:	f7f4 ff1d 	bl	8000288 <__aeabi_dsub>
 800b44e:	4622      	mov	r2, r4
 800b450:	462b      	mov	r3, r5
 800b452:	f7f4 ff19 	bl	8000288 <__aeabi_dsub>
 800b456:	a31c      	add	r3, pc, #112	; (adr r3, 800b4c8 <__ieee754_rem_pio2+0x330>)
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	4604      	mov	r4, r0
 800b45e:	460d      	mov	r5, r1
 800b460:	ec51 0b18 	vmov	r0, r1, d8
 800b464:	f7f5 f8c8 	bl	80005f8 <__aeabi_dmul>
 800b468:	4622      	mov	r2, r4
 800b46a:	462b      	mov	r3, r5
 800b46c:	f7f4 ff0c 	bl	8000288 <__aeabi_dsub>
 800b470:	4604      	mov	r4, r0
 800b472:	460d      	mov	r5, r1
 800b474:	e760      	b.n	800b338 <__ieee754_rem_pio2+0x1a0>
 800b476:	4b1c      	ldr	r3, [pc, #112]	; (800b4e8 <__ieee754_rem_pio2+0x350>)
 800b478:	4598      	cmp	r8, r3
 800b47a:	dd37      	ble.n	800b4ec <__ieee754_rem_pio2+0x354>
 800b47c:	ee10 2a10 	vmov	r2, s0
 800b480:	462b      	mov	r3, r5
 800b482:	4620      	mov	r0, r4
 800b484:	4629      	mov	r1, r5
 800b486:	f7f4 feff 	bl	8000288 <__aeabi_dsub>
 800b48a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b48e:	e9ca 0100 	strd	r0, r1, [sl]
 800b492:	e695      	b.n	800b1c0 <__ieee754_rem_pio2+0x28>
 800b494:	f3af 8000 	nop.w
 800b498:	54400000 	.word	0x54400000
 800b49c:	3ff921fb 	.word	0x3ff921fb
 800b4a0:	1a626331 	.word	0x1a626331
 800b4a4:	3dd0b461 	.word	0x3dd0b461
 800b4a8:	1a600000 	.word	0x1a600000
 800b4ac:	3dd0b461 	.word	0x3dd0b461
 800b4b0:	2e037073 	.word	0x2e037073
 800b4b4:	3ba3198a 	.word	0x3ba3198a
 800b4b8:	6dc9c883 	.word	0x6dc9c883
 800b4bc:	3fe45f30 	.word	0x3fe45f30
 800b4c0:	2e000000 	.word	0x2e000000
 800b4c4:	3ba3198a 	.word	0x3ba3198a
 800b4c8:	252049c1 	.word	0x252049c1
 800b4cc:	397b839a 	.word	0x397b839a
 800b4d0:	3fe921fb 	.word	0x3fe921fb
 800b4d4:	4002d97b 	.word	0x4002d97b
 800b4d8:	3ff921fb 	.word	0x3ff921fb
 800b4dc:	413921fb 	.word	0x413921fb
 800b4e0:	3fe00000 	.word	0x3fe00000
 800b4e4:	0800bf2c 	.word	0x0800bf2c
 800b4e8:	7fefffff 	.word	0x7fefffff
 800b4ec:	ea4f 5628 	mov.w	r6, r8, asr #20
 800b4f0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800b4f4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	460d      	mov	r5, r1
 800b4fc:	f7f5 fb16 	bl	8000b2c <__aeabi_d2iz>
 800b500:	f7f5 f810 	bl	8000524 <__aeabi_i2d>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	4620      	mov	r0, r4
 800b50a:	4629      	mov	r1, r5
 800b50c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b510:	f7f4 feba 	bl	8000288 <__aeabi_dsub>
 800b514:	4b21      	ldr	r3, [pc, #132]	; (800b59c <__ieee754_rem_pio2+0x404>)
 800b516:	2200      	movs	r2, #0
 800b518:	f7f5 f86e 	bl	80005f8 <__aeabi_dmul>
 800b51c:	460d      	mov	r5, r1
 800b51e:	4604      	mov	r4, r0
 800b520:	f7f5 fb04 	bl	8000b2c <__aeabi_d2iz>
 800b524:	f7f4 fffe 	bl	8000524 <__aeabi_i2d>
 800b528:	4602      	mov	r2, r0
 800b52a:	460b      	mov	r3, r1
 800b52c:	4620      	mov	r0, r4
 800b52e:	4629      	mov	r1, r5
 800b530:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b534:	f7f4 fea8 	bl	8000288 <__aeabi_dsub>
 800b538:	4b18      	ldr	r3, [pc, #96]	; (800b59c <__ieee754_rem_pio2+0x404>)
 800b53a:	2200      	movs	r2, #0
 800b53c:	f7f5 f85c 	bl	80005f8 <__aeabi_dmul>
 800b540:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b544:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800b548:	2703      	movs	r7, #3
 800b54a:	2400      	movs	r4, #0
 800b54c:	2500      	movs	r5, #0
 800b54e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800b552:	4622      	mov	r2, r4
 800b554:	462b      	mov	r3, r5
 800b556:	46b9      	mov	r9, r7
 800b558:	3f01      	subs	r7, #1
 800b55a:	f7f5 fab5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b55e:	2800      	cmp	r0, #0
 800b560:	d1f5      	bne.n	800b54e <__ieee754_rem_pio2+0x3b6>
 800b562:	4b0f      	ldr	r3, [pc, #60]	; (800b5a0 <__ieee754_rem_pio2+0x408>)
 800b564:	9301      	str	r3, [sp, #4]
 800b566:	2302      	movs	r3, #2
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	4632      	mov	r2, r6
 800b56c:	464b      	mov	r3, r9
 800b56e:	4651      	mov	r1, sl
 800b570:	a804      	add	r0, sp, #16
 800b572:	f000 f821 	bl	800b5b8 <__kernel_rem_pio2>
 800b576:	9b02      	ldr	r3, [sp, #8]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	4683      	mov	fp, r0
 800b57c:	f6bf ae4c 	bge.w	800b218 <__ieee754_rem_pio2+0x80>
 800b580:	e9da 2100 	ldrd	r2, r1, [sl]
 800b584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b588:	e9ca 2300 	strd	r2, r3, [sl]
 800b58c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b590:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b594:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b598:	e73f      	b.n	800b41a <__ieee754_rem_pio2+0x282>
 800b59a:	bf00      	nop
 800b59c:	41700000 	.word	0x41700000
 800b5a0:	0800bfac 	.word	0x0800bfac

0800b5a4 <fabs>:
 800b5a4:	ec51 0b10 	vmov	r0, r1, d0
 800b5a8:	ee10 2a10 	vmov	r2, s0
 800b5ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b5b0:	ec43 2b10 	vmov	d0, r2, r3
 800b5b4:	4770      	bx	lr
	...

0800b5b8 <__kernel_rem_pio2>:
 800b5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5bc:	ed2d 8b02 	vpush	{d8}
 800b5c0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b5c4:	f112 0f14 	cmn.w	r2, #20
 800b5c8:	9306      	str	r3, [sp, #24]
 800b5ca:	9104      	str	r1, [sp, #16]
 800b5cc:	4bc2      	ldr	r3, [pc, #776]	; (800b8d8 <__kernel_rem_pio2+0x320>)
 800b5ce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800b5d0:	9009      	str	r0, [sp, #36]	; 0x24
 800b5d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	9b06      	ldr	r3, [sp, #24]
 800b5da:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b5de:	bfa8      	it	ge
 800b5e0:	1ed4      	subge	r4, r2, #3
 800b5e2:	9305      	str	r3, [sp, #20]
 800b5e4:	bfb2      	itee	lt
 800b5e6:	2400      	movlt	r4, #0
 800b5e8:	2318      	movge	r3, #24
 800b5ea:	fb94 f4f3 	sdivge	r4, r4, r3
 800b5ee:	f06f 0317 	mvn.w	r3, #23
 800b5f2:	fb04 3303 	mla	r3, r4, r3, r3
 800b5f6:	eb03 0a02 	add.w	sl, r3, r2
 800b5fa:	9b00      	ldr	r3, [sp, #0]
 800b5fc:	9a05      	ldr	r2, [sp, #20]
 800b5fe:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800b8c8 <__kernel_rem_pio2+0x310>
 800b602:	eb03 0802 	add.w	r8, r3, r2
 800b606:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b608:	1aa7      	subs	r7, r4, r2
 800b60a:	ae20      	add	r6, sp, #128	; 0x80
 800b60c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b610:	2500      	movs	r5, #0
 800b612:	4545      	cmp	r5, r8
 800b614:	dd13      	ble.n	800b63e <__kernel_rem_pio2+0x86>
 800b616:	9b06      	ldr	r3, [sp, #24]
 800b618:	aa20      	add	r2, sp, #128	; 0x80
 800b61a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b61e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b622:	f04f 0800 	mov.w	r8, #0
 800b626:	9b00      	ldr	r3, [sp, #0]
 800b628:	4598      	cmp	r8, r3
 800b62a:	dc31      	bgt.n	800b690 <__kernel_rem_pio2+0xd8>
 800b62c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800b8c8 <__kernel_rem_pio2+0x310>
 800b630:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b634:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b638:	462f      	mov	r7, r5
 800b63a:	2600      	movs	r6, #0
 800b63c:	e01b      	b.n	800b676 <__kernel_rem_pio2+0xbe>
 800b63e:	42ef      	cmn	r7, r5
 800b640:	d407      	bmi.n	800b652 <__kernel_rem_pio2+0x9a>
 800b642:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b646:	f7f4 ff6d 	bl	8000524 <__aeabi_i2d>
 800b64a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b64e:	3501      	adds	r5, #1
 800b650:	e7df      	b.n	800b612 <__kernel_rem_pio2+0x5a>
 800b652:	ec51 0b18 	vmov	r0, r1, d8
 800b656:	e7f8      	b.n	800b64a <__kernel_rem_pio2+0x92>
 800b658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b65c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b660:	f7f4 ffca 	bl	80005f8 <__aeabi_dmul>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b66c:	f7f4 fe0e 	bl	800028c <__adddf3>
 800b670:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b674:	3601      	adds	r6, #1
 800b676:	9b05      	ldr	r3, [sp, #20]
 800b678:	429e      	cmp	r6, r3
 800b67a:	f1a7 0708 	sub.w	r7, r7, #8
 800b67e:	ddeb      	ble.n	800b658 <__kernel_rem_pio2+0xa0>
 800b680:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b684:	f108 0801 	add.w	r8, r8, #1
 800b688:	ecab 7b02 	vstmia	fp!, {d7}
 800b68c:	3508      	adds	r5, #8
 800b68e:	e7ca      	b.n	800b626 <__kernel_rem_pio2+0x6e>
 800b690:	9b00      	ldr	r3, [sp, #0]
 800b692:	aa0c      	add	r2, sp, #48	; 0x30
 800b694:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b698:	930b      	str	r3, [sp, #44]	; 0x2c
 800b69a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b69c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b6a0:	9c00      	ldr	r4, [sp, #0]
 800b6a2:	930a      	str	r3, [sp, #40]	; 0x28
 800b6a4:	00e3      	lsls	r3, r4, #3
 800b6a6:	9308      	str	r3, [sp, #32]
 800b6a8:	ab98      	add	r3, sp, #608	; 0x260
 800b6aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b6b2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800b6b6:	ab70      	add	r3, sp, #448	; 0x1c0
 800b6b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b6bc:	46c3      	mov	fp, r8
 800b6be:	46a1      	mov	r9, r4
 800b6c0:	f1b9 0f00 	cmp.w	r9, #0
 800b6c4:	f1a5 0508 	sub.w	r5, r5, #8
 800b6c8:	dc77      	bgt.n	800b7ba <__kernel_rem_pio2+0x202>
 800b6ca:	ec47 6b10 	vmov	d0, r6, r7
 800b6ce:	4650      	mov	r0, sl
 800b6d0:	f000 fac2 	bl	800bc58 <scalbn>
 800b6d4:	ec57 6b10 	vmov	r6, r7, d0
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b6de:	ee10 0a10 	vmov	r0, s0
 800b6e2:	4639      	mov	r1, r7
 800b6e4:	f7f4 ff88 	bl	80005f8 <__aeabi_dmul>
 800b6e8:	ec41 0b10 	vmov	d0, r0, r1
 800b6ec:	f000 fb34 	bl	800bd58 <floor>
 800b6f0:	4b7a      	ldr	r3, [pc, #488]	; (800b8dc <__kernel_rem_pio2+0x324>)
 800b6f2:	ec51 0b10 	vmov	r0, r1, d0
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f7f4 ff7e 	bl	80005f8 <__aeabi_dmul>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	460b      	mov	r3, r1
 800b700:	4630      	mov	r0, r6
 800b702:	4639      	mov	r1, r7
 800b704:	f7f4 fdc0 	bl	8000288 <__aeabi_dsub>
 800b708:	460f      	mov	r7, r1
 800b70a:	4606      	mov	r6, r0
 800b70c:	f7f5 fa0e 	bl	8000b2c <__aeabi_d2iz>
 800b710:	9002      	str	r0, [sp, #8]
 800b712:	f7f4 ff07 	bl	8000524 <__aeabi_i2d>
 800b716:	4602      	mov	r2, r0
 800b718:	460b      	mov	r3, r1
 800b71a:	4630      	mov	r0, r6
 800b71c:	4639      	mov	r1, r7
 800b71e:	f7f4 fdb3 	bl	8000288 <__aeabi_dsub>
 800b722:	f1ba 0f00 	cmp.w	sl, #0
 800b726:	4606      	mov	r6, r0
 800b728:	460f      	mov	r7, r1
 800b72a:	dd6d      	ble.n	800b808 <__kernel_rem_pio2+0x250>
 800b72c:	1e61      	subs	r1, r4, #1
 800b72e:	ab0c      	add	r3, sp, #48	; 0x30
 800b730:	9d02      	ldr	r5, [sp, #8]
 800b732:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b736:	f1ca 0018 	rsb	r0, sl, #24
 800b73a:	fa43 f200 	asr.w	r2, r3, r0
 800b73e:	4415      	add	r5, r2
 800b740:	4082      	lsls	r2, r0
 800b742:	1a9b      	subs	r3, r3, r2
 800b744:	aa0c      	add	r2, sp, #48	; 0x30
 800b746:	9502      	str	r5, [sp, #8]
 800b748:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b74c:	f1ca 0217 	rsb	r2, sl, #23
 800b750:	fa43 fb02 	asr.w	fp, r3, r2
 800b754:	f1bb 0f00 	cmp.w	fp, #0
 800b758:	dd65      	ble.n	800b826 <__kernel_rem_pio2+0x26e>
 800b75a:	9b02      	ldr	r3, [sp, #8]
 800b75c:	2200      	movs	r2, #0
 800b75e:	3301      	adds	r3, #1
 800b760:	9302      	str	r3, [sp, #8]
 800b762:	4615      	mov	r5, r2
 800b764:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b768:	4294      	cmp	r4, r2
 800b76a:	f300 809f 	bgt.w	800b8ac <__kernel_rem_pio2+0x2f4>
 800b76e:	f1ba 0f00 	cmp.w	sl, #0
 800b772:	dd07      	ble.n	800b784 <__kernel_rem_pio2+0x1cc>
 800b774:	f1ba 0f01 	cmp.w	sl, #1
 800b778:	f000 80c1 	beq.w	800b8fe <__kernel_rem_pio2+0x346>
 800b77c:	f1ba 0f02 	cmp.w	sl, #2
 800b780:	f000 80c7 	beq.w	800b912 <__kernel_rem_pio2+0x35a>
 800b784:	f1bb 0f02 	cmp.w	fp, #2
 800b788:	d14d      	bne.n	800b826 <__kernel_rem_pio2+0x26e>
 800b78a:	4632      	mov	r2, r6
 800b78c:	463b      	mov	r3, r7
 800b78e:	4954      	ldr	r1, [pc, #336]	; (800b8e0 <__kernel_rem_pio2+0x328>)
 800b790:	2000      	movs	r0, #0
 800b792:	f7f4 fd79 	bl	8000288 <__aeabi_dsub>
 800b796:	4606      	mov	r6, r0
 800b798:	460f      	mov	r7, r1
 800b79a:	2d00      	cmp	r5, #0
 800b79c:	d043      	beq.n	800b826 <__kernel_rem_pio2+0x26e>
 800b79e:	4650      	mov	r0, sl
 800b7a0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800b8d0 <__kernel_rem_pio2+0x318>
 800b7a4:	f000 fa58 	bl	800bc58 <scalbn>
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	4639      	mov	r1, r7
 800b7ac:	ec53 2b10 	vmov	r2, r3, d0
 800b7b0:	f7f4 fd6a 	bl	8000288 <__aeabi_dsub>
 800b7b4:	4606      	mov	r6, r0
 800b7b6:	460f      	mov	r7, r1
 800b7b8:	e035      	b.n	800b826 <__kernel_rem_pio2+0x26e>
 800b7ba:	4b4a      	ldr	r3, [pc, #296]	; (800b8e4 <__kernel_rem_pio2+0x32c>)
 800b7bc:	2200      	movs	r2, #0
 800b7be:	4630      	mov	r0, r6
 800b7c0:	4639      	mov	r1, r7
 800b7c2:	f7f4 ff19 	bl	80005f8 <__aeabi_dmul>
 800b7c6:	f7f5 f9b1 	bl	8000b2c <__aeabi_d2iz>
 800b7ca:	f7f4 feab 	bl	8000524 <__aeabi_i2d>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	ec43 2b18 	vmov	d8, r2, r3
 800b7d6:	4b44      	ldr	r3, [pc, #272]	; (800b8e8 <__kernel_rem_pio2+0x330>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f7f4 ff0d 	bl	80005f8 <__aeabi_dmul>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	f7f4 fd4f 	bl	8000288 <__aeabi_dsub>
 800b7ea:	f7f5 f99f 	bl	8000b2c <__aeabi_d2iz>
 800b7ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b7f2:	f84b 0b04 	str.w	r0, [fp], #4
 800b7f6:	ec51 0b18 	vmov	r0, r1, d8
 800b7fa:	f7f4 fd47 	bl	800028c <__adddf3>
 800b7fe:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b802:	4606      	mov	r6, r0
 800b804:	460f      	mov	r7, r1
 800b806:	e75b      	b.n	800b6c0 <__kernel_rem_pio2+0x108>
 800b808:	d106      	bne.n	800b818 <__kernel_rem_pio2+0x260>
 800b80a:	1e63      	subs	r3, r4, #1
 800b80c:	aa0c      	add	r2, sp, #48	; 0x30
 800b80e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b812:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800b816:	e79d      	b.n	800b754 <__kernel_rem_pio2+0x19c>
 800b818:	4b34      	ldr	r3, [pc, #208]	; (800b8ec <__kernel_rem_pio2+0x334>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	f7f5 f972 	bl	8000b04 <__aeabi_dcmpge>
 800b820:	2800      	cmp	r0, #0
 800b822:	d140      	bne.n	800b8a6 <__kernel_rem_pio2+0x2ee>
 800b824:	4683      	mov	fp, r0
 800b826:	2200      	movs	r2, #0
 800b828:	2300      	movs	r3, #0
 800b82a:	4630      	mov	r0, r6
 800b82c:	4639      	mov	r1, r7
 800b82e:	f7f5 f94b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b832:	2800      	cmp	r0, #0
 800b834:	f000 80c1 	beq.w	800b9ba <__kernel_rem_pio2+0x402>
 800b838:	1e65      	subs	r5, r4, #1
 800b83a:	462b      	mov	r3, r5
 800b83c:	2200      	movs	r2, #0
 800b83e:	9900      	ldr	r1, [sp, #0]
 800b840:	428b      	cmp	r3, r1
 800b842:	da6d      	bge.n	800b920 <__kernel_rem_pio2+0x368>
 800b844:	2a00      	cmp	r2, #0
 800b846:	f000 808a 	beq.w	800b95e <__kernel_rem_pio2+0x3a6>
 800b84a:	ab0c      	add	r3, sp, #48	; 0x30
 800b84c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b850:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b854:	2b00      	cmp	r3, #0
 800b856:	f000 80ae 	beq.w	800b9b6 <__kernel_rem_pio2+0x3fe>
 800b85a:	4650      	mov	r0, sl
 800b85c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800b8d0 <__kernel_rem_pio2+0x318>
 800b860:	f000 f9fa 	bl	800bc58 <scalbn>
 800b864:	1c6b      	adds	r3, r5, #1
 800b866:	00da      	lsls	r2, r3, #3
 800b868:	9205      	str	r2, [sp, #20]
 800b86a:	ec57 6b10 	vmov	r6, r7, d0
 800b86e:	aa70      	add	r2, sp, #448	; 0x1c0
 800b870:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800b8e4 <__kernel_rem_pio2+0x32c>
 800b874:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800b878:	462c      	mov	r4, r5
 800b87a:	f04f 0800 	mov.w	r8, #0
 800b87e:	2c00      	cmp	r4, #0
 800b880:	f280 80d4 	bge.w	800ba2c <__kernel_rem_pio2+0x474>
 800b884:	462c      	mov	r4, r5
 800b886:	2c00      	cmp	r4, #0
 800b888:	f2c0 8102 	blt.w	800ba90 <__kernel_rem_pio2+0x4d8>
 800b88c:	4b18      	ldr	r3, [pc, #96]	; (800b8f0 <__kernel_rem_pio2+0x338>)
 800b88e:	461e      	mov	r6, r3
 800b890:	ab70      	add	r3, sp, #448	; 0x1c0
 800b892:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800b896:	1b2b      	subs	r3, r5, r4
 800b898:	f04f 0900 	mov.w	r9, #0
 800b89c:	f04f 0a00 	mov.w	sl, #0
 800b8a0:	2700      	movs	r7, #0
 800b8a2:	9306      	str	r3, [sp, #24]
 800b8a4:	e0e6      	b.n	800ba74 <__kernel_rem_pio2+0x4bc>
 800b8a6:	f04f 0b02 	mov.w	fp, #2
 800b8aa:	e756      	b.n	800b75a <__kernel_rem_pio2+0x1a2>
 800b8ac:	f8d8 3000 	ldr.w	r3, [r8]
 800b8b0:	bb05      	cbnz	r5, 800b8f4 <__kernel_rem_pio2+0x33c>
 800b8b2:	b123      	cbz	r3, 800b8be <__kernel_rem_pio2+0x306>
 800b8b4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b8b8:	f8c8 3000 	str.w	r3, [r8]
 800b8bc:	2301      	movs	r3, #1
 800b8be:	3201      	adds	r2, #1
 800b8c0:	f108 0804 	add.w	r8, r8, #4
 800b8c4:	461d      	mov	r5, r3
 800b8c6:	e74f      	b.n	800b768 <__kernel_rem_pio2+0x1b0>
	...
 800b8d4:	3ff00000 	.word	0x3ff00000
 800b8d8:	0800c0f8 	.word	0x0800c0f8
 800b8dc:	40200000 	.word	0x40200000
 800b8e0:	3ff00000 	.word	0x3ff00000
 800b8e4:	3e700000 	.word	0x3e700000
 800b8e8:	41700000 	.word	0x41700000
 800b8ec:	3fe00000 	.word	0x3fe00000
 800b8f0:	0800c0b8 	.word	0x0800c0b8
 800b8f4:	1acb      	subs	r3, r1, r3
 800b8f6:	f8c8 3000 	str.w	r3, [r8]
 800b8fa:	462b      	mov	r3, r5
 800b8fc:	e7df      	b.n	800b8be <__kernel_rem_pio2+0x306>
 800b8fe:	1e62      	subs	r2, r4, #1
 800b900:	ab0c      	add	r3, sp, #48	; 0x30
 800b902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b906:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b90a:	a90c      	add	r1, sp, #48	; 0x30
 800b90c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b910:	e738      	b.n	800b784 <__kernel_rem_pio2+0x1cc>
 800b912:	1e62      	subs	r2, r4, #1
 800b914:	ab0c      	add	r3, sp, #48	; 0x30
 800b916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b91a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b91e:	e7f4      	b.n	800b90a <__kernel_rem_pio2+0x352>
 800b920:	a90c      	add	r1, sp, #48	; 0x30
 800b922:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b926:	3b01      	subs	r3, #1
 800b928:	430a      	orrs	r2, r1
 800b92a:	e788      	b.n	800b83e <__kernel_rem_pio2+0x286>
 800b92c:	3301      	adds	r3, #1
 800b92e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b932:	2900      	cmp	r1, #0
 800b934:	d0fa      	beq.n	800b92c <__kernel_rem_pio2+0x374>
 800b936:	9a08      	ldr	r2, [sp, #32]
 800b938:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800b93c:	446a      	add	r2, sp
 800b93e:	3a98      	subs	r2, #152	; 0x98
 800b940:	9208      	str	r2, [sp, #32]
 800b942:	9a06      	ldr	r2, [sp, #24]
 800b944:	a920      	add	r1, sp, #128	; 0x80
 800b946:	18a2      	adds	r2, r4, r2
 800b948:	18e3      	adds	r3, r4, r3
 800b94a:	f104 0801 	add.w	r8, r4, #1
 800b94e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800b952:	9302      	str	r3, [sp, #8]
 800b954:	9b02      	ldr	r3, [sp, #8]
 800b956:	4543      	cmp	r3, r8
 800b958:	da04      	bge.n	800b964 <__kernel_rem_pio2+0x3ac>
 800b95a:	461c      	mov	r4, r3
 800b95c:	e6a2      	b.n	800b6a4 <__kernel_rem_pio2+0xec>
 800b95e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b960:	2301      	movs	r3, #1
 800b962:	e7e4      	b.n	800b92e <__kernel_rem_pio2+0x376>
 800b964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b966:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b96a:	f7f4 fddb 	bl	8000524 <__aeabi_i2d>
 800b96e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b974:	46ab      	mov	fp, r5
 800b976:	461c      	mov	r4, r3
 800b978:	f04f 0900 	mov.w	r9, #0
 800b97c:	2600      	movs	r6, #0
 800b97e:	2700      	movs	r7, #0
 800b980:	9b05      	ldr	r3, [sp, #20]
 800b982:	4599      	cmp	r9, r3
 800b984:	dd06      	ble.n	800b994 <__kernel_rem_pio2+0x3dc>
 800b986:	9b08      	ldr	r3, [sp, #32]
 800b988:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b98c:	f108 0801 	add.w	r8, r8, #1
 800b990:	9308      	str	r3, [sp, #32]
 800b992:	e7df      	b.n	800b954 <__kernel_rem_pio2+0x39c>
 800b994:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b998:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b99c:	f7f4 fe2c 	bl	80005f8 <__aeabi_dmul>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	4639      	mov	r1, r7
 800b9a8:	f7f4 fc70 	bl	800028c <__adddf3>
 800b9ac:	f109 0901 	add.w	r9, r9, #1
 800b9b0:	4606      	mov	r6, r0
 800b9b2:	460f      	mov	r7, r1
 800b9b4:	e7e4      	b.n	800b980 <__kernel_rem_pio2+0x3c8>
 800b9b6:	3d01      	subs	r5, #1
 800b9b8:	e747      	b.n	800b84a <__kernel_rem_pio2+0x292>
 800b9ba:	ec47 6b10 	vmov	d0, r6, r7
 800b9be:	f1ca 0000 	rsb	r0, sl, #0
 800b9c2:	f000 f949 	bl	800bc58 <scalbn>
 800b9c6:	ec57 6b10 	vmov	r6, r7, d0
 800b9ca:	4ba0      	ldr	r3, [pc, #640]	; (800bc4c <__kernel_rem_pio2+0x694>)
 800b9cc:	ee10 0a10 	vmov	r0, s0
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	4639      	mov	r1, r7
 800b9d4:	f7f5 f896 	bl	8000b04 <__aeabi_dcmpge>
 800b9d8:	b1f8      	cbz	r0, 800ba1a <__kernel_rem_pio2+0x462>
 800b9da:	4b9d      	ldr	r3, [pc, #628]	; (800bc50 <__kernel_rem_pio2+0x698>)
 800b9dc:	2200      	movs	r2, #0
 800b9de:	4630      	mov	r0, r6
 800b9e0:	4639      	mov	r1, r7
 800b9e2:	f7f4 fe09 	bl	80005f8 <__aeabi_dmul>
 800b9e6:	f7f5 f8a1 	bl	8000b2c <__aeabi_d2iz>
 800b9ea:	4680      	mov	r8, r0
 800b9ec:	f7f4 fd9a 	bl	8000524 <__aeabi_i2d>
 800b9f0:	4b96      	ldr	r3, [pc, #600]	; (800bc4c <__kernel_rem_pio2+0x694>)
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f7f4 fe00 	bl	80005f8 <__aeabi_dmul>
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	4639      	mov	r1, r7
 800b9fe:	4630      	mov	r0, r6
 800ba00:	f7f4 fc42 	bl	8000288 <__aeabi_dsub>
 800ba04:	f7f5 f892 	bl	8000b2c <__aeabi_d2iz>
 800ba08:	1c65      	adds	r5, r4, #1
 800ba0a:	ab0c      	add	r3, sp, #48	; 0x30
 800ba0c:	f10a 0a18 	add.w	sl, sl, #24
 800ba10:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ba14:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ba18:	e71f      	b.n	800b85a <__kernel_rem_pio2+0x2a2>
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	4639      	mov	r1, r7
 800ba1e:	f7f5 f885 	bl	8000b2c <__aeabi_d2iz>
 800ba22:	ab0c      	add	r3, sp, #48	; 0x30
 800ba24:	4625      	mov	r5, r4
 800ba26:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ba2a:	e716      	b.n	800b85a <__kernel_rem_pio2+0x2a2>
 800ba2c:	ab0c      	add	r3, sp, #48	; 0x30
 800ba2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ba32:	f7f4 fd77 	bl	8000524 <__aeabi_i2d>
 800ba36:	4632      	mov	r2, r6
 800ba38:	463b      	mov	r3, r7
 800ba3a:	f7f4 fddd 	bl	80005f8 <__aeabi_dmul>
 800ba3e:	4642      	mov	r2, r8
 800ba40:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ba44:	464b      	mov	r3, r9
 800ba46:	4630      	mov	r0, r6
 800ba48:	4639      	mov	r1, r7
 800ba4a:	f7f4 fdd5 	bl	80005f8 <__aeabi_dmul>
 800ba4e:	3c01      	subs	r4, #1
 800ba50:	4606      	mov	r6, r0
 800ba52:	460f      	mov	r7, r1
 800ba54:	e713      	b.n	800b87e <__kernel_rem_pio2+0x2c6>
 800ba56:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800ba5a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800ba5e:	f7f4 fdcb 	bl	80005f8 <__aeabi_dmul>
 800ba62:	4602      	mov	r2, r0
 800ba64:	460b      	mov	r3, r1
 800ba66:	4648      	mov	r0, r9
 800ba68:	4651      	mov	r1, sl
 800ba6a:	f7f4 fc0f 	bl	800028c <__adddf3>
 800ba6e:	3701      	adds	r7, #1
 800ba70:	4681      	mov	r9, r0
 800ba72:	468a      	mov	sl, r1
 800ba74:	9b00      	ldr	r3, [sp, #0]
 800ba76:	429f      	cmp	r7, r3
 800ba78:	dc02      	bgt.n	800ba80 <__kernel_rem_pio2+0x4c8>
 800ba7a:	9b06      	ldr	r3, [sp, #24]
 800ba7c:	429f      	cmp	r7, r3
 800ba7e:	ddea      	ble.n	800ba56 <__kernel_rem_pio2+0x49e>
 800ba80:	9a06      	ldr	r2, [sp, #24]
 800ba82:	ab48      	add	r3, sp, #288	; 0x120
 800ba84:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800ba88:	e9c6 9a00 	strd	r9, sl, [r6]
 800ba8c:	3c01      	subs	r4, #1
 800ba8e:	e6fa      	b.n	800b886 <__kernel_rem_pio2+0x2ce>
 800ba90:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ba92:	2b02      	cmp	r3, #2
 800ba94:	dc0b      	bgt.n	800baae <__kernel_rem_pio2+0x4f6>
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	dc39      	bgt.n	800bb0e <__kernel_rem_pio2+0x556>
 800ba9a:	d05d      	beq.n	800bb58 <__kernel_rem_pio2+0x5a0>
 800ba9c:	9b02      	ldr	r3, [sp, #8]
 800ba9e:	f003 0007 	and.w	r0, r3, #7
 800baa2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800baa6:	ecbd 8b02 	vpop	{d8}
 800baaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bab0:	2b03      	cmp	r3, #3
 800bab2:	d1f3      	bne.n	800ba9c <__kernel_rem_pio2+0x4e4>
 800bab4:	9b05      	ldr	r3, [sp, #20]
 800bab6:	9500      	str	r5, [sp, #0]
 800bab8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800babc:	eb0d 0403 	add.w	r4, sp, r3
 800bac0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800bac4:	46a2      	mov	sl, r4
 800bac6:	9b00      	ldr	r3, [sp, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	f1aa 0a08 	sub.w	sl, sl, #8
 800bace:	dc69      	bgt.n	800bba4 <__kernel_rem_pio2+0x5ec>
 800bad0:	46aa      	mov	sl, r5
 800bad2:	f1ba 0f01 	cmp.w	sl, #1
 800bad6:	f1a4 0408 	sub.w	r4, r4, #8
 800bada:	f300 8083 	bgt.w	800bbe4 <__kernel_rem_pio2+0x62c>
 800bade:	9c05      	ldr	r4, [sp, #20]
 800bae0:	ab48      	add	r3, sp, #288	; 0x120
 800bae2:	441c      	add	r4, r3
 800bae4:	2000      	movs	r0, #0
 800bae6:	2100      	movs	r1, #0
 800bae8:	2d01      	cmp	r5, #1
 800baea:	f300 809a 	bgt.w	800bc22 <__kernel_rem_pio2+0x66a>
 800baee:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800baf2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800baf6:	f1bb 0f00 	cmp.w	fp, #0
 800bafa:	f040 8098 	bne.w	800bc2e <__kernel_rem_pio2+0x676>
 800bafe:	9b04      	ldr	r3, [sp, #16]
 800bb00:	e9c3 7800 	strd	r7, r8, [r3]
 800bb04:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800bb08:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bb0c:	e7c6      	b.n	800ba9c <__kernel_rem_pio2+0x4e4>
 800bb0e:	9e05      	ldr	r6, [sp, #20]
 800bb10:	ab48      	add	r3, sp, #288	; 0x120
 800bb12:	441e      	add	r6, r3
 800bb14:	462c      	mov	r4, r5
 800bb16:	2000      	movs	r0, #0
 800bb18:	2100      	movs	r1, #0
 800bb1a:	2c00      	cmp	r4, #0
 800bb1c:	da33      	bge.n	800bb86 <__kernel_rem_pio2+0x5ce>
 800bb1e:	f1bb 0f00 	cmp.w	fp, #0
 800bb22:	d036      	beq.n	800bb92 <__kernel_rem_pio2+0x5da>
 800bb24:	4602      	mov	r2, r0
 800bb26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb2a:	9c04      	ldr	r4, [sp, #16]
 800bb2c:	e9c4 2300 	strd	r2, r3, [r4]
 800bb30:	4602      	mov	r2, r0
 800bb32:	460b      	mov	r3, r1
 800bb34:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800bb38:	f7f4 fba6 	bl	8000288 <__aeabi_dsub>
 800bb3c:	ae4a      	add	r6, sp, #296	; 0x128
 800bb3e:	2401      	movs	r4, #1
 800bb40:	42a5      	cmp	r5, r4
 800bb42:	da29      	bge.n	800bb98 <__kernel_rem_pio2+0x5e0>
 800bb44:	f1bb 0f00 	cmp.w	fp, #0
 800bb48:	d002      	beq.n	800bb50 <__kernel_rem_pio2+0x598>
 800bb4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb4e:	4619      	mov	r1, r3
 800bb50:	9b04      	ldr	r3, [sp, #16]
 800bb52:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bb56:	e7a1      	b.n	800ba9c <__kernel_rem_pio2+0x4e4>
 800bb58:	9c05      	ldr	r4, [sp, #20]
 800bb5a:	ab48      	add	r3, sp, #288	; 0x120
 800bb5c:	441c      	add	r4, r3
 800bb5e:	2000      	movs	r0, #0
 800bb60:	2100      	movs	r1, #0
 800bb62:	2d00      	cmp	r5, #0
 800bb64:	da09      	bge.n	800bb7a <__kernel_rem_pio2+0x5c2>
 800bb66:	f1bb 0f00 	cmp.w	fp, #0
 800bb6a:	d002      	beq.n	800bb72 <__kernel_rem_pio2+0x5ba>
 800bb6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb70:	4619      	mov	r1, r3
 800bb72:	9b04      	ldr	r3, [sp, #16]
 800bb74:	e9c3 0100 	strd	r0, r1, [r3]
 800bb78:	e790      	b.n	800ba9c <__kernel_rem_pio2+0x4e4>
 800bb7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bb7e:	f7f4 fb85 	bl	800028c <__adddf3>
 800bb82:	3d01      	subs	r5, #1
 800bb84:	e7ed      	b.n	800bb62 <__kernel_rem_pio2+0x5aa>
 800bb86:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800bb8a:	f7f4 fb7f 	bl	800028c <__adddf3>
 800bb8e:	3c01      	subs	r4, #1
 800bb90:	e7c3      	b.n	800bb1a <__kernel_rem_pio2+0x562>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	e7c8      	b.n	800bb2a <__kernel_rem_pio2+0x572>
 800bb98:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800bb9c:	f7f4 fb76 	bl	800028c <__adddf3>
 800bba0:	3401      	adds	r4, #1
 800bba2:	e7cd      	b.n	800bb40 <__kernel_rem_pio2+0x588>
 800bba4:	e9da 8900 	ldrd	r8, r9, [sl]
 800bba8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800bbac:	9b00      	ldr	r3, [sp, #0]
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	4632      	mov	r2, r6
 800bbb4:	463b      	mov	r3, r7
 800bbb6:	4640      	mov	r0, r8
 800bbb8:	4649      	mov	r1, r9
 800bbba:	f7f4 fb67 	bl	800028c <__adddf3>
 800bbbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	4640      	mov	r0, r8
 800bbc8:	4649      	mov	r1, r9
 800bbca:	f7f4 fb5d 	bl	8000288 <__aeabi_dsub>
 800bbce:	4632      	mov	r2, r6
 800bbd0:	463b      	mov	r3, r7
 800bbd2:	f7f4 fb5b 	bl	800028c <__adddf3>
 800bbd6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800bbda:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bbde:	ed8a 7b00 	vstr	d7, [sl]
 800bbe2:	e770      	b.n	800bac6 <__kernel_rem_pio2+0x50e>
 800bbe4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bbe8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800bbec:	4640      	mov	r0, r8
 800bbee:	4632      	mov	r2, r6
 800bbf0:	463b      	mov	r3, r7
 800bbf2:	4649      	mov	r1, r9
 800bbf4:	f7f4 fb4a 	bl	800028c <__adddf3>
 800bbf8:	e9cd 0100 	strd	r0, r1, [sp]
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	460b      	mov	r3, r1
 800bc00:	4640      	mov	r0, r8
 800bc02:	4649      	mov	r1, r9
 800bc04:	f7f4 fb40 	bl	8000288 <__aeabi_dsub>
 800bc08:	4632      	mov	r2, r6
 800bc0a:	463b      	mov	r3, r7
 800bc0c:	f7f4 fb3e 	bl	800028c <__adddf3>
 800bc10:	ed9d 7b00 	vldr	d7, [sp]
 800bc14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bc18:	ed84 7b00 	vstr	d7, [r4]
 800bc1c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bc20:	e757      	b.n	800bad2 <__kernel_rem_pio2+0x51a>
 800bc22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bc26:	f7f4 fb31 	bl	800028c <__adddf3>
 800bc2a:	3d01      	subs	r5, #1
 800bc2c:	e75c      	b.n	800bae8 <__kernel_rem_pio2+0x530>
 800bc2e:	9b04      	ldr	r3, [sp, #16]
 800bc30:	9a04      	ldr	r2, [sp, #16]
 800bc32:	601f      	str	r7, [r3, #0]
 800bc34:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800bc38:	605c      	str	r4, [r3, #4]
 800bc3a:	609d      	str	r5, [r3, #8]
 800bc3c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bc40:	60d3      	str	r3, [r2, #12]
 800bc42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc46:	6110      	str	r0, [r2, #16]
 800bc48:	6153      	str	r3, [r2, #20]
 800bc4a:	e727      	b.n	800ba9c <__kernel_rem_pio2+0x4e4>
 800bc4c:	41700000 	.word	0x41700000
 800bc50:	3e700000 	.word	0x3e700000
 800bc54:	00000000 	.word	0x00000000

0800bc58 <scalbn>:
 800bc58:	b570      	push	{r4, r5, r6, lr}
 800bc5a:	ec55 4b10 	vmov	r4, r5, d0
 800bc5e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bc62:	4606      	mov	r6, r0
 800bc64:	462b      	mov	r3, r5
 800bc66:	b999      	cbnz	r1, 800bc90 <scalbn+0x38>
 800bc68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bc6c:	4323      	orrs	r3, r4
 800bc6e:	d03f      	beq.n	800bcf0 <scalbn+0x98>
 800bc70:	4b35      	ldr	r3, [pc, #212]	; (800bd48 <scalbn+0xf0>)
 800bc72:	4629      	mov	r1, r5
 800bc74:	ee10 0a10 	vmov	r0, s0
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f7f4 fcbd 	bl	80005f8 <__aeabi_dmul>
 800bc7e:	4b33      	ldr	r3, [pc, #204]	; (800bd4c <scalbn+0xf4>)
 800bc80:	429e      	cmp	r6, r3
 800bc82:	4604      	mov	r4, r0
 800bc84:	460d      	mov	r5, r1
 800bc86:	da10      	bge.n	800bcaa <scalbn+0x52>
 800bc88:	a327      	add	r3, pc, #156	; (adr r3, 800bd28 <scalbn+0xd0>)
 800bc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8e:	e01f      	b.n	800bcd0 <scalbn+0x78>
 800bc90:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bc94:	4291      	cmp	r1, r2
 800bc96:	d10c      	bne.n	800bcb2 <scalbn+0x5a>
 800bc98:	ee10 2a10 	vmov	r2, s0
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	4629      	mov	r1, r5
 800bca0:	f7f4 faf4 	bl	800028c <__adddf3>
 800bca4:	4604      	mov	r4, r0
 800bca6:	460d      	mov	r5, r1
 800bca8:	e022      	b.n	800bcf0 <scalbn+0x98>
 800bcaa:	460b      	mov	r3, r1
 800bcac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bcb0:	3936      	subs	r1, #54	; 0x36
 800bcb2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800bcb6:	4296      	cmp	r6, r2
 800bcb8:	dd0d      	ble.n	800bcd6 <scalbn+0x7e>
 800bcba:	2d00      	cmp	r5, #0
 800bcbc:	a11c      	add	r1, pc, #112	; (adr r1, 800bd30 <scalbn+0xd8>)
 800bcbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcc2:	da02      	bge.n	800bcca <scalbn+0x72>
 800bcc4:	a11c      	add	r1, pc, #112	; (adr r1, 800bd38 <scalbn+0xe0>)
 800bcc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcca:	a319      	add	r3, pc, #100	; (adr r3, 800bd30 <scalbn+0xd8>)
 800bccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd0:	f7f4 fc92 	bl	80005f8 <__aeabi_dmul>
 800bcd4:	e7e6      	b.n	800bca4 <scalbn+0x4c>
 800bcd6:	1872      	adds	r2, r6, r1
 800bcd8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bcdc:	428a      	cmp	r2, r1
 800bcde:	dcec      	bgt.n	800bcba <scalbn+0x62>
 800bce0:	2a00      	cmp	r2, #0
 800bce2:	dd08      	ble.n	800bcf6 <scalbn+0x9e>
 800bce4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bce8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bcec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bcf0:	ec45 4b10 	vmov	d0, r4, r5
 800bcf4:	bd70      	pop	{r4, r5, r6, pc}
 800bcf6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bcfa:	da08      	bge.n	800bd0e <scalbn+0xb6>
 800bcfc:	2d00      	cmp	r5, #0
 800bcfe:	a10a      	add	r1, pc, #40	; (adr r1, 800bd28 <scalbn+0xd0>)
 800bd00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd04:	dac0      	bge.n	800bc88 <scalbn+0x30>
 800bd06:	a10e      	add	r1, pc, #56	; (adr r1, 800bd40 <scalbn+0xe8>)
 800bd08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd0c:	e7bc      	b.n	800bc88 <scalbn+0x30>
 800bd0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bd12:	3236      	adds	r2, #54	; 0x36
 800bd14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bd18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	4b0c      	ldr	r3, [pc, #48]	; (800bd50 <scalbn+0xf8>)
 800bd20:	2200      	movs	r2, #0
 800bd22:	e7d5      	b.n	800bcd0 <scalbn+0x78>
 800bd24:	f3af 8000 	nop.w
 800bd28:	c2f8f359 	.word	0xc2f8f359
 800bd2c:	01a56e1f 	.word	0x01a56e1f
 800bd30:	8800759c 	.word	0x8800759c
 800bd34:	7e37e43c 	.word	0x7e37e43c
 800bd38:	8800759c 	.word	0x8800759c
 800bd3c:	fe37e43c 	.word	0xfe37e43c
 800bd40:	c2f8f359 	.word	0xc2f8f359
 800bd44:	81a56e1f 	.word	0x81a56e1f
 800bd48:	43500000 	.word	0x43500000
 800bd4c:	ffff3cb0 	.word	0xffff3cb0
 800bd50:	3c900000 	.word	0x3c900000
 800bd54:	00000000 	.word	0x00000000

0800bd58 <floor>:
 800bd58:	ec51 0b10 	vmov	r0, r1, d0
 800bd5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd64:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800bd68:	2e13      	cmp	r6, #19
 800bd6a:	ee10 5a10 	vmov	r5, s0
 800bd6e:	ee10 8a10 	vmov	r8, s0
 800bd72:	460c      	mov	r4, r1
 800bd74:	dc31      	bgt.n	800bdda <floor+0x82>
 800bd76:	2e00      	cmp	r6, #0
 800bd78:	da14      	bge.n	800bda4 <floor+0x4c>
 800bd7a:	a333      	add	r3, pc, #204	; (adr r3, 800be48 <floor+0xf0>)
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	f7f4 fa84 	bl	800028c <__adddf3>
 800bd84:	2200      	movs	r2, #0
 800bd86:	2300      	movs	r3, #0
 800bd88:	f7f4 fec6 	bl	8000b18 <__aeabi_dcmpgt>
 800bd8c:	b138      	cbz	r0, 800bd9e <floor+0x46>
 800bd8e:	2c00      	cmp	r4, #0
 800bd90:	da53      	bge.n	800be3a <floor+0xe2>
 800bd92:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800bd96:	4325      	orrs	r5, r4
 800bd98:	d052      	beq.n	800be40 <floor+0xe8>
 800bd9a:	4c2d      	ldr	r4, [pc, #180]	; (800be50 <floor+0xf8>)
 800bd9c:	2500      	movs	r5, #0
 800bd9e:	4621      	mov	r1, r4
 800bda0:	4628      	mov	r0, r5
 800bda2:	e024      	b.n	800bdee <floor+0x96>
 800bda4:	4f2b      	ldr	r7, [pc, #172]	; (800be54 <floor+0xfc>)
 800bda6:	4137      	asrs	r7, r6
 800bda8:	ea01 0307 	and.w	r3, r1, r7
 800bdac:	4303      	orrs	r3, r0
 800bdae:	d01e      	beq.n	800bdee <floor+0x96>
 800bdb0:	a325      	add	r3, pc, #148	; (adr r3, 800be48 <floor+0xf0>)
 800bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb6:	f7f4 fa69 	bl	800028c <__adddf3>
 800bdba:	2200      	movs	r2, #0
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	f7f4 feab 	bl	8000b18 <__aeabi_dcmpgt>
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	d0eb      	beq.n	800bd9e <floor+0x46>
 800bdc6:	2c00      	cmp	r4, #0
 800bdc8:	bfbe      	ittt	lt
 800bdca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bdce:	4133      	asrlt	r3, r6
 800bdd0:	18e4      	addlt	r4, r4, r3
 800bdd2:	ea24 0407 	bic.w	r4, r4, r7
 800bdd6:	2500      	movs	r5, #0
 800bdd8:	e7e1      	b.n	800bd9e <floor+0x46>
 800bdda:	2e33      	cmp	r6, #51	; 0x33
 800bddc:	dd0b      	ble.n	800bdf6 <floor+0x9e>
 800bdde:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bde2:	d104      	bne.n	800bdee <floor+0x96>
 800bde4:	ee10 2a10 	vmov	r2, s0
 800bde8:	460b      	mov	r3, r1
 800bdea:	f7f4 fa4f 	bl	800028c <__adddf3>
 800bdee:	ec41 0b10 	vmov	d0, r0, r1
 800bdf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800bdfa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bdfe:	40df      	lsrs	r7, r3
 800be00:	4238      	tst	r0, r7
 800be02:	d0f4      	beq.n	800bdee <floor+0x96>
 800be04:	a310      	add	r3, pc, #64	; (adr r3, 800be48 <floor+0xf0>)
 800be06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0a:	f7f4 fa3f 	bl	800028c <__adddf3>
 800be0e:	2200      	movs	r2, #0
 800be10:	2300      	movs	r3, #0
 800be12:	f7f4 fe81 	bl	8000b18 <__aeabi_dcmpgt>
 800be16:	2800      	cmp	r0, #0
 800be18:	d0c1      	beq.n	800bd9e <floor+0x46>
 800be1a:	2c00      	cmp	r4, #0
 800be1c:	da0a      	bge.n	800be34 <floor+0xdc>
 800be1e:	2e14      	cmp	r6, #20
 800be20:	d101      	bne.n	800be26 <floor+0xce>
 800be22:	3401      	adds	r4, #1
 800be24:	e006      	b.n	800be34 <floor+0xdc>
 800be26:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800be2a:	2301      	movs	r3, #1
 800be2c:	40b3      	lsls	r3, r6
 800be2e:	441d      	add	r5, r3
 800be30:	45a8      	cmp	r8, r5
 800be32:	d8f6      	bhi.n	800be22 <floor+0xca>
 800be34:	ea25 0507 	bic.w	r5, r5, r7
 800be38:	e7b1      	b.n	800bd9e <floor+0x46>
 800be3a:	2500      	movs	r5, #0
 800be3c:	462c      	mov	r4, r5
 800be3e:	e7ae      	b.n	800bd9e <floor+0x46>
 800be40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800be44:	e7ab      	b.n	800bd9e <floor+0x46>
 800be46:	bf00      	nop
 800be48:	8800759c 	.word	0x8800759c
 800be4c:	7e37e43c 	.word	0x7e37e43c
 800be50:	bff00000 	.word	0xbff00000
 800be54:	000fffff 	.word	0x000fffff

0800be58 <_init>:
 800be58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5a:	bf00      	nop
 800be5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be5e:	bc08      	pop	{r3}
 800be60:	469e      	mov	lr, r3
 800be62:	4770      	bx	lr

0800be64 <_fini>:
 800be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be66:	bf00      	nop
 800be68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6a:	bc08      	pop	{r3}
 800be6c:	469e      	mov	lr, r3
 800be6e:	4770      	bx	lr
