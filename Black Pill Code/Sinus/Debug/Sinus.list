
Sinus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800d888  0800d888  0001d888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db20  0800db20  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800db20  0800db20  0001db20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db28  0800db28  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db28  0800db28  0001db28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db2c  0800db2c  0001db2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800db30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fe0  20000150  0800dc80  00020150  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003130  0800dc80  00023130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ca22  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f2b  00000000  00000000  0003cbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001980  00000000  00000000  00040b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013e7  00000000  00000000  00042490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bb5b  00000000  00000000  00043877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020824  00000000  00000000  0005f3d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a288d  00000000  00000000  0007fbf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000762c  00000000  00000000  00122484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00129ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d870 	.word	0x0800d870

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	0800d870 	.word	0x0800d870

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b970 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	460f      	mov	r7, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4694      	mov	ip, r2
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0xe2>
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	b143      	cbz	r3, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	f1c3 0220 	rsb	r2, r3, #32
 8000c10:	409f      	lsls	r7, r3
 8000c12:	fa20 f202 	lsr.w	r2, r0, r2
 8000c16:	4317      	orrs	r7, r2
 8000c18:	409c      	lsls	r4, r3
 8000c1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1e:	fa1f f58c 	uxth.w	r5, ip
 8000c22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c26:	0c22      	lsrs	r2, r4, #16
 8000c28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c30:	fb01 f005 	mul.w	r0, r1, r5
 8000c34:	4290      	cmp	r0, r2
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c38:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c40:	f080 811c 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f240 8119 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	4462      	add	r2, ip
 8000c4e:	1a12      	subs	r2, r2, r0
 8000c50:	b2a4      	uxth	r4, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5e:	fb00 f505 	mul.w	r5, r0, r5
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x90>
 8000c66:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6e:	f080 8107 	bcs.w	8000e80 <__udivmoddi4+0x294>
 8000c72:	42a5      	cmp	r5, r4
 8000c74:	f240 8104 	bls.w	8000e80 <__udivmoddi4+0x294>
 8000c78:	4464      	add	r4, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11e      	cbz	r6, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40dc      	lsrs	r4, r3
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0xbc>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80ed 	beq.w	8000e76 <__udivmoddi4+0x28a>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d149      	bne.n	8000d44 <__udivmoddi4+0x158>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	d302      	bcc.n	8000cba <__udivmoddi4+0xce>
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	f200 80f8 	bhi.w	8000eaa <__udivmoddi4+0x2be>
 8000cba:	1a84      	subs	r4, r0, r2
 8000cbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d0e2      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000ccc:	e7df      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xe6>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cdc:	1a8a      	subs	r2, r1, r2
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cec:	fb07 2015 	mls	r0, r7, r5, r2
 8000cf0:	0c22      	lsrs	r2, r4, #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb0e f005 	mul.w	r0, lr, r5
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000cfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000d02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2b8>
 8000d0e:	4645      	mov	r5, r8
 8000d10:	1a12      	subs	r2, r2, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d18:	fb07 2210 	mls	r2, r7, r0, r2
 8000d1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x14e>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x14c>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2c2>
 8000d38:	4610      	mov	r0, r2
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d42:	e79f      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d44:	f1c1 0720 	rsb	r7, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa05 f401 	lsl.w	r4, r5, r1
 8000d56:	fa20 f307 	lsr.w	r3, r0, r7
 8000d5a:	40fd      	lsrs	r5, r7
 8000d5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d74:	fb08 f50e 	mul.w	r5, r8, lr
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4464      	add	r4, ip
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	b29d      	uxth	r5, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2ac>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2ac>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	4464      	add	r4, ip
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fba3 9502 	umull	r9, r5, r3, r2
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	42ac      	cmp	r4, r5
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46ae      	mov	lr, r5
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x29c>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x298>
 8000ddc:	b156      	cbz	r6, 8000df4 <__udivmoddi4+0x208>
 8000dde:	ebb0 0208 	subs.w	r2, r0, r8
 8000de2:	eb64 040e 	sbc.w	r4, r4, lr
 8000de6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dea:	40ca      	lsrs	r2, r1
 8000dec:	40cc      	lsrs	r4, r1
 8000dee:	4317      	orrs	r7, r2
 8000df0:	e9c6 7400 	strd	r7, r4, [r6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfc:	f1c3 0120 	rsb	r1, r3, #32
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	fa20 f201 	lsr.w	r2, r0, r1
 8000e08:	fa25 f101 	lsr.w	r1, r5, r1
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	432a      	orrs	r2, r5
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e20:	0c11      	lsrs	r1, r2, #16
 8000e22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e26:	fb00 f50e 	mul.w	r5, r0, lr
 8000e2a:	428d      	cmp	r5, r1
 8000e2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x258>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1b49      	subs	r1, r1, r5
 8000e46:	b292      	uxth	r2, r2
 8000e48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	fb05 f10e 	mul.w	r1, r5, lr
 8000e58:	4291      	cmp	r1, r2
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x282>
 8000e5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e6a:	3d02      	subs	r5, #2
 8000e6c:	4462      	add	r2, ip
 8000e6e:	1a52      	subs	r2, r2, r1
 8000e70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0xfc>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e708      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000e7c:	4639      	mov	r1, r7
 8000e7e:	e6e6      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e80:	4610      	mov	r0, r2
 8000e82:	e6fb      	b.n	8000c7c <__udivmoddi4+0x90>
 8000e84:	4548      	cmp	r0, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e90:	3b01      	subs	r3, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e94:	4645      	mov	r5, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x282>
 8000e98:	462b      	mov	r3, r5
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x258>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea4:	3d02      	subs	r5, #2
 8000ea6:	4462      	add	r2, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e70a      	b.n	8000cc4 <__udivmoddi4+0xd8>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x14e>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <HAL_I2C_ListenCpltCallback>:
static void MX_I2C1_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

extern void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef *hi2c)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f001 ffc8 	bl	8002e56 <HAL_I2C_EnableListen_IT>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_I2C_AddrCallback>:

extern void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	70fb      	strb	r3, [r7, #3]
 8000edc:	4613      	mov	r3, r2
 8000ede:	803b      	strh	r3, [r7, #0]
	if(TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8000ee0:	78fb      	ldrb	r3, [r7, #3]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d112      	bne.n	8000f0c <HAL_I2C_AddrCallback+0x3c>
	{
		HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData, 6, I2C_FIRST_AND_LAST_FRAME);
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	2206      	movs	r2, #6
 8000eea:	490b      	ldr	r1, [pc, #44]	; (8000f18 <HAL_I2C_AddrCallback+0x48>)
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f001 ff3f 	bl	8002d70 <HAL_I2C_Slave_Seq_Receive_IT>
		WantedRPM = RxData[0] * 49 + 100;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <HAL_I2C_AddrCallback+0x48>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4613      	mov	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	1a9b      	subs	r3, r3, r2
 8000efe:	00da      	lsls	r2, r3, #3
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	3364      	adds	r3, #100	; 0x64
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_I2C_AddrCallback+0x4c>)
 8000f08:	601a      	str	r2, [r3, #0]
	}
	else  // master requesting the data is not supported yet
	{
		Error_Handler();
	}
}
 8000f0a:	e001      	b.n	8000f10 <HAL_I2C_AddrCallback+0x40>
		Error_Handler();
 8000f0c:	f000 fbee 	bl	80016ec <Error_Handler>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000388 	.word	0x20000388
 8000f1c:	20000000 	.word	0x20000000

08000f20 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	count++;
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_I2C_SlaveRxCpltCallback+0x20>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_I2C_SlaveRxCpltCallback+0x20>)
 8000f32:	801a      	strh	r2, [r3, #0]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000384 	.word	0x20000384

08000f44 <HAL_I2C_ErrorCallback>:


void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f001 ff82 	bl	8002e56 <HAL_I2C_EnableListen_IT>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	0000      	movs	r0, r0
 8000f5c:	0000      	movs	r0, r0
	...

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f66:	f000 ffb3 	bl	8001ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6a:	f000 f8c3 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6e:	f000 fb35 	bl	80015dc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f72:	f000 f929 	bl	80011c8 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000f76:	f000 f9a7 	bl	80012c8 <MX_SPI1_Init>
  MX_TIM9_Init();
 8000f7a:	f000 fa77 	bl	800146c <MX_TIM9_Init>
  MX_TIM10_Init();
 8000f7e:	f000 fab9 	bl	80014f4 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8000f82:	f000 fb01 	bl	8001588 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000f86:	f00a fa69 	bl	800b45c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000f8a:	f000 f96f 	bl	800126c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f8e:	f000 f9d1 	bl	8001334 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

    HAL_I2C_EnableListen_IT(&hi2c1);
 8000f92:	484b      	ldr	r0, [pc, #300]	; (80010c0 <main+0x160>)
 8000f94:	f001 ff5f 	bl	8002e56 <HAL_I2C_EnableListen_IT>

    // Activate necessary timers.
  	HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_1);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	484a      	ldr	r0, [pc, #296]	; (80010c4 <main+0x164>)
 8000f9c:	f005 fc78 	bl	8006890 <HAL_TIM_OC_Start>
  	HAL_TIM_OC_Start(&htim10, TIM_CHANNEL_1);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4849      	ldr	r0, [pc, #292]	; (80010c8 <main+0x168>)
 8000fa4:	f005 fc74 	bl	8006890 <HAL_TIM_OC_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4848      	ldr	r0, [pc, #288]	; (80010cc <main+0x16c>)
 8000fac:	f005 fd70 	bl	8006a90 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	4846      	ldr	r0, [pc, #280]	; (80010cc <main+0x16c>)
 8000fb4:	f005 fd6c 	bl	8006a90 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000fb8:	2108      	movs	r1, #8
 8000fba:	4844      	ldr	r0, [pc, #272]	; (80010cc <main+0x16c>)
 8000fbc:	f005 fd68 	bl	8006a90 <HAL_TIM_PWM_Start>

  	// Start Interrupts
  	HAL_TIM_Base_Start_IT(&htim9);
 8000fc0:	4840      	ldr	r0, [pc, #256]	; (80010c4 <main+0x164>)
 8000fc2:	f005 fbb3 	bl	800672c <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim10);
 8000fc6:	4840      	ldr	r0, [pc, #256]	; (80010c8 <main+0x168>)
 8000fc8:	f005 fbb0 	bl	800672c <HAL_TIM_Base_Start_IT>

  	// Fill sintab array
	for (int i = 0; i < AANTAL_TIJDSTAPPEN; i++) {
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	e038      	b.n	8001044 <main+0xe4>
		sintab[i] = sin(i*2*M_PI/AANTAL_TIJDSTAPPEN) * 0.5 + 0.5;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff faa4 	bl	8000524 <__aeabi_i2d>
 8000fdc:	a336      	add	r3, pc, #216	; (adr r3, 80010b8 <main+0x158>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff fb09 	bl	80005f8 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8000ff6:	f7ff fc29 	bl	800084c <__aeabi_ddiv>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	ec43 2b17 	vmov	d7, r2, r3
 8001002:	eeb0 0a47 	vmov.f32	s0, s14
 8001006:	eef0 0a67 	vmov.f32	s1, s15
 800100a:	f00b fbf1 	bl	800c7f0 <sin>
 800100e:	ec51 0b10 	vmov	r0, r1, d0
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <main+0x170>)
 8001018:	f7ff faee 	bl	80005f8 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <main+0x170>)
 800102a:	f7ff f92f 	bl	800028c <__adddf3>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4828      	ldr	r0, [pc, #160]	; (80010d4 <main+0x174>)
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	00c9      	lsls	r1, r1, #3
 8001038:	4401      	add	r1, r0
 800103a:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < AANTAL_TIJDSTAPPEN; i++) {
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3301      	adds	r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800104a:	dbc2      	blt.n	8000fd2 <main+0x72>
	}

	// Enable Gate Drivers.
	GPIOC->ODR = 0xE000;
 800104c:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <main+0x178>)
 800104e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001052:	615a      	str	r2, [r3, #20]
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	WantedRPM = HAL_ADC_GetValue(&hadc1);
	*/

	// Keep RPM to the minimum set in main.h.
	if (WantedRPM < MinimumRPM) {
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <main+0x17c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b63      	cmp	r3, #99	; 0x63
 800105a:	d802      	bhi.n	8001062 <main+0x102>
		WantedRPM = MinimumRPM;
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <main+0x17c>)
 800105e:	2264      	movs	r2, #100	; 0x64
 8001060:	601a      	str	r2, [r3, #0]
	}

	// Set PSC to appropriate value for RPM
	TIM10->PSC = (15 * Fapb2clk) / (256 * WantedRPM) - 1;
 8001062:	f005 fa77 	bl	8006554 <HAL_RCC_GetPCLK2Freq>
 8001066:	4602      	mov	r2, r0
 8001068:	4613      	mov	r3, r2
 800106a:	011b      	lsls	r3, r3, #4
 800106c:	1a9b      	subs	r3, r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	461a      	mov	r2, r3
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <main+0x17c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	fbb2 f3f3 	udiv	r3, r2, r3
 800107c:	4a18      	ldr	r2, [pc, #96]	; (80010e0 <main+0x180>)
 800107e:	3b01      	subs	r3, #1
 8001080:	6293      	str	r3, [r2, #40]	; 0x28

	// Send RPM data to PC
	len = snprintf(buf, sizeof(buf), "\n\rWanted RPM / Current RPM: %lu / %lu", WantedRPM, CurrentRPM);
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <main+0x17c>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <main+0x184>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	4613      	mov	r3, r2
 800108e:	4a16      	ldr	r2, [pc, #88]	; (80010e8 <main+0x188>)
 8001090:	2140      	movs	r1, #64	; 0x40
 8001092:	4816      	ldr	r0, [pc, #88]	; (80010ec <main+0x18c>)
 8001094:	f00a fef2 	bl	800be7c <sniprintf>
 8001098:	4603      	mov	r3, r0
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <main+0x190>)
 800109e:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS((uint8_t *) buf, len);
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <main+0x190>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	4811      	ldr	r0, [pc, #68]	; (80010ec <main+0x18c>)
 80010a8:	f00a fa96 	bl	800b5d8 <CDC_Transmit_FS>
	HAL_Delay(10);
 80010ac:	200a      	movs	r0, #10
 80010ae:	f000 ff81 	bl	8001fb4 <HAL_Delay>
	if (WantedRPM < MinimumRPM) {
 80010b2:	e7cf      	b.n	8001054 <main+0xf4>
 80010b4:	f3af 8000 	nop.w
 80010b8:	54442d18 	.word	0x54442d18
 80010bc:	400921fb 	.word	0x400921fb
 80010c0:	200001b4 	.word	0x200001b4
 80010c4:	200002a8 	.word	0x200002a8
 80010c8:	200002f0 	.word	0x200002f0
 80010cc:	20000260 	.word	0x20000260
 80010d0:	3fe00000 	.word	0x3fe00000
 80010d4:	20000390 	.word	0x20000390
 80010d8:	40020800 	.word	0x40020800
 80010dc:	20000000 	.word	0x20000000
 80010e0:	40014400 	.word	0x40014400
 80010e4:	20000380 	.word	0x20000380
 80010e8:	0800d888 	.word	0x0800d888
 80010ec:	20001390 	.word	0x20001390
 80010f0:	2000037c 	.word	0x2000037c

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	; 0x50
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	2230      	movs	r2, #48	; 0x30
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f00a feee 	bl	800bee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <SystemClock_Config+0xcc>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <SystemClock_Config+0xcc>)
 8001122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001126:	6413      	str	r3, [r2, #64]	; 0x40
 8001128:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <SystemClock_Config+0xcc>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <SystemClock_Config+0xd0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <SystemClock_Config+0xd0>)
 800113e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <SystemClock_Config+0xd0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001150:	2301      	movs	r3, #1
 8001152:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001154:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001164:	2319      	movs	r3, #25
 8001166:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001168:	23c0      	movs	r3, #192	; 0xc0
 800116a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800116c:	2302      	movs	r3, #2
 800116e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001170:	2304      	movs	r3, #4
 8001172:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fda7 	bl	8005ccc <HAL_RCC_OscConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001184:	f000 fab2 	bl	80016ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001188:	230f      	movs	r3, #15
 800118a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118c:	2302      	movs	r3, #2
 800118e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001198:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	2103      	movs	r1, #3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f005 f808 	bl	80061bc <HAL_RCC_ClockConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011b2:	f000 fa9b 	bl	80016ec <Error_Handler>
  }
}
 80011b6:	bf00      	nop
 80011b8:	3750      	adds	r7, #80	; 0x50
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40007000 	.word	0x40007000

080011c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ce:	463b      	mov	r3, r7
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <MX_ADC1_Init+0x98>)
 80011dc:	4a21      	ldr	r2, [pc, #132]	; (8001264 <MX_ADC1_Init+0x9c>)
 80011de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <MX_ADC1_Init+0x98>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <MX_ADC1_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <MX_ADC1_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011f2:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <MX_ADC1_Init+0x98>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <MX_ADC1_Init+0x98>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <MX_ADC1_Init+0x98>)
 8001202:	2200      	movs	r2, #0
 8001204:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <MX_ADC1_Init+0x98>)
 8001208:	4a17      	ldr	r2, [pc, #92]	; (8001268 <MX_ADC1_Init+0xa0>)
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_ADC1_Init+0x98>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_ADC1_Init+0x98>)
 8001214:	2201      	movs	r2, #1
 8001216:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_ADC1_Init+0x98>)
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_ADC1_Init+0x98>)
 8001222:	2201      	movs	r2, #1
 8001224:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001226:	480e      	ldr	r0, [pc, #56]	; (8001260 <MX_ADC1_Init+0x98>)
 8001228:	f000 fee8 	bl	8001ffc <HAL_ADC_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001232:	f000 fa5b 	bl	80016ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001236:	2304      	movs	r3, #4
 8001238:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800123a:	2301      	movs	r3, #1
 800123c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001242:	463b      	mov	r3, r7
 8001244:	4619      	mov	r1, r3
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <MX_ADC1_Init+0x98>)
 8001248:	f000 ff1c 	bl	8002084 <HAL_ADC_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001252:	f000 fa4b 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000016c 	.word	0x2000016c
 8001264:	40012000 	.word	0x40012000
 8001268:	0f000001 	.word	0x0f000001

0800126c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <MX_I2C1_Init+0x50>)
 8001272:	4a13      	ldr	r2, [pc, #76]	; (80012c0 <MX_I2C1_Init+0x54>)
 8001274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_I2C1_Init+0x50>)
 8001278:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <MX_I2C1_Init+0x58>)
 800127a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MX_I2C1_Init+0x50>)
 8001284:	2220      	movs	r2, #32
 8001286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <MX_I2C1_Init+0x50>)
 800128a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800128e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <MX_I2C1_Init+0x50>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_I2C1_Init+0x50>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <MX_I2C1_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_I2C1_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <MX_I2C1_Init+0x50>)
 80012aa:	f001 fc1d 	bl	8002ae8 <HAL_I2C_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012b4:	f000 fa1a 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200001b4 	.word	0x200001b4
 80012c0:	40005400 	.word	0x40005400
 80012c4:	000186a0 	.word	0x000186a0

080012c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <MX_SPI1_Init+0x64>)
 80012ce:	4a18      	ldr	r2, [pc, #96]	; (8001330 <MX_SPI1_Init+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_SPI1_Init+0x64>)
 80012d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_SPI1_Init+0x64>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <MX_SPI1_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_SPI1_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_SPI1_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_SPI1_Init+0x64>)
 80012f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_SPI1_Init+0x64>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <MX_SPI1_Init+0x64>)
 8001302:	2200      	movs	r2, #0
 8001304:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_SPI1_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <MX_SPI1_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_SPI1_Init+0x64>)
 8001314:	220a      	movs	r2, #10
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001318:	4804      	ldr	r0, [pc, #16]	; (800132c <MX_SPI1_Init+0x64>)
 800131a:	f005 f92f 	bl	800657c <HAL_SPI_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001324:	f000 f9e2 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000208 	.word	0x20000208
 8001330:	40013000 	.word	0x40013000

08001334 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b092      	sub	sp, #72	; 0x48
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
 8001354:	615a      	str	r2, [r3, #20]
 8001356:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2220      	movs	r2, #32
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f00a fdc0 	bl	800bee4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001364:	4b3f      	ldr	r3, [pc, #252]	; (8001464 <MX_TIM1_Init+0x130>)
 8001366:	4a40      	ldr	r2, [pc, #256]	; (8001468 <MX_TIM1_Init+0x134>)
 8001368:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800136a:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <MX_TIM1_Init+0x130>)
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001370:	4b3c      	ldr	r3, [pc, #240]	; (8001464 <MX_TIM1_Init+0x130>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 8001376:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <MX_TIM1_Init+0x130>)
 8001378:	f240 727f 	movw	r2, #1919	; 0x77f
 800137c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137e:	4b39      	ldr	r3, [pc, #228]	; (8001464 <MX_TIM1_Init+0x130>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001384:	4b37      	ldr	r3, [pc, #220]	; (8001464 <MX_TIM1_Init+0x130>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138a:	4b36      	ldr	r3, [pc, #216]	; (8001464 <MX_TIM1_Init+0x130>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001390:	4834      	ldr	r0, [pc, #208]	; (8001464 <MX_TIM1_Init+0x130>)
 8001392:	f005 fb2d 	bl	80069f0 <HAL_TIM_PWM_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800139c:	f000 f9a6 	bl	80016ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013ac:	4619      	mov	r1, r3
 80013ae:	482d      	ldr	r0, [pc, #180]	; (8001464 <MX_TIM1_Init+0x130>)
 80013b0:	f006 f8a8 	bl	8007504 <HAL_TIMEx_MasterConfigSynchronization>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80013ba:	f000 f997 	bl	80016ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013be:	2360      	movs	r3, #96	; 0x60
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013ca:	2300      	movs	r3, #0
 80013cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	2200      	movs	r2, #0
 80013e0:	4619      	mov	r1, r3
 80013e2:	4820      	ldr	r0, [pc, #128]	; (8001464 <MX_TIM1_Init+0x130>)
 80013e4:	f005 fd68 	bl	8006eb8 <HAL_TIM_PWM_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80013ee:	f000 f97d 	bl	80016ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f6:	2204      	movs	r2, #4
 80013f8:	4619      	mov	r1, r3
 80013fa:	481a      	ldr	r0, [pc, #104]	; (8001464 <MX_TIM1_Init+0x130>)
 80013fc:	f005 fd5c 	bl	8006eb8 <HAL_TIM_PWM_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001406:	f000 f971 	bl	80016ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800140a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140e:	2208      	movs	r2, #8
 8001410:	4619      	mov	r1, r3
 8001412:	4814      	ldr	r0, [pc, #80]	; (8001464 <MX_TIM1_Init+0x130>)
 8001414:	f005 fd50 	bl	8006eb8 <HAL_TIM_PWM_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800141e:	f000 f965 	bl	80016ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	4619      	mov	r1, r3
 8001444:	4807      	ldr	r0, [pc, #28]	; (8001464 <MX_TIM1_Init+0x130>)
 8001446:	f006 f8cb 	bl	80075e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001450:	f000 f94c 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001454:	4803      	ldr	r0, [pc, #12]	; (8001464 <MX_TIM1_Init+0x130>)
 8001456:	f000 fafb 	bl	8001a50 <HAL_TIM_MspPostInit>

}
 800145a:	bf00      	nop
 800145c:	3748      	adds	r7, #72	; 0x48
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000260 	.word	0x20000260
 8001468:	40010000 	.word	0x40010000

0800146c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
 8001480:	615a      	str	r2, [r3, #20]
 8001482:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <MX_TIM9_Init+0x80>)
 8001486:	4a1a      	ldr	r2, [pc, #104]	; (80014f0 <MX_TIM9_Init+0x84>)
 8001488:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1199;
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_TIM9_Init+0x80>)
 800148c:	f240 42af 	movw	r2, #1199	; 0x4af
 8001490:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <MX_TIM9_Init+0x80>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_TIM9_Init+0x80>)
 800149a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800149e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_TIM9_Init+0x80>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_TIM9_Init+0x80>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 80014ac:	480f      	ldr	r0, [pc, #60]	; (80014ec <MX_TIM9_Init+0x80>)
 80014ae:	f005 f99f 	bl	80067f0 <HAL_TIM_OC_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 80014b8:	f000 f918 	bl	80016ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	2200      	movs	r2, #0
 80014d0:	4619      	mov	r1, r3
 80014d2:	4806      	ldr	r0, [pc, #24]	; (80014ec <MX_TIM9_Init+0x80>)
 80014d4:	f005 fc94 	bl	8006e00 <HAL_TIM_OC_ConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 80014de:	f000 f905 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	3720      	adds	r7, #32
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200002a8 	.word	0x200002a8
 80014f0:	40014000 	.word	0x40014000

080014f4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	615a      	str	r2, [r3, #20]
 800150a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <MX_TIM10_Init+0x8c>)
 800150e:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <MX_TIM10_Init+0x90>)
 8001510:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 65535;
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <MX_TIM10_Init+0x8c>)
 8001514:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001518:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <MX_TIM10_Init+0x8c>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1;
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <MX_TIM10_Init+0x8c>)
 8001522:	2201      	movs	r2, #1
 8001524:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <MX_TIM10_Init+0x8c>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_TIM10_Init+0x8c>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001532:	4813      	ldr	r0, [pc, #76]	; (8001580 <MX_TIM10_Init+0x8c>)
 8001534:	f005 f8ab 	bl	800668e <HAL_TIM_Base_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800153e:	f000 f8d5 	bl	80016ec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8001542:	480f      	ldr	r0, [pc, #60]	; (8001580 <MX_TIM10_Init+0x8c>)
 8001544:	f005 f954 	bl	80067f0 <HAL_TIM_OC_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800154e:	f000 f8cd 	bl	80016ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_TIM10_Init+0x8c>)
 800156a:	f005 fc49 	bl	8006e00 <HAL_TIM_OC_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001574:	f000 f8ba 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	3720      	adds	r7, #32
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200002f0 	.word	0x200002f0
 8001584:	40014400 	.word	0x40014400

08001588 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <MX_USART1_UART_Init+0x50>)
 8001590:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 8001594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001598:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015c0:	f006 f874 	bl	80076ac <HAL_UART_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015ca:	f000 f88f 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000338 	.word	0x20000338
 80015d8:	40011000 	.word	0x40011000

080015dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <MX_GPIO_Init+0x104>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a39      	ldr	r2, [pc, #228]	; (80016e0 <MX_GPIO_Init+0x104>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <MX_GPIO_Init+0x104>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <MX_GPIO_Init+0x104>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a32      	ldr	r2, [pc, #200]	; (80016e0 <MX_GPIO_Init+0x104>)
 8001618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <MX_GPIO_Init+0x104>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <MX_GPIO_Init+0x104>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a2b      	ldr	r2, [pc, #172]	; (80016e0 <MX_GPIO_Init+0x104>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <MX_GPIO_Init+0x104>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <MX_GPIO_Init+0x104>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a24      	ldr	r2, [pc, #144]	; (80016e0 <MX_GPIO_Init+0x104>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <MX_GPIO_Init+0x104>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001668:	481e      	ldr	r0, [pc, #120]	; (80016e4 <MX_GPIO_Init+0x108>)
 800166a:	f001 f9ff 	bl	8002a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800166e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001674:	2301      	movs	r3, #1
 8001676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	4817      	ldr	r0, [pc, #92]	; (80016e4 <MX_GPIO_Init+0x108>)
 8001688:	f001 f86c 	bl	8002764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800168c:	2307      	movs	r3, #7
 800168e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001690:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <MX_GPIO_Init+0x10c>)
 80016a2:	f001 f85f 	bl	8002764 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	2006      	movs	r0, #6
 80016ac:	f000 fff3 	bl	8002696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016b0:	2006      	movs	r0, #6
 80016b2:	f001 f80c 	bl	80026ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2007      	movs	r0, #7
 80016bc:	f000 ffeb 	bl	8002696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016c0:	2007      	movs	r0, #7
 80016c2:	f001 f804 	bl	80026ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	2008      	movs	r0, #8
 80016cc:	f000 ffe3 	bl	8002696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80016d0:	2008      	movs	r0, #8
 80016d2:	f000 fffc 	bl	80026ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	; 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020800 	.word	0x40020800
 80016e8:	40020000 	.word	0x40020000

080016ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
}
 80016f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <Error_Handler+0x8>
	...

080016f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_MspInit+0x4c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <HAL_MspInit+0x4c>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_MspInit+0x4c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_MspInit+0x4c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HAL_MspInit+0x4c>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_MspInit+0x4c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800

08001748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <HAL_ADC_MspInit+0x7c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d127      	bne.n	80017ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_ADC_MspInit+0x80>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	4a15      	ldr	r2, [pc, #84]	; (80017c8 <HAL_ADC_MspInit+0x80>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	6453      	str	r3, [r2, #68]	; 0x44
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <HAL_ADC_MspInit+0x80>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_ADC_MspInit+0x80>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <HAL_ADC_MspInit+0x80>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_ADC_MspInit+0x80>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017a2:	2310      	movs	r3, #16
 80017a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a6:	2303      	movs	r3, #3
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <HAL_ADC_MspInit+0x84>)
 80017b6:	f000 ffd5 	bl	8002764 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	; 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40012000 	.word	0x40012000
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020000 	.word	0x40020000

080017d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	; 0x28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a21      	ldr	r2, [pc, #132]	; (8001874 <HAL_I2C_MspInit+0xa4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d13b      	bne.n	800186a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_I2C_MspInit+0xa8>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a1f      	ldr	r2, [pc, #124]	; (8001878 <HAL_I2C_MspInit+0xa8>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_I2C_MspInit+0xa8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800180e:	23c0      	movs	r3, #192	; 0xc0
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001812:	2312      	movs	r3, #18
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800181e:	2304      	movs	r3, #4
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4814      	ldr	r0, [pc, #80]	; (800187c <HAL_I2C_MspInit+0xac>)
 800182a:	f000 ff9b 	bl	8002764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_I2C_MspInit+0xa8>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a10      	ldr	r2, [pc, #64]	; (8001878 <HAL_I2C_MspInit+0xa8>)
 8001838:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_I2C_MspInit+0xa8>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	201f      	movs	r0, #31
 8001850:	f000 ff21 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001854:	201f      	movs	r0, #31
 8001856:	f000 ff3a 	bl	80026ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	2020      	movs	r0, #32
 8001860:	f000 ff19 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001864:	2020      	movs	r0, #32
 8001866:	f000 ff32 	bl	80026ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800186a:	bf00      	nop
 800186c:	3728      	adds	r7, #40	; 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40005400 	.word	0x40005400
 8001878:	40023800 	.word	0x40023800
 800187c:	40020400 	.word	0x40020400

08001880 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a28      	ldr	r2, [pc, #160]	; (8001940 <HAL_SPI_MspInit+0xc0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d149      	bne.n	8001936 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	4b27      	ldr	r3, [pc, #156]	; (8001944 <HAL_SPI_MspInit+0xc4>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a26      	ldr	r2, [pc, #152]	; (8001944 <HAL_SPI_MspInit+0xc4>)
 80018ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b24      	ldr	r3, [pc, #144]	; (8001944 <HAL_SPI_MspInit+0xc4>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_SPI_MspInit+0xc4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a1f      	ldr	r2, [pc, #124]	; (8001944 <HAL_SPI_MspInit+0xc4>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <HAL_SPI_MspInit+0xc4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_SPI_MspInit+0xc4>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a18      	ldr	r2, [pc, #96]	; (8001944 <HAL_SPI_MspInit+0xc4>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <HAL_SPI_MspInit+0xc4>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80018f6:	23a0      	movs	r3, #160	; 0xa0
 80018f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001906:	2305      	movs	r3, #5
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	480d      	ldr	r0, [pc, #52]	; (8001948 <HAL_SPI_MspInit+0xc8>)
 8001912:	f000 ff27 	bl	8002764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001916:	2310      	movs	r3, #16
 8001918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001926:	2305      	movs	r3, #5
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	4806      	ldr	r0, [pc, #24]	; (800194c <HAL_SPI_MspInit+0xcc>)
 8001932:	f000 ff17 	bl	8002764 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001936:	bf00      	nop
 8001938:	3728      	adds	r7, #40	; 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40013000 	.word	0x40013000
 8001944:	40023800 	.word	0x40023800
 8001948:	40020000 	.word	0x40020000
 800194c:	40020400 	.word	0x40020400

08001950 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <HAL_TIM_PWM_MspInit+0x58>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d11d      	bne.n	800199e <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_TIM_PWM_MspInit+0x5c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <HAL_TIM_PWM_MspInit+0x5c>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6453      	str	r3, [r2, #68]	; 0x44
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_TIM_PWM_MspInit+0x5c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	2018      	movs	r0, #24
 8001984:	f000 fe87 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001988:	2018      	movs	r0, #24
 800198a:	f000 fea0 	bl	80026ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	2019      	movs	r0, #25
 8001994:	f000 fe7f 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001998:	2019      	movs	r0, #25
 800199a:	f000 fe98 	bl	80026ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40010000 	.word	0x40010000
 80019ac:	40023800 	.word	0x40023800

080019b0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM9)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <HAL_TIM_OC_MspInit+0x48>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d115      	bne.n	80019ee <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_TIM_OC_MspInit+0x4c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <HAL_TIM_OC_MspInit+0x4c>)
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_TIM_OC_MspInit+0x4c>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	2018      	movs	r0, #24
 80019e4:	f000 fe57 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80019e8:	2018      	movs	r0, #24
 80019ea:	f000 fe70 	bl	80026ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40014000 	.word	0x40014000
 80019fc:	40023800 	.word	0x40023800

08001a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_TIM_Base_MspInit+0x48>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d115      	bne.n	8001a3e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <HAL_TIM_Base_MspInit+0x4c>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a0c      	ldr	r2, [pc, #48]	; (8001a4c <HAL_TIM_Base_MspInit+0x4c>)
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_TIM_Base_MspInit+0x4c>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	2019      	movs	r0, #25
 8001a34:	f000 fe2f 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a38:	2019      	movs	r0, #25
 8001a3a:	f000 fe48 	bl	80026ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40014400 	.word	0x40014400
 8001a4c:	40023800 	.word	0x40023800

08001a50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <HAL_TIM_MspPostInit+0x68>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d11e      	bne.n	8001ab0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_TIM_MspPostInit+0x6c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a10      	ldr	r2, [pc, #64]	; (8001abc <HAL_TIM_MspPostInit+0x6c>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_TIM_MspPostInit+0x6c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001a8e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <HAL_TIM_MspPostInit+0x70>)
 8001aac:	f000 fe5a 	bl	8002764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ab0:	bf00      	nop
 8001ab2:	3720      	adds	r7, #32
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40010000 	.word	0x40010000
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020000 	.word	0x40020000

08001ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a28      	ldr	r2, [pc, #160]	; (8001b84 <HAL_UART_MspInit+0xc0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d14a      	bne.n	8001b7c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_UART_MspInit+0xc4>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	4a26      	ldr	r2, [pc, #152]	; (8001b88 <HAL_UART_MspInit+0xc4>)
 8001af0:	f043 0310 	orr.w	r3, r3, #16
 8001af4:	6453      	str	r3, [r2, #68]	; 0x44
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_UART_MspInit+0xc4>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_UART_MspInit+0xc4>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <HAL_UART_MspInit+0xc4>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_UART_MspInit+0xc4>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_UART_MspInit+0xc4>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <HAL_UART_MspInit+0xc4>)
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <HAL_UART_MspInit+0xc4>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b4c:	2307      	movs	r3, #7
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	480d      	ldr	r0, [pc, #52]	; (8001b8c <HAL_UART_MspInit+0xc8>)
 8001b58:	f000 fe04 	bl	8002764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b6c:	2307      	movs	r3, #7
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4619      	mov	r1, r3
 8001b76:	4806      	ldr	r0, [pc, #24]	; (8001b90 <HAL_UART_MspInit+0xcc>)
 8001b78:	f000 fdf4 	bl	8002764 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b7c:	bf00      	nop
 8001b7e:	3728      	adds	r7, #40	; 0x28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40011000 	.word	0x40011000
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40020400 	.word	0x40020400

08001b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <NMI_Handler+0x4>

08001b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <HardFault_Handler+0x4>

08001ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <MemManage_Handler+0x4>

08001ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001baa:	e7fe      	b.n	8001baa <BusFault_Handler+0x4>

08001bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <UsageFault_Handler+0x4>

08001bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be0:	f000 f9c8 	bl	8001f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	RPM++;
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <EXTI0_IRQHandler+0x1c>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <EXTI0_IRQHandler+0x1c>)
 8001bf6:	801a      	strh	r2, [r3, #0]

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f000 ff51 	bl	8002aa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200013d0 	.word	0x200013d0

08001c08 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	RPM++;
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <EXTI1_IRQHandler+0x1c>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <EXTI1_IRQHandler+0x1c>)
 8001c16:	801a      	strh	r2, [r3, #0]

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f000 ff41 	bl	8002aa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200013d0 	.word	0x200013d0

08001c28 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	RPM++;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <EXTI2_IRQHandler+0x1c>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <EXTI2_IRQHandler+0x1c>)
 8001c36:	801a      	strh	r2, [r3, #0]

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001c38:	2004      	movs	r0, #4
 8001c3a:	f000 ff31 	bl	8002aa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200013d0 	.word	0x200013d0

08001c48 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	// Calculate RPM and reset counter.
	CurrentRPM = 600 * (RPM / 6.0f);
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <TIM1_BRK_TIM9_IRQHandler+0x5c>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	ee07 3a90 	vmov	s15, r3
 8001c54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c58:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001c5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c60:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001ca8 <TIM1_BRK_TIM9_IRQHandler+0x60>
 8001c64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c6c:	ee17 3a90 	vmov	r3, s15
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <TIM1_BRK_TIM9_IRQHandler+0x64>)
 8001c74:	801a      	strh	r2, [r3, #0]
	RPM = 0;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <TIM1_BRK_TIM9_IRQHandler+0x5c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	801a      	strh	r2, [r3, #0]

	// Disable Gate Drivers if RPM is too high.
	if (CurrentRPM > MaximumRPM) {
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <TIM1_BRK_TIM9_IRQHandler+0x64>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	f241 0204 	movw	r2, #4100	; 0x1004
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d905      	bls.n	8001c94 <TIM1_BRK_TIM9_IRQHandler+0x4c>
		GPIOC->ODR &= 0x1FFF;
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <TIM1_BRK_TIM9_IRQHandler+0x68>)
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <TIM1_BRK_TIM9_IRQHandler+0x68>)
 8001c8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c92:	6153      	str	r3, [r2, #20]
	}

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c94:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 8001c96:	f004 ffab 	bl	8006bf0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001c9a:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <TIM1_BRK_TIM9_IRQHandler+0x70>)
 8001c9c:	f004 ffa8 	bl	8006bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200013d0 	.word	0x200013d0
 8001ca8:	44160000 	.word	0x44160000
 8001cac:	20000380 	.word	0x20000380
 8001cb0:	40020800 	.word	0x40020800
 8001cb4:	20000260 	.word	0x20000260
 8001cb8:	200002a8 	.word	0x200002a8

08001cbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001cbc:	b598      	push	{r3, r4, r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

	// Set PWM timers to next step in sinusoid generation
	TIM1->CCR1 = TIM1->ARR * sintab[ (j + OffsetU) % AANTAL_TIJDSTAPPEN];
 8001cc0:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fc1d 	bl	8000504 <__aeabi_ui2d>
 8001cca:	4b35      	ldr	r3, [pc, #212]	; (8001da0 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd2:	4a34      	ldr	r2, [pc, #208]	; (8001da4 <TIM1_UP_TIM10_IRQHandler+0xe8>)
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fc8c 	bl	80005f8 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4c2d      	ldr	r4, [pc, #180]	; (8001d9c <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f7fe ff47 	bl	8000b7c <__aeabi_d2uiz>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6363      	str	r3, [r4, #52]	; 0x34
	TIM1->CCR2 = TIM1->ARR * sintab[ (j + OffsetV) % AANTAL_TIJDSTAPPEN];
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fc04 	bl	8000504 <__aeabi_ui2d>
 8001cfc:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	33aa      	adds	r3, #170	; 0xaa
 8001d02:	425a      	negs	r2, r3
 8001d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d0c:	bf58      	it	pl
 8001d0e:	4253      	negpl	r3, r2
 8001d10:	4a24      	ldr	r2, [pc, #144]	; (8001da4 <TIM1_UP_TIM10_IRQHandler+0xe8>)
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	f7fe fc6d 	bl	80005f8 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4c1e      	ldr	r4, [pc, #120]	; (8001d9c <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	f7fe ff28 	bl	8000b7c <__aeabi_d2uiz>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM1->CCR3 = TIM1->ARR * sintab[ (j + OffsetW) % AANTAL_TIJDSTAPPEN];
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fbe5 	bl	8000504 <__aeabi_ui2d>
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8001d42:	425a      	negs	r2, r3
 8001d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d4c:	bf58      	it	pl
 8001d4e:	4253      	negpl	r3, r2
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <TIM1_UP_TIM10_IRQHandler+0xe8>)
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	f7fe fc4d 	bl	80005f8 <__aeabi_dmul>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4c0e      	ldr	r4, [pc, #56]	; (8001d9c <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7fe ff08 	bl	8000b7c <__aeabi_d2uiz>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	63e3      	str	r3, [r4, #60]	; 0x3c

	j++;
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	3301      	adds	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8001d7a:	801a      	strh	r2, [r3, #0]

	if( j > AANTAL_TIJDSTAPPEN) {
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d84:	d902      	bls.n	8001d8c <TIM1_UP_TIM10_IRQHandler+0xd0>
		j = 0; // Reset j when full sinusoid has been made.
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d8c:	4806      	ldr	r0, [pc, #24]	; (8001da8 <TIM1_UP_TIM10_IRQHandler+0xec>)
 8001d8e:	f004 ff2f 	bl	8006bf0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <TIM1_UP_TIM10_IRQHandler+0xf0>)
 8001d94:	f004 ff2c 	bl	8006bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	bd98      	pop	{r3, r4, r7, pc}
 8001d9c:	40010000 	.word	0x40010000
 8001da0:	200013d2 	.word	0x200013d2
 8001da4:	20000390 	.word	0x20000390
 8001da8:	20000260 	.word	0x20000260
 8001dac:	200002f0 	.word	0x200002f0

08001db0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <I2C1_EV_IRQHandler+0x10>)
 8001db6:	f001 f884 	bl	8002ec2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200001b4 	.word	0x200001b4

08001dc4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <I2C1_ER_IRQHandler+0x10>)
 8001dca:	f001 f9cd 	bl	8003168 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200001b4 	.word	0x200001b4

08001dd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <OTG_FS_IRQHandler+0x10>)
 8001dde:	f002 fe48 	bl	8004a72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200028bc 	.word	0x200028bc

08001dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df4:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <_sbrk+0x5c>)
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <_sbrk+0x60>)
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <_sbrk+0x64>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <_sbrk+0x68>)
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d207      	bcs.n	8001e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e1c:	f00a f86a 	bl	800bef4 <__errno>
 8001e20:	4603      	mov	r3, r0
 8001e22:	220c      	movs	r2, #12
 8001e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	e009      	b.n	8001e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <_sbrk+0x64>)
 8001e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20020000 	.word	0x20020000
 8001e4c:	00000400 	.word	0x00000400
 8001e50:	200013d4 	.word	0x200013d4
 8001e54:	20003130 	.word	0x20003130

08001e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <SystemInit+0x20>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <SystemInit+0x20>)
 8001e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8001e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e80:	480d      	ldr	r0, [pc, #52]	; (8001eb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e82:	490e      	ldr	r1, [pc, #56]	; (8001ebc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e84:	4a0e      	ldr	r2, [pc, #56]	; (8001ec0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e88:	e002      	b.n	8001e90 <LoopCopyDataInit>

08001e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8e:	3304      	adds	r3, #4

08001e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e94:	d3f9      	bcc.n	8001e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e96:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e98:	4c0b      	ldr	r4, [pc, #44]	; (8001ec8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e9c:	e001      	b.n	8001ea2 <LoopFillZerobss>

08001e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea0:	3204      	adds	r2, #4

08001ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea4:	d3fb      	bcc.n	8001e9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ea6:	f7ff ffd7 	bl	8001e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eaa:	f00a f829 	bl	800bf00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eae:	f7ff f857 	bl	8000f60 <main>
  bx  lr    
 8001eb2:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8001eb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ebc:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001ec0:	0800db30 	.word	0x0800db30
  ldr r2, =_sbss
 8001ec4:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001ec8:	20003130 	.word	0x20003130

08001ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ecc:	e7fe      	b.n	8001ecc <ADC_IRQHandler>
	...

08001ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <HAL_Init+0x40>)
 8001eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_Init+0x40>)
 8001ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <HAL_Init+0x40>)
 8001ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef8:	2003      	movs	r0, #3
 8001efa:	f000 fbc1 	bl	8002680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001efe:	200f      	movs	r0, #15
 8001f00:	f000 f808 	bl	8001f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f04:	f7ff fbf8 	bl	80016f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_InitTick+0x54>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_InitTick+0x58>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4619      	mov	r1, r3
 8001f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 fbd9 	bl	80026ea <HAL_SYSTICK_Config>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e00e      	b.n	8001f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b0f      	cmp	r3, #15
 8001f46:	d80a      	bhi.n	8001f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f000 fba1 	bl	8002696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f54:	4a06      	ldr	r2, [pc, #24]	; (8001f70 <HAL_InitTick+0x5c>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e000      	b.n	8001f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000004 	.word	0x20000004
 8001f6c:	2000000c 	.word	0x2000000c
 8001f70:	20000008 	.word	0x20000008

08001f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_IncTick+0x20>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_IncTick+0x24>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <HAL_IncTick+0x24>)
 8001f86:	6013      	str	r3, [r2, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	2000000c 	.word	0x2000000c
 8001f98:	200013d8 	.word	0x200013d8

08001f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <HAL_GetTick+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	200013d8 	.word	0x200013d8

08001fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff ffee 	bl	8001f9c <HAL_GetTick>
 8001fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fcc:	d005      	beq.n	8001fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <HAL_Delay+0x44>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fda:	bf00      	nop
 8001fdc:	f7ff ffde 	bl	8001f9c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d8f7      	bhi.n	8001fdc <HAL_Delay+0x28>
  {
  }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000000c 	.word	0x2000000c

08001ffc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e033      	b.n	800207a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fb94 	bl	8001748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b00      	cmp	r3, #0
 8002038:	d118      	bne.n	800206c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002042:	f023 0302 	bic.w	r3, r3, #2
 8002046:	f043 0202 	orr.w	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f94a 	bl	80022e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	641a      	str	r2, [r3, #64]	; 0x40
 800206a:	e001      	b.n	8002070 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x1c>
 800209c:	2302      	movs	r3, #2
 800209e:	e113      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x244>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b09      	cmp	r3, #9
 80020ae:	d925      	bls.n	80020fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68d9      	ldr	r1, [r3, #12]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	3b1e      	subs	r3, #30
 80020c6:	2207      	movs	r2, #7
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43da      	mvns	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	400a      	ands	r2, r1
 80020d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68d9      	ldr	r1, [r3, #12]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	4618      	mov	r0, r3
 80020e8:	4603      	mov	r3, r0
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4403      	add	r3, r0
 80020ee:	3b1e      	subs	r3, #30
 80020f0:	409a      	lsls	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	e022      	b.n	8002142 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6919      	ldr	r1, [r3, #16]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	2207      	movs	r2, #7
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	400a      	ands	r2, r1
 800211e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6919      	ldr	r1, [r3, #16]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	4618      	mov	r0, r3
 8002132:	4603      	mov	r3, r0
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4403      	add	r3, r0
 8002138:	409a      	lsls	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b06      	cmp	r3, #6
 8002148:	d824      	bhi.n	8002194 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	3b05      	subs	r3, #5
 800215c:	221f      	movs	r2, #31
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	400a      	ands	r2, r1
 800216a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	4618      	mov	r0, r3
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	3b05      	subs	r3, #5
 8002186:	fa00 f203 	lsl.w	r2, r0, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	635a      	str	r2, [r3, #52]	; 0x34
 8002192:	e04c      	b.n	800222e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b0c      	cmp	r3, #12
 800219a:	d824      	bhi.n	80021e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	3b23      	subs	r3, #35	; 0x23
 80021ae:	221f      	movs	r2, #31
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43da      	mvns	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	400a      	ands	r2, r1
 80021bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	4618      	mov	r0, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	3b23      	subs	r3, #35	; 0x23
 80021d8:	fa00 f203 	lsl.w	r2, r0, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30
 80021e4:	e023      	b.n	800222e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	3b41      	subs	r3, #65	; 0x41
 80021f8:	221f      	movs	r2, #31
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43da      	mvns	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	400a      	ands	r2, r1
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	4618      	mov	r0, r3
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	3b41      	subs	r3, #65	; 0x41
 8002222:	fa00 f203 	lsl.w	r2, r0, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800222e:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <HAL_ADC_ConfigChannel+0x250>)
 8002230:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a28      	ldr	r2, [pc, #160]	; (80022d8 <HAL_ADC_ConfigChannel+0x254>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d10f      	bne.n	800225c <HAL_ADC_ConfigChannel+0x1d8>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b12      	cmp	r3, #18
 8002242:	d10b      	bne.n	800225c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <HAL_ADC_ConfigChannel+0x254>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d12b      	bne.n	80022be <HAL_ADC_ConfigChannel+0x23a>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1c      	ldr	r2, [pc, #112]	; (80022dc <HAL_ADC_ConfigChannel+0x258>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d003      	beq.n	8002278 <HAL_ADC_ConfigChannel+0x1f4>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b11      	cmp	r3, #17
 8002276:	d122      	bne.n	80022be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a11      	ldr	r2, [pc, #68]	; (80022dc <HAL_ADC_ConfigChannel+0x258>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d111      	bne.n	80022be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <HAL_ADC_ConfigChannel+0x25c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <HAL_ADC_ConfigChannel+0x260>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	0c9a      	lsrs	r2, r3, #18
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022b0:	e002      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f9      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	40012300 	.word	0x40012300
 80022d8:	40012000 	.word	0x40012000
 80022dc:	10000012 	.word	0x10000012
 80022e0:	20000004 	.word	0x20000004
 80022e4:	431bde83 	.word	0x431bde83

080022e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022f0:	4b79      	ldr	r3, [pc, #484]	; (80024d8 <ADC_Init+0x1f0>)
 80022f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	431a      	orrs	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800231c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	021a      	lsls	r2, r3, #8
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002362:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6899      	ldr	r1, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	4a58      	ldr	r2, [pc, #352]	; (80024dc <ADC_Init+0x1f4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d022      	beq.n	80023c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800238e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6899      	ldr	r1, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	e00f      	b.n	80023e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0202 	bic.w	r2, r2, #2
 80023f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6899      	ldr	r1, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7e1b      	ldrb	r3, [r3, #24]
 8002400:	005a      	lsls	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01b      	beq.n	800244c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002422:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002432:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6859      	ldr	r1, [r3, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	3b01      	subs	r3, #1
 8002440:	035a      	lsls	r2, r3, #13
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	e007      	b.n	800245c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800245a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	3b01      	subs	r3, #1
 8002478:	051a      	lsls	r2, r3, #20
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002490:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6899      	ldr	r1, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800249e:	025a      	lsls	r2, r3, #9
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6899      	ldr	r1, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	029a      	lsls	r2, r3, #10
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	609a      	str	r2, [r3, #8]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	40012300 	.word	0x40012300
 80024dc:	0f000001 	.word	0x0f000001

080024e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <__NVIC_SetPriorityGrouping+0x44>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024fc:	4013      	ands	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800250c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002512:	4a04      	ldr	r2, [pc, #16]	; (8002524 <__NVIC_SetPriorityGrouping+0x44>)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	60d3      	str	r3, [r2, #12]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <__NVIC_GetPriorityGrouping+0x18>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	f003 0307 	and.w	r3, r3, #7
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	2b00      	cmp	r3, #0
 8002554:	db0b      	blt.n	800256e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	4907      	ldr	r1, [pc, #28]	; (800257c <__NVIC_EnableIRQ+0x38>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	2001      	movs	r0, #1
 8002566:	fa00 f202 	lsl.w	r2, r0, r2
 800256a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000e100 	.word	0xe000e100

08002580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002590:	2b00      	cmp	r3, #0
 8002592:	db0a      	blt.n	80025aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	490c      	ldr	r1, [pc, #48]	; (80025cc <__NVIC_SetPriority+0x4c>)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	0112      	lsls	r2, r2, #4
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	440b      	add	r3, r1
 80025a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a8:	e00a      	b.n	80025c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4908      	ldr	r1, [pc, #32]	; (80025d0 <__NVIC_SetPriority+0x50>)
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	3b04      	subs	r3, #4
 80025b8:	0112      	lsls	r2, r2, #4
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	440b      	add	r3, r1
 80025be:	761a      	strb	r2, [r3, #24]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000e100 	.word	0xe000e100
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	; 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f1c3 0307 	rsb	r3, r3, #7
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	bf28      	it	cs
 80025f2:	2304      	movcs	r3, #4
 80025f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3304      	adds	r3, #4
 80025fa:	2b06      	cmp	r3, #6
 80025fc:	d902      	bls.n	8002604 <NVIC_EncodePriority+0x30>
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3b03      	subs	r3, #3
 8002602:	e000      	b.n	8002606 <NVIC_EncodePriority+0x32>
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	f04f 32ff 	mov.w	r2, #4294967295
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43da      	mvns	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	401a      	ands	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800261c:	f04f 31ff 	mov.w	r1, #4294967295
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	43d9      	mvns	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	4313      	orrs	r3, r2
         );
}
 800262e:	4618      	mov	r0, r3
 8002630:	3724      	adds	r7, #36	; 0x24
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800264c:	d301      	bcc.n	8002652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264e:	2301      	movs	r3, #1
 8002650:	e00f      	b.n	8002672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002652:	4a0a      	ldr	r2, [pc, #40]	; (800267c <SysTick_Config+0x40>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800265a:	210f      	movs	r1, #15
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	f7ff ff8e 	bl	8002580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <SysTick_Config+0x40>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800266a:	4b04      	ldr	r3, [pc, #16]	; (800267c <SysTick_Config+0x40>)
 800266c:	2207      	movs	r2, #7
 800266e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	e000e010 	.word	0xe000e010

08002680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ff29 	bl	80024e0 <__NVIC_SetPriorityGrouping>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a8:	f7ff ff3e 	bl	8002528 <__NVIC_GetPriorityGrouping>
 80026ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	6978      	ldr	r0, [r7, #20]
 80026b4:	f7ff ff8e 	bl	80025d4 <NVIC_EncodePriority>
 80026b8:	4602      	mov	r2, r0
 80026ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026be:	4611      	mov	r1, r2
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff5d 	bl	8002580 <__NVIC_SetPriority>
}
 80026c6:	bf00      	nop
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff31 	bl	8002544 <__NVIC_EnableIRQ>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ffa2 	bl	800263c <SysTick_Config>
 80026f8:	4603      	mov	r3, r0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d004      	beq.n	8002720 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e00c      	b.n	800273a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2205      	movs	r2, #5
 8002724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002754:	b2db      	uxtb	r3, r3
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002764:	b480      	push	{r7}
 8002766:	b089      	sub	sp, #36	; 0x24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	e159      	b.n	8002a34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002780:	2201      	movs	r2, #1
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	429a      	cmp	r2, r3
 800279a:	f040 8148 	bne.w	8002a2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d005      	beq.n	80027b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d130      	bne.n	8002818 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	2203      	movs	r2, #3
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ec:	2201      	movs	r2, #1
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 0201 	and.w	r2, r3, #1
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b03      	cmp	r3, #3
 8002822:	d017      	beq.n	8002854 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2203      	movs	r2, #3
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d123      	bne.n	80028a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	08da      	lsrs	r2, r3, #3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3208      	adds	r2, #8
 8002868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	220f      	movs	r2, #15
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	08da      	lsrs	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3208      	adds	r2, #8
 80028a2:	69b9      	ldr	r1, [r7, #24]
 80028a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	2203      	movs	r2, #3
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0203 	and.w	r2, r3, #3
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80a2 	beq.w	8002a2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	4b57      	ldr	r3, [pc, #348]	; (8002a4c <HAL_GPIO_Init+0x2e8>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	4a56      	ldr	r2, [pc, #344]	; (8002a4c <HAL_GPIO_Init+0x2e8>)
 80028f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f8:	6453      	str	r3, [r2, #68]	; 0x44
 80028fa:	4b54      	ldr	r3, [pc, #336]	; (8002a4c <HAL_GPIO_Init+0x2e8>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002906:	4a52      	ldr	r2, [pc, #328]	; (8002a50 <HAL_GPIO_Init+0x2ec>)
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	3302      	adds	r3, #2
 800290e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	220f      	movs	r2, #15
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a49      	ldr	r2, [pc, #292]	; (8002a54 <HAL_GPIO_Init+0x2f0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d019      	beq.n	8002966 <HAL_GPIO_Init+0x202>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a48      	ldr	r2, [pc, #288]	; (8002a58 <HAL_GPIO_Init+0x2f4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_GPIO_Init+0x1fe>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a47      	ldr	r2, [pc, #284]	; (8002a5c <HAL_GPIO_Init+0x2f8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00d      	beq.n	800295e <HAL_GPIO_Init+0x1fa>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a46      	ldr	r2, [pc, #280]	; (8002a60 <HAL_GPIO_Init+0x2fc>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <HAL_GPIO_Init+0x1f6>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a45      	ldr	r2, [pc, #276]	; (8002a64 <HAL_GPIO_Init+0x300>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d101      	bne.n	8002956 <HAL_GPIO_Init+0x1f2>
 8002952:	2304      	movs	r3, #4
 8002954:	e008      	b.n	8002968 <HAL_GPIO_Init+0x204>
 8002956:	2307      	movs	r3, #7
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x204>
 800295a:	2303      	movs	r3, #3
 800295c:	e004      	b.n	8002968 <HAL_GPIO_Init+0x204>
 800295e:	2302      	movs	r3, #2
 8002960:	e002      	b.n	8002968 <HAL_GPIO_Init+0x204>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_GPIO_Init+0x204>
 8002966:	2300      	movs	r3, #0
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f002 0203 	and.w	r2, r2, #3
 800296e:	0092      	lsls	r2, r2, #2
 8002970:	4093      	lsls	r3, r2
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002978:	4935      	ldr	r1, [pc, #212]	; (8002a50 <HAL_GPIO_Init+0x2ec>)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	3302      	adds	r3, #2
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002986:	4b38      	ldr	r3, [pc, #224]	; (8002a68 <HAL_GPIO_Init+0x304>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029aa:	4a2f      	ldr	r2, [pc, #188]	; (8002a68 <HAL_GPIO_Init+0x304>)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b0:	4b2d      	ldr	r3, [pc, #180]	; (8002a68 <HAL_GPIO_Init+0x304>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d4:	4a24      	ldr	r2, [pc, #144]	; (8002a68 <HAL_GPIO_Init+0x304>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029da:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <HAL_GPIO_Init+0x304>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029fe:	4a1a      	ldr	r2, [pc, #104]	; (8002a68 <HAL_GPIO_Init+0x304>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a04:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_GPIO_Init+0x304>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a28:	4a0f      	ldr	r2, [pc, #60]	; (8002a68 <HAL_GPIO_Init+0x304>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3301      	adds	r3, #1
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b0f      	cmp	r3, #15
 8002a38:	f67f aea2 	bls.w	8002780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3724      	adds	r7, #36	; 0x24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40013800 	.word	0x40013800
 8002a54:	40020000 	.word	0x40020000
 8002a58:	40020400 	.word	0x40020400
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	40020c00 	.word	0x40020c00
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40013c00 	.word	0x40013c00

08002a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a7c:	787b      	ldrb	r3, [r7, #1]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a82:	887a      	ldrh	r2, [r7, #2]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a88:	e003      	b.n	8002a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a8a:	887b      	ldrh	r3, [r7, #2]
 8002a8c:	041a      	lsls	r2, r3, #16
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	619a      	str	r2, [r3, #24]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d006      	beq.n	8002ac4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ab6:	4a05      	ldr	r2, [pc, #20]	; (8002acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 f806 	bl	8002ad0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40013c00 	.word	0x40013c00

08002ad0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e12b      	b.n	8002d52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe fe5e 	bl	80017d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2224      	movs	r2, #36	; 0x24
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b4c:	f003 fcee 	bl	800652c <HAL_RCC_GetPCLK1Freq>
 8002b50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4a81      	ldr	r2, [pc, #516]	; (8002d5c <HAL_I2C_Init+0x274>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d807      	bhi.n	8002b6c <HAL_I2C_Init+0x84>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4a80      	ldr	r2, [pc, #512]	; (8002d60 <HAL_I2C_Init+0x278>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	bf94      	ite	ls
 8002b64:	2301      	movls	r3, #1
 8002b66:	2300      	movhi	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e006      	b.n	8002b7a <HAL_I2C_Init+0x92>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4a7d      	ldr	r2, [pc, #500]	; (8002d64 <HAL_I2C_Init+0x27c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	bf94      	ite	ls
 8002b74:	2301      	movls	r3, #1
 8002b76:	2300      	movhi	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e0e7      	b.n	8002d52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4a78      	ldr	r2, [pc, #480]	; (8002d68 <HAL_I2C_Init+0x280>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	0c9b      	lsrs	r3, r3, #18
 8002b8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a6a      	ldr	r2, [pc, #424]	; (8002d5c <HAL_I2C_Init+0x274>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d802      	bhi.n	8002bbc <HAL_I2C_Init+0xd4>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	e009      	b.n	8002bd0 <HAL_I2C_Init+0xe8>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	4a69      	ldr	r2, [pc, #420]	; (8002d6c <HAL_I2C_Init+0x284>)
 8002bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bcc:	099b      	lsrs	r3, r3, #6
 8002bce:	3301      	adds	r3, #1
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002be2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	495c      	ldr	r1, [pc, #368]	; (8002d5c <HAL_I2C_Init+0x274>)
 8002bec:	428b      	cmp	r3, r1
 8002bee:	d819      	bhi.n	8002c24 <HAL_I2C_Init+0x13c>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1e59      	subs	r1, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bfe:	1c59      	adds	r1, r3, #1
 8002c00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c04:	400b      	ands	r3, r1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_I2C_Init+0x138>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1e59      	subs	r1, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1e:	e051      	b.n	8002cc4 <HAL_I2C_Init+0x1dc>
 8002c20:	2304      	movs	r3, #4
 8002c22:	e04f      	b.n	8002cc4 <HAL_I2C_Init+0x1dc>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d111      	bne.n	8002c50 <HAL_I2C_Init+0x168>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1e58      	subs	r0, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	440b      	add	r3, r1
 8002c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3e:	3301      	adds	r3, #1
 8002c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	e012      	b.n	8002c76 <HAL_I2C_Init+0x18e>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	1e58      	subs	r0, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	0099      	lsls	r1, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c66:	3301      	adds	r3, #1
 8002c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_I2C_Init+0x196>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e022      	b.n	8002cc4 <HAL_I2C_Init+0x1dc>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10e      	bne.n	8002ca4 <HAL_I2C_Init+0x1bc>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1e58      	subs	r0, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6859      	ldr	r1, [r3, #4]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	440b      	add	r3, r1
 8002c94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca2:	e00f      	b.n	8002cc4 <HAL_I2C_Init+0x1dc>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1e58      	subs	r0, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6859      	ldr	r1, [r3, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	0099      	lsls	r1, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	6809      	ldr	r1, [r1, #0]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69da      	ldr	r2, [r3, #28]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6911      	ldr	r1, [r2, #16]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68d2      	ldr	r2, [r2, #12]
 8002cfe:	4311      	orrs	r1, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	430b      	orrs	r3, r1
 8002d06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	000186a0 	.word	0x000186a0
 8002d60:	001e847f 	.word	0x001e847f
 8002d64:	003d08ff 	.word	0x003d08ff
 8002d68:	431bde83 	.word	0x431bde83
 8002d6c:	10624dd3 	.word	0x10624dd3

08002d70 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d8c:	2b28      	cmp	r3, #40	; 0x28
 8002d8e:	d15b      	bne.n	8002e48 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e054      	b.n	8002e4a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e04d      	b.n	8002e4a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d007      	beq.n	8002dd4 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	222a      	movs	r2, #42	; 0x2a
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	88fa      	ldrh	r2, [r7, #6]
 8002e04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002e42:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	e000      	b.n	8002e4a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8002e48:	2302      	movs	r3, #2
  }
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d124      	bne.n	8002eb4 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2228      	movs	r2, #40	; 0x28
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d007      	beq.n	8002e90 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e9e:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002eae:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e000      	b.n	8002eb6 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002eb4:	2302      	movs	r3, #2
  }
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b088      	sub	sp, #32
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ee2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eea:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b10      	cmp	r3, #16
 8002ef0:	d003      	beq.n	8002efa <HAL_I2C_EV_IRQHandler+0x38>
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b40      	cmp	r3, #64	; 0x40
 8002ef6:	f040 80b1 	bne.w	800305c <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10d      	bne.n	8002f30 <HAL_I2C_EV_IRQHandler+0x6e>
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002f1a:	d003      	beq.n	8002f24 <HAL_I2C_EV_IRQHandler+0x62>
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f22:	d101      	bne.n	8002f28 <HAL_I2C_EV_IRQHandler+0x66>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <HAL_I2C_EV_IRQHandler+0x68>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	f000 8114 	beq.w	8003158 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <HAL_I2C_EV_IRQHandler+0x90>
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d006      	beq.n	8002f52 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f001 fc29 	bl	800479c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fd32 	bl	80039b4 <I2C_Master_SB>
 8002f50:	e083      	b.n	800305a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_I2C_EV_IRQHandler+0xac>
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fdaa 	bl	8003ac0 <I2C_Master_ADD10>
 8002f6c:	e075      	b.n	800305a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_I2C_EV_IRQHandler+0xc8>
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fdc6 	bl	8003b14 <I2C_Master_ADDR>
 8002f88:	e067      	b.n	800305a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d036      	beq.n	8003002 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fa2:	f000 80db 	beq.w	800315c <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00d      	beq.n	8002fcc <HAL_I2C_EV_IRQHandler+0x10a>
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <HAL_I2C_EV_IRQHandler+0x10a>
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d103      	bne.n	8002fcc <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f9aa 	bl	800331e <I2C_MasterTransmit_TXE>
 8002fca:	e046      	b.n	800305a <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80c2 	beq.w	800315c <HAL_I2C_EV_IRQHandler+0x29a>
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80bc 	beq.w	800315c <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002fe4:	7bbb      	ldrb	r3, [r7, #14]
 8002fe6:	2b21      	cmp	r3, #33	; 0x21
 8002fe8:	d103      	bne.n	8002ff2 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fa33 	bl	8003456 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ff0:	e0b4      	b.n	800315c <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	2b40      	cmp	r3, #64	; 0x40
 8002ff6:	f040 80b1 	bne.w	800315c <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 faa1 	bl	8003542 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003000:	e0ac      	b.n	800315c <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003010:	f000 80a4 	beq.w	800315c <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00d      	beq.n	800303a <HAL_I2C_EV_IRQHandler+0x178>
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_I2C_EV_IRQHandler+0x178>
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d103      	bne.n	800303a <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fb19 	bl	800366a <I2C_MasterReceive_RXNE>
 8003038:	e00f      	b.n	800305a <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 808b 	beq.w	800315c <HAL_I2C_EV_IRQHandler+0x29a>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8085 	beq.w	800315c <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fbc4 	bl	80037e0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003058:	e080      	b.n	800315c <HAL_I2C_EV_IRQHandler+0x29a>
 800305a:	e07f      	b.n	800315c <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d004      	beq.n	800306e <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	61fb      	str	r3, [r7, #28]
 800306c:	e007      	b.n	800307e <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d011      	beq.n	80030ac <HAL_I2C_EV_IRQHandler+0x1ea>
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00c      	beq.n	80030ac <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80030a2:	69b9      	ldr	r1, [r7, #24]
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 ff84 	bl	8003fb2 <I2C_Slave_ADDR>
 80030aa:	e05a      	b.n	8003162 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <HAL_I2C_EV_IRQHandler+0x206>
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 ffbf 	bl	8004044 <I2C_Slave_STOPF>
 80030c6:	e04c      	b.n	8003162 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030c8:	7bbb      	ldrb	r3, [r7, #14]
 80030ca:	2b21      	cmp	r3, #33	; 0x21
 80030cc:	d002      	beq.n	80030d4 <HAL_I2C_EV_IRQHandler+0x212>
 80030ce:	7bbb      	ldrb	r3, [r7, #14]
 80030d0:	2b29      	cmp	r3, #41	; 0x29
 80030d2:	d120      	bne.n	8003116 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00d      	beq.n	80030fa <HAL_I2C_EV_IRQHandler+0x238>
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_I2C_EV_IRQHandler+0x238>
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fe9f 	bl	8003e36 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030f8:	e032      	b.n	8003160 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d02d      	beq.n	8003160 <HAL_I2C_EV_IRQHandler+0x29e>
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800310a:	2b00      	cmp	r3, #0
 800310c:	d028      	beq.n	8003160 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fece 	bl	8003eb0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003114:	e024      	b.n	8003160 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00d      	beq.n	800313c <HAL_I2C_EV_IRQHandler+0x27a>
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_I2C_EV_IRQHandler+0x27a>
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d103      	bne.n	800313c <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fedc 	bl	8003ef2 <I2C_SlaveReceive_RXNE>
 800313a:	e012      	b.n	8003162 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00d      	beq.n	8003162 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 ff0c 	bl	8003f6e <I2C_SlaveReceive_BTF>
 8003156:	e004      	b.n	8003162 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003158:	bf00      	nop
 800315a:	e002      	b.n	8003162 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800315c:	bf00      	nop
 800315e:	e000      	b.n	8003162 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003160:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003162:	3720      	adds	r7, #32
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08a      	sub	sp, #40	; 0x28
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003180:	2300      	movs	r3, #0
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800318a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00d      	beq.n	80031b2 <HAL_I2C_ER_IRQHandler+0x4a>
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00d      	beq.n	80031d8 <HAL_I2C_ER_IRQHandler+0x70>
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	f043 0302 	orr.w	r3, r3, #2
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80031d6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d03e      	beq.n	8003260 <HAL_I2C_ER_IRQHandler+0xf8>
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d039      	beq.n	8003260 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80031ec:	7efb      	ldrb	r3, [r7, #27]
 80031ee:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fe:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003206:	7ebb      	ldrb	r3, [r7, #26]
 8003208:	2b20      	cmp	r3, #32
 800320a:	d112      	bne.n	8003232 <HAL_I2C_ER_IRQHandler+0xca>
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10f      	bne.n	8003232 <HAL_I2C_ER_IRQHandler+0xca>
 8003212:	7cfb      	ldrb	r3, [r7, #19]
 8003214:	2b21      	cmp	r3, #33	; 0x21
 8003216:	d008      	beq.n	800322a <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	2b29      	cmp	r3, #41	; 0x29
 800321c:	d005      	beq.n	800322a <HAL_I2C_ER_IRQHandler+0xc2>
 800321e:	7cfb      	ldrb	r3, [r7, #19]
 8003220:	2b28      	cmp	r3, #40	; 0x28
 8003222:	d106      	bne.n	8003232 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b21      	cmp	r3, #33	; 0x21
 8003228:	d103      	bne.n	8003232 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f001 f83a 	bl	80042a4 <I2C_Slave_AF>
 8003230:	e016      	b.n	8003260 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800323a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	f043 0304 	orr.w	r3, r3, #4
 8003242:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003244:	7efb      	ldrb	r3, [r7, #27]
 8003246:	2b10      	cmp	r3, #16
 8003248:	d002      	beq.n	8003250 <HAL_I2C_ER_IRQHandler+0xe8>
 800324a:	7efb      	ldrb	r3, [r7, #27]
 800324c:	2b40      	cmp	r3, #64	; 0x40
 800324e:	d107      	bne.n	8003260 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00d      	beq.n	8003286 <HAL_I2C_ER_IRQHandler+0x11e>
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	f043 0308 	orr.w	r3, r3, #8
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003284:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f001 f873 	bl	8004384 <I2C_ITError>
  }
}
 800329e:	bf00      	nop
 80032a0:	3728      	adds	r7, #40	; 0x28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003334:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003340:	2b00      	cmp	r3, #0
 8003342:	d150      	bne.n	80033e6 <I2C_MasterTransmit_TXE+0xc8>
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b21      	cmp	r3, #33	; 0x21
 8003348:	d14d      	bne.n	80033e6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b08      	cmp	r3, #8
 800334e:	d01d      	beq.n	800338c <I2C_MasterTransmit_TXE+0x6e>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b20      	cmp	r3, #32
 8003354:	d01a      	beq.n	800338c <I2C_MasterTransmit_TXE+0x6e>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800335c:	d016      	beq.n	800338c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800336c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2211      	movs	r2, #17
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff8e 	bl	80032a6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800338a:	e060      	b.n	800344e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800339a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033aa:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d107      	bne.n	80033d6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff ff87 	bl	80032e2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033d4:	e03b      	b.n	800344e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff ff61 	bl	80032a6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033e4:	e033      	b.n	800344e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	2b21      	cmp	r3, #33	; 0x21
 80033ea:	d005      	beq.n	80033f8 <I2C_MasterTransmit_TXE+0xda>
 80033ec:	7bbb      	ldrb	r3, [r7, #14]
 80033ee:	2b40      	cmp	r3, #64	; 0x40
 80033f0:	d12d      	bne.n	800344e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	2b22      	cmp	r3, #34	; 0x22
 80033f6:	d12a      	bne.n	800344e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d108      	bne.n	8003414 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003410:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003412:	e01c      	b.n	800344e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b40      	cmp	r3, #64	; 0x40
 800341e:	d103      	bne.n	8003428 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f88e 	bl	8003542 <I2C_MemoryTransmit_TXE_BTF>
}
 8003426:	e012      	b.n	800344e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	781a      	ldrb	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800344c:	e7ff      	b.n	800344e <I2C_MasterTransmit_TXE+0x130>
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b21      	cmp	r3, #33	; 0x21
 800346e:	d164      	bne.n	800353a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d012      	beq.n	80034a0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	781a      	ldrb	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800349e:	e04c      	b.n	800353a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d01d      	beq.n	80034e2 <I2C_MasterTransmit_BTF+0x8c>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d01a      	beq.n	80034e2 <I2C_MasterTransmit_BTF+0x8c>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034b2:	d016      	beq.n	80034e2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034c2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2211      	movs	r2, #17
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff fee3 	bl	80032a6 <HAL_I2C_MasterTxCpltCallback>
}
 80034e0:	e02b      	b.n	800353a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034f0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003500:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b40      	cmp	r3, #64	; 0x40
 800351a:	d107      	bne.n	800352c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff fedc 	bl	80032e2 <HAL_I2C_MemTxCpltCallback>
}
 800352a:	e006      	b.n	800353a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff feb6 	bl	80032a6 <HAL_I2C_MasterTxCpltCallback>
}
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003550:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003556:	2b00      	cmp	r3, #0
 8003558:	d11d      	bne.n	8003596 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355e:	2b01      	cmp	r3, #1
 8003560:	d10b      	bne.n	800357a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003566:	b2da      	uxtb	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003572:	1c9a      	adds	r2, r3, #2
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003578:	e073      	b.n	8003662 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357e:	b29b      	uxth	r3, r3
 8003580:	121b      	asrs	r3, r3, #8
 8003582:	b2da      	uxtb	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003594:	e065      	b.n	8003662 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359a:	2b01      	cmp	r3, #1
 800359c:	d10b      	bne.n	80035b6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035b4:	e055      	b.n	8003662 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d151      	bne.n	8003662 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	2b22      	cmp	r3, #34	; 0x22
 80035c2:	d10d      	bne.n	80035e0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035de:	e040      	b.n	8003662 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d015      	beq.n	8003616 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b21      	cmp	r3, #33	; 0x21
 80035ee:	d112      	bne.n	8003616 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	781a      	ldrb	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003614:	e025      	b.n	8003662 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d120      	bne.n	8003662 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b21      	cmp	r3, #33	; 0x21
 8003624:	d11d      	bne.n	8003662 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003634:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003644:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff fe40 	bl	80032e2 <HAL_I2C_MemTxCpltCallback>
}
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b22      	cmp	r3, #34	; 0x22
 800367c:	f040 80ac 	bne.w	80037d8 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d921      	bls.n	80036d2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	f040 808c 	bne.w	80037d8 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ce:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80036d0:	e082      	b.n	80037d8 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d075      	beq.n	80037c6 <I2C_MasterReceive_RXNE+0x15c>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d002      	beq.n	80036e6 <I2C_MasterReceive_RXNE+0x7c>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d16f      	bne.n	80037c6 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f001 f826 	bl	8004738 <I2C_WaitOnSTOPRequestThroughIT>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d142      	bne.n	8003778 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003700:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003710:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b40      	cmp	r3, #64	; 0x40
 800374a:	d10a      	bne.n	8003762 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff fdcb 	bl	80032f6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003760:	e03a      	b.n	80037d8 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2212      	movs	r2, #18
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff fda2 	bl	80032ba <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003776:	e02f      	b.n	80037d8 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003786:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fd fbc0 	bl	8000f44 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80037c4:	e008      	b.n	80037d8 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d4:	605a      	str	r2, [r3, #4]
}
 80037d6:	e7ff      	b.n	80037d8 <I2C_MasterReceive_RXNE+0x16e>
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d11b      	bne.n	8003830 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003806:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800382e:	e0bd      	b.n	80039ac <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b03      	cmp	r3, #3
 8003838:	d129      	bne.n	800388e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003848:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b04      	cmp	r3, #4
 800384e:	d00a      	beq.n	8003866 <I2C_MasterReceive_BTF+0x86>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d007      	beq.n	8003866 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003864:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003882:	b29b      	uxth	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800388c:	e08e      	b.n	80039ac <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d176      	bne.n	8003986 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d002      	beq.n	80038a4 <I2C_MasterReceive_BTF+0xc4>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d108      	bne.n	80038b6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e019      	b.n	80038ea <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d002      	beq.n	80038c2 <I2C_MasterReceive_BTF+0xe2>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d108      	bne.n	80038d4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	e00a      	b.n	80038ea <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d007      	beq.n	80038ea <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003906:	b29b      	uxth	r3, r3
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003944:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	d10a      	bne.n	8003970 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff fcc4 	bl	80032f6 <HAL_I2C_MemRxCpltCallback>
}
 800396e:	e01d      	b.n	80039ac <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2212      	movs	r2, #18
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff fc9b 	bl	80032ba <HAL_I2C_MasterRxCpltCallback>
}
 8003984:	e012      	b.n	80039ac <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d117      	bne.n	80039f8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	461a      	mov	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039e0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80039e2:	e067      	b.n	8003ab4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	611a      	str	r2, [r3, #16]
}
 80039f6:	e05d      	b.n	8003ab4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a00:	d133      	bne.n	8003a6a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b21      	cmp	r3, #33	; 0x21
 8003a0c:	d109      	bne.n	8003a22 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a1e:	611a      	str	r2, [r3, #16]
 8003a20:	e008      	b.n	8003a34 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d004      	beq.n	8003a46 <I2C_Master_SB+0x92>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d108      	bne.n	8003a58 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d032      	beq.n	8003ab4 <I2C_Master_SB+0x100>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d02d      	beq.n	8003ab4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a66:	605a      	str	r2, [r3, #4]
}
 8003a68:	e024      	b.n	8003ab4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10e      	bne.n	8003a90 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	11db      	asrs	r3, r3, #7
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f003 0306 	and.w	r3, r3, #6
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f063 030f 	orn	r3, r3, #15
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	611a      	str	r2, [r3, #16]
}
 8003a8e:	e011      	b.n	8003ab4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d10d      	bne.n	8003ab4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	11db      	asrs	r3, r3, #7
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	f003 0306 	and.w	r3, r3, #6
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	f063 030e 	orn	r3, r3, #14
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	611a      	str	r2, [r3, #16]
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <I2C_Master_ADD10+0x26>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d108      	bne.n	8003af8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00c      	beq.n	8003b08 <I2C_Master_ADD10+0x48>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d007      	beq.n	8003b08 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b06:	605a      	str	r2, [r3, #4]
  }
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b091      	sub	sp, #68	; 0x44
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b22      	cmp	r3, #34	; 0x22
 8003b3c:	f040 8169 	bne.w	8003e12 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10f      	bne.n	8003b68 <I2C_Master_ADDR+0x54>
 8003b48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b4c:	2b40      	cmp	r3, #64	; 0x40
 8003b4e:	d10b      	bne.n	8003b68 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b50:	2300      	movs	r3, #0
 8003b52:	633b      	str	r3, [r7, #48]	; 0x30
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	633b      	str	r3, [r7, #48]	; 0x30
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	e160      	b.n	8003e2a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d11d      	bne.n	8003bac <I2C_Master_ADDR+0x98>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b78:	d118      	bne.n	8003bac <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b9e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	651a      	str	r2, [r3, #80]	; 0x50
 8003baa:	e13e      	b.n	8003e2a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d113      	bne.n	8003bde <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	e115      	b.n	8003e0a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	f040 808a 	bne.w	8003cfe <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bf0:	d137      	bne.n	8003c62 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c00:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c10:	d113      	bne.n	8003c3a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c20:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c22:	2300      	movs	r3, #0
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	e0e7      	b.n	8003e0a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	623b      	str	r3, [r7, #32]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	623b      	str	r3, [r7, #32]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	623b      	str	r3, [r7, #32]
 8003c4e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	e0d3      	b.n	8003e0a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d02e      	beq.n	8003cc6 <I2C_Master_ADDR+0x1b2>
 8003c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d02b      	beq.n	8003cc6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c70:	2b12      	cmp	r3, #18
 8003c72:	d102      	bne.n	8003c7a <I2C_Master_ADDR+0x166>
 8003c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d125      	bne.n	8003cc6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d00e      	beq.n	8003c9e <I2C_Master_ADDR+0x18a>
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d00b      	beq.n	8003c9e <I2C_Master_ADDR+0x18a>
 8003c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c88:	2b10      	cmp	r3, #16
 8003c8a:	d008      	beq.n	8003c9e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	e007      	b.n	8003cae <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cac:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	61fb      	str	r3, [r7, #28]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	e0a1      	b.n	8003e0a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	e085      	b.n	8003e0a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d14d      	bne.n	8003da4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d016      	beq.n	8003d3c <I2C_Master_ADDR+0x228>
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d013      	beq.n	8003d3c <I2C_Master_ADDR+0x228>
 8003d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d16:	2b10      	cmp	r3, #16
 8003d18:	d010      	beq.n	8003d3c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d28:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	e007      	b.n	8003d4c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d4a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5a:	d117      	bne.n	8003d8c <I2C_Master_ADDR+0x278>
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d62:	d00b      	beq.n	8003d7c <I2C_Master_ADDR+0x268>
 8003d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d008      	beq.n	8003d7c <I2C_Master_ADDR+0x268>
 8003d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d005      	beq.n	8003d7c <I2C_Master_ADDR+0x268>
 8003d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d72:	2b10      	cmp	r3, #16
 8003d74:	d002      	beq.n	8003d7c <I2C_Master_ADDR+0x268>
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d107      	bne.n	8003d8c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d8a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	e032      	b.n	8003e0a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003db2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc2:	d117      	bne.n	8003df4 <I2C_Master_ADDR+0x2e0>
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dca:	d00b      	beq.n	8003de4 <I2C_Master_ADDR+0x2d0>
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d008      	beq.n	8003de4 <I2C_Master_ADDR+0x2d0>
 8003dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d005      	beq.n	8003de4 <I2C_Master_ADDR+0x2d0>
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	2b10      	cmp	r3, #16
 8003ddc:	d002      	beq.n	8003de4 <I2C_Master_ADDR+0x2d0>
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d107      	bne.n	8003df4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003df2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003e10:	e00b      	b.n	8003e2a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	68fb      	ldr	r3, [r7, #12]
}
 8003e28:	e7ff      	b.n	8003e2a <I2C_Master_ADDR+0x316>
 8003e2a:	bf00      	nop
 8003e2c:	3744      	adds	r7, #68	; 0x44
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e44:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d02b      	beq.n	8003ea8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	781a      	ldrb	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d114      	bne.n	8003ea8 <I2C_SlaveTransmit_TXE+0x72>
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	2b29      	cmp	r3, #41	; 0x29
 8003e82:	d111      	bne.n	8003ea8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e92:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2221      	movs	r2, #33	; 0x21
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2228      	movs	r2, #40	; 0x28
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff fa13 	bl	80032ce <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d011      	beq.n	8003ee6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	781a      	ldrb	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d02c      	beq.n	8003f66 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d114      	bne.n	8003f66 <I2C_SlaveReceive_RXNE+0x74>
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f40:	d111      	bne.n	8003f66 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f50:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2222      	movs	r2, #34	; 0x22
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2228      	movs	r2, #40	; 0x28
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7fc ffdd 	bl	8000f20 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d012      	beq.n	8003fa6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fcc:	2b28      	cmp	r3, #40	; 0x28
 8003fce:	d125      	bne.n	800401c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fde:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003fea:	2301      	movs	r3, #1
 8003fec:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d103      	bne.n	8004000 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	81bb      	strh	r3, [r7, #12]
 8003ffe:	e002      	b.n	8004006 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800400e:	89ba      	ldrh	r2, [r7, #12]
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	4619      	mov	r1, r3
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7fc ff5b 	bl	8000ed0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800401a:	e00e      	b.n	800403a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401c:	2300      	movs	r3, #0
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004052:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004062:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004064:	2300      	movs	r3, #0
 8004066:	60bb      	str	r3, [r7, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004090:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800409c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040a0:	d172      	bne.n	8004188 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	2b22      	cmp	r3, #34	; 0x22
 80040a6:	d002      	beq.n	80040ae <I2C_Slave_STOPF+0x6a>
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	2b2a      	cmp	r3, #42	; 0x2a
 80040ac:	d135      	bne.n	800411a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f043 0204 	orr.w	r2, r3, #4
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fe fb2d 	bl	8002746 <HAL_DMA_GetState>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d049      	beq.n	8004186 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	4a69      	ldr	r2, [pc, #420]	; (800429c <I2C_Slave_STOPF+0x258>)
 80040f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe faff 	bl	8002702 <HAL_DMA_Abort_IT>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d03d      	beq.n	8004186 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004114:	4610      	mov	r0, r2
 8004116:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004118:	e035      	b.n	8004186 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	b29a      	uxth	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f043 0204 	orr.w	r2, r3, #4
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800414c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe faf7 	bl	8002746 <HAL_DMA_GetState>
 8004158:	4603      	mov	r3, r0
 800415a:	2b01      	cmp	r3, #1
 800415c:	d014      	beq.n	8004188 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004162:	4a4e      	ldr	r2, [pc, #312]	; (800429c <I2C_Slave_STOPF+0x258>)
 8004164:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fac9 	bl	8002702 <HAL_DMA_Abort_IT>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004180:	4610      	mov	r0, r2
 8004182:	4798      	blx	r3
 8004184:	e000      	b.n	8004188 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004186:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d03e      	beq.n	8004210 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b04      	cmp	r3, #4
 800419e:	d112      	bne.n	80041c6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	2b40      	cmp	r3, #64	; 0x40
 80041d2:	d112      	bne.n	80041fa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	f043 0204 	orr.w	r2, r3, #4
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f8b3 	bl	8004384 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800421e:	e039      	b.n	8004294 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	2b2a      	cmp	r3, #42	; 0x2a
 8004224:	d109      	bne.n	800423a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2228      	movs	r2, #40	; 0x28
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7fc fe73 	bl	8000f20 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b28      	cmp	r3, #40	; 0x28
 8004244:	d111      	bne.n	800426a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a15      	ldr	r2, [pc, #84]	; (80042a0 <I2C_Slave_STOPF+0x25c>)
 800424a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fc fe28 	bl	8000eb8 <HAL_I2C_ListenCpltCallback>
}
 8004268:	e014      	b.n	8004294 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	2b22      	cmp	r3, #34	; 0x22
 8004270:	d002      	beq.n	8004278 <I2C_Slave_STOPF+0x234>
 8004272:	7bfb      	ldrb	r3, [r7, #15]
 8004274:	2b22      	cmp	r3, #34	; 0x22
 8004276:	d10d      	bne.n	8004294 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fc fe46 	bl	8000f20 <HAL_I2C_SlaveRxCpltCallback>
}
 8004294:	bf00      	nop
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	080045e9 	.word	0x080045e9
 80042a0:	ffff0000 	.word	0xffff0000

080042a4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d002      	beq.n	80042c6 <I2C_Slave_AF+0x22>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	d129      	bne.n	800431a <I2C_Slave_AF+0x76>
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	2b28      	cmp	r3, #40	; 0x28
 80042ca:	d126      	bne.n	800431a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a2c      	ldr	r2, [pc, #176]	; (8004380 <I2C_Slave_AF+0xdc>)
 80042d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042e0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042ea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fc fdd0 	bl	8000eb8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004318:	e02e      	b.n	8004378 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	2b21      	cmp	r3, #33	; 0x21
 800431e:	d126      	bne.n	800436e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a17      	ldr	r2, [pc, #92]	; (8004380 <I2C_Slave_AF+0xdc>)
 8004324:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2221      	movs	r2, #33	; 0x21
 800432a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800434a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004354:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004364:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fe ffb1 	bl	80032ce <HAL_I2C_SlaveTxCpltCallback>
}
 800436c:	e004      	b.n	8004378 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004376:	615a      	str	r2, [r3, #20]
}
 8004378:	bf00      	nop
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	ffff0000 	.word	0xffff0000

08004384 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004392:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800439a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800439c:	7bbb      	ldrb	r3, [r7, #14]
 800439e:	2b10      	cmp	r3, #16
 80043a0:	d002      	beq.n	80043a8 <I2C_ITError+0x24>
 80043a2:	7bbb      	ldrb	r3, [r7, #14]
 80043a4:	2b40      	cmp	r3, #64	; 0x40
 80043a6:	d10a      	bne.n	80043be <I2C_ITError+0x3a>
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	2b22      	cmp	r3, #34	; 0x22
 80043ac:	d107      	bne.n	80043be <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043bc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043c4:	2b28      	cmp	r3, #40	; 0x28
 80043c6:	d107      	bne.n	80043d8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2228      	movs	r2, #40	; 0x28
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80043d6:	e015      	b.n	8004404 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e6:	d00a      	beq.n	80043fe <I2C_ITError+0x7a>
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	2b60      	cmp	r3, #96	; 0x60
 80043ec:	d007      	beq.n	80043fe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800440e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004412:	d162      	bne.n	80044da <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004422:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b01      	cmp	r3, #1
 8004430:	d020      	beq.n	8004474 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004436:	4a6a      	ldr	r2, [pc, #424]	; (80045e0 <I2C_ITError+0x25c>)
 8004438:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443e:	4618      	mov	r0, r3
 8004440:	f7fe f95f 	bl	8002702 <HAL_DMA_Abort_IT>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 8089 	beq.w	800455e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0201 	bic.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800446e:	4610      	mov	r0, r2
 8004470:	4798      	blx	r3
 8004472:	e074      	b.n	800455e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	4a59      	ldr	r2, [pc, #356]	; (80045e0 <I2C_ITError+0x25c>)
 800447a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	4618      	mov	r0, r3
 8004482:	f7fe f93e 	bl	8002702 <HAL_DMA_Abort_IT>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d068      	beq.n	800455e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004496:	2b40      	cmp	r3, #64	; 0x40
 8004498:	d10b      	bne.n	80044b2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0201 	bic.w	r2, r2, #1
 80044c0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044d4:	4610      	mov	r0, r2
 80044d6:	4798      	blx	r3
 80044d8:	e041      	b.n	800455e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b60      	cmp	r3, #96	; 0x60
 80044e4:	d125      	bne.n	8004532 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fe:	2b40      	cmp	r3, #64	; 0x40
 8004500:	d10b      	bne.n	800451a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0201 	bic.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fe feed 	bl	800330a <HAL_I2C_AbortCpltCallback>
 8004530:	e015      	b.n	800455e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b40      	cmp	r3, #64	; 0x40
 800453e:	d10b      	bne.n	8004558 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7fc fcf3 	bl	8000f44 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10e      	bne.n	800458c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004574:	2b00      	cmp	r3, #0
 8004576:	d109      	bne.n	800458c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800457e:	2b00      	cmp	r3, #0
 8004580:	d104      	bne.n	800458c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800459a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d113      	bne.n	80045d8 <I2C_ITError+0x254>
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	2b28      	cmp	r3, #40	; 0x28
 80045b4:	d110      	bne.n	80045d8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <I2C_ITError+0x260>)
 80045ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fc fc70 	bl	8000eb8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	080045e9 	.word	0x080045e9
 80045e4:	ffff0000 	.word	0xffff0000

080045e8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004600:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004602:	4b4b      	ldr	r3, [pc, #300]	; (8004730 <I2C_DMAAbort+0x148>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	08db      	lsrs	r3, r3, #3
 8004608:	4a4a      	ldr	r2, [pc, #296]	; (8004734 <I2C_DMAAbort+0x14c>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	0a1a      	lsrs	r2, r3, #8
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	00da      	lsls	r2, r3, #3
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f043 0220 	orr.w	r2, r3, #32
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800462e:	e00a      	b.n	8004646 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3b01      	subs	r3, #1
 8004634:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004644:	d0ea      	beq.n	800461c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004652:	2200      	movs	r2, #0
 8004654:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	2200      	movs	r2, #0
 8004664:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004674:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2200      	movs	r2, #0
 800467a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004688:	2200      	movs	r2, #0
 800468a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	2200      	movs	r2, #0
 800469a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0201 	bic.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b60      	cmp	r3, #96	; 0x60
 80046b6:	d10e      	bne.n	80046d6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2200      	movs	r2, #0
 80046cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046ce:	6978      	ldr	r0, [r7, #20]
 80046d0:	f7fe fe1b 	bl	800330a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046d4:	e027      	b.n	8004726 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046d6:	7cfb      	ldrb	r3, [r7, #19]
 80046d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046dc:	2b28      	cmp	r3, #40	; 0x28
 80046de:	d117      	bne.n	8004710 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2200      	movs	r2, #0
 8004704:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2228      	movs	r2, #40	; 0x28
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800470e:	e007      	b.n	8004720 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004720:	6978      	ldr	r0, [r7, #20]
 8004722:	f7fc fc0f 	bl	8000f44 <HAL_I2C_ErrorCallback>
}
 8004726:	bf00      	nop
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000004 	.word	0x20000004
 8004734:	14f8b589 	.word	0x14f8b589

08004738 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004744:	4b13      	ldr	r3, [pc, #76]	; (8004794 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	08db      	lsrs	r3, r3, #3
 800474a:	4a13      	ldr	r2, [pc, #76]	; (8004798 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800474c:	fba2 2303 	umull	r2, r3, r2, r3
 8004750:	0a1a      	lsrs	r2, r3, #8
 8004752:	4613      	mov	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	3b01      	subs	r3, #1
 800475e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d107      	bne.n	8004776 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	f043 0220 	orr.w	r2, r3, #32
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e008      	b.n	8004788 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004784:	d0e9      	beq.n	800475a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	20000004 	.word	0x20000004
 8004798:	14f8b589 	.word	0x14f8b589

0800479c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80047ac:	d103      	bne.n	80047b6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80047b4:	e007      	b.n	80047c6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80047be:	d102      	bne.n	80047c6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2208      	movs	r2, #8
 80047c4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d4:	b08f      	sub	sp, #60	; 0x3c
 80047d6:	af0a      	add	r7, sp, #40	; 0x28
 80047d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e10f      	b.n	8004a04 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f007 f832 	bl	800b868 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2203      	movs	r2, #3
 8004808:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d102      	bne.n	800481e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f003 fb19 	bl	8007e5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	603b      	str	r3, [r7, #0]
 800482e:	687e      	ldr	r6, [r7, #4]
 8004830:	466d      	mov	r5, sp
 8004832:	f106 0410 	add.w	r4, r6, #16
 8004836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800483a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800483c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800483e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004842:	e885 0003 	stmia.w	r5, {r0, r1}
 8004846:	1d33      	adds	r3, r6, #4
 8004848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800484a:	6838      	ldr	r0, [r7, #0]
 800484c:	f003 f9f0 	bl	8007c30 <USB_CoreInit>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d005      	beq.n	8004862 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e0d0      	b.n	8004a04 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2100      	movs	r1, #0
 8004868:	4618      	mov	r0, r3
 800486a:	f003 fb07 	bl	8007e7c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800486e:	2300      	movs	r3, #0
 8004870:	73fb      	strb	r3, [r7, #15]
 8004872:	e04a      	b.n	800490a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004874:	7bfa      	ldrb	r2, [r7, #15]
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	4613      	mov	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	333d      	adds	r3, #61	; 0x3d
 8004884:	2201      	movs	r2, #1
 8004886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004888:	7bfa      	ldrb	r2, [r7, #15]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	333c      	adds	r3, #60	; 0x3c
 8004898:	7bfa      	ldrb	r2, [r7, #15]
 800489a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800489c:	7bfa      	ldrb	r2, [r7, #15]
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	b298      	uxth	r0, r3
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	3344      	adds	r3, #68	; 0x44
 80048b0:	4602      	mov	r2, r0
 80048b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048b4:	7bfa      	ldrb	r2, [r7, #15]
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	4613      	mov	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	3340      	adds	r3, #64	; 0x40
 80048c4:	2200      	movs	r2, #0
 80048c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048c8:	7bfa      	ldrb	r2, [r7, #15]
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	4613      	mov	r3, r2
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	4413      	add	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	3348      	adds	r3, #72	; 0x48
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048dc:	7bfa      	ldrb	r2, [r7, #15]
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	4613      	mov	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	334c      	adds	r3, #76	; 0x4c
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048f0:	7bfa      	ldrb	r2, [r7, #15]
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	4613      	mov	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	3354      	adds	r3, #84	; 0x54
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	3301      	adds	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
 800490a:	7bfa      	ldrb	r2, [r7, #15]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	429a      	cmp	r2, r3
 8004912:	d3af      	bcc.n	8004874 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004914:	2300      	movs	r3, #0
 8004916:	73fb      	strb	r3, [r7, #15]
 8004918:	e044      	b.n	80049a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800491a:	7bfa      	ldrb	r2, [r7, #15]
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	440b      	add	r3, r1
 8004928:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800492c:	2200      	movs	r2, #0
 800492e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004930:	7bfa      	ldrb	r2, [r7, #15]
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004942:	7bfa      	ldrb	r2, [r7, #15]
 8004944:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004946:	7bfa      	ldrb	r2, [r7, #15]
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	440b      	add	r3, r1
 8004954:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004958:	2200      	movs	r2, #0
 800495a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800495c:	7bfa      	ldrb	r2, [r7, #15]
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	4613      	mov	r3, r2
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	4413      	add	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004972:	7bfa      	ldrb	r2, [r7, #15]
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004988:	7bfa      	ldrb	r2, [r7, #15]
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	4613      	mov	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	3301      	adds	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
 80049a4:	7bfa      	ldrb	r2, [r7, #15]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d3b5      	bcc.n	800491a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	687e      	ldr	r6, [r7, #4]
 80049b6:	466d      	mov	r5, sp
 80049b8:	f106 0410 	add.w	r4, r6, #16
 80049bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80049cc:	1d33      	adds	r3, r6, #4
 80049ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049d0:	6838      	ldr	r0, [r7, #0]
 80049d2:	f003 fa9f 	bl	8007f14 <USB_DevInit>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e00d      	b.n	8004a04 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f004 fbee 	bl	80091de <USB_DevDisconnect>

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_PCD_Start+0x1c>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e020      	b.n	8004a6a <HAL_PCD_Start+0x5e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d109      	bne.n	8004a4c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d005      	beq.n	8004a4c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f003 f9f1 	bl	8007e38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f004 fb9e 	bl	800919c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a72:	b590      	push	{r4, r7, lr}
 8004a74:	b08d      	sub	sp, #52	; 0x34
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f004 fc5c 	bl	8009346 <USB_GetMode>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f040 848a 	bne.w	80053aa <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f004 fbc0 	bl	8009220 <USB_ReadInterrupts>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 8480 	beq.w	80053a8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	0a1b      	lsrs	r3, r3, #8
 8004ab2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f004 fbad 	bl	8009220 <USB_ReadInterrupts>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d107      	bne.n	8004ae0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695a      	ldr	r2, [r3, #20]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f002 0202 	and.w	r2, r2, #2
 8004ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f004 fb9b 	bl	8009220 <USB_ReadInterrupts>
 8004aea:	4603      	mov	r3, r0
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	2b10      	cmp	r3, #16
 8004af2:	d161      	bne.n	8004bb8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0210 	bic.w	r2, r2, #16
 8004b02:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	f003 020f 	and.w	r2, r3, #15
 8004b10:	4613      	mov	r3, r2
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4413      	add	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	4413      	add	r3, r2
 8004b20:	3304      	adds	r3, #4
 8004b22:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	0c5b      	lsrs	r3, r3, #17
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d124      	bne.n	8004b7a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d035      	beq.n	8004ba8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	091b      	lsrs	r3, r3, #4
 8004b44:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	6a38      	ldr	r0, [r7, #32]
 8004b50:	f004 f9d2 	bl	8008ef8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	091b      	lsrs	r3, r3, #4
 8004b5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b60:	441a      	add	r2, r3
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	6a1a      	ldr	r2, [r3, #32]
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	091b      	lsrs	r3, r3, #4
 8004b6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b72:	441a      	add	r2, r3
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	621a      	str	r2, [r3, #32]
 8004b78:	e016      	b.n	8004ba8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	0c5b      	lsrs	r3, r3, #17
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	2b06      	cmp	r3, #6
 8004b84:	d110      	bne.n	8004ba8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6a38      	ldr	r0, [r7, #32]
 8004b92:	f004 f9b1 	bl	8008ef8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	6a1a      	ldr	r2, [r3, #32]
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	091b      	lsrs	r3, r3, #4
 8004b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ba2:	441a      	add	r2, r3
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0210 	orr.w	r2, r2, #16
 8004bb6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f004 fb2f 	bl	8009220 <USB_ReadInterrupts>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bcc:	f040 80a7 	bne.w	8004d1e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f004 fb34 	bl	8009246 <USB_ReadDevAllOutEpInterrupt>
 8004bde:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004be0:	e099      	b.n	8004d16 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 808e 	beq.w	8004d0a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f004 fb58 	bl	80092ae <USB_ReadDevOutEPInterrupt>
 8004bfe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00c      	beq.n	8004c24 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	461a      	mov	r2, r3
 8004c18:	2301      	movs	r3, #1
 8004c1a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fec2 	bl	80059a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00c      	beq.n	8004c48 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	2308      	movs	r3, #8
 8004c3e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 ff98 	bl	8005b78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f003 0310 	and.w	r3, r3, #16
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d008      	beq.n	8004c64 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5e:	461a      	mov	r2, r3
 8004c60:	2310      	movs	r3, #16
 8004c62:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d030      	beq.n	8004cd0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c76:	2b80      	cmp	r3, #128	; 0x80
 8004c78:	d109      	bne.n	8004c8e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c8c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c90:	4613      	mov	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	78db      	ldrb	r3, [r3, #3]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d108      	bne.n	8004cbe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f006 fed1 	bl	800ba60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cca:	461a      	mov	r2, r3
 8004ccc:	2302      	movs	r3, #2
 8004cce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d008      	beq.n	8004cec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	2320      	movs	r3, #32
 8004cea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d02:	461a      	mov	r2, r3
 8004d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d08:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f47f af62 	bne.w	8004be2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f004 fa7c 	bl	8009220 <USB_ReadInterrupts>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d32:	f040 80db 	bne.w	8004eec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f004 fa9d 	bl	800927a <USB_ReadDevAllInEpInterrupt>
 8004d40:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004d46:	e0cd      	b.n	8004ee4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 80c2 	beq.w	8004ed8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f004 fac3 	bl	80092ea <USB_ReadDevInEPInterrupt>
 8004d64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d057      	beq.n	8004e20 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	2201      	movs	r2, #1
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	69f9      	ldr	r1, [r7, #28]
 8004d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d90:	4013      	ands	r3, r2
 8004d92:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da0:	461a      	mov	r2, r3
 8004da2:	2301      	movs	r3, #1
 8004da4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d132      	bne.n	8004e14 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db2:	4613      	mov	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	334c      	adds	r3, #76	; 0x4c
 8004dbe:	6819      	ldr	r1, [r3, #0]
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4403      	add	r3, r0
 8004dce:	3348      	adds	r3, #72	; 0x48
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4419      	add	r1, r3
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd8:	4613      	mov	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4403      	add	r3, r0
 8004de2:	334c      	adds	r3, #76	; 0x4c
 8004de4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d113      	bne.n	8004e14 <HAL_PCD_IRQHandler+0x3a2>
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df0:	4613      	mov	r3, r2
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	3354      	adds	r3, #84	; 0x54
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d108      	bne.n	8004e14 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	2101      	movs	r1, #1
 8004e10:	f004 faca 	bl	80093a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	4619      	mov	r1, r3
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f006 fda5 	bl	800b96a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d008      	beq.n	8004e3c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e36:	461a      	mov	r2, r3
 8004e38:	2308      	movs	r3, #8
 8004e3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e52:	461a      	mov	r2, r3
 8004e54:	2310      	movs	r3, #16
 8004e56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6e:	461a      	mov	r2, r3
 8004e70:	2340      	movs	r3, #64	; 0x40
 8004e72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d023      	beq.n	8004ec6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004e7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e80:	6a38      	ldr	r0, [r7, #32]
 8004e82:	f003 f9ab 	bl	80081dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	3338      	adds	r3, #56	; 0x38
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	4413      	add	r3, r2
 8004e96:	3304      	adds	r3, #4
 8004e98:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	78db      	ldrb	r3, [r3, #3]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d108      	bne.n	8004eb4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	4619      	mov	r1, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f006 fde8 	bl	800ba84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004ed0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fcdb 	bl	800588e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	3301      	adds	r3, #1
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f47f af2e 	bne.w	8004d48 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f004 f995 	bl	8009220 <USB_ReadInterrupts>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004efc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f00:	d122      	bne.n	8004f48 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f10:	f023 0301 	bic.w	r3, r3, #1
 8004f14:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d108      	bne.n	8004f32 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f28:	2100      	movs	r1, #0
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fec2 	bl	8005cb4 <HAL_PCDEx_LPM_Callback>
 8004f30:	e002      	b.n	8004f38 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f006 fd86 	bl	800ba44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695a      	ldr	r2, [r3, #20]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004f46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f004 f967 	bl	8009220 <USB_ReadInterrupts>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f5c:	d112      	bne.n	8004f84 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d102      	bne.n	8004f74 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f006 fd42 	bl	800b9f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004f82:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f004 f949 	bl	8009220 <USB_ReadInterrupts>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f98:	f040 80b7 	bne.w	800510a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004faa:	f023 0301 	bic.w	r3, r3, #1
 8004fae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2110      	movs	r1, #16
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f003 f910 	bl	80081dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc0:	e046      	b.n	8005050 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fd4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fe6:	0151      	lsls	r1, r2, #5
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	440a      	add	r2, r1
 8004fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ff4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005002:	461a      	mov	r2, r3
 8005004:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005008:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800501a:	0151      	lsls	r1, r2, #5
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	440a      	add	r2, r1
 8005020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005024:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005028:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	4413      	add	r3, r2
 8005032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800503a:	0151      	lsls	r1, r2, #5
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	440a      	add	r2, r1
 8005040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005044:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005048:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	3301      	adds	r3, #1
 800504e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005056:	429a      	cmp	r2, r3
 8005058:	d3b3      	bcc.n	8004fc2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	69fa      	ldr	r2, [r7, #28]
 8005064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005068:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800506c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	2b00      	cmp	r3, #0
 8005074:	d016      	beq.n	80050a4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005086:	f043 030b 	orr.w	r3, r3, #11
 800508a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800509c:	f043 030b 	orr.w	r3, r3, #11
 80050a0:	6453      	str	r3, [r2, #68]	; 0x44
 80050a2:	e015      	b.n	80050d0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	69fa      	ldr	r2, [r7, #28]
 80050ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80050b6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80050ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ca:	f043 030b 	orr.w	r3, r3, #11
 80050ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80050e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80050f4:	461a      	mov	r2, r3
 80050f6:	f004 f957 	bl	80093a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695a      	ldr	r2, [r3, #20]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005108:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f004 f886 	bl	8009220 <USB_ReadInterrupts>
 8005114:	4603      	mov	r3, r0
 8005116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800511a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800511e:	d124      	bne.n	800516a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4618      	mov	r0, r3
 8005126:	f004 f91c 	bl	8009362 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f003 f8d1 	bl	80082d6 <USB_GetDevSpeed>
 8005134:	4603      	mov	r3, r0
 8005136:	461a      	mov	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681c      	ldr	r4, [r3, #0]
 8005140:	f001 f9e8 	bl	8006514 <HAL_RCC_GetHCLKFreq>
 8005144:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800514a:	b2db      	uxtb	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	4620      	mov	r0, r4
 8005150:	f002 fdd0 	bl	8007cf4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f006 fc30 	bl	800b9ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695a      	ldr	r2, [r3, #20]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005168:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f004 f856 	bl	8009220 <USB_ReadInterrupts>
 8005174:	4603      	mov	r3, r0
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b08      	cmp	r3, #8
 800517c:	d10a      	bne.n	8005194 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f006 fc0d 	bl	800b99e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f002 0208 	and.w	r2, r2, #8
 8005192:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f004 f841 	bl	8009220 <USB_ReadInterrupts>
 800519e:	4603      	mov	r3, r0
 80051a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a4:	2b80      	cmp	r3, #128	; 0x80
 80051a6:	d122      	bne.n	80051ee <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051b4:	2301      	movs	r3, #1
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
 80051b8:	e014      	b.n	80051e4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051be:	4613      	mov	r3, r2
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d105      	bne.n	80051de <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	4619      	mov	r1, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fb27 	bl	800582c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	3301      	adds	r3, #1
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d3e5      	bcc.n	80051ba <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f004 f814 	bl	8009220 <USB_ReadInterrupts>
 80051f8:	4603      	mov	r3, r0
 80051fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005202:	d13b      	bne.n	800527c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005204:	2301      	movs	r3, #1
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
 8005208:	e02b      	b.n	8005262 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521e:	4613      	mov	r3, r2
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	3340      	adds	r3, #64	; 0x40
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d115      	bne.n	800525c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005230:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005232:	2b00      	cmp	r3, #0
 8005234:	da12      	bge.n	800525c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523a:	4613      	mov	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	333f      	adds	r3, #63	; 0x3f
 8005246:	2201      	movs	r2, #1
 8005248:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	b2db      	uxtb	r3, r3
 800524e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005252:	b2db      	uxtb	r3, r3
 8005254:	4619      	mov	r1, r3
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fae8 	bl	800582c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	3301      	adds	r3, #1
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005268:	429a      	cmp	r2, r3
 800526a:	d3ce      	bcc.n	800520a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695a      	ldr	r2, [r3, #20]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800527a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f003 ffcd 	bl	8009220 <USB_ReadInterrupts>
 8005286:	4603      	mov	r3, r0
 8005288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800528c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005290:	d155      	bne.n	800533e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005292:	2301      	movs	r3, #1
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
 8005296:	e045      	b.n	8005324 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ac:	4613      	mov	r3, r2
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	440b      	add	r3, r1
 80052b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d12e      	bne.n	800531e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80052c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	da2b      	bge.n	800531e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80052d2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d121      	bne.n	800531e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052de:	4613      	mov	r3, r2
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	440b      	add	r3, r1
 80052e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80052ec:	2201      	movs	r2, #1
 80052ee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10a      	bne.n	800531e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800531a:	6053      	str	r3, [r2, #4]
            break;
 800531c:	e007      	b.n	800532e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	3301      	adds	r3, #1
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532a:	429a      	cmp	r2, r3
 800532c:	d3b4      	bcc.n	8005298 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695a      	ldr	r2, [r3, #20]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800533c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f003 ff6c 	bl	8009220 <USB_ReadInterrupts>
 8005348:	4603      	mov	r3, r0
 800534a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800534e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005352:	d10a      	bne.n	800536a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f006 fba7 	bl	800baa8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695a      	ldr	r2, [r3, #20]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005368:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f003 ff56 	bl	8009220 <USB_ReadInterrupts>
 8005374:	4603      	mov	r3, r0
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	2b04      	cmp	r3, #4
 800537c:	d115      	bne.n	80053aa <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f006 fb97 	bl	800bac4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6859      	ldr	r1, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
 80053a6:	e000      	b.n	80053aa <HAL_PCD_IRQHandler+0x938>
      return;
 80053a8:	bf00      	nop
    }
  }
}
 80053aa:	3734      	adds	r7, #52	; 0x34
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd90      	pop	{r4, r7, pc}

080053b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_PCD_SetAddress+0x1a>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e013      	b.n	80053f2 <HAL_PCD_SetAddress+0x42>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	78fa      	ldrb	r2, [r7, #3]
 80053d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	78fa      	ldrb	r2, [r7, #3]
 80053e0:	4611      	mov	r1, r2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f003 feb4 	bl	8009150 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	4608      	mov	r0, r1
 8005404:	4611      	mov	r1, r2
 8005406:	461a      	mov	r2, r3
 8005408:	4603      	mov	r3, r0
 800540a:	70fb      	strb	r3, [r7, #3]
 800540c:	460b      	mov	r3, r1
 800540e:	803b      	strh	r3, [r7, #0]
 8005410:	4613      	mov	r3, r2
 8005412:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800541c:	2b00      	cmp	r3, #0
 800541e:	da0f      	bge.n	8005440 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	f003 020f 	and.w	r2, r3, #15
 8005426:	4613      	mov	r3, r2
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	3338      	adds	r3, #56	; 0x38
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	4413      	add	r3, r2
 8005434:	3304      	adds	r3, #4
 8005436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2201      	movs	r2, #1
 800543c:	705a      	strb	r2, [r3, #1]
 800543e:	e00f      	b.n	8005460 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	f003 020f 	and.w	r2, r3, #15
 8005446:	4613      	mov	r3, r2
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	4413      	add	r3, r2
 8005456:	3304      	adds	r3, #4
 8005458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	b2da      	uxtb	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800546c:	883a      	ldrh	r2, [r7, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	78ba      	ldrb	r2, [r7, #2]
 8005476:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	785b      	ldrb	r3, [r3, #1]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800548a:	78bb      	ldrb	r3, [r7, #2]
 800548c:	2b02      	cmp	r3, #2
 800548e:	d102      	bne.n	8005496 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_PCD_EP_Open+0xaa>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e00e      	b.n	80054c2 <HAL_PCD_EP_Open+0xc8>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68f9      	ldr	r1, [r7, #12]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f002 ff34 	bl	8008320 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80054c0:	7afb      	ldrb	r3, [r7, #11]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	460b      	mov	r3, r1
 80054d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	da0f      	bge.n	80054fe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054de:	78fb      	ldrb	r3, [r7, #3]
 80054e0:	f003 020f 	and.w	r2, r3, #15
 80054e4:	4613      	mov	r3, r2
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	4413      	add	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	3338      	adds	r3, #56	; 0x38
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	4413      	add	r3, r2
 80054f2:	3304      	adds	r3, #4
 80054f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	705a      	strb	r2, [r3, #1]
 80054fc:	e00f      	b.n	800551e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	f003 020f 	and.w	r2, r3, #15
 8005504:	4613      	mov	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	4413      	add	r3, r2
 8005514:	3304      	adds	r3, #4
 8005516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	f003 030f 	and.w	r3, r3, #15
 8005524:	b2da      	uxtb	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_PCD_EP_Close+0x6e>
 8005534:	2302      	movs	r3, #2
 8005536:	e00e      	b.n	8005556 <HAL_PCD_EP_Close+0x8c>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68f9      	ldr	r1, [r7, #12]
 8005546:	4618      	mov	r0, r3
 8005548:	f002 ff72 	bl	8008430 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b086      	sub	sp, #24
 8005562:	af00      	add	r7, sp, #0
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
 800556a:	460b      	mov	r3, r1
 800556c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800556e:	7afb      	ldrb	r3, [r7, #11]
 8005570:	f003 020f 	and.w	r2, r3, #15
 8005574:	4613      	mov	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	3304      	adds	r3, #4
 8005586:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2200      	movs	r2, #0
 8005598:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2200      	movs	r2, #0
 800559e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055a0:	7afb      	ldrb	r3, [r7, #11]
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d102      	bne.n	80055ba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055ba:	7afb      	ldrb	r3, [r7, #11]
 80055bc:	f003 030f 	and.w	r3, r3, #15
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d109      	bne.n	80055d8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	461a      	mov	r2, r3
 80055d0:	6979      	ldr	r1, [r7, #20]
 80055d2:	f003 fa51 	bl	8008a78 <USB_EP0StartXfer>
 80055d6:	e008      	b.n	80055ea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6818      	ldr	r0, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	6979      	ldr	r1, [r7, #20]
 80055e6:	f002 ffff 	bl	80085e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	f003 020f 	and.w	r2, r3, #15
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	4613      	mov	r3, r2
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005616:	681b      	ldr	r3, [r3, #0]
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	607a      	str	r2, [r7, #4]
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	460b      	mov	r3, r1
 8005632:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005634:	7afb      	ldrb	r3, [r7, #11]
 8005636:	f003 020f 	and.w	r2, r3, #15
 800563a:	4613      	mov	r3, r2
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	4413      	add	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	3338      	adds	r3, #56	; 0x38
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	3304      	adds	r3, #4
 800564a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2200      	movs	r2, #0
 800565c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2201      	movs	r2, #1
 8005662:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005664:	7afb      	ldrb	r3, [r7, #11]
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	b2da      	uxtb	r2, r3
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d102      	bne.n	800567e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800567e:	7afb      	ldrb	r3, [r7, #11]
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	2b00      	cmp	r3, #0
 8005686:	d109      	bne.n	800569c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	b2db      	uxtb	r3, r3
 8005692:	461a      	mov	r2, r3
 8005694:	6979      	ldr	r1, [r7, #20]
 8005696:	f003 f9ef 	bl	8008a78 <USB_EP0StartXfer>
 800569a:	e008      	b.n	80056ae <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	461a      	mov	r2, r3
 80056a8:	6979      	ldr	r1, [r7, #20]
 80056aa:	f002 ff9d 	bl	80085e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	f003 020f 	and.w	r2, r3, #15
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d901      	bls.n	80056d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e050      	b.n	8005778 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	da0f      	bge.n	80056fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	f003 020f 	and.w	r2, r3, #15
 80056e4:	4613      	mov	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	3338      	adds	r3, #56	; 0x38
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	4413      	add	r3, r2
 80056f2:	3304      	adds	r3, #4
 80056f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	705a      	strb	r2, [r3, #1]
 80056fc:	e00d      	b.n	800571a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80056fe:	78fa      	ldrb	r2, [r7, #3]
 8005700:	4613      	mov	r3, r2
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	4413      	add	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	4413      	add	r3, r2
 8005710:	3304      	adds	r3, #4
 8005712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	b2da      	uxtb	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_PCD_EP_SetStall+0x82>
 8005736:	2302      	movs	r3, #2
 8005738:	e01e      	b.n	8005778 <HAL_PCD_EP_SetStall+0xc0>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68f9      	ldr	r1, [r7, #12]
 8005748:	4618      	mov	r0, r3
 800574a:	f003 fc2d 	bl	8008fa8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800574e:	78fb      	ldrb	r3, [r7, #3]
 8005750:	f003 030f 	and.w	r3, r3, #15
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10a      	bne.n	800576e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	b2d9      	uxtb	r1, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005768:	461a      	mov	r2, r3
 800576a:	f003 fe1d 	bl	80093a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	f003 020f 	and.w	r2, r3, #15
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	429a      	cmp	r2, r3
 8005798:	d901      	bls.n	800579e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e042      	b.n	8005824 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800579e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	da0f      	bge.n	80057c6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057a6:	78fb      	ldrb	r3, [r7, #3]
 80057a8:	f003 020f 	and.w	r2, r3, #15
 80057ac:	4613      	mov	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	3338      	adds	r3, #56	; 0x38
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	4413      	add	r3, r2
 80057ba:	3304      	adds	r3, #4
 80057bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	705a      	strb	r2, [r3, #1]
 80057c4:	e00f      	b.n	80057e6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057c6:	78fb      	ldrb	r3, [r7, #3]
 80057c8:	f003 020f 	and.w	r2, r3, #15
 80057cc:	4613      	mov	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	4413      	add	r3, r2
 80057dc:	3304      	adds	r3, #4
 80057de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <HAL_PCD_EP_ClrStall+0x86>
 8005802:	2302      	movs	r3, #2
 8005804:	e00e      	b.n	8005824 <HAL_PCD_EP_ClrStall+0xa4>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68f9      	ldr	r1, [r7, #12]
 8005814:	4618      	mov	r0, r3
 8005816:	f003 fc35 	bl	8009084 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800583c:	2b00      	cmp	r3, #0
 800583e:	da0c      	bge.n	800585a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	f003 020f 	and.w	r2, r3, #15
 8005846:	4613      	mov	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	4413      	add	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	3338      	adds	r3, #56	; 0x38
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	4413      	add	r3, r2
 8005854:	3304      	adds	r3, #4
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	e00c      	b.n	8005874 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	f003 020f 	and.w	r2, r3, #15
 8005860:	4613      	mov	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	4413      	add	r3, r2
 8005870:	3304      	adds	r3, #4
 8005872:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68f9      	ldr	r1, [r7, #12]
 800587a:	4618      	mov	r0, r3
 800587c:	f003 fa54 	bl	8008d28 <USB_EPStopXfer>
 8005880:	4603      	mov	r3, r0
 8005882:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005884:	7afb      	ldrb	r3, [r7, #11]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b08a      	sub	sp, #40	; 0x28
 8005892:	af02      	add	r7, sp, #8
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	4613      	mov	r3, r2
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	3338      	adds	r3, #56	; 0x38
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	4413      	add	r3, r2
 80058b2:	3304      	adds	r3, #4
 80058b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6a1a      	ldr	r2, [r3, #32]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d901      	bls.n	80058c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e06c      	b.n	80059a0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d902      	bls.n	80058e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	3303      	adds	r3, #3
 80058e6:	089b      	lsrs	r3, r3, #2
 80058e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058ea:	e02b      	b.n	8005944 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	699a      	ldr	r2, [r3, #24]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d902      	bls.n	8005908 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	3303      	adds	r3, #3
 800590c:	089b      	lsrs	r3, r3, #2
 800590e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6919      	ldr	r1, [r3, #16]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	b2da      	uxtb	r2, r3
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005920:	b2db      	uxtb	r3, r3
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	4603      	mov	r3, r0
 8005926:	6978      	ldr	r0, [r7, #20]
 8005928:	f003 faa8 	bl	8008e7c <USB_WritePacket>

    ep->xfer_buff  += len;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	441a      	add	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a1a      	ldr	r2, [r3, #32]
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	441a      	add	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	429a      	cmp	r2, r3
 8005958:	d809      	bhi.n	800596e <PCD_WriteEmptyTxFifo+0xe0>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6a1a      	ldr	r2, [r3, #32]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005962:	429a      	cmp	r2, r3
 8005964:	d203      	bcs.n	800596e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1be      	bne.n	80058ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	429a      	cmp	r2, r3
 8005978:	d811      	bhi.n	800599e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	2201      	movs	r2, #1
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	43db      	mvns	r3, r3
 8005994:	6939      	ldr	r1, [r7, #16]
 8005996:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800599a:	4013      	ands	r3, r2
 800599c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3720      	adds	r7, #32
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	333c      	adds	r3, #60	; 0x3c
 80059c0:	3304      	adds	r3, #4
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d17b      	bne.n	8005ad6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d015      	beq.n	8005a14 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	4a61      	ldr	r2, [pc, #388]	; (8005b70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	f240 80b9 	bls.w	8005b64 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 80b3 	beq.w	8005b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a10:	6093      	str	r3, [r2, #8]
 8005a12:	e0a7      	b.n	8005b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	2320      	movs	r3, #32
 8005a2e:	6093      	str	r3, [r2, #8]
 8005a30:	e098      	b.n	8005b64 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f040 8093 	bne.w	8005b64 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	4a4b      	ldr	r2, [pc, #300]	; (8005b70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d90f      	bls.n	8005a66 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a62:	6093      	str	r3, [r2, #8]
 8005a64:	e07e      	b.n	8005b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	4413      	add	r3, r2
 8005a78:	3304      	adds	r3, #4
 8005a7a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	0159      	lsls	r1, r3, #5
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	440b      	add	r3, r1
 8005a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a92:	1ad2      	subs	r2, r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d114      	bne.n	8005ac8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	f003 fc78 	bl	80093a8 <USB_EP0_OutStart>
 8005ab8:	e006      	b.n	8005ac8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	441a      	add	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f005 ff30 	bl	800b934 <HAL_PCD_DataOutStageCallback>
 8005ad4:	e046      	b.n	8005b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	4a26      	ldr	r2, [pc, #152]	; (8005b74 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d124      	bne.n	8005b28 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af4:	461a      	mov	r2, r3
 8005af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005afa:	6093      	str	r3, [r2, #8]
 8005afc:	e032      	b.n	8005b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b14:	461a      	mov	r2, r3
 8005b16:	2320      	movs	r3, #32
 8005b18:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f005 ff07 	bl	800b934 <HAL_PCD_DataOutStageCallback>
 8005b26:	e01d      	b.n	8005b64 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d114      	bne.n	8005b58 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	4613      	mov	r3, r2
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	4413      	add	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	440b      	add	r3, r1
 8005b3c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d108      	bne.n	8005b58 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b50:	461a      	mov	r2, r3
 8005b52:	2100      	movs	r1, #0
 8005b54:	f003 fc28 	bl	80093a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f005 fee8 	bl	800b934 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3720      	adds	r7, #32
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	4f54300a 	.word	0x4f54300a
 8005b74:	4f54310a 	.word	0x4f54310a

08005b78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	333c      	adds	r3, #60	; 0x3c
 8005b90:	3304      	adds	r3, #4
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4a15      	ldr	r2, [pc, #84]	; (8005c00 <PCD_EP_OutSetupPacket_int+0x88>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d90e      	bls.n	8005bcc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d009      	beq.n	8005bcc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f005 fe9f 	bl	800b910 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4a0a      	ldr	r2, [pc, #40]	; (8005c00 <PCD_EP_OutSetupPacket_int+0x88>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d90c      	bls.n	8005bf4 <PCD_EP_OutSetupPacket_int+0x7c>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d108      	bne.n	8005bf4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005bec:	461a      	mov	r2, r3
 8005bee:	2101      	movs	r1, #1
 8005bf0:	f003 fbda 	bl	80093a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	4f54300a 	.word	0x4f54300a

08005c04 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	70fb      	strb	r3, [r7, #3]
 8005c10:	4613      	mov	r3, r2
 8005c12:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005c1c:	78fb      	ldrb	r3, [r7, #3]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d107      	bne.n	8005c32 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005c22:	883b      	ldrh	r3, [r7, #0]
 8005c24:	0419      	lsls	r1, r3, #16
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c30:	e028      	b.n	8005c84 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c38:	0c1b      	lsrs	r3, r3, #16
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c40:	2300      	movs	r3, #0
 8005c42:	73fb      	strb	r3, [r7, #15]
 8005c44:	e00d      	b.n	8005c62 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
 8005c4c:	3340      	adds	r3, #64	; 0x40
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	0c1b      	lsrs	r3, r3, #16
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	4413      	add	r3, r2
 8005c5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	73fb      	strb	r3, [r7, #15]
 8005c62:	7bfa      	ldrb	r2, [r7, #15]
 8005c64:	78fb      	ldrb	r3, [r7, #3]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d3ec      	bcc.n	8005c46 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005c6c:	883b      	ldrh	r3, [r7, #0]
 8005c6e:	0418      	lsls	r0, r3, #16
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6819      	ldr	r1, [r3, #0]
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	4302      	orrs	r2, r0
 8005c7c:	3340      	adds	r3, #64	; 0x40
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	887a      	ldrh	r2, [r7, #2]
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e267      	b.n	80061ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d075      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cea:	4b88      	ldr	r3, [pc, #544]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 030c 	and.w	r3, r3, #12
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	d00c      	beq.n	8005d10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cf6:	4b85      	ldr	r3, [pc, #532]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cfe:	2b08      	cmp	r3, #8
 8005d00:	d112      	bne.n	8005d28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d02:	4b82      	ldr	r3, [pc, #520]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d0e:	d10b      	bne.n	8005d28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d10:	4b7e      	ldr	r3, [pc, #504]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d05b      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x108>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d157      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e242      	b.n	80061ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d30:	d106      	bne.n	8005d40 <HAL_RCC_OscConfig+0x74>
 8005d32:	4b76      	ldr	r3, [pc, #472]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a75      	ldr	r2, [pc, #468]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	e01d      	b.n	8005d7c <HAL_RCC_OscConfig+0xb0>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d48:	d10c      	bne.n	8005d64 <HAL_RCC_OscConfig+0x98>
 8005d4a:	4b70      	ldr	r3, [pc, #448]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a6f      	ldr	r2, [pc, #444]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	4b6d      	ldr	r3, [pc, #436]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a6c      	ldr	r2, [pc, #432]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	e00b      	b.n	8005d7c <HAL_RCC_OscConfig+0xb0>
 8005d64:	4b69      	ldr	r3, [pc, #420]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a68      	ldr	r2, [pc, #416]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	4b66      	ldr	r3, [pc, #408]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a65      	ldr	r2, [pc, #404]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d013      	beq.n	8005dac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d84:	f7fc f90a 	bl	8001f9c <HAL_GetTick>
 8005d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d8a:	e008      	b.n	8005d9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d8c:	f7fc f906 	bl	8001f9c <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b64      	cmp	r3, #100	; 0x64
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e207      	b.n	80061ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d9e:	4b5b      	ldr	r3, [pc, #364]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0f0      	beq.n	8005d8c <HAL_RCC_OscConfig+0xc0>
 8005daa:	e014      	b.n	8005dd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dac:	f7fc f8f6 	bl	8001f9c <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005db4:	f7fc f8f2 	bl	8001f9c <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b64      	cmp	r3, #100	; 0x64
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e1f3      	b.n	80061ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dc6:	4b51      	ldr	r3, [pc, #324]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1f0      	bne.n	8005db4 <HAL_RCC_OscConfig+0xe8>
 8005dd2:	e000      	b.n	8005dd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d063      	beq.n	8005eaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005de2:	4b4a      	ldr	r3, [pc, #296]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 030c 	and.w	r3, r3, #12
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00b      	beq.n	8005e06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dee:	4b47      	ldr	r3, [pc, #284]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005df6:	2b08      	cmp	r3, #8
 8005df8:	d11c      	bne.n	8005e34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dfa:	4b44      	ldr	r3, [pc, #272]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d116      	bne.n	8005e34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e06:	4b41      	ldr	r3, [pc, #260]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d005      	beq.n	8005e1e <HAL_RCC_OscConfig+0x152>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d001      	beq.n	8005e1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e1c7      	b.n	80061ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e1e:	4b3b      	ldr	r3, [pc, #236]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	4937      	ldr	r1, [pc, #220]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e32:	e03a      	b.n	8005eaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d020      	beq.n	8005e7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e3c:	4b34      	ldr	r3, [pc, #208]	; (8005f10 <HAL_RCC_OscConfig+0x244>)
 8005e3e:	2201      	movs	r2, #1
 8005e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e42:	f7fc f8ab 	bl	8001f9c <HAL_GetTick>
 8005e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e48:	e008      	b.n	8005e5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e4a:	f7fc f8a7 	bl	8001f9c <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e1a8      	b.n	80061ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e5c:	4b2b      	ldr	r3, [pc, #172]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0f0      	beq.n	8005e4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e68:	4b28      	ldr	r3, [pc, #160]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	4925      	ldr	r1, [pc, #148]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	600b      	str	r3, [r1, #0]
 8005e7c:	e015      	b.n	8005eaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e7e:	4b24      	ldr	r3, [pc, #144]	; (8005f10 <HAL_RCC_OscConfig+0x244>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e84:	f7fc f88a 	bl	8001f9c <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e8c:	f7fc f886 	bl	8001f9c <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e187      	b.n	80061ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e9e:	4b1b      	ldr	r3, [pc, #108]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f0      	bne.n	8005e8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d036      	beq.n	8005f24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d016      	beq.n	8005eec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ebe:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <HAL_RCC_OscConfig+0x248>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec4:	f7fc f86a 	bl	8001f9c <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ecc:	f7fc f866 	bl	8001f9c <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e167      	b.n	80061ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ede:	4b0b      	ldr	r3, [pc, #44]	; (8005f0c <HAL_RCC_OscConfig+0x240>)
 8005ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0f0      	beq.n	8005ecc <HAL_RCC_OscConfig+0x200>
 8005eea:	e01b      	b.n	8005f24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eec:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <HAL_RCC_OscConfig+0x248>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ef2:	f7fc f853 	bl	8001f9c <HAL_GetTick>
 8005ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ef8:	e00e      	b.n	8005f18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005efa:	f7fc f84f 	bl	8001f9c <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d907      	bls.n	8005f18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e150      	b.n	80061ae <HAL_RCC_OscConfig+0x4e2>
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	42470000 	.word	0x42470000
 8005f14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f18:	4b88      	ldr	r3, [pc, #544]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8005f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1ea      	bne.n	8005efa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 8097 	beq.w	8006060 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f32:	2300      	movs	r3, #0
 8005f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f36:	4b81      	ldr	r3, [pc, #516]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10f      	bne.n	8005f62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f42:	2300      	movs	r3, #0
 8005f44:	60bb      	str	r3, [r7, #8]
 8005f46:	4b7d      	ldr	r3, [pc, #500]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	4a7c      	ldr	r2, [pc, #496]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8005f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f50:	6413      	str	r3, [r2, #64]	; 0x40
 8005f52:	4b7a      	ldr	r3, [pc, #488]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f5a:	60bb      	str	r3, [r7, #8]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f62:	4b77      	ldr	r3, [pc, #476]	; (8006140 <HAL_RCC_OscConfig+0x474>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d118      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f6e:	4b74      	ldr	r3, [pc, #464]	; (8006140 <HAL_RCC_OscConfig+0x474>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a73      	ldr	r2, [pc, #460]	; (8006140 <HAL_RCC_OscConfig+0x474>)
 8005f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f7a:	f7fc f80f 	bl	8001f9c <HAL_GetTick>
 8005f7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f80:	e008      	b.n	8005f94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f82:	f7fc f80b 	bl	8001f9c <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e10c      	b.n	80061ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f94:	4b6a      	ldr	r3, [pc, #424]	; (8006140 <HAL_RCC_OscConfig+0x474>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0f0      	beq.n	8005f82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d106      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x2ea>
 8005fa8:	4b64      	ldr	r3, [pc, #400]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8005faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fac:	4a63      	ldr	r2, [pc, #396]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8005fae:	f043 0301 	orr.w	r3, r3, #1
 8005fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb4:	e01c      	b.n	8005ff0 <HAL_RCC_OscConfig+0x324>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	2b05      	cmp	r3, #5
 8005fbc:	d10c      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x30c>
 8005fbe:	4b5f      	ldr	r3, [pc, #380]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc2:	4a5e      	ldr	r2, [pc, #376]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8005fc4:	f043 0304 	orr.w	r3, r3, #4
 8005fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005fca:	4b5c      	ldr	r3, [pc, #368]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8005fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fce:	4a5b      	ldr	r2, [pc, #364]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8005fd0:	f043 0301 	orr.w	r3, r3, #1
 8005fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd6:	e00b      	b.n	8005ff0 <HAL_RCC_OscConfig+0x324>
 8005fd8:	4b58      	ldr	r3, [pc, #352]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8005fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fdc:	4a57      	ldr	r2, [pc, #348]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8005fde:	f023 0301 	bic.w	r3, r3, #1
 8005fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe4:	4b55      	ldr	r3, [pc, #340]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8005fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe8:	4a54      	ldr	r2, [pc, #336]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8005fea:	f023 0304 	bic.w	r3, r3, #4
 8005fee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d015      	beq.n	8006024 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff8:	f7fb ffd0 	bl	8001f9c <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ffe:	e00a      	b.n	8006016 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006000:	f7fb ffcc 	bl	8001f9c <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	f241 3288 	movw	r2, #5000	; 0x1388
 800600e:	4293      	cmp	r3, r2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e0cb      	b.n	80061ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006016:	4b49      	ldr	r3, [pc, #292]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8006018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0ee      	beq.n	8006000 <HAL_RCC_OscConfig+0x334>
 8006022:	e014      	b.n	800604e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006024:	f7fb ffba 	bl	8001f9c <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800602a:	e00a      	b.n	8006042 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800602c:	f7fb ffb6 	bl	8001f9c <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	f241 3288 	movw	r2, #5000	; 0x1388
 800603a:	4293      	cmp	r3, r2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e0b5      	b.n	80061ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006042:	4b3e      	ldr	r3, [pc, #248]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8006044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1ee      	bne.n	800602c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800604e:	7dfb      	ldrb	r3, [r7, #23]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d105      	bne.n	8006060 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006054:	4b39      	ldr	r3, [pc, #228]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	4a38      	ldr	r2, [pc, #224]	; (800613c <HAL_RCC_OscConfig+0x470>)
 800605a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800605e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 80a1 	beq.w	80061ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800606a:	4b34      	ldr	r3, [pc, #208]	; (800613c <HAL_RCC_OscConfig+0x470>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 030c 	and.w	r3, r3, #12
 8006072:	2b08      	cmp	r3, #8
 8006074:	d05c      	beq.n	8006130 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	2b02      	cmp	r3, #2
 800607c:	d141      	bne.n	8006102 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800607e:	4b31      	ldr	r3, [pc, #196]	; (8006144 <HAL_RCC_OscConfig+0x478>)
 8006080:	2200      	movs	r2, #0
 8006082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006084:	f7fb ff8a 	bl	8001f9c <HAL_GetTick>
 8006088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800608a:	e008      	b.n	800609e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800608c:	f7fb ff86 	bl	8001f9c <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b02      	cmp	r3, #2
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e087      	b.n	80061ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800609e:	4b27      	ldr	r3, [pc, #156]	; (800613c <HAL_RCC_OscConfig+0x470>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1f0      	bne.n	800608c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	69da      	ldr	r2, [r3, #28]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	019b      	lsls	r3, r3, #6
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c0:	085b      	lsrs	r3, r3, #1
 80060c2:	3b01      	subs	r3, #1
 80060c4:	041b      	lsls	r3, r3, #16
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060cc:	061b      	lsls	r3, r3, #24
 80060ce:	491b      	ldr	r1, [pc, #108]	; (800613c <HAL_RCC_OscConfig+0x470>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060d4:	4b1b      	ldr	r3, [pc, #108]	; (8006144 <HAL_RCC_OscConfig+0x478>)
 80060d6:	2201      	movs	r2, #1
 80060d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060da:	f7fb ff5f 	bl	8001f9c <HAL_GetTick>
 80060de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060e0:	e008      	b.n	80060f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060e2:	f7fb ff5b 	bl	8001f9c <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e05c      	b.n	80061ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060f4:	4b11      	ldr	r3, [pc, #68]	; (800613c <HAL_RCC_OscConfig+0x470>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0f0      	beq.n	80060e2 <HAL_RCC_OscConfig+0x416>
 8006100:	e054      	b.n	80061ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006102:	4b10      	ldr	r3, [pc, #64]	; (8006144 <HAL_RCC_OscConfig+0x478>)
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006108:	f7fb ff48 	bl	8001f9c <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006110:	f7fb ff44 	bl	8001f9c <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e045      	b.n	80061ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006122:	4b06      	ldr	r3, [pc, #24]	; (800613c <HAL_RCC_OscConfig+0x470>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1f0      	bne.n	8006110 <HAL_RCC_OscConfig+0x444>
 800612e:	e03d      	b.n	80061ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d107      	bne.n	8006148 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e038      	b.n	80061ae <HAL_RCC_OscConfig+0x4e2>
 800613c:	40023800 	.word	0x40023800
 8006140:	40007000 	.word	0x40007000
 8006144:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006148:	4b1b      	ldr	r3, [pc, #108]	; (80061b8 <HAL_RCC_OscConfig+0x4ec>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d028      	beq.n	80061a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006160:	429a      	cmp	r2, r3
 8006162:	d121      	bne.n	80061a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800616e:	429a      	cmp	r2, r3
 8006170:	d11a      	bne.n	80061a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006178:	4013      	ands	r3, r2
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800617e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006180:	4293      	cmp	r3, r2
 8006182:	d111      	bne.n	80061a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	085b      	lsrs	r3, r3, #1
 8006190:	3b01      	subs	r3, #1
 8006192:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006194:	429a      	cmp	r2, r3
 8006196:	d107      	bne.n	80061a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d001      	beq.n	80061ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e000      	b.n	80061ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40023800 	.word	0x40023800

080061bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e0cc      	b.n	800636a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061d0:	4b68      	ldr	r3, [pc, #416]	; (8006374 <HAL_RCC_ClockConfig+0x1b8>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d90c      	bls.n	80061f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061de:	4b65      	ldr	r3, [pc, #404]	; (8006374 <HAL_RCC_ClockConfig+0x1b8>)
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061e6:	4b63      	ldr	r3, [pc, #396]	; (8006374 <HAL_RCC_ClockConfig+0x1b8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0307 	and.w	r3, r3, #7
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d001      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e0b8      	b.n	800636a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d020      	beq.n	8006246 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d005      	beq.n	800621c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006210:	4b59      	ldr	r3, [pc, #356]	; (8006378 <HAL_RCC_ClockConfig+0x1bc>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	4a58      	ldr	r2, [pc, #352]	; (8006378 <HAL_RCC_ClockConfig+0x1bc>)
 8006216:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800621a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006228:	4b53      	ldr	r3, [pc, #332]	; (8006378 <HAL_RCC_ClockConfig+0x1bc>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	4a52      	ldr	r2, [pc, #328]	; (8006378 <HAL_RCC_ClockConfig+0x1bc>)
 800622e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006232:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006234:	4b50      	ldr	r3, [pc, #320]	; (8006378 <HAL_RCC_ClockConfig+0x1bc>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	494d      	ldr	r1, [pc, #308]	; (8006378 <HAL_RCC_ClockConfig+0x1bc>)
 8006242:	4313      	orrs	r3, r2
 8006244:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d044      	beq.n	80062dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d107      	bne.n	800626a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800625a:	4b47      	ldr	r3, [pc, #284]	; (8006378 <HAL_RCC_ClockConfig+0x1bc>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d119      	bne.n	800629a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e07f      	b.n	800636a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2b02      	cmp	r3, #2
 8006270:	d003      	beq.n	800627a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006276:	2b03      	cmp	r3, #3
 8006278:	d107      	bne.n	800628a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800627a:	4b3f      	ldr	r3, [pc, #252]	; (8006378 <HAL_RCC_ClockConfig+0x1bc>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d109      	bne.n	800629a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e06f      	b.n	800636a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800628a:	4b3b      	ldr	r3, [pc, #236]	; (8006378 <HAL_RCC_ClockConfig+0x1bc>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e067      	b.n	800636a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800629a:	4b37      	ldr	r3, [pc, #220]	; (8006378 <HAL_RCC_ClockConfig+0x1bc>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f023 0203 	bic.w	r2, r3, #3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	4934      	ldr	r1, [pc, #208]	; (8006378 <HAL_RCC_ClockConfig+0x1bc>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062ac:	f7fb fe76 	bl	8001f9c <HAL_GetTick>
 80062b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062b2:	e00a      	b.n	80062ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062b4:	f7fb fe72 	bl	8001f9c <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	f241 3288 	movw	r2, #5000	; 0x1388
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e04f      	b.n	800636a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ca:	4b2b      	ldr	r3, [pc, #172]	; (8006378 <HAL_RCC_ClockConfig+0x1bc>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 020c 	and.w	r2, r3, #12
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	429a      	cmp	r2, r3
 80062da:	d1eb      	bne.n	80062b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062dc:	4b25      	ldr	r3, [pc, #148]	; (8006374 <HAL_RCC_ClockConfig+0x1b8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d20c      	bcs.n	8006304 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ea:	4b22      	ldr	r3, [pc, #136]	; (8006374 <HAL_RCC_ClockConfig+0x1b8>)
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f2:	4b20      	ldr	r3, [pc, #128]	; (8006374 <HAL_RCC_ClockConfig+0x1b8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d001      	beq.n	8006304 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e032      	b.n	800636a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b00      	cmp	r3, #0
 800630e:	d008      	beq.n	8006322 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006310:	4b19      	ldr	r3, [pc, #100]	; (8006378 <HAL_RCC_ClockConfig+0x1bc>)
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	4916      	ldr	r1, [pc, #88]	; (8006378 <HAL_RCC_ClockConfig+0x1bc>)
 800631e:	4313      	orrs	r3, r2
 8006320:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0308 	and.w	r3, r3, #8
 800632a:	2b00      	cmp	r3, #0
 800632c:	d009      	beq.n	8006342 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800632e:	4b12      	ldr	r3, [pc, #72]	; (8006378 <HAL_RCC_ClockConfig+0x1bc>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	490e      	ldr	r1, [pc, #56]	; (8006378 <HAL_RCC_ClockConfig+0x1bc>)
 800633e:	4313      	orrs	r3, r2
 8006340:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006342:	f000 f821 	bl	8006388 <HAL_RCC_GetSysClockFreq>
 8006346:	4602      	mov	r2, r0
 8006348:	4b0b      	ldr	r3, [pc, #44]	; (8006378 <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	091b      	lsrs	r3, r3, #4
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	490a      	ldr	r1, [pc, #40]	; (800637c <HAL_RCC_ClockConfig+0x1c0>)
 8006354:	5ccb      	ldrb	r3, [r1, r3]
 8006356:	fa22 f303 	lsr.w	r3, r2, r3
 800635a:	4a09      	ldr	r2, [pc, #36]	; (8006380 <HAL_RCC_ClockConfig+0x1c4>)
 800635c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800635e:	4b09      	ldr	r3, [pc, #36]	; (8006384 <HAL_RCC_ClockConfig+0x1c8>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f7fb fdd6 	bl	8001f14 <HAL_InitTick>

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	40023c00 	.word	0x40023c00
 8006378:	40023800 	.word	0x40023800
 800637c:	0800d8f8 	.word	0x0800d8f8
 8006380:	20000004 	.word	0x20000004
 8006384:	20000008 	.word	0x20000008

08006388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800638c:	b090      	sub	sp, #64	; 0x40
 800638e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	637b      	str	r3, [r7, #52]	; 0x34
 8006394:	2300      	movs	r3, #0
 8006396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006398:	2300      	movs	r3, #0
 800639a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063a0:	4b59      	ldr	r3, [pc, #356]	; (8006508 <HAL_RCC_GetSysClockFreq+0x180>)
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f003 030c 	and.w	r3, r3, #12
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d00d      	beq.n	80063c8 <HAL_RCC_GetSysClockFreq+0x40>
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	f200 80a1 	bhi.w	80064f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <HAL_RCC_GetSysClockFreq+0x34>
 80063b6:	2b04      	cmp	r3, #4
 80063b8:	d003      	beq.n	80063c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80063ba:	e09b      	b.n	80064f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063bc:	4b53      	ldr	r3, [pc, #332]	; (800650c <HAL_RCC_GetSysClockFreq+0x184>)
 80063be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80063c0:	e09b      	b.n	80064fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063c2:	4b53      	ldr	r3, [pc, #332]	; (8006510 <HAL_RCC_GetSysClockFreq+0x188>)
 80063c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80063c6:	e098      	b.n	80064fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063c8:	4b4f      	ldr	r3, [pc, #316]	; (8006508 <HAL_RCC_GetSysClockFreq+0x180>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063d2:	4b4d      	ldr	r3, [pc, #308]	; (8006508 <HAL_RCC_GetSysClockFreq+0x180>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d028      	beq.n	8006430 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063de:	4b4a      	ldr	r3, [pc, #296]	; (8006508 <HAL_RCC_GetSysClockFreq+0x180>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	099b      	lsrs	r3, r3, #6
 80063e4:	2200      	movs	r2, #0
 80063e6:	623b      	str	r3, [r7, #32]
 80063e8:	627a      	str	r2, [r7, #36]	; 0x24
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80063f0:	2100      	movs	r1, #0
 80063f2:	4b47      	ldr	r3, [pc, #284]	; (8006510 <HAL_RCC_GetSysClockFreq+0x188>)
 80063f4:	fb03 f201 	mul.w	r2, r3, r1
 80063f8:	2300      	movs	r3, #0
 80063fa:	fb00 f303 	mul.w	r3, r0, r3
 80063fe:	4413      	add	r3, r2
 8006400:	4a43      	ldr	r2, [pc, #268]	; (8006510 <HAL_RCC_GetSysClockFreq+0x188>)
 8006402:	fba0 1202 	umull	r1, r2, r0, r2
 8006406:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006408:	460a      	mov	r2, r1
 800640a:	62ba      	str	r2, [r7, #40]	; 0x28
 800640c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800640e:	4413      	add	r3, r2
 8006410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006414:	2200      	movs	r2, #0
 8006416:	61bb      	str	r3, [r7, #24]
 8006418:	61fa      	str	r2, [r7, #28]
 800641a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800641e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006422:	f7fa fbcb 	bl	8000bbc <__aeabi_uldivmod>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4613      	mov	r3, r2
 800642c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800642e:	e053      	b.n	80064d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006430:	4b35      	ldr	r3, [pc, #212]	; (8006508 <HAL_RCC_GetSysClockFreq+0x180>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	099b      	lsrs	r3, r3, #6
 8006436:	2200      	movs	r2, #0
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	617a      	str	r2, [r7, #20]
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006442:	f04f 0b00 	mov.w	fp, #0
 8006446:	4652      	mov	r2, sl
 8006448:	465b      	mov	r3, fp
 800644a:	f04f 0000 	mov.w	r0, #0
 800644e:	f04f 0100 	mov.w	r1, #0
 8006452:	0159      	lsls	r1, r3, #5
 8006454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006458:	0150      	lsls	r0, r2, #5
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	ebb2 080a 	subs.w	r8, r2, sl
 8006462:	eb63 090b 	sbc.w	r9, r3, fp
 8006466:	f04f 0200 	mov.w	r2, #0
 800646a:	f04f 0300 	mov.w	r3, #0
 800646e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006472:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006476:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800647a:	ebb2 0408 	subs.w	r4, r2, r8
 800647e:	eb63 0509 	sbc.w	r5, r3, r9
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	f04f 0300 	mov.w	r3, #0
 800648a:	00eb      	lsls	r3, r5, #3
 800648c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006490:	00e2      	lsls	r2, r4, #3
 8006492:	4614      	mov	r4, r2
 8006494:	461d      	mov	r5, r3
 8006496:	eb14 030a 	adds.w	r3, r4, sl
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	eb45 030b 	adc.w	r3, r5, fp
 80064a0:	607b      	str	r3, [r7, #4]
 80064a2:	f04f 0200 	mov.w	r2, #0
 80064a6:	f04f 0300 	mov.w	r3, #0
 80064aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064ae:	4629      	mov	r1, r5
 80064b0:	028b      	lsls	r3, r1, #10
 80064b2:	4621      	mov	r1, r4
 80064b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064b8:	4621      	mov	r1, r4
 80064ba:	028a      	lsls	r2, r1, #10
 80064bc:	4610      	mov	r0, r2
 80064be:	4619      	mov	r1, r3
 80064c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c2:	2200      	movs	r2, #0
 80064c4:	60bb      	str	r3, [r7, #8]
 80064c6:	60fa      	str	r2, [r7, #12]
 80064c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064cc:	f7fa fb76 	bl	8000bbc <__aeabi_uldivmod>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4613      	mov	r3, r2
 80064d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064d8:	4b0b      	ldr	r3, [pc, #44]	; (8006508 <HAL_RCC_GetSysClockFreq+0x180>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	0c1b      	lsrs	r3, r3, #16
 80064de:	f003 0303 	and.w	r3, r3, #3
 80064e2:	3301      	adds	r3, #1
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80064e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80064f2:	e002      	b.n	80064fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064f4:	4b05      	ldr	r3, [pc, #20]	; (800650c <HAL_RCC_GetSysClockFreq+0x184>)
 80064f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80064f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3740      	adds	r7, #64	; 0x40
 8006500:	46bd      	mov	sp, r7
 8006502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006506:	bf00      	nop
 8006508:	40023800 	.word	0x40023800
 800650c:	00f42400 	.word	0x00f42400
 8006510:	017d7840 	.word	0x017d7840

08006514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006518:	4b03      	ldr	r3, [pc, #12]	; (8006528 <HAL_RCC_GetHCLKFreq+0x14>)
 800651a:	681b      	ldr	r3, [r3, #0]
}
 800651c:	4618      	mov	r0, r3
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	20000004 	.word	0x20000004

0800652c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006530:	f7ff fff0 	bl	8006514 <HAL_RCC_GetHCLKFreq>
 8006534:	4602      	mov	r2, r0
 8006536:	4b05      	ldr	r3, [pc, #20]	; (800654c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	0a9b      	lsrs	r3, r3, #10
 800653c:	f003 0307 	and.w	r3, r3, #7
 8006540:	4903      	ldr	r1, [pc, #12]	; (8006550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006542:	5ccb      	ldrb	r3, [r1, r3]
 8006544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006548:	4618      	mov	r0, r3
 800654a:	bd80      	pop	{r7, pc}
 800654c:	40023800 	.word	0x40023800
 8006550:	0800d908 	.word	0x0800d908

08006554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006558:	f7ff ffdc 	bl	8006514 <HAL_RCC_GetHCLKFreq>
 800655c:	4602      	mov	r2, r0
 800655e:	4b05      	ldr	r3, [pc, #20]	; (8006574 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	0b5b      	lsrs	r3, r3, #13
 8006564:	f003 0307 	and.w	r3, r3, #7
 8006568:	4903      	ldr	r1, [pc, #12]	; (8006578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800656a:	5ccb      	ldrb	r3, [r1, r3]
 800656c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006570:	4618      	mov	r0, r3
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40023800 	.word	0x40023800
 8006578:	0800d908 	.word	0x0800d908

0800657c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e07b      	b.n	8006686 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	2b00      	cmp	r3, #0
 8006594:	d108      	bne.n	80065a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800659e:	d009      	beq.n	80065b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	61da      	str	r2, [r3, #28]
 80065a6:	e005      	b.n	80065b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fb f956 	bl	8001880 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	431a      	orrs	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006624:	431a      	orrs	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800662e:	431a      	orrs	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006638:	ea42 0103 	orr.w	r1, r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006640:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	0c1b      	lsrs	r3, r3, #16
 8006652:	f003 0104 	and.w	r1, r3, #4
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	f003 0210 	and.w	r2, r3, #16
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006674:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e041      	b.n	8006724 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d106      	bne.n	80066ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7fb f9a3 	bl	8001a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2202      	movs	r2, #2
 80066be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3304      	adds	r3, #4
 80066ca:	4619      	mov	r1, r3
 80066cc:	4610      	mov	r0, r2
 80066ce:	f000 fce7 	bl	80070a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b01      	cmp	r3, #1
 800673e:	d001      	beq.n	8006744 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e044      	b.n	80067ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f042 0201 	orr.w	r2, r2, #1
 800675a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a1e      	ldr	r2, [pc, #120]	; (80067dc <HAL_TIM_Base_Start_IT+0xb0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d018      	beq.n	8006798 <HAL_TIM_Base_Start_IT+0x6c>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800676e:	d013      	beq.n	8006798 <HAL_TIM_Base_Start_IT+0x6c>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1a      	ldr	r2, [pc, #104]	; (80067e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00e      	beq.n	8006798 <HAL_TIM_Base_Start_IT+0x6c>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a19      	ldr	r2, [pc, #100]	; (80067e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d009      	beq.n	8006798 <HAL_TIM_Base_Start_IT+0x6c>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d004      	beq.n	8006798 <HAL_TIM_Base_Start_IT+0x6c>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a16      	ldr	r2, [pc, #88]	; (80067ec <HAL_TIM_Base_Start_IT+0xc0>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d111      	bne.n	80067bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 0307 	and.w	r3, r3, #7
 80067a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b06      	cmp	r3, #6
 80067a8:	d010      	beq.n	80067cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f042 0201 	orr.w	r2, r2, #1
 80067b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ba:	e007      	b.n	80067cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0201 	orr.w	r2, r2, #1
 80067ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40010000 	.word	0x40010000
 80067e0:	40000400 	.word	0x40000400
 80067e4:	40000800 	.word	0x40000800
 80067e8:	40000c00 	.word	0x40000c00
 80067ec:	40014000 	.word	0x40014000

080067f0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e041      	b.n	8006886 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d106      	bne.n	800681c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7fb f8ca 	bl	80019b0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3304      	adds	r3, #4
 800682c:	4619      	mov	r1, r3
 800682e:	4610      	mov	r0, r2
 8006830:	f000 fc36 	bl	80070a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
	...

08006890 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d109      	bne.n	80068b4 <HAL_TIM_OC_Start+0x24>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	bf14      	ite	ne
 80068ac:	2301      	movne	r3, #1
 80068ae:	2300      	moveq	r3, #0
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	e022      	b.n	80068fa <HAL_TIM_OC_Start+0x6a>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d109      	bne.n	80068ce <HAL_TIM_OC_Start+0x3e>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	bf14      	ite	ne
 80068c6:	2301      	movne	r3, #1
 80068c8:	2300      	moveq	r3, #0
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	e015      	b.n	80068fa <HAL_TIM_OC_Start+0x6a>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d109      	bne.n	80068e8 <HAL_TIM_OC_Start+0x58>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b01      	cmp	r3, #1
 80068de:	bf14      	ite	ne
 80068e0:	2301      	movne	r3, #1
 80068e2:	2300      	moveq	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	e008      	b.n	80068fa <HAL_TIM_OC_Start+0x6a>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	bf14      	ite	ne
 80068f4:	2301      	movne	r3, #1
 80068f6:	2300      	moveq	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e068      	b.n	80069d4 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d104      	bne.n	8006912 <HAL_TIM_OC_Start+0x82>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006910:	e013      	b.n	800693a <HAL_TIM_OC_Start+0xaa>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b04      	cmp	r3, #4
 8006916:	d104      	bne.n	8006922 <HAL_TIM_OC_Start+0x92>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006920:	e00b      	b.n	800693a <HAL_TIM_OC_Start+0xaa>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b08      	cmp	r3, #8
 8006926:	d104      	bne.n	8006932 <HAL_TIM_OC_Start+0xa2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006930:	e003      	b.n	800693a <HAL_TIM_OC_Start+0xaa>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2202      	movs	r2, #2
 8006936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2201      	movs	r2, #1
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fdb8 	bl	80074b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a23      	ldr	r2, [pc, #140]	; (80069dc <HAL_TIM_OC_Start+0x14c>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d107      	bne.n	8006962 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006960:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1d      	ldr	r2, [pc, #116]	; (80069dc <HAL_TIM_OC_Start+0x14c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d018      	beq.n	800699e <HAL_TIM_OC_Start+0x10e>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006974:	d013      	beq.n	800699e <HAL_TIM_OC_Start+0x10e>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a19      	ldr	r2, [pc, #100]	; (80069e0 <HAL_TIM_OC_Start+0x150>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d00e      	beq.n	800699e <HAL_TIM_OC_Start+0x10e>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a17      	ldr	r2, [pc, #92]	; (80069e4 <HAL_TIM_OC_Start+0x154>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d009      	beq.n	800699e <HAL_TIM_OC_Start+0x10e>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a16      	ldr	r2, [pc, #88]	; (80069e8 <HAL_TIM_OC_Start+0x158>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d004      	beq.n	800699e <HAL_TIM_OC_Start+0x10e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a14      	ldr	r2, [pc, #80]	; (80069ec <HAL_TIM_OC_Start+0x15c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d111      	bne.n	80069c2 <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f003 0307 	and.w	r3, r3, #7
 80069a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2b06      	cmp	r3, #6
 80069ae:	d010      	beq.n	80069d2 <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f042 0201 	orr.w	r2, r2, #1
 80069be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c0:	e007      	b.n	80069d2 <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f042 0201 	orr.w	r2, r2, #1
 80069d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	40010000 	.word	0x40010000
 80069e0:	40000400 	.word	0x40000400
 80069e4:	40000800 	.word	0x40000800
 80069e8:	40000c00 	.word	0x40000c00
 80069ec:	40014000 	.word	0x40014000

080069f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e041      	b.n	8006a86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fa ff9a 	bl	8001950 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4610      	mov	r0, r2
 8006a30:	f000 fb36 	bl	80070a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d109      	bne.n	8006ab4 <HAL_TIM_PWM_Start+0x24>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	bf14      	ite	ne
 8006aac:	2301      	movne	r3, #1
 8006aae:	2300      	moveq	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	e022      	b.n	8006afa <HAL_TIM_PWM_Start+0x6a>
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d109      	bne.n	8006ace <HAL_TIM_PWM_Start+0x3e>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	bf14      	ite	ne
 8006ac6:	2301      	movne	r3, #1
 8006ac8:	2300      	moveq	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	e015      	b.n	8006afa <HAL_TIM_PWM_Start+0x6a>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d109      	bne.n	8006ae8 <HAL_TIM_PWM_Start+0x58>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	bf14      	ite	ne
 8006ae0:	2301      	movne	r3, #1
 8006ae2:	2300      	moveq	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	e008      	b.n	8006afa <HAL_TIM_PWM_Start+0x6a>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	bf14      	ite	ne
 8006af4:	2301      	movne	r3, #1
 8006af6:	2300      	moveq	r3, #0
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e068      	b.n	8006bd4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d104      	bne.n	8006b12 <HAL_TIM_PWM_Start+0x82>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b10:	e013      	b.n	8006b3a <HAL_TIM_PWM_Start+0xaa>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d104      	bne.n	8006b22 <HAL_TIM_PWM_Start+0x92>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b20:	e00b      	b.n	8006b3a <HAL_TIM_PWM_Start+0xaa>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b08      	cmp	r3, #8
 8006b26:	d104      	bne.n	8006b32 <HAL_TIM_PWM_Start+0xa2>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b30:	e003      	b.n	8006b3a <HAL_TIM_PWM_Start+0xaa>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2202      	movs	r2, #2
 8006b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fcb8 	bl	80074b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a23      	ldr	r2, [pc, #140]	; (8006bdc <HAL_TIM_PWM_Start+0x14c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d107      	bne.n	8006b62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a1d      	ldr	r2, [pc, #116]	; (8006bdc <HAL_TIM_PWM_Start+0x14c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d018      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x10e>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b74:	d013      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x10e>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a19      	ldr	r2, [pc, #100]	; (8006be0 <HAL_TIM_PWM_Start+0x150>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00e      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x10e>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a17      	ldr	r2, [pc, #92]	; (8006be4 <HAL_TIM_PWM_Start+0x154>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d009      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x10e>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a16      	ldr	r2, [pc, #88]	; (8006be8 <HAL_TIM_PWM_Start+0x158>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d004      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x10e>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a14      	ldr	r2, [pc, #80]	; (8006bec <HAL_TIM_PWM_Start+0x15c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d111      	bne.n	8006bc2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b06      	cmp	r3, #6
 8006bae:	d010      	beq.n	8006bd2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc0:	e007      	b.n	8006bd2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0201 	orr.w	r2, r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40010000 	.word	0x40010000
 8006be0:	40000400 	.word	0x40000400
 8006be4:	40000800 	.word	0x40000800
 8006be8:	40000c00 	.word	0x40000c00
 8006bec:	40014000 	.word	0x40014000

08006bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d122      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d11b      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0202 	mvn.w	r2, #2
 8006c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fa16 	bl	8007064 <HAL_TIM_IC_CaptureCallback>
 8006c38:	e005      	b.n	8006c46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fa08 	bl	8007050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fa19 	bl	8007078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0304 	and.w	r3, r3, #4
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d122      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d11b      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0204 	mvn.w	r2, #4
 8006c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f9ec 	bl	8007064 <HAL_TIM_IC_CaptureCallback>
 8006c8c:	e005      	b.n	8006c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f9de 	bl	8007050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f9ef 	bl	8007078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d122      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f003 0308 	and.w	r3, r3, #8
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d11b      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0208 	mvn.w	r2, #8
 8006cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2204      	movs	r2, #4
 8006cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	f003 0303 	and.w	r3, r3, #3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f9c2 	bl	8007064 <HAL_TIM_IC_CaptureCallback>
 8006ce0:	e005      	b.n	8006cee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f9b4 	bl	8007050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f9c5 	bl	8007078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f003 0310 	and.w	r3, r3, #16
 8006cfe:	2b10      	cmp	r3, #16
 8006d00:	d122      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f003 0310 	and.w	r3, r3, #16
 8006d0c:	2b10      	cmp	r3, #16
 8006d0e:	d11b      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f06f 0210 	mvn.w	r2, #16
 8006d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2208      	movs	r2, #8
 8006d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f998 	bl	8007064 <HAL_TIM_IC_CaptureCallback>
 8006d34:	e005      	b.n	8006d42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f98a 	bl	8007050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f99b 	bl	8007078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d10e      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d107      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f06f 0201 	mvn.w	r2, #1
 8006d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f964 	bl	800703c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7e:	2b80      	cmp	r3, #128	; 0x80
 8006d80:	d10e      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8c:	2b80      	cmp	r3, #128	; 0x80
 8006d8e:	d107      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fc7c 	bl	8007698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006daa:	2b40      	cmp	r3, #64	; 0x40
 8006dac:	d10e      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db8:	2b40      	cmp	r3, #64	; 0x40
 8006dba:	d107      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f960 	bl	800708c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b20      	cmp	r3, #32
 8006dd8:	d10e      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f003 0320 	and.w	r3, r3, #32
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d107      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f06f 0220 	mvn.w	r2, #32
 8006df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fc46 	bl	8007684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006df8:	bf00      	nop
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <HAL_TIM_OC_ConfigChannel+0x1e>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e048      	b.n	8006eb0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b0c      	cmp	r3, #12
 8006e2a:	d839      	bhi.n	8006ea0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006e2c:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	08006e69 	.word	0x08006e69
 8006e38:	08006ea1 	.word	0x08006ea1
 8006e3c:	08006ea1 	.word	0x08006ea1
 8006e40:	08006ea1 	.word	0x08006ea1
 8006e44:	08006e77 	.word	0x08006e77
 8006e48:	08006ea1 	.word	0x08006ea1
 8006e4c:	08006ea1 	.word	0x08006ea1
 8006e50:	08006ea1 	.word	0x08006ea1
 8006e54:	08006e85 	.word	0x08006e85
 8006e58:	08006ea1 	.word	0x08006ea1
 8006e5c:	08006ea1 	.word	0x08006ea1
 8006e60:	08006ea1 	.word	0x08006ea1
 8006e64:	08006e93 	.word	0x08006e93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 f996 	bl	80071a0 <TIM_OC1_SetConfig>
      break;
 8006e74:	e017      	b.n	8006ea6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68b9      	ldr	r1, [r7, #8]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 f9f5 	bl	800726c <TIM_OC2_SetConfig>
      break;
 8006e82:	e010      	b.n	8006ea6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fa5a 	bl	8007344 <TIM_OC3_SetConfig>
      break;
 8006e90:	e009      	b.n	8006ea6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68b9      	ldr	r1, [r7, #8]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 fabd 	bl	8007418 <TIM_OC4_SetConfig>
      break;
 8006e9e:	e002      	b.n	8006ea6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d101      	bne.n	8006ed6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	e0ae      	b.n	8007034 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b0c      	cmp	r3, #12
 8006ee2:	f200 809f 	bhi.w	8007024 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ee6:	a201      	add	r2, pc, #4	; (adr r2, 8006eec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eec:	08006f21 	.word	0x08006f21
 8006ef0:	08007025 	.word	0x08007025
 8006ef4:	08007025 	.word	0x08007025
 8006ef8:	08007025 	.word	0x08007025
 8006efc:	08006f61 	.word	0x08006f61
 8006f00:	08007025 	.word	0x08007025
 8006f04:	08007025 	.word	0x08007025
 8006f08:	08007025 	.word	0x08007025
 8006f0c:	08006fa3 	.word	0x08006fa3
 8006f10:	08007025 	.word	0x08007025
 8006f14:	08007025 	.word	0x08007025
 8006f18:	08007025 	.word	0x08007025
 8006f1c:	08006fe3 	.word	0x08006fe3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68b9      	ldr	r1, [r7, #8]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 f93a 	bl	80071a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699a      	ldr	r2, [r3, #24]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0208 	orr.w	r2, r2, #8
 8006f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	699a      	ldr	r2, [r3, #24]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0204 	bic.w	r2, r2, #4
 8006f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6999      	ldr	r1, [r3, #24]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	691a      	ldr	r2, [r3, #16]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	619a      	str	r2, [r3, #24]
      break;
 8006f5e:	e064      	b.n	800702a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68b9      	ldr	r1, [r7, #8]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 f980 	bl	800726c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	699a      	ldr	r2, [r3, #24]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699a      	ldr	r2, [r3, #24]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6999      	ldr	r1, [r3, #24]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	021a      	lsls	r2, r3, #8
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	619a      	str	r2, [r3, #24]
      break;
 8006fa0:	e043      	b.n	800702a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68b9      	ldr	r1, [r7, #8]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 f9cb 	bl	8007344 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	69da      	ldr	r2, [r3, #28]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f042 0208 	orr.w	r2, r2, #8
 8006fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69da      	ldr	r2, [r3, #28]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 0204 	bic.w	r2, r2, #4
 8006fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	69d9      	ldr	r1, [r3, #28]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	691a      	ldr	r2, [r3, #16]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	61da      	str	r2, [r3, #28]
      break;
 8006fe0:	e023      	b.n	800702a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68b9      	ldr	r1, [r7, #8]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fa15 	bl	8007418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	69da      	ldr	r2, [r3, #28]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69da      	ldr	r2, [r3, #28]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800700c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	69d9      	ldr	r1, [r3, #28]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	021a      	lsls	r2, r3, #8
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	61da      	str	r2, [r3, #28]
      break;
 8007022:	e002      	b.n	800702a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	75fb      	strb	r3, [r7, #23]
      break;
 8007028:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007032:	7dfb      	ldrb	r3, [r7, #23]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a34      	ldr	r2, [pc, #208]	; (8007184 <TIM_Base_SetConfig+0xe4>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00f      	beq.n	80070d8 <TIM_Base_SetConfig+0x38>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070be:	d00b      	beq.n	80070d8 <TIM_Base_SetConfig+0x38>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a31      	ldr	r2, [pc, #196]	; (8007188 <TIM_Base_SetConfig+0xe8>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d007      	beq.n	80070d8 <TIM_Base_SetConfig+0x38>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a30      	ldr	r2, [pc, #192]	; (800718c <TIM_Base_SetConfig+0xec>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d003      	beq.n	80070d8 <TIM_Base_SetConfig+0x38>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a2f      	ldr	r2, [pc, #188]	; (8007190 <TIM_Base_SetConfig+0xf0>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d108      	bne.n	80070ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a25      	ldr	r2, [pc, #148]	; (8007184 <TIM_Base_SetConfig+0xe4>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d01b      	beq.n	800712a <TIM_Base_SetConfig+0x8a>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f8:	d017      	beq.n	800712a <TIM_Base_SetConfig+0x8a>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a22      	ldr	r2, [pc, #136]	; (8007188 <TIM_Base_SetConfig+0xe8>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d013      	beq.n	800712a <TIM_Base_SetConfig+0x8a>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a21      	ldr	r2, [pc, #132]	; (800718c <TIM_Base_SetConfig+0xec>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00f      	beq.n	800712a <TIM_Base_SetConfig+0x8a>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a20      	ldr	r2, [pc, #128]	; (8007190 <TIM_Base_SetConfig+0xf0>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d00b      	beq.n	800712a <TIM_Base_SetConfig+0x8a>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a1f      	ldr	r2, [pc, #124]	; (8007194 <TIM_Base_SetConfig+0xf4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d007      	beq.n	800712a <TIM_Base_SetConfig+0x8a>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a1e      	ldr	r2, [pc, #120]	; (8007198 <TIM_Base_SetConfig+0xf8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d003      	beq.n	800712a <TIM_Base_SetConfig+0x8a>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a1d      	ldr	r2, [pc, #116]	; (800719c <TIM_Base_SetConfig+0xfc>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d108      	bne.n	800713c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a08      	ldr	r2, [pc, #32]	; (8007184 <TIM_Base_SetConfig+0xe4>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d103      	bne.n	8007170 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	691a      	ldr	r2, [r3, #16]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	615a      	str	r2, [r3, #20]
}
 8007176:	bf00      	nop
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	40010000 	.word	0x40010000
 8007188:	40000400 	.word	0x40000400
 800718c:	40000800 	.word	0x40000800
 8007190:	40000c00 	.word	0x40000c00
 8007194:	40014000 	.word	0x40014000
 8007198:	40014400 	.word	0x40014400
 800719c:	40014800 	.word	0x40014800

080071a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	f023 0201 	bic.w	r2, r3, #1
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f023 0303 	bic.w	r3, r3, #3
 80071d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f023 0302 	bic.w	r3, r3, #2
 80071e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a1c      	ldr	r2, [pc, #112]	; (8007268 <TIM_OC1_SetConfig+0xc8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d10c      	bne.n	8007216 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f023 0308 	bic.w	r3, r3, #8
 8007202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	4313      	orrs	r3, r2
 800720c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f023 0304 	bic.w	r3, r3, #4
 8007214:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a13      	ldr	r2, [pc, #76]	; (8007268 <TIM_OC1_SetConfig+0xc8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d111      	bne.n	8007242 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800722c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	4313      	orrs	r3, r2
 8007240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	621a      	str	r2, [r3, #32]
}
 800725c:	bf00      	nop
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	40010000 	.word	0x40010000

0800726c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f023 0210 	bic.w	r2, r3, #16
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800729a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f023 0320 	bic.w	r3, r3, #32
 80072b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	011b      	lsls	r3, r3, #4
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a1e      	ldr	r2, [pc, #120]	; (8007340 <TIM_OC2_SetConfig+0xd4>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d10d      	bne.n	80072e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	4313      	orrs	r3, r2
 80072de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a15      	ldr	r2, [pc, #84]	; (8007340 <TIM_OC2_SetConfig+0xd4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d113      	bne.n	8007318 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	4313      	orrs	r3, r2
 800730a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	4313      	orrs	r3, r2
 8007316:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	621a      	str	r2, [r3, #32]
}
 8007332:	bf00      	nop
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	40010000 	.word	0x40010000

08007344 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0303 	bic.w	r3, r3, #3
 800737a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800738c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	021b      	lsls	r3, r3, #8
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a1d      	ldr	r2, [pc, #116]	; (8007414 <TIM_OC3_SetConfig+0xd0>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d10d      	bne.n	80073be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	021b      	lsls	r3, r3, #8
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a14      	ldr	r2, [pc, #80]	; (8007414 <TIM_OC3_SetConfig+0xd0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d113      	bne.n	80073ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	4313      	orrs	r3, r2
 80073e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	011b      	lsls	r3, r3, #4
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	621a      	str	r2, [r3, #32]
}
 8007408:	bf00      	nop
 800740a:	371c      	adds	r7, #28
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	40010000 	.word	0x40010000

08007418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800744e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	021b      	lsls	r3, r3, #8
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	4313      	orrs	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	031b      	lsls	r3, r3, #12
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	4313      	orrs	r3, r2
 800746e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a10      	ldr	r2, [pc, #64]	; (80074b4 <TIM_OC4_SetConfig+0x9c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d109      	bne.n	800748c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800747e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	019b      	lsls	r3, r3, #6
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	4313      	orrs	r3, r2
 800748a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	621a      	str	r2, [r3, #32]
}
 80074a6:	bf00      	nop
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	40010000 	.word	0x40010000

080074b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f003 031f 	and.w	r3, r3, #31
 80074ca:	2201      	movs	r2, #1
 80074cc:	fa02 f303 	lsl.w	r3, r2, r3
 80074d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6a1a      	ldr	r2, [r3, #32]
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	43db      	mvns	r3, r3
 80074da:	401a      	ands	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6a1a      	ldr	r2, [r3, #32]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f003 031f 	and.w	r3, r3, #31
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	fa01 f303 	lsl.w	r3, r1, r3
 80074f0:	431a      	orrs	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	621a      	str	r2, [r3, #32]
}
 80074f6:	bf00      	nop
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
	...

08007504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007514:	2b01      	cmp	r3, #1
 8007516:	d101      	bne.n	800751c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007518:	2302      	movs	r3, #2
 800751a:	e050      	b.n	80075be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a1c      	ldr	r2, [pc, #112]	; (80075cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d018      	beq.n	8007592 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007568:	d013      	beq.n	8007592 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a18      	ldr	r2, [pc, #96]	; (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d00e      	beq.n	8007592 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a16      	ldr	r2, [pc, #88]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d009      	beq.n	8007592 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a15      	ldr	r2, [pc, #84]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d004      	beq.n	8007592 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a13      	ldr	r2, [pc, #76]	; (80075dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d10c      	bne.n	80075ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007598:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	40010000 	.word	0x40010000
 80075d0:	40000400 	.word	0x40000400
 80075d4:	40000800 	.word	0x40000800
 80075d8:	40000c00 	.word	0x40000c00
 80075dc:	40014000 	.word	0x40014000

080075e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d101      	bne.n	80075fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80075f8:	2302      	movs	r3, #2
 80075fa:	e03d      	b.n	8007678 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	4313      	orrs	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	4313      	orrs	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	4313      	orrs	r3, r2
 800762c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4313      	orrs	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	4313      	orrs	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e03f      	b.n	800773e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d106      	bne.n	80076d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7fa f9f6 	bl	8001ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2224      	movs	r2, #36	; 0x24
 80076dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f829 	bl	8007748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	691a      	ldr	r2, [r3, #16]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	695a      	ldr	r2, [r3, #20]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2220      	movs	r2, #32
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2220      	movs	r2, #32
 8007738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800774c:	b0c0      	sub	sp, #256	; 0x100
 800774e:	af00      	add	r7, sp, #0
 8007750:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007764:	68d9      	ldr	r1, [r3, #12]
 8007766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	ea40 0301 	orr.w	r3, r0, r1
 8007770:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007776:	689a      	ldr	r2, [r3, #8]
 8007778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	431a      	orrs	r2, r3
 8007780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	431a      	orrs	r2, r3
 8007788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	4313      	orrs	r3, r2
 8007790:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80077a0:	f021 010c 	bic.w	r1, r1, #12
 80077a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80077ae:	430b      	orrs	r3, r1
 80077b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80077be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c2:	6999      	ldr	r1, [r3, #24]
 80077c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	ea40 0301 	orr.w	r3, r0, r1
 80077ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	4b8f      	ldr	r3, [pc, #572]	; (8007a14 <UART_SetConfig+0x2cc>)
 80077d8:	429a      	cmp	r2, r3
 80077da:	d005      	beq.n	80077e8 <UART_SetConfig+0xa0>
 80077dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	4b8d      	ldr	r3, [pc, #564]	; (8007a18 <UART_SetConfig+0x2d0>)
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d104      	bne.n	80077f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077e8:	f7fe feb4 	bl	8006554 <HAL_RCC_GetPCLK2Freq>
 80077ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80077f0:	e003      	b.n	80077fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077f2:	f7fe fe9b 	bl	800652c <HAL_RCC_GetPCLK1Freq>
 80077f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007804:	f040 810c 	bne.w	8007a20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800780c:	2200      	movs	r2, #0
 800780e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007812:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007816:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800781a:	4622      	mov	r2, r4
 800781c:	462b      	mov	r3, r5
 800781e:	1891      	adds	r1, r2, r2
 8007820:	65b9      	str	r1, [r7, #88]	; 0x58
 8007822:	415b      	adcs	r3, r3
 8007824:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007826:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800782a:	4621      	mov	r1, r4
 800782c:	eb12 0801 	adds.w	r8, r2, r1
 8007830:	4629      	mov	r1, r5
 8007832:	eb43 0901 	adc.w	r9, r3, r1
 8007836:	f04f 0200 	mov.w	r2, #0
 800783a:	f04f 0300 	mov.w	r3, #0
 800783e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007842:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007846:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800784a:	4690      	mov	r8, r2
 800784c:	4699      	mov	r9, r3
 800784e:	4623      	mov	r3, r4
 8007850:	eb18 0303 	adds.w	r3, r8, r3
 8007854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007858:	462b      	mov	r3, r5
 800785a:	eb49 0303 	adc.w	r3, r9, r3
 800785e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800786e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007872:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007876:	460b      	mov	r3, r1
 8007878:	18db      	adds	r3, r3, r3
 800787a:	653b      	str	r3, [r7, #80]	; 0x50
 800787c:	4613      	mov	r3, r2
 800787e:	eb42 0303 	adc.w	r3, r2, r3
 8007882:	657b      	str	r3, [r7, #84]	; 0x54
 8007884:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007888:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800788c:	f7f9 f996 	bl	8000bbc <__aeabi_uldivmod>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4b61      	ldr	r3, [pc, #388]	; (8007a1c <UART_SetConfig+0x2d4>)
 8007896:	fba3 2302 	umull	r2, r3, r3, r2
 800789a:	095b      	lsrs	r3, r3, #5
 800789c:	011c      	lsls	r4, r3, #4
 800789e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078a2:	2200      	movs	r2, #0
 80078a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80078ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80078b0:	4642      	mov	r2, r8
 80078b2:	464b      	mov	r3, r9
 80078b4:	1891      	adds	r1, r2, r2
 80078b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80078b8:	415b      	adcs	r3, r3
 80078ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80078c0:	4641      	mov	r1, r8
 80078c2:	eb12 0a01 	adds.w	sl, r2, r1
 80078c6:	4649      	mov	r1, r9
 80078c8:	eb43 0b01 	adc.w	fp, r3, r1
 80078cc:	f04f 0200 	mov.w	r2, #0
 80078d0:	f04f 0300 	mov.w	r3, #0
 80078d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078e0:	4692      	mov	sl, r2
 80078e2:	469b      	mov	fp, r3
 80078e4:	4643      	mov	r3, r8
 80078e6:	eb1a 0303 	adds.w	r3, sl, r3
 80078ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078ee:	464b      	mov	r3, r9
 80078f0:	eb4b 0303 	adc.w	r3, fp, r3
 80078f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007904:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007908:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800790c:	460b      	mov	r3, r1
 800790e:	18db      	adds	r3, r3, r3
 8007910:	643b      	str	r3, [r7, #64]	; 0x40
 8007912:	4613      	mov	r3, r2
 8007914:	eb42 0303 	adc.w	r3, r2, r3
 8007918:	647b      	str	r3, [r7, #68]	; 0x44
 800791a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800791e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007922:	f7f9 f94b 	bl	8000bbc <__aeabi_uldivmod>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	4611      	mov	r1, r2
 800792c:	4b3b      	ldr	r3, [pc, #236]	; (8007a1c <UART_SetConfig+0x2d4>)
 800792e:	fba3 2301 	umull	r2, r3, r3, r1
 8007932:	095b      	lsrs	r3, r3, #5
 8007934:	2264      	movs	r2, #100	; 0x64
 8007936:	fb02 f303 	mul.w	r3, r2, r3
 800793a:	1acb      	subs	r3, r1, r3
 800793c:	00db      	lsls	r3, r3, #3
 800793e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007942:	4b36      	ldr	r3, [pc, #216]	; (8007a1c <UART_SetConfig+0x2d4>)
 8007944:	fba3 2302 	umull	r2, r3, r3, r2
 8007948:	095b      	lsrs	r3, r3, #5
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007950:	441c      	add	r4, r3
 8007952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007956:	2200      	movs	r2, #0
 8007958:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800795c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007960:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007964:	4642      	mov	r2, r8
 8007966:	464b      	mov	r3, r9
 8007968:	1891      	adds	r1, r2, r2
 800796a:	63b9      	str	r1, [r7, #56]	; 0x38
 800796c:	415b      	adcs	r3, r3
 800796e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007970:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007974:	4641      	mov	r1, r8
 8007976:	1851      	adds	r1, r2, r1
 8007978:	6339      	str	r1, [r7, #48]	; 0x30
 800797a:	4649      	mov	r1, r9
 800797c:	414b      	adcs	r3, r1
 800797e:	637b      	str	r3, [r7, #52]	; 0x34
 8007980:	f04f 0200 	mov.w	r2, #0
 8007984:	f04f 0300 	mov.w	r3, #0
 8007988:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800798c:	4659      	mov	r1, fp
 800798e:	00cb      	lsls	r3, r1, #3
 8007990:	4651      	mov	r1, sl
 8007992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007996:	4651      	mov	r1, sl
 8007998:	00ca      	lsls	r2, r1, #3
 800799a:	4610      	mov	r0, r2
 800799c:	4619      	mov	r1, r3
 800799e:	4603      	mov	r3, r0
 80079a0:	4642      	mov	r2, r8
 80079a2:	189b      	adds	r3, r3, r2
 80079a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079a8:	464b      	mov	r3, r9
 80079aa:	460a      	mov	r2, r1
 80079ac:	eb42 0303 	adc.w	r3, r2, r3
 80079b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80079c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80079c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80079c8:	460b      	mov	r3, r1
 80079ca:	18db      	adds	r3, r3, r3
 80079cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80079ce:	4613      	mov	r3, r2
 80079d0:	eb42 0303 	adc.w	r3, r2, r3
 80079d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80079de:	f7f9 f8ed 	bl	8000bbc <__aeabi_uldivmod>
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	4b0d      	ldr	r3, [pc, #52]	; (8007a1c <UART_SetConfig+0x2d4>)
 80079e8:	fba3 1302 	umull	r1, r3, r3, r2
 80079ec:	095b      	lsrs	r3, r3, #5
 80079ee:	2164      	movs	r1, #100	; 0x64
 80079f0:	fb01 f303 	mul.w	r3, r1, r3
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	3332      	adds	r3, #50	; 0x32
 80079fa:	4a08      	ldr	r2, [pc, #32]	; (8007a1c <UART_SetConfig+0x2d4>)
 80079fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007a00:	095b      	lsrs	r3, r3, #5
 8007a02:	f003 0207 	and.w	r2, r3, #7
 8007a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4422      	add	r2, r4
 8007a0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a10:	e106      	b.n	8007c20 <UART_SetConfig+0x4d8>
 8007a12:	bf00      	nop
 8007a14:	40011000 	.word	0x40011000
 8007a18:	40011400 	.word	0x40011400
 8007a1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a24:	2200      	movs	r2, #0
 8007a26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007a2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007a32:	4642      	mov	r2, r8
 8007a34:	464b      	mov	r3, r9
 8007a36:	1891      	adds	r1, r2, r2
 8007a38:	6239      	str	r1, [r7, #32]
 8007a3a:	415b      	adcs	r3, r3
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a42:	4641      	mov	r1, r8
 8007a44:	1854      	adds	r4, r2, r1
 8007a46:	4649      	mov	r1, r9
 8007a48:	eb43 0501 	adc.w	r5, r3, r1
 8007a4c:	f04f 0200 	mov.w	r2, #0
 8007a50:	f04f 0300 	mov.w	r3, #0
 8007a54:	00eb      	lsls	r3, r5, #3
 8007a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a5a:	00e2      	lsls	r2, r4, #3
 8007a5c:	4614      	mov	r4, r2
 8007a5e:	461d      	mov	r5, r3
 8007a60:	4643      	mov	r3, r8
 8007a62:	18e3      	adds	r3, r4, r3
 8007a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a68:	464b      	mov	r3, r9
 8007a6a:	eb45 0303 	adc.w	r3, r5, r3
 8007a6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a82:	f04f 0200 	mov.w	r2, #0
 8007a86:	f04f 0300 	mov.w	r3, #0
 8007a8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007a8e:	4629      	mov	r1, r5
 8007a90:	008b      	lsls	r3, r1, #2
 8007a92:	4621      	mov	r1, r4
 8007a94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a98:	4621      	mov	r1, r4
 8007a9a:	008a      	lsls	r2, r1, #2
 8007a9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007aa0:	f7f9 f88c 	bl	8000bbc <__aeabi_uldivmod>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4b60      	ldr	r3, [pc, #384]	; (8007c2c <UART_SetConfig+0x4e4>)
 8007aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8007aae:	095b      	lsrs	r3, r3, #5
 8007ab0:	011c      	lsls	r4, r3, #4
 8007ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007abc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ac0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007ac4:	4642      	mov	r2, r8
 8007ac6:	464b      	mov	r3, r9
 8007ac8:	1891      	adds	r1, r2, r2
 8007aca:	61b9      	str	r1, [r7, #24]
 8007acc:	415b      	adcs	r3, r3
 8007ace:	61fb      	str	r3, [r7, #28]
 8007ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ad4:	4641      	mov	r1, r8
 8007ad6:	1851      	adds	r1, r2, r1
 8007ad8:	6139      	str	r1, [r7, #16]
 8007ada:	4649      	mov	r1, r9
 8007adc:	414b      	adcs	r3, r1
 8007ade:	617b      	str	r3, [r7, #20]
 8007ae0:	f04f 0200 	mov.w	r2, #0
 8007ae4:	f04f 0300 	mov.w	r3, #0
 8007ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007aec:	4659      	mov	r1, fp
 8007aee:	00cb      	lsls	r3, r1, #3
 8007af0:	4651      	mov	r1, sl
 8007af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007af6:	4651      	mov	r1, sl
 8007af8:	00ca      	lsls	r2, r1, #3
 8007afa:	4610      	mov	r0, r2
 8007afc:	4619      	mov	r1, r3
 8007afe:	4603      	mov	r3, r0
 8007b00:	4642      	mov	r2, r8
 8007b02:	189b      	adds	r3, r3, r2
 8007b04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b08:	464b      	mov	r3, r9
 8007b0a:	460a      	mov	r2, r1
 8007b0c:	eb42 0303 	adc.w	r3, r2, r3
 8007b10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007b20:	f04f 0200 	mov.w	r2, #0
 8007b24:	f04f 0300 	mov.w	r3, #0
 8007b28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	008b      	lsls	r3, r1, #2
 8007b30:	4641      	mov	r1, r8
 8007b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b36:	4641      	mov	r1, r8
 8007b38:	008a      	lsls	r2, r1, #2
 8007b3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007b3e:	f7f9 f83d 	bl	8000bbc <__aeabi_uldivmod>
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	4611      	mov	r1, r2
 8007b48:	4b38      	ldr	r3, [pc, #224]	; (8007c2c <UART_SetConfig+0x4e4>)
 8007b4a:	fba3 2301 	umull	r2, r3, r3, r1
 8007b4e:	095b      	lsrs	r3, r3, #5
 8007b50:	2264      	movs	r2, #100	; 0x64
 8007b52:	fb02 f303 	mul.w	r3, r2, r3
 8007b56:	1acb      	subs	r3, r1, r3
 8007b58:	011b      	lsls	r3, r3, #4
 8007b5a:	3332      	adds	r3, #50	; 0x32
 8007b5c:	4a33      	ldr	r2, [pc, #204]	; (8007c2c <UART_SetConfig+0x4e4>)
 8007b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b68:	441c      	add	r4, r3
 8007b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b6e:	2200      	movs	r2, #0
 8007b70:	673b      	str	r3, [r7, #112]	; 0x70
 8007b72:	677a      	str	r2, [r7, #116]	; 0x74
 8007b74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007b78:	4642      	mov	r2, r8
 8007b7a:	464b      	mov	r3, r9
 8007b7c:	1891      	adds	r1, r2, r2
 8007b7e:	60b9      	str	r1, [r7, #8]
 8007b80:	415b      	adcs	r3, r3
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b88:	4641      	mov	r1, r8
 8007b8a:	1851      	adds	r1, r2, r1
 8007b8c:	6039      	str	r1, [r7, #0]
 8007b8e:	4649      	mov	r1, r9
 8007b90:	414b      	adcs	r3, r1
 8007b92:	607b      	str	r3, [r7, #4]
 8007b94:	f04f 0200 	mov.w	r2, #0
 8007b98:	f04f 0300 	mov.w	r3, #0
 8007b9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ba0:	4659      	mov	r1, fp
 8007ba2:	00cb      	lsls	r3, r1, #3
 8007ba4:	4651      	mov	r1, sl
 8007ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007baa:	4651      	mov	r1, sl
 8007bac:	00ca      	lsls	r2, r1, #3
 8007bae:	4610      	mov	r0, r2
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	4642      	mov	r2, r8
 8007bb6:	189b      	adds	r3, r3, r2
 8007bb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bba:	464b      	mov	r3, r9
 8007bbc:	460a      	mov	r2, r1
 8007bbe:	eb42 0303 	adc.w	r3, r2, r3
 8007bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8007bce:	667a      	str	r2, [r7, #100]	; 0x64
 8007bd0:	f04f 0200 	mov.w	r2, #0
 8007bd4:	f04f 0300 	mov.w	r3, #0
 8007bd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007bdc:	4649      	mov	r1, r9
 8007bde:	008b      	lsls	r3, r1, #2
 8007be0:	4641      	mov	r1, r8
 8007be2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007be6:	4641      	mov	r1, r8
 8007be8:	008a      	lsls	r2, r1, #2
 8007bea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007bee:	f7f8 ffe5 	bl	8000bbc <__aeabi_uldivmod>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4b0d      	ldr	r3, [pc, #52]	; (8007c2c <UART_SetConfig+0x4e4>)
 8007bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8007bfc:	095b      	lsrs	r3, r3, #5
 8007bfe:	2164      	movs	r1, #100	; 0x64
 8007c00:	fb01 f303 	mul.w	r3, r1, r3
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	011b      	lsls	r3, r3, #4
 8007c08:	3332      	adds	r3, #50	; 0x32
 8007c0a:	4a08      	ldr	r2, [pc, #32]	; (8007c2c <UART_SetConfig+0x4e4>)
 8007c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c10:	095b      	lsrs	r3, r3, #5
 8007c12:	f003 020f 	and.w	r2, r3, #15
 8007c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4422      	add	r2, r4
 8007c1e:	609a      	str	r2, [r3, #8]
}
 8007c20:	bf00      	nop
 8007c22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007c26:	46bd      	mov	sp, r7
 8007c28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c2c:	51eb851f 	.word	0x51eb851f

08007c30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c30:	b084      	sub	sp, #16
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	f107 001c 	add.w	r0, r7, #28
 8007c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d122      	bne.n	8007c8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d105      	bne.n	8007c82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 fbee 	bl	8009464 <USB_CoreReset>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73fb      	strb	r3, [r7, #15]
 8007c8c:	e01a      	b.n	8007cc4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f001 fbe2 	bl	8009464 <USB_CoreReset>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d106      	bne.n	8007cb8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	639a      	str	r2, [r3, #56]	; 0x38
 8007cb6:	e005      	b.n	8007cc4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d10b      	bne.n	8007ce2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f043 0206 	orr.w	r2, r3, #6
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f043 0220 	orr.w	r2, r3, #32
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cee:	b004      	add	sp, #16
 8007cf0:	4770      	bx	lr
	...

08007cf4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007d02:	79fb      	ldrb	r3, [r7, #7]
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d165      	bne.n	8007dd4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	4a41      	ldr	r2, [pc, #260]	; (8007e10 <USB_SetTurnaroundTime+0x11c>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d906      	bls.n	8007d1e <USB_SetTurnaroundTime+0x2a>
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	4a40      	ldr	r2, [pc, #256]	; (8007e14 <USB_SetTurnaroundTime+0x120>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d202      	bcs.n	8007d1e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007d18:	230f      	movs	r3, #15
 8007d1a:	617b      	str	r3, [r7, #20]
 8007d1c:	e062      	b.n	8007de4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	4a3c      	ldr	r2, [pc, #240]	; (8007e14 <USB_SetTurnaroundTime+0x120>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d306      	bcc.n	8007d34 <USB_SetTurnaroundTime+0x40>
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	4a3b      	ldr	r2, [pc, #236]	; (8007e18 <USB_SetTurnaroundTime+0x124>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d202      	bcs.n	8007d34 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007d2e:	230e      	movs	r3, #14
 8007d30:	617b      	str	r3, [r7, #20]
 8007d32:	e057      	b.n	8007de4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	4a38      	ldr	r2, [pc, #224]	; (8007e18 <USB_SetTurnaroundTime+0x124>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d306      	bcc.n	8007d4a <USB_SetTurnaroundTime+0x56>
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	4a37      	ldr	r2, [pc, #220]	; (8007e1c <USB_SetTurnaroundTime+0x128>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d202      	bcs.n	8007d4a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007d44:	230d      	movs	r3, #13
 8007d46:	617b      	str	r3, [r7, #20]
 8007d48:	e04c      	b.n	8007de4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	4a33      	ldr	r2, [pc, #204]	; (8007e1c <USB_SetTurnaroundTime+0x128>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d306      	bcc.n	8007d60 <USB_SetTurnaroundTime+0x6c>
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	4a32      	ldr	r2, [pc, #200]	; (8007e20 <USB_SetTurnaroundTime+0x12c>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d802      	bhi.n	8007d60 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	617b      	str	r3, [r7, #20]
 8007d5e:	e041      	b.n	8007de4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	4a2f      	ldr	r2, [pc, #188]	; (8007e20 <USB_SetTurnaroundTime+0x12c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d906      	bls.n	8007d76 <USB_SetTurnaroundTime+0x82>
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	4a2e      	ldr	r2, [pc, #184]	; (8007e24 <USB_SetTurnaroundTime+0x130>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d802      	bhi.n	8007d76 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007d70:	230b      	movs	r3, #11
 8007d72:	617b      	str	r3, [r7, #20]
 8007d74:	e036      	b.n	8007de4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	4a2a      	ldr	r2, [pc, #168]	; (8007e24 <USB_SetTurnaroundTime+0x130>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d906      	bls.n	8007d8c <USB_SetTurnaroundTime+0x98>
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	4a29      	ldr	r2, [pc, #164]	; (8007e28 <USB_SetTurnaroundTime+0x134>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d802      	bhi.n	8007d8c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007d86:	230a      	movs	r3, #10
 8007d88:	617b      	str	r3, [r7, #20]
 8007d8a:	e02b      	b.n	8007de4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	4a26      	ldr	r2, [pc, #152]	; (8007e28 <USB_SetTurnaroundTime+0x134>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d906      	bls.n	8007da2 <USB_SetTurnaroundTime+0xae>
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	4a25      	ldr	r2, [pc, #148]	; (8007e2c <USB_SetTurnaroundTime+0x138>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d202      	bcs.n	8007da2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007d9c:	2309      	movs	r3, #9
 8007d9e:	617b      	str	r3, [r7, #20]
 8007da0:	e020      	b.n	8007de4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	4a21      	ldr	r2, [pc, #132]	; (8007e2c <USB_SetTurnaroundTime+0x138>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d306      	bcc.n	8007db8 <USB_SetTurnaroundTime+0xc4>
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	4a20      	ldr	r2, [pc, #128]	; (8007e30 <USB_SetTurnaroundTime+0x13c>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d802      	bhi.n	8007db8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007db2:	2308      	movs	r3, #8
 8007db4:	617b      	str	r3, [r7, #20]
 8007db6:	e015      	b.n	8007de4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	4a1d      	ldr	r2, [pc, #116]	; (8007e30 <USB_SetTurnaroundTime+0x13c>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d906      	bls.n	8007dce <USB_SetTurnaroundTime+0xda>
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	4a1c      	ldr	r2, [pc, #112]	; (8007e34 <USB_SetTurnaroundTime+0x140>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d202      	bcs.n	8007dce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007dc8:	2307      	movs	r3, #7
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	e00a      	b.n	8007de4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007dce:	2306      	movs	r3, #6
 8007dd0:	617b      	str	r3, [r7, #20]
 8007dd2:	e007      	b.n	8007de4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d102      	bne.n	8007de0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007dda:	2309      	movs	r3, #9
 8007ddc:	617b      	str	r3, [r7, #20]
 8007dde:	e001      	b.n	8007de4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007de0:	2309      	movs	r3, #9
 8007de2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	68da      	ldr	r2, [r3, #12]
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	029b      	lsls	r3, r3, #10
 8007df8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007dfc:	431a      	orrs	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	371c      	adds	r7, #28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	00d8acbf 	.word	0x00d8acbf
 8007e14:	00e4e1c0 	.word	0x00e4e1c0
 8007e18:	00f42400 	.word	0x00f42400
 8007e1c:	01067380 	.word	0x01067380
 8007e20:	011a499f 	.word	0x011a499f
 8007e24:	01312cff 	.word	0x01312cff
 8007e28:	014ca43f 	.word	0x014ca43f
 8007e2c:	016e3600 	.word	0x016e3600
 8007e30:	01a6ab1f 	.word	0x01a6ab1f
 8007e34:	01e84800 	.word	0x01e84800

08007e38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f043 0201 	orr.w	r2, r3, #1
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f023 0201 	bic.w	r2, r3, #1
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	460b      	mov	r3, r1
 8007e86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d115      	bne.n	8007eca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007eaa:	2001      	movs	r0, #1
 8007eac:	f7fa f882 	bl	8001fb4 <HAL_Delay>
      ms++;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 fa45 	bl	8009346 <USB_GetMode>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d01e      	beq.n	8007f00 <USB_SetCurrentMode+0x84>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2b31      	cmp	r3, #49	; 0x31
 8007ec6:	d9f0      	bls.n	8007eaa <USB_SetCurrentMode+0x2e>
 8007ec8:	e01a      	b.n	8007f00 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007eca:	78fb      	ldrb	r3, [r7, #3]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d115      	bne.n	8007efc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007edc:	2001      	movs	r0, #1
 8007ede:	f7fa f869 	bl	8001fb4 <HAL_Delay>
      ms++;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f001 fa2c 	bl	8009346 <USB_GetMode>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d005      	beq.n	8007f00 <USB_SetCurrentMode+0x84>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2b31      	cmp	r3, #49	; 0x31
 8007ef8:	d9f0      	bls.n	8007edc <USB_SetCurrentMode+0x60>
 8007efa:	e001      	b.n	8007f00 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e005      	b.n	8007f0c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b32      	cmp	r3, #50	; 0x32
 8007f04:	d101      	bne.n	8007f0a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e000      	b.n	8007f0c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f14:	b084      	sub	sp, #16
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b086      	sub	sp, #24
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007f22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f2e:	2300      	movs	r3, #0
 8007f30:	613b      	str	r3, [r7, #16]
 8007f32:	e009      	b.n	8007f48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	3340      	adds	r3, #64	; 0x40
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	2200      	movs	r2, #0
 8007f40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	3301      	adds	r3, #1
 8007f46:	613b      	str	r3, [r7, #16]
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	2b0e      	cmp	r3, #14
 8007f4c:	d9f2      	bls.n	8007f34 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d11c      	bne.n	8007f8e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f62:	f043 0302 	orr.w	r3, r3, #2
 8007f66:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f78:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f84:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	639a      	str	r2, [r3, #56]	; 0x38
 8007f8c:	e00b      	b.n	8007fa6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f92:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fac:	461a      	mov	r2, r3
 8007fae:	2300      	movs	r3, #0
 8007fb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb8:	4619      	mov	r1, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	680b      	ldr	r3, [r1, #0]
 8007fc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d10c      	bne.n	8007fe6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d104      	bne.n	8007fdc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f965 	bl	80082a4 <USB_SetDevSpeed>
 8007fda:	e008      	b.n	8007fee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007fdc:	2101      	movs	r1, #1
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f960 	bl	80082a4 <USB_SetDevSpeed>
 8007fe4:	e003      	b.n	8007fee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007fe6:	2103      	movs	r1, #3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f95b 	bl	80082a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007fee:	2110      	movs	r1, #16
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f8f3 	bl	80081dc <USB_FlushTxFifo>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f91f 	bl	8008244 <USB_FlushRxFifo>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008016:	461a      	mov	r2, r3
 8008018:	2300      	movs	r3, #0
 800801a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008022:	461a      	mov	r2, r3
 8008024:	2300      	movs	r3, #0
 8008026:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800802e:	461a      	mov	r2, r3
 8008030:	2300      	movs	r3, #0
 8008032:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008034:	2300      	movs	r3, #0
 8008036:	613b      	str	r3, [r7, #16]
 8008038:	e043      	b.n	80080c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800804c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008050:	d118      	bne.n	8008084 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10a      	bne.n	800806e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4413      	add	r3, r2
 8008060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008064:	461a      	mov	r2, r3
 8008066:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800806a:	6013      	str	r3, [r2, #0]
 800806c:	e013      	b.n	8008096 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4413      	add	r3, r2
 8008076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807a:	461a      	mov	r2, r3
 800807c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008080:	6013      	str	r3, [r2, #0]
 8008082:	e008      	b.n	8008096 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	015a      	lsls	r2, r3, #5
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4413      	add	r3, r2
 800808c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008090:	461a      	mov	r2, r3
 8008092:	2300      	movs	r3, #0
 8008094:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4413      	add	r3, r2
 800809e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a2:	461a      	mov	r2, r3
 80080a4:	2300      	movs	r3, #0
 80080a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b4:	461a      	mov	r2, r3
 80080b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	3301      	adds	r3, #1
 80080c0:	613b      	str	r3, [r7, #16]
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d3b7      	bcc.n	800803a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080ca:	2300      	movs	r3, #0
 80080cc:	613b      	str	r3, [r7, #16]
 80080ce:	e043      	b.n	8008158 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080e6:	d118      	bne.n	800811a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10a      	bne.n	8008104 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080fa:	461a      	mov	r2, r3
 80080fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008100:	6013      	str	r3, [r2, #0]
 8008102:	e013      	b.n	800812c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008110:	461a      	mov	r2, r3
 8008112:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008116:	6013      	str	r3, [r2, #0]
 8008118:	e008      	b.n	800812c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4413      	add	r3, r2
 8008122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008126:	461a      	mov	r2, r3
 8008128:	2300      	movs	r3, #0
 800812a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008138:	461a      	mov	r2, r3
 800813a:	2300      	movs	r3, #0
 800813c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800814a:	461a      	mov	r2, r3
 800814c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008150:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	3301      	adds	r3, #1
 8008156:	613b      	str	r3, [r7, #16]
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	429a      	cmp	r2, r3
 800815e:	d3b7      	bcc.n	80080d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800816e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008172:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008180:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	2b00      	cmp	r3, #0
 8008186:	d105      	bne.n	8008194 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	f043 0210 	orr.w	r2, r3, #16
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	699a      	ldr	r2, [r3, #24]
 8008198:	4b0f      	ldr	r3, [pc, #60]	; (80081d8 <USB_DevInit+0x2c4>)
 800819a:	4313      	orrs	r3, r2
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80081a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d005      	beq.n	80081b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	f043 0208 	orr.w	r2, r3, #8
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80081b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d107      	bne.n	80081c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081c0:	f043 0304 	orr.w	r3, r3, #4
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081d4:	b004      	add	sp, #16
 80081d6:	4770      	bx	lr
 80081d8:	803c3800 	.word	0x803c3800

080081dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80081e6:	2300      	movs	r3, #0
 80081e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	3301      	adds	r3, #1
 80081ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4a13      	ldr	r2, [pc, #76]	; (8008240 <USB_FlushTxFifo+0x64>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d901      	bls.n	80081fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e01b      	b.n	8008234 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	2b00      	cmp	r3, #0
 8008202:	daf2      	bge.n	80081ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008204:	2300      	movs	r3, #0
 8008206:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	019b      	lsls	r3, r3, #6
 800820c:	f043 0220 	orr.w	r2, r3, #32
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3301      	adds	r3, #1
 8008218:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	4a08      	ldr	r2, [pc, #32]	; (8008240 <USB_FlushTxFifo+0x64>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d901      	bls.n	8008226 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e006      	b.n	8008234 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	f003 0320 	and.w	r3, r3, #32
 800822e:	2b20      	cmp	r3, #32
 8008230:	d0f0      	beq.n	8008214 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	00030d40 	.word	0x00030d40

08008244 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800824c:	2300      	movs	r3, #0
 800824e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	3301      	adds	r3, #1
 8008254:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	4a11      	ldr	r2, [pc, #68]	; (80082a0 <USB_FlushRxFifo+0x5c>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d901      	bls.n	8008262 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e018      	b.n	8008294 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	daf2      	bge.n	8008250 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800826a:	2300      	movs	r3, #0
 800826c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2210      	movs	r2, #16
 8008272:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	3301      	adds	r3, #1
 8008278:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	4a08      	ldr	r2, [pc, #32]	; (80082a0 <USB_FlushRxFifo+0x5c>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d901      	bls.n	8008286 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e006      	b.n	8008294 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	f003 0310 	and.w	r3, r3, #16
 800828e:	2b10      	cmp	r3, #16
 8008290:	d0f0      	beq.n	8008274 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	00030d40 	.word	0x00030d40

080082a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	460b      	mov	r3, r1
 80082ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	78fb      	ldrb	r3, [r7, #3]
 80082be:	68f9      	ldr	r1, [r7, #12]
 80082c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082c4:	4313      	orrs	r3, r2
 80082c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b087      	sub	sp, #28
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f003 0306 	and.w	r3, r3, #6
 80082ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d102      	bne.n	80082fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80082f6:	2300      	movs	r3, #0
 80082f8:	75fb      	strb	r3, [r7, #23]
 80082fa:	e00a      	b.n	8008312 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d002      	beq.n	8008308 <USB_GetDevSpeed+0x32>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2b06      	cmp	r3, #6
 8008306:	d102      	bne.n	800830e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008308:	2302      	movs	r3, #2
 800830a:	75fb      	strb	r3, [r7, #23]
 800830c:	e001      	b.n	8008312 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800830e:	230f      	movs	r3, #15
 8008310:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008312:	7dfb      	ldrb	r3, [r7, #23]
}
 8008314:	4618      	mov	r0, r3
 8008316:	371c      	adds	r7, #28
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	785b      	ldrb	r3, [r3, #1]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d13a      	bne.n	80083b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008342:	69da      	ldr	r2, [r3, #28]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	f003 030f 	and.w	r3, r3, #15
 800834c:	2101      	movs	r1, #1
 800834e:	fa01 f303 	lsl.w	r3, r1, r3
 8008352:	b29b      	uxth	r3, r3
 8008354:	68f9      	ldr	r1, [r7, #12]
 8008356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800835a:	4313      	orrs	r3, r2
 800835c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d155      	bne.n	8008420 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	015a      	lsls	r2, r3, #5
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	4413      	add	r3, r2
 800837c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	791b      	ldrb	r3, [r3, #4]
 800838e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008390:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	059b      	lsls	r3, r3, #22
 8008396:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008398:	4313      	orrs	r3, r2
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	0151      	lsls	r1, r2, #5
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	440a      	add	r2, r1
 80083a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	e036      	b.n	8008420 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b8:	69da      	ldr	r2, [r3, #28]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	f003 030f 	and.w	r3, r3, #15
 80083c2:	2101      	movs	r1, #1
 80083c4:	fa01 f303 	lsl.w	r3, r1, r3
 80083c8:	041b      	lsls	r3, r3, #16
 80083ca:	68f9      	ldr	r1, [r7, #12]
 80083cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083d0:	4313      	orrs	r3, r2
 80083d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d11a      	bne.n	8008420 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	791b      	ldrb	r3, [r3, #4]
 8008404:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008406:	430b      	orrs	r3, r1
 8008408:	4313      	orrs	r3, r2
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	0151      	lsls	r1, r2, #5
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	440a      	add	r2, r1
 8008412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800841a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800841e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
	...

08008430 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	785b      	ldrb	r3, [r3, #1]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d161      	bne.n	8008510 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800845e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008462:	d11f      	bne.n	80084a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	4413      	add	r3, r2
 800846c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	0151      	lsls	r1, r2, #5
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	440a      	add	r2, r1
 800847a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800847e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008482:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	0151      	lsls	r1, r2, #5
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	440a      	add	r2, r1
 800849a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800849e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	f003 030f 	and.w	r3, r3, #15
 80084b4:	2101      	movs	r1, #1
 80084b6:	fa01 f303 	lsl.w	r3, r1, r3
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	43db      	mvns	r3, r3
 80084be:	68f9      	ldr	r1, [r7, #12]
 80084c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084c4:	4013      	ands	r3, r2
 80084c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ce:	69da      	ldr	r2, [r3, #28]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	f003 030f 	and.w	r3, r3, #15
 80084d8:	2101      	movs	r1, #1
 80084da:	fa01 f303 	lsl.w	r3, r1, r3
 80084de:	b29b      	uxth	r3, r3
 80084e0:	43db      	mvns	r3, r3
 80084e2:	68f9      	ldr	r1, [r7, #12]
 80084e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084e8:	4013      	ands	r3, r2
 80084ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	015a      	lsls	r2, r3, #5
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4413      	add	r3, r2
 80084f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	0159      	lsls	r1, r3, #5
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	440b      	add	r3, r1
 8008502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008506:	4619      	mov	r1, r3
 8008508:	4b35      	ldr	r3, [pc, #212]	; (80085e0 <USB_DeactivateEndpoint+0x1b0>)
 800850a:	4013      	ands	r3, r2
 800850c:	600b      	str	r3, [r1, #0]
 800850e:	e060      	b.n	80085d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008526:	d11f      	bne.n	8008568 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	4413      	add	r3, r2
 8008530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	0151      	lsls	r1, r2, #5
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	440a      	add	r2, r1
 800853e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008542:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008546:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	4413      	add	r3, r2
 8008550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	0151      	lsls	r1, r2, #5
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	440a      	add	r2, r1
 800855e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008562:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008566:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800856e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	f003 030f 	and.w	r3, r3, #15
 8008578:	2101      	movs	r1, #1
 800857a:	fa01 f303 	lsl.w	r3, r1, r3
 800857e:	041b      	lsls	r3, r3, #16
 8008580:	43db      	mvns	r3, r3
 8008582:	68f9      	ldr	r1, [r7, #12]
 8008584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008588:	4013      	ands	r3, r2
 800858a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008592:	69da      	ldr	r2, [r3, #28]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	f003 030f 	and.w	r3, r3, #15
 800859c:	2101      	movs	r1, #1
 800859e:	fa01 f303 	lsl.w	r3, r1, r3
 80085a2:	041b      	lsls	r3, r3, #16
 80085a4:	43db      	mvns	r3, r3
 80085a6:	68f9      	ldr	r1, [r7, #12]
 80085a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085ac:	4013      	ands	r3, r2
 80085ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	0159      	lsls	r1, r3, #5
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	440b      	add	r3, r1
 80085c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ca:	4619      	mov	r1, r3
 80085cc:	4b05      	ldr	r3, [pc, #20]	; (80085e4 <USB_DeactivateEndpoint+0x1b4>)
 80085ce:	4013      	ands	r3, r2
 80085d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	ec337800 	.word	0xec337800
 80085e4:	eff37800 	.word	0xeff37800

080085e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08a      	sub	sp, #40	; 0x28
 80085ec:	af02      	add	r7, sp, #8
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	4613      	mov	r3, r2
 80085f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	785b      	ldrb	r3, [r3, #1]
 8008604:	2b01      	cmp	r3, #1
 8008606:	f040 815c 	bne.w	80088c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d132      	bne.n	8008678 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	4413      	add	r3, r2
 800861a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	0151      	lsls	r1, r2, #5
 8008624:	69fa      	ldr	r2, [r7, #28]
 8008626:	440a      	add	r2, r1
 8008628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800862c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008630:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008634:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	4413      	add	r3, r2
 800863e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	0151      	lsls	r1, r2, #5
 8008648:	69fa      	ldr	r2, [r7, #28]
 800864a:	440a      	add	r2, r1
 800864c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008654:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	015a      	lsls	r2, r3, #5
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	4413      	add	r3, r2
 800865e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	0151      	lsls	r1, r2, #5
 8008668:	69fa      	ldr	r2, [r7, #28]
 800866a:	440a      	add	r2, r1
 800866c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008670:	0cdb      	lsrs	r3, r3, #19
 8008672:	04db      	lsls	r3, r3, #19
 8008674:	6113      	str	r3, [r2, #16]
 8008676:	e074      	b.n	8008762 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	4413      	add	r3, r2
 8008680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	0151      	lsls	r1, r2, #5
 800868a:	69fa      	ldr	r2, [r7, #28]
 800868c:	440a      	add	r2, r1
 800868e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008692:	0cdb      	lsrs	r3, r3, #19
 8008694:	04db      	lsls	r3, r3, #19
 8008696:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	0151      	lsls	r1, r2, #5
 80086aa:	69fa      	ldr	r2, [r7, #28]
 80086ac:	440a      	add	r2, r1
 80086ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	015a      	lsls	r2, r3, #5
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	4413      	add	r3, r2
 80086c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	6999      	ldr	r1, [r3, #24]
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	440b      	add	r3, r1
 80086d4:	1e59      	subs	r1, r3, #1
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	fbb1 f3f3 	udiv	r3, r1, r3
 80086de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80086e0:	4b9d      	ldr	r3, [pc, #628]	; (8008958 <USB_EPStartXfer+0x370>)
 80086e2:	400b      	ands	r3, r1
 80086e4:	69b9      	ldr	r1, [r7, #24]
 80086e6:	0148      	lsls	r0, r1, #5
 80086e8:	69f9      	ldr	r1, [r7, #28]
 80086ea:	4401      	add	r1, r0
 80086ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80086f0:	4313      	orrs	r3, r2
 80086f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008700:	691a      	ldr	r2, [r3, #16]
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800870a:	69b9      	ldr	r1, [r7, #24]
 800870c:	0148      	lsls	r0, r1, #5
 800870e:	69f9      	ldr	r1, [r7, #28]
 8008710:	4401      	add	r1, r0
 8008712:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008716:	4313      	orrs	r3, r2
 8008718:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	791b      	ldrb	r3, [r3, #4]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d11f      	bne.n	8008762 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	4413      	add	r3, r2
 800872a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	69ba      	ldr	r2, [r7, #24]
 8008732:	0151      	lsls	r1, r2, #5
 8008734:	69fa      	ldr	r2, [r7, #28]
 8008736:	440a      	add	r2, r1
 8008738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800873c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008740:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	4413      	add	r3, r2
 800874a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	69ba      	ldr	r2, [r7, #24]
 8008752:	0151      	lsls	r1, r2, #5
 8008754:	69fa      	ldr	r2, [r7, #28]
 8008756:	440a      	add	r2, r1
 8008758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800875c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008760:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008762:	79fb      	ldrb	r3, [r7, #7]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d14b      	bne.n	8008800 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d009      	beq.n	8008784 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	4413      	add	r3, r2
 8008778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800877c:	461a      	mov	r2, r3
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	791b      	ldrb	r3, [r3, #4]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d128      	bne.n	80087de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008798:	2b00      	cmp	r3, #0
 800879a:	d110      	bne.n	80087be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	015a      	lsls	r2, r3, #5
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	69ba      	ldr	r2, [r7, #24]
 80087ac:	0151      	lsls	r1, r2, #5
 80087ae:	69fa      	ldr	r2, [r7, #28]
 80087b0:	440a      	add	r2, r1
 80087b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087ba:	6013      	str	r3, [r2, #0]
 80087bc:	e00f      	b.n	80087de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	015a      	lsls	r2, r3, #5
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	4413      	add	r3, r2
 80087c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	0151      	lsls	r1, r2, #5
 80087d0:	69fa      	ldr	r2, [r7, #28]
 80087d2:	440a      	add	r2, r1
 80087d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	015a      	lsls	r2, r3, #5
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	4413      	add	r3, r2
 80087e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	69ba      	ldr	r2, [r7, #24]
 80087ee:	0151      	lsls	r1, r2, #5
 80087f0:	69fa      	ldr	r2, [r7, #28]
 80087f2:	440a      	add	r2, r1
 80087f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087fc:	6013      	str	r3, [r2, #0]
 80087fe:	e133      	b.n	8008a68 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	69ba      	ldr	r2, [r7, #24]
 8008810:	0151      	lsls	r1, r2, #5
 8008812:	69fa      	ldr	r2, [r7, #28]
 8008814:	440a      	add	r2, r1
 8008816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800881a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800881e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	791b      	ldrb	r3, [r3, #4]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d015      	beq.n	8008854 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 811b 	beq.w	8008a68 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	f003 030f 	and.w	r3, r3, #15
 8008842:	2101      	movs	r1, #1
 8008844:	fa01 f303 	lsl.w	r3, r1, r3
 8008848:	69f9      	ldr	r1, [r7, #28]
 800884a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800884e:	4313      	orrs	r3, r2
 8008850:	634b      	str	r3, [r1, #52]	; 0x34
 8008852:	e109      	b.n	8008a68 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008860:	2b00      	cmp	r3, #0
 8008862:	d110      	bne.n	8008886 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	69ba      	ldr	r2, [r7, #24]
 8008874:	0151      	lsls	r1, r2, #5
 8008876:	69fa      	ldr	r2, [r7, #28]
 8008878:	440a      	add	r2, r1
 800887a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800887e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008882:	6013      	str	r3, [r2, #0]
 8008884:	e00f      	b.n	80088a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	4413      	add	r3, r2
 800888e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	0151      	lsls	r1, r2, #5
 8008898:	69fa      	ldr	r2, [r7, #28]
 800889a:	440a      	add	r2, r1
 800889c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	6919      	ldr	r1, [r3, #16]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	781a      	ldrb	r2, [r3, #0]
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	b298      	uxth	r0, r3
 80088b4:	79fb      	ldrb	r3, [r7, #7]
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	4603      	mov	r3, r0
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 fade 	bl	8008e7c <USB_WritePacket>
 80088c0:	e0d2      	b.n	8008a68 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	015a      	lsls	r2, r3, #5
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	4413      	add	r3, r2
 80088ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	69ba      	ldr	r2, [r7, #24]
 80088d2:	0151      	lsls	r1, r2, #5
 80088d4:	69fa      	ldr	r2, [r7, #28]
 80088d6:	440a      	add	r2, r1
 80088d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088dc:	0cdb      	lsrs	r3, r3, #19
 80088de:	04db      	lsls	r3, r3, #19
 80088e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	69ba      	ldr	r2, [r7, #24]
 80088f2:	0151      	lsls	r1, r2, #5
 80088f4:	69fa      	ldr	r2, [r7, #28]
 80088f6:	440a      	add	r2, r1
 80088f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008900:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008904:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d126      	bne.n	800895c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	4413      	add	r3, r2
 8008916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891a:	691a      	ldr	r2, [r3, #16]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008924:	69b9      	ldr	r1, [r7, #24]
 8008926:	0148      	lsls	r0, r1, #5
 8008928:	69f9      	ldr	r1, [r7, #28]
 800892a:	4401      	add	r1, r0
 800892c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008930:	4313      	orrs	r3, r2
 8008932:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	69ba      	ldr	r2, [r7, #24]
 8008944:	0151      	lsls	r1, r2, #5
 8008946:	69fa      	ldr	r2, [r7, #28]
 8008948:	440a      	add	r2, r1
 800894a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800894e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008952:	6113      	str	r3, [r2, #16]
 8008954:	e03a      	b.n	80089cc <USB_EPStartXfer+0x3e4>
 8008956:	bf00      	nop
 8008958:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	699a      	ldr	r2, [r3, #24]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	4413      	add	r3, r2
 8008966:	1e5a      	subs	r2, r3, #1
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008970:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	8afa      	ldrh	r2, [r7, #22]
 8008978:	fb03 f202 	mul.w	r2, r3, r2
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800898c:	691a      	ldr	r2, [r3, #16]
 800898e:	8afb      	ldrh	r3, [r7, #22]
 8008990:	04d9      	lsls	r1, r3, #19
 8008992:	4b38      	ldr	r3, [pc, #224]	; (8008a74 <USB_EPStartXfer+0x48c>)
 8008994:	400b      	ands	r3, r1
 8008996:	69b9      	ldr	r1, [r7, #24]
 8008998:	0148      	lsls	r0, r1, #5
 800899a:	69f9      	ldr	r1, [r7, #28]
 800899c:	4401      	add	r1, r0
 800899e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80089a2:	4313      	orrs	r3, r2
 80089a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	015a      	lsls	r2, r3, #5
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b2:	691a      	ldr	r2, [r3, #16]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	69db      	ldr	r3, [r3, #28]
 80089b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089bc:	69b9      	ldr	r1, [r7, #24]
 80089be:	0148      	lsls	r0, r1, #5
 80089c0:	69f9      	ldr	r1, [r7, #28]
 80089c2:	4401      	add	r1, r0
 80089c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80089c8:	4313      	orrs	r3, r2
 80089ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80089cc:	79fb      	ldrb	r3, [r7, #7]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d10d      	bne.n	80089ee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d009      	beq.n	80089ee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	6919      	ldr	r1, [r3, #16]
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ea:	460a      	mov	r2, r1
 80089ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	791b      	ldrb	r3, [r3, #4]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d128      	bne.n	8008a48 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d110      	bne.n	8008a28 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	0151      	lsls	r1, r2, #5
 8008a18:	69fa      	ldr	r2, [r7, #28]
 8008a1a:	440a      	add	r2, r1
 8008a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a24:	6013      	str	r3, [r2, #0]
 8008a26:	e00f      	b.n	8008a48 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	015a      	lsls	r2, r3, #5
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	69ba      	ldr	r2, [r7, #24]
 8008a38:	0151      	lsls	r1, r2, #5
 8008a3a:	69fa      	ldr	r2, [r7, #28]
 8008a3c:	440a      	add	r2, r1
 8008a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	69ba      	ldr	r2, [r7, #24]
 8008a58:	0151      	lsls	r1, r2, #5
 8008a5a:	69fa      	ldr	r2, [r7, #28]
 8008a5c:	440a      	add	r2, r1
 8008a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3720      	adds	r7, #32
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	1ff80000 	.word	0x1ff80000

08008a78 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	4613      	mov	r3, r2
 8008a84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	785b      	ldrb	r3, [r3, #1]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	f040 80ce 	bne.w	8008c36 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d132      	bne.n	8008b08 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	0151      	lsls	r1, r2, #5
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	440a      	add	r2, r1
 8008ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008abc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ac0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ac4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	0151      	lsls	r1, r2, #5
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	440a      	add	r2, r1
 8008adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ae0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ae4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	0151      	lsls	r1, r2, #5
 8008af8:	697a      	ldr	r2, [r7, #20]
 8008afa:	440a      	add	r2, r1
 8008afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b00:	0cdb      	lsrs	r3, r3, #19
 8008b02:	04db      	lsls	r3, r3, #19
 8008b04:	6113      	str	r3, [r2, #16]
 8008b06:	e04e      	b.n	8008ba6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	015a      	lsls	r2, r3, #5
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	4413      	add	r3, r2
 8008b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	0151      	lsls	r1, r2, #5
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	440a      	add	r2, r1
 8008b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b22:	0cdb      	lsrs	r3, r3, #19
 8008b24:	04db      	lsls	r3, r3, #19
 8008b26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	0151      	lsls	r1, r2, #5
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	440a      	add	r2, r1
 8008b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b4a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	699a      	ldr	r2, [r3, #24]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d903      	bls.n	8008b60 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	68da      	ldr	r2, [r3, #12]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	0151      	lsls	r1, r2, #5
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	440a      	add	r2, r1
 8008b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8c:	691a      	ldr	r2, [r3, #16]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b96:	6939      	ldr	r1, [r7, #16]
 8008b98:	0148      	lsls	r0, r1, #5
 8008b9a:	6979      	ldr	r1, [r7, #20]
 8008b9c:	4401      	add	r1, r0
 8008b9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008ba6:	79fb      	ldrb	r3, [r7, #7]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d11e      	bne.n	8008bea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d009      	beq.n	8008bc8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	0151      	lsls	r1, r2, #5
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	440a      	add	r2, r1
 8008bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008be2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008be6:	6013      	str	r3, [r2, #0]
 8008be8:	e097      	b.n	8008d1a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	015a      	lsls	r2, r3, #5
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	0151      	lsls	r1, r2, #5
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	440a      	add	r2, r1
 8008c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c08:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 8083 	beq.w	8008d1a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	f003 030f 	and.w	r3, r3, #15
 8008c24:	2101      	movs	r1, #1
 8008c26:	fa01 f303 	lsl.w	r3, r1, r3
 8008c2a:	6979      	ldr	r1, [r7, #20]
 8008c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c30:	4313      	orrs	r3, r2
 8008c32:	634b      	str	r3, [r1, #52]	; 0x34
 8008c34:	e071      	b.n	8008d1a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	015a      	lsls	r2, r3, #5
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	0151      	lsls	r1, r2, #5
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	440a      	add	r2, r1
 8008c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c50:	0cdb      	lsrs	r3, r3, #19
 8008c52:	04db      	lsls	r3, r3, #19
 8008c54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	0151      	lsls	r1, r2, #5
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	440a      	add	r2, r1
 8008c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d003      	beq.n	8008c8a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	68da      	ldr	r2, [r3, #12]
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	68da      	ldr	r2, [r3, #12]
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	015a      	lsls	r2, r3, #5
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	4413      	add	r3, r2
 8008c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	0151      	lsls	r1, r2, #5
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	440a      	add	r2, r1
 8008ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cbe:	691a      	ldr	r2, [r3, #16]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cc8:	6939      	ldr	r1, [r7, #16]
 8008cca:	0148      	lsls	r0, r1, #5
 8008ccc:	6979      	ldr	r1, [r7, #20]
 8008cce:	4401      	add	r1, r0
 8008cd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008cd8:	79fb      	ldrb	r3, [r7, #7]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d10d      	bne.n	8008cfa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d009      	beq.n	8008cfa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	6919      	ldr	r1, [r3, #16]
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf6:	460a      	mov	r2, r1
 8008cf8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	0151      	lsls	r1, r2, #5
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	440a      	add	r2, r1
 8008d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	371c      	adds	r7, #28
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	785b      	ldrb	r3, [r3, #1]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d14a      	bne.n	8008ddc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d5e:	f040 8086 	bne.w	8008e6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	7812      	ldrb	r2, [r2, #0]
 8008d76:	0151      	lsls	r1, r2, #5
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	440a      	add	r2, r1
 8008d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	015a      	lsls	r2, r3, #5
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	4413      	add	r3, r2
 8008d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	7812      	ldrb	r2, [r2, #0]
 8008d9a:	0151      	lsls	r1, r2, #5
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	440a      	add	r2, r1
 8008da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008da4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008da8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	3301      	adds	r3, #1
 8008dae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f242 7210 	movw	r2, #10000	; 0x2710
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d902      	bls.n	8008dc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	75fb      	strb	r3, [r7, #23]
          break;
 8008dbe:	e056      	b.n	8008e6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dd8:	d0e7      	beq.n	8008daa <USB_EPStopXfer+0x82>
 8008dda:	e048      	b.n	8008e6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	015a      	lsls	r2, r3, #5
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	4413      	add	r3, r2
 8008de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008df4:	d13b      	bne.n	8008e6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	7812      	ldrb	r2, [r2, #0]
 8008e0a:	0151      	lsls	r1, r2, #5
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	440a      	add	r2, r1
 8008e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	7812      	ldrb	r2, [r2, #0]
 8008e2e:	0151      	lsls	r1, r2, #5
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	440a      	add	r2, r1
 8008e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3301      	adds	r3, #1
 8008e42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f242 7210 	movw	r2, #10000	; 0x2710
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d902      	bls.n	8008e54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	75fb      	strb	r3, [r7, #23]
          break;
 8008e52:	e00c      	b.n	8008e6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e6c:	d0e7      	beq.n	8008e3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	371c      	adds	r7, #28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b089      	sub	sp, #36	; 0x24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	4611      	mov	r1, r2
 8008e88:	461a      	mov	r2, r3
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	71fb      	strb	r3, [r7, #7]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008e9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d123      	bne.n	8008eea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008ea2:	88bb      	ldrh	r3, [r7, #4]
 8008ea4:	3303      	adds	r3, #3
 8008ea6:	089b      	lsrs	r3, r3, #2
 8008ea8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008eaa:	2300      	movs	r3, #0
 8008eac:	61bb      	str	r3, [r7, #24]
 8008eae:	e018      	b.n	8008ee2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	031a      	lsls	r2, r3, #12
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	61bb      	str	r3, [r7, #24]
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d3e2      	bcc.n	8008eb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3724      	adds	r7, #36	; 0x24
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b08b      	sub	sp, #44	; 0x2c
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	4613      	mov	r3, r2
 8008f04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008f0e:	88fb      	ldrh	r3, [r7, #6]
 8008f10:	089b      	lsrs	r3, r3, #2
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008f16:	88fb      	ldrh	r3, [r7, #6]
 8008f18:	f003 0303 	and.w	r3, r3, #3
 8008f1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008f1e:	2300      	movs	r3, #0
 8008f20:	623b      	str	r3, [r7, #32]
 8008f22:	e014      	b.n	8008f4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	3301      	adds	r3, #1
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	3301      	adds	r3, #1
 8008f3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	3301      	adds	r3, #1
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	3301      	adds	r3, #1
 8008f46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	623b      	str	r3, [r7, #32]
 8008f4e:	6a3a      	ldr	r2, [r7, #32]
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d3e6      	bcc.n	8008f24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008f56:	8bfb      	ldrh	r3, [r7, #30]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d01e      	beq.n	8008f9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f66:	461a      	mov	r2, r3
 8008f68:	f107 0310 	add.w	r3, r7, #16
 8008f6c:	6812      	ldr	r2, [r2, #0]
 8008f6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	6a3b      	ldr	r3, [r7, #32]
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	00db      	lsls	r3, r3, #3
 8008f78:	fa22 f303 	lsr.w	r3, r2, r3
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f80:	701a      	strb	r2, [r3, #0]
      i++;
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	3301      	adds	r3, #1
 8008f86:	623b      	str	r3, [r7, #32]
      pDest++;
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008f8e:	8bfb      	ldrh	r3, [r7, #30]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008f94:	8bfb      	ldrh	r3, [r7, #30]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1ea      	bne.n	8008f70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	372c      	adds	r7, #44	; 0x2c
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	785b      	ldrb	r3, [r3, #1]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d12c      	bne.n	800901e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	015a      	lsls	r2, r3, #5
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	db12      	blt.n	8008ffc <USB_EPSetStall+0x54>
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00f      	beq.n	8008ffc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	0151      	lsls	r1, r2, #5
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	440a      	add	r2, r1
 8008ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ff6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ffa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	015a      	lsls	r2, r3, #5
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4413      	add	r3, r2
 8009004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	0151      	lsls	r1, r2, #5
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	440a      	add	r2, r1
 8009012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009016:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800901a:	6013      	str	r3, [r2, #0]
 800901c:	e02b      	b.n	8009076 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	015a      	lsls	r2, r3, #5
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	4413      	add	r3, r2
 8009026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	db12      	blt.n	8009056 <USB_EPSetStall+0xae>
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00f      	beq.n	8009056 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	015a      	lsls	r2, r3, #5
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	4413      	add	r3, r2
 800903e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	0151      	lsls	r1, r2, #5
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	440a      	add	r2, r1
 800904c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009050:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009054:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	015a      	lsls	r2, r3, #5
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	4413      	add	r3, r2
 800905e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	0151      	lsls	r1, r2, #5
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	440a      	add	r2, r1
 800906c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009070:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009074:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	785b      	ldrb	r3, [r3, #1]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d128      	bne.n	80090f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	0151      	lsls	r1, r2, #5
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	440a      	add	r2, r1
 80090b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	791b      	ldrb	r3, [r3, #4]
 80090c4:	2b03      	cmp	r3, #3
 80090c6:	d003      	beq.n	80090d0 <USB_EPClearStall+0x4c>
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	791b      	ldrb	r3, [r3, #4]
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d138      	bne.n	8009142 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	0151      	lsls	r1, r2, #5
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	440a      	add	r2, r1
 80090e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090ee:	6013      	str	r3, [r2, #0]
 80090f0:	e027      	b.n	8009142 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	0151      	lsls	r1, r2, #5
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	440a      	add	r2, r1
 8009108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800910c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009110:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	791b      	ldrb	r3, [r3, #4]
 8009116:	2b03      	cmp	r3, #3
 8009118:	d003      	beq.n	8009122 <USB_EPClearStall+0x9e>
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	791b      	ldrb	r3, [r3, #4]
 800911e:	2b02      	cmp	r3, #2
 8009120:	d10f      	bne.n	8009142 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	015a      	lsls	r2, r3, #5
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	4413      	add	r3, r2
 800912a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	0151      	lsls	r1, r2, #5
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	440a      	add	r2, r1
 8009138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800913c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009140:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800916e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009172:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	011b      	lsls	r3, r3, #4
 8009180:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009184:	68f9      	ldr	r1, [r7, #12]
 8009186:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800918a:	4313      	orrs	r3, r2
 800918c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091b6:	f023 0303 	bic.w	r3, r3, #3
 80091ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091ca:	f023 0302 	bic.w	r3, r3, #2
 80091ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3714      	adds	r7, #20
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80091de:	b480      	push	{r7}
 80091e0:	b085      	sub	sp, #20
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091f8:	f023 0303 	bic.w	r3, r3, #3
 80091fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800920c:	f043 0302 	orr.w	r3, r3, #2
 8009210:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	4013      	ands	r3, r2
 8009236:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009238:	68fb      	ldr	r3, [r7, #12]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009246:	b480      	push	{r7}
 8009248:	b085      	sub	sp, #20
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009262:	69db      	ldr	r3, [r3, #28]
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	4013      	ands	r3, r2
 8009268:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	0c1b      	lsrs	r3, r3, #16
}
 800926e:	4618      	mov	r0, r3
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800927a:	b480      	push	{r7}
 800927c:	b085      	sub	sp, #20
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009296:	69db      	ldr	r3, [r3, #28]
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	4013      	ands	r3, r2
 800929c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	b29b      	uxth	r3, r3
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80092ae:	b480      	push	{r7}
 80092b0:	b085      	sub	sp, #20
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	460b      	mov	r3, r1
 80092b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80092be:	78fb      	ldrb	r3, [r7, #3]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	4013      	ands	r3, r2
 80092da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80092dc:	68bb      	ldr	r3, [r7, #8]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3714      	adds	r7, #20
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80092ea:	b480      	push	{r7}
 80092ec:	b087      	sub	sp, #28
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
 80092f2:	460b      	mov	r3, r1
 80092f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800930a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800930c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800930e:	78fb      	ldrb	r3, [r7, #3]
 8009310:	f003 030f 	and.w	r3, r3, #15
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	fa22 f303 	lsr.w	r3, r2, r3
 800931a:	01db      	lsls	r3, r3, #7
 800931c:	b2db      	uxtb	r3, r3
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	4313      	orrs	r3, r2
 8009322:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009324:	78fb      	ldrb	r3, [r7, #3]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	4013      	ands	r3, r2
 8009336:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009338:	68bb      	ldr	r3, [r7, #8]
}
 800933a:	4618      	mov	r0, r3
 800933c:	371c      	adds	r7, #28
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009346:	b480      	push	{r7}
 8009348:	b083      	sub	sp, #12
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	f003 0301 	and.w	r3, r3, #1
}
 8009356:	4618      	mov	r0, r3
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009362:	b480      	push	{r7}
 8009364:	b085      	sub	sp, #20
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800937c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009380:	f023 0307 	bic.w	r3, r3, #7
 8009384:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009398:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3714      	adds	r7, #20
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b087      	sub	sp, #28
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	460b      	mov	r3, r1
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	333c      	adds	r3, #60	; 0x3c
 80093be:	3304      	adds	r3, #4
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	4a26      	ldr	r2, [pc, #152]	; (8009460 <USB_EP0_OutStart+0xb8>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d90a      	bls.n	80093e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093dc:	d101      	bne.n	80093e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	e037      	b.n	8009452 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e8:	461a      	mov	r2, r3
 80093ea:	2300      	movs	r3, #0
 80093ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009400:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009410:	f043 0318 	orr.w	r3, r3, #24
 8009414:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009424:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009428:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800942a:	7afb      	ldrb	r3, [r7, #11]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d10f      	bne.n	8009450 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009436:	461a      	mov	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	697a      	ldr	r2, [r7, #20]
 8009446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800944a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800944e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	371c      	adds	r7, #28
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	4f54300a 	.word	0x4f54300a

08009464 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800946c:	2300      	movs	r3, #0
 800946e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3301      	adds	r3, #1
 8009474:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	4a13      	ldr	r2, [pc, #76]	; (80094c8 <USB_CoreReset+0x64>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d901      	bls.n	8009482 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	e01b      	b.n	80094ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	2b00      	cmp	r3, #0
 8009488:	daf2      	bge.n	8009470 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f043 0201 	orr.w	r2, r3, #1
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3301      	adds	r3, #1
 800949e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	4a09      	ldr	r2, [pc, #36]	; (80094c8 <USB_CoreReset+0x64>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d901      	bls.n	80094ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e006      	b.n	80094ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	f003 0301 	and.w	r3, r3, #1
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d0f0      	beq.n	800949a <USB_CoreReset+0x36>

  return HAL_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3714      	adds	r7, #20
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	00030d40 	.word	0x00030d40

080094cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	460b      	mov	r3, r1
 80094d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80094d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80094dc:	f002 fc8a 	bl	800bdf4 <USBD_static_malloc>
 80094e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d109      	bne.n	80094fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	32b0      	adds	r2, #176	; 0xb0
 80094f2:	2100      	movs	r1, #0
 80094f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80094f8:	2302      	movs	r3, #2
 80094fa:	e0d4      	b.n	80096a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80094fc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009500:	2100      	movs	r1, #0
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f002 fcee 	bl	800bee4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	32b0      	adds	r2, #176	; 0xb0
 8009512:	68f9      	ldr	r1, [r7, #12]
 8009514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	32b0      	adds	r2, #176	; 0xb0
 8009522:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	7c1b      	ldrb	r3, [r3, #16]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d138      	bne.n	80095a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009534:	4b5e      	ldr	r3, [pc, #376]	; (80096b0 <USBD_CDC_Init+0x1e4>)
 8009536:	7819      	ldrb	r1, [r3, #0]
 8009538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800953c:	2202      	movs	r2, #2
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f002 fb35 	bl	800bbae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009544:	4b5a      	ldr	r3, [pc, #360]	; (80096b0 <USBD_CDC_Init+0x1e4>)
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	f003 020f 	and.w	r2, r3, #15
 800954c:	6879      	ldr	r1, [r7, #4]
 800954e:	4613      	mov	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	440b      	add	r3, r1
 8009558:	3324      	adds	r3, #36	; 0x24
 800955a:	2201      	movs	r2, #1
 800955c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800955e:	4b55      	ldr	r3, [pc, #340]	; (80096b4 <USBD_CDC_Init+0x1e8>)
 8009560:	7819      	ldrb	r1, [r3, #0]
 8009562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009566:	2202      	movs	r2, #2
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f002 fb20 	bl	800bbae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800956e:	4b51      	ldr	r3, [pc, #324]	; (80096b4 <USBD_CDC_Init+0x1e8>)
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	f003 020f 	and.w	r2, r3, #15
 8009576:	6879      	ldr	r1, [r7, #4]
 8009578:	4613      	mov	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	440b      	add	r3, r1
 8009582:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009586:	2201      	movs	r2, #1
 8009588:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800958a:	4b4b      	ldr	r3, [pc, #300]	; (80096b8 <USBD_CDC_Init+0x1ec>)
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	f003 020f 	and.w	r2, r3, #15
 8009592:	6879      	ldr	r1, [r7, #4]
 8009594:	4613      	mov	r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	4413      	add	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	440b      	add	r3, r1
 800959e:	3326      	adds	r3, #38	; 0x26
 80095a0:	2210      	movs	r2, #16
 80095a2:	801a      	strh	r2, [r3, #0]
 80095a4:	e035      	b.n	8009612 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80095a6:	4b42      	ldr	r3, [pc, #264]	; (80096b0 <USBD_CDC_Init+0x1e4>)
 80095a8:	7819      	ldrb	r1, [r3, #0]
 80095aa:	2340      	movs	r3, #64	; 0x40
 80095ac:	2202      	movs	r2, #2
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f002 fafd 	bl	800bbae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80095b4:	4b3e      	ldr	r3, [pc, #248]	; (80096b0 <USBD_CDC_Init+0x1e4>)
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	f003 020f 	and.w	r2, r3, #15
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	4613      	mov	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	440b      	add	r3, r1
 80095c8:	3324      	adds	r3, #36	; 0x24
 80095ca:	2201      	movs	r2, #1
 80095cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80095ce:	4b39      	ldr	r3, [pc, #228]	; (80096b4 <USBD_CDC_Init+0x1e8>)
 80095d0:	7819      	ldrb	r1, [r3, #0]
 80095d2:	2340      	movs	r3, #64	; 0x40
 80095d4:	2202      	movs	r2, #2
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f002 fae9 	bl	800bbae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80095dc:	4b35      	ldr	r3, [pc, #212]	; (80096b4 <USBD_CDC_Init+0x1e8>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	f003 020f 	and.w	r2, r3, #15
 80095e4:	6879      	ldr	r1, [r7, #4]
 80095e6:	4613      	mov	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	440b      	add	r3, r1
 80095f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80095f4:	2201      	movs	r2, #1
 80095f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80095f8:	4b2f      	ldr	r3, [pc, #188]	; (80096b8 <USBD_CDC_Init+0x1ec>)
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	f003 020f 	and.w	r2, r3, #15
 8009600:	6879      	ldr	r1, [r7, #4]
 8009602:	4613      	mov	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	440b      	add	r3, r1
 800960c:	3326      	adds	r3, #38	; 0x26
 800960e:	2210      	movs	r2, #16
 8009610:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009612:	4b29      	ldr	r3, [pc, #164]	; (80096b8 <USBD_CDC_Init+0x1ec>)
 8009614:	7819      	ldrb	r1, [r3, #0]
 8009616:	2308      	movs	r3, #8
 8009618:	2203      	movs	r2, #3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f002 fac7 	bl	800bbae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009620:	4b25      	ldr	r3, [pc, #148]	; (80096b8 <USBD_CDC_Init+0x1ec>)
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	f003 020f 	and.w	r2, r3, #15
 8009628:	6879      	ldr	r1, [r7, #4]
 800962a:	4613      	mov	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	440b      	add	r3, r1
 8009634:	3324      	adds	r3, #36	; 0x24
 8009636:	2201      	movs	r2, #1
 8009638:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	33b0      	adds	r3, #176	; 0xb0
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800966c:	2b00      	cmp	r3, #0
 800966e:	d101      	bne.n	8009674 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009670:	2302      	movs	r3, #2
 8009672:	e018      	b.n	80096a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	7c1b      	ldrb	r3, [r3, #16]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10a      	bne.n	8009692 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800967c:	4b0d      	ldr	r3, [pc, #52]	; (80096b4 <USBD_CDC_Init+0x1e8>)
 800967e:	7819      	ldrb	r1, [r3, #0]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f002 fb7e 	bl	800bd8c <USBD_LL_PrepareReceive>
 8009690:	e008      	b.n	80096a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009692:	4b08      	ldr	r3, [pc, #32]	; (80096b4 <USBD_CDC_Init+0x1e8>)
 8009694:	7819      	ldrb	r1, [r3, #0]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800969c:	2340      	movs	r3, #64	; 0x40
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f002 fb74 	bl	800bd8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	20000097 	.word	0x20000097
 80096b4:	20000098 	.word	0x20000098
 80096b8:	20000099 	.word	0x20000099

080096bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	460b      	mov	r3, r1
 80096c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80096c8:	4b3a      	ldr	r3, [pc, #232]	; (80097b4 <USBD_CDC_DeInit+0xf8>)
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	4619      	mov	r1, r3
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f002 fa93 	bl	800bbfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80096d4:	4b37      	ldr	r3, [pc, #220]	; (80097b4 <USBD_CDC_DeInit+0xf8>)
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	f003 020f 	and.w	r2, r3, #15
 80096dc:	6879      	ldr	r1, [r7, #4]
 80096de:	4613      	mov	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	4413      	add	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	440b      	add	r3, r1
 80096e8:	3324      	adds	r3, #36	; 0x24
 80096ea:	2200      	movs	r2, #0
 80096ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80096ee:	4b32      	ldr	r3, [pc, #200]	; (80097b8 <USBD_CDC_DeInit+0xfc>)
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f002 fa80 	bl	800bbfa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80096fa:	4b2f      	ldr	r3, [pc, #188]	; (80097b8 <USBD_CDC_DeInit+0xfc>)
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	f003 020f 	and.w	r2, r3, #15
 8009702:	6879      	ldr	r1, [r7, #4]
 8009704:	4613      	mov	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4413      	add	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	440b      	add	r3, r1
 800970e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009712:	2200      	movs	r2, #0
 8009714:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009716:	4b29      	ldr	r3, [pc, #164]	; (80097bc <USBD_CDC_DeInit+0x100>)
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f002 fa6c 	bl	800bbfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009722:	4b26      	ldr	r3, [pc, #152]	; (80097bc <USBD_CDC_DeInit+0x100>)
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	f003 020f 	and.w	r2, r3, #15
 800972a:	6879      	ldr	r1, [r7, #4]
 800972c:	4613      	mov	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	440b      	add	r3, r1
 8009736:	3324      	adds	r3, #36	; 0x24
 8009738:	2200      	movs	r2, #0
 800973a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800973c:	4b1f      	ldr	r3, [pc, #124]	; (80097bc <USBD_CDC_DeInit+0x100>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	f003 020f 	and.w	r2, r3, #15
 8009744:	6879      	ldr	r1, [r7, #4]
 8009746:	4613      	mov	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	440b      	add	r3, r1
 8009750:	3326      	adds	r3, #38	; 0x26
 8009752:	2200      	movs	r2, #0
 8009754:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	32b0      	adds	r2, #176	; 0xb0
 8009760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d01f      	beq.n	80097a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	33b0      	adds	r3, #176	; 0xb0
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	32b0      	adds	r2, #176	; 0xb0
 8009786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800978a:	4618      	mov	r0, r3
 800978c:	f002 fb40 	bl	800be10 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	32b0      	adds	r2, #176	; 0xb0
 800979a:	2100      	movs	r1, #0
 800979c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	20000097 	.word	0x20000097
 80097b8:	20000098 	.word	0x20000098
 80097bc:	20000099 	.word	0x20000099

080097c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	32b0      	adds	r2, #176	; 0xb0
 80097d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80097da:	2300      	movs	r3, #0
 80097dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80097de:	2300      	movs	r3, #0
 80097e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d101      	bne.n	80097f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e0bf      	b.n	8009970 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d050      	beq.n	800989e <USBD_CDC_Setup+0xde>
 80097fc:	2b20      	cmp	r3, #32
 80097fe:	f040 80af 	bne.w	8009960 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	88db      	ldrh	r3, [r3, #6]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d03a      	beq.n	8009880 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	b25b      	sxtb	r3, r3
 8009810:	2b00      	cmp	r3, #0
 8009812:	da1b      	bge.n	800984c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	33b0      	adds	r3, #176	; 0xb0
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800982a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800982c:	683a      	ldr	r2, [r7, #0]
 800982e:	88d2      	ldrh	r2, [r2, #6]
 8009830:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	88db      	ldrh	r3, [r3, #6]
 8009836:	2b07      	cmp	r3, #7
 8009838:	bf28      	it	cs
 800983a:	2307      	movcs	r3, #7
 800983c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	89fa      	ldrh	r2, [r7, #14]
 8009842:	4619      	mov	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f001 fd89 	bl	800b35c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800984a:	e090      	b.n	800996e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	785a      	ldrb	r2, [r3, #1]
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	88db      	ldrh	r3, [r3, #6]
 800985a:	2b3f      	cmp	r3, #63	; 0x3f
 800985c:	d803      	bhi.n	8009866 <USBD_CDC_Setup+0xa6>
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	88db      	ldrh	r3, [r3, #6]
 8009862:	b2da      	uxtb	r2, r3
 8009864:	e000      	b.n	8009868 <USBD_CDC_Setup+0xa8>
 8009866:	2240      	movs	r2, #64	; 0x40
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800986e:	6939      	ldr	r1, [r7, #16]
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009876:	461a      	mov	r2, r3
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f001 fd9b 	bl	800b3b4 <USBD_CtlPrepareRx>
      break;
 800987e:	e076      	b.n	800996e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	33b0      	adds	r3, #176	; 0xb0
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4413      	add	r3, r2
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	7850      	ldrb	r0, [r2, #1]
 8009896:	2200      	movs	r2, #0
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	4798      	blx	r3
      break;
 800989c:	e067      	b.n	800996e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	785b      	ldrb	r3, [r3, #1]
 80098a2:	2b0b      	cmp	r3, #11
 80098a4:	d851      	bhi.n	800994a <USBD_CDC_Setup+0x18a>
 80098a6:	a201      	add	r2, pc, #4	; (adr r2, 80098ac <USBD_CDC_Setup+0xec>)
 80098a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ac:	080098dd 	.word	0x080098dd
 80098b0:	08009959 	.word	0x08009959
 80098b4:	0800994b 	.word	0x0800994b
 80098b8:	0800994b 	.word	0x0800994b
 80098bc:	0800994b 	.word	0x0800994b
 80098c0:	0800994b 	.word	0x0800994b
 80098c4:	0800994b 	.word	0x0800994b
 80098c8:	0800994b 	.word	0x0800994b
 80098cc:	0800994b 	.word	0x0800994b
 80098d0:	0800994b 	.word	0x0800994b
 80098d4:	08009907 	.word	0x08009907
 80098d8:	08009931 	.word	0x08009931
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	2b03      	cmp	r3, #3
 80098e6:	d107      	bne.n	80098f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80098e8:	f107 030a 	add.w	r3, r7, #10
 80098ec:	2202      	movs	r2, #2
 80098ee:	4619      	mov	r1, r3
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f001 fd33 	bl	800b35c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80098f6:	e032      	b.n	800995e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80098f8:	6839      	ldr	r1, [r7, #0]
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f001 fcbd 	bl	800b27a <USBD_CtlError>
            ret = USBD_FAIL;
 8009900:	2303      	movs	r3, #3
 8009902:	75fb      	strb	r3, [r7, #23]
          break;
 8009904:	e02b      	b.n	800995e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800990c:	b2db      	uxtb	r3, r3
 800990e:	2b03      	cmp	r3, #3
 8009910:	d107      	bne.n	8009922 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009912:	f107 030d 	add.w	r3, r7, #13
 8009916:	2201      	movs	r2, #1
 8009918:	4619      	mov	r1, r3
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f001 fd1e 	bl	800b35c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009920:	e01d      	b.n	800995e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f001 fca8 	bl	800b27a <USBD_CtlError>
            ret = USBD_FAIL;
 800992a:	2303      	movs	r3, #3
 800992c:	75fb      	strb	r3, [r7, #23]
          break;
 800992e:	e016      	b.n	800995e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009936:	b2db      	uxtb	r3, r3
 8009938:	2b03      	cmp	r3, #3
 800993a:	d00f      	beq.n	800995c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f001 fc9b 	bl	800b27a <USBD_CtlError>
            ret = USBD_FAIL;
 8009944:	2303      	movs	r3, #3
 8009946:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009948:	e008      	b.n	800995c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800994a:	6839      	ldr	r1, [r7, #0]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f001 fc94 	bl	800b27a <USBD_CtlError>
          ret = USBD_FAIL;
 8009952:	2303      	movs	r3, #3
 8009954:	75fb      	strb	r3, [r7, #23]
          break;
 8009956:	e002      	b.n	800995e <USBD_CDC_Setup+0x19e>
          break;
 8009958:	bf00      	nop
 800995a:	e008      	b.n	800996e <USBD_CDC_Setup+0x1ae>
          break;
 800995c:	bf00      	nop
      }
      break;
 800995e:	e006      	b.n	800996e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f001 fc89 	bl	800b27a <USBD_CtlError>
      ret = USBD_FAIL;
 8009968:	2303      	movs	r3, #3
 800996a:	75fb      	strb	r3, [r7, #23]
      break;
 800996c:	bf00      	nop
  }

  return (uint8_t)ret;
 800996e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800998a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	32b0      	adds	r2, #176	; 0xb0
 8009996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800999e:	2303      	movs	r3, #3
 80099a0:	e065      	b.n	8009a6e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	32b0      	adds	r2, #176	; 0xb0
 80099ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80099b2:	78fb      	ldrb	r3, [r7, #3]
 80099b4:	f003 020f 	and.w	r2, r3, #15
 80099b8:	6879      	ldr	r1, [r7, #4]
 80099ba:	4613      	mov	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4413      	add	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	440b      	add	r3, r1
 80099c4:	3318      	adds	r3, #24
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d02f      	beq.n	8009a2c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80099cc:	78fb      	ldrb	r3, [r7, #3]
 80099ce:	f003 020f 	and.w	r2, r3, #15
 80099d2:	6879      	ldr	r1, [r7, #4]
 80099d4:	4613      	mov	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4413      	add	r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	440b      	add	r3, r1
 80099de:	3318      	adds	r3, #24
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	78fb      	ldrb	r3, [r7, #3]
 80099e4:	f003 010f 	and.w	r1, r3, #15
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	460b      	mov	r3, r1
 80099ec:	00db      	lsls	r3, r3, #3
 80099ee:	440b      	add	r3, r1
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4403      	add	r3, r0
 80099f4:	3348      	adds	r3, #72	; 0x48
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80099fc:	fb01 f303 	mul.w	r3, r1, r3
 8009a00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d112      	bne.n	8009a2c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009a06:	78fb      	ldrb	r3, [r7, #3]
 8009a08:	f003 020f 	and.w	r2, r3, #15
 8009a0c:	6879      	ldr	r1, [r7, #4]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	440b      	add	r3, r1
 8009a18:	3318      	adds	r3, #24
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009a1e:	78f9      	ldrb	r1, [r7, #3]
 8009a20:	2300      	movs	r3, #0
 8009a22:	2200      	movs	r2, #0
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f002 f990 	bl	800bd4a <USBD_LL_Transmit>
 8009a2a:	e01f      	b.n	8009a6c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	33b0      	adds	r3, #176	; 0xb0
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4413      	add	r3, r2
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d010      	beq.n	8009a6c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	33b0      	adds	r3, #176	; 0xb0
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009a68:	78fa      	ldrb	r2, [r7, #3]
 8009a6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b084      	sub	sp, #16
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	460b      	mov	r3, r1
 8009a80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	32b0      	adds	r2, #176	; 0xb0
 8009a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	32b0      	adds	r2, #176	; 0xb0
 8009a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e01a      	b.n	8009ade <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f002 f98e 	bl	800bdce <USBD_LL_GetRxDataSize>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	33b0      	adds	r3, #176	; 0xb0
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4413      	add	r3, r2
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009ad8:	4611      	mov	r1, r2
 8009ada:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b084      	sub	sp, #16
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	32b0      	adds	r2, #176	; 0xb0
 8009af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009afc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d101      	bne.n	8009b08 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009b04:	2303      	movs	r3, #3
 8009b06:	e025      	b.n	8009b54 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	33b0      	adds	r3, #176	; 0xb0
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d01a      	beq.n	8009b52 <USBD_CDC_EP0_RxReady+0x6c>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009b22:	2bff      	cmp	r3, #255	; 0xff
 8009b24:	d015      	beq.n	8009b52 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	33b0      	adds	r3, #176	; 0xb0
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009b3e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009b46:	b292      	uxth	r2, r2
 8009b48:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	22ff      	movs	r2, #255	; 0xff
 8009b4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b64:	2182      	movs	r1, #130	; 0x82
 8009b66:	4818      	ldr	r0, [pc, #96]	; (8009bc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b68:	f000 fd4f 	bl	800a60a <USBD_GetEpDesc>
 8009b6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b6e:	2101      	movs	r1, #1
 8009b70:	4815      	ldr	r0, [pc, #84]	; (8009bc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b72:	f000 fd4a 	bl	800a60a <USBD_GetEpDesc>
 8009b76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b78:	2181      	movs	r1, #129	; 0x81
 8009b7a:	4813      	ldr	r0, [pc, #76]	; (8009bc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b7c:	f000 fd45 	bl	800a60a <USBD_GetEpDesc>
 8009b80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d002      	beq.n	8009b8e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	2210      	movs	r2, #16
 8009b8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d006      	beq.n	8009ba2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b9c:	711a      	strb	r2, [r3, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d006      	beq.n	8009bb6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bb0:	711a      	strb	r2, [r3, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2243      	movs	r2, #67	; 0x43
 8009bba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009bbc:	4b02      	ldr	r3, [pc, #8]	; (8009bc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3718      	adds	r7, #24
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20000054 	.word	0x20000054

08009bcc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b086      	sub	sp, #24
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009bd4:	2182      	movs	r1, #130	; 0x82
 8009bd6:	4818      	ldr	r0, [pc, #96]	; (8009c38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009bd8:	f000 fd17 	bl	800a60a <USBD_GetEpDesc>
 8009bdc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009bde:	2101      	movs	r1, #1
 8009be0:	4815      	ldr	r0, [pc, #84]	; (8009c38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009be2:	f000 fd12 	bl	800a60a <USBD_GetEpDesc>
 8009be6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009be8:	2181      	movs	r1, #129	; 0x81
 8009bea:	4813      	ldr	r0, [pc, #76]	; (8009c38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009bec:	f000 fd0d 	bl	800a60a <USBD_GetEpDesc>
 8009bf0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	2210      	movs	r2, #16
 8009bfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d006      	beq.n	8009c12 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	2200      	movs	r2, #0
 8009c08:	711a      	strb	r2, [r3, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f042 0202 	orr.w	r2, r2, #2
 8009c10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d006      	beq.n	8009c26 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	711a      	strb	r2, [r3, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f042 0202 	orr.w	r2, r2, #2
 8009c24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2243      	movs	r2, #67	; 0x43
 8009c2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c2c:	4b02      	ldr	r3, [pc, #8]	; (8009c38 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3718      	adds	r7, #24
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	20000054 	.word	0x20000054

08009c3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c44:	2182      	movs	r1, #130	; 0x82
 8009c46:	4818      	ldr	r0, [pc, #96]	; (8009ca8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c48:	f000 fcdf 	bl	800a60a <USBD_GetEpDesc>
 8009c4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c4e:	2101      	movs	r1, #1
 8009c50:	4815      	ldr	r0, [pc, #84]	; (8009ca8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c52:	f000 fcda 	bl	800a60a <USBD_GetEpDesc>
 8009c56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c58:	2181      	movs	r1, #129	; 0x81
 8009c5a:	4813      	ldr	r0, [pc, #76]	; (8009ca8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c5c:	f000 fcd5 	bl	800a60a <USBD_GetEpDesc>
 8009c60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d002      	beq.n	8009c6e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	2210      	movs	r2, #16
 8009c6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d006      	beq.n	8009c82 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c7c:	711a      	strb	r2, [r3, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d006      	beq.n	8009c96 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c90:	711a      	strb	r2, [r3, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2243      	movs	r2, #67	; 0x43
 8009c9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c9c:	4b02      	ldr	r3, [pc, #8]	; (8009ca8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	20000054 	.word	0x20000054

08009cac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	220a      	movs	r2, #10
 8009cb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009cba:	4b03      	ldr	r3, [pc, #12]	; (8009cc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	20000010 	.word	0x20000010

08009ccc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d101      	bne.n	8009ce0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	e009      	b.n	8009cf4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	33b0      	adds	r3, #176	; 0xb0
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4413      	add	r3, r2
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b087      	sub	sp, #28
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	32b0      	adds	r2, #176	; 0xb0
 8009d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d1a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d101      	bne.n	8009d26 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009d22:	2303      	movs	r3, #3
 8009d24:	e008      	b.n	8009d38 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	371c      	adds	r7, #28
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	32b0      	adds	r2, #176	; 0xb0
 8009d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d101      	bne.n	8009d68 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009d64:	2303      	movs	r3, #3
 8009d66:	e004      	b.n	8009d72 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
	...

08009d80 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	32b0      	adds	r2, #176	; 0xb0
 8009d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d96:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	32b0      	adds	r2, #176	; 0xb0
 8009da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009dae:	2303      	movs	r3, #3
 8009db0:	e025      	b.n	8009dfe <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d11f      	bne.n	8009dfc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009dc4:	4b10      	ldr	r3, [pc, #64]	; (8009e08 <USBD_CDC_TransmitPacket+0x88>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	f003 020f 	and.w	r2, r3, #15
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4413      	add	r3, r2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4403      	add	r3, r0
 8009dde:	3318      	adds	r3, #24
 8009de0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009de2:	4b09      	ldr	r3, [pc, #36]	; (8009e08 <USBD_CDC_TransmitPacket+0x88>)
 8009de4:	7819      	ldrb	r1, [r3, #0]
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f001 ffa9 	bl	800bd4a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20000097 	.word	0x20000097

08009e0c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	32b0      	adds	r2, #176	; 0xb0
 8009e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e22:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	32b0      	adds	r2, #176	; 0xb0
 8009e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d101      	bne.n	8009e3a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009e36:	2303      	movs	r3, #3
 8009e38:	e018      	b.n	8009e6c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	7c1b      	ldrb	r3, [r3, #16]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10a      	bne.n	8009e58 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e42:	4b0c      	ldr	r3, [pc, #48]	; (8009e74 <USBD_CDC_ReceivePacket+0x68>)
 8009e44:	7819      	ldrb	r1, [r3, #0]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f001 ff9b 	bl	800bd8c <USBD_LL_PrepareReceive>
 8009e56:	e008      	b.n	8009e6a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e58:	4b06      	ldr	r3, [pc, #24]	; (8009e74 <USBD_CDC_ReceivePacket+0x68>)
 8009e5a:	7819      	ldrb	r1, [r3, #0]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e62:	2340      	movs	r3, #64	; 0x40
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f001 ff91 	bl	800bd8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	20000098 	.word	0x20000098

08009e78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b086      	sub	sp, #24
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	4613      	mov	r3, r2
 8009e84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d101      	bne.n	8009e90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	e01f      	b.n	8009ed0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d003      	beq.n	8009eb6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	79fa      	ldrb	r2, [r7, #7]
 8009ec2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f001 fe0b 	bl	800bae0 <USBD_LL_Init>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3718      	adds	r7, #24
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d101      	bne.n	8009ef0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009eec:	2303      	movs	r3, #3
 8009eee:	e025      	b.n	8009f3c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	32ae      	adds	r2, #174	; 0xae
 8009f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00f      	beq.n	8009f2c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	32ae      	adds	r2, #174	; 0xae
 8009f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1c:	f107 020e 	add.w	r2, r7, #14
 8009f20:	4610      	mov	r0, r2
 8009f22:	4798      	blx	r3
 8009f24:	4602      	mov	r2, r0
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009f32:	1c5a      	adds	r2, r3, #1
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f001 fe13 	bl	800bb78 <USBD_LL_Start>
 8009f52:	4603      	mov	r3, r0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f64:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr

08009f72 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b084      	sub	sp, #16
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d009      	beq.n	8009fa0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	78fa      	ldrb	r2, [r7, #3]
 8009f96:	4611      	mov	r1, r2
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	4798      	blx	r3
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	78fa      	ldrb	r2, [r7, #3]
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	4798      	blx	r3
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d001      	beq.n	8009fd4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b084      	sub	sp, #16
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009fee:	6839      	ldr	r1, [r7, #0]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f001 f908 	bl	800b206 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a004:	461a      	mov	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a012:	f003 031f 	and.w	r3, r3, #31
 800a016:	2b02      	cmp	r3, #2
 800a018:	d01a      	beq.n	800a050 <USBD_LL_SetupStage+0x72>
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d822      	bhi.n	800a064 <USBD_LL_SetupStage+0x86>
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d002      	beq.n	800a028 <USBD_LL_SetupStage+0x4a>
 800a022:	2b01      	cmp	r3, #1
 800a024:	d00a      	beq.n	800a03c <USBD_LL_SetupStage+0x5e>
 800a026:	e01d      	b.n	800a064 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a02e:	4619      	mov	r1, r3
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 fb5f 	bl	800a6f4 <USBD_StdDevReq>
 800a036:	4603      	mov	r3, r0
 800a038:	73fb      	strb	r3, [r7, #15]
      break;
 800a03a:	e020      	b.n	800a07e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a042:	4619      	mov	r1, r3
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fbc7 	bl	800a7d8 <USBD_StdItfReq>
 800a04a:	4603      	mov	r3, r0
 800a04c:	73fb      	strb	r3, [r7, #15]
      break;
 800a04e:	e016      	b.n	800a07e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a056:	4619      	mov	r1, r3
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fc29 	bl	800a8b0 <USBD_StdEPReq>
 800a05e:	4603      	mov	r3, r0
 800a060:	73fb      	strb	r3, [r7, #15]
      break;
 800a062:	e00c      	b.n	800a07e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a06a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 fde0 	bl	800bc38 <USBD_LL_StallEP>
 800a078:	4603      	mov	r3, r0
 800a07a:	73fb      	strb	r3, [r7, #15]
      break;
 800a07c:	bf00      	nop
  }

  return ret;
 800a07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a080:	4618      	mov	r0, r3
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	460b      	mov	r3, r1
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a09a:	7afb      	ldrb	r3, [r7, #11]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d16e      	bne.n	800a17e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a0a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0ae:	2b03      	cmp	r3, #3
 800a0b0:	f040 8098 	bne.w	800a1e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	689a      	ldr	r2, [r3, #8]
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d913      	bls.n	800a0e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	689a      	ldr	r2, [r3, #8]
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	1ad2      	subs	r2, r2, r3
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	68da      	ldr	r2, [r3, #12]
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	bf28      	it	cs
 800a0da:	4613      	movcs	r3, r2
 800a0dc:	461a      	mov	r2, r3
 800a0de:	6879      	ldr	r1, [r7, #4]
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f001 f984 	bl	800b3ee <USBD_CtlContinueRx>
 800a0e6:	e07d      	b.n	800a1e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a0ee:	f003 031f 	and.w	r3, r3, #31
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	d014      	beq.n	800a120 <USBD_LL_DataOutStage+0x98>
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d81d      	bhi.n	800a136 <USBD_LL_DataOutStage+0xae>
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d002      	beq.n	800a104 <USBD_LL_DataOutStage+0x7c>
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d003      	beq.n	800a10a <USBD_LL_DataOutStage+0x82>
 800a102:	e018      	b.n	800a136 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a104:	2300      	movs	r3, #0
 800a106:	75bb      	strb	r3, [r7, #22]
            break;
 800a108:	e018      	b.n	800a13c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a110:	b2db      	uxtb	r3, r3
 800a112:	4619      	mov	r1, r3
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f000 fa5e 	bl	800a5d6 <USBD_CoreFindIF>
 800a11a:	4603      	mov	r3, r0
 800a11c:	75bb      	strb	r3, [r7, #22]
            break;
 800a11e:	e00d      	b.n	800a13c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a126:	b2db      	uxtb	r3, r3
 800a128:	4619      	mov	r1, r3
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f000 fa60 	bl	800a5f0 <USBD_CoreFindEP>
 800a130:	4603      	mov	r3, r0
 800a132:	75bb      	strb	r3, [r7, #22]
            break;
 800a134:	e002      	b.n	800a13c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a136:	2300      	movs	r3, #0
 800a138:	75bb      	strb	r3, [r7, #22]
            break;
 800a13a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a13c:	7dbb      	ldrb	r3, [r7, #22]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d119      	bne.n	800a176 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b03      	cmp	r3, #3
 800a14c:	d113      	bne.n	800a176 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a14e:	7dba      	ldrb	r2, [r7, #22]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	32ae      	adds	r2, #174	; 0xae
 800a154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00b      	beq.n	800a176 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a15e:	7dba      	ldrb	r2, [r7, #22]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a166:	7dba      	ldrb	r2, [r7, #22]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	32ae      	adds	r2, #174	; 0xae
 800a16c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f001 f94a 	bl	800b410 <USBD_CtlSendStatus>
 800a17c:	e032      	b.n	800a1e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a17e:	7afb      	ldrb	r3, [r7, #11]
 800a180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a184:	b2db      	uxtb	r3, r3
 800a186:	4619      	mov	r1, r3
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f000 fa31 	bl	800a5f0 <USBD_CoreFindEP>
 800a18e:	4603      	mov	r3, r0
 800a190:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a192:	7dbb      	ldrb	r3, [r7, #22]
 800a194:	2bff      	cmp	r3, #255	; 0xff
 800a196:	d025      	beq.n	800a1e4 <USBD_LL_DataOutStage+0x15c>
 800a198:	7dbb      	ldrb	r3, [r7, #22]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d122      	bne.n	800a1e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	2b03      	cmp	r3, #3
 800a1a8:	d117      	bne.n	800a1da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a1aa:	7dba      	ldrb	r2, [r7, #22]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	32ae      	adds	r2, #174	; 0xae
 800a1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b4:	699b      	ldr	r3, [r3, #24]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00f      	beq.n	800a1da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a1ba:	7dba      	ldrb	r2, [r7, #22]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a1c2:	7dba      	ldrb	r2, [r7, #22]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	32ae      	adds	r2, #174	; 0xae
 800a1c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1cc:	699b      	ldr	r3, [r3, #24]
 800a1ce:	7afa      	ldrb	r2, [r7, #11]
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	4798      	blx	r3
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a1da:	7dfb      	ldrb	r3, [r7, #23]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a1e0:	7dfb      	ldrb	r3, [r7, #23]
 800a1e2:	e000      	b.n	800a1e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3718      	adds	r7, #24
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b086      	sub	sp, #24
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	60f8      	str	r0, [r7, #12]
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	607a      	str	r2, [r7, #4]
 800a1fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a1fc:	7afb      	ldrb	r3, [r7, #11]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d16f      	bne.n	800a2e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3314      	adds	r3, #20
 800a206:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d15a      	bne.n	800a2c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	689a      	ldr	r2, [r3, #8]
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d914      	bls.n	800a248 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	689a      	ldr	r2, [r3, #8]
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	1ad2      	subs	r2, r2, r3
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	461a      	mov	r2, r3
 800a232:	6879      	ldr	r1, [r7, #4]
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f001 f8ac 	bl	800b392 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a23a:	2300      	movs	r3, #0
 800a23c:	2200      	movs	r2, #0
 800a23e:	2100      	movs	r1, #0
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f001 fda3 	bl	800bd8c <USBD_LL_PrepareReceive>
 800a246:	e03f      	b.n	800a2c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	68da      	ldr	r2, [r3, #12]
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	429a      	cmp	r2, r3
 800a252:	d11c      	bne.n	800a28e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d316      	bcc.n	800a28e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d20f      	bcs.n	800a28e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a26e:	2200      	movs	r2, #0
 800a270:	2100      	movs	r1, #0
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f001 f88d 	bl	800b392 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a280:	2300      	movs	r3, #0
 800a282:	2200      	movs	r2, #0
 800a284:	2100      	movs	r1, #0
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f001 fd80 	bl	800bd8c <USBD_LL_PrepareReceive>
 800a28c:	e01c      	b.n	800a2c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b03      	cmp	r3, #3
 800a298:	d10f      	bne.n	800a2ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d009      	beq.n	800a2ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2ba:	2180      	movs	r1, #128	; 0x80
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f001 fcbb 	bl	800bc38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f001 f8b7 	bl	800b436 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d03a      	beq.n	800a348 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f7ff fe42 	bl	8009f5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a2e0:	e032      	b.n	800a348 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a2e2:	7afb      	ldrb	r3, [r7, #11]
 800a2e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f000 f97f 	bl	800a5f0 <USBD_CoreFindEP>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2f6:	7dfb      	ldrb	r3, [r7, #23]
 800a2f8:	2bff      	cmp	r3, #255	; 0xff
 800a2fa:	d025      	beq.n	800a348 <USBD_LL_DataInStage+0x15a>
 800a2fc:	7dfb      	ldrb	r3, [r7, #23]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d122      	bne.n	800a348 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	2b03      	cmp	r3, #3
 800a30c:	d11c      	bne.n	800a348 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a30e:	7dfa      	ldrb	r2, [r7, #23]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	32ae      	adds	r2, #174	; 0xae
 800a314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a318:	695b      	ldr	r3, [r3, #20]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d014      	beq.n	800a348 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a31e:	7dfa      	ldrb	r2, [r7, #23]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a326:	7dfa      	ldrb	r2, [r7, #23]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	32ae      	adds	r2, #174	; 0xae
 800a32c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	7afa      	ldrb	r2, [r7, #11]
 800a334:	4611      	mov	r1, r2
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	4798      	blx	r3
 800a33a:	4603      	mov	r3, r0
 800a33c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a33e:	7dbb      	ldrb	r3, [r7, #22]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d001      	beq.n	800a348 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a344:	7dbb      	ldrb	r3, [r7, #22]
 800a346:	e000      	b.n	800a34a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3718      	adds	r7, #24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b084      	sub	sp, #16
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d014      	beq.n	800a3b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00e      	beq.n	800a3b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	6852      	ldr	r2, [r2, #4]
 800a3a6:	b2d2      	uxtb	r2, r2
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	4798      	blx	r3
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d001      	beq.n	800a3b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3b8:	2340      	movs	r3, #64	; 0x40
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	2100      	movs	r1, #0
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f001 fbf5 	bl	800bbae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2240      	movs	r2, #64	; 0x40
 800a3d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3d4:	2340      	movs	r3, #64	; 0x40
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	2180      	movs	r1, #128	; 0x80
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f001 fbe7 	bl	800bbae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2240      	movs	r2, #64	; 0x40
 800a3ea:	621a      	str	r2, [r3, #32]

  return ret;
 800a3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b083      	sub	sp, #12
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	460b      	mov	r3, r1
 800a400:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	78fa      	ldrb	r2, [r7, #3]
 800a406:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	370c      	adds	r7, #12
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a416:	b480      	push	{r7}
 800a418:	b083      	sub	sp, #12
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a424:	b2da      	uxtb	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2204      	movs	r2, #4
 800a430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a442:	b480      	push	{r7}
 800a444:	b083      	sub	sp, #12
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b04      	cmp	r3, #4
 800a454:	d106      	bne.n	800a464 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr

0800a472 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b082      	sub	sp, #8
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a480:	b2db      	uxtb	r3, r3
 800a482:	2b03      	cmp	r3, #3
 800a484:	d110      	bne.n	800a4a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00b      	beq.n	800a4a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a496:	69db      	ldr	r3, [r3, #28]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d005      	beq.n	800a4a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4a2:	69db      	ldr	r3, [r3, #28]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b082      	sub	sp, #8
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	32ae      	adds	r2, #174	; 0xae
 800a4c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d101      	bne.n	800a4d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a4d0:	2303      	movs	r3, #3
 800a4d2:	e01c      	b.n	800a50e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	2b03      	cmp	r3, #3
 800a4de:	d115      	bne.n	800a50c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	32ae      	adds	r2, #174	; 0xae
 800a4ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ee:	6a1b      	ldr	r3, [r3, #32]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00b      	beq.n	800a50c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	32ae      	adds	r2, #174	; 0xae
 800a4fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a502:	6a1b      	ldr	r3, [r3, #32]
 800a504:	78fa      	ldrb	r2, [r7, #3]
 800a506:	4611      	mov	r1, r2
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b082      	sub	sp, #8
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	460b      	mov	r3, r1
 800a520:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	32ae      	adds	r2, #174	; 0xae
 800a52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a534:	2303      	movs	r3, #3
 800a536:	e01c      	b.n	800a572 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	2b03      	cmp	r3, #3
 800a542:	d115      	bne.n	800a570 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	32ae      	adds	r2, #174	; 0xae
 800a54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00b      	beq.n	800a570 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	32ae      	adds	r2, #174	; 0xae
 800a562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a568:	78fa      	ldrb	r2, [r7, #3]
 800a56a:	4611      	mov	r1, r2
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a57a:	b480      	push	{r7}
 800a57c:	b083      	sub	sp, #12
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a598:	2300      	movs	r3, #0
 800a59a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00e      	beq.n	800a5cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	6852      	ldr	r2, [r2, #4]
 800a5ba:	b2d2      	uxtb	r2, r2
 800a5bc:	4611      	mov	r1, r2
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	4798      	blx	r3
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d001      	beq.n	800a5cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	b083      	sub	sp, #12
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
 800a5de:	460b      	mov	r3, r1
 800a5e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a5e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a5fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	370c      	adds	r7, #12
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b086      	sub	sp, #24
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	460b      	mov	r3, r1
 800a614:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a61e:	2300      	movs	r3, #0
 800a620:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	885b      	ldrh	r3, [r3, #2]
 800a626:	b29a      	uxth	r2, r3
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	429a      	cmp	r2, r3
 800a630:	d920      	bls.n	800a674 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	b29b      	uxth	r3, r3
 800a638:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a63a:	e013      	b.n	800a664 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a63c:	f107 030a 	add.w	r3, r7, #10
 800a640:	4619      	mov	r1, r3
 800a642:	6978      	ldr	r0, [r7, #20]
 800a644:	f000 f81b 	bl	800a67e <USBD_GetNextDesc>
 800a648:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	785b      	ldrb	r3, [r3, #1]
 800a64e:	2b05      	cmp	r3, #5
 800a650:	d108      	bne.n	800a664 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	789b      	ldrb	r3, [r3, #2]
 800a65a:	78fa      	ldrb	r2, [r7, #3]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d008      	beq.n	800a672 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a660:	2300      	movs	r3, #0
 800a662:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	885b      	ldrh	r3, [r3, #2]
 800a668:	b29a      	uxth	r2, r3
 800a66a:	897b      	ldrh	r3, [r7, #10]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d8e5      	bhi.n	800a63c <USBD_GetEpDesc+0x32>
 800a670:	e000      	b.n	800a674 <USBD_GetEpDesc+0x6a>
          break;
 800a672:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a674:	693b      	ldr	r3, [r7, #16]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3718      	adds	r7, #24
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a67e:	b480      	push	{r7}
 800a680:	b085      	sub	sp, #20
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	881a      	ldrh	r2, [r3, #0]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	b29b      	uxth	r3, r3
 800a696:	4413      	add	r3, r2
 800a698:	b29a      	uxth	r2, r3
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3714      	adds	r7, #20
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a6d6:	8a3b      	ldrh	r3, [r7, #16]
 800a6d8:	021b      	lsls	r3, r3, #8
 800a6da:	b21a      	sxth	r2, r3
 800a6dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	b21b      	sxth	r3, r3
 800a6e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a6e6:	89fb      	ldrh	r3, [r7, #14]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	371c      	adds	r7, #28
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a70a:	2b40      	cmp	r3, #64	; 0x40
 800a70c:	d005      	beq.n	800a71a <USBD_StdDevReq+0x26>
 800a70e:	2b40      	cmp	r3, #64	; 0x40
 800a710:	d857      	bhi.n	800a7c2 <USBD_StdDevReq+0xce>
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00f      	beq.n	800a736 <USBD_StdDevReq+0x42>
 800a716:	2b20      	cmp	r3, #32
 800a718:	d153      	bne.n	800a7c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	32ae      	adds	r2, #174	; 0xae
 800a724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	6839      	ldr	r1, [r7, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	4798      	blx	r3
 800a730:	4603      	mov	r3, r0
 800a732:	73fb      	strb	r3, [r7, #15]
      break;
 800a734:	e04a      	b.n	800a7cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	785b      	ldrb	r3, [r3, #1]
 800a73a:	2b09      	cmp	r3, #9
 800a73c:	d83b      	bhi.n	800a7b6 <USBD_StdDevReq+0xc2>
 800a73e:	a201      	add	r2, pc, #4	; (adr r2, 800a744 <USBD_StdDevReq+0x50>)
 800a740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a744:	0800a799 	.word	0x0800a799
 800a748:	0800a7ad 	.word	0x0800a7ad
 800a74c:	0800a7b7 	.word	0x0800a7b7
 800a750:	0800a7a3 	.word	0x0800a7a3
 800a754:	0800a7b7 	.word	0x0800a7b7
 800a758:	0800a777 	.word	0x0800a777
 800a75c:	0800a76d 	.word	0x0800a76d
 800a760:	0800a7b7 	.word	0x0800a7b7
 800a764:	0800a78f 	.word	0x0800a78f
 800a768:	0800a781 	.word	0x0800a781
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fa3c 	bl	800abec <USBD_GetDescriptor>
          break;
 800a774:	e024      	b.n	800a7c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a776:	6839      	ldr	r1, [r7, #0]
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 fba1 	bl	800aec0 <USBD_SetAddress>
          break;
 800a77e:	e01f      	b.n	800a7c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fbe0 	bl	800af48 <USBD_SetConfig>
 800a788:	4603      	mov	r3, r0
 800a78a:	73fb      	strb	r3, [r7, #15]
          break;
 800a78c:	e018      	b.n	800a7c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a78e:	6839      	ldr	r1, [r7, #0]
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 fc83 	bl	800b09c <USBD_GetConfig>
          break;
 800a796:	e013      	b.n	800a7c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a798:	6839      	ldr	r1, [r7, #0]
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 fcb4 	bl	800b108 <USBD_GetStatus>
          break;
 800a7a0:	e00e      	b.n	800a7c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fce3 	bl	800b170 <USBD_SetFeature>
          break;
 800a7aa:	e009      	b.n	800a7c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a7ac:	6839      	ldr	r1, [r7, #0]
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 fd07 	bl	800b1c2 <USBD_ClrFeature>
          break;
 800a7b4:	e004      	b.n	800a7c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 fd5e 	bl	800b27a <USBD_CtlError>
          break;
 800a7be:	bf00      	nop
      }
      break;
 800a7c0:	e004      	b.n	800a7cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 fd58 	bl	800b27a <USBD_CtlError>
      break;
 800a7ca:	bf00      	nop
  }

  return ret;
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop

0800a7d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7ee:	2b40      	cmp	r3, #64	; 0x40
 800a7f0:	d005      	beq.n	800a7fe <USBD_StdItfReq+0x26>
 800a7f2:	2b40      	cmp	r3, #64	; 0x40
 800a7f4:	d852      	bhi.n	800a89c <USBD_StdItfReq+0xc4>
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d001      	beq.n	800a7fe <USBD_StdItfReq+0x26>
 800a7fa:	2b20      	cmp	r3, #32
 800a7fc:	d14e      	bne.n	800a89c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a804:	b2db      	uxtb	r3, r3
 800a806:	3b01      	subs	r3, #1
 800a808:	2b02      	cmp	r3, #2
 800a80a:	d840      	bhi.n	800a88e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	889b      	ldrh	r3, [r3, #4]
 800a810:	b2db      	uxtb	r3, r3
 800a812:	2b01      	cmp	r3, #1
 800a814:	d836      	bhi.n	800a884 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	889b      	ldrh	r3, [r3, #4]
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	4619      	mov	r1, r3
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7ff fed9 	bl	800a5d6 <USBD_CoreFindIF>
 800a824:	4603      	mov	r3, r0
 800a826:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a828:	7bbb      	ldrb	r3, [r7, #14]
 800a82a:	2bff      	cmp	r3, #255	; 0xff
 800a82c:	d01d      	beq.n	800a86a <USBD_StdItfReq+0x92>
 800a82e:	7bbb      	ldrb	r3, [r7, #14]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d11a      	bne.n	800a86a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a834:	7bba      	ldrb	r2, [r7, #14]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	32ae      	adds	r2, #174	; 0xae
 800a83a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00f      	beq.n	800a864 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a844:	7bba      	ldrb	r2, [r7, #14]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a84c:	7bba      	ldrb	r2, [r7, #14]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	32ae      	adds	r2, #174	; 0xae
 800a852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	4798      	blx	r3
 800a85e:	4603      	mov	r3, r0
 800a860:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a862:	e004      	b.n	800a86e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a864:	2303      	movs	r3, #3
 800a866:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a868:	e001      	b.n	800a86e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a86a:	2303      	movs	r3, #3
 800a86c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	88db      	ldrh	r3, [r3, #6]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d110      	bne.n	800a898 <USBD_StdItfReq+0xc0>
 800a876:	7bfb      	ldrb	r3, [r7, #15]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10d      	bne.n	800a898 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fdc7 	bl	800b410 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a882:	e009      	b.n	800a898 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 fcf7 	bl	800b27a <USBD_CtlError>
          break;
 800a88c:	e004      	b.n	800a898 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a88e:	6839      	ldr	r1, [r7, #0]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fcf2 	bl	800b27a <USBD_CtlError>
          break;
 800a896:	e000      	b.n	800a89a <USBD_StdItfReq+0xc2>
          break;
 800a898:	bf00      	nop
      }
      break;
 800a89a:	e004      	b.n	800a8a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a89c:	6839      	ldr	r1, [r7, #0]
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fceb 	bl	800b27a <USBD_CtlError>
      break;
 800a8a4:	bf00      	nop
  }

  return ret;
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	889b      	ldrh	r3, [r3, #4]
 800a8c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8cc:	2b40      	cmp	r3, #64	; 0x40
 800a8ce:	d007      	beq.n	800a8e0 <USBD_StdEPReq+0x30>
 800a8d0:	2b40      	cmp	r3, #64	; 0x40
 800a8d2:	f200 817f 	bhi.w	800abd4 <USBD_StdEPReq+0x324>
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d02a      	beq.n	800a930 <USBD_StdEPReq+0x80>
 800a8da:	2b20      	cmp	r3, #32
 800a8dc:	f040 817a 	bne.w	800abd4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a8e0:	7bbb      	ldrb	r3, [r7, #14]
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7ff fe83 	bl	800a5f0 <USBD_CoreFindEP>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8ee:	7b7b      	ldrb	r3, [r7, #13]
 800a8f0:	2bff      	cmp	r3, #255	; 0xff
 800a8f2:	f000 8174 	beq.w	800abde <USBD_StdEPReq+0x32e>
 800a8f6:	7b7b      	ldrb	r3, [r7, #13]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f040 8170 	bne.w	800abde <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a8fe:	7b7a      	ldrb	r2, [r7, #13]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a906:	7b7a      	ldrb	r2, [r7, #13]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	32ae      	adds	r2, #174	; 0xae
 800a90c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 8163 	beq.w	800abde <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a918:	7b7a      	ldrb	r2, [r7, #13]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	32ae      	adds	r2, #174	; 0xae
 800a91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	4798      	blx	r3
 800a92a:	4603      	mov	r3, r0
 800a92c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a92e:	e156      	b.n	800abde <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	785b      	ldrb	r3, [r3, #1]
 800a934:	2b03      	cmp	r3, #3
 800a936:	d008      	beq.n	800a94a <USBD_StdEPReq+0x9a>
 800a938:	2b03      	cmp	r3, #3
 800a93a:	f300 8145 	bgt.w	800abc8 <USBD_StdEPReq+0x318>
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f000 809b 	beq.w	800aa7a <USBD_StdEPReq+0x1ca>
 800a944:	2b01      	cmp	r3, #1
 800a946:	d03c      	beq.n	800a9c2 <USBD_StdEPReq+0x112>
 800a948:	e13e      	b.n	800abc8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b02      	cmp	r3, #2
 800a954:	d002      	beq.n	800a95c <USBD_StdEPReq+0xac>
 800a956:	2b03      	cmp	r3, #3
 800a958:	d016      	beq.n	800a988 <USBD_StdEPReq+0xd8>
 800a95a:	e02c      	b.n	800a9b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00d      	beq.n	800a97e <USBD_StdEPReq+0xce>
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	2b80      	cmp	r3, #128	; 0x80
 800a966:	d00a      	beq.n	800a97e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a968:	7bbb      	ldrb	r3, [r7, #14]
 800a96a:	4619      	mov	r1, r3
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f001 f963 	bl	800bc38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a972:	2180      	movs	r1, #128	; 0x80
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f001 f95f 	bl	800bc38 <USBD_LL_StallEP>
 800a97a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a97c:	e020      	b.n	800a9c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a97e:	6839      	ldr	r1, [r7, #0]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fc7a 	bl	800b27a <USBD_CtlError>
              break;
 800a986:	e01b      	b.n	800a9c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	885b      	ldrh	r3, [r3, #2]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10e      	bne.n	800a9ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a990:	7bbb      	ldrb	r3, [r7, #14]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d00b      	beq.n	800a9ae <USBD_StdEPReq+0xfe>
 800a996:	7bbb      	ldrb	r3, [r7, #14]
 800a998:	2b80      	cmp	r3, #128	; 0x80
 800a99a:	d008      	beq.n	800a9ae <USBD_StdEPReq+0xfe>
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	88db      	ldrh	r3, [r3, #6]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d104      	bne.n	800a9ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f001 f945 	bl	800bc38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fd2e 	bl	800b410 <USBD_CtlSendStatus>

              break;
 800a9b4:	e004      	b.n	800a9c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fc5e 	bl	800b27a <USBD_CtlError>
              break;
 800a9be:	bf00      	nop
          }
          break;
 800a9c0:	e107      	b.n	800abd2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d002      	beq.n	800a9d4 <USBD_StdEPReq+0x124>
 800a9ce:	2b03      	cmp	r3, #3
 800a9d0:	d016      	beq.n	800aa00 <USBD_StdEPReq+0x150>
 800a9d2:	e04b      	b.n	800aa6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9d4:	7bbb      	ldrb	r3, [r7, #14]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00d      	beq.n	800a9f6 <USBD_StdEPReq+0x146>
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
 800a9dc:	2b80      	cmp	r3, #128	; 0x80
 800a9de:	d00a      	beq.n	800a9f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f001 f927 	bl	800bc38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9ea:	2180      	movs	r1, #128	; 0x80
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f001 f923 	bl	800bc38 <USBD_LL_StallEP>
 800a9f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9f4:	e040      	b.n	800aa78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a9f6:	6839      	ldr	r1, [r7, #0]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fc3e 	bl	800b27a <USBD_CtlError>
              break;
 800a9fe:	e03b      	b.n	800aa78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	885b      	ldrh	r3, [r3, #2]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d136      	bne.n	800aa76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa08:	7bbb      	ldrb	r3, [r7, #14]
 800aa0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d004      	beq.n	800aa1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa12:	7bbb      	ldrb	r3, [r7, #14]
 800aa14:	4619      	mov	r1, r3
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f001 f92d 	bl	800bc76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fcf7 	bl	800b410 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa22:	7bbb      	ldrb	r3, [r7, #14]
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7ff fde2 	bl	800a5f0 <USBD_CoreFindEP>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa30:	7b7b      	ldrb	r3, [r7, #13]
 800aa32:	2bff      	cmp	r3, #255	; 0xff
 800aa34:	d01f      	beq.n	800aa76 <USBD_StdEPReq+0x1c6>
 800aa36:	7b7b      	ldrb	r3, [r7, #13]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d11c      	bne.n	800aa76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aa3c:	7b7a      	ldrb	r2, [r7, #13]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aa44:	7b7a      	ldrb	r2, [r7, #13]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	32ae      	adds	r2, #174	; 0xae
 800aa4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d010      	beq.n	800aa76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aa54:	7b7a      	ldrb	r2, [r7, #13]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	32ae      	adds	r2, #174	; 0xae
 800aa5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	6839      	ldr	r1, [r7, #0]
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	4798      	blx	r3
 800aa66:	4603      	mov	r3, r0
 800aa68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aa6a:	e004      	b.n	800aa76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aa6c:	6839      	ldr	r1, [r7, #0]
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fc03 	bl	800b27a <USBD_CtlError>
              break;
 800aa74:	e000      	b.n	800aa78 <USBD_StdEPReq+0x1c8>
              break;
 800aa76:	bf00      	nop
          }
          break;
 800aa78:	e0ab      	b.n	800abd2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d002      	beq.n	800aa8c <USBD_StdEPReq+0x1dc>
 800aa86:	2b03      	cmp	r3, #3
 800aa88:	d032      	beq.n	800aaf0 <USBD_StdEPReq+0x240>
 800aa8a:	e097      	b.n	800abbc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa8c:	7bbb      	ldrb	r3, [r7, #14]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d007      	beq.n	800aaa2 <USBD_StdEPReq+0x1f2>
 800aa92:	7bbb      	ldrb	r3, [r7, #14]
 800aa94:	2b80      	cmp	r3, #128	; 0x80
 800aa96:	d004      	beq.n	800aaa2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aa98:	6839      	ldr	r1, [r7, #0]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fbed 	bl	800b27a <USBD_CtlError>
                break;
 800aaa0:	e091      	b.n	800abc6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aaa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	da0b      	bge.n	800aac2 <USBD_StdEPReq+0x212>
 800aaaa:	7bbb      	ldrb	r3, [r7, #14]
 800aaac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aab0:	4613      	mov	r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	3310      	adds	r3, #16
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	4413      	add	r3, r2
 800aabe:	3304      	adds	r3, #4
 800aac0:	e00b      	b.n	800aada <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aac2:	7bbb      	ldrb	r3, [r7, #14]
 800aac4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aac8:	4613      	mov	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	4413      	add	r3, r2
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	4413      	add	r3, r2
 800aad8:	3304      	adds	r3, #4
 800aada:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2200      	movs	r2, #0
 800aae0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	2202      	movs	r2, #2
 800aae6:	4619      	mov	r1, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 fc37 	bl	800b35c <USBD_CtlSendData>
              break;
 800aaee:	e06a      	b.n	800abc6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aaf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	da11      	bge.n	800ab1c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aaf8:	7bbb      	ldrb	r3, [r7, #14]
 800aafa:	f003 020f 	and.w	r2, r3, #15
 800aafe:	6879      	ldr	r1, [r7, #4]
 800ab00:	4613      	mov	r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	440b      	add	r3, r1
 800ab0a:	3324      	adds	r3, #36	; 0x24
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d117      	bne.n	800ab42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab12:	6839      	ldr	r1, [r7, #0]
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fbb0 	bl	800b27a <USBD_CtlError>
                  break;
 800ab1a:	e054      	b.n	800abc6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab1c:	7bbb      	ldrb	r3, [r7, #14]
 800ab1e:	f003 020f 	and.w	r2, r3, #15
 800ab22:	6879      	ldr	r1, [r7, #4]
 800ab24:	4613      	mov	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	4413      	add	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	440b      	add	r3, r1
 800ab2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d104      	bne.n	800ab42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab38:	6839      	ldr	r1, [r7, #0]
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fb9d 	bl	800b27a <USBD_CtlError>
                  break;
 800ab40:	e041      	b.n	800abc6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	da0b      	bge.n	800ab62 <USBD_StdEPReq+0x2b2>
 800ab4a:	7bbb      	ldrb	r3, [r7, #14]
 800ab4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab50:	4613      	mov	r3, r2
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	4413      	add	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	3310      	adds	r3, #16
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	3304      	adds	r3, #4
 800ab60:	e00b      	b.n	800ab7a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab62:	7bbb      	ldrb	r3, [r7, #14]
 800ab64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab68:	4613      	mov	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	4413      	add	r3, r2
 800ab78:	3304      	adds	r3, #4
 800ab7a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab7c:	7bbb      	ldrb	r3, [r7, #14]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d002      	beq.n	800ab88 <USBD_StdEPReq+0x2d8>
 800ab82:	7bbb      	ldrb	r3, [r7, #14]
 800ab84:	2b80      	cmp	r3, #128	; 0x80
 800ab86:	d103      	bne.n	800ab90 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	601a      	str	r2, [r3, #0]
 800ab8e:	e00e      	b.n	800abae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab90:	7bbb      	ldrb	r3, [r7, #14]
 800ab92:	4619      	mov	r1, r3
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f001 f88d 	bl	800bcb4 <USBD_LL_IsStallEP>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d003      	beq.n	800aba8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	2201      	movs	r2, #1
 800aba4:	601a      	str	r2, [r3, #0]
 800aba6:	e002      	b.n	800abae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	2200      	movs	r2, #0
 800abac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	2202      	movs	r2, #2
 800abb2:	4619      	mov	r1, r3
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 fbd1 	bl	800b35c <USBD_CtlSendData>
              break;
 800abba:	e004      	b.n	800abc6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800abbc:	6839      	ldr	r1, [r7, #0]
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fb5b 	bl	800b27a <USBD_CtlError>
              break;
 800abc4:	bf00      	nop
          }
          break;
 800abc6:	e004      	b.n	800abd2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800abc8:	6839      	ldr	r1, [r7, #0]
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fb55 	bl	800b27a <USBD_CtlError>
          break;
 800abd0:	bf00      	nop
      }
      break;
 800abd2:	e005      	b.n	800abe0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800abd4:	6839      	ldr	r1, [r7, #0]
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fb4f 	bl	800b27a <USBD_CtlError>
      break;
 800abdc:	e000      	b.n	800abe0 <USBD_StdEPReq+0x330>
      break;
 800abde:	bf00      	nop
  }

  return ret;
 800abe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
	...

0800abec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abf6:	2300      	movs	r3, #0
 800abf8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800abfa:	2300      	movs	r3, #0
 800abfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800abfe:	2300      	movs	r3, #0
 800ac00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	885b      	ldrh	r3, [r3, #2]
 800ac06:	0a1b      	lsrs	r3, r3, #8
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	2b06      	cmp	r3, #6
 800ac0e:	f200 8128 	bhi.w	800ae62 <USBD_GetDescriptor+0x276>
 800ac12:	a201      	add	r2, pc, #4	; (adr r2, 800ac18 <USBD_GetDescriptor+0x2c>)
 800ac14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac18:	0800ac35 	.word	0x0800ac35
 800ac1c:	0800ac4d 	.word	0x0800ac4d
 800ac20:	0800ac8d 	.word	0x0800ac8d
 800ac24:	0800ae63 	.word	0x0800ae63
 800ac28:	0800ae63 	.word	0x0800ae63
 800ac2c:	0800ae03 	.word	0x0800ae03
 800ac30:	0800ae2f 	.word	0x0800ae2f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	7c12      	ldrb	r2, [r2, #16]
 800ac40:	f107 0108 	add.w	r1, r7, #8
 800ac44:	4610      	mov	r0, r2
 800ac46:	4798      	blx	r3
 800ac48:	60f8      	str	r0, [r7, #12]
      break;
 800ac4a:	e112      	b.n	800ae72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	7c1b      	ldrb	r3, [r3, #16]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10d      	bne.n	800ac70 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5c:	f107 0208 	add.w	r2, r7, #8
 800ac60:	4610      	mov	r0, r2
 800ac62:	4798      	blx	r3
 800ac64:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac6e:	e100      	b.n	800ae72 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac78:	f107 0208 	add.w	r2, r7, #8
 800ac7c:	4610      	mov	r0, r2
 800ac7e:	4798      	blx	r3
 800ac80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	3301      	adds	r3, #1
 800ac86:	2202      	movs	r2, #2
 800ac88:	701a      	strb	r2, [r3, #0]
      break;
 800ac8a:	e0f2      	b.n	800ae72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	885b      	ldrh	r3, [r3, #2]
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	2b05      	cmp	r3, #5
 800ac94:	f200 80ac 	bhi.w	800adf0 <USBD_GetDescriptor+0x204>
 800ac98:	a201      	add	r2, pc, #4	; (adr r2, 800aca0 <USBD_GetDescriptor+0xb4>)
 800ac9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac9e:	bf00      	nop
 800aca0:	0800acb9 	.word	0x0800acb9
 800aca4:	0800aced 	.word	0x0800aced
 800aca8:	0800ad21 	.word	0x0800ad21
 800acac:	0800ad55 	.word	0x0800ad55
 800acb0:	0800ad89 	.word	0x0800ad89
 800acb4:	0800adbd 	.word	0x0800adbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00b      	beq.n	800acdc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	7c12      	ldrb	r2, [r2, #16]
 800acd0:	f107 0108 	add.w	r1, r7, #8
 800acd4:	4610      	mov	r0, r2
 800acd6:	4798      	blx	r3
 800acd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acda:	e091      	b.n	800ae00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acdc:	6839      	ldr	r1, [r7, #0]
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 facb 	bl	800b27a <USBD_CtlError>
            err++;
 800ace4:	7afb      	ldrb	r3, [r7, #11]
 800ace6:	3301      	adds	r3, #1
 800ace8:	72fb      	strb	r3, [r7, #11]
          break;
 800acea:	e089      	b.n	800ae00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00b      	beq.n	800ad10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	7c12      	ldrb	r2, [r2, #16]
 800ad04:	f107 0108 	add.w	r1, r7, #8
 800ad08:	4610      	mov	r0, r2
 800ad0a:	4798      	blx	r3
 800ad0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad0e:	e077      	b.n	800ae00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fab1 	bl	800b27a <USBD_CtlError>
            err++;
 800ad18:	7afb      	ldrb	r3, [r7, #11]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad1e:	e06f      	b.n	800ae00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00b      	beq.n	800ad44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	7c12      	ldrb	r2, [r2, #16]
 800ad38:	f107 0108 	add.w	r1, r7, #8
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	4798      	blx	r3
 800ad40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad42:	e05d      	b.n	800ae00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad44:	6839      	ldr	r1, [r7, #0]
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 fa97 	bl	800b27a <USBD_CtlError>
            err++;
 800ad4c:	7afb      	ldrb	r3, [r7, #11]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	72fb      	strb	r3, [r7, #11]
          break;
 800ad52:	e055      	b.n	800ae00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00b      	beq.n	800ad78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad66:	691b      	ldr	r3, [r3, #16]
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	7c12      	ldrb	r2, [r2, #16]
 800ad6c:	f107 0108 	add.w	r1, r7, #8
 800ad70:	4610      	mov	r0, r2
 800ad72:	4798      	blx	r3
 800ad74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad76:	e043      	b.n	800ae00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fa7d 	bl	800b27a <USBD_CtlError>
            err++;
 800ad80:	7afb      	ldrb	r3, [r7, #11]
 800ad82:	3301      	adds	r3, #1
 800ad84:	72fb      	strb	r3, [r7, #11]
          break;
 800ad86:	e03b      	b.n	800ae00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad8e:	695b      	ldr	r3, [r3, #20]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00b      	beq.n	800adac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad9a:	695b      	ldr	r3, [r3, #20]
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	7c12      	ldrb	r2, [r2, #16]
 800ada0:	f107 0108 	add.w	r1, r7, #8
 800ada4:	4610      	mov	r0, r2
 800ada6:	4798      	blx	r3
 800ada8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adaa:	e029      	b.n	800ae00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adac:	6839      	ldr	r1, [r7, #0]
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fa63 	bl	800b27a <USBD_CtlError>
            err++;
 800adb4:	7afb      	ldrb	r3, [r7, #11]
 800adb6:	3301      	adds	r3, #1
 800adb8:	72fb      	strb	r3, [r7, #11]
          break;
 800adba:	e021      	b.n	800ae00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adc2:	699b      	ldr	r3, [r3, #24]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00b      	beq.n	800ade0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	7c12      	ldrb	r2, [r2, #16]
 800add4:	f107 0108 	add.w	r1, r7, #8
 800add8:	4610      	mov	r0, r2
 800adda:	4798      	blx	r3
 800addc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adde:	e00f      	b.n	800ae00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ade0:	6839      	ldr	r1, [r7, #0]
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fa49 	bl	800b27a <USBD_CtlError>
            err++;
 800ade8:	7afb      	ldrb	r3, [r7, #11]
 800adea:	3301      	adds	r3, #1
 800adec:	72fb      	strb	r3, [r7, #11]
          break;
 800adee:	e007      	b.n	800ae00 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800adf0:	6839      	ldr	r1, [r7, #0]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fa41 	bl	800b27a <USBD_CtlError>
          err++;
 800adf8:	7afb      	ldrb	r3, [r7, #11]
 800adfa:	3301      	adds	r3, #1
 800adfc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800adfe:	bf00      	nop
      }
      break;
 800ae00:	e037      	b.n	800ae72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	7c1b      	ldrb	r3, [r3, #16]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d109      	bne.n	800ae1e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae12:	f107 0208 	add.w	r2, r7, #8
 800ae16:	4610      	mov	r0, r2
 800ae18:	4798      	blx	r3
 800ae1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae1c:	e029      	b.n	800ae72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae1e:	6839      	ldr	r1, [r7, #0]
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 fa2a 	bl	800b27a <USBD_CtlError>
        err++;
 800ae26:	7afb      	ldrb	r3, [r7, #11]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae2c:	e021      	b.n	800ae72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	7c1b      	ldrb	r3, [r3, #16]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d10d      	bne.n	800ae52 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae3e:	f107 0208 	add.w	r2, r7, #8
 800ae42:	4610      	mov	r0, r2
 800ae44:	4798      	blx	r3
 800ae46:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	2207      	movs	r2, #7
 800ae4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae50:	e00f      	b.n	800ae72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fa10 	bl	800b27a <USBD_CtlError>
        err++;
 800ae5a:	7afb      	ldrb	r3, [r7, #11]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae60:	e007      	b.n	800ae72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ae62:	6839      	ldr	r1, [r7, #0]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fa08 	bl	800b27a <USBD_CtlError>
      err++;
 800ae6a:	7afb      	ldrb	r3, [r7, #11]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae70:	bf00      	nop
  }

  if (err != 0U)
 800ae72:	7afb      	ldrb	r3, [r7, #11]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d11e      	bne.n	800aeb6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	88db      	ldrh	r3, [r3, #6]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d016      	beq.n	800aeae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ae80:	893b      	ldrh	r3, [r7, #8]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00e      	beq.n	800aea4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	88da      	ldrh	r2, [r3, #6]
 800ae8a:	893b      	ldrh	r3, [r7, #8]
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	bf28      	it	cs
 800ae90:	4613      	movcs	r3, r2
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae96:	893b      	ldrh	r3, [r7, #8]
 800ae98:	461a      	mov	r2, r3
 800ae9a:	68f9      	ldr	r1, [r7, #12]
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 fa5d 	bl	800b35c <USBD_CtlSendData>
 800aea2:	e009      	b.n	800aeb8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f9e7 	bl	800b27a <USBD_CtlError>
 800aeac:	e004      	b.n	800aeb8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 faae 	bl	800b410 <USBD_CtlSendStatus>
 800aeb4:	e000      	b.n	800aeb8 <USBD_GetDescriptor+0x2cc>
    return;
 800aeb6:	bf00      	nop
  }
}
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop

0800aec0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	889b      	ldrh	r3, [r3, #4]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d131      	bne.n	800af36 <USBD_SetAddress+0x76>
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	88db      	ldrh	r3, [r3, #6]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d12d      	bne.n	800af36 <USBD_SetAddress+0x76>
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	885b      	ldrh	r3, [r3, #2]
 800aede:	2b7f      	cmp	r3, #127	; 0x7f
 800aee0:	d829      	bhi.n	800af36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	885b      	ldrh	r3, [r3, #2]
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	2b03      	cmp	r3, #3
 800aef8:	d104      	bne.n	800af04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aefa:	6839      	ldr	r1, [r7, #0]
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 f9bc 	bl	800b27a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af02:	e01d      	b.n	800af40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	7bfa      	ldrb	r2, [r7, #15]
 800af08:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	4619      	mov	r1, r3
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 fefb 	bl	800bd0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fa7a 	bl	800b410 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af1c:	7bfb      	ldrb	r3, [r7, #15]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d004      	beq.n	800af2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2202      	movs	r2, #2
 800af26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af2a:	e009      	b.n	800af40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af34:	e004      	b.n	800af40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 f99e 	bl	800b27a <USBD_CtlError>
  }
}
 800af3e:	bf00      	nop
 800af40:	bf00      	nop
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af52:	2300      	movs	r3, #0
 800af54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	885b      	ldrh	r3, [r3, #2]
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	4b4e      	ldr	r3, [pc, #312]	; (800b098 <USBD_SetConfig+0x150>)
 800af5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af60:	4b4d      	ldr	r3, [pc, #308]	; (800b098 <USBD_SetConfig+0x150>)
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d905      	bls.n	800af74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af68:	6839      	ldr	r1, [r7, #0]
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f985 	bl	800b27a <USBD_CtlError>
    return USBD_FAIL;
 800af70:	2303      	movs	r3, #3
 800af72:	e08c      	b.n	800b08e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d002      	beq.n	800af86 <USBD_SetConfig+0x3e>
 800af80:	2b03      	cmp	r3, #3
 800af82:	d029      	beq.n	800afd8 <USBD_SetConfig+0x90>
 800af84:	e075      	b.n	800b072 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af86:	4b44      	ldr	r3, [pc, #272]	; (800b098 <USBD_SetConfig+0x150>)
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d020      	beq.n	800afd0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800af8e:	4b42      	ldr	r3, [pc, #264]	; (800b098 <USBD_SetConfig+0x150>)
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	461a      	mov	r2, r3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af98:	4b3f      	ldr	r3, [pc, #252]	; (800b098 <USBD_SetConfig+0x150>)
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7fe ffe7 	bl	8009f72 <USBD_SetClassConfig>
 800afa4:	4603      	mov	r3, r0
 800afa6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800afa8:	7bfb      	ldrb	r3, [r7, #15]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d008      	beq.n	800afc0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 f962 	bl	800b27a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2202      	movs	r2, #2
 800afba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afbe:	e065      	b.n	800b08c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fa25 	bl	800b410 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2203      	movs	r2, #3
 800afca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800afce:	e05d      	b.n	800b08c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fa1d 	bl	800b410 <USBD_CtlSendStatus>
      break;
 800afd6:	e059      	b.n	800b08c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800afd8:	4b2f      	ldr	r3, [pc, #188]	; (800b098 <USBD_SetConfig+0x150>)
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d112      	bne.n	800b006 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2202      	movs	r2, #2
 800afe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800afe8:	4b2b      	ldr	r3, [pc, #172]	; (800b098 <USBD_SetConfig+0x150>)
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	461a      	mov	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aff2:	4b29      	ldr	r3, [pc, #164]	; (800b098 <USBD_SetConfig+0x150>)
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	4619      	mov	r1, r3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f7fe ffd6 	bl	8009faa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fa06 	bl	800b410 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b004:	e042      	b.n	800b08c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b006:	4b24      	ldr	r3, [pc, #144]	; (800b098 <USBD_SetConfig+0x150>)
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	429a      	cmp	r2, r3
 800b012:	d02a      	beq.n	800b06a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f7fe ffc4 	bl	8009faa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b022:	4b1d      	ldr	r3, [pc, #116]	; (800b098 <USBD_SetConfig+0x150>)
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	461a      	mov	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b02c:	4b1a      	ldr	r3, [pc, #104]	; (800b098 <USBD_SetConfig+0x150>)
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7fe ff9d 	bl	8009f72 <USBD_SetClassConfig>
 800b038:	4603      	mov	r3, r0
 800b03a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b03c:	7bfb      	ldrb	r3, [r7, #15]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00f      	beq.n	800b062 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f918 	bl	800b27a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	4619      	mov	r1, r3
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f7fe ffa9 	bl	8009faa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2202      	movs	r2, #2
 800b05c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b060:	e014      	b.n	800b08c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f9d4 	bl	800b410 <USBD_CtlSendStatus>
      break;
 800b068:	e010      	b.n	800b08c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f9d0 	bl	800b410 <USBD_CtlSendStatus>
      break;
 800b070:	e00c      	b.n	800b08c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 f900 	bl	800b27a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b07a:	4b07      	ldr	r3, [pc, #28]	; (800b098 <USBD_SetConfig+0x150>)
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	4619      	mov	r1, r3
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f7fe ff92 	bl	8009faa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b086:	2303      	movs	r3, #3
 800b088:	73fb      	strb	r3, [r7, #15]
      break;
 800b08a:	bf00      	nop
  }

  return ret;
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	200013dc 	.word	0x200013dc

0800b09c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	88db      	ldrh	r3, [r3, #6]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d004      	beq.n	800b0b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b0ae:	6839      	ldr	r1, [r7, #0]
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 f8e2 	bl	800b27a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b0b6:	e023      	b.n	800b100 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	dc02      	bgt.n	800b0ca <USBD_GetConfig+0x2e>
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	dc03      	bgt.n	800b0d0 <USBD_GetConfig+0x34>
 800b0c8:	e015      	b.n	800b0f6 <USBD_GetConfig+0x5a>
 800b0ca:	2b03      	cmp	r3, #3
 800b0cc:	d00b      	beq.n	800b0e6 <USBD_GetConfig+0x4a>
 800b0ce:	e012      	b.n	800b0f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	3308      	adds	r3, #8
 800b0da:	2201      	movs	r2, #1
 800b0dc:	4619      	mov	r1, r3
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 f93c 	bl	800b35c <USBD_CtlSendData>
        break;
 800b0e4:	e00c      	b.n	800b100 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	3304      	adds	r3, #4
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 f934 	bl	800b35c <USBD_CtlSendData>
        break;
 800b0f4:	e004      	b.n	800b100 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 f8be 	bl	800b27a <USBD_CtlError>
        break;
 800b0fe:	bf00      	nop
}
 800b100:	bf00      	nop
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	3b01      	subs	r3, #1
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d81e      	bhi.n	800b15e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	88db      	ldrh	r3, [r3, #6]
 800b124:	2b02      	cmp	r3, #2
 800b126:	d004      	beq.n	800b132 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f8a5 	bl	800b27a <USBD_CtlError>
        break;
 800b130:	e01a      	b.n	800b168 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2201      	movs	r2, #1
 800b136:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d005      	beq.n	800b14e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	f043 0202 	orr.w	r2, r3, #2
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	330c      	adds	r3, #12
 800b152:	2202      	movs	r2, #2
 800b154:	4619      	mov	r1, r3
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f900 	bl	800b35c <USBD_CtlSendData>
      break;
 800b15c:	e004      	b.n	800b168 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b15e:	6839      	ldr	r1, [r7, #0]
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 f88a 	bl	800b27a <USBD_CtlError>
      break;
 800b166:	bf00      	nop
  }
}
 800b168:	bf00      	nop
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	885b      	ldrh	r3, [r3, #2]
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d107      	bne.n	800b192 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2201      	movs	r2, #1
 800b186:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f940 	bl	800b410 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b190:	e013      	b.n	800b1ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	885b      	ldrh	r3, [r3, #2]
 800b196:	2b02      	cmp	r3, #2
 800b198:	d10b      	bne.n	800b1b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	889b      	ldrh	r3, [r3, #4]
 800b19e:	0a1b      	lsrs	r3, r3, #8
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	b2da      	uxtb	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f930 	bl	800b410 <USBD_CtlSendStatus>
}
 800b1b0:	e003      	b.n	800b1ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b1b2:	6839      	ldr	r1, [r7, #0]
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 f860 	bl	800b27a <USBD_CtlError>
}
 800b1ba:	bf00      	nop
 800b1bc:	3708      	adds	r7, #8
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b082      	sub	sp, #8
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	d80b      	bhi.n	800b1f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	885b      	ldrh	r3, [r3, #2]
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d10c      	bne.n	800b1fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f910 	bl	800b410 <USBD_CtlSendStatus>
      }
      break;
 800b1f0:	e004      	b.n	800b1fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b1f2:	6839      	ldr	r1, [r7, #0]
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 f840 	bl	800b27a <USBD_CtlError>
      break;
 800b1fa:	e000      	b.n	800b1fe <USBD_ClrFeature+0x3c>
      break;
 800b1fc:	bf00      	nop
  }
}
 800b1fe:	bf00      	nop
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b084      	sub	sp, #16
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	781a      	ldrb	r2, [r3, #0]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	3301      	adds	r3, #1
 800b220:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	781a      	ldrb	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	3301      	adds	r3, #1
 800b22e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f7ff fa41 	bl	800a6b8 <SWAPBYTE>
 800b236:	4603      	mov	r3, r0
 800b238:	461a      	mov	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3301      	adds	r3, #1
 800b242:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	3301      	adds	r3, #1
 800b248:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f7ff fa34 	bl	800a6b8 <SWAPBYTE>
 800b250:	4603      	mov	r3, r0
 800b252:	461a      	mov	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	3301      	adds	r3, #1
 800b25c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	3301      	adds	r3, #1
 800b262:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f7ff fa27 	bl	800a6b8 <SWAPBYTE>
 800b26a:	4603      	mov	r3, r0
 800b26c:	461a      	mov	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	80da      	strh	r2, [r3, #6]
}
 800b272:	bf00      	nop
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b082      	sub	sp, #8
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
 800b282:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b284:	2180      	movs	r1, #128	; 0x80
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fcd6 	bl	800bc38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b28c:	2100      	movs	r1, #0
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 fcd2 	bl	800bc38 <USBD_LL_StallEP>
}
 800b294:	bf00      	nop
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d036      	beq.n	800b320 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b2b6:	6938      	ldr	r0, [r7, #16]
 800b2b8:	f000 f836 	bl	800b328 <USBD_GetLen>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	3301      	adds	r3, #1
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	005b      	lsls	r3, r3, #1
 800b2c4:	b29a      	uxth	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b2ca:	7dfb      	ldrb	r3, [r7, #23]
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	7812      	ldrb	r2, [r2, #0]
 800b2d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2d6:	7dfb      	ldrb	r3, [r7, #23]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b2dc:	7dfb      	ldrb	r3, [r7, #23]
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	2203      	movs	r2, #3
 800b2e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2e6:	7dfb      	ldrb	r3, [r7, #23]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b2ec:	e013      	b.n	800b316 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b2ee:	7dfb      	ldrb	r3, [r7, #23]
 800b2f0:	68ba      	ldr	r2, [r7, #8]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	693a      	ldr	r2, [r7, #16]
 800b2f6:	7812      	ldrb	r2, [r2, #0]
 800b2f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	613b      	str	r3, [r7, #16]
    idx++;
 800b300:	7dfb      	ldrb	r3, [r7, #23]
 800b302:	3301      	adds	r3, #1
 800b304:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b306:	7dfb      	ldrb	r3, [r7, #23]
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	4413      	add	r3, r2
 800b30c:	2200      	movs	r2, #0
 800b30e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b310:	7dfb      	ldrb	r3, [r7, #23]
 800b312:	3301      	adds	r3, #1
 800b314:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1e7      	bne.n	800b2ee <USBD_GetString+0x52>
 800b31e:	e000      	b.n	800b322 <USBD_GetString+0x86>
    return;
 800b320:	bf00      	nop
  }
}
 800b322:	3718      	adds	r7, #24
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b328:	b480      	push	{r7}
 800b32a:	b085      	sub	sp, #20
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b330:	2300      	movs	r3, #0
 800b332:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b338:	e005      	b.n	800b346 <USBD_GetLen+0x1e>
  {
    len++;
 800b33a:	7bfb      	ldrb	r3, [r7, #15]
 800b33c:	3301      	adds	r3, #1
 800b33e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	3301      	adds	r3, #1
 800b344:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1f5      	bne.n	800b33a <USBD_GetLen+0x12>
  }

  return len;
 800b34e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2202      	movs	r2, #2
 800b36c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	68ba      	ldr	r2, [r7, #8]
 800b380:	2100      	movs	r1, #0
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f000 fce1 	bl	800bd4a <USBD_LL_Transmit>

  return USBD_OK;
 800b388:	2300      	movs	r3, #0
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3710      	adds	r7, #16
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b084      	sub	sp, #16
 800b396:	af00      	add	r7, sp, #0
 800b398:	60f8      	str	r0, [r7, #12]
 800b39a:	60b9      	str	r1, [r7, #8]
 800b39c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	68f8      	ldr	r0, [r7, #12]
 800b3a6:	f000 fcd0 	bl	800bd4a <USBD_LL_Transmit>

  return USBD_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2203      	movs	r2, #3
 800b3c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68ba      	ldr	r2, [r7, #8]
 800b3dc:	2100      	movs	r1, #0
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f000 fcd4 	bl	800bd8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b084      	sub	sp, #16
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	60f8      	str	r0, [r7, #12]
 800b3f6:	60b9      	str	r1, [r7, #8]
 800b3f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	2100      	movs	r1, #0
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f000 fcc3 	bl	800bd8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b406:	2300      	movs	r3, #0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3710      	adds	r7, #16
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2204      	movs	r2, #4
 800b41c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b420:	2300      	movs	r3, #0
 800b422:	2200      	movs	r2, #0
 800b424:	2100      	movs	r1, #0
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 fc8f 	bl	800bd4a <USBD_LL_Transmit>

  return USBD_OK;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b082      	sub	sp, #8
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2205      	movs	r2, #5
 800b442:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b446:	2300      	movs	r3, #0
 800b448:	2200      	movs	r2, #0
 800b44a:	2100      	movs	r1, #0
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fc9d 	bl	800bd8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b460:	2200      	movs	r2, #0
 800b462:	4912      	ldr	r1, [pc, #72]	; (800b4ac <MX_USB_DEVICE_Init+0x50>)
 800b464:	4812      	ldr	r0, [pc, #72]	; (800b4b0 <MX_USB_DEVICE_Init+0x54>)
 800b466:	f7fe fd07 	bl	8009e78 <USBD_Init>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d001      	beq.n	800b474 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b470:	f7f6 f93c 	bl	80016ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b474:	490f      	ldr	r1, [pc, #60]	; (800b4b4 <MX_USB_DEVICE_Init+0x58>)
 800b476:	480e      	ldr	r0, [pc, #56]	; (800b4b0 <MX_USB_DEVICE_Init+0x54>)
 800b478:	f7fe fd2e 	bl	8009ed8 <USBD_RegisterClass>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b482:	f7f6 f933 	bl	80016ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b486:	490c      	ldr	r1, [pc, #48]	; (800b4b8 <MX_USB_DEVICE_Init+0x5c>)
 800b488:	4809      	ldr	r0, [pc, #36]	; (800b4b0 <MX_USB_DEVICE_Init+0x54>)
 800b48a:	f7fe fc1f 	bl	8009ccc <USBD_CDC_RegisterInterface>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d001      	beq.n	800b498 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b494:	f7f6 f92a 	bl	80016ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b498:	4805      	ldr	r0, [pc, #20]	; (800b4b0 <MX_USB_DEVICE_Init+0x54>)
 800b49a:	f7fe fd53 	bl	8009f44 <USBD_Start>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b4a4:	f7f6 f922 	bl	80016ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b4a8:	bf00      	nop
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	200000b0 	.word	0x200000b0
 800b4b0:	200013e0 	.word	0x200013e0
 800b4b4:	2000001c 	.word	0x2000001c
 800b4b8:	2000009c 	.word	0x2000009c

0800b4bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	4905      	ldr	r1, [pc, #20]	; (800b4d8 <CDC_Init_FS+0x1c>)
 800b4c4:	4805      	ldr	r0, [pc, #20]	; (800b4dc <CDC_Init_FS+0x20>)
 800b4c6:	f7fe fc1b 	bl	8009d00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b4ca:	4905      	ldr	r1, [pc, #20]	; (800b4e0 <CDC_Init_FS+0x24>)
 800b4cc:	4803      	ldr	r0, [pc, #12]	; (800b4dc <CDC_Init_FS+0x20>)
 800b4ce:	f7fe fc39 	bl	8009d44 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b4d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	20001ebc 	.word	0x20001ebc
 800b4dc:	200013e0 	.word	0x200013e0
 800b4e0:	200016bc 	.word	0x200016bc

0800b4e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b4e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	6039      	str	r1, [r7, #0]
 800b4fe:	71fb      	strb	r3, [r7, #7]
 800b500:	4613      	mov	r3, r2
 800b502:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b504:	79fb      	ldrb	r3, [r7, #7]
 800b506:	2b23      	cmp	r3, #35	; 0x23
 800b508:	d84a      	bhi.n	800b5a0 <CDC_Control_FS+0xac>
 800b50a:	a201      	add	r2, pc, #4	; (adr r2, 800b510 <CDC_Control_FS+0x1c>)
 800b50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b510:	0800b5a1 	.word	0x0800b5a1
 800b514:	0800b5a1 	.word	0x0800b5a1
 800b518:	0800b5a1 	.word	0x0800b5a1
 800b51c:	0800b5a1 	.word	0x0800b5a1
 800b520:	0800b5a1 	.word	0x0800b5a1
 800b524:	0800b5a1 	.word	0x0800b5a1
 800b528:	0800b5a1 	.word	0x0800b5a1
 800b52c:	0800b5a1 	.word	0x0800b5a1
 800b530:	0800b5a1 	.word	0x0800b5a1
 800b534:	0800b5a1 	.word	0x0800b5a1
 800b538:	0800b5a1 	.word	0x0800b5a1
 800b53c:	0800b5a1 	.word	0x0800b5a1
 800b540:	0800b5a1 	.word	0x0800b5a1
 800b544:	0800b5a1 	.word	0x0800b5a1
 800b548:	0800b5a1 	.word	0x0800b5a1
 800b54c:	0800b5a1 	.word	0x0800b5a1
 800b550:	0800b5a1 	.word	0x0800b5a1
 800b554:	0800b5a1 	.word	0x0800b5a1
 800b558:	0800b5a1 	.word	0x0800b5a1
 800b55c:	0800b5a1 	.word	0x0800b5a1
 800b560:	0800b5a1 	.word	0x0800b5a1
 800b564:	0800b5a1 	.word	0x0800b5a1
 800b568:	0800b5a1 	.word	0x0800b5a1
 800b56c:	0800b5a1 	.word	0x0800b5a1
 800b570:	0800b5a1 	.word	0x0800b5a1
 800b574:	0800b5a1 	.word	0x0800b5a1
 800b578:	0800b5a1 	.word	0x0800b5a1
 800b57c:	0800b5a1 	.word	0x0800b5a1
 800b580:	0800b5a1 	.word	0x0800b5a1
 800b584:	0800b5a1 	.word	0x0800b5a1
 800b588:	0800b5a1 	.word	0x0800b5a1
 800b58c:	0800b5a1 	.word	0x0800b5a1
 800b590:	0800b5a1 	.word	0x0800b5a1
 800b594:	0800b5a1 	.word	0x0800b5a1
 800b598:	0800b5a1 	.word	0x0800b5a1
 800b59c:	0800b5a1 	.word	0x0800b5a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b5a0:	bf00      	nop
  }

  return (USBD_OK);
 800b5a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b5ba:	6879      	ldr	r1, [r7, #4]
 800b5bc:	4805      	ldr	r0, [pc, #20]	; (800b5d4 <CDC_Receive_FS+0x24>)
 800b5be:	f7fe fbc1 	bl	8009d44 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b5c2:	4804      	ldr	r0, [pc, #16]	; (800b5d4 <CDC_Receive_FS+0x24>)
 800b5c4:	f7fe fc22 	bl	8009e0c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b5c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	200013e0 	.word	0x200013e0

0800b5d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b5e8:	4b0d      	ldr	r3, [pc, #52]	; (800b620 <CDC_Transmit_FS+0x48>)
 800b5ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e00b      	b.n	800b616 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b5fe:	887b      	ldrh	r3, [r7, #2]
 800b600:	461a      	mov	r2, r3
 800b602:	6879      	ldr	r1, [r7, #4]
 800b604:	4806      	ldr	r0, [pc, #24]	; (800b620 <CDC_Transmit_FS+0x48>)
 800b606:	f7fe fb7b 	bl	8009d00 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b60a:	4805      	ldr	r0, [pc, #20]	; (800b620 <CDC_Transmit_FS+0x48>)
 800b60c:	f7fe fbb8 	bl	8009d80 <USBD_CDC_TransmitPacket>
 800b610:	4603      	mov	r3, r0
 800b612:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b614:	7bfb      	ldrb	r3, [r7, #15]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	200013e0 	.word	0x200013e0

0800b624 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b624:	b480      	push	{r7}
 800b626:	b087      	sub	sp, #28
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	4613      	mov	r3, r2
 800b630:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b632:	2300      	movs	r3, #0
 800b634:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b636:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	371c      	adds	r7, #28
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
	...

0800b648 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	4603      	mov	r3, r0
 800b650:	6039      	str	r1, [r7, #0]
 800b652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	2212      	movs	r2, #18
 800b658:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b65a:	4b03      	ldr	r3, [pc, #12]	; (800b668 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr
 800b668:	200000cc 	.word	0x200000cc

0800b66c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	4603      	mov	r3, r0
 800b674:	6039      	str	r1, [r7, #0]
 800b676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	2204      	movs	r2, #4
 800b67c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b67e:	4b03      	ldr	r3, [pc, #12]	; (800b68c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b680:	4618      	mov	r0, r3
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	200000e0 	.word	0x200000e0

0800b690 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	4603      	mov	r3, r0
 800b698:	6039      	str	r1, [r7, #0]
 800b69a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b69c:	79fb      	ldrb	r3, [r7, #7]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d105      	bne.n	800b6ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	4907      	ldr	r1, [pc, #28]	; (800b6c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b6a6:	4808      	ldr	r0, [pc, #32]	; (800b6c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b6a8:	f7ff fdf8 	bl	800b29c <USBD_GetString>
 800b6ac:	e004      	b.n	800b6b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	4904      	ldr	r1, [pc, #16]	; (800b6c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b6b2:	4805      	ldr	r0, [pc, #20]	; (800b6c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b6b4:	f7ff fdf2 	bl	800b29c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6b8:	4b02      	ldr	r3, [pc, #8]	; (800b6c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	200026bc 	.word	0x200026bc
 800b6c8:	0800d8b0 	.word	0x0800d8b0

0800b6cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	6039      	str	r1, [r7, #0]
 800b6d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b6d8:	683a      	ldr	r2, [r7, #0]
 800b6da:	4904      	ldr	r1, [pc, #16]	; (800b6ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b6dc:	4804      	ldr	r0, [pc, #16]	; (800b6f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b6de:	f7ff fddd 	bl	800b29c <USBD_GetString>
  return USBD_StrDesc;
 800b6e2:	4b02      	ldr	r3, [pc, #8]	; (800b6ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	200026bc 	.word	0x200026bc
 800b6f0:	0800d8c8 	.word	0x0800d8c8

0800b6f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	6039      	str	r1, [r7, #0]
 800b6fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	221a      	movs	r2, #26
 800b704:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b706:	f000 f843 	bl	800b790 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b70a:	4b02      	ldr	r3, [pc, #8]	; (800b714 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	200000e4 	.word	0x200000e4

0800b718 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	4603      	mov	r3, r0
 800b720:	6039      	str	r1, [r7, #0]
 800b722:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b724:	79fb      	ldrb	r3, [r7, #7]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d105      	bne.n	800b736 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b72a:	683a      	ldr	r2, [r7, #0]
 800b72c:	4907      	ldr	r1, [pc, #28]	; (800b74c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b72e:	4808      	ldr	r0, [pc, #32]	; (800b750 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b730:	f7ff fdb4 	bl	800b29c <USBD_GetString>
 800b734:	e004      	b.n	800b740 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	4904      	ldr	r1, [pc, #16]	; (800b74c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b73a:	4805      	ldr	r0, [pc, #20]	; (800b750 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b73c:	f7ff fdae 	bl	800b29c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b740:	4b02      	ldr	r3, [pc, #8]	; (800b74c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b742:	4618      	mov	r0, r3
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	200026bc 	.word	0x200026bc
 800b750:	0800d8dc 	.word	0x0800d8dc

0800b754 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	4603      	mov	r3, r0
 800b75c:	6039      	str	r1, [r7, #0]
 800b75e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b760:	79fb      	ldrb	r3, [r7, #7]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d105      	bne.n	800b772 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	4907      	ldr	r1, [pc, #28]	; (800b788 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b76a:	4808      	ldr	r0, [pc, #32]	; (800b78c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b76c:	f7ff fd96 	bl	800b29c <USBD_GetString>
 800b770:	e004      	b.n	800b77c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b772:	683a      	ldr	r2, [r7, #0]
 800b774:	4904      	ldr	r1, [pc, #16]	; (800b788 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b776:	4805      	ldr	r0, [pc, #20]	; (800b78c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b778:	f7ff fd90 	bl	800b29c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b77c:	4b02      	ldr	r3, [pc, #8]	; (800b788 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3708      	adds	r7, #8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	200026bc 	.word	0x200026bc
 800b78c:	0800d8e8 	.word	0x0800d8e8

0800b790 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b796:	4b0f      	ldr	r3, [pc, #60]	; (800b7d4 <Get_SerialNum+0x44>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b79c:	4b0e      	ldr	r3, [pc, #56]	; (800b7d8 <Get_SerialNum+0x48>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b7a2:	4b0e      	ldr	r3, [pc, #56]	; (800b7dc <Get_SerialNum+0x4c>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d009      	beq.n	800b7ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b7b6:	2208      	movs	r2, #8
 800b7b8:	4909      	ldr	r1, [pc, #36]	; (800b7e0 <Get_SerialNum+0x50>)
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f000 f814 	bl	800b7e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b7c0:	2204      	movs	r2, #4
 800b7c2:	4908      	ldr	r1, [pc, #32]	; (800b7e4 <Get_SerialNum+0x54>)
 800b7c4:	68b8      	ldr	r0, [r7, #8]
 800b7c6:	f000 f80f 	bl	800b7e8 <IntToUnicode>
  }
}
 800b7ca:	bf00      	nop
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	1fff7a10 	.word	0x1fff7a10
 800b7d8:	1fff7a14 	.word	0x1fff7a14
 800b7dc:	1fff7a18 	.word	0x1fff7a18
 800b7e0:	200000e6 	.word	0x200000e6
 800b7e4:	200000f6 	.word	0x200000f6

0800b7e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b087      	sub	sp, #28
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	75fb      	strb	r3, [r7, #23]
 800b7fe:	e027      	b.n	800b850 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	0f1b      	lsrs	r3, r3, #28
 800b804:	2b09      	cmp	r3, #9
 800b806:	d80b      	bhi.n	800b820 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	0f1b      	lsrs	r3, r3, #28
 800b80c:	b2da      	uxtb	r2, r3
 800b80e:	7dfb      	ldrb	r3, [r7, #23]
 800b810:	005b      	lsls	r3, r3, #1
 800b812:	4619      	mov	r1, r3
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	440b      	add	r3, r1
 800b818:	3230      	adds	r2, #48	; 0x30
 800b81a:	b2d2      	uxtb	r2, r2
 800b81c:	701a      	strb	r2, [r3, #0]
 800b81e:	e00a      	b.n	800b836 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	0f1b      	lsrs	r3, r3, #28
 800b824:	b2da      	uxtb	r2, r3
 800b826:	7dfb      	ldrb	r3, [r7, #23]
 800b828:	005b      	lsls	r3, r3, #1
 800b82a:	4619      	mov	r1, r3
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	440b      	add	r3, r1
 800b830:	3237      	adds	r2, #55	; 0x37
 800b832:	b2d2      	uxtb	r2, r2
 800b834:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	011b      	lsls	r3, r3, #4
 800b83a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b83c:	7dfb      	ldrb	r3, [r7, #23]
 800b83e:	005b      	lsls	r3, r3, #1
 800b840:	3301      	adds	r3, #1
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	4413      	add	r3, r2
 800b846:	2200      	movs	r2, #0
 800b848:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b84a:	7dfb      	ldrb	r3, [r7, #23]
 800b84c:	3301      	adds	r3, #1
 800b84e:	75fb      	strb	r3, [r7, #23]
 800b850:	7dfa      	ldrb	r2, [r7, #23]
 800b852:	79fb      	ldrb	r3, [r7, #7]
 800b854:	429a      	cmp	r2, r3
 800b856:	d3d3      	bcc.n	800b800 <IntToUnicode+0x18>
  }
}
 800b858:	bf00      	nop
 800b85a:	bf00      	nop
 800b85c:	371c      	adds	r7, #28
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr
	...

0800b868 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b08a      	sub	sp, #40	; 0x28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b870:	f107 0314 	add.w	r3, r7, #20
 800b874:	2200      	movs	r2, #0
 800b876:	601a      	str	r2, [r3, #0]
 800b878:	605a      	str	r2, [r3, #4]
 800b87a:	609a      	str	r2, [r3, #8]
 800b87c:	60da      	str	r2, [r3, #12]
 800b87e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b888:	d13a      	bne.n	800b900 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b88a:	2300      	movs	r3, #0
 800b88c:	613b      	str	r3, [r7, #16]
 800b88e:	4b1e      	ldr	r3, [pc, #120]	; (800b908 <HAL_PCD_MspInit+0xa0>)
 800b890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b892:	4a1d      	ldr	r2, [pc, #116]	; (800b908 <HAL_PCD_MspInit+0xa0>)
 800b894:	f043 0301 	orr.w	r3, r3, #1
 800b898:	6313      	str	r3, [r2, #48]	; 0x30
 800b89a:	4b1b      	ldr	r3, [pc, #108]	; (800b908 <HAL_PCD_MspInit+0xa0>)
 800b89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b89e:	f003 0301 	and.w	r3, r3, #1
 800b8a2:	613b      	str	r3, [r7, #16]
 800b8a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b8a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b8aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b8b8:	230a      	movs	r3, #10
 800b8ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8bc:	f107 0314 	add.w	r3, r7, #20
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	4812      	ldr	r0, [pc, #72]	; (800b90c <HAL_PCD_MspInit+0xa4>)
 800b8c4:	f7f6 ff4e 	bl	8002764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b8c8:	4b0f      	ldr	r3, [pc, #60]	; (800b908 <HAL_PCD_MspInit+0xa0>)
 800b8ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8cc:	4a0e      	ldr	r2, [pc, #56]	; (800b908 <HAL_PCD_MspInit+0xa0>)
 800b8ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8d2:	6353      	str	r3, [r2, #52]	; 0x34
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	60fb      	str	r3, [r7, #12]
 800b8d8:	4b0b      	ldr	r3, [pc, #44]	; (800b908 <HAL_PCD_MspInit+0xa0>)
 800b8da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8dc:	4a0a      	ldr	r2, [pc, #40]	; (800b908 <HAL_PCD_MspInit+0xa0>)
 800b8de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b8e2:	6453      	str	r3, [r2, #68]	; 0x44
 800b8e4:	4b08      	ldr	r3, [pc, #32]	; (800b908 <HAL_PCD_MspInit+0xa0>)
 800b8e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8ec:	60fb      	str	r3, [r7, #12]
 800b8ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	2043      	movs	r0, #67	; 0x43
 800b8f6:	f7f6 fece 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b8fa:	2043      	movs	r0, #67	; 0x43
 800b8fc:	f7f6 fee7 	bl	80026ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b900:	bf00      	nop
 800b902:	3728      	adds	r7, #40	; 0x28
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	40023800 	.word	0x40023800
 800b90c:	40020000 	.word	0x40020000

0800b910 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b924:	4619      	mov	r1, r3
 800b926:	4610      	mov	r0, r2
 800b928:	f7fe fb59 	bl	8009fde <USBD_LL_SetupStage>
}
 800b92c:	bf00      	nop
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	460b      	mov	r3, r1
 800b93e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b946:	78fa      	ldrb	r2, [r7, #3]
 800b948:	6879      	ldr	r1, [r7, #4]
 800b94a:	4613      	mov	r3, r2
 800b94c:	00db      	lsls	r3, r3, #3
 800b94e:	4413      	add	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	440b      	add	r3, r1
 800b954:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	78fb      	ldrb	r3, [r7, #3]
 800b95c:	4619      	mov	r1, r3
 800b95e:	f7fe fb93 	bl	800a088 <USBD_LL_DataOutStage>
}
 800b962:	bf00      	nop
 800b964:	3708      	adds	r7, #8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b082      	sub	sp, #8
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
 800b972:	460b      	mov	r3, r1
 800b974:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b97c:	78fa      	ldrb	r2, [r7, #3]
 800b97e:	6879      	ldr	r1, [r7, #4]
 800b980:	4613      	mov	r3, r2
 800b982:	00db      	lsls	r3, r3, #3
 800b984:	4413      	add	r3, r2
 800b986:	009b      	lsls	r3, r3, #2
 800b988:	440b      	add	r3, r1
 800b98a:	334c      	adds	r3, #76	; 0x4c
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	78fb      	ldrb	r3, [r7, #3]
 800b990:	4619      	mov	r1, r3
 800b992:	f7fe fc2c 	bl	800a1ee <USBD_LL_DataInStage>
}
 800b996:	bf00      	nop
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b082      	sub	sp, #8
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7fe fd60 	bl	800a472 <USBD_LL_SOF>
}
 800b9b2:	bf00      	nop
 800b9b4:	3708      	adds	r7, #8
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}

0800b9ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b084      	sub	sp, #16
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	d001      	beq.n	800b9d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b9ce:	f7f5 fe8d 	bl	80016ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9d8:	7bfa      	ldrb	r2, [r7, #15]
 800b9da:	4611      	mov	r1, r2
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7fe fd0a 	bl	800a3f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7fe fcb2 	bl	800a352 <USBD_LL_Reset>
}
 800b9ee:	bf00      	nop
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
	...

0800b9f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fe fd05 	bl	800a416 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	6812      	ldr	r2, [r2, #0]
 800ba1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba1e:	f043 0301 	orr.w	r3, r3, #1
 800ba22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a1b      	ldr	r3, [r3, #32]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d005      	beq.n	800ba38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba2c:	4b04      	ldr	r3, [pc, #16]	; (800ba40 <HAL_PCD_SuspendCallback+0x48>)
 800ba2e:	691b      	ldr	r3, [r3, #16]
 800ba30:	4a03      	ldr	r2, [pc, #12]	; (800ba40 <HAL_PCD_SuspendCallback+0x48>)
 800ba32:	f043 0306 	orr.w	r3, r3, #6
 800ba36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba38:	bf00      	nop
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	e000ed00 	.word	0xe000ed00

0800ba44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe fcf5 	bl	800a442 <USBD_LL_Resume>
}
 800ba58:	bf00      	nop
 800ba5a:	3708      	adds	r7, #8
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba72:	78fa      	ldrb	r2, [r7, #3]
 800ba74:	4611      	mov	r1, r2
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7fe fd4d 	bl	800a516 <USBD_LL_IsoOUTIncomplete>
}
 800ba7c:	bf00      	nop
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba96:	78fa      	ldrb	r2, [r7, #3]
 800ba98:	4611      	mov	r1, r2
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fe fd09 	bl	800a4b2 <USBD_LL_IsoINIncomplete>
}
 800baa0:	bf00      	nop
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7fe fd5f 	bl	800a57a <USBD_LL_DevConnected>
}
 800babc:	bf00      	nop
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe fd5c 	bl	800a590 <USBD_LL_DevDisconnected>
}
 800bad8:	bf00      	nop
 800bada:	3708      	adds	r7, #8
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b082      	sub	sp, #8
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d13c      	bne.n	800bb6a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800baf0:	4a20      	ldr	r2, [pc, #128]	; (800bb74 <USBD_LL_Init+0x94>)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a1e      	ldr	r2, [pc, #120]	; (800bb74 <USBD_LL_Init+0x94>)
 800bafc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bb00:	4b1c      	ldr	r3, [pc, #112]	; (800bb74 <USBD_LL_Init+0x94>)
 800bb02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bb06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bb08:	4b1a      	ldr	r3, [pc, #104]	; (800bb74 <USBD_LL_Init+0x94>)
 800bb0a:	2204      	movs	r2, #4
 800bb0c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bb0e:	4b19      	ldr	r3, [pc, #100]	; (800bb74 <USBD_LL_Init+0x94>)
 800bb10:	2202      	movs	r2, #2
 800bb12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bb14:	4b17      	ldr	r3, [pc, #92]	; (800bb74 <USBD_LL_Init+0x94>)
 800bb16:	2200      	movs	r2, #0
 800bb18:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb1a:	4b16      	ldr	r3, [pc, #88]	; (800bb74 <USBD_LL_Init+0x94>)
 800bb1c:	2202      	movs	r2, #2
 800bb1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bb20:	4b14      	ldr	r3, [pc, #80]	; (800bb74 <USBD_LL_Init+0x94>)
 800bb22:	2200      	movs	r2, #0
 800bb24:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bb26:	4b13      	ldr	r3, [pc, #76]	; (800bb74 <USBD_LL_Init+0x94>)
 800bb28:	2200      	movs	r2, #0
 800bb2a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bb2c:	4b11      	ldr	r3, [pc, #68]	; (800bb74 <USBD_LL_Init+0x94>)
 800bb2e:	2200      	movs	r2, #0
 800bb30:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bb32:	4b10      	ldr	r3, [pc, #64]	; (800bb74 <USBD_LL_Init+0x94>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bb38:	4b0e      	ldr	r3, [pc, #56]	; (800bb74 <USBD_LL_Init+0x94>)
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bb3e:	480d      	ldr	r0, [pc, #52]	; (800bb74 <USBD_LL_Init+0x94>)
 800bb40:	f7f8 fe47 	bl	80047d2 <HAL_PCD_Init>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d001      	beq.n	800bb4e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bb4a:	f7f5 fdcf 	bl	80016ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bb4e:	2180      	movs	r1, #128	; 0x80
 800bb50:	4808      	ldr	r0, [pc, #32]	; (800bb74 <USBD_LL_Init+0x94>)
 800bb52:	f7fa f89e 	bl	8005c92 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bb56:	2240      	movs	r2, #64	; 0x40
 800bb58:	2100      	movs	r1, #0
 800bb5a:	4806      	ldr	r0, [pc, #24]	; (800bb74 <USBD_LL_Init+0x94>)
 800bb5c:	f7fa f852 	bl	8005c04 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bb60:	2280      	movs	r2, #128	; 0x80
 800bb62:	2101      	movs	r1, #1
 800bb64:	4803      	ldr	r0, [pc, #12]	; (800bb74 <USBD_LL_Init+0x94>)
 800bb66:	f7fa f84d 	bl	8005c04 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3708      	adds	r7, #8
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	200028bc 	.word	0x200028bc

0800bb78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb80:	2300      	movs	r3, #0
 800bb82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb84:	2300      	movs	r3, #0
 800bb86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7f8 ff3c 	bl	8004a0c <HAL_PCD_Start>
 800bb94:	4603      	mov	r3, r0
 800bb96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb98:	7bfb      	ldrb	r3, [r7, #15]
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f000 f942 	bl	800be24 <USBD_Get_USB_Status>
 800bba0:	4603      	mov	r3, r0
 800bba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bba4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}

0800bbae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b084      	sub	sp, #16
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
 800bbb6:	4608      	mov	r0, r1
 800bbb8:	4611      	mov	r1, r2
 800bbba:	461a      	mov	r2, r3
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	70fb      	strb	r3, [r7, #3]
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	70bb      	strb	r3, [r7, #2]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bbd6:	78bb      	ldrb	r3, [r7, #2]
 800bbd8:	883a      	ldrh	r2, [r7, #0]
 800bbda:	78f9      	ldrb	r1, [r7, #3]
 800bbdc:	f7f9 fc0d 	bl	80053fa <HAL_PCD_EP_Open>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbe4:	7bfb      	ldrb	r3, [r7, #15]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f000 f91c 	bl	800be24 <USBD_Get_USB_Status>
 800bbec:	4603      	mov	r3, r0
 800bbee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b084      	sub	sp, #16
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	460b      	mov	r3, r1
 800bc04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc06:	2300      	movs	r3, #0
 800bc08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc14:	78fa      	ldrb	r2, [r7, #3]
 800bc16:	4611      	mov	r1, r2
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7f9 fc56 	bl	80054ca <HAL_PCD_EP_Close>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc22:	7bfb      	ldrb	r3, [r7, #15]
 800bc24:	4618      	mov	r0, r3
 800bc26:	f000 f8fd 	bl	800be24 <USBD_Get_USB_Status>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	460b      	mov	r3, r1
 800bc42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc52:	78fa      	ldrb	r2, [r7, #3]
 800bc54:	4611      	mov	r1, r2
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7f9 fd2e 	bl	80056b8 <HAL_PCD_EP_SetStall>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc60:	7bfb      	ldrb	r3, [r7, #15]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f000 f8de 	bl	800be24 <USBD_Get_USB_Status>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b084      	sub	sp, #16
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	460b      	mov	r3, r1
 800bc80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc90:	78fa      	ldrb	r2, [r7, #3]
 800bc92:	4611      	mov	r1, r2
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7f9 fd73 	bl	8005780 <HAL_PCD_EP_ClrStall>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc9e:	7bfb      	ldrb	r3, [r7, #15]
 800bca0:	4618      	mov	r0, r3
 800bca2:	f000 f8bf 	bl	800be24 <USBD_Get_USB_Status>
 800bca6:	4603      	mov	r3, r0
 800bca8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bcc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bcc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	da0b      	bge.n	800bce8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bcd0:	78fb      	ldrb	r3, [r7, #3]
 800bcd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcd6:	68f9      	ldr	r1, [r7, #12]
 800bcd8:	4613      	mov	r3, r2
 800bcda:	00db      	lsls	r3, r3, #3
 800bcdc:	4413      	add	r3, r2
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	440b      	add	r3, r1
 800bce2:	333e      	adds	r3, #62	; 0x3e
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	e00b      	b.n	800bd00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bce8:	78fb      	ldrb	r3, [r7, #3]
 800bcea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcee:	68f9      	ldr	r1, [r7, #12]
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	00db      	lsls	r3, r3, #3
 800bcf4:	4413      	add	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	440b      	add	r3, r1
 800bcfa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bcfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3714      	adds	r7, #20
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	460b      	mov	r3, r1
 800bd16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd26:	78fa      	ldrb	r2, [r7, #3]
 800bd28:	4611      	mov	r1, r2
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7f9 fb40 	bl	80053b0 <HAL_PCD_SetAddress>
 800bd30:	4603      	mov	r3, r0
 800bd32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f000 f874 	bl	800be24 <USBD_Get_USB_Status>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd40:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b086      	sub	sp, #24
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	60f8      	str	r0, [r7, #12]
 800bd52:	607a      	str	r2, [r7, #4]
 800bd54:	603b      	str	r3, [r7, #0]
 800bd56:	460b      	mov	r3, r1
 800bd58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bd68:	7af9      	ldrb	r1, [r7, #11]
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	f7f9 fc59 	bl	8005624 <HAL_PCD_EP_Transmit>
 800bd72:	4603      	mov	r3, r0
 800bd74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd76:	7dfb      	ldrb	r3, [r7, #23]
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f000 f853 	bl	800be24 <USBD_Get_USB_Status>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd82:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3718      	adds	r7, #24
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b086      	sub	sp, #24
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	607a      	str	r2, [r7, #4]
 800bd96:	603b      	str	r3, [r7, #0]
 800bd98:	460b      	mov	r3, r1
 800bd9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bda0:	2300      	movs	r3, #0
 800bda2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bdaa:	7af9      	ldrb	r1, [r7, #11]
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	f7f9 fbd5 	bl	800555e <HAL_PCD_EP_Receive>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdb8:	7dfb      	ldrb	r3, [r7, #23]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f000 f832 	bl	800be24 <USBD_Get_USB_Status>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bdc4:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3718      	adds	r7, #24
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b082      	sub	sp, #8
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bde0:	78fa      	ldrb	r2, [r7, #3]
 800bde2:	4611      	mov	r1, r2
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7f9 fc05 	bl	80055f4 <HAL_PCD_EP_GetRxCount>
 800bdea:	4603      	mov	r3, r0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bdfc:	4b03      	ldr	r3, [pc, #12]	; (800be0c <USBD_static_malloc+0x18>)
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	370c      	adds	r7, #12
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr
 800be0a:	bf00      	nop
 800be0c:	20002dc8 	.word	0x20002dc8

0800be10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]

}
 800be18:	bf00      	nop
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	4603      	mov	r3, r0
 800be2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be2e:	2300      	movs	r3, #0
 800be30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be32:	79fb      	ldrb	r3, [r7, #7]
 800be34:	2b03      	cmp	r3, #3
 800be36:	d817      	bhi.n	800be68 <USBD_Get_USB_Status+0x44>
 800be38:	a201      	add	r2, pc, #4	; (adr r2, 800be40 <USBD_Get_USB_Status+0x1c>)
 800be3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be3e:	bf00      	nop
 800be40:	0800be51 	.word	0x0800be51
 800be44:	0800be57 	.word	0x0800be57
 800be48:	0800be5d 	.word	0x0800be5d
 800be4c:	0800be63 	.word	0x0800be63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800be50:	2300      	movs	r3, #0
 800be52:	73fb      	strb	r3, [r7, #15]
    break;
 800be54:	e00b      	b.n	800be6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be56:	2303      	movs	r3, #3
 800be58:	73fb      	strb	r3, [r7, #15]
    break;
 800be5a:	e008      	b.n	800be6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be5c:	2301      	movs	r3, #1
 800be5e:	73fb      	strb	r3, [r7, #15]
    break;
 800be60:	e005      	b.n	800be6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be62:	2303      	movs	r3, #3
 800be64:	73fb      	strb	r3, [r7, #15]
    break;
 800be66:	e002      	b.n	800be6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800be68:	2303      	movs	r3, #3
 800be6a:	73fb      	strb	r3, [r7, #15]
    break;
 800be6c:	bf00      	nop
  }
  return usb_status;
 800be6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <sniprintf>:
 800be7c:	b40c      	push	{r2, r3}
 800be7e:	b530      	push	{r4, r5, lr}
 800be80:	4b17      	ldr	r3, [pc, #92]	; (800bee0 <sniprintf+0x64>)
 800be82:	1e0c      	subs	r4, r1, #0
 800be84:	681d      	ldr	r5, [r3, #0]
 800be86:	b09d      	sub	sp, #116	; 0x74
 800be88:	da08      	bge.n	800be9c <sniprintf+0x20>
 800be8a:	238b      	movs	r3, #139	; 0x8b
 800be8c:	602b      	str	r3, [r5, #0]
 800be8e:	f04f 30ff 	mov.w	r0, #4294967295
 800be92:	b01d      	add	sp, #116	; 0x74
 800be94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be98:	b002      	add	sp, #8
 800be9a:	4770      	bx	lr
 800be9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bea0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bea4:	bf14      	ite	ne
 800bea6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800beaa:	4623      	moveq	r3, r4
 800beac:	9304      	str	r3, [sp, #16]
 800beae:	9307      	str	r3, [sp, #28]
 800beb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800beb4:	9002      	str	r0, [sp, #8]
 800beb6:	9006      	str	r0, [sp, #24]
 800beb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bebc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bebe:	ab21      	add	r3, sp, #132	; 0x84
 800bec0:	a902      	add	r1, sp, #8
 800bec2:	4628      	mov	r0, r5
 800bec4:	9301      	str	r3, [sp, #4]
 800bec6:	f000 f993 	bl	800c1f0 <_svfiprintf_r>
 800beca:	1c43      	adds	r3, r0, #1
 800becc:	bfbc      	itt	lt
 800bece:	238b      	movlt	r3, #139	; 0x8b
 800bed0:	602b      	strlt	r3, [r5, #0]
 800bed2:	2c00      	cmp	r4, #0
 800bed4:	d0dd      	beq.n	800be92 <sniprintf+0x16>
 800bed6:	9b02      	ldr	r3, [sp, #8]
 800bed8:	2200      	movs	r2, #0
 800beda:	701a      	strb	r2, [r3, #0]
 800bedc:	e7d9      	b.n	800be92 <sniprintf+0x16>
 800bede:	bf00      	nop
 800bee0:	2000014c 	.word	0x2000014c

0800bee4 <memset>:
 800bee4:	4402      	add	r2, r0
 800bee6:	4603      	mov	r3, r0
 800bee8:	4293      	cmp	r3, r2
 800beea:	d100      	bne.n	800beee <memset+0xa>
 800beec:	4770      	bx	lr
 800beee:	f803 1b01 	strb.w	r1, [r3], #1
 800bef2:	e7f9      	b.n	800bee8 <memset+0x4>

0800bef4 <__errno>:
 800bef4:	4b01      	ldr	r3, [pc, #4]	; (800befc <__errno+0x8>)
 800bef6:	6818      	ldr	r0, [r3, #0]
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	2000014c 	.word	0x2000014c

0800bf00 <__libc_init_array>:
 800bf00:	b570      	push	{r4, r5, r6, lr}
 800bf02:	4d0d      	ldr	r5, [pc, #52]	; (800bf38 <__libc_init_array+0x38>)
 800bf04:	4c0d      	ldr	r4, [pc, #52]	; (800bf3c <__libc_init_array+0x3c>)
 800bf06:	1b64      	subs	r4, r4, r5
 800bf08:	10a4      	asrs	r4, r4, #2
 800bf0a:	2600      	movs	r6, #0
 800bf0c:	42a6      	cmp	r6, r4
 800bf0e:	d109      	bne.n	800bf24 <__libc_init_array+0x24>
 800bf10:	4d0b      	ldr	r5, [pc, #44]	; (800bf40 <__libc_init_array+0x40>)
 800bf12:	4c0c      	ldr	r4, [pc, #48]	; (800bf44 <__libc_init_array+0x44>)
 800bf14:	f001 fcac 	bl	800d870 <_init>
 800bf18:	1b64      	subs	r4, r4, r5
 800bf1a:	10a4      	asrs	r4, r4, #2
 800bf1c:	2600      	movs	r6, #0
 800bf1e:	42a6      	cmp	r6, r4
 800bf20:	d105      	bne.n	800bf2e <__libc_init_array+0x2e>
 800bf22:	bd70      	pop	{r4, r5, r6, pc}
 800bf24:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf28:	4798      	blx	r3
 800bf2a:	3601      	adds	r6, #1
 800bf2c:	e7ee      	b.n	800bf0c <__libc_init_array+0xc>
 800bf2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf32:	4798      	blx	r3
 800bf34:	3601      	adds	r6, #1
 800bf36:	e7f2      	b.n	800bf1e <__libc_init_array+0x1e>
 800bf38:	0800db28 	.word	0x0800db28
 800bf3c:	0800db28 	.word	0x0800db28
 800bf40:	0800db28 	.word	0x0800db28
 800bf44:	0800db2c 	.word	0x0800db2c

0800bf48 <__retarget_lock_acquire_recursive>:
 800bf48:	4770      	bx	lr

0800bf4a <__retarget_lock_release_recursive>:
 800bf4a:	4770      	bx	lr

0800bf4c <_free_r>:
 800bf4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf4e:	2900      	cmp	r1, #0
 800bf50:	d044      	beq.n	800bfdc <_free_r+0x90>
 800bf52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf56:	9001      	str	r0, [sp, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f1a1 0404 	sub.w	r4, r1, #4
 800bf5e:	bfb8      	it	lt
 800bf60:	18e4      	addlt	r4, r4, r3
 800bf62:	f000 f8df 	bl	800c124 <__malloc_lock>
 800bf66:	4a1e      	ldr	r2, [pc, #120]	; (800bfe0 <_free_r+0x94>)
 800bf68:	9801      	ldr	r0, [sp, #4]
 800bf6a:	6813      	ldr	r3, [r2, #0]
 800bf6c:	b933      	cbnz	r3, 800bf7c <_free_r+0x30>
 800bf6e:	6063      	str	r3, [r4, #4]
 800bf70:	6014      	str	r4, [r2, #0]
 800bf72:	b003      	add	sp, #12
 800bf74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf78:	f000 b8da 	b.w	800c130 <__malloc_unlock>
 800bf7c:	42a3      	cmp	r3, r4
 800bf7e:	d908      	bls.n	800bf92 <_free_r+0x46>
 800bf80:	6825      	ldr	r5, [r4, #0]
 800bf82:	1961      	adds	r1, r4, r5
 800bf84:	428b      	cmp	r3, r1
 800bf86:	bf01      	itttt	eq
 800bf88:	6819      	ldreq	r1, [r3, #0]
 800bf8a:	685b      	ldreq	r3, [r3, #4]
 800bf8c:	1949      	addeq	r1, r1, r5
 800bf8e:	6021      	streq	r1, [r4, #0]
 800bf90:	e7ed      	b.n	800bf6e <_free_r+0x22>
 800bf92:	461a      	mov	r2, r3
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	b10b      	cbz	r3, 800bf9c <_free_r+0x50>
 800bf98:	42a3      	cmp	r3, r4
 800bf9a:	d9fa      	bls.n	800bf92 <_free_r+0x46>
 800bf9c:	6811      	ldr	r1, [r2, #0]
 800bf9e:	1855      	adds	r5, r2, r1
 800bfa0:	42a5      	cmp	r5, r4
 800bfa2:	d10b      	bne.n	800bfbc <_free_r+0x70>
 800bfa4:	6824      	ldr	r4, [r4, #0]
 800bfa6:	4421      	add	r1, r4
 800bfa8:	1854      	adds	r4, r2, r1
 800bfaa:	42a3      	cmp	r3, r4
 800bfac:	6011      	str	r1, [r2, #0]
 800bfae:	d1e0      	bne.n	800bf72 <_free_r+0x26>
 800bfb0:	681c      	ldr	r4, [r3, #0]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	6053      	str	r3, [r2, #4]
 800bfb6:	440c      	add	r4, r1
 800bfb8:	6014      	str	r4, [r2, #0]
 800bfba:	e7da      	b.n	800bf72 <_free_r+0x26>
 800bfbc:	d902      	bls.n	800bfc4 <_free_r+0x78>
 800bfbe:	230c      	movs	r3, #12
 800bfc0:	6003      	str	r3, [r0, #0]
 800bfc2:	e7d6      	b.n	800bf72 <_free_r+0x26>
 800bfc4:	6825      	ldr	r5, [r4, #0]
 800bfc6:	1961      	adds	r1, r4, r5
 800bfc8:	428b      	cmp	r3, r1
 800bfca:	bf04      	itt	eq
 800bfcc:	6819      	ldreq	r1, [r3, #0]
 800bfce:	685b      	ldreq	r3, [r3, #4]
 800bfd0:	6063      	str	r3, [r4, #4]
 800bfd2:	bf04      	itt	eq
 800bfd4:	1949      	addeq	r1, r1, r5
 800bfd6:	6021      	streq	r1, [r4, #0]
 800bfd8:	6054      	str	r4, [r2, #4]
 800bfda:	e7ca      	b.n	800bf72 <_free_r+0x26>
 800bfdc:	b003      	add	sp, #12
 800bfde:	bd30      	pop	{r4, r5, pc}
 800bfe0:	20003128 	.word	0x20003128

0800bfe4 <sbrk_aligned>:
 800bfe4:	b570      	push	{r4, r5, r6, lr}
 800bfe6:	4e0e      	ldr	r6, [pc, #56]	; (800c020 <sbrk_aligned+0x3c>)
 800bfe8:	460c      	mov	r4, r1
 800bfea:	6831      	ldr	r1, [r6, #0]
 800bfec:	4605      	mov	r5, r0
 800bfee:	b911      	cbnz	r1, 800bff6 <sbrk_aligned+0x12>
 800bff0:	f000 fba6 	bl	800c740 <_sbrk_r>
 800bff4:	6030      	str	r0, [r6, #0]
 800bff6:	4621      	mov	r1, r4
 800bff8:	4628      	mov	r0, r5
 800bffa:	f000 fba1 	bl	800c740 <_sbrk_r>
 800bffe:	1c43      	adds	r3, r0, #1
 800c000:	d00a      	beq.n	800c018 <sbrk_aligned+0x34>
 800c002:	1cc4      	adds	r4, r0, #3
 800c004:	f024 0403 	bic.w	r4, r4, #3
 800c008:	42a0      	cmp	r0, r4
 800c00a:	d007      	beq.n	800c01c <sbrk_aligned+0x38>
 800c00c:	1a21      	subs	r1, r4, r0
 800c00e:	4628      	mov	r0, r5
 800c010:	f000 fb96 	bl	800c740 <_sbrk_r>
 800c014:	3001      	adds	r0, #1
 800c016:	d101      	bne.n	800c01c <sbrk_aligned+0x38>
 800c018:	f04f 34ff 	mov.w	r4, #4294967295
 800c01c:	4620      	mov	r0, r4
 800c01e:	bd70      	pop	{r4, r5, r6, pc}
 800c020:	2000312c 	.word	0x2000312c

0800c024 <_malloc_r>:
 800c024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c028:	1ccd      	adds	r5, r1, #3
 800c02a:	f025 0503 	bic.w	r5, r5, #3
 800c02e:	3508      	adds	r5, #8
 800c030:	2d0c      	cmp	r5, #12
 800c032:	bf38      	it	cc
 800c034:	250c      	movcc	r5, #12
 800c036:	2d00      	cmp	r5, #0
 800c038:	4607      	mov	r7, r0
 800c03a:	db01      	blt.n	800c040 <_malloc_r+0x1c>
 800c03c:	42a9      	cmp	r1, r5
 800c03e:	d905      	bls.n	800c04c <_malloc_r+0x28>
 800c040:	230c      	movs	r3, #12
 800c042:	603b      	str	r3, [r7, #0]
 800c044:	2600      	movs	r6, #0
 800c046:	4630      	mov	r0, r6
 800c048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c120 <_malloc_r+0xfc>
 800c050:	f000 f868 	bl	800c124 <__malloc_lock>
 800c054:	f8d8 3000 	ldr.w	r3, [r8]
 800c058:	461c      	mov	r4, r3
 800c05a:	bb5c      	cbnz	r4, 800c0b4 <_malloc_r+0x90>
 800c05c:	4629      	mov	r1, r5
 800c05e:	4638      	mov	r0, r7
 800c060:	f7ff ffc0 	bl	800bfe4 <sbrk_aligned>
 800c064:	1c43      	adds	r3, r0, #1
 800c066:	4604      	mov	r4, r0
 800c068:	d155      	bne.n	800c116 <_malloc_r+0xf2>
 800c06a:	f8d8 4000 	ldr.w	r4, [r8]
 800c06e:	4626      	mov	r6, r4
 800c070:	2e00      	cmp	r6, #0
 800c072:	d145      	bne.n	800c100 <_malloc_r+0xdc>
 800c074:	2c00      	cmp	r4, #0
 800c076:	d048      	beq.n	800c10a <_malloc_r+0xe6>
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	4631      	mov	r1, r6
 800c07c:	4638      	mov	r0, r7
 800c07e:	eb04 0903 	add.w	r9, r4, r3
 800c082:	f000 fb5d 	bl	800c740 <_sbrk_r>
 800c086:	4581      	cmp	r9, r0
 800c088:	d13f      	bne.n	800c10a <_malloc_r+0xe6>
 800c08a:	6821      	ldr	r1, [r4, #0]
 800c08c:	1a6d      	subs	r5, r5, r1
 800c08e:	4629      	mov	r1, r5
 800c090:	4638      	mov	r0, r7
 800c092:	f7ff ffa7 	bl	800bfe4 <sbrk_aligned>
 800c096:	3001      	adds	r0, #1
 800c098:	d037      	beq.n	800c10a <_malloc_r+0xe6>
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	442b      	add	r3, r5
 800c09e:	6023      	str	r3, [r4, #0]
 800c0a0:	f8d8 3000 	ldr.w	r3, [r8]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d038      	beq.n	800c11a <_malloc_r+0xf6>
 800c0a8:	685a      	ldr	r2, [r3, #4]
 800c0aa:	42a2      	cmp	r2, r4
 800c0ac:	d12b      	bne.n	800c106 <_malloc_r+0xe2>
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	605a      	str	r2, [r3, #4]
 800c0b2:	e00f      	b.n	800c0d4 <_malloc_r+0xb0>
 800c0b4:	6822      	ldr	r2, [r4, #0]
 800c0b6:	1b52      	subs	r2, r2, r5
 800c0b8:	d41f      	bmi.n	800c0fa <_malloc_r+0xd6>
 800c0ba:	2a0b      	cmp	r2, #11
 800c0bc:	d917      	bls.n	800c0ee <_malloc_r+0xca>
 800c0be:	1961      	adds	r1, r4, r5
 800c0c0:	42a3      	cmp	r3, r4
 800c0c2:	6025      	str	r5, [r4, #0]
 800c0c4:	bf18      	it	ne
 800c0c6:	6059      	strne	r1, [r3, #4]
 800c0c8:	6863      	ldr	r3, [r4, #4]
 800c0ca:	bf08      	it	eq
 800c0cc:	f8c8 1000 	streq.w	r1, [r8]
 800c0d0:	5162      	str	r2, [r4, r5]
 800c0d2:	604b      	str	r3, [r1, #4]
 800c0d4:	4638      	mov	r0, r7
 800c0d6:	f104 060b 	add.w	r6, r4, #11
 800c0da:	f000 f829 	bl	800c130 <__malloc_unlock>
 800c0de:	f026 0607 	bic.w	r6, r6, #7
 800c0e2:	1d23      	adds	r3, r4, #4
 800c0e4:	1af2      	subs	r2, r6, r3
 800c0e6:	d0ae      	beq.n	800c046 <_malloc_r+0x22>
 800c0e8:	1b9b      	subs	r3, r3, r6
 800c0ea:	50a3      	str	r3, [r4, r2]
 800c0ec:	e7ab      	b.n	800c046 <_malloc_r+0x22>
 800c0ee:	42a3      	cmp	r3, r4
 800c0f0:	6862      	ldr	r2, [r4, #4]
 800c0f2:	d1dd      	bne.n	800c0b0 <_malloc_r+0x8c>
 800c0f4:	f8c8 2000 	str.w	r2, [r8]
 800c0f8:	e7ec      	b.n	800c0d4 <_malloc_r+0xb0>
 800c0fa:	4623      	mov	r3, r4
 800c0fc:	6864      	ldr	r4, [r4, #4]
 800c0fe:	e7ac      	b.n	800c05a <_malloc_r+0x36>
 800c100:	4634      	mov	r4, r6
 800c102:	6876      	ldr	r6, [r6, #4]
 800c104:	e7b4      	b.n	800c070 <_malloc_r+0x4c>
 800c106:	4613      	mov	r3, r2
 800c108:	e7cc      	b.n	800c0a4 <_malloc_r+0x80>
 800c10a:	230c      	movs	r3, #12
 800c10c:	603b      	str	r3, [r7, #0]
 800c10e:	4638      	mov	r0, r7
 800c110:	f000 f80e 	bl	800c130 <__malloc_unlock>
 800c114:	e797      	b.n	800c046 <_malloc_r+0x22>
 800c116:	6025      	str	r5, [r4, #0]
 800c118:	e7dc      	b.n	800c0d4 <_malloc_r+0xb0>
 800c11a:	605b      	str	r3, [r3, #4]
 800c11c:	deff      	udf	#255	; 0xff
 800c11e:	bf00      	nop
 800c120:	20003128 	.word	0x20003128

0800c124 <__malloc_lock>:
 800c124:	4801      	ldr	r0, [pc, #4]	; (800c12c <__malloc_lock+0x8>)
 800c126:	f7ff bf0f 	b.w	800bf48 <__retarget_lock_acquire_recursive>
 800c12a:	bf00      	nop
 800c12c:	20003124 	.word	0x20003124

0800c130 <__malloc_unlock>:
 800c130:	4801      	ldr	r0, [pc, #4]	; (800c138 <__malloc_unlock+0x8>)
 800c132:	f7ff bf0a 	b.w	800bf4a <__retarget_lock_release_recursive>
 800c136:	bf00      	nop
 800c138:	20003124 	.word	0x20003124

0800c13c <__ssputs_r>:
 800c13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c140:	688e      	ldr	r6, [r1, #8]
 800c142:	461f      	mov	r7, r3
 800c144:	42be      	cmp	r6, r7
 800c146:	680b      	ldr	r3, [r1, #0]
 800c148:	4682      	mov	sl, r0
 800c14a:	460c      	mov	r4, r1
 800c14c:	4690      	mov	r8, r2
 800c14e:	d82c      	bhi.n	800c1aa <__ssputs_r+0x6e>
 800c150:	898a      	ldrh	r2, [r1, #12]
 800c152:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c156:	d026      	beq.n	800c1a6 <__ssputs_r+0x6a>
 800c158:	6965      	ldr	r5, [r4, #20]
 800c15a:	6909      	ldr	r1, [r1, #16]
 800c15c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c160:	eba3 0901 	sub.w	r9, r3, r1
 800c164:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c168:	1c7b      	adds	r3, r7, #1
 800c16a:	444b      	add	r3, r9
 800c16c:	106d      	asrs	r5, r5, #1
 800c16e:	429d      	cmp	r5, r3
 800c170:	bf38      	it	cc
 800c172:	461d      	movcc	r5, r3
 800c174:	0553      	lsls	r3, r2, #21
 800c176:	d527      	bpl.n	800c1c8 <__ssputs_r+0x8c>
 800c178:	4629      	mov	r1, r5
 800c17a:	f7ff ff53 	bl	800c024 <_malloc_r>
 800c17e:	4606      	mov	r6, r0
 800c180:	b360      	cbz	r0, 800c1dc <__ssputs_r+0xa0>
 800c182:	6921      	ldr	r1, [r4, #16]
 800c184:	464a      	mov	r2, r9
 800c186:	f000 faeb 	bl	800c760 <memcpy>
 800c18a:	89a3      	ldrh	r3, [r4, #12]
 800c18c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c194:	81a3      	strh	r3, [r4, #12]
 800c196:	6126      	str	r6, [r4, #16]
 800c198:	6165      	str	r5, [r4, #20]
 800c19a:	444e      	add	r6, r9
 800c19c:	eba5 0509 	sub.w	r5, r5, r9
 800c1a0:	6026      	str	r6, [r4, #0]
 800c1a2:	60a5      	str	r5, [r4, #8]
 800c1a4:	463e      	mov	r6, r7
 800c1a6:	42be      	cmp	r6, r7
 800c1a8:	d900      	bls.n	800c1ac <__ssputs_r+0x70>
 800c1aa:	463e      	mov	r6, r7
 800c1ac:	6820      	ldr	r0, [r4, #0]
 800c1ae:	4632      	mov	r2, r6
 800c1b0:	4641      	mov	r1, r8
 800c1b2:	f000 faab 	bl	800c70c <memmove>
 800c1b6:	68a3      	ldr	r3, [r4, #8]
 800c1b8:	1b9b      	subs	r3, r3, r6
 800c1ba:	60a3      	str	r3, [r4, #8]
 800c1bc:	6823      	ldr	r3, [r4, #0]
 800c1be:	4433      	add	r3, r6
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c8:	462a      	mov	r2, r5
 800c1ca:	f000 fad7 	bl	800c77c <_realloc_r>
 800c1ce:	4606      	mov	r6, r0
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	d1e0      	bne.n	800c196 <__ssputs_r+0x5a>
 800c1d4:	6921      	ldr	r1, [r4, #16]
 800c1d6:	4650      	mov	r0, sl
 800c1d8:	f7ff feb8 	bl	800bf4c <_free_r>
 800c1dc:	230c      	movs	r3, #12
 800c1de:	f8ca 3000 	str.w	r3, [sl]
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1e8:	81a3      	strh	r3, [r4, #12]
 800c1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ee:	e7e9      	b.n	800c1c4 <__ssputs_r+0x88>

0800c1f0 <_svfiprintf_r>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	4698      	mov	r8, r3
 800c1f6:	898b      	ldrh	r3, [r1, #12]
 800c1f8:	061b      	lsls	r3, r3, #24
 800c1fa:	b09d      	sub	sp, #116	; 0x74
 800c1fc:	4607      	mov	r7, r0
 800c1fe:	460d      	mov	r5, r1
 800c200:	4614      	mov	r4, r2
 800c202:	d50e      	bpl.n	800c222 <_svfiprintf_r+0x32>
 800c204:	690b      	ldr	r3, [r1, #16]
 800c206:	b963      	cbnz	r3, 800c222 <_svfiprintf_r+0x32>
 800c208:	2140      	movs	r1, #64	; 0x40
 800c20a:	f7ff ff0b 	bl	800c024 <_malloc_r>
 800c20e:	6028      	str	r0, [r5, #0]
 800c210:	6128      	str	r0, [r5, #16]
 800c212:	b920      	cbnz	r0, 800c21e <_svfiprintf_r+0x2e>
 800c214:	230c      	movs	r3, #12
 800c216:	603b      	str	r3, [r7, #0]
 800c218:	f04f 30ff 	mov.w	r0, #4294967295
 800c21c:	e0d0      	b.n	800c3c0 <_svfiprintf_r+0x1d0>
 800c21e:	2340      	movs	r3, #64	; 0x40
 800c220:	616b      	str	r3, [r5, #20]
 800c222:	2300      	movs	r3, #0
 800c224:	9309      	str	r3, [sp, #36]	; 0x24
 800c226:	2320      	movs	r3, #32
 800c228:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c22c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c230:	2330      	movs	r3, #48	; 0x30
 800c232:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c3d8 <_svfiprintf_r+0x1e8>
 800c236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c23a:	f04f 0901 	mov.w	r9, #1
 800c23e:	4623      	mov	r3, r4
 800c240:	469a      	mov	sl, r3
 800c242:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c246:	b10a      	cbz	r2, 800c24c <_svfiprintf_r+0x5c>
 800c248:	2a25      	cmp	r2, #37	; 0x25
 800c24a:	d1f9      	bne.n	800c240 <_svfiprintf_r+0x50>
 800c24c:	ebba 0b04 	subs.w	fp, sl, r4
 800c250:	d00b      	beq.n	800c26a <_svfiprintf_r+0x7a>
 800c252:	465b      	mov	r3, fp
 800c254:	4622      	mov	r2, r4
 800c256:	4629      	mov	r1, r5
 800c258:	4638      	mov	r0, r7
 800c25a:	f7ff ff6f 	bl	800c13c <__ssputs_r>
 800c25e:	3001      	adds	r0, #1
 800c260:	f000 80a9 	beq.w	800c3b6 <_svfiprintf_r+0x1c6>
 800c264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c266:	445a      	add	r2, fp
 800c268:	9209      	str	r2, [sp, #36]	; 0x24
 800c26a:	f89a 3000 	ldrb.w	r3, [sl]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	f000 80a1 	beq.w	800c3b6 <_svfiprintf_r+0x1c6>
 800c274:	2300      	movs	r3, #0
 800c276:	f04f 32ff 	mov.w	r2, #4294967295
 800c27a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c27e:	f10a 0a01 	add.w	sl, sl, #1
 800c282:	9304      	str	r3, [sp, #16]
 800c284:	9307      	str	r3, [sp, #28]
 800c286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c28a:	931a      	str	r3, [sp, #104]	; 0x68
 800c28c:	4654      	mov	r4, sl
 800c28e:	2205      	movs	r2, #5
 800c290:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c294:	4850      	ldr	r0, [pc, #320]	; (800c3d8 <_svfiprintf_r+0x1e8>)
 800c296:	f7f3 ffa3 	bl	80001e0 <memchr>
 800c29a:	9a04      	ldr	r2, [sp, #16]
 800c29c:	b9d8      	cbnz	r0, 800c2d6 <_svfiprintf_r+0xe6>
 800c29e:	06d0      	lsls	r0, r2, #27
 800c2a0:	bf44      	itt	mi
 800c2a2:	2320      	movmi	r3, #32
 800c2a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2a8:	0711      	lsls	r1, r2, #28
 800c2aa:	bf44      	itt	mi
 800c2ac:	232b      	movmi	r3, #43	; 0x2b
 800c2ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2b2:	f89a 3000 	ldrb.w	r3, [sl]
 800c2b6:	2b2a      	cmp	r3, #42	; 0x2a
 800c2b8:	d015      	beq.n	800c2e6 <_svfiprintf_r+0xf6>
 800c2ba:	9a07      	ldr	r2, [sp, #28]
 800c2bc:	4654      	mov	r4, sl
 800c2be:	2000      	movs	r0, #0
 800c2c0:	f04f 0c0a 	mov.w	ip, #10
 800c2c4:	4621      	mov	r1, r4
 800c2c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2ca:	3b30      	subs	r3, #48	; 0x30
 800c2cc:	2b09      	cmp	r3, #9
 800c2ce:	d94d      	bls.n	800c36c <_svfiprintf_r+0x17c>
 800c2d0:	b1b0      	cbz	r0, 800c300 <_svfiprintf_r+0x110>
 800c2d2:	9207      	str	r2, [sp, #28]
 800c2d4:	e014      	b.n	800c300 <_svfiprintf_r+0x110>
 800c2d6:	eba0 0308 	sub.w	r3, r0, r8
 800c2da:	fa09 f303 	lsl.w	r3, r9, r3
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	9304      	str	r3, [sp, #16]
 800c2e2:	46a2      	mov	sl, r4
 800c2e4:	e7d2      	b.n	800c28c <_svfiprintf_r+0x9c>
 800c2e6:	9b03      	ldr	r3, [sp, #12]
 800c2e8:	1d19      	adds	r1, r3, #4
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	9103      	str	r1, [sp, #12]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	bfbb      	ittet	lt
 800c2f2:	425b      	neglt	r3, r3
 800c2f4:	f042 0202 	orrlt.w	r2, r2, #2
 800c2f8:	9307      	strge	r3, [sp, #28]
 800c2fa:	9307      	strlt	r3, [sp, #28]
 800c2fc:	bfb8      	it	lt
 800c2fe:	9204      	strlt	r2, [sp, #16]
 800c300:	7823      	ldrb	r3, [r4, #0]
 800c302:	2b2e      	cmp	r3, #46	; 0x2e
 800c304:	d10c      	bne.n	800c320 <_svfiprintf_r+0x130>
 800c306:	7863      	ldrb	r3, [r4, #1]
 800c308:	2b2a      	cmp	r3, #42	; 0x2a
 800c30a:	d134      	bne.n	800c376 <_svfiprintf_r+0x186>
 800c30c:	9b03      	ldr	r3, [sp, #12]
 800c30e:	1d1a      	adds	r2, r3, #4
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	9203      	str	r2, [sp, #12]
 800c314:	2b00      	cmp	r3, #0
 800c316:	bfb8      	it	lt
 800c318:	f04f 33ff 	movlt.w	r3, #4294967295
 800c31c:	3402      	adds	r4, #2
 800c31e:	9305      	str	r3, [sp, #20]
 800c320:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c3e8 <_svfiprintf_r+0x1f8>
 800c324:	7821      	ldrb	r1, [r4, #0]
 800c326:	2203      	movs	r2, #3
 800c328:	4650      	mov	r0, sl
 800c32a:	f7f3 ff59 	bl	80001e0 <memchr>
 800c32e:	b138      	cbz	r0, 800c340 <_svfiprintf_r+0x150>
 800c330:	9b04      	ldr	r3, [sp, #16]
 800c332:	eba0 000a 	sub.w	r0, r0, sl
 800c336:	2240      	movs	r2, #64	; 0x40
 800c338:	4082      	lsls	r2, r0
 800c33a:	4313      	orrs	r3, r2
 800c33c:	3401      	adds	r4, #1
 800c33e:	9304      	str	r3, [sp, #16]
 800c340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c344:	4825      	ldr	r0, [pc, #148]	; (800c3dc <_svfiprintf_r+0x1ec>)
 800c346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c34a:	2206      	movs	r2, #6
 800c34c:	f7f3 ff48 	bl	80001e0 <memchr>
 800c350:	2800      	cmp	r0, #0
 800c352:	d038      	beq.n	800c3c6 <_svfiprintf_r+0x1d6>
 800c354:	4b22      	ldr	r3, [pc, #136]	; (800c3e0 <_svfiprintf_r+0x1f0>)
 800c356:	bb1b      	cbnz	r3, 800c3a0 <_svfiprintf_r+0x1b0>
 800c358:	9b03      	ldr	r3, [sp, #12]
 800c35a:	3307      	adds	r3, #7
 800c35c:	f023 0307 	bic.w	r3, r3, #7
 800c360:	3308      	adds	r3, #8
 800c362:	9303      	str	r3, [sp, #12]
 800c364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c366:	4433      	add	r3, r6
 800c368:	9309      	str	r3, [sp, #36]	; 0x24
 800c36a:	e768      	b.n	800c23e <_svfiprintf_r+0x4e>
 800c36c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c370:	460c      	mov	r4, r1
 800c372:	2001      	movs	r0, #1
 800c374:	e7a6      	b.n	800c2c4 <_svfiprintf_r+0xd4>
 800c376:	2300      	movs	r3, #0
 800c378:	3401      	adds	r4, #1
 800c37a:	9305      	str	r3, [sp, #20]
 800c37c:	4619      	mov	r1, r3
 800c37e:	f04f 0c0a 	mov.w	ip, #10
 800c382:	4620      	mov	r0, r4
 800c384:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c388:	3a30      	subs	r2, #48	; 0x30
 800c38a:	2a09      	cmp	r2, #9
 800c38c:	d903      	bls.n	800c396 <_svfiprintf_r+0x1a6>
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d0c6      	beq.n	800c320 <_svfiprintf_r+0x130>
 800c392:	9105      	str	r1, [sp, #20]
 800c394:	e7c4      	b.n	800c320 <_svfiprintf_r+0x130>
 800c396:	fb0c 2101 	mla	r1, ip, r1, r2
 800c39a:	4604      	mov	r4, r0
 800c39c:	2301      	movs	r3, #1
 800c39e:	e7f0      	b.n	800c382 <_svfiprintf_r+0x192>
 800c3a0:	ab03      	add	r3, sp, #12
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	462a      	mov	r2, r5
 800c3a6:	4b0f      	ldr	r3, [pc, #60]	; (800c3e4 <_svfiprintf_r+0x1f4>)
 800c3a8:	a904      	add	r1, sp, #16
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	f3af 8000 	nop.w
 800c3b0:	1c42      	adds	r2, r0, #1
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	d1d6      	bne.n	800c364 <_svfiprintf_r+0x174>
 800c3b6:	89ab      	ldrh	r3, [r5, #12]
 800c3b8:	065b      	lsls	r3, r3, #25
 800c3ba:	f53f af2d 	bmi.w	800c218 <_svfiprintf_r+0x28>
 800c3be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3c0:	b01d      	add	sp, #116	; 0x74
 800c3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c6:	ab03      	add	r3, sp, #12
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	462a      	mov	r2, r5
 800c3cc:	4b05      	ldr	r3, [pc, #20]	; (800c3e4 <_svfiprintf_r+0x1f4>)
 800c3ce:	a904      	add	r1, sp, #16
 800c3d0:	4638      	mov	r0, r7
 800c3d2:	f000 f879 	bl	800c4c8 <_printf_i>
 800c3d6:	e7eb      	b.n	800c3b0 <_svfiprintf_r+0x1c0>
 800c3d8:	0800d910 	.word	0x0800d910
 800c3dc:	0800d91a 	.word	0x0800d91a
 800c3e0:	00000000 	.word	0x00000000
 800c3e4:	0800c13d 	.word	0x0800c13d
 800c3e8:	0800d916 	.word	0x0800d916

0800c3ec <_printf_common>:
 800c3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f0:	4616      	mov	r6, r2
 800c3f2:	4699      	mov	r9, r3
 800c3f4:	688a      	ldr	r2, [r1, #8]
 800c3f6:	690b      	ldr	r3, [r1, #16]
 800c3f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	bfb8      	it	lt
 800c400:	4613      	movlt	r3, r2
 800c402:	6033      	str	r3, [r6, #0]
 800c404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c408:	4607      	mov	r7, r0
 800c40a:	460c      	mov	r4, r1
 800c40c:	b10a      	cbz	r2, 800c412 <_printf_common+0x26>
 800c40e:	3301      	adds	r3, #1
 800c410:	6033      	str	r3, [r6, #0]
 800c412:	6823      	ldr	r3, [r4, #0]
 800c414:	0699      	lsls	r1, r3, #26
 800c416:	bf42      	ittt	mi
 800c418:	6833      	ldrmi	r3, [r6, #0]
 800c41a:	3302      	addmi	r3, #2
 800c41c:	6033      	strmi	r3, [r6, #0]
 800c41e:	6825      	ldr	r5, [r4, #0]
 800c420:	f015 0506 	ands.w	r5, r5, #6
 800c424:	d106      	bne.n	800c434 <_printf_common+0x48>
 800c426:	f104 0a19 	add.w	sl, r4, #25
 800c42a:	68e3      	ldr	r3, [r4, #12]
 800c42c:	6832      	ldr	r2, [r6, #0]
 800c42e:	1a9b      	subs	r3, r3, r2
 800c430:	42ab      	cmp	r3, r5
 800c432:	dc26      	bgt.n	800c482 <_printf_common+0x96>
 800c434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c438:	1e13      	subs	r3, r2, #0
 800c43a:	6822      	ldr	r2, [r4, #0]
 800c43c:	bf18      	it	ne
 800c43e:	2301      	movne	r3, #1
 800c440:	0692      	lsls	r2, r2, #26
 800c442:	d42b      	bmi.n	800c49c <_printf_common+0xb0>
 800c444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c448:	4649      	mov	r1, r9
 800c44a:	4638      	mov	r0, r7
 800c44c:	47c0      	blx	r8
 800c44e:	3001      	adds	r0, #1
 800c450:	d01e      	beq.n	800c490 <_printf_common+0xa4>
 800c452:	6823      	ldr	r3, [r4, #0]
 800c454:	6922      	ldr	r2, [r4, #16]
 800c456:	f003 0306 	and.w	r3, r3, #6
 800c45a:	2b04      	cmp	r3, #4
 800c45c:	bf02      	ittt	eq
 800c45e:	68e5      	ldreq	r5, [r4, #12]
 800c460:	6833      	ldreq	r3, [r6, #0]
 800c462:	1aed      	subeq	r5, r5, r3
 800c464:	68a3      	ldr	r3, [r4, #8]
 800c466:	bf0c      	ite	eq
 800c468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c46c:	2500      	movne	r5, #0
 800c46e:	4293      	cmp	r3, r2
 800c470:	bfc4      	itt	gt
 800c472:	1a9b      	subgt	r3, r3, r2
 800c474:	18ed      	addgt	r5, r5, r3
 800c476:	2600      	movs	r6, #0
 800c478:	341a      	adds	r4, #26
 800c47a:	42b5      	cmp	r5, r6
 800c47c:	d11a      	bne.n	800c4b4 <_printf_common+0xc8>
 800c47e:	2000      	movs	r0, #0
 800c480:	e008      	b.n	800c494 <_printf_common+0xa8>
 800c482:	2301      	movs	r3, #1
 800c484:	4652      	mov	r2, sl
 800c486:	4649      	mov	r1, r9
 800c488:	4638      	mov	r0, r7
 800c48a:	47c0      	blx	r8
 800c48c:	3001      	adds	r0, #1
 800c48e:	d103      	bne.n	800c498 <_printf_common+0xac>
 800c490:	f04f 30ff 	mov.w	r0, #4294967295
 800c494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c498:	3501      	adds	r5, #1
 800c49a:	e7c6      	b.n	800c42a <_printf_common+0x3e>
 800c49c:	18e1      	adds	r1, r4, r3
 800c49e:	1c5a      	adds	r2, r3, #1
 800c4a0:	2030      	movs	r0, #48	; 0x30
 800c4a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c4a6:	4422      	add	r2, r4
 800c4a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c4ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c4b0:	3302      	adds	r3, #2
 800c4b2:	e7c7      	b.n	800c444 <_printf_common+0x58>
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	4622      	mov	r2, r4
 800c4b8:	4649      	mov	r1, r9
 800c4ba:	4638      	mov	r0, r7
 800c4bc:	47c0      	blx	r8
 800c4be:	3001      	adds	r0, #1
 800c4c0:	d0e6      	beq.n	800c490 <_printf_common+0xa4>
 800c4c2:	3601      	adds	r6, #1
 800c4c4:	e7d9      	b.n	800c47a <_printf_common+0x8e>
	...

0800c4c8 <_printf_i>:
 800c4c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4cc:	7e0f      	ldrb	r7, [r1, #24]
 800c4ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c4d0:	2f78      	cmp	r7, #120	; 0x78
 800c4d2:	4691      	mov	r9, r2
 800c4d4:	4680      	mov	r8, r0
 800c4d6:	460c      	mov	r4, r1
 800c4d8:	469a      	mov	sl, r3
 800c4da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c4de:	d807      	bhi.n	800c4f0 <_printf_i+0x28>
 800c4e0:	2f62      	cmp	r7, #98	; 0x62
 800c4e2:	d80a      	bhi.n	800c4fa <_printf_i+0x32>
 800c4e4:	2f00      	cmp	r7, #0
 800c4e6:	f000 80d4 	beq.w	800c692 <_printf_i+0x1ca>
 800c4ea:	2f58      	cmp	r7, #88	; 0x58
 800c4ec:	f000 80c0 	beq.w	800c670 <_printf_i+0x1a8>
 800c4f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c4f8:	e03a      	b.n	800c570 <_printf_i+0xa8>
 800c4fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c4fe:	2b15      	cmp	r3, #21
 800c500:	d8f6      	bhi.n	800c4f0 <_printf_i+0x28>
 800c502:	a101      	add	r1, pc, #4	; (adr r1, 800c508 <_printf_i+0x40>)
 800c504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c508:	0800c561 	.word	0x0800c561
 800c50c:	0800c575 	.word	0x0800c575
 800c510:	0800c4f1 	.word	0x0800c4f1
 800c514:	0800c4f1 	.word	0x0800c4f1
 800c518:	0800c4f1 	.word	0x0800c4f1
 800c51c:	0800c4f1 	.word	0x0800c4f1
 800c520:	0800c575 	.word	0x0800c575
 800c524:	0800c4f1 	.word	0x0800c4f1
 800c528:	0800c4f1 	.word	0x0800c4f1
 800c52c:	0800c4f1 	.word	0x0800c4f1
 800c530:	0800c4f1 	.word	0x0800c4f1
 800c534:	0800c679 	.word	0x0800c679
 800c538:	0800c5a1 	.word	0x0800c5a1
 800c53c:	0800c633 	.word	0x0800c633
 800c540:	0800c4f1 	.word	0x0800c4f1
 800c544:	0800c4f1 	.word	0x0800c4f1
 800c548:	0800c69b 	.word	0x0800c69b
 800c54c:	0800c4f1 	.word	0x0800c4f1
 800c550:	0800c5a1 	.word	0x0800c5a1
 800c554:	0800c4f1 	.word	0x0800c4f1
 800c558:	0800c4f1 	.word	0x0800c4f1
 800c55c:	0800c63b 	.word	0x0800c63b
 800c560:	682b      	ldr	r3, [r5, #0]
 800c562:	1d1a      	adds	r2, r3, #4
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	602a      	str	r2, [r5, #0]
 800c568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c56c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c570:	2301      	movs	r3, #1
 800c572:	e09f      	b.n	800c6b4 <_printf_i+0x1ec>
 800c574:	6820      	ldr	r0, [r4, #0]
 800c576:	682b      	ldr	r3, [r5, #0]
 800c578:	0607      	lsls	r7, r0, #24
 800c57a:	f103 0104 	add.w	r1, r3, #4
 800c57e:	6029      	str	r1, [r5, #0]
 800c580:	d501      	bpl.n	800c586 <_printf_i+0xbe>
 800c582:	681e      	ldr	r6, [r3, #0]
 800c584:	e003      	b.n	800c58e <_printf_i+0xc6>
 800c586:	0646      	lsls	r6, r0, #25
 800c588:	d5fb      	bpl.n	800c582 <_printf_i+0xba>
 800c58a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c58e:	2e00      	cmp	r6, #0
 800c590:	da03      	bge.n	800c59a <_printf_i+0xd2>
 800c592:	232d      	movs	r3, #45	; 0x2d
 800c594:	4276      	negs	r6, r6
 800c596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c59a:	485a      	ldr	r0, [pc, #360]	; (800c704 <_printf_i+0x23c>)
 800c59c:	230a      	movs	r3, #10
 800c59e:	e012      	b.n	800c5c6 <_printf_i+0xfe>
 800c5a0:	682b      	ldr	r3, [r5, #0]
 800c5a2:	6820      	ldr	r0, [r4, #0]
 800c5a4:	1d19      	adds	r1, r3, #4
 800c5a6:	6029      	str	r1, [r5, #0]
 800c5a8:	0605      	lsls	r5, r0, #24
 800c5aa:	d501      	bpl.n	800c5b0 <_printf_i+0xe8>
 800c5ac:	681e      	ldr	r6, [r3, #0]
 800c5ae:	e002      	b.n	800c5b6 <_printf_i+0xee>
 800c5b0:	0641      	lsls	r1, r0, #25
 800c5b2:	d5fb      	bpl.n	800c5ac <_printf_i+0xe4>
 800c5b4:	881e      	ldrh	r6, [r3, #0]
 800c5b6:	4853      	ldr	r0, [pc, #332]	; (800c704 <_printf_i+0x23c>)
 800c5b8:	2f6f      	cmp	r7, #111	; 0x6f
 800c5ba:	bf0c      	ite	eq
 800c5bc:	2308      	moveq	r3, #8
 800c5be:	230a      	movne	r3, #10
 800c5c0:	2100      	movs	r1, #0
 800c5c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c5c6:	6865      	ldr	r5, [r4, #4]
 800c5c8:	60a5      	str	r5, [r4, #8]
 800c5ca:	2d00      	cmp	r5, #0
 800c5cc:	bfa2      	ittt	ge
 800c5ce:	6821      	ldrge	r1, [r4, #0]
 800c5d0:	f021 0104 	bicge.w	r1, r1, #4
 800c5d4:	6021      	strge	r1, [r4, #0]
 800c5d6:	b90e      	cbnz	r6, 800c5dc <_printf_i+0x114>
 800c5d8:	2d00      	cmp	r5, #0
 800c5da:	d04b      	beq.n	800c674 <_printf_i+0x1ac>
 800c5dc:	4615      	mov	r5, r2
 800c5de:	fbb6 f1f3 	udiv	r1, r6, r3
 800c5e2:	fb03 6711 	mls	r7, r3, r1, r6
 800c5e6:	5dc7      	ldrb	r7, [r0, r7]
 800c5e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c5ec:	4637      	mov	r7, r6
 800c5ee:	42bb      	cmp	r3, r7
 800c5f0:	460e      	mov	r6, r1
 800c5f2:	d9f4      	bls.n	800c5de <_printf_i+0x116>
 800c5f4:	2b08      	cmp	r3, #8
 800c5f6:	d10b      	bne.n	800c610 <_printf_i+0x148>
 800c5f8:	6823      	ldr	r3, [r4, #0]
 800c5fa:	07de      	lsls	r6, r3, #31
 800c5fc:	d508      	bpl.n	800c610 <_printf_i+0x148>
 800c5fe:	6923      	ldr	r3, [r4, #16]
 800c600:	6861      	ldr	r1, [r4, #4]
 800c602:	4299      	cmp	r1, r3
 800c604:	bfde      	ittt	le
 800c606:	2330      	movle	r3, #48	; 0x30
 800c608:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c60c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c610:	1b52      	subs	r2, r2, r5
 800c612:	6122      	str	r2, [r4, #16]
 800c614:	f8cd a000 	str.w	sl, [sp]
 800c618:	464b      	mov	r3, r9
 800c61a:	aa03      	add	r2, sp, #12
 800c61c:	4621      	mov	r1, r4
 800c61e:	4640      	mov	r0, r8
 800c620:	f7ff fee4 	bl	800c3ec <_printf_common>
 800c624:	3001      	adds	r0, #1
 800c626:	d14a      	bne.n	800c6be <_printf_i+0x1f6>
 800c628:	f04f 30ff 	mov.w	r0, #4294967295
 800c62c:	b004      	add	sp, #16
 800c62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c632:	6823      	ldr	r3, [r4, #0]
 800c634:	f043 0320 	orr.w	r3, r3, #32
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	4833      	ldr	r0, [pc, #204]	; (800c708 <_printf_i+0x240>)
 800c63c:	2778      	movs	r7, #120	; 0x78
 800c63e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c642:	6823      	ldr	r3, [r4, #0]
 800c644:	6829      	ldr	r1, [r5, #0]
 800c646:	061f      	lsls	r7, r3, #24
 800c648:	f851 6b04 	ldr.w	r6, [r1], #4
 800c64c:	d402      	bmi.n	800c654 <_printf_i+0x18c>
 800c64e:	065f      	lsls	r7, r3, #25
 800c650:	bf48      	it	mi
 800c652:	b2b6      	uxthmi	r6, r6
 800c654:	07df      	lsls	r7, r3, #31
 800c656:	bf48      	it	mi
 800c658:	f043 0320 	orrmi.w	r3, r3, #32
 800c65c:	6029      	str	r1, [r5, #0]
 800c65e:	bf48      	it	mi
 800c660:	6023      	strmi	r3, [r4, #0]
 800c662:	b91e      	cbnz	r6, 800c66c <_printf_i+0x1a4>
 800c664:	6823      	ldr	r3, [r4, #0]
 800c666:	f023 0320 	bic.w	r3, r3, #32
 800c66a:	6023      	str	r3, [r4, #0]
 800c66c:	2310      	movs	r3, #16
 800c66e:	e7a7      	b.n	800c5c0 <_printf_i+0xf8>
 800c670:	4824      	ldr	r0, [pc, #144]	; (800c704 <_printf_i+0x23c>)
 800c672:	e7e4      	b.n	800c63e <_printf_i+0x176>
 800c674:	4615      	mov	r5, r2
 800c676:	e7bd      	b.n	800c5f4 <_printf_i+0x12c>
 800c678:	682b      	ldr	r3, [r5, #0]
 800c67a:	6826      	ldr	r6, [r4, #0]
 800c67c:	6961      	ldr	r1, [r4, #20]
 800c67e:	1d18      	adds	r0, r3, #4
 800c680:	6028      	str	r0, [r5, #0]
 800c682:	0635      	lsls	r5, r6, #24
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	d501      	bpl.n	800c68c <_printf_i+0x1c4>
 800c688:	6019      	str	r1, [r3, #0]
 800c68a:	e002      	b.n	800c692 <_printf_i+0x1ca>
 800c68c:	0670      	lsls	r0, r6, #25
 800c68e:	d5fb      	bpl.n	800c688 <_printf_i+0x1c0>
 800c690:	8019      	strh	r1, [r3, #0]
 800c692:	2300      	movs	r3, #0
 800c694:	6123      	str	r3, [r4, #16]
 800c696:	4615      	mov	r5, r2
 800c698:	e7bc      	b.n	800c614 <_printf_i+0x14c>
 800c69a:	682b      	ldr	r3, [r5, #0]
 800c69c:	1d1a      	adds	r2, r3, #4
 800c69e:	602a      	str	r2, [r5, #0]
 800c6a0:	681d      	ldr	r5, [r3, #0]
 800c6a2:	6862      	ldr	r2, [r4, #4]
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	f7f3 fd9a 	bl	80001e0 <memchr>
 800c6ac:	b108      	cbz	r0, 800c6b2 <_printf_i+0x1ea>
 800c6ae:	1b40      	subs	r0, r0, r5
 800c6b0:	6060      	str	r0, [r4, #4]
 800c6b2:	6863      	ldr	r3, [r4, #4]
 800c6b4:	6123      	str	r3, [r4, #16]
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6bc:	e7aa      	b.n	800c614 <_printf_i+0x14c>
 800c6be:	6923      	ldr	r3, [r4, #16]
 800c6c0:	462a      	mov	r2, r5
 800c6c2:	4649      	mov	r1, r9
 800c6c4:	4640      	mov	r0, r8
 800c6c6:	47d0      	blx	sl
 800c6c8:	3001      	adds	r0, #1
 800c6ca:	d0ad      	beq.n	800c628 <_printf_i+0x160>
 800c6cc:	6823      	ldr	r3, [r4, #0]
 800c6ce:	079b      	lsls	r3, r3, #30
 800c6d0:	d413      	bmi.n	800c6fa <_printf_i+0x232>
 800c6d2:	68e0      	ldr	r0, [r4, #12]
 800c6d4:	9b03      	ldr	r3, [sp, #12]
 800c6d6:	4298      	cmp	r0, r3
 800c6d8:	bfb8      	it	lt
 800c6da:	4618      	movlt	r0, r3
 800c6dc:	e7a6      	b.n	800c62c <_printf_i+0x164>
 800c6de:	2301      	movs	r3, #1
 800c6e0:	4632      	mov	r2, r6
 800c6e2:	4649      	mov	r1, r9
 800c6e4:	4640      	mov	r0, r8
 800c6e6:	47d0      	blx	sl
 800c6e8:	3001      	adds	r0, #1
 800c6ea:	d09d      	beq.n	800c628 <_printf_i+0x160>
 800c6ec:	3501      	adds	r5, #1
 800c6ee:	68e3      	ldr	r3, [r4, #12]
 800c6f0:	9903      	ldr	r1, [sp, #12]
 800c6f2:	1a5b      	subs	r3, r3, r1
 800c6f4:	42ab      	cmp	r3, r5
 800c6f6:	dcf2      	bgt.n	800c6de <_printf_i+0x216>
 800c6f8:	e7eb      	b.n	800c6d2 <_printf_i+0x20a>
 800c6fa:	2500      	movs	r5, #0
 800c6fc:	f104 0619 	add.w	r6, r4, #25
 800c700:	e7f5      	b.n	800c6ee <_printf_i+0x226>
 800c702:	bf00      	nop
 800c704:	0800d921 	.word	0x0800d921
 800c708:	0800d932 	.word	0x0800d932

0800c70c <memmove>:
 800c70c:	4288      	cmp	r0, r1
 800c70e:	b510      	push	{r4, lr}
 800c710:	eb01 0402 	add.w	r4, r1, r2
 800c714:	d902      	bls.n	800c71c <memmove+0x10>
 800c716:	4284      	cmp	r4, r0
 800c718:	4623      	mov	r3, r4
 800c71a:	d807      	bhi.n	800c72c <memmove+0x20>
 800c71c:	1e43      	subs	r3, r0, #1
 800c71e:	42a1      	cmp	r1, r4
 800c720:	d008      	beq.n	800c734 <memmove+0x28>
 800c722:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c72a:	e7f8      	b.n	800c71e <memmove+0x12>
 800c72c:	4402      	add	r2, r0
 800c72e:	4601      	mov	r1, r0
 800c730:	428a      	cmp	r2, r1
 800c732:	d100      	bne.n	800c736 <memmove+0x2a>
 800c734:	bd10      	pop	{r4, pc}
 800c736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c73a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c73e:	e7f7      	b.n	800c730 <memmove+0x24>

0800c740 <_sbrk_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	4d06      	ldr	r5, [pc, #24]	; (800c75c <_sbrk_r+0x1c>)
 800c744:	2300      	movs	r3, #0
 800c746:	4604      	mov	r4, r0
 800c748:	4608      	mov	r0, r1
 800c74a:	602b      	str	r3, [r5, #0]
 800c74c:	f7f5 fb4e 	bl	8001dec <_sbrk>
 800c750:	1c43      	adds	r3, r0, #1
 800c752:	d102      	bne.n	800c75a <_sbrk_r+0x1a>
 800c754:	682b      	ldr	r3, [r5, #0]
 800c756:	b103      	cbz	r3, 800c75a <_sbrk_r+0x1a>
 800c758:	6023      	str	r3, [r4, #0]
 800c75a:	bd38      	pop	{r3, r4, r5, pc}
 800c75c:	20003120 	.word	0x20003120

0800c760 <memcpy>:
 800c760:	440a      	add	r2, r1
 800c762:	4291      	cmp	r1, r2
 800c764:	f100 33ff 	add.w	r3, r0, #4294967295
 800c768:	d100      	bne.n	800c76c <memcpy+0xc>
 800c76a:	4770      	bx	lr
 800c76c:	b510      	push	{r4, lr}
 800c76e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c772:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c776:	4291      	cmp	r1, r2
 800c778:	d1f9      	bne.n	800c76e <memcpy+0xe>
 800c77a:	bd10      	pop	{r4, pc}

0800c77c <_realloc_r>:
 800c77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c780:	4680      	mov	r8, r0
 800c782:	4614      	mov	r4, r2
 800c784:	460e      	mov	r6, r1
 800c786:	b921      	cbnz	r1, 800c792 <_realloc_r+0x16>
 800c788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c78c:	4611      	mov	r1, r2
 800c78e:	f7ff bc49 	b.w	800c024 <_malloc_r>
 800c792:	b92a      	cbnz	r2, 800c7a0 <_realloc_r+0x24>
 800c794:	f7ff fbda 	bl	800bf4c <_free_r>
 800c798:	4625      	mov	r5, r4
 800c79a:	4628      	mov	r0, r5
 800c79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7a0:	f000 f81b 	bl	800c7da <_malloc_usable_size_r>
 800c7a4:	4284      	cmp	r4, r0
 800c7a6:	4607      	mov	r7, r0
 800c7a8:	d802      	bhi.n	800c7b0 <_realloc_r+0x34>
 800c7aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c7ae:	d812      	bhi.n	800c7d6 <_realloc_r+0x5a>
 800c7b0:	4621      	mov	r1, r4
 800c7b2:	4640      	mov	r0, r8
 800c7b4:	f7ff fc36 	bl	800c024 <_malloc_r>
 800c7b8:	4605      	mov	r5, r0
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d0ed      	beq.n	800c79a <_realloc_r+0x1e>
 800c7be:	42bc      	cmp	r4, r7
 800c7c0:	4622      	mov	r2, r4
 800c7c2:	4631      	mov	r1, r6
 800c7c4:	bf28      	it	cs
 800c7c6:	463a      	movcs	r2, r7
 800c7c8:	f7ff ffca 	bl	800c760 <memcpy>
 800c7cc:	4631      	mov	r1, r6
 800c7ce:	4640      	mov	r0, r8
 800c7d0:	f7ff fbbc 	bl	800bf4c <_free_r>
 800c7d4:	e7e1      	b.n	800c79a <_realloc_r+0x1e>
 800c7d6:	4635      	mov	r5, r6
 800c7d8:	e7df      	b.n	800c79a <_realloc_r+0x1e>

0800c7da <_malloc_usable_size_r>:
 800c7da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7de:	1f18      	subs	r0, r3, #4
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	bfbc      	itt	lt
 800c7e4:	580b      	ldrlt	r3, [r1, r0]
 800c7e6:	18c0      	addlt	r0, r0, r3
 800c7e8:	4770      	bx	lr
 800c7ea:	0000      	movs	r0, r0
 800c7ec:	0000      	movs	r0, r0
	...

0800c7f0 <sin>:
 800c7f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7f2:	ec53 2b10 	vmov	r2, r3, d0
 800c7f6:	4828      	ldr	r0, [pc, #160]	; (800c898 <sin+0xa8>)
 800c7f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c7fc:	4281      	cmp	r1, r0
 800c7fe:	dc07      	bgt.n	800c810 <sin+0x20>
 800c800:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c890 <sin+0xa0>
 800c804:	2000      	movs	r0, #0
 800c806:	b005      	add	sp, #20
 800c808:	f85d eb04 	ldr.w	lr, [sp], #4
 800c80c:	f000 b910 	b.w	800ca30 <__kernel_sin>
 800c810:	4822      	ldr	r0, [pc, #136]	; (800c89c <sin+0xac>)
 800c812:	4281      	cmp	r1, r0
 800c814:	dd09      	ble.n	800c82a <sin+0x3a>
 800c816:	ee10 0a10 	vmov	r0, s0
 800c81a:	4619      	mov	r1, r3
 800c81c:	f7f3 fd34 	bl	8000288 <__aeabi_dsub>
 800c820:	ec41 0b10 	vmov	d0, r0, r1
 800c824:	b005      	add	sp, #20
 800c826:	f85d fb04 	ldr.w	pc, [sp], #4
 800c82a:	4668      	mov	r0, sp
 800c82c:	f000 f9c0 	bl	800cbb0 <__ieee754_rem_pio2>
 800c830:	f000 0003 	and.w	r0, r0, #3
 800c834:	2801      	cmp	r0, #1
 800c836:	d00c      	beq.n	800c852 <sin+0x62>
 800c838:	2802      	cmp	r0, #2
 800c83a:	d011      	beq.n	800c860 <sin+0x70>
 800c83c:	b9f0      	cbnz	r0, 800c87c <sin+0x8c>
 800c83e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c842:	ed9d 0b00 	vldr	d0, [sp]
 800c846:	2001      	movs	r0, #1
 800c848:	f000 f8f2 	bl	800ca30 <__kernel_sin>
 800c84c:	ec51 0b10 	vmov	r0, r1, d0
 800c850:	e7e6      	b.n	800c820 <sin+0x30>
 800c852:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c856:	ed9d 0b00 	vldr	d0, [sp]
 800c85a:	f000 f821 	bl	800c8a0 <__kernel_cos>
 800c85e:	e7f5      	b.n	800c84c <sin+0x5c>
 800c860:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c864:	ed9d 0b00 	vldr	d0, [sp]
 800c868:	2001      	movs	r0, #1
 800c86a:	f000 f8e1 	bl	800ca30 <__kernel_sin>
 800c86e:	ec53 2b10 	vmov	r2, r3, d0
 800c872:	ee10 0a10 	vmov	r0, s0
 800c876:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c87a:	e7d1      	b.n	800c820 <sin+0x30>
 800c87c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c880:	ed9d 0b00 	vldr	d0, [sp]
 800c884:	f000 f80c 	bl	800c8a0 <__kernel_cos>
 800c888:	e7f1      	b.n	800c86e <sin+0x7e>
 800c88a:	bf00      	nop
 800c88c:	f3af 8000 	nop.w
	...
 800c898:	3fe921fb 	.word	0x3fe921fb
 800c89c:	7fefffff 	.word	0x7fefffff

0800c8a0 <__kernel_cos>:
 800c8a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a4:	ec57 6b10 	vmov	r6, r7, d0
 800c8a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c8ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c8b0:	ed8d 1b00 	vstr	d1, [sp]
 800c8b4:	da07      	bge.n	800c8c6 <__kernel_cos+0x26>
 800c8b6:	ee10 0a10 	vmov	r0, s0
 800c8ba:	4639      	mov	r1, r7
 800c8bc:	f7f4 f936 	bl	8000b2c <__aeabi_d2iz>
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	f000 8088 	beq.w	800c9d6 <__kernel_cos+0x136>
 800c8c6:	4632      	mov	r2, r6
 800c8c8:	463b      	mov	r3, r7
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	4639      	mov	r1, r7
 800c8ce:	f7f3 fe93 	bl	80005f8 <__aeabi_dmul>
 800c8d2:	4b51      	ldr	r3, [pc, #324]	; (800ca18 <__kernel_cos+0x178>)
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	460d      	mov	r5, r1
 800c8da:	f7f3 fe8d 	bl	80005f8 <__aeabi_dmul>
 800c8de:	a340      	add	r3, pc, #256	; (adr r3, 800c9e0 <__kernel_cos+0x140>)
 800c8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e4:	4682      	mov	sl, r0
 800c8e6:	468b      	mov	fp, r1
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	f7f3 fe84 	bl	80005f8 <__aeabi_dmul>
 800c8f0:	a33d      	add	r3, pc, #244	; (adr r3, 800c9e8 <__kernel_cos+0x148>)
 800c8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f6:	f7f3 fcc9 	bl	800028c <__adddf3>
 800c8fa:	4622      	mov	r2, r4
 800c8fc:	462b      	mov	r3, r5
 800c8fe:	f7f3 fe7b 	bl	80005f8 <__aeabi_dmul>
 800c902:	a33b      	add	r3, pc, #236	; (adr r3, 800c9f0 <__kernel_cos+0x150>)
 800c904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c908:	f7f3 fcbe 	bl	8000288 <__aeabi_dsub>
 800c90c:	4622      	mov	r2, r4
 800c90e:	462b      	mov	r3, r5
 800c910:	f7f3 fe72 	bl	80005f8 <__aeabi_dmul>
 800c914:	a338      	add	r3, pc, #224	; (adr r3, 800c9f8 <__kernel_cos+0x158>)
 800c916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91a:	f7f3 fcb7 	bl	800028c <__adddf3>
 800c91e:	4622      	mov	r2, r4
 800c920:	462b      	mov	r3, r5
 800c922:	f7f3 fe69 	bl	80005f8 <__aeabi_dmul>
 800c926:	a336      	add	r3, pc, #216	; (adr r3, 800ca00 <__kernel_cos+0x160>)
 800c928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92c:	f7f3 fcac 	bl	8000288 <__aeabi_dsub>
 800c930:	4622      	mov	r2, r4
 800c932:	462b      	mov	r3, r5
 800c934:	f7f3 fe60 	bl	80005f8 <__aeabi_dmul>
 800c938:	a333      	add	r3, pc, #204	; (adr r3, 800ca08 <__kernel_cos+0x168>)
 800c93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93e:	f7f3 fca5 	bl	800028c <__adddf3>
 800c942:	4622      	mov	r2, r4
 800c944:	462b      	mov	r3, r5
 800c946:	f7f3 fe57 	bl	80005f8 <__aeabi_dmul>
 800c94a:	4622      	mov	r2, r4
 800c94c:	462b      	mov	r3, r5
 800c94e:	f7f3 fe53 	bl	80005f8 <__aeabi_dmul>
 800c952:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c956:	4604      	mov	r4, r0
 800c958:	460d      	mov	r5, r1
 800c95a:	4630      	mov	r0, r6
 800c95c:	4639      	mov	r1, r7
 800c95e:	f7f3 fe4b 	bl	80005f8 <__aeabi_dmul>
 800c962:	460b      	mov	r3, r1
 800c964:	4602      	mov	r2, r0
 800c966:	4629      	mov	r1, r5
 800c968:	4620      	mov	r0, r4
 800c96a:	f7f3 fc8d 	bl	8000288 <__aeabi_dsub>
 800c96e:	4b2b      	ldr	r3, [pc, #172]	; (800ca1c <__kernel_cos+0x17c>)
 800c970:	4598      	cmp	r8, r3
 800c972:	4606      	mov	r6, r0
 800c974:	460f      	mov	r7, r1
 800c976:	dc10      	bgt.n	800c99a <__kernel_cos+0xfa>
 800c978:	4602      	mov	r2, r0
 800c97a:	460b      	mov	r3, r1
 800c97c:	4650      	mov	r0, sl
 800c97e:	4659      	mov	r1, fp
 800c980:	f7f3 fc82 	bl	8000288 <__aeabi_dsub>
 800c984:	460b      	mov	r3, r1
 800c986:	4926      	ldr	r1, [pc, #152]	; (800ca20 <__kernel_cos+0x180>)
 800c988:	4602      	mov	r2, r0
 800c98a:	2000      	movs	r0, #0
 800c98c:	f7f3 fc7c 	bl	8000288 <__aeabi_dsub>
 800c990:	ec41 0b10 	vmov	d0, r0, r1
 800c994:	b003      	add	sp, #12
 800c996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c99a:	4b22      	ldr	r3, [pc, #136]	; (800ca24 <__kernel_cos+0x184>)
 800c99c:	4920      	ldr	r1, [pc, #128]	; (800ca20 <__kernel_cos+0x180>)
 800c99e:	4598      	cmp	r8, r3
 800c9a0:	bfcc      	ite	gt
 800c9a2:	4d21      	ldrgt	r5, [pc, #132]	; (800ca28 <__kernel_cos+0x188>)
 800c9a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c9a8:	2400      	movs	r4, #0
 800c9aa:	4622      	mov	r2, r4
 800c9ac:	462b      	mov	r3, r5
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	f7f3 fc6a 	bl	8000288 <__aeabi_dsub>
 800c9b4:	4622      	mov	r2, r4
 800c9b6:	4680      	mov	r8, r0
 800c9b8:	4689      	mov	r9, r1
 800c9ba:	462b      	mov	r3, r5
 800c9bc:	4650      	mov	r0, sl
 800c9be:	4659      	mov	r1, fp
 800c9c0:	f7f3 fc62 	bl	8000288 <__aeabi_dsub>
 800c9c4:	4632      	mov	r2, r6
 800c9c6:	463b      	mov	r3, r7
 800c9c8:	f7f3 fc5e 	bl	8000288 <__aeabi_dsub>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	4640      	mov	r0, r8
 800c9d2:	4649      	mov	r1, r9
 800c9d4:	e7da      	b.n	800c98c <__kernel_cos+0xec>
 800c9d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ca10 <__kernel_cos+0x170>
 800c9da:	e7db      	b.n	800c994 <__kernel_cos+0xf4>
 800c9dc:	f3af 8000 	nop.w
 800c9e0:	be8838d4 	.word	0xbe8838d4
 800c9e4:	bda8fae9 	.word	0xbda8fae9
 800c9e8:	bdb4b1c4 	.word	0xbdb4b1c4
 800c9ec:	3e21ee9e 	.word	0x3e21ee9e
 800c9f0:	809c52ad 	.word	0x809c52ad
 800c9f4:	3e927e4f 	.word	0x3e927e4f
 800c9f8:	19cb1590 	.word	0x19cb1590
 800c9fc:	3efa01a0 	.word	0x3efa01a0
 800ca00:	16c15177 	.word	0x16c15177
 800ca04:	3f56c16c 	.word	0x3f56c16c
 800ca08:	5555554c 	.word	0x5555554c
 800ca0c:	3fa55555 	.word	0x3fa55555
 800ca10:	00000000 	.word	0x00000000
 800ca14:	3ff00000 	.word	0x3ff00000
 800ca18:	3fe00000 	.word	0x3fe00000
 800ca1c:	3fd33332 	.word	0x3fd33332
 800ca20:	3ff00000 	.word	0x3ff00000
 800ca24:	3fe90000 	.word	0x3fe90000
 800ca28:	3fd20000 	.word	0x3fd20000
 800ca2c:	00000000 	.word	0x00000000

0800ca30 <__kernel_sin>:
 800ca30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca34:	ed2d 8b04 	vpush	{d8-d9}
 800ca38:	eeb0 8a41 	vmov.f32	s16, s2
 800ca3c:	eef0 8a61 	vmov.f32	s17, s3
 800ca40:	ec55 4b10 	vmov	r4, r5, d0
 800ca44:	b083      	sub	sp, #12
 800ca46:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ca4a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ca4e:	9001      	str	r0, [sp, #4]
 800ca50:	da06      	bge.n	800ca60 <__kernel_sin+0x30>
 800ca52:	ee10 0a10 	vmov	r0, s0
 800ca56:	4629      	mov	r1, r5
 800ca58:	f7f4 f868 	bl	8000b2c <__aeabi_d2iz>
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	d051      	beq.n	800cb04 <__kernel_sin+0xd4>
 800ca60:	4622      	mov	r2, r4
 800ca62:	462b      	mov	r3, r5
 800ca64:	4620      	mov	r0, r4
 800ca66:	4629      	mov	r1, r5
 800ca68:	f7f3 fdc6 	bl	80005f8 <__aeabi_dmul>
 800ca6c:	4682      	mov	sl, r0
 800ca6e:	468b      	mov	fp, r1
 800ca70:	4602      	mov	r2, r0
 800ca72:	460b      	mov	r3, r1
 800ca74:	4620      	mov	r0, r4
 800ca76:	4629      	mov	r1, r5
 800ca78:	f7f3 fdbe 	bl	80005f8 <__aeabi_dmul>
 800ca7c:	a341      	add	r3, pc, #260	; (adr r3, 800cb84 <__kernel_sin+0x154>)
 800ca7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca82:	4680      	mov	r8, r0
 800ca84:	4689      	mov	r9, r1
 800ca86:	4650      	mov	r0, sl
 800ca88:	4659      	mov	r1, fp
 800ca8a:	f7f3 fdb5 	bl	80005f8 <__aeabi_dmul>
 800ca8e:	a33f      	add	r3, pc, #252	; (adr r3, 800cb8c <__kernel_sin+0x15c>)
 800ca90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca94:	f7f3 fbf8 	bl	8000288 <__aeabi_dsub>
 800ca98:	4652      	mov	r2, sl
 800ca9a:	465b      	mov	r3, fp
 800ca9c:	f7f3 fdac 	bl	80005f8 <__aeabi_dmul>
 800caa0:	a33c      	add	r3, pc, #240	; (adr r3, 800cb94 <__kernel_sin+0x164>)
 800caa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa6:	f7f3 fbf1 	bl	800028c <__adddf3>
 800caaa:	4652      	mov	r2, sl
 800caac:	465b      	mov	r3, fp
 800caae:	f7f3 fda3 	bl	80005f8 <__aeabi_dmul>
 800cab2:	a33a      	add	r3, pc, #232	; (adr r3, 800cb9c <__kernel_sin+0x16c>)
 800cab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab8:	f7f3 fbe6 	bl	8000288 <__aeabi_dsub>
 800cabc:	4652      	mov	r2, sl
 800cabe:	465b      	mov	r3, fp
 800cac0:	f7f3 fd9a 	bl	80005f8 <__aeabi_dmul>
 800cac4:	a337      	add	r3, pc, #220	; (adr r3, 800cba4 <__kernel_sin+0x174>)
 800cac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caca:	f7f3 fbdf 	bl	800028c <__adddf3>
 800cace:	9b01      	ldr	r3, [sp, #4]
 800cad0:	4606      	mov	r6, r0
 800cad2:	460f      	mov	r7, r1
 800cad4:	b9eb      	cbnz	r3, 800cb12 <__kernel_sin+0xe2>
 800cad6:	4602      	mov	r2, r0
 800cad8:	460b      	mov	r3, r1
 800cada:	4650      	mov	r0, sl
 800cadc:	4659      	mov	r1, fp
 800cade:	f7f3 fd8b 	bl	80005f8 <__aeabi_dmul>
 800cae2:	a325      	add	r3, pc, #148	; (adr r3, 800cb78 <__kernel_sin+0x148>)
 800cae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae8:	f7f3 fbce 	bl	8000288 <__aeabi_dsub>
 800caec:	4642      	mov	r2, r8
 800caee:	464b      	mov	r3, r9
 800caf0:	f7f3 fd82 	bl	80005f8 <__aeabi_dmul>
 800caf4:	4602      	mov	r2, r0
 800caf6:	460b      	mov	r3, r1
 800caf8:	4620      	mov	r0, r4
 800cafa:	4629      	mov	r1, r5
 800cafc:	f7f3 fbc6 	bl	800028c <__adddf3>
 800cb00:	4604      	mov	r4, r0
 800cb02:	460d      	mov	r5, r1
 800cb04:	ec45 4b10 	vmov	d0, r4, r5
 800cb08:	b003      	add	sp, #12
 800cb0a:	ecbd 8b04 	vpop	{d8-d9}
 800cb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb12:	4b1b      	ldr	r3, [pc, #108]	; (800cb80 <__kernel_sin+0x150>)
 800cb14:	ec51 0b18 	vmov	r0, r1, d8
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f7f3 fd6d 	bl	80005f8 <__aeabi_dmul>
 800cb1e:	4632      	mov	r2, r6
 800cb20:	ec41 0b19 	vmov	d9, r0, r1
 800cb24:	463b      	mov	r3, r7
 800cb26:	4640      	mov	r0, r8
 800cb28:	4649      	mov	r1, r9
 800cb2a:	f7f3 fd65 	bl	80005f8 <__aeabi_dmul>
 800cb2e:	4602      	mov	r2, r0
 800cb30:	460b      	mov	r3, r1
 800cb32:	ec51 0b19 	vmov	r0, r1, d9
 800cb36:	f7f3 fba7 	bl	8000288 <__aeabi_dsub>
 800cb3a:	4652      	mov	r2, sl
 800cb3c:	465b      	mov	r3, fp
 800cb3e:	f7f3 fd5b 	bl	80005f8 <__aeabi_dmul>
 800cb42:	ec53 2b18 	vmov	r2, r3, d8
 800cb46:	f7f3 fb9f 	bl	8000288 <__aeabi_dsub>
 800cb4a:	a30b      	add	r3, pc, #44	; (adr r3, 800cb78 <__kernel_sin+0x148>)
 800cb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb50:	4606      	mov	r6, r0
 800cb52:	460f      	mov	r7, r1
 800cb54:	4640      	mov	r0, r8
 800cb56:	4649      	mov	r1, r9
 800cb58:	f7f3 fd4e 	bl	80005f8 <__aeabi_dmul>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	460b      	mov	r3, r1
 800cb60:	4630      	mov	r0, r6
 800cb62:	4639      	mov	r1, r7
 800cb64:	f7f3 fb92 	bl	800028c <__adddf3>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	4629      	mov	r1, r5
 800cb70:	f7f3 fb8a 	bl	8000288 <__aeabi_dsub>
 800cb74:	e7c4      	b.n	800cb00 <__kernel_sin+0xd0>
 800cb76:	bf00      	nop
 800cb78:	55555549 	.word	0x55555549
 800cb7c:	3fc55555 	.word	0x3fc55555
 800cb80:	3fe00000 	.word	0x3fe00000
 800cb84:	5acfd57c 	.word	0x5acfd57c
 800cb88:	3de5d93a 	.word	0x3de5d93a
 800cb8c:	8a2b9ceb 	.word	0x8a2b9ceb
 800cb90:	3e5ae5e6 	.word	0x3e5ae5e6
 800cb94:	57b1fe7d 	.word	0x57b1fe7d
 800cb98:	3ec71de3 	.word	0x3ec71de3
 800cb9c:	19c161d5 	.word	0x19c161d5
 800cba0:	3f2a01a0 	.word	0x3f2a01a0
 800cba4:	1110f8a6 	.word	0x1110f8a6
 800cba8:	3f811111 	.word	0x3f811111
 800cbac:	00000000 	.word	0x00000000

0800cbb0 <__ieee754_rem_pio2>:
 800cbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	ed2d 8b02 	vpush	{d8}
 800cbb8:	ec55 4b10 	vmov	r4, r5, d0
 800cbbc:	4bca      	ldr	r3, [pc, #808]	; (800cee8 <__ieee754_rem_pio2+0x338>)
 800cbbe:	b08b      	sub	sp, #44	; 0x2c
 800cbc0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cbc4:	4598      	cmp	r8, r3
 800cbc6:	4682      	mov	sl, r0
 800cbc8:	9502      	str	r5, [sp, #8]
 800cbca:	dc08      	bgt.n	800cbde <__ieee754_rem_pio2+0x2e>
 800cbcc:	2200      	movs	r2, #0
 800cbce:	2300      	movs	r3, #0
 800cbd0:	ed80 0b00 	vstr	d0, [r0]
 800cbd4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cbd8:	f04f 0b00 	mov.w	fp, #0
 800cbdc:	e028      	b.n	800cc30 <__ieee754_rem_pio2+0x80>
 800cbde:	4bc3      	ldr	r3, [pc, #780]	; (800ceec <__ieee754_rem_pio2+0x33c>)
 800cbe0:	4598      	cmp	r8, r3
 800cbe2:	dc78      	bgt.n	800ccd6 <__ieee754_rem_pio2+0x126>
 800cbe4:	9b02      	ldr	r3, [sp, #8]
 800cbe6:	4ec2      	ldr	r6, [pc, #776]	; (800cef0 <__ieee754_rem_pio2+0x340>)
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	ee10 0a10 	vmov	r0, s0
 800cbee:	a3b0      	add	r3, pc, #704	; (adr r3, 800ceb0 <__ieee754_rem_pio2+0x300>)
 800cbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf4:	4629      	mov	r1, r5
 800cbf6:	dd39      	ble.n	800cc6c <__ieee754_rem_pio2+0xbc>
 800cbf8:	f7f3 fb46 	bl	8000288 <__aeabi_dsub>
 800cbfc:	45b0      	cmp	r8, r6
 800cbfe:	4604      	mov	r4, r0
 800cc00:	460d      	mov	r5, r1
 800cc02:	d01b      	beq.n	800cc3c <__ieee754_rem_pio2+0x8c>
 800cc04:	a3ac      	add	r3, pc, #688	; (adr r3, 800ceb8 <__ieee754_rem_pio2+0x308>)
 800cc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0a:	f7f3 fb3d 	bl	8000288 <__aeabi_dsub>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	460b      	mov	r3, r1
 800cc12:	e9ca 2300 	strd	r2, r3, [sl]
 800cc16:	4620      	mov	r0, r4
 800cc18:	4629      	mov	r1, r5
 800cc1a:	f7f3 fb35 	bl	8000288 <__aeabi_dsub>
 800cc1e:	a3a6      	add	r3, pc, #664	; (adr r3, 800ceb8 <__ieee754_rem_pio2+0x308>)
 800cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc24:	f7f3 fb30 	bl	8000288 <__aeabi_dsub>
 800cc28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cc2c:	f04f 0b01 	mov.w	fp, #1
 800cc30:	4658      	mov	r0, fp
 800cc32:	b00b      	add	sp, #44	; 0x2c
 800cc34:	ecbd 8b02 	vpop	{d8}
 800cc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc3c:	a3a0      	add	r3, pc, #640	; (adr r3, 800cec0 <__ieee754_rem_pio2+0x310>)
 800cc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc42:	f7f3 fb21 	bl	8000288 <__aeabi_dsub>
 800cc46:	a3a0      	add	r3, pc, #640	; (adr r3, 800cec8 <__ieee754_rem_pio2+0x318>)
 800cc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4c:	4604      	mov	r4, r0
 800cc4e:	460d      	mov	r5, r1
 800cc50:	f7f3 fb1a 	bl	8000288 <__aeabi_dsub>
 800cc54:	4602      	mov	r2, r0
 800cc56:	460b      	mov	r3, r1
 800cc58:	e9ca 2300 	strd	r2, r3, [sl]
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	4629      	mov	r1, r5
 800cc60:	f7f3 fb12 	bl	8000288 <__aeabi_dsub>
 800cc64:	a398      	add	r3, pc, #608	; (adr r3, 800cec8 <__ieee754_rem_pio2+0x318>)
 800cc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6a:	e7db      	b.n	800cc24 <__ieee754_rem_pio2+0x74>
 800cc6c:	f7f3 fb0e 	bl	800028c <__adddf3>
 800cc70:	45b0      	cmp	r8, r6
 800cc72:	4604      	mov	r4, r0
 800cc74:	460d      	mov	r5, r1
 800cc76:	d016      	beq.n	800cca6 <__ieee754_rem_pio2+0xf6>
 800cc78:	a38f      	add	r3, pc, #572	; (adr r3, 800ceb8 <__ieee754_rem_pio2+0x308>)
 800cc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7e:	f7f3 fb05 	bl	800028c <__adddf3>
 800cc82:	4602      	mov	r2, r0
 800cc84:	460b      	mov	r3, r1
 800cc86:	e9ca 2300 	strd	r2, r3, [sl]
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	4629      	mov	r1, r5
 800cc8e:	f7f3 fafb 	bl	8000288 <__aeabi_dsub>
 800cc92:	a389      	add	r3, pc, #548	; (adr r3, 800ceb8 <__ieee754_rem_pio2+0x308>)
 800cc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc98:	f7f3 faf8 	bl	800028c <__adddf3>
 800cc9c:	f04f 3bff 	mov.w	fp, #4294967295
 800cca0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cca4:	e7c4      	b.n	800cc30 <__ieee754_rem_pio2+0x80>
 800cca6:	a386      	add	r3, pc, #536	; (adr r3, 800cec0 <__ieee754_rem_pio2+0x310>)
 800cca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccac:	f7f3 faee 	bl	800028c <__adddf3>
 800ccb0:	a385      	add	r3, pc, #532	; (adr r3, 800cec8 <__ieee754_rem_pio2+0x318>)
 800ccb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	460d      	mov	r5, r1
 800ccba:	f7f3 fae7 	bl	800028c <__adddf3>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	e9ca 2300 	strd	r2, r3, [sl]
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	4629      	mov	r1, r5
 800ccca:	f7f3 fadd 	bl	8000288 <__aeabi_dsub>
 800ccce:	a37e      	add	r3, pc, #504	; (adr r3, 800cec8 <__ieee754_rem_pio2+0x318>)
 800ccd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd4:	e7e0      	b.n	800cc98 <__ieee754_rem_pio2+0xe8>
 800ccd6:	4b87      	ldr	r3, [pc, #540]	; (800cef4 <__ieee754_rem_pio2+0x344>)
 800ccd8:	4598      	cmp	r8, r3
 800ccda:	f300 80d8 	bgt.w	800ce8e <__ieee754_rem_pio2+0x2de>
 800ccde:	f000 f96d 	bl	800cfbc <fabs>
 800cce2:	ec55 4b10 	vmov	r4, r5, d0
 800cce6:	ee10 0a10 	vmov	r0, s0
 800ccea:	a379      	add	r3, pc, #484	; (adr r3, 800ced0 <__ieee754_rem_pio2+0x320>)
 800ccec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf0:	4629      	mov	r1, r5
 800ccf2:	f7f3 fc81 	bl	80005f8 <__aeabi_dmul>
 800ccf6:	4b80      	ldr	r3, [pc, #512]	; (800cef8 <__ieee754_rem_pio2+0x348>)
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f7f3 fac7 	bl	800028c <__adddf3>
 800ccfe:	f7f3 ff15 	bl	8000b2c <__aeabi_d2iz>
 800cd02:	4683      	mov	fp, r0
 800cd04:	f7f3 fc0e 	bl	8000524 <__aeabi_i2d>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	ec43 2b18 	vmov	d8, r2, r3
 800cd10:	a367      	add	r3, pc, #412	; (adr r3, 800ceb0 <__ieee754_rem_pio2+0x300>)
 800cd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd16:	f7f3 fc6f 	bl	80005f8 <__aeabi_dmul>
 800cd1a:	4602      	mov	r2, r0
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	4620      	mov	r0, r4
 800cd20:	4629      	mov	r1, r5
 800cd22:	f7f3 fab1 	bl	8000288 <__aeabi_dsub>
 800cd26:	a364      	add	r3, pc, #400	; (adr r3, 800ceb8 <__ieee754_rem_pio2+0x308>)
 800cd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2c:	4606      	mov	r6, r0
 800cd2e:	460f      	mov	r7, r1
 800cd30:	ec51 0b18 	vmov	r0, r1, d8
 800cd34:	f7f3 fc60 	bl	80005f8 <__aeabi_dmul>
 800cd38:	f1bb 0f1f 	cmp.w	fp, #31
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	460d      	mov	r5, r1
 800cd40:	dc0d      	bgt.n	800cd5e <__ieee754_rem_pio2+0x1ae>
 800cd42:	4b6e      	ldr	r3, [pc, #440]	; (800cefc <__ieee754_rem_pio2+0x34c>)
 800cd44:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cd48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd4c:	4543      	cmp	r3, r8
 800cd4e:	d006      	beq.n	800cd5e <__ieee754_rem_pio2+0x1ae>
 800cd50:	4622      	mov	r2, r4
 800cd52:	462b      	mov	r3, r5
 800cd54:	4630      	mov	r0, r6
 800cd56:	4639      	mov	r1, r7
 800cd58:	f7f3 fa96 	bl	8000288 <__aeabi_dsub>
 800cd5c:	e00e      	b.n	800cd7c <__ieee754_rem_pio2+0x1cc>
 800cd5e:	462b      	mov	r3, r5
 800cd60:	4622      	mov	r2, r4
 800cd62:	4630      	mov	r0, r6
 800cd64:	4639      	mov	r1, r7
 800cd66:	f7f3 fa8f 	bl	8000288 <__aeabi_dsub>
 800cd6a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cd6e:	9303      	str	r3, [sp, #12]
 800cd70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cd74:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800cd78:	2b10      	cmp	r3, #16
 800cd7a:	dc02      	bgt.n	800cd82 <__ieee754_rem_pio2+0x1d2>
 800cd7c:	e9ca 0100 	strd	r0, r1, [sl]
 800cd80:	e039      	b.n	800cdf6 <__ieee754_rem_pio2+0x246>
 800cd82:	a34f      	add	r3, pc, #316	; (adr r3, 800cec0 <__ieee754_rem_pio2+0x310>)
 800cd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd88:	ec51 0b18 	vmov	r0, r1, d8
 800cd8c:	f7f3 fc34 	bl	80005f8 <__aeabi_dmul>
 800cd90:	4604      	mov	r4, r0
 800cd92:	460d      	mov	r5, r1
 800cd94:	4602      	mov	r2, r0
 800cd96:	460b      	mov	r3, r1
 800cd98:	4630      	mov	r0, r6
 800cd9a:	4639      	mov	r1, r7
 800cd9c:	f7f3 fa74 	bl	8000288 <__aeabi_dsub>
 800cda0:	4602      	mov	r2, r0
 800cda2:	460b      	mov	r3, r1
 800cda4:	4680      	mov	r8, r0
 800cda6:	4689      	mov	r9, r1
 800cda8:	4630      	mov	r0, r6
 800cdaa:	4639      	mov	r1, r7
 800cdac:	f7f3 fa6c 	bl	8000288 <__aeabi_dsub>
 800cdb0:	4622      	mov	r2, r4
 800cdb2:	462b      	mov	r3, r5
 800cdb4:	f7f3 fa68 	bl	8000288 <__aeabi_dsub>
 800cdb8:	a343      	add	r3, pc, #268	; (adr r3, 800cec8 <__ieee754_rem_pio2+0x318>)
 800cdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	460d      	mov	r5, r1
 800cdc2:	ec51 0b18 	vmov	r0, r1, d8
 800cdc6:	f7f3 fc17 	bl	80005f8 <__aeabi_dmul>
 800cdca:	4622      	mov	r2, r4
 800cdcc:	462b      	mov	r3, r5
 800cdce:	f7f3 fa5b 	bl	8000288 <__aeabi_dsub>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	460d      	mov	r5, r1
 800cdda:	4640      	mov	r0, r8
 800cddc:	4649      	mov	r1, r9
 800cdde:	f7f3 fa53 	bl	8000288 <__aeabi_dsub>
 800cde2:	9a03      	ldr	r2, [sp, #12]
 800cde4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	2b31      	cmp	r3, #49	; 0x31
 800cdec:	dc24      	bgt.n	800ce38 <__ieee754_rem_pio2+0x288>
 800cdee:	e9ca 0100 	strd	r0, r1, [sl]
 800cdf2:	4646      	mov	r6, r8
 800cdf4:	464f      	mov	r7, r9
 800cdf6:	e9da 8900 	ldrd	r8, r9, [sl]
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	4642      	mov	r2, r8
 800cdfe:	464b      	mov	r3, r9
 800ce00:	4639      	mov	r1, r7
 800ce02:	f7f3 fa41 	bl	8000288 <__aeabi_dsub>
 800ce06:	462b      	mov	r3, r5
 800ce08:	4622      	mov	r2, r4
 800ce0a:	f7f3 fa3d 	bl	8000288 <__aeabi_dsub>
 800ce0e:	9b02      	ldr	r3, [sp, #8]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ce16:	f6bf af0b 	bge.w	800cc30 <__ieee754_rem_pio2+0x80>
 800ce1a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ce1e:	f8ca 3004 	str.w	r3, [sl, #4]
 800ce22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce26:	f8ca 8000 	str.w	r8, [sl]
 800ce2a:	f8ca 0008 	str.w	r0, [sl, #8]
 800ce2e:	f8ca 300c 	str.w	r3, [sl, #12]
 800ce32:	f1cb 0b00 	rsb	fp, fp, #0
 800ce36:	e6fb      	b.n	800cc30 <__ieee754_rem_pio2+0x80>
 800ce38:	a327      	add	r3, pc, #156	; (adr r3, 800ced8 <__ieee754_rem_pio2+0x328>)
 800ce3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3e:	ec51 0b18 	vmov	r0, r1, d8
 800ce42:	f7f3 fbd9 	bl	80005f8 <__aeabi_dmul>
 800ce46:	4604      	mov	r4, r0
 800ce48:	460d      	mov	r5, r1
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	4640      	mov	r0, r8
 800ce50:	4649      	mov	r1, r9
 800ce52:	f7f3 fa19 	bl	8000288 <__aeabi_dsub>
 800ce56:	4602      	mov	r2, r0
 800ce58:	460b      	mov	r3, r1
 800ce5a:	4606      	mov	r6, r0
 800ce5c:	460f      	mov	r7, r1
 800ce5e:	4640      	mov	r0, r8
 800ce60:	4649      	mov	r1, r9
 800ce62:	f7f3 fa11 	bl	8000288 <__aeabi_dsub>
 800ce66:	4622      	mov	r2, r4
 800ce68:	462b      	mov	r3, r5
 800ce6a:	f7f3 fa0d 	bl	8000288 <__aeabi_dsub>
 800ce6e:	a31c      	add	r3, pc, #112	; (adr r3, 800cee0 <__ieee754_rem_pio2+0x330>)
 800ce70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce74:	4604      	mov	r4, r0
 800ce76:	460d      	mov	r5, r1
 800ce78:	ec51 0b18 	vmov	r0, r1, d8
 800ce7c:	f7f3 fbbc 	bl	80005f8 <__aeabi_dmul>
 800ce80:	4622      	mov	r2, r4
 800ce82:	462b      	mov	r3, r5
 800ce84:	f7f3 fa00 	bl	8000288 <__aeabi_dsub>
 800ce88:	4604      	mov	r4, r0
 800ce8a:	460d      	mov	r5, r1
 800ce8c:	e760      	b.n	800cd50 <__ieee754_rem_pio2+0x1a0>
 800ce8e:	4b1c      	ldr	r3, [pc, #112]	; (800cf00 <__ieee754_rem_pio2+0x350>)
 800ce90:	4598      	cmp	r8, r3
 800ce92:	dd37      	ble.n	800cf04 <__ieee754_rem_pio2+0x354>
 800ce94:	ee10 2a10 	vmov	r2, s0
 800ce98:	462b      	mov	r3, r5
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	f7f3 f9f3 	bl	8000288 <__aeabi_dsub>
 800cea2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cea6:	e9ca 0100 	strd	r0, r1, [sl]
 800ceaa:	e695      	b.n	800cbd8 <__ieee754_rem_pio2+0x28>
 800ceac:	f3af 8000 	nop.w
 800ceb0:	54400000 	.word	0x54400000
 800ceb4:	3ff921fb 	.word	0x3ff921fb
 800ceb8:	1a626331 	.word	0x1a626331
 800cebc:	3dd0b461 	.word	0x3dd0b461
 800cec0:	1a600000 	.word	0x1a600000
 800cec4:	3dd0b461 	.word	0x3dd0b461
 800cec8:	2e037073 	.word	0x2e037073
 800cecc:	3ba3198a 	.word	0x3ba3198a
 800ced0:	6dc9c883 	.word	0x6dc9c883
 800ced4:	3fe45f30 	.word	0x3fe45f30
 800ced8:	2e000000 	.word	0x2e000000
 800cedc:	3ba3198a 	.word	0x3ba3198a
 800cee0:	252049c1 	.word	0x252049c1
 800cee4:	397b839a 	.word	0x397b839a
 800cee8:	3fe921fb 	.word	0x3fe921fb
 800ceec:	4002d97b 	.word	0x4002d97b
 800cef0:	3ff921fb 	.word	0x3ff921fb
 800cef4:	413921fb 	.word	0x413921fb
 800cef8:	3fe00000 	.word	0x3fe00000
 800cefc:	0800d944 	.word	0x0800d944
 800cf00:	7fefffff 	.word	0x7fefffff
 800cf04:	ea4f 5628 	mov.w	r6, r8, asr #20
 800cf08:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800cf0c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800cf10:	4620      	mov	r0, r4
 800cf12:	460d      	mov	r5, r1
 800cf14:	f7f3 fe0a 	bl	8000b2c <__aeabi_d2iz>
 800cf18:	f7f3 fb04 	bl	8000524 <__aeabi_i2d>
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	460b      	mov	r3, r1
 800cf20:	4620      	mov	r0, r4
 800cf22:	4629      	mov	r1, r5
 800cf24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cf28:	f7f3 f9ae 	bl	8000288 <__aeabi_dsub>
 800cf2c:	4b21      	ldr	r3, [pc, #132]	; (800cfb4 <__ieee754_rem_pio2+0x404>)
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f7f3 fb62 	bl	80005f8 <__aeabi_dmul>
 800cf34:	460d      	mov	r5, r1
 800cf36:	4604      	mov	r4, r0
 800cf38:	f7f3 fdf8 	bl	8000b2c <__aeabi_d2iz>
 800cf3c:	f7f3 faf2 	bl	8000524 <__aeabi_i2d>
 800cf40:	4602      	mov	r2, r0
 800cf42:	460b      	mov	r3, r1
 800cf44:	4620      	mov	r0, r4
 800cf46:	4629      	mov	r1, r5
 800cf48:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cf4c:	f7f3 f99c 	bl	8000288 <__aeabi_dsub>
 800cf50:	4b18      	ldr	r3, [pc, #96]	; (800cfb4 <__ieee754_rem_pio2+0x404>)
 800cf52:	2200      	movs	r2, #0
 800cf54:	f7f3 fb50 	bl	80005f8 <__aeabi_dmul>
 800cf58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cf5c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800cf60:	2703      	movs	r7, #3
 800cf62:	2400      	movs	r4, #0
 800cf64:	2500      	movs	r5, #0
 800cf66:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800cf6a:	4622      	mov	r2, r4
 800cf6c:	462b      	mov	r3, r5
 800cf6e:	46b9      	mov	r9, r7
 800cf70:	3f01      	subs	r7, #1
 800cf72:	f7f3 fda9 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf76:	2800      	cmp	r0, #0
 800cf78:	d1f5      	bne.n	800cf66 <__ieee754_rem_pio2+0x3b6>
 800cf7a:	4b0f      	ldr	r3, [pc, #60]	; (800cfb8 <__ieee754_rem_pio2+0x408>)
 800cf7c:	9301      	str	r3, [sp, #4]
 800cf7e:	2302      	movs	r3, #2
 800cf80:	9300      	str	r3, [sp, #0]
 800cf82:	4632      	mov	r2, r6
 800cf84:	464b      	mov	r3, r9
 800cf86:	4651      	mov	r1, sl
 800cf88:	a804      	add	r0, sp, #16
 800cf8a:	f000 f821 	bl	800cfd0 <__kernel_rem_pio2>
 800cf8e:	9b02      	ldr	r3, [sp, #8]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	4683      	mov	fp, r0
 800cf94:	f6bf ae4c 	bge.w	800cc30 <__ieee754_rem_pio2+0x80>
 800cf98:	e9da 2100 	ldrd	r2, r1, [sl]
 800cf9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cfa0:	e9ca 2300 	strd	r2, r3, [sl]
 800cfa4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800cfa8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cfac:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800cfb0:	e73f      	b.n	800ce32 <__ieee754_rem_pio2+0x282>
 800cfb2:	bf00      	nop
 800cfb4:	41700000 	.word	0x41700000
 800cfb8:	0800d9c4 	.word	0x0800d9c4

0800cfbc <fabs>:
 800cfbc:	ec51 0b10 	vmov	r0, r1, d0
 800cfc0:	ee10 2a10 	vmov	r2, s0
 800cfc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cfc8:	ec43 2b10 	vmov	d0, r2, r3
 800cfcc:	4770      	bx	lr
	...

0800cfd0 <__kernel_rem_pio2>:
 800cfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd4:	ed2d 8b02 	vpush	{d8}
 800cfd8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800cfdc:	f112 0f14 	cmn.w	r2, #20
 800cfe0:	9306      	str	r3, [sp, #24]
 800cfe2:	9104      	str	r1, [sp, #16]
 800cfe4:	4bc2      	ldr	r3, [pc, #776]	; (800d2f0 <__kernel_rem_pio2+0x320>)
 800cfe6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800cfe8:	9009      	str	r0, [sp, #36]	; 0x24
 800cfea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cfee:	9300      	str	r3, [sp, #0]
 800cff0:	9b06      	ldr	r3, [sp, #24]
 800cff2:	f103 33ff 	add.w	r3, r3, #4294967295
 800cff6:	bfa8      	it	ge
 800cff8:	1ed4      	subge	r4, r2, #3
 800cffa:	9305      	str	r3, [sp, #20]
 800cffc:	bfb2      	itee	lt
 800cffe:	2400      	movlt	r4, #0
 800d000:	2318      	movge	r3, #24
 800d002:	fb94 f4f3 	sdivge	r4, r4, r3
 800d006:	f06f 0317 	mvn.w	r3, #23
 800d00a:	fb04 3303 	mla	r3, r4, r3, r3
 800d00e:	eb03 0a02 	add.w	sl, r3, r2
 800d012:	9b00      	ldr	r3, [sp, #0]
 800d014:	9a05      	ldr	r2, [sp, #20]
 800d016:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800d2e0 <__kernel_rem_pio2+0x310>
 800d01a:	eb03 0802 	add.w	r8, r3, r2
 800d01e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d020:	1aa7      	subs	r7, r4, r2
 800d022:	ae20      	add	r6, sp, #128	; 0x80
 800d024:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d028:	2500      	movs	r5, #0
 800d02a:	4545      	cmp	r5, r8
 800d02c:	dd13      	ble.n	800d056 <__kernel_rem_pio2+0x86>
 800d02e:	9b06      	ldr	r3, [sp, #24]
 800d030:	aa20      	add	r2, sp, #128	; 0x80
 800d032:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d036:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d03a:	f04f 0800 	mov.w	r8, #0
 800d03e:	9b00      	ldr	r3, [sp, #0]
 800d040:	4598      	cmp	r8, r3
 800d042:	dc31      	bgt.n	800d0a8 <__kernel_rem_pio2+0xd8>
 800d044:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800d2e0 <__kernel_rem_pio2+0x310>
 800d048:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d04c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d050:	462f      	mov	r7, r5
 800d052:	2600      	movs	r6, #0
 800d054:	e01b      	b.n	800d08e <__kernel_rem_pio2+0xbe>
 800d056:	42ef      	cmn	r7, r5
 800d058:	d407      	bmi.n	800d06a <__kernel_rem_pio2+0x9a>
 800d05a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d05e:	f7f3 fa61 	bl	8000524 <__aeabi_i2d>
 800d062:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d066:	3501      	adds	r5, #1
 800d068:	e7df      	b.n	800d02a <__kernel_rem_pio2+0x5a>
 800d06a:	ec51 0b18 	vmov	r0, r1, d8
 800d06e:	e7f8      	b.n	800d062 <__kernel_rem_pio2+0x92>
 800d070:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d074:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d078:	f7f3 fabe 	bl	80005f8 <__aeabi_dmul>
 800d07c:	4602      	mov	r2, r0
 800d07e:	460b      	mov	r3, r1
 800d080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d084:	f7f3 f902 	bl	800028c <__adddf3>
 800d088:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d08c:	3601      	adds	r6, #1
 800d08e:	9b05      	ldr	r3, [sp, #20]
 800d090:	429e      	cmp	r6, r3
 800d092:	f1a7 0708 	sub.w	r7, r7, #8
 800d096:	ddeb      	ble.n	800d070 <__kernel_rem_pio2+0xa0>
 800d098:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d09c:	f108 0801 	add.w	r8, r8, #1
 800d0a0:	ecab 7b02 	vstmia	fp!, {d7}
 800d0a4:	3508      	adds	r5, #8
 800d0a6:	e7ca      	b.n	800d03e <__kernel_rem_pio2+0x6e>
 800d0a8:	9b00      	ldr	r3, [sp, #0]
 800d0aa:	aa0c      	add	r2, sp, #48	; 0x30
 800d0ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d0b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0b2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d0b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d0b8:	9c00      	ldr	r4, [sp, #0]
 800d0ba:	930a      	str	r3, [sp, #40]	; 0x28
 800d0bc:	00e3      	lsls	r3, r4, #3
 800d0be:	9308      	str	r3, [sp, #32]
 800d0c0:	ab98      	add	r3, sp, #608	; 0x260
 800d0c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d0c6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d0ca:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800d0ce:	ab70      	add	r3, sp, #448	; 0x1c0
 800d0d0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d0d4:	46c3      	mov	fp, r8
 800d0d6:	46a1      	mov	r9, r4
 800d0d8:	f1b9 0f00 	cmp.w	r9, #0
 800d0dc:	f1a5 0508 	sub.w	r5, r5, #8
 800d0e0:	dc77      	bgt.n	800d1d2 <__kernel_rem_pio2+0x202>
 800d0e2:	ec47 6b10 	vmov	d0, r6, r7
 800d0e6:	4650      	mov	r0, sl
 800d0e8:	f000 fac2 	bl	800d670 <scalbn>
 800d0ec:	ec57 6b10 	vmov	r6, r7, d0
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d0f6:	ee10 0a10 	vmov	r0, s0
 800d0fa:	4639      	mov	r1, r7
 800d0fc:	f7f3 fa7c 	bl	80005f8 <__aeabi_dmul>
 800d100:	ec41 0b10 	vmov	d0, r0, r1
 800d104:	f000 fb34 	bl	800d770 <floor>
 800d108:	4b7a      	ldr	r3, [pc, #488]	; (800d2f4 <__kernel_rem_pio2+0x324>)
 800d10a:	ec51 0b10 	vmov	r0, r1, d0
 800d10e:	2200      	movs	r2, #0
 800d110:	f7f3 fa72 	bl	80005f8 <__aeabi_dmul>
 800d114:	4602      	mov	r2, r0
 800d116:	460b      	mov	r3, r1
 800d118:	4630      	mov	r0, r6
 800d11a:	4639      	mov	r1, r7
 800d11c:	f7f3 f8b4 	bl	8000288 <__aeabi_dsub>
 800d120:	460f      	mov	r7, r1
 800d122:	4606      	mov	r6, r0
 800d124:	f7f3 fd02 	bl	8000b2c <__aeabi_d2iz>
 800d128:	9002      	str	r0, [sp, #8]
 800d12a:	f7f3 f9fb 	bl	8000524 <__aeabi_i2d>
 800d12e:	4602      	mov	r2, r0
 800d130:	460b      	mov	r3, r1
 800d132:	4630      	mov	r0, r6
 800d134:	4639      	mov	r1, r7
 800d136:	f7f3 f8a7 	bl	8000288 <__aeabi_dsub>
 800d13a:	f1ba 0f00 	cmp.w	sl, #0
 800d13e:	4606      	mov	r6, r0
 800d140:	460f      	mov	r7, r1
 800d142:	dd6d      	ble.n	800d220 <__kernel_rem_pio2+0x250>
 800d144:	1e61      	subs	r1, r4, #1
 800d146:	ab0c      	add	r3, sp, #48	; 0x30
 800d148:	9d02      	ldr	r5, [sp, #8]
 800d14a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d14e:	f1ca 0018 	rsb	r0, sl, #24
 800d152:	fa43 f200 	asr.w	r2, r3, r0
 800d156:	4415      	add	r5, r2
 800d158:	4082      	lsls	r2, r0
 800d15a:	1a9b      	subs	r3, r3, r2
 800d15c:	aa0c      	add	r2, sp, #48	; 0x30
 800d15e:	9502      	str	r5, [sp, #8]
 800d160:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d164:	f1ca 0217 	rsb	r2, sl, #23
 800d168:	fa43 fb02 	asr.w	fp, r3, r2
 800d16c:	f1bb 0f00 	cmp.w	fp, #0
 800d170:	dd65      	ble.n	800d23e <__kernel_rem_pio2+0x26e>
 800d172:	9b02      	ldr	r3, [sp, #8]
 800d174:	2200      	movs	r2, #0
 800d176:	3301      	adds	r3, #1
 800d178:	9302      	str	r3, [sp, #8]
 800d17a:	4615      	mov	r5, r2
 800d17c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d180:	4294      	cmp	r4, r2
 800d182:	f300 809f 	bgt.w	800d2c4 <__kernel_rem_pio2+0x2f4>
 800d186:	f1ba 0f00 	cmp.w	sl, #0
 800d18a:	dd07      	ble.n	800d19c <__kernel_rem_pio2+0x1cc>
 800d18c:	f1ba 0f01 	cmp.w	sl, #1
 800d190:	f000 80c1 	beq.w	800d316 <__kernel_rem_pio2+0x346>
 800d194:	f1ba 0f02 	cmp.w	sl, #2
 800d198:	f000 80c7 	beq.w	800d32a <__kernel_rem_pio2+0x35a>
 800d19c:	f1bb 0f02 	cmp.w	fp, #2
 800d1a0:	d14d      	bne.n	800d23e <__kernel_rem_pio2+0x26e>
 800d1a2:	4632      	mov	r2, r6
 800d1a4:	463b      	mov	r3, r7
 800d1a6:	4954      	ldr	r1, [pc, #336]	; (800d2f8 <__kernel_rem_pio2+0x328>)
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	f7f3 f86d 	bl	8000288 <__aeabi_dsub>
 800d1ae:	4606      	mov	r6, r0
 800d1b0:	460f      	mov	r7, r1
 800d1b2:	2d00      	cmp	r5, #0
 800d1b4:	d043      	beq.n	800d23e <__kernel_rem_pio2+0x26e>
 800d1b6:	4650      	mov	r0, sl
 800d1b8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800d2e8 <__kernel_rem_pio2+0x318>
 800d1bc:	f000 fa58 	bl	800d670 <scalbn>
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	4639      	mov	r1, r7
 800d1c4:	ec53 2b10 	vmov	r2, r3, d0
 800d1c8:	f7f3 f85e 	bl	8000288 <__aeabi_dsub>
 800d1cc:	4606      	mov	r6, r0
 800d1ce:	460f      	mov	r7, r1
 800d1d0:	e035      	b.n	800d23e <__kernel_rem_pio2+0x26e>
 800d1d2:	4b4a      	ldr	r3, [pc, #296]	; (800d2fc <__kernel_rem_pio2+0x32c>)
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	4639      	mov	r1, r7
 800d1da:	f7f3 fa0d 	bl	80005f8 <__aeabi_dmul>
 800d1de:	f7f3 fca5 	bl	8000b2c <__aeabi_d2iz>
 800d1e2:	f7f3 f99f 	bl	8000524 <__aeabi_i2d>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	ec43 2b18 	vmov	d8, r2, r3
 800d1ee:	4b44      	ldr	r3, [pc, #272]	; (800d300 <__kernel_rem_pio2+0x330>)
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f7f3 fa01 	bl	80005f8 <__aeabi_dmul>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	4639      	mov	r1, r7
 800d1fe:	f7f3 f843 	bl	8000288 <__aeabi_dsub>
 800d202:	f7f3 fc93 	bl	8000b2c <__aeabi_d2iz>
 800d206:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d20a:	f84b 0b04 	str.w	r0, [fp], #4
 800d20e:	ec51 0b18 	vmov	r0, r1, d8
 800d212:	f7f3 f83b 	bl	800028c <__adddf3>
 800d216:	f109 39ff 	add.w	r9, r9, #4294967295
 800d21a:	4606      	mov	r6, r0
 800d21c:	460f      	mov	r7, r1
 800d21e:	e75b      	b.n	800d0d8 <__kernel_rem_pio2+0x108>
 800d220:	d106      	bne.n	800d230 <__kernel_rem_pio2+0x260>
 800d222:	1e63      	subs	r3, r4, #1
 800d224:	aa0c      	add	r2, sp, #48	; 0x30
 800d226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d22a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800d22e:	e79d      	b.n	800d16c <__kernel_rem_pio2+0x19c>
 800d230:	4b34      	ldr	r3, [pc, #208]	; (800d304 <__kernel_rem_pio2+0x334>)
 800d232:	2200      	movs	r2, #0
 800d234:	f7f3 fc66 	bl	8000b04 <__aeabi_dcmpge>
 800d238:	2800      	cmp	r0, #0
 800d23a:	d140      	bne.n	800d2be <__kernel_rem_pio2+0x2ee>
 800d23c:	4683      	mov	fp, r0
 800d23e:	2200      	movs	r2, #0
 800d240:	2300      	movs	r3, #0
 800d242:	4630      	mov	r0, r6
 800d244:	4639      	mov	r1, r7
 800d246:	f7f3 fc3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d24a:	2800      	cmp	r0, #0
 800d24c:	f000 80c1 	beq.w	800d3d2 <__kernel_rem_pio2+0x402>
 800d250:	1e65      	subs	r5, r4, #1
 800d252:	462b      	mov	r3, r5
 800d254:	2200      	movs	r2, #0
 800d256:	9900      	ldr	r1, [sp, #0]
 800d258:	428b      	cmp	r3, r1
 800d25a:	da6d      	bge.n	800d338 <__kernel_rem_pio2+0x368>
 800d25c:	2a00      	cmp	r2, #0
 800d25e:	f000 808a 	beq.w	800d376 <__kernel_rem_pio2+0x3a6>
 800d262:	ab0c      	add	r3, sp, #48	; 0x30
 800d264:	f1aa 0a18 	sub.w	sl, sl, #24
 800d268:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	f000 80ae 	beq.w	800d3ce <__kernel_rem_pio2+0x3fe>
 800d272:	4650      	mov	r0, sl
 800d274:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800d2e8 <__kernel_rem_pio2+0x318>
 800d278:	f000 f9fa 	bl	800d670 <scalbn>
 800d27c:	1c6b      	adds	r3, r5, #1
 800d27e:	00da      	lsls	r2, r3, #3
 800d280:	9205      	str	r2, [sp, #20]
 800d282:	ec57 6b10 	vmov	r6, r7, d0
 800d286:	aa70      	add	r2, sp, #448	; 0x1c0
 800d288:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800d2fc <__kernel_rem_pio2+0x32c>
 800d28c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800d290:	462c      	mov	r4, r5
 800d292:	f04f 0800 	mov.w	r8, #0
 800d296:	2c00      	cmp	r4, #0
 800d298:	f280 80d4 	bge.w	800d444 <__kernel_rem_pio2+0x474>
 800d29c:	462c      	mov	r4, r5
 800d29e:	2c00      	cmp	r4, #0
 800d2a0:	f2c0 8102 	blt.w	800d4a8 <__kernel_rem_pio2+0x4d8>
 800d2a4:	4b18      	ldr	r3, [pc, #96]	; (800d308 <__kernel_rem_pio2+0x338>)
 800d2a6:	461e      	mov	r6, r3
 800d2a8:	ab70      	add	r3, sp, #448	; 0x1c0
 800d2aa:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800d2ae:	1b2b      	subs	r3, r5, r4
 800d2b0:	f04f 0900 	mov.w	r9, #0
 800d2b4:	f04f 0a00 	mov.w	sl, #0
 800d2b8:	2700      	movs	r7, #0
 800d2ba:	9306      	str	r3, [sp, #24]
 800d2bc:	e0e6      	b.n	800d48c <__kernel_rem_pio2+0x4bc>
 800d2be:	f04f 0b02 	mov.w	fp, #2
 800d2c2:	e756      	b.n	800d172 <__kernel_rem_pio2+0x1a2>
 800d2c4:	f8d8 3000 	ldr.w	r3, [r8]
 800d2c8:	bb05      	cbnz	r5, 800d30c <__kernel_rem_pio2+0x33c>
 800d2ca:	b123      	cbz	r3, 800d2d6 <__kernel_rem_pio2+0x306>
 800d2cc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d2d0:	f8c8 3000 	str.w	r3, [r8]
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	3201      	adds	r2, #1
 800d2d8:	f108 0804 	add.w	r8, r8, #4
 800d2dc:	461d      	mov	r5, r3
 800d2de:	e74f      	b.n	800d180 <__kernel_rem_pio2+0x1b0>
	...
 800d2ec:	3ff00000 	.word	0x3ff00000
 800d2f0:	0800db10 	.word	0x0800db10
 800d2f4:	40200000 	.word	0x40200000
 800d2f8:	3ff00000 	.word	0x3ff00000
 800d2fc:	3e700000 	.word	0x3e700000
 800d300:	41700000 	.word	0x41700000
 800d304:	3fe00000 	.word	0x3fe00000
 800d308:	0800dad0 	.word	0x0800dad0
 800d30c:	1acb      	subs	r3, r1, r3
 800d30e:	f8c8 3000 	str.w	r3, [r8]
 800d312:	462b      	mov	r3, r5
 800d314:	e7df      	b.n	800d2d6 <__kernel_rem_pio2+0x306>
 800d316:	1e62      	subs	r2, r4, #1
 800d318:	ab0c      	add	r3, sp, #48	; 0x30
 800d31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d31e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d322:	a90c      	add	r1, sp, #48	; 0x30
 800d324:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d328:	e738      	b.n	800d19c <__kernel_rem_pio2+0x1cc>
 800d32a:	1e62      	subs	r2, r4, #1
 800d32c:	ab0c      	add	r3, sp, #48	; 0x30
 800d32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d332:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d336:	e7f4      	b.n	800d322 <__kernel_rem_pio2+0x352>
 800d338:	a90c      	add	r1, sp, #48	; 0x30
 800d33a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d33e:	3b01      	subs	r3, #1
 800d340:	430a      	orrs	r2, r1
 800d342:	e788      	b.n	800d256 <__kernel_rem_pio2+0x286>
 800d344:	3301      	adds	r3, #1
 800d346:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d34a:	2900      	cmp	r1, #0
 800d34c:	d0fa      	beq.n	800d344 <__kernel_rem_pio2+0x374>
 800d34e:	9a08      	ldr	r2, [sp, #32]
 800d350:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800d354:	446a      	add	r2, sp
 800d356:	3a98      	subs	r2, #152	; 0x98
 800d358:	9208      	str	r2, [sp, #32]
 800d35a:	9a06      	ldr	r2, [sp, #24]
 800d35c:	a920      	add	r1, sp, #128	; 0x80
 800d35e:	18a2      	adds	r2, r4, r2
 800d360:	18e3      	adds	r3, r4, r3
 800d362:	f104 0801 	add.w	r8, r4, #1
 800d366:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800d36a:	9302      	str	r3, [sp, #8]
 800d36c:	9b02      	ldr	r3, [sp, #8]
 800d36e:	4543      	cmp	r3, r8
 800d370:	da04      	bge.n	800d37c <__kernel_rem_pio2+0x3ac>
 800d372:	461c      	mov	r4, r3
 800d374:	e6a2      	b.n	800d0bc <__kernel_rem_pio2+0xec>
 800d376:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d378:	2301      	movs	r3, #1
 800d37a:	e7e4      	b.n	800d346 <__kernel_rem_pio2+0x376>
 800d37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d37e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d382:	f7f3 f8cf 	bl	8000524 <__aeabi_i2d>
 800d386:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d38c:	46ab      	mov	fp, r5
 800d38e:	461c      	mov	r4, r3
 800d390:	f04f 0900 	mov.w	r9, #0
 800d394:	2600      	movs	r6, #0
 800d396:	2700      	movs	r7, #0
 800d398:	9b05      	ldr	r3, [sp, #20]
 800d39a:	4599      	cmp	r9, r3
 800d39c:	dd06      	ble.n	800d3ac <__kernel_rem_pio2+0x3dc>
 800d39e:	9b08      	ldr	r3, [sp, #32]
 800d3a0:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d3a4:	f108 0801 	add.w	r8, r8, #1
 800d3a8:	9308      	str	r3, [sp, #32]
 800d3aa:	e7df      	b.n	800d36c <__kernel_rem_pio2+0x39c>
 800d3ac:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d3b0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d3b4:	f7f3 f920 	bl	80005f8 <__aeabi_dmul>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	460b      	mov	r3, r1
 800d3bc:	4630      	mov	r0, r6
 800d3be:	4639      	mov	r1, r7
 800d3c0:	f7f2 ff64 	bl	800028c <__adddf3>
 800d3c4:	f109 0901 	add.w	r9, r9, #1
 800d3c8:	4606      	mov	r6, r0
 800d3ca:	460f      	mov	r7, r1
 800d3cc:	e7e4      	b.n	800d398 <__kernel_rem_pio2+0x3c8>
 800d3ce:	3d01      	subs	r5, #1
 800d3d0:	e747      	b.n	800d262 <__kernel_rem_pio2+0x292>
 800d3d2:	ec47 6b10 	vmov	d0, r6, r7
 800d3d6:	f1ca 0000 	rsb	r0, sl, #0
 800d3da:	f000 f949 	bl	800d670 <scalbn>
 800d3de:	ec57 6b10 	vmov	r6, r7, d0
 800d3e2:	4ba0      	ldr	r3, [pc, #640]	; (800d664 <__kernel_rem_pio2+0x694>)
 800d3e4:	ee10 0a10 	vmov	r0, s0
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	4639      	mov	r1, r7
 800d3ec:	f7f3 fb8a 	bl	8000b04 <__aeabi_dcmpge>
 800d3f0:	b1f8      	cbz	r0, 800d432 <__kernel_rem_pio2+0x462>
 800d3f2:	4b9d      	ldr	r3, [pc, #628]	; (800d668 <__kernel_rem_pio2+0x698>)
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	4639      	mov	r1, r7
 800d3fa:	f7f3 f8fd 	bl	80005f8 <__aeabi_dmul>
 800d3fe:	f7f3 fb95 	bl	8000b2c <__aeabi_d2iz>
 800d402:	4680      	mov	r8, r0
 800d404:	f7f3 f88e 	bl	8000524 <__aeabi_i2d>
 800d408:	4b96      	ldr	r3, [pc, #600]	; (800d664 <__kernel_rem_pio2+0x694>)
 800d40a:	2200      	movs	r2, #0
 800d40c:	f7f3 f8f4 	bl	80005f8 <__aeabi_dmul>
 800d410:	460b      	mov	r3, r1
 800d412:	4602      	mov	r2, r0
 800d414:	4639      	mov	r1, r7
 800d416:	4630      	mov	r0, r6
 800d418:	f7f2 ff36 	bl	8000288 <__aeabi_dsub>
 800d41c:	f7f3 fb86 	bl	8000b2c <__aeabi_d2iz>
 800d420:	1c65      	adds	r5, r4, #1
 800d422:	ab0c      	add	r3, sp, #48	; 0x30
 800d424:	f10a 0a18 	add.w	sl, sl, #24
 800d428:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d42c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d430:	e71f      	b.n	800d272 <__kernel_rem_pio2+0x2a2>
 800d432:	4630      	mov	r0, r6
 800d434:	4639      	mov	r1, r7
 800d436:	f7f3 fb79 	bl	8000b2c <__aeabi_d2iz>
 800d43a:	ab0c      	add	r3, sp, #48	; 0x30
 800d43c:	4625      	mov	r5, r4
 800d43e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d442:	e716      	b.n	800d272 <__kernel_rem_pio2+0x2a2>
 800d444:	ab0c      	add	r3, sp, #48	; 0x30
 800d446:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d44a:	f7f3 f86b 	bl	8000524 <__aeabi_i2d>
 800d44e:	4632      	mov	r2, r6
 800d450:	463b      	mov	r3, r7
 800d452:	f7f3 f8d1 	bl	80005f8 <__aeabi_dmul>
 800d456:	4642      	mov	r2, r8
 800d458:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800d45c:	464b      	mov	r3, r9
 800d45e:	4630      	mov	r0, r6
 800d460:	4639      	mov	r1, r7
 800d462:	f7f3 f8c9 	bl	80005f8 <__aeabi_dmul>
 800d466:	3c01      	subs	r4, #1
 800d468:	4606      	mov	r6, r0
 800d46a:	460f      	mov	r7, r1
 800d46c:	e713      	b.n	800d296 <__kernel_rem_pio2+0x2c6>
 800d46e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800d472:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800d476:	f7f3 f8bf 	bl	80005f8 <__aeabi_dmul>
 800d47a:	4602      	mov	r2, r0
 800d47c:	460b      	mov	r3, r1
 800d47e:	4648      	mov	r0, r9
 800d480:	4651      	mov	r1, sl
 800d482:	f7f2 ff03 	bl	800028c <__adddf3>
 800d486:	3701      	adds	r7, #1
 800d488:	4681      	mov	r9, r0
 800d48a:	468a      	mov	sl, r1
 800d48c:	9b00      	ldr	r3, [sp, #0]
 800d48e:	429f      	cmp	r7, r3
 800d490:	dc02      	bgt.n	800d498 <__kernel_rem_pio2+0x4c8>
 800d492:	9b06      	ldr	r3, [sp, #24]
 800d494:	429f      	cmp	r7, r3
 800d496:	ddea      	ble.n	800d46e <__kernel_rem_pio2+0x49e>
 800d498:	9a06      	ldr	r2, [sp, #24]
 800d49a:	ab48      	add	r3, sp, #288	; 0x120
 800d49c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800d4a0:	e9c6 9a00 	strd	r9, sl, [r6]
 800d4a4:	3c01      	subs	r4, #1
 800d4a6:	e6fa      	b.n	800d29e <__kernel_rem_pio2+0x2ce>
 800d4a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d4aa:	2b02      	cmp	r3, #2
 800d4ac:	dc0b      	bgt.n	800d4c6 <__kernel_rem_pio2+0x4f6>
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	dc39      	bgt.n	800d526 <__kernel_rem_pio2+0x556>
 800d4b2:	d05d      	beq.n	800d570 <__kernel_rem_pio2+0x5a0>
 800d4b4:	9b02      	ldr	r3, [sp, #8]
 800d4b6:	f003 0007 	and.w	r0, r3, #7
 800d4ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d4be:	ecbd 8b02 	vpop	{d8}
 800d4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d4c8:	2b03      	cmp	r3, #3
 800d4ca:	d1f3      	bne.n	800d4b4 <__kernel_rem_pio2+0x4e4>
 800d4cc:	9b05      	ldr	r3, [sp, #20]
 800d4ce:	9500      	str	r5, [sp, #0]
 800d4d0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d4d4:	eb0d 0403 	add.w	r4, sp, r3
 800d4d8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800d4dc:	46a2      	mov	sl, r4
 800d4de:	9b00      	ldr	r3, [sp, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f1aa 0a08 	sub.w	sl, sl, #8
 800d4e6:	dc69      	bgt.n	800d5bc <__kernel_rem_pio2+0x5ec>
 800d4e8:	46aa      	mov	sl, r5
 800d4ea:	f1ba 0f01 	cmp.w	sl, #1
 800d4ee:	f1a4 0408 	sub.w	r4, r4, #8
 800d4f2:	f300 8083 	bgt.w	800d5fc <__kernel_rem_pio2+0x62c>
 800d4f6:	9c05      	ldr	r4, [sp, #20]
 800d4f8:	ab48      	add	r3, sp, #288	; 0x120
 800d4fa:	441c      	add	r4, r3
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	2100      	movs	r1, #0
 800d500:	2d01      	cmp	r5, #1
 800d502:	f300 809a 	bgt.w	800d63a <__kernel_rem_pio2+0x66a>
 800d506:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800d50a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d50e:	f1bb 0f00 	cmp.w	fp, #0
 800d512:	f040 8098 	bne.w	800d646 <__kernel_rem_pio2+0x676>
 800d516:	9b04      	ldr	r3, [sp, #16]
 800d518:	e9c3 7800 	strd	r7, r8, [r3]
 800d51c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d520:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d524:	e7c6      	b.n	800d4b4 <__kernel_rem_pio2+0x4e4>
 800d526:	9e05      	ldr	r6, [sp, #20]
 800d528:	ab48      	add	r3, sp, #288	; 0x120
 800d52a:	441e      	add	r6, r3
 800d52c:	462c      	mov	r4, r5
 800d52e:	2000      	movs	r0, #0
 800d530:	2100      	movs	r1, #0
 800d532:	2c00      	cmp	r4, #0
 800d534:	da33      	bge.n	800d59e <__kernel_rem_pio2+0x5ce>
 800d536:	f1bb 0f00 	cmp.w	fp, #0
 800d53a:	d036      	beq.n	800d5aa <__kernel_rem_pio2+0x5da>
 800d53c:	4602      	mov	r2, r0
 800d53e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d542:	9c04      	ldr	r4, [sp, #16]
 800d544:	e9c4 2300 	strd	r2, r3, [r4]
 800d548:	4602      	mov	r2, r0
 800d54a:	460b      	mov	r3, r1
 800d54c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d550:	f7f2 fe9a 	bl	8000288 <__aeabi_dsub>
 800d554:	ae4a      	add	r6, sp, #296	; 0x128
 800d556:	2401      	movs	r4, #1
 800d558:	42a5      	cmp	r5, r4
 800d55a:	da29      	bge.n	800d5b0 <__kernel_rem_pio2+0x5e0>
 800d55c:	f1bb 0f00 	cmp.w	fp, #0
 800d560:	d002      	beq.n	800d568 <__kernel_rem_pio2+0x598>
 800d562:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d566:	4619      	mov	r1, r3
 800d568:	9b04      	ldr	r3, [sp, #16]
 800d56a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d56e:	e7a1      	b.n	800d4b4 <__kernel_rem_pio2+0x4e4>
 800d570:	9c05      	ldr	r4, [sp, #20]
 800d572:	ab48      	add	r3, sp, #288	; 0x120
 800d574:	441c      	add	r4, r3
 800d576:	2000      	movs	r0, #0
 800d578:	2100      	movs	r1, #0
 800d57a:	2d00      	cmp	r5, #0
 800d57c:	da09      	bge.n	800d592 <__kernel_rem_pio2+0x5c2>
 800d57e:	f1bb 0f00 	cmp.w	fp, #0
 800d582:	d002      	beq.n	800d58a <__kernel_rem_pio2+0x5ba>
 800d584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d588:	4619      	mov	r1, r3
 800d58a:	9b04      	ldr	r3, [sp, #16]
 800d58c:	e9c3 0100 	strd	r0, r1, [r3]
 800d590:	e790      	b.n	800d4b4 <__kernel_rem_pio2+0x4e4>
 800d592:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d596:	f7f2 fe79 	bl	800028c <__adddf3>
 800d59a:	3d01      	subs	r5, #1
 800d59c:	e7ed      	b.n	800d57a <__kernel_rem_pio2+0x5aa>
 800d59e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800d5a2:	f7f2 fe73 	bl	800028c <__adddf3>
 800d5a6:	3c01      	subs	r4, #1
 800d5a8:	e7c3      	b.n	800d532 <__kernel_rem_pio2+0x562>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	e7c8      	b.n	800d542 <__kernel_rem_pio2+0x572>
 800d5b0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d5b4:	f7f2 fe6a 	bl	800028c <__adddf3>
 800d5b8:	3401      	adds	r4, #1
 800d5ba:	e7cd      	b.n	800d558 <__kernel_rem_pio2+0x588>
 800d5bc:	e9da 8900 	ldrd	r8, r9, [sl]
 800d5c0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d5c4:	9b00      	ldr	r3, [sp, #0]
 800d5c6:	3b01      	subs	r3, #1
 800d5c8:	9300      	str	r3, [sp, #0]
 800d5ca:	4632      	mov	r2, r6
 800d5cc:	463b      	mov	r3, r7
 800d5ce:	4640      	mov	r0, r8
 800d5d0:	4649      	mov	r1, r9
 800d5d2:	f7f2 fe5b 	bl	800028c <__adddf3>
 800d5d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d5da:	4602      	mov	r2, r0
 800d5dc:	460b      	mov	r3, r1
 800d5de:	4640      	mov	r0, r8
 800d5e0:	4649      	mov	r1, r9
 800d5e2:	f7f2 fe51 	bl	8000288 <__aeabi_dsub>
 800d5e6:	4632      	mov	r2, r6
 800d5e8:	463b      	mov	r3, r7
 800d5ea:	f7f2 fe4f 	bl	800028c <__adddf3>
 800d5ee:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d5f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d5f6:	ed8a 7b00 	vstr	d7, [sl]
 800d5fa:	e770      	b.n	800d4de <__kernel_rem_pio2+0x50e>
 800d5fc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d600:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d604:	4640      	mov	r0, r8
 800d606:	4632      	mov	r2, r6
 800d608:	463b      	mov	r3, r7
 800d60a:	4649      	mov	r1, r9
 800d60c:	f7f2 fe3e 	bl	800028c <__adddf3>
 800d610:	e9cd 0100 	strd	r0, r1, [sp]
 800d614:	4602      	mov	r2, r0
 800d616:	460b      	mov	r3, r1
 800d618:	4640      	mov	r0, r8
 800d61a:	4649      	mov	r1, r9
 800d61c:	f7f2 fe34 	bl	8000288 <__aeabi_dsub>
 800d620:	4632      	mov	r2, r6
 800d622:	463b      	mov	r3, r7
 800d624:	f7f2 fe32 	bl	800028c <__adddf3>
 800d628:	ed9d 7b00 	vldr	d7, [sp]
 800d62c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d630:	ed84 7b00 	vstr	d7, [r4]
 800d634:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d638:	e757      	b.n	800d4ea <__kernel_rem_pio2+0x51a>
 800d63a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d63e:	f7f2 fe25 	bl	800028c <__adddf3>
 800d642:	3d01      	subs	r5, #1
 800d644:	e75c      	b.n	800d500 <__kernel_rem_pio2+0x530>
 800d646:	9b04      	ldr	r3, [sp, #16]
 800d648:	9a04      	ldr	r2, [sp, #16]
 800d64a:	601f      	str	r7, [r3, #0]
 800d64c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d650:	605c      	str	r4, [r3, #4]
 800d652:	609d      	str	r5, [r3, #8]
 800d654:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d658:	60d3      	str	r3, [r2, #12]
 800d65a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d65e:	6110      	str	r0, [r2, #16]
 800d660:	6153      	str	r3, [r2, #20]
 800d662:	e727      	b.n	800d4b4 <__kernel_rem_pio2+0x4e4>
 800d664:	41700000 	.word	0x41700000
 800d668:	3e700000 	.word	0x3e700000
 800d66c:	00000000 	.word	0x00000000

0800d670 <scalbn>:
 800d670:	b570      	push	{r4, r5, r6, lr}
 800d672:	ec55 4b10 	vmov	r4, r5, d0
 800d676:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d67a:	4606      	mov	r6, r0
 800d67c:	462b      	mov	r3, r5
 800d67e:	b999      	cbnz	r1, 800d6a8 <scalbn+0x38>
 800d680:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d684:	4323      	orrs	r3, r4
 800d686:	d03f      	beq.n	800d708 <scalbn+0x98>
 800d688:	4b35      	ldr	r3, [pc, #212]	; (800d760 <scalbn+0xf0>)
 800d68a:	4629      	mov	r1, r5
 800d68c:	ee10 0a10 	vmov	r0, s0
 800d690:	2200      	movs	r2, #0
 800d692:	f7f2 ffb1 	bl	80005f8 <__aeabi_dmul>
 800d696:	4b33      	ldr	r3, [pc, #204]	; (800d764 <scalbn+0xf4>)
 800d698:	429e      	cmp	r6, r3
 800d69a:	4604      	mov	r4, r0
 800d69c:	460d      	mov	r5, r1
 800d69e:	da10      	bge.n	800d6c2 <scalbn+0x52>
 800d6a0:	a327      	add	r3, pc, #156	; (adr r3, 800d740 <scalbn+0xd0>)
 800d6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a6:	e01f      	b.n	800d6e8 <scalbn+0x78>
 800d6a8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d6ac:	4291      	cmp	r1, r2
 800d6ae:	d10c      	bne.n	800d6ca <scalbn+0x5a>
 800d6b0:	ee10 2a10 	vmov	r2, s0
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	4629      	mov	r1, r5
 800d6b8:	f7f2 fde8 	bl	800028c <__adddf3>
 800d6bc:	4604      	mov	r4, r0
 800d6be:	460d      	mov	r5, r1
 800d6c0:	e022      	b.n	800d708 <scalbn+0x98>
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d6c8:	3936      	subs	r1, #54	; 0x36
 800d6ca:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d6ce:	4296      	cmp	r6, r2
 800d6d0:	dd0d      	ble.n	800d6ee <scalbn+0x7e>
 800d6d2:	2d00      	cmp	r5, #0
 800d6d4:	a11c      	add	r1, pc, #112	; (adr r1, 800d748 <scalbn+0xd8>)
 800d6d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6da:	da02      	bge.n	800d6e2 <scalbn+0x72>
 800d6dc:	a11c      	add	r1, pc, #112	; (adr r1, 800d750 <scalbn+0xe0>)
 800d6de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6e2:	a319      	add	r3, pc, #100	; (adr r3, 800d748 <scalbn+0xd8>)
 800d6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e8:	f7f2 ff86 	bl	80005f8 <__aeabi_dmul>
 800d6ec:	e7e6      	b.n	800d6bc <scalbn+0x4c>
 800d6ee:	1872      	adds	r2, r6, r1
 800d6f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d6f4:	428a      	cmp	r2, r1
 800d6f6:	dcec      	bgt.n	800d6d2 <scalbn+0x62>
 800d6f8:	2a00      	cmp	r2, #0
 800d6fa:	dd08      	ble.n	800d70e <scalbn+0x9e>
 800d6fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d700:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d704:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d708:	ec45 4b10 	vmov	d0, r4, r5
 800d70c:	bd70      	pop	{r4, r5, r6, pc}
 800d70e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d712:	da08      	bge.n	800d726 <scalbn+0xb6>
 800d714:	2d00      	cmp	r5, #0
 800d716:	a10a      	add	r1, pc, #40	; (adr r1, 800d740 <scalbn+0xd0>)
 800d718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d71c:	dac0      	bge.n	800d6a0 <scalbn+0x30>
 800d71e:	a10e      	add	r1, pc, #56	; (adr r1, 800d758 <scalbn+0xe8>)
 800d720:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d724:	e7bc      	b.n	800d6a0 <scalbn+0x30>
 800d726:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d72a:	3236      	adds	r2, #54	; 0x36
 800d72c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d730:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d734:	4620      	mov	r0, r4
 800d736:	4b0c      	ldr	r3, [pc, #48]	; (800d768 <scalbn+0xf8>)
 800d738:	2200      	movs	r2, #0
 800d73a:	e7d5      	b.n	800d6e8 <scalbn+0x78>
 800d73c:	f3af 8000 	nop.w
 800d740:	c2f8f359 	.word	0xc2f8f359
 800d744:	01a56e1f 	.word	0x01a56e1f
 800d748:	8800759c 	.word	0x8800759c
 800d74c:	7e37e43c 	.word	0x7e37e43c
 800d750:	8800759c 	.word	0x8800759c
 800d754:	fe37e43c 	.word	0xfe37e43c
 800d758:	c2f8f359 	.word	0xc2f8f359
 800d75c:	81a56e1f 	.word	0x81a56e1f
 800d760:	43500000 	.word	0x43500000
 800d764:	ffff3cb0 	.word	0xffff3cb0
 800d768:	3c900000 	.word	0x3c900000
 800d76c:	00000000 	.word	0x00000000

0800d770 <floor>:
 800d770:	ec51 0b10 	vmov	r0, r1, d0
 800d774:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d77c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800d780:	2e13      	cmp	r6, #19
 800d782:	ee10 5a10 	vmov	r5, s0
 800d786:	ee10 8a10 	vmov	r8, s0
 800d78a:	460c      	mov	r4, r1
 800d78c:	dc31      	bgt.n	800d7f2 <floor+0x82>
 800d78e:	2e00      	cmp	r6, #0
 800d790:	da14      	bge.n	800d7bc <floor+0x4c>
 800d792:	a333      	add	r3, pc, #204	; (adr r3, 800d860 <floor+0xf0>)
 800d794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d798:	f7f2 fd78 	bl	800028c <__adddf3>
 800d79c:	2200      	movs	r2, #0
 800d79e:	2300      	movs	r3, #0
 800d7a0:	f7f3 f9ba 	bl	8000b18 <__aeabi_dcmpgt>
 800d7a4:	b138      	cbz	r0, 800d7b6 <floor+0x46>
 800d7a6:	2c00      	cmp	r4, #0
 800d7a8:	da53      	bge.n	800d852 <floor+0xe2>
 800d7aa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800d7ae:	4325      	orrs	r5, r4
 800d7b0:	d052      	beq.n	800d858 <floor+0xe8>
 800d7b2:	4c2d      	ldr	r4, [pc, #180]	; (800d868 <floor+0xf8>)
 800d7b4:	2500      	movs	r5, #0
 800d7b6:	4621      	mov	r1, r4
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	e024      	b.n	800d806 <floor+0x96>
 800d7bc:	4f2b      	ldr	r7, [pc, #172]	; (800d86c <floor+0xfc>)
 800d7be:	4137      	asrs	r7, r6
 800d7c0:	ea01 0307 	and.w	r3, r1, r7
 800d7c4:	4303      	orrs	r3, r0
 800d7c6:	d01e      	beq.n	800d806 <floor+0x96>
 800d7c8:	a325      	add	r3, pc, #148	; (adr r3, 800d860 <floor+0xf0>)
 800d7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ce:	f7f2 fd5d 	bl	800028c <__adddf3>
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	f7f3 f99f 	bl	8000b18 <__aeabi_dcmpgt>
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	d0eb      	beq.n	800d7b6 <floor+0x46>
 800d7de:	2c00      	cmp	r4, #0
 800d7e0:	bfbe      	ittt	lt
 800d7e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d7e6:	4133      	asrlt	r3, r6
 800d7e8:	18e4      	addlt	r4, r4, r3
 800d7ea:	ea24 0407 	bic.w	r4, r4, r7
 800d7ee:	2500      	movs	r5, #0
 800d7f0:	e7e1      	b.n	800d7b6 <floor+0x46>
 800d7f2:	2e33      	cmp	r6, #51	; 0x33
 800d7f4:	dd0b      	ble.n	800d80e <floor+0x9e>
 800d7f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d7fa:	d104      	bne.n	800d806 <floor+0x96>
 800d7fc:	ee10 2a10 	vmov	r2, s0
 800d800:	460b      	mov	r3, r1
 800d802:	f7f2 fd43 	bl	800028c <__adddf3>
 800d806:	ec41 0b10 	vmov	d0, r0, r1
 800d80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d80e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800d812:	f04f 37ff 	mov.w	r7, #4294967295
 800d816:	40df      	lsrs	r7, r3
 800d818:	4238      	tst	r0, r7
 800d81a:	d0f4      	beq.n	800d806 <floor+0x96>
 800d81c:	a310      	add	r3, pc, #64	; (adr r3, 800d860 <floor+0xf0>)
 800d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d822:	f7f2 fd33 	bl	800028c <__adddf3>
 800d826:	2200      	movs	r2, #0
 800d828:	2300      	movs	r3, #0
 800d82a:	f7f3 f975 	bl	8000b18 <__aeabi_dcmpgt>
 800d82e:	2800      	cmp	r0, #0
 800d830:	d0c1      	beq.n	800d7b6 <floor+0x46>
 800d832:	2c00      	cmp	r4, #0
 800d834:	da0a      	bge.n	800d84c <floor+0xdc>
 800d836:	2e14      	cmp	r6, #20
 800d838:	d101      	bne.n	800d83e <floor+0xce>
 800d83a:	3401      	adds	r4, #1
 800d83c:	e006      	b.n	800d84c <floor+0xdc>
 800d83e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d842:	2301      	movs	r3, #1
 800d844:	40b3      	lsls	r3, r6
 800d846:	441d      	add	r5, r3
 800d848:	45a8      	cmp	r8, r5
 800d84a:	d8f6      	bhi.n	800d83a <floor+0xca>
 800d84c:	ea25 0507 	bic.w	r5, r5, r7
 800d850:	e7b1      	b.n	800d7b6 <floor+0x46>
 800d852:	2500      	movs	r5, #0
 800d854:	462c      	mov	r4, r5
 800d856:	e7ae      	b.n	800d7b6 <floor+0x46>
 800d858:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d85c:	e7ab      	b.n	800d7b6 <floor+0x46>
 800d85e:	bf00      	nop
 800d860:	8800759c 	.word	0x8800759c
 800d864:	7e37e43c 	.word	0x7e37e43c
 800d868:	bff00000 	.word	0xbff00000
 800d86c:	000fffff 	.word	0x000fffff

0800d870 <_init>:
 800d870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d872:	bf00      	nop
 800d874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d876:	bc08      	pop	{r3}
 800d878:	469e      	mov	lr, r3
 800d87a:	4770      	bx	lr

0800d87c <_fini>:
 800d87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d87e:	bf00      	nop
 800d880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d882:	bc08      	pop	{r3}
 800d884:	469e      	mov	lr, r3
 800d886:	4770      	bx	lr
