
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f070  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  0800f210  0800f210  0001f210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5fc  0800f5fc  000202ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5fc  0800f5fc  0001f5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f604  0800f604  000202ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f604  0800f604  0001f604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f608  0800f608  0001f608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  0800f60c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fe0  200002f0  0800f8f8  000202f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200022d0  0800f8f8  000222d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cf90  00000000  00000000  0002035f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004108  00000000  00000000  0003d2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a30  00000000  00000000  000413f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000146b  00000000  00000000  00042e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c38a  00000000  00000000  00044293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020e36  00000000  00000000  0006061d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3b54  00000000  00000000  00081453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000815c  00000000  00000000  00124fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0012d104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f0 	.word	0x200002f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f1f8 	.word	0x0800f1f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002f4 	.word	0x200002f4
 80001dc:	0800f1f8 	.word	0x0800f1f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <HAL_I2C_ListenCpltCallback>:
static void MX_TIM9_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

extern void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef *hi2c)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f002 f870 	bl	8002fa2 <HAL_I2C_EnableListen_IT>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_I2C_AddrCallback>:

extern void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	803b      	strh	r3, [r7, #0]
	if(TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d110      	bne.n	8000f04 <HAL_I2C_AddrCallback+0x38>
	{
		HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData, 6, I2C_FIRST_AND_LAST_FRAME);
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	2206      	movs	r2, #6
 8000ee6:	490a      	ldr	r1, [pc, #40]	; (8000f10 <HAL_I2C_AddrCallback+0x44>)
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f001 ffe7 	bl	8002ebc <HAL_I2C_Slave_Seq_Receive_IT>
		PWM = RxData[0] * 12;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_I2C_AddrCallback+0x44>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	0052      	lsls	r2, r2, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_I2C_AddrCallback+0x48>)
 8000f00:	801a      	strh	r2, [r3, #0]
	}
	else  // master requesting the data is not supported yet
	{
		Error_Handler();
	}
}
 8000f02:	e001      	b.n	8000f08 <HAL_I2C_AddrCallback+0x3c>
		Error_Handler();
 8000f04:	f000 fc5e 	bl	80017c4 <Error_Handler>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000520 	.word	0x20000520
 8000f14:	20000024 	.word	0x20000024

08000f18 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	count++;
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_I2C_SlaveRxCpltCallback+0x20>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_I2C_SlaveRxCpltCallback+0x20>)
 8000f2a:	801a      	strh	r2, [r3, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	2000051e 	.word	0x2000051e

08000f3c <HAL_I2C_ErrorCallback>:


void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f002 f82c 	bl	8002fa2 <HAL_I2C_EnableListen_IT>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5a:	f001 f883 	bl	8002064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5e:	f000 f843 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f62:	f000 fad7 	bl	8001514 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f66:	f000 f8a9 	bl	80010bc <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f6a:	f000 f95d 	bl	8001228 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000f6e:	f000 f925 	bl	80011bc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f72:	f000 faa5 	bl	80014c0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f76:	f000 fa15 	bl	80013a4 <MX_TIM2_Init>
  MX_TIM9_Init();
 8000f7a:	f000 fa5d 	bl	8001438 <MX_TIM9_Init>
  MX_I2C1_Init();
 8000f7e:	f000 f8ef 	bl	8001160 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000f82:	f00a fd91 	bl	800baa8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	StartupSequence('F');
 8000f86:	2046      	movs	r0, #70	; 0x46
 8000f88:	f000 fb24 	bl	80015d4 <StartupSequence>
	// Keep minimum RPM
	if ( TargetRPM < MinimumRPM ) {
		TargetRPM = MinimumRPM;
	*/

	TIM1->CCR1 = PWM;	  // Set new PWM for channel 1
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <main+0x7c>)
 8000f8e:	881a      	ldrh	r2, [r3, #0]
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <main+0x80>)
 8000f92:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = PWM;	  // Set new PWM for channel 2
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <main+0x7c>)
 8000f96:	881a      	ldrh	r2, [r3, #0]
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <main+0x80>)
 8000f9a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = PWM;	  // Set new PWM for channel 3
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <main+0x7c>)
 8000f9e:	881a      	ldrh	r2, [r3, #0]
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <main+0x80>)
 8000fa2:	63da      	str	r2, [r3, #60]	; 0x3c

	// Transmit RPM value to PC via USB
	len = snprintf(buf, sizeof(buf), "\n\rCurrent RPM: %04.2lf", CurrentRPM);
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <main+0x84>)
 8000fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000faa:	e9cd 2300 	strd	r2, r3, [sp]
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <main+0x88>)
 8000fb0:	2140      	movs	r1, #64	; 0x40
 8000fb2:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <main+0x8c>)
 8000fb4:	f00b ffb0 	bl	800cf18 <sniprintf>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <main+0x90>)
 8000fbe:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS((uint8_t *) buf, len);
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <main+0x90>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <main+0x8c>)
 8000fc8:	f00a fe2c 	bl	800bc24 <CDC_Transmit_FS>
	TIM1->CCR1 = PWM;	  // Set new PWM for channel 1
 8000fcc:	e7de      	b.n	8000f8c <main+0x38>
 8000fce:	bf00      	nop
 8000fd0:	20000024 	.word	0x20000024
 8000fd4:	40010000 	.word	0x40010000
 8000fd8:	20000528 	.word	0x20000528
 8000fdc:	0800f210 	.word	0x0800f210
 8000fe0:	20000530 	.word	0x20000530
 8000fe4:	2000051c 	.word	0x2000051c

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b094      	sub	sp, #80	; 0x50
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	2230      	movs	r2, #48	; 0x30
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f00c f805 	bl	800d006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <SystemClock_Config+0xcc>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <SystemClock_Config+0xcc>)
 8001016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101a:	6413      	str	r3, [r2, #64]	; 0x40
 800101c:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <SystemClock_Config+0xcc>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <SystemClock_Config+0xd0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <SystemClock_Config+0xd0>)
 8001032:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <SystemClock_Config+0xd0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001044:	2301      	movs	r3, #1
 8001046:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001052:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001058:	2319      	movs	r3, #25
 800105a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800105c:	23c0      	movs	r3, #192	; 0xc0
 800105e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001060:	2302      	movs	r3, #2
 8001062:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001064:	2304      	movs	r3, #4
 8001066:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001068:	f107 0320 	add.w	r3, r7, #32
 800106c:	4618      	mov	r0, r3
 800106e:	f004 fed3 	bl	8005e18 <HAL_RCC_OscConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001078:	f000 fba4 	bl	80017c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001080:	2302      	movs	r3, #2
 8001082:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800108e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001092:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2103      	movs	r1, #3
 800109a:	4618      	mov	r0, r3
 800109c:	f005 f934 	bl	8006308 <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010a6:	f000 fb8d 	bl	80017c4 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3750      	adds	r7, #80	; 0x50
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000

080010bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_ADC1_Init+0x98>)
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <MX_ADC1_Init+0x9c>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_ADC1_Init+0x98>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010da:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <MX_ADC1_Init+0x98>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_ADC1_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_ADC1_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_ADC1_Init+0x98>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_ADC1_Init+0x98>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_ADC1_Init+0x98>)
 80010fc:	4a17      	ldr	r2, [pc, #92]	; (800115c <MX_ADC1_Init+0xa0>)
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_ADC1_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_ADC1_Init+0x98>)
 8001108:	2201      	movs	r2, #1
 800110a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_ADC1_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_ADC1_Init+0x98>)
 8001116:	2201      	movs	r2, #1
 8001118:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800111a:	480e      	ldr	r0, [pc, #56]	; (8001154 <MX_ADC1_Init+0x98>)
 800111c:	f001 f838 	bl	8002190 <HAL_ADC_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001126:	f000 fb4d 	bl	80017c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800112a:	2304      	movs	r3, #4
 800112c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800112e:	2301      	movs	r3, #1
 8001130:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001136:	463b      	mov	r3, r7
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_ADC1_Init+0x98>)
 800113c:	f001 f86c 	bl	8002218 <HAL_ADC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001146:	f000 fb3d 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000030c 	.word	0x2000030c
 8001158:	40012000 	.word	0x40012000
 800115c:	0f000001 	.word	0x0f000001

08001160 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <MX_I2C1_Init+0x54>)
 8001168:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_I2C1_Init+0x50>)
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_I2C1_Init+0x58>)
 800116e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001178:	2220      	movs	r2, #32
 800117a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_I2C1_Init+0x50>)
 800117e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001182:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_I2C1_Init+0x50>)
 800119e:	f001 fd49 	bl	8002c34 <HAL_I2C_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a8:	f000 fb0c 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000354 	.word	0x20000354
 80011b4:	40005400 	.word	0x40005400
 80011b8:	000186a0 	.word	0x000186a0

080011bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_SPI1_Init+0x64>)
 80011c2:	4a18      	ldr	r2, [pc, #96]	; (8001224 <MX_SPI1_Init+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_SPI1_Init+0x64>)
 80011c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_SPI1_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_SPI1_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_SPI1_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_SPI1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_SPI1_Init+0x64>)
 80011e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_SPI1_Init+0x64>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <MX_SPI1_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_SPI1_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <MX_SPI1_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_SPI1_Init+0x64>)
 8001208:	220a      	movs	r2, #10
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <MX_SPI1_Init+0x64>)
 800120e:	f005 fa5b 	bl	80066c8 <HAL_SPI_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001218:	f000 fad4 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200003a8 	.word	0x200003a8
 8001224:	40013000 	.word	0x40013000

08001228 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b096      	sub	sp, #88	; 0x58
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800122e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001248:	f107 0320 	add.w	r3, r7, #32
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
 8001258:	615a      	str	r2, [r3, #20]
 800125a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800125c:	463b      	mov	r3, r7
 800125e:	2220      	movs	r2, #32
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f00b fecf 	bl	800d006 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001268:	4b4c      	ldr	r3, [pc, #304]	; (800139c <MX_TIM1_Init+0x174>)
 800126a:	4a4d      	ldr	r2, [pc, #308]	; (80013a0 <MX_TIM1_Init+0x178>)
 800126c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800126e:	4b4b      	ldr	r3, [pc, #300]	; (800139c <MX_TIM1_Init+0x174>)
 8001270:	2200      	movs	r2, #0
 8001272:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b49      	ldr	r3, [pc, #292]	; (800139c <MX_TIM1_Init+0x174>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 800127a:	4b48      	ldr	r3, [pc, #288]	; (800139c <MX_TIM1_Init+0x174>)
 800127c:	f240 727f 	movw	r2, #1919	; 0x77f
 8001280:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	4b46      	ldr	r3, [pc, #280]	; (800139c <MX_TIM1_Init+0x174>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001288:	4b44      	ldr	r3, [pc, #272]	; (800139c <MX_TIM1_Init+0x174>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128e:	4b43      	ldr	r3, [pc, #268]	; (800139c <MX_TIM1_Init+0x174>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001294:	4841      	ldr	r0, [pc, #260]	; (800139c <MX_TIM1_Init+0x174>)
 8001296:	f005 faa0 	bl	80067da <HAL_TIM_Base_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012a0:	f000 fa90 	bl	80017c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012a4:	483d      	ldr	r0, [pc, #244]	; (800139c <MX_TIM1_Init+0x174>)
 80012a6:	f005 fb98 	bl	80069da <HAL_TIM_PWM_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80012b0:	f000 fa88 	bl	80017c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80012b4:	2304      	movs	r3, #4
 80012b6:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80012bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012c0:	4619      	mov	r1, r3
 80012c2:	4836      	ldr	r0, [pc, #216]	; (800139c <MX_TIM1_Init+0x174>)
 80012c4:	f005 feb8 	bl	8007038 <HAL_TIM_SlaveConfigSynchro>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80012ce:	f000 fa79 	bl	80017c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012de:	4619      	mov	r1, r3
 80012e0:	482e      	ldr	r0, [pc, #184]	; (800139c <MX_TIM1_Init+0x174>)
 80012e2:	f006 fc35 	bl	8007b50 <HAL_TIMEx_MasterConfigSynchronization>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80012ec:	f000 fa6a 	bl	80017c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f0:	2360      	movs	r3, #96	; 0x60
 80012f2:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 500;
 80012f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130e:	f107 0320 	add.w	r3, r7, #32
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	4821      	ldr	r0, [pc, #132]	; (800139c <MX_TIM1_Init+0x174>)
 8001318:	f005 fdcc 	bl	8006eb4 <HAL_TIM_PWM_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001322:	f000 fa4f 	bl	80017c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001326:	f107 0320 	add.w	r3, r7, #32
 800132a:	2204      	movs	r2, #4
 800132c:	4619      	mov	r1, r3
 800132e:	481b      	ldr	r0, [pc, #108]	; (800139c <MX_TIM1_Init+0x174>)
 8001330:	f005 fdc0 	bl	8006eb4 <HAL_TIM_PWM_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800133a:	f000 fa43 	bl	80017c4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001342:	f107 0320 	add.w	r3, r7, #32
 8001346:	2208      	movs	r2, #8
 8001348:	4619      	mov	r1, r3
 800134a:	4814      	ldr	r0, [pc, #80]	; (800139c <MX_TIM1_Init+0x174>)
 800134c:	f005 fdb2 	bl	8006eb4 <HAL_TIM_PWM_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8001356:	f000 fa35 	bl	80017c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800136e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001372:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4807      	ldr	r0, [pc, #28]	; (800139c <MX_TIM1_Init+0x174>)
 800137e:	f006 fc55 	bl	8007c2c <HAL_TIMEx_ConfigBreakDeadTime>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8001388:	f000 fa1c 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <MX_TIM1_Init+0x174>)
 800138e:	f000 fbd1 	bl	8001b34 <HAL_TIM_MspPostInit>

}
 8001392:	bf00      	nop
 8001394:	3758      	adds	r7, #88	; 0x58
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000400 	.word	0x20000400
 80013a0:	40010000 	.word	0x40010000

080013a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	463b      	mov	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <MX_TIM2_Init+0x90>)
 80013c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <MX_TIM2_Init+0x90>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <MX_TIM2_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <MX_TIM2_Init+0x90>)
 80013d6:	f04f 32ff 	mov.w	r2, #4294967295
 80013da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <MX_TIM2_Init+0x90>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_TIM2_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	4619      	mov	r1, r3
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <MX_TIM2_Init+0x90>)
 8001400:	f006 fa7c 	bl	80078fc <HAL_TIMEx_HallSensor_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800140a:	f000 f9db 	bl	80017c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800140e:	2350      	movs	r3, #80	; 0x50
 8001410:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001416:	463b      	mov	r3, r7
 8001418:	4619      	mov	r1, r3
 800141a:	4806      	ldr	r0, [pc, #24]	; (8001434 <MX_TIM2_Init+0x90>)
 800141c:	f006 fb98 	bl	8007b50 <HAL_TIMEx_MasterConfigSynchronization>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001426:	f000 f9cd 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000448 	.word	0x20000448

08001438 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	615a      	str	r2, [r3, #20]
 800144e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <MX_TIM9_Init+0x80>)
 8001452:	4a1a      	ldr	r2, [pc, #104]	; (80014bc <MX_TIM9_Init+0x84>)
 8001454:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 9999;
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_TIM9_Init+0x80>)
 8001458:	f242 720f 	movw	r2, #9999	; 0x270f
 800145c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_TIM9_Init+0x80>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9599;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_TIM9_Init+0x80>)
 8001466:	f242 527f 	movw	r2, #9599	; 0x257f
 800146a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_TIM9_Init+0x80>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_TIM9_Init+0x80>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8001478:	480f      	ldr	r0, [pc, #60]	; (80014b8 <MX_TIM9_Init+0x80>)
 800147a:	f005 fa5f 	bl	800693c <HAL_TIM_OC_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8001484:	f000 f99e 	bl	80017c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <MX_TIM9_Init+0x80>)
 80014a0:	f005 fcac 	bl	8006dfc <HAL_TIM_OC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 80014aa:	f000 f98b 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000490 	.word	0x20000490
 80014bc:	40014000 	.word	0x40014000

080014c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_USART1_UART_Init+0x4c>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <MX_USART1_UART_Init+0x50>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <MX_USART1_UART_Init+0x4c>)
 80014cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_USART1_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_USART1_UART_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_USART1_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_USART1_UART_Init+0x4c>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_USART1_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_USART1_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_USART1_UART_Init+0x4c>)
 80014f8:	f006 fbfe 	bl	8007cf8 <HAL_UART_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001502:	f000 f95f 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200004d8 	.word	0x200004d8
 8001510:	40011000 	.word	0x40011000

08001514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b27      	ldr	r3, [pc, #156]	; (80015cc <MX_GPIO_Init+0xb8>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a26      	ldr	r2, [pc, #152]	; (80015cc <MX_GPIO_Init+0xb8>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <MX_GPIO_Init+0xb8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <MX_GPIO_Init+0xb8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <MX_GPIO_Init+0xb8>)
 8001550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <MX_GPIO_Init+0xb8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <MX_GPIO_Init+0xb8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a18      	ldr	r2, [pc, #96]	; (80015cc <MX_GPIO_Init+0xb8>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <MX_GPIO_Init+0xb8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_GPIO_Init+0xb8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <MX_GPIO_Init+0xb8>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_GPIO_Init+0xb8>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80015a0:	480b      	ldr	r0, [pc, #44]	; (80015d0 <MX_GPIO_Init+0xbc>)
 80015a2:	f001 fb2d 	bl	8002c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80015a6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_GPIO_Init+0xbc>)
 80015c0:	f001 f99a 	bl	80028f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020800 	.word	0x40020800

080015d4 <StartupSequence>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef StartupSequence(char Direction) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]

	// Enable I2C in Interrupt mode
	HAL_I2C_EnableListen_IT(&hi2c1);
 80015de:	4841      	ldr	r0, [pc, #260]	; (80016e4 <StartupSequence+0x110>)
 80015e0:	f001 fcdf 	bl	8002fa2 <HAL_I2C_EnableListen_IT>

	// Set first commutation state according to Hall sensors
	if (PrepareCommutation(Direction) == HAL_ERROR) {
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f888 	bl	80016fc <PrepareCommutation>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <StartupSequence+0x22>
		return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e072      	b.n	80016dc <StartupSequence+0x108>
	}

	// Start HallSensor timer
	HAL_TIMEx_HallSensor_Start(&htim2);
 80015f6:	483c      	ldr	r0, [pc, #240]	; (80016e8 <StartupSequence+0x114>)
 80015f8:	f006 fa2a 	bl	8007a50 <HAL_TIMEx_HallSensor_Start>

	// Start all PWM signals on TIM1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015fc:	2100      	movs	r1, #0
 80015fe:	483b      	ldr	r0, [pc, #236]	; (80016ec <StartupSequence+0x118>)
 8001600:	f005 fa44 	bl	8006a8c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001604:	2104      	movs	r1, #4
 8001606:	4839      	ldr	r0, [pc, #228]	; (80016ec <StartupSequence+0x118>)
 8001608:	f005 fa40 	bl	8006a8c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800160c:	2108      	movs	r1, #8
 800160e:	4837      	ldr	r0, [pc, #220]	; (80016ec <StartupSequence+0x118>)
 8001610:	f005 fa3c 	bl	8006a8c <HAL_TIM_PWM_Start>

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 8001614:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <StartupSequence+0x11c>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	4a35      	ldr	r2, [pc, #212]	; (80016f0 <StartupSequence+0x11c>)
 800161a:	f023 0320 	bic.w	r3, r3, #32
 800161e:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 8001620:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <StartupSequence+0x11c>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	4a32      	ldr	r2, [pc, #200]	; (80016f0 <StartupSequence+0x11c>)
 8001626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800162a:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 800162c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800163a:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 800163c:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <StartupSequence+0x120>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4a2c      	ldr	r2, [pc, #176]	; (80016f4 <StartupSequence+0x120>)
 8001642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001646:	60d3      	str	r3, [r2, #12]

	// Start Interrupts
	HAL_TIM_Base_Start_IT(&htim1);
 8001648:	4828      	ldr	r0, [pc, #160]	; (80016ec <StartupSequence+0x118>)
 800164a:	f005 f915 	bl	8006878 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800164e:	4826      	ldr	r0, [pc, #152]	; (80016e8 <StartupSequence+0x114>)
 8001650:	f005 f912 	bl	8006878 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim9);
 8001654:	4828      	ldr	r0, [pc, #160]	; (80016f8 <StartupSequence+0x124>)
 8001656:	f005 f90f 	bl	8006878 <HAL_TIM_Base_Start_IT>

	// Clear all interrupt triggers
	TIM1->SR &= ~TIM_SR_COMIF;		// Clear Commutation interrupt flag
 800165a:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <StartupSequence+0x11c>)
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	4a24      	ldr	r2, [pc, #144]	; (80016f0 <StartupSequence+0x11c>)
 8001660:	f023 0320 	bic.w	r3, r3, #32
 8001664:	6113      	str	r3, [r2, #16]
	TIM1->SR &= ~TIM_SR_BIF;		// Clear Break interrupt flag
 8001666:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <StartupSequence+0x11c>)
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	4a21      	ldr	r2, [pc, #132]	; (80016f0 <StartupSequence+0x11c>)
 800166c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001670:	6113      	str	r3, [r2, #16]
	TIM2->SR &= ~TIM_SR_TIF;		// Clear timer 2 interrupt flag
 8001672:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800167c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001680:	6113      	str	r3, [r2, #16]
	TIM9->SR &= ~TIM_SR_TIF;		// Clear timer 9 interrupt flag
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <StartupSequence+0x120>)
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <StartupSequence+0x120>)
 8001688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800168c:	6113      	str	r3, [r2, #16]

	// Enable interrupts
	TIM1->DIER |= TIM_DIER_COMIE;	// Enable Commutation events in DIER register
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <StartupSequence+0x11c>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	4a17      	ldr	r2, [pc, #92]	; (80016f0 <StartupSequence+0x11c>)
 8001694:	f043 0320 	orr.w	r3, r3, #32
 8001698:	60d3      	str	r3, [r2, #12]
	TIM2->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 2
 800169a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a8:	60d3      	str	r3, [r2, #12]
	TIM9->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 9
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <StartupSequence+0x120>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	4a11      	ldr	r2, [pc, #68]	; (80016f4 <StartupSequence+0x120>)
 80016b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016b4:	60d3      	str	r3, [r2, #12]

	// Write some registers
	TIM1->CR2  |= 0x0005; 			// Set CCPC 1 and CCUS 1 in CR2
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <StartupSequence+0x11c>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <StartupSequence+0x11c>)
 80016bc:	f043 0305 	orr.w	r3, r3, #5
 80016c0:	6053      	str	r3, [r2, #4]
	TIM1->EGR  |= TIM_EGR_COMG; 	// Set COMG bit in EGR for first commutation
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <StartupSequence+0x11c>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <StartupSequence+0x11c>)
 80016c8:	f043 0320 	orr.w	r3, r3, #32
 80016cc:	6153      	str	r3, [r2, #20]
	TIM1->DIER |= TIM_DIER_COMIE; 	// Enable commutation events in DIER register
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <StartupSequence+0x11c>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <StartupSequence+0x11c>)
 80016d4:	f043 0320 	orr.w	r3, r3, #32
 80016d8:	60d3      	str	r3, [r2, #12]
	// TIM1->BDTR |= TIM_BDTR_OSSR;

	return HAL_OK;
 80016da:	2300      	movs	r3, #0

}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000354 	.word	0x20000354
 80016e8:	20000448 	.word	0x20000448
 80016ec:	20000400 	.word	0x20000400
 80016f0:	40010000 	.word	0x40010000
 80016f4:	40014000 	.word	0x40014000
 80016f8:	20000490 	.word	0x20000490

080016fc <PrepareCommutation>:

	return HAL_OK;

}

HAL_StatusTypeDef PrepareCommutation(char Direction) {
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]

	// Read IDR for Hall Sensor status
	uint8_t Hall = (GPIOA->IDR & 0x0007) - 1;
 8001706:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <PrepareCommutation+0xb8>)
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	b2db      	uxtb	r3, r3
 8001712:	3b01      	subs	r3, #1
 8001714:	73fb      	strb	r3, [r7, #15]

	// Edit Hall data according to direction.
	switch (Direction) {
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	2b42      	cmp	r3, #66	; 0x42
 800171a:	d010      	beq.n	800173e <PrepareCommutation+0x42>
 800171c:	2b46      	cmp	r3, #70	; 0x46
 800171e:	d120      	bne.n	8001762 <PrepareCommutation+0x66>
	case 'F':
		Hall += 1; // Select next value in the array to go forward
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	3301      	adds	r3, #1
 8001724:	73fb      	strb	r3, [r7, #15]
		Hall %= 6; // If original was 5 it needs to be 0 to we use % 6
 8001726:	7bfa      	ldrb	r2, [r7, #15]
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <PrepareCommutation+0xbc>)
 800172a:	fba3 1302 	umull	r1, r3, r3, r2
 800172e:	0899      	lsrs	r1, r3, #2
 8001730:	460b      	mov	r3, r1
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	440b      	add	r3, r1
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	73fb      	strb	r3, [r7, #15]
	break;
 800173c:	e013      	b.n	8001766 <PrepareCommutation+0x6a>
	case 'B':
		Hall += 6; // To not go negative in the next step we add 6
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	3306      	adds	r3, #6
 8001742:	73fb      	strb	r3, [r7, #15]
		Hall -= 1; // Select previous value to go backwards
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	3b01      	subs	r3, #1
 8001748:	73fb      	strb	r3, [r7, #15]
		Hall %= 6; // If original was 0 it needs to become 5, this also negates the 6 we added previously
 800174a:	7bfa      	ldrb	r2, [r7, #15]
 800174c:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <PrepareCommutation+0xbc>)
 800174e:	fba3 1302 	umull	r1, r3, r3, r2
 8001752:	0899      	lsrs	r1, r3, #2
 8001754:	460b      	mov	r3, r1
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	440b      	add	r3, r1
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	73fb      	strb	r3, [r7, #15]
	break;
 8001760:	e001      	b.n	8001766 <PrepareCommutation+0x6a>
	default:
		return HAL_ERROR; // If F or B is not supplied the function should return with an error
 8001762:	2301      	movs	r3, #1
 8001764:	e020      	b.n	80017a8 <PrepareCommutation+0xac>
	break;
	}

	// Set Registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	4914      	ldr	r1, [pc, #80]	; (80017bc <PrepareCommutation+0xc0>)
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	440b      	add	r3, r1
 8001774:	881a      	ldrh	r2, [r3, #0]
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <PrepareCommutation+0xc4>)
 8001778:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	490f      	ldr	r1, [pc, #60]	; (80017bc <PrepareCommutation+0xc0>)
 800177e:	4613      	mov	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	440b      	add	r3, r1
 8001788:	3304      	adds	r3, #4
 800178a:	881a      	ldrh	r2, [r3, #0]
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <PrepareCommutation+0xc4>)
 800178e:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 8001790:	7bfa      	ldrb	r2, [r7, #15]
 8001792:	490a      	ldr	r1, [pc, #40]	; (80017bc <PrepareCommutation+0xc0>)
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	440b      	add	r3, r1
 800179e:	3302      	adds	r3, #2
 80017a0:	881a      	ldrh	r2, [r3, #0]
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <PrepareCommutation+0xc4>)
 80017a4:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 80017a6:	2300      	movs	r3, #0

}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	40020000 	.word	0x40020000
 80017b8:	aaaaaaab 	.word	0xaaaaaaab
 80017bc:	20000000 	.word	0x20000000
 80017c0:	40010000 	.word	0x40010000

080017c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017cc:	e7fe      	b.n	80017cc <Error_Handler+0x8>
	...

080017d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_MspInit+0x4c>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a0f      	ldr	r2, [pc, #60]	; (800181c <HAL_MspInit+0x4c>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_MspInit+0x4c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_MspInit+0x4c>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <HAL_MspInit+0x4c>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_MspInit+0x4c>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800

08001820 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a17      	ldr	r2, [pc, #92]	; (800189c <HAL_ADC_MspInit+0x7c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d127      	bne.n	8001892 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_ADC_MspInit+0x80>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	4a15      	ldr	r2, [pc, #84]	; (80018a0 <HAL_ADC_MspInit+0x80>)
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	6453      	str	r3, [r2, #68]	; 0x44
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <HAL_ADC_MspInit+0x80>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_ADC_MspInit+0x80>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <HAL_ADC_MspInit+0x80>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_ADC_MspInit+0x80>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800187a:	2310      	movs	r3, #16
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187e:	2303      	movs	r3, #3
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <HAL_ADC_MspInit+0x84>)
 800188e:	f001 f833 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3728      	adds	r7, #40	; 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40012000 	.word	0x40012000
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020000 	.word	0x40020000

080018a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a21      	ldr	r2, [pc, #132]	; (800194c <HAL_I2C_MspInit+0xa4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d13b      	bne.n	8001942 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_I2C_MspInit+0xa8>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a1f      	ldr	r2, [pc, #124]	; (8001950 <HAL_I2C_MspInit+0xa8>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <HAL_I2C_MspInit+0xa8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e6:	23c0      	movs	r3, #192	; 0xc0
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ea:	2312      	movs	r3, #18
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018f6:	2304      	movs	r3, #4
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	4814      	ldr	r0, [pc, #80]	; (8001954 <HAL_I2C_MspInit+0xac>)
 8001902:	f000 fff9 	bl	80028f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_I2C_MspInit+0xa8>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	4a10      	ldr	r2, [pc, #64]	; (8001950 <HAL_I2C_MspInit+0xa8>)
 8001910:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001914:	6413      	str	r3, [r2, #64]	; 0x40
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_I2C_MspInit+0xa8>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	201f      	movs	r0, #31
 8001928:	f000 ff7f 	bl	800282a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800192c:	201f      	movs	r0, #31
 800192e:	f000 ff98 	bl	8002862 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	2020      	movs	r0, #32
 8001938:	f000 ff77 	bl	800282a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800193c:	2020      	movs	r0, #32
 800193e:	f000 ff90 	bl	8002862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	; 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40005400 	.word	0x40005400
 8001950:	40023800 	.word	0x40023800
 8001954:	40020400 	.word	0x40020400

08001958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a19      	ldr	r2, [pc, #100]	; (80019dc <HAL_SPI_MspInit+0x84>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d12b      	bne.n	80019d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <HAL_SPI_MspInit+0x88>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <HAL_SPI_MspInit+0x88>)
 8001984:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001988:	6453      	str	r3, [r2, #68]	; 0x44
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_SPI_MspInit+0x88>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <HAL_SPI_MspInit+0x88>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a10      	ldr	r2, [pc, #64]	; (80019e0 <HAL_SPI_MspInit+0x88>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <HAL_SPI_MspInit+0x88>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019b2:	23e0      	movs	r3, #224	; 0xe0
 80019b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019c2:	2305      	movs	r3, #5
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <HAL_SPI_MspInit+0x8c>)
 80019ce:	f000 ff93 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	; 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40013000 	.word	0x40013000
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020000 	.word	0x40020000

080019e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <HAL_TIM_Base_MspInit+0x58>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d11d      	bne.n	8001a36 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_TIM_Base_MspInit+0x5c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <HAL_TIM_Base_MspInit+0x5c>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_TIM_Base_MspInit+0x5c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2018      	movs	r0, #24
 8001a1c:	f000 ff05 	bl	800282a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001a20:	2018      	movs	r0, #24
 8001a22:	f000 ff1e 	bl	8002862 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	201a      	movs	r0, #26
 8001a2c:	f000 fefd 	bl	800282a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a30:	201a      	movs	r0, #26
 8001a32:	f000 ff16 	bl	8002862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40010000 	.word	0x40010000
 8001a44:	40023800 	.word	0x40023800

08001a48 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a68:	d133      	bne.n	8001ad2 <HAL_TIMEx_HallSensor_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a13      	ldr	r2, [pc, #76]	; (8001adc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001aa2:	2307      	movs	r3, #7
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4808      	ldr	r0, [pc, #32]	; (8001ae0 <HAL_TIMEx_HallSensor_MspInit+0x98>)
 8001abe:	f000 ff1b 	bl	80028f8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	201c      	movs	r0, #28
 8001ac8:	f000 feaf 	bl	800282a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001acc:	201c      	movs	r0, #28
 8001ace:	f000 fec8 	bl	8002862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM9)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <HAL_TIM_OC_MspInit+0x48>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d115      	bne.n	8001b22 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_TIM_OC_MspInit+0x4c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <HAL_TIM_OC_MspInit+0x4c>)
 8001b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b04:	6453      	str	r3, [r2, #68]	; 0x44
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_TIM_OC_MspInit+0x4c>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	2018      	movs	r0, #24
 8001b18:	f000 fe87 	bl	800282a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b1c:	2018      	movs	r0, #24
 8001b1e:	f000 fea0 	bl	8002862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40014000 	.word	0x40014000
 8001b30:	40023800 	.word	0x40023800

08001b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a22      	ldr	r2, [pc, #136]	; (8001bdc <HAL_TIM_MspPostInit+0xa8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d13d      	bne.n	8001bd2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <HAL_TIM_MspPostInit+0xac>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a20      	ldr	r2, [pc, #128]	; (8001be0 <HAL_TIM_MspPostInit+0xac>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <HAL_TIM_MspPostInit+0xac>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_TIM_MspPostInit+0xac>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_TIM_MspPostInit+0xac>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_TIM_MspPostInit+0xac>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b8e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480e      	ldr	r0, [pc, #56]	; (8001be4 <HAL_TIM_MspPostInit+0xb0>)
 8001bac:	f000 fea4 	bl	80028f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001bb0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4806      	ldr	r0, [pc, #24]	; (8001be8 <HAL_TIM_MspPostInit+0xb4>)
 8001bce:	f000 fe93 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40010000 	.word	0x40010000
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020400 	.word	0x40020400
 8001be8:	40020000 	.word	0x40020000

08001bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a28      	ldr	r2, [pc, #160]	; (8001cac <HAL_UART_MspInit+0xc0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d14a      	bne.n	8001ca4 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <HAL_UART_MspInit+0xc4>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	4a26      	ldr	r2, [pc, #152]	; (8001cb0 <HAL_UART_MspInit+0xc4>)
 8001c18:	f043 0310 	orr.w	r3, r3, #16
 8001c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1e:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_UART_MspInit+0xc4>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_UART_MspInit+0xc4>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <HAL_UART_MspInit+0xc4>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_UART_MspInit+0xc4>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_UART_MspInit+0xc4>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a18      	ldr	r2, [pc, #96]	; (8001cb0 <HAL_UART_MspInit+0xc4>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_UART_MspInit+0xc4>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c74:	2307      	movs	r3, #7
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <HAL_UART_MspInit+0xc8>)
 8001c80:	f000 fe3a 	bl	80028f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c84:	2308      	movs	r3, #8
 8001c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c94:	2307      	movs	r3, #7
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <HAL_UART_MspInit+0xcc>)
 8001ca0:	f000 fe2a 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	3728      	adds	r7, #40	; 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40011000 	.word	0x40011000
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	40020400 	.word	0x40020400

08001cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <NMI_Handler+0x4>

08001cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <HardFault_Handler+0x4>

08001cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <MemManage_Handler+0x4>

08001cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <BusFault_Handler+0x4>

08001cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <UsageFault_Handler+0x4>

08001cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d08:	f000 f9fe 	bl	8002108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	CurrentRPM = 0;
 8001d14:	4907      	ldr	r1, [pc, #28]	; (8001d34 <TIM1_BRK_TIM9_IRQHandler+0x24>)
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	e9c1 2300 	strd	r2, r3, [r1]

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <TIM1_BRK_TIM9_IRQHandler+0x28>)
 8001d24:	f004 ff62 	bl	8006bec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <TIM1_BRK_TIM9_IRQHandler+0x2c>)
 8001d2a:	f004 ff5f 	bl	8006bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000528 	.word	0x20000528
 8001d38:	20000400 	.word	0x20000400
 8001d3c:	20000490 	.word	0x20000490

08001d40 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	// Set next Commutation states
	PrepareCommutation('F');
 8001d44:	2046      	movs	r0, #70	; 0x46
 8001d46:	f7ff fcd9 	bl	80016fc <PrepareCommutation>

	// Reset COMIF in SR register
	TIM1->SR &= ~TIM_SR_COMIF;
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8001d50:	f023 0320 	bic.w	r3, r3, #32
 8001d54:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d56:	4803      	ldr	r0, [pc, #12]	; (8001d64 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 8001d58:	f004 ff48 	bl	8006bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40010000 	.word	0x40010000
 8001d64:	20000400 	.word	0x20000400

08001d68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	uint32_t HallTime = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4825      	ldr	r0, [pc, #148]	; (8001e08 <TIM2_IRQHandler+0xa0>)
 8001d72:	f005 f9a3 	bl	80070bc <HAL_TIM_ReadCapturedValue>
 8001d76:	6078      	str	r0, [r7, #4]
	if ( HallTime > 0 ) {
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d026      	beq.n	8001dcc <TIM2_IRQHandler+0x64>
		CurrentRPM = 1 / ((HallTime * 6.0 / Fapb1clk) / 60);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe fbc8 	bl	8000514 <__aeabi_ui2d>
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <TIM2_IRQHandler+0xa4>)
 8001d8a:	f7fe fc3d 	bl	8000608 <__aeabi_dmul>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	a31a      	add	r3, pc, #104	; (adr r3, 8001e00 <TIM2_IRQHandler+0x98>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe fd5e 	bl	800085c <__aeabi_ddiv>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <TIM2_IRQHandler+0xa8>)
 8001dae:	f7fe fd55 	bl	800085c <__aeabi_ddiv>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	f04f 0000 	mov.w	r0, #0
 8001dba:	4916      	ldr	r1, [pc, #88]	; (8001e14 <TIM2_IRQHandler+0xac>)
 8001dbc:	f7fe fd4e 	bl	800085c <__aeabi_ddiv>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4914      	ldr	r1, [pc, #80]	; (8001e18 <TIM2_IRQHandler+0xb0>)
 8001dc6:	e9c1 2300 	strd	r2, r3, [r1]
 8001dca:	e006      	b.n	8001dda <TIM2_IRQHandler+0x72>
	} else {
		CurrentRPM = 0;
 8001dcc:	4912      	ldr	r1, [pc, #72]	; (8001e18 <TIM2_IRQHandler+0xb0>)
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	e9c1 2300 	strd	r2, r3, [r1]
	// TIM1->CCR2 = PWM;	  // Set new PWM for channel 2
	// TIM1->CCR3 = PWM;	  // Set new PWM for channel 3
	// TIM1->CR1 &= ~0x0002; // Enable Update Events

	// Reset Timer 9 counter.
	TIM9->CNT = 0x0;
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <TIM2_IRQHandler+0xb4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	625a      	str	r2, [r3, #36]	; 0x24

	// Set COMG bit in EGR
	TIM1->EGR |= TIM_EGR_COMG;
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <TIM2_IRQHandler+0xb8>)
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <TIM2_IRQHandler+0xb8>)
 8001de6:	f043 0320 	orr.w	r3, r3, #32
 8001dea:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dec:	4806      	ldr	r0, [pc, #24]	; (8001e08 <TIM2_IRQHandler+0xa0>)
 8001dee:	f004 fefd 	bl	8006bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	f3af 8000 	nop.w
 8001e00:	00000000 	.word	0x00000000
 8001e04:	4196e360 	.word	0x4196e360
 8001e08:	20000448 	.word	0x20000448
 8001e0c:	40180000 	.word	0x40180000
 8001e10:	404e0000 	.word	0x404e0000
 8001e14:	3ff00000 	.word	0x3ff00000
 8001e18:	20000528 	.word	0x20000528
 8001e1c:	40014000 	.word	0x40014000
 8001e20:	40010000 	.word	0x40010000

08001e24 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <I2C1_EV_IRQHandler+0x10>)
 8001e2a:	f001 f8f0 	bl	800300e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000354 	.word	0x20000354

08001e38 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <I2C1_ER_IRQHandler+0x10>)
 8001e3e:	f001 fa39 	bl	80032b4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000354 	.word	0x20000354

08001e4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <OTG_FS_IRQHandler+0x10>)
 8001e52:	f002 feb4 	bl	8004bbe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20001a58 	.word	0x20001a58

08001e60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return 1;
 8001e64:	2301      	movs	r3, #1
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <_kill>:

int _kill(int pid, int sig)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e7a:	f00b f917 	bl	800d0ac <__errno>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2216      	movs	r2, #22
 8001e82:	601a      	str	r2, [r3, #0]
  return -1;
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_exit>:

void _exit (int status)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ffe7 	bl	8001e70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ea2:	e7fe      	b.n	8001ea2 <_exit+0x12>

08001ea4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	e00a      	b.n	8001ecc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eb6:	f3af 8000 	nop.w
 8001eba:	4601      	mov	r1, r0
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	60ba      	str	r2, [r7, #8]
 8001ec2:	b2ca      	uxtb	r2, r1
 8001ec4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	dbf0      	blt.n	8001eb6 <_read+0x12>
  }

  return len;
 8001ed4:	687b      	ldr	r3, [r7, #4]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	e009      	b.n	8001f04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	60ba      	str	r2, [r7, #8]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	3301      	adds	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	dbf1      	blt.n	8001ef0 <_write+0x12>
  }
  return len;
 8001f0c:	687b      	ldr	r3, [r7, #4]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_close>:

int _close(int file)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_isatty>:

int _isatty(int file)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f56:	2301      	movs	r3, #1
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f88:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <_sbrk+0x5c>)
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <_sbrk+0x60>)
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <_sbrk+0x64>)
 8001f9e:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <_sbrk+0x68>)
 8001fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <_sbrk+0x64>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d207      	bcs.n	8001fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb0:	f00b f87c 	bl	800d0ac <__errno>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	e009      	b.n	8001fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <_sbrk+0x64>)
 8001fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20020000 	.word	0x20020000
 8001fe0:	00000400 	.word	0x00000400
 8001fe4:	20000570 	.word	0x20000570
 8001fe8:	200022d0 	.word	0x200022d0

08001fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <SystemInit+0x20>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <SystemInit+0x20>)
 8001ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002048 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002014:	480d      	ldr	r0, [pc, #52]	; (800204c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002016:	490e      	ldr	r1, [pc, #56]	; (8002050 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002018:	4a0e      	ldr	r2, [pc, #56]	; (8002054 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800201c:	e002      	b.n	8002024 <LoopCopyDataInit>

0800201e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002022:	3304      	adds	r3, #4

08002024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002028:	d3f9      	bcc.n	800201e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202a:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800202c:	4c0b      	ldr	r4, [pc, #44]	; (800205c <LoopFillZerobss+0x26>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002030:	e001      	b.n	8002036 <LoopFillZerobss>

08002032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002034:	3204      	adds	r2, #4

08002036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002038:	d3fb      	bcc.n	8002032 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800203a:	f7ff ffd7 	bl	8001fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800203e:	f00b f83b 	bl	800d0b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002042:	f7fe ff87 	bl	8000f54 <main>
  bx  lr    
 8002046:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800204c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002050:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8002054:	0800f60c 	.word	0x0800f60c
  ldr r2, =_sbss
 8002058:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 800205c:	200022d0 	.word	0x200022d0

08002060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002060:	e7fe      	b.n	8002060 <ADC_IRQHandler>
	...

08002064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <HAL_Init+0x40>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <HAL_Init+0x40>)
 800206e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_Init+0x40>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_Init+0x40>)
 800207a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800207e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_Init+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <HAL_Init+0x40>)
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800208c:	2003      	movs	r0, #3
 800208e:	f000 fbc1 	bl	8002814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002092:	200f      	movs	r0, #15
 8002094:	f000 f808 	bl	80020a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002098:	f7ff fb9a 	bl	80017d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023c00 	.word	0x40023c00

080020a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_InitTick+0x54>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_InitTick+0x58>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	4619      	mov	r1, r3
 80020ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020be:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fbd9 	bl	800287e <HAL_SYSTICK_Config>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00e      	b.n	80020f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b0f      	cmp	r3, #15
 80020da:	d80a      	bhi.n	80020f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020dc:	2200      	movs	r2, #0
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f000 fba1 	bl	800282a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e8:	4a06      	ldr	r2, [pc, #24]	; (8002104 <HAL_InitTick+0x5c>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e000      	b.n	80020f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000028 	.word	0x20000028
 8002100:	20000030 	.word	0x20000030
 8002104:	2000002c 	.word	0x2000002c

08002108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_IncTick+0x20>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_IncTick+0x24>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4413      	add	r3, r2
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <HAL_IncTick+0x24>)
 800211a:	6013      	str	r3, [r2, #0]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000030 	.word	0x20000030
 800212c:	20000574 	.word	0x20000574

08002130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return uwTick;
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_GetTick+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000574 	.word	0x20000574

08002148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002150:	f7ff ffee 	bl	8002130 <HAL_GetTick>
 8002154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d005      	beq.n	800216e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_Delay+0x44>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800216e:	bf00      	nop
 8002170:	f7ff ffde 	bl	8002130 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	429a      	cmp	r2, r3
 800217e:	d8f7      	bhi.n	8002170 <HAL_Delay+0x28>
  {
  }
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000030 	.word	0x20000030

08002190 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e033      	b.n	800220e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff fb36 	bl	8001820 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d118      	bne.n	8002200 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021d6:	f023 0302 	bic.w	r3, r3, #2
 80021da:	f043 0202 	orr.w	r2, r3, #2
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f94a 	bl	800247c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f023 0303 	bic.w	r3, r3, #3
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
 80021fe:	e001      	b.n	8002204 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x1c>
 8002230:	2302      	movs	r3, #2
 8002232:	e113      	b.n	800245c <HAL_ADC_ConfigChannel+0x244>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b09      	cmp	r3, #9
 8002242:	d925      	bls.n	8002290 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68d9      	ldr	r1, [r3, #12]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	4613      	mov	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4413      	add	r3, r2
 8002258:	3b1e      	subs	r3, #30
 800225a:	2207      	movs	r2, #7
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43da      	mvns	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	400a      	ands	r2, r1
 8002268:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68d9      	ldr	r1, [r3, #12]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	4618      	mov	r0, r3
 800227c:	4603      	mov	r3, r0
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4403      	add	r3, r0
 8002282:	3b1e      	subs	r3, #30
 8002284:	409a      	lsls	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	e022      	b.n	80022d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6919      	ldr	r1, [r3, #16]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	2207      	movs	r2, #7
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	400a      	ands	r2, r1
 80022b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6919      	ldr	r1, [r3, #16]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4618      	mov	r0, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4403      	add	r3, r0
 80022cc:	409a      	lsls	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d824      	bhi.n	8002328 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	3b05      	subs	r3, #5
 80022f0:	221f      	movs	r2, #31
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	400a      	ands	r2, r1
 80022fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	4618      	mov	r0, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	3b05      	subs	r3, #5
 800231a:	fa00 f203 	lsl.w	r2, r0, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	635a      	str	r2, [r3, #52]	; 0x34
 8002326:	e04c      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b0c      	cmp	r3, #12
 800232e:	d824      	bhi.n	800237a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	3b23      	subs	r3, #35	; 0x23
 8002342:	221f      	movs	r2, #31
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43da      	mvns	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	400a      	ands	r2, r1
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	3b23      	subs	r3, #35	; 0x23
 800236c:	fa00 f203 	lsl.w	r2, r0, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
 8002378:	e023      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	3b41      	subs	r3, #65	; 0x41
 800238c:	221f      	movs	r2, #31
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	400a      	ands	r2, r1
 800239a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	3b41      	subs	r3, #65	; 0x41
 80023b6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c2:	4b29      	ldr	r3, [pc, #164]	; (8002468 <HAL_ADC_ConfigChannel+0x250>)
 80023c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a28      	ldr	r2, [pc, #160]	; (800246c <HAL_ADC_ConfigChannel+0x254>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d10f      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1d8>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b12      	cmp	r3, #18
 80023d6:	d10b      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a1d      	ldr	r2, [pc, #116]	; (800246c <HAL_ADC_ConfigChannel+0x254>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d12b      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x23a>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <HAL_ADC_ConfigChannel+0x258>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d003      	beq.n	800240c <HAL_ADC_ConfigChannel+0x1f4>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b11      	cmp	r3, #17
 800240a:	d122      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a11      	ldr	r2, [pc, #68]	; (8002470 <HAL_ADC_ConfigChannel+0x258>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d111      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <HAL_ADC_ConfigChannel+0x25c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a11      	ldr	r2, [pc, #68]	; (8002478 <HAL_ADC_ConfigChannel+0x260>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	0c9a      	lsrs	r2, r3, #18
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002444:	e002      	b.n	800244c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	3b01      	subs	r3, #1
 800244a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f9      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	40012300 	.word	0x40012300
 800246c:	40012000 	.word	0x40012000
 8002470:	10000012 	.word	0x10000012
 8002474:	20000028 	.word	0x20000028
 8002478:	431bde83 	.word	0x431bde83

0800247c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002484:	4b79      	ldr	r3, [pc, #484]	; (800266c <ADC_Init+0x1f0>)
 8002486:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	021a      	lsls	r2, r3, #8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6859      	ldr	r1, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6899      	ldr	r1, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	4a58      	ldr	r2, [pc, #352]	; (8002670 <ADC_Init+0x1f4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d022      	beq.n	800255a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002522:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002544:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6899      	ldr	r1, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	e00f      	b.n	800257a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002568:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002578:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0202 	bic.w	r2, r2, #2
 8002588:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6899      	ldr	r1, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	7e1b      	ldrb	r3, [r3, #24]
 8002594:	005a      	lsls	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01b      	beq.n	80025e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6859      	ldr	r1, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	3b01      	subs	r3, #1
 80025d4:	035a      	lsls	r2, r3, #13
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	e007      	b.n	80025f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	3b01      	subs	r3, #1
 800260c:	051a      	lsls	r2, r3, #20
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002624:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6899      	ldr	r1, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002632:	025a      	lsls	r2, r3, #9
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6899      	ldr	r1, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	029a      	lsls	r2, r3, #10
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	609a      	str	r2, [r3, #8]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	40012300 	.word	0x40012300
 8002670:	0f000001 	.word	0x0f000001

08002674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002690:	4013      	ands	r3, r2
 8002692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800269c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a6:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	60d3      	str	r3, [r2, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <__NVIC_GetPriorityGrouping+0x18>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 0307 	and.w	r3, r3, #7
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	db0b      	blt.n	8002702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	4907      	ldr	r1, [pc, #28]	; (8002710 <__NVIC_EnableIRQ+0x38>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2001      	movs	r0, #1
 80026fa:	fa00 f202 	lsl.w	r2, r0, r2
 80026fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000e100 	.word	0xe000e100

08002714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	6039      	str	r1, [r7, #0]
 800271e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	2b00      	cmp	r3, #0
 8002726:	db0a      	blt.n	800273e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	490c      	ldr	r1, [pc, #48]	; (8002760 <__NVIC_SetPriority+0x4c>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	0112      	lsls	r2, r2, #4
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	440b      	add	r3, r1
 8002738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800273c:	e00a      	b.n	8002754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4908      	ldr	r1, [pc, #32]	; (8002764 <__NVIC_SetPriority+0x50>)
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	3b04      	subs	r3, #4
 800274c:	0112      	lsls	r2, r2, #4
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	440b      	add	r3, r1
 8002752:	761a      	strb	r2, [r3, #24]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000e100 	.word	0xe000e100
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	; 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f1c3 0307 	rsb	r3, r3, #7
 8002782:	2b04      	cmp	r3, #4
 8002784:	bf28      	it	cs
 8002786:	2304      	movcs	r3, #4
 8002788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3304      	adds	r3, #4
 800278e:	2b06      	cmp	r3, #6
 8002790:	d902      	bls.n	8002798 <NVIC_EncodePriority+0x30>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3b03      	subs	r3, #3
 8002796:	e000      	b.n	800279a <NVIC_EncodePriority+0x32>
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	f04f 32ff 	mov.w	r2, #4294967295
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43da      	mvns	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	401a      	ands	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b0:	f04f 31ff 	mov.w	r1, #4294967295
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	43d9      	mvns	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c0:	4313      	orrs	r3, r2
         );
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3724      	adds	r7, #36	; 0x24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e0:	d301      	bcc.n	80027e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027e2:	2301      	movs	r3, #1
 80027e4:	e00f      	b.n	8002806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e6:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <SysTick_Config+0x40>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ee:	210f      	movs	r1, #15
 80027f0:	f04f 30ff 	mov.w	r0, #4294967295
 80027f4:	f7ff ff8e 	bl	8002714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <SysTick_Config+0x40>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027fe:	4b04      	ldr	r3, [pc, #16]	; (8002810 <SysTick_Config+0x40>)
 8002800:	2207      	movs	r2, #7
 8002802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	e000e010 	.word	0xe000e010

08002814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ff29 	bl	8002674 <__NVIC_SetPriorityGrouping>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800283c:	f7ff ff3e 	bl	80026bc <__NVIC_GetPriorityGrouping>
 8002840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68b9      	ldr	r1, [r7, #8]
 8002846:	6978      	ldr	r0, [r7, #20]
 8002848:	f7ff ff8e 	bl	8002768 <NVIC_EncodePriority>
 800284c:	4602      	mov	r2, r0
 800284e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff5d 	bl	8002714 <__NVIC_SetPriority>
}
 800285a:	bf00      	nop
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800286c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff31 	bl	80026d8 <__NVIC_EnableIRQ>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ffa2 	bl	80027d0 <SysTick_Config>
 800288c:	4603      	mov	r3, r0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d004      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2280      	movs	r2, #128	; 0x80
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e00c      	b.n	80028ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2205      	movs	r2, #5
 80028b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028e8:	b2db      	uxtb	r3, r3
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e159      	b.n	8002bc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002914:	2201      	movs	r2, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	429a      	cmp	r2, r3
 800292e:	f040 8148 	bne.w	8002bc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d005      	beq.n	800294a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002946:	2b02      	cmp	r3, #2
 8002948:	d130      	bne.n	80029ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	2203      	movs	r2, #3
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4013      	ands	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002980:	2201      	movs	r2, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 0201 	and.w	r2, r3, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d017      	beq.n	80029e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d123      	bne.n	8002a3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	08da      	lsrs	r2, r3, #3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3208      	adds	r2, #8
 80029fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	08da      	lsrs	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3208      	adds	r2, #8
 8002a36:	69b9      	ldr	r1, [r7, #24]
 8002a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0203 	and.w	r2, r3, #3
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80a2 	beq.w	8002bc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b57      	ldr	r3, [pc, #348]	; (8002be0 <HAL_GPIO_Init+0x2e8>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	4a56      	ldr	r2, [pc, #344]	; (8002be0 <HAL_GPIO_Init+0x2e8>)
 8002a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8e:	4b54      	ldr	r3, [pc, #336]	; (8002be0 <HAL_GPIO_Init+0x2e8>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a9a:	4a52      	ldr	r2, [pc, #328]	; (8002be4 <HAL_GPIO_Init+0x2ec>)
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	089b      	lsrs	r3, r3, #2
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	220f      	movs	r2, #15
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a49      	ldr	r2, [pc, #292]	; (8002be8 <HAL_GPIO_Init+0x2f0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d019      	beq.n	8002afa <HAL_GPIO_Init+0x202>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a48      	ldr	r2, [pc, #288]	; (8002bec <HAL_GPIO_Init+0x2f4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_GPIO_Init+0x1fe>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a47      	ldr	r2, [pc, #284]	; (8002bf0 <HAL_GPIO_Init+0x2f8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00d      	beq.n	8002af2 <HAL_GPIO_Init+0x1fa>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a46      	ldr	r2, [pc, #280]	; (8002bf4 <HAL_GPIO_Init+0x2fc>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <HAL_GPIO_Init+0x1f6>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a45      	ldr	r2, [pc, #276]	; (8002bf8 <HAL_GPIO_Init+0x300>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d101      	bne.n	8002aea <HAL_GPIO_Init+0x1f2>
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	e008      	b.n	8002afc <HAL_GPIO_Init+0x204>
 8002aea:	2307      	movs	r3, #7
 8002aec:	e006      	b.n	8002afc <HAL_GPIO_Init+0x204>
 8002aee:	2303      	movs	r3, #3
 8002af0:	e004      	b.n	8002afc <HAL_GPIO_Init+0x204>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e002      	b.n	8002afc <HAL_GPIO_Init+0x204>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_GPIO_Init+0x204>
 8002afa:	2300      	movs	r3, #0
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	f002 0203 	and.w	r2, r2, #3
 8002b02:	0092      	lsls	r2, r2, #2
 8002b04:	4093      	lsls	r3, r2
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b0c:	4935      	ldr	r1, [pc, #212]	; (8002be4 <HAL_GPIO_Init+0x2ec>)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	3302      	adds	r3, #2
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b1a:	4b38      	ldr	r3, [pc, #224]	; (8002bfc <HAL_GPIO_Init+0x304>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b3e:	4a2f      	ldr	r2, [pc, #188]	; (8002bfc <HAL_GPIO_Init+0x304>)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b44:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <HAL_GPIO_Init+0x304>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b68:	4a24      	ldr	r2, [pc, #144]	; (8002bfc <HAL_GPIO_Init+0x304>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b6e:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <HAL_GPIO_Init+0x304>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b92:	4a1a      	ldr	r2, [pc, #104]	; (8002bfc <HAL_GPIO_Init+0x304>)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b98:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <HAL_GPIO_Init+0x304>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bbc:	4a0f      	ldr	r2, [pc, #60]	; (8002bfc <HAL_GPIO_Init+0x304>)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	2b0f      	cmp	r3, #15
 8002bcc:	f67f aea2 	bls.w	8002914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	3724      	adds	r7, #36	; 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40013800 	.word	0x40013800
 8002be8:	40020000 	.word	0x40020000
 8002bec:	40020400 	.word	0x40020400
 8002bf0:	40020800 	.word	0x40020800
 8002bf4:	40020c00 	.word	0x40020c00
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40013c00 	.word	0x40013c00

08002c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	807b      	strh	r3, [r7, #2]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c10:	787b      	ldrb	r3, [r7, #1]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c16:	887a      	ldrh	r2, [r7, #2]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c1c:	e003      	b.n	8002c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c1e:	887b      	ldrh	r3, [r7, #2]
 8002c20:	041a      	lsls	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	619a      	str	r2, [r3, #24]
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e12b      	b.n	8002e9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7fe fe24 	bl	80018a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2224      	movs	r2, #36	; 0x24
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0201 	bic.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c98:	f003 fcee 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 8002c9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4a81      	ldr	r2, [pc, #516]	; (8002ea8 <HAL_I2C_Init+0x274>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d807      	bhi.n	8002cb8 <HAL_I2C_Init+0x84>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a80      	ldr	r2, [pc, #512]	; (8002eac <HAL_I2C_Init+0x278>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	bf94      	ite	ls
 8002cb0:	2301      	movls	r3, #1
 8002cb2:	2300      	movhi	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	e006      	b.n	8002cc6 <HAL_I2C_Init+0x92>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a7d      	ldr	r2, [pc, #500]	; (8002eb0 <HAL_I2C_Init+0x27c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	bf94      	ite	ls
 8002cc0:	2301      	movls	r3, #1
 8002cc2:	2300      	movhi	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0e7      	b.n	8002e9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4a78      	ldr	r2, [pc, #480]	; (8002eb4 <HAL_I2C_Init+0x280>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	0c9b      	lsrs	r3, r3, #18
 8002cd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4a6a      	ldr	r2, [pc, #424]	; (8002ea8 <HAL_I2C_Init+0x274>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d802      	bhi.n	8002d08 <HAL_I2C_Init+0xd4>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	3301      	adds	r3, #1
 8002d06:	e009      	b.n	8002d1c <HAL_I2C_Init+0xe8>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d0e:	fb02 f303 	mul.w	r3, r2, r3
 8002d12:	4a69      	ldr	r2, [pc, #420]	; (8002eb8 <HAL_I2C_Init+0x284>)
 8002d14:	fba2 2303 	umull	r2, r3, r2, r3
 8002d18:	099b      	lsrs	r3, r3, #6
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	430b      	orrs	r3, r1
 8002d22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	495c      	ldr	r1, [pc, #368]	; (8002ea8 <HAL_I2C_Init+0x274>)
 8002d38:	428b      	cmp	r3, r1
 8002d3a:	d819      	bhi.n	8002d70 <HAL_I2C_Init+0x13c>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1e59      	subs	r1, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d4a:	1c59      	adds	r1, r3, #1
 8002d4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d50:	400b      	ands	r3, r1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_I2C_Init+0x138>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1e59      	subs	r1, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6a:	e051      	b.n	8002e10 <HAL_I2C_Init+0x1dc>
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	e04f      	b.n	8002e10 <HAL_I2C_Init+0x1dc>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d111      	bne.n	8002d9c <HAL_I2C_Init+0x168>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1e58      	subs	r0, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6859      	ldr	r1, [r3, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	440b      	add	r3, r1
 8002d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	e012      	b.n	8002dc2 <HAL_I2C_Init+0x18e>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1e58      	subs	r0, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6859      	ldr	r1, [r3, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	0099      	lsls	r1, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db2:	3301      	adds	r3, #1
 8002db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_Init+0x196>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e022      	b.n	8002e10 <HAL_I2C_Init+0x1dc>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10e      	bne.n	8002df0 <HAL_I2C_Init+0x1bc>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1e58      	subs	r0, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	440b      	add	r3, r1
 8002de0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de4:	3301      	adds	r3, #1
 8002de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dee:	e00f      	b.n	8002e10 <HAL_I2C_Init+0x1dc>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1e58      	subs	r0, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	0099      	lsls	r1, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	6809      	ldr	r1, [r1, #0]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69da      	ldr	r2, [r3, #28]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6911      	ldr	r1, [r2, #16]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68d2      	ldr	r2, [r2, #12]
 8002e4a:	4311      	orrs	r1, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	000186a0 	.word	0x000186a0
 8002eac:	001e847f 	.word	0x001e847f
 8002eb0:	003d08ff 	.word	0x003d08ff
 8002eb4:	431bde83 	.word	0x431bde83
 8002eb8:	10624dd3 	.word	0x10624dd3

08002ebc <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ed8:	2b28      	cmp	r3, #40	; 0x28
 8002eda:	d15b      	bne.n	8002f94 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e054      	b.n	8002f96 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e04d      	b.n	8002f96 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d007      	beq.n	8002f20 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	222a      	movs	r2, #42	; 0x2a
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	88fa      	ldrh	r2, [r7, #6]
 8002f50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002f8e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	e000      	b.n	8002f96 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
  }
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	d124      	bne.n	8003000 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2228      	movs	r2, #40	; 0x28
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d007      	beq.n	8002fdc <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fea:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002ffa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e000      	b.n	8003002 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003000:	2302      	movs	r3, #2
  }
}
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b088      	sub	sp, #32
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800302e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003036:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	2b10      	cmp	r3, #16
 800303c:	d003      	beq.n	8003046 <HAL_I2C_EV_IRQHandler+0x38>
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	f040 80b1 	bne.w	80031a8 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10d      	bne.n	800307c <HAL_I2C_EV_IRQHandler+0x6e>
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003066:	d003      	beq.n	8003070 <HAL_I2C_EV_IRQHandler+0x62>
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800306e:	d101      	bne.n	8003074 <HAL_I2C_EV_IRQHandler+0x66>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_I2C_EV_IRQHandler+0x68>
 8003074:	2300      	movs	r3, #0
 8003076:	2b01      	cmp	r3, #1
 8003078:	f000 8114 	beq.w	80032a4 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <HAL_I2C_EV_IRQHandler+0x90>
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f001 fc29 	bl	80048e8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fd32 	bl	8003b00 <I2C_Master_SB>
 800309c:	e083      	b.n	80031a6 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_I2C_EV_IRQHandler+0xac>
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fdaa 	bl	8003c0c <I2C_Master_ADD10>
 80030b8:	e075      	b.n	80031a6 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_I2C_EV_IRQHandler+0xc8>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fdc6 	bl	8003c60 <I2C_Master_ADDR>
 80030d4:	e067      	b.n	80031a6 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d036      	beq.n	800314e <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ee:	f000 80db 	beq.w	80032a8 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00d      	beq.n	8003118 <HAL_I2C_EV_IRQHandler+0x10a>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <HAL_I2C_EV_IRQHandler+0x10a>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f9aa 	bl	800346a <I2C_MasterTransmit_TXE>
 8003116:	e046      	b.n	80031a6 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80c2 	beq.w	80032a8 <HAL_I2C_EV_IRQHandler+0x29a>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80bc 	beq.w	80032a8 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003130:	7bbb      	ldrb	r3, [r7, #14]
 8003132:	2b21      	cmp	r3, #33	; 0x21
 8003134:	d103      	bne.n	800313e <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fa33 	bl	80035a2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800313c:	e0b4      	b.n	80032a8 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b40      	cmp	r3, #64	; 0x40
 8003142:	f040 80b1 	bne.w	80032a8 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 faa1 	bl	800368e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800314c:	e0ac      	b.n	80032a8 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800315c:	f000 80a4 	beq.w	80032a8 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00d      	beq.n	8003186 <HAL_I2C_EV_IRQHandler+0x178>
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_I2C_EV_IRQHandler+0x178>
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b00      	cmp	r3, #0
 800317c:	d103      	bne.n	8003186 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fb19 	bl	80037b6 <I2C_MasterReceive_RXNE>
 8003184:	e00f      	b.n	80031a6 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 808b 	beq.w	80032a8 <HAL_I2C_EV_IRQHandler+0x29a>
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8085 	beq.w	80032a8 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fbc4 	bl	800392c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031a4:	e080      	b.n	80032a8 <HAL_I2C_EV_IRQHandler+0x29a>
 80031a6:	e07f      	b.n	80032a8 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d004      	beq.n	80031ba <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	e007      	b.n	80031ca <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d011      	beq.n	80031f8 <HAL_I2C_EV_IRQHandler+0x1ea>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00c      	beq.n	80031f8 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80031ee:	69b9      	ldr	r1, [r7, #24]
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 ff84 	bl	80040fe <I2C_Slave_ADDR>
 80031f6:	e05a      	b.n	80032ae <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_I2C_EV_IRQHandler+0x206>
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 ffbf 	bl	8004190 <I2C_Slave_STOPF>
 8003212:	e04c      	b.n	80032ae <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003214:	7bbb      	ldrb	r3, [r7, #14]
 8003216:	2b21      	cmp	r3, #33	; 0x21
 8003218:	d002      	beq.n	8003220 <HAL_I2C_EV_IRQHandler+0x212>
 800321a:	7bbb      	ldrb	r3, [r7, #14]
 800321c:	2b29      	cmp	r3, #41	; 0x29
 800321e:	d120      	bne.n	8003262 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00d      	beq.n	8003246 <HAL_I2C_EV_IRQHandler+0x238>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_I2C_EV_IRQHandler+0x238>
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d103      	bne.n	8003246 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fe9f 	bl	8003f82 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003244:	e032      	b.n	80032ac <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d02d      	beq.n	80032ac <HAL_I2C_EV_IRQHandler+0x29e>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003256:	2b00      	cmp	r3, #0
 8003258:	d028      	beq.n	80032ac <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fece 	bl	8003ffc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003260:	e024      	b.n	80032ac <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00d      	beq.n	8003288 <HAL_I2C_EV_IRQHandler+0x27a>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003272:	2b00      	cmp	r3, #0
 8003274:	d008      	beq.n	8003288 <HAL_I2C_EV_IRQHandler+0x27a>
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d103      	bne.n	8003288 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fedc 	bl	800403e <I2C_SlaveReceive_RXNE>
 8003286:	e012      	b.n	80032ae <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00d      	beq.n	80032ae <HAL_I2C_EV_IRQHandler+0x2a0>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 ff0c 	bl	80040ba <I2C_SlaveReceive_BTF>
 80032a2:	e004      	b.n	80032ae <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80032a4:	bf00      	nop
 80032a6:	e002      	b.n	80032ae <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a8:	bf00      	nop
 80032aa:	e000      	b.n	80032ae <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032ac:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80032ae:	3720      	adds	r7, #32
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	; 0x28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80032cc:	2300      	movs	r3, #0
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d6:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00d      	beq.n	80032fe <HAL_I2C_ER_IRQHandler+0x4a>
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032fc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00d      	beq.n	8003324 <HAL_I2C_ER_IRQHandler+0x70>
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	f043 0302 	orr.w	r3, r3, #2
 8003318:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003322:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332a:	2b00      	cmp	r3, #0
 800332c:	d03e      	beq.n	80033ac <HAL_I2C_ER_IRQHandler+0xf8>
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003334:	2b00      	cmp	r3, #0
 8003336:	d039      	beq.n	80033ac <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003338:	7efb      	ldrb	r3, [r7, #27]
 800333a:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334a:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003352:	7ebb      	ldrb	r3, [r7, #26]
 8003354:	2b20      	cmp	r3, #32
 8003356:	d112      	bne.n	800337e <HAL_I2C_ER_IRQHandler+0xca>
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10f      	bne.n	800337e <HAL_I2C_ER_IRQHandler+0xca>
 800335e:	7cfb      	ldrb	r3, [r7, #19]
 8003360:	2b21      	cmp	r3, #33	; 0x21
 8003362:	d008      	beq.n	8003376 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003364:	7cfb      	ldrb	r3, [r7, #19]
 8003366:	2b29      	cmp	r3, #41	; 0x29
 8003368:	d005      	beq.n	8003376 <HAL_I2C_ER_IRQHandler+0xc2>
 800336a:	7cfb      	ldrb	r3, [r7, #19]
 800336c:	2b28      	cmp	r3, #40	; 0x28
 800336e:	d106      	bne.n	800337e <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b21      	cmp	r3, #33	; 0x21
 8003374:	d103      	bne.n	800337e <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f001 f83a 	bl	80043f0 <I2C_Slave_AF>
 800337c:	e016      	b.n	80033ac <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003386:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	f043 0304 	orr.w	r3, r3, #4
 800338e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003390:	7efb      	ldrb	r3, [r7, #27]
 8003392:	2b10      	cmp	r3, #16
 8003394:	d002      	beq.n	800339c <HAL_I2C_ER_IRQHandler+0xe8>
 8003396:	7efb      	ldrb	r3, [r7, #27]
 8003398:	2b40      	cmp	r3, #64	; 0x40
 800339a:	d107      	bne.n	80033ac <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033aa:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00d      	beq.n	80033d2 <HAL_I2C_ER_IRQHandler+0x11e>
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d008      	beq.n	80033d2 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	f043 0308 	orr.w	r3, r3, #8
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80033d0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f001 f873 	bl	80044d0 <I2C_ITError>
  }
}
 80033ea:	bf00      	nop
 80033ec:	3728      	adds	r7, #40	; 0x28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003478:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003480:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348c:	2b00      	cmp	r3, #0
 800348e:	d150      	bne.n	8003532 <I2C_MasterTransmit_TXE+0xc8>
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b21      	cmp	r3, #33	; 0x21
 8003494:	d14d      	bne.n	8003532 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d01d      	beq.n	80034d8 <I2C_MasterTransmit_TXE+0x6e>
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d01a      	beq.n	80034d8 <I2C_MasterTransmit_TXE+0x6e>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034a8:	d016      	beq.n	80034d8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034b8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2211      	movs	r2, #17
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ff8e 	bl	80033f2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034d6:	e060      	b.n	800359a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034e6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b40      	cmp	r3, #64	; 0x40
 8003510:	d107      	bne.n	8003522 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ff87 	bl	800342e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003520:	e03b      	b.n	800359a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ff61 	bl	80033f2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003530:	e033      	b.n	800359a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	2b21      	cmp	r3, #33	; 0x21
 8003536:	d005      	beq.n	8003544 <I2C_MasterTransmit_TXE+0xda>
 8003538:	7bbb      	ldrb	r3, [r7, #14]
 800353a:	2b40      	cmp	r3, #64	; 0x40
 800353c:	d12d      	bne.n	800359a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	2b22      	cmp	r3, #34	; 0x22
 8003542:	d12a      	bne.n	800359a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d108      	bne.n	8003560 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800355e:	e01c      	b.n	800359a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b40      	cmp	r3, #64	; 0x40
 800356a:	d103      	bne.n	8003574 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f88e 	bl	800368e <I2C_MemoryTransmit_TXE_BTF>
}
 8003572:	e012      	b.n	800359a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	781a      	ldrb	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003598:	e7ff      	b.n	800359a <I2C_MasterTransmit_TXE+0x130>
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b21      	cmp	r3, #33	; 0x21
 80035ba:	d164      	bne.n	8003686 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d012      	beq.n	80035ec <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	781a      	ldrb	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80035ea:	e04c      	b.n	8003686 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d01d      	beq.n	800362e <I2C_MasterTransmit_BTF+0x8c>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d01a      	beq.n	800362e <I2C_MasterTransmit_BTF+0x8c>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035fe:	d016      	beq.n	800362e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800360e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2211      	movs	r2, #17
 8003614:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff fee3 	bl	80033f2 <HAL_I2C_MasterTxCpltCallback>
}
 800362c:	e02b      	b.n	8003686 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800363c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d107      	bne.n	8003678 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff fedc 	bl	800342e <HAL_I2C_MemTxCpltCallback>
}
 8003676:	e006      	b.n	8003686 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff feb6 	bl	80033f2 <HAL_I2C_MasterTxCpltCallback>
}
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d11d      	bne.n	80036e2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d10b      	bne.n	80036c6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036be:	1c9a      	adds	r2, r3, #2
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80036c4:	e073      	b.n	80037ae <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	121b      	asrs	r3, r3, #8
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80036e0:	e065      	b.n	80037ae <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d10b      	bne.n	8003702 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003700:	e055      	b.n	80037ae <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003706:	2b02      	cmp	r3, #2
 8003708:	d151      	bne.n	80037ae <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	2b22      	cmp	r3, #34	; 0x22
 800370e:	d10d      	bne.n	800372c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800371e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	651a      	str	r2, [r3, #80]	; 0x50
}
 800372a:	e040      	b.n	80037ae <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d015      	beq.n	8003762 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	2b21      	cmp	r3, #33	; 0x21
 800373a:	d112      	bne.n	8003762 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003760:	e025      	b.n	80037ae <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d120      	bne.n	80037ae <I2C_MemoryTransmit_TXE_BTF+0x120>
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b21      	cmp	r3, #33	; 0x21
 8003770:	d11d      	bne.n	80037ae <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003780:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003790:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7ff fe40 	bl	800342e <HAL_I2C_MemTxCpltCallback>
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b22      	cmp	r3, #34	; 0x22
 80037c8:	f040 80ac 	bne.w	8003924 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d921      	bls.n	800381e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b03      	cmp	r3, #3
 8003808:	f040 808c 	bne.w	8003924 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800381a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800381c:	e082      	b.n	8003924 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	2b02      	cmp	r3, #2
 8003824:	d075      	beq.n	8003912 <I2C_MasterReceive_RXNE+0x15c>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d002      	beq.n	8003832 <I2C_MasterReceive_RXNE+0x7c>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d16f      	bne.n	8003912 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f001 f826 	bl	8004884 <I2C_WaitOnSTOPRequestThroughIT>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d142      	bne.n	80038c4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800385c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b40      	cmp	r3, #64	; 0x40
 8003896:	d10a      	bne.n	80038ae <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff fdcb 	bl	8003442 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038ac:	e03a      	b.n	8003924 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2212      	movs	r2, #18
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fda2 	bl	8003406 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038c2:	e02f      	b.n	8003924 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fd fb16 	bl	8000f3c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003910:	e008      	b.n	8003924 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003920:	605a      	str	r2, [r3, #4]
}
 8003922:	e7ff      	b.n	8003924 <I2C_MasterReceive_RXNE+0x16e>
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b04      	cmp	r3, #4
 8003942:	d11b      	bne.n	800397c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003952:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800397a:	e0bd      	b.n	8003af8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b03      	cmp	r3, #3
 8003984:	d129      	bne.n	80039da <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003994:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b04      	cmp	r3, #4
 800399a:	d00a      	beq.n	80039b2 <I2C_MasterReceive_BTF+0x86>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d007      	beq.n	80039b2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039d8:	e08e      	b.n	8003af8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d176      	bne.n	8003ad2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d002      	beq.n	80039f0 <I2C_MasterReceive_BTF+0xc4>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b10      	cmp	r3, #16
 80039ee:	d108      	bne.n	8003a02 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	e019      	b.n	8003a36 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d002      	beq.n	8003a0e <I2C_MasterReceive_BTF+0xe2>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d108      	bne.n	8003a20 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	e00a      	b.n	8003a36 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b10      	cmp	r3, #16
 8003a24:	d007      	beq.n	8003a36 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a34:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a90:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b40      	cmp	r3, #64	; 0x40
 8003aa4:	d10a      	bne.n	8003abc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff fcc4 	bl	8003442 <HAL_I2C_MemRxCpltCallback>
}
 8003aba:	e01d      	b.n	8003af8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2212      	movs	r2, #18
 8003ac8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff fc9b 	bl	8003406 <HAL_I2C_MasterRxCpltCallback>
}
 8003ad0:	e012      	b.n	8003af8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003af8:	bf00      	nop
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b40      	cmp	r3, #64	; 0x40
 8003b12:	d117      	bne.n	8003b44 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d109      	bne.n	8003b30 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b2c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b2e:	e067      	b.n	8003c00 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	611a      	str	r2, [r3, #16]
}
 8003b42:	e05d      	b.n	8003c00 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b4c:	d133      	bne.n	8003bb6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b21      	cmp	r3, #33	; 0x21
 8003b58:	d109      	bne.n	8003b6e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b6a:	611a      	str	r2, [r3, #16]
 8003b6c:	e008      	b.n	8003b80 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d004      	beq.n	8003b92 <I2C_Master_SB+0x92>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d108      	bne.n	8003ba4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d032      	beq.n	8003c00 <I2C_Master_SB+0x100>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d02d      	beq.n	8003c00 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb2:	605a      	str	r2, [r3, #4]
}
 8003bb4:	e024      	b.n	8003c00 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10e      	bne.n	8003bdc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	11db      	asrs	r3, r3, #7
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f003 0306 	and.w	r3, r3, #6
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f063 030f 	orn	r3, r3, #15
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	611a      	str	r2, [r3, #16]
}
 8003bda:	e011      	b.n	8003c00 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d10d      	bne.n	8003c00 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	11db      	asrs	r3, r3, #7
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f003 0306 	and.w	r3, r3, #6
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	f063 030e 	orn	r3, r3, #14
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	611a      	str	r2, [r3, #16]
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d004      	beq.n	8003c32 <I2C_Master_ADD10+0x26>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d108      	bne.n	8003c44 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00c      	beq.n	8003c54 <I2C_Master_ADD10+0x48>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c52:	605a      	str	r2, [r3, #4]
  }
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b091      	sub	sp, #68	; 0x44
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b22      	cmp	r3, #34	; 0x22
 8003c88:	f040 8169 	bne.w	8003f5e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <I2C_Master_ADDR+0x54>
 8003c94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003c98:	2b40      	cmp	r3, #64	; 0x40
 8003c9a:	d10b      	bne.n	8003cb4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	633b      	str	r3, [r7, #48]	; 0x30
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	e160      	b.n	8003f76 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d11d      	bne.n	8003cf8 <I2C_Master_ADDR+0x98>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003cc4:	d118      	bne.n	8003cf8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cea:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	651a      	str	r2, [r3, #80]	; 0x50
 8003cf6:	e13e      	b.n	8003f76 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d113      	bne.n	8003d2a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d02:	2300      	movs	r3, #0
 8003d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	e115      	b.n	8003f56 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	f040 808a 	bne.w	8003e4a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d3c:	d137      	bne.n	8003dae <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5c:	d113      	bne.n	8003d86 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	e0e7      	b.n	8003f56 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d86:	2300      	movs	r3, #0
 8003d88:	623b      	str	r3, [r7, #32]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	623b      	str	r3, [r7, #32]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	623b      	str	r3, [r7, #32]
 8003d9a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	e0d3      	b.n	8003f56 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d02e      	beq.n	8003e12 <I2C_Master_ADDR+0x1b2>
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d02b      	beq.n	8003e12 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbc:	2b12      	cmp	r3, #18
 8003dbe:	d102      	bne.n	8003dc6 <I2C_Master_ADDR+0x166>
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d125      	bne.n	8003e12 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d00e      	beq.n	8003dea <I2C_Master_ADDR+0x18a>
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d00b      	beq.n	8003dea <I2C_Master_ADDR+0x18a>
 8003dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d008      	beq.n	8003dea <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	e007      	b.n	8003dfa <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003df8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	e0a1      	b.n	8003f56 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e20:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e22:	2300      	movs	r3, #0
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e085      	b.n	8003f56 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d14d      	bne.n	8003ef0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d016      	beq.n	8003e88 <I2C_Master_ADDR+0x228>
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d013      	beq.n	8003e88 <I2C_Master_ADDR+0x228>
 8003e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d010      	beq.n	8003e88 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e74:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e007      	b.n	8003e98 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e96:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea6:	d117      	bne.n	8003ed8 <I2C_Master_ADDR+0x278>
 8003ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eaa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eae:	d00b      	beq.n	8003ec8 <I2C_Master_ADDR+0x268>
 8003eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d008      	beq.n	8003ec8 <I2C_Master_ADDR+0x268>
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d005      	beq.n	8003ec8 <I2C_Master_ADDR+0x268>
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	2b10      	cmp	r3, #16
 8003ec0:	d002      	beq.n	8003ec8 <I2C_Master_ADDR+0x268>
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec4:	2b20      	cmp	r3, #32
 8003ec6:	d107      	bne.n	8003ed8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ed6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	e032      	b.n	8003f56 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003efe:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f0e:	d117      	bne.n	8003f40 <I2C_Master_ADDR+0x2e0>
 8003f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f16:	d00b      	beq.n	8003f30 <I2C_Master_ADDR+0x2d0>
 8003f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d008      	beq.n	8003f30 <I2C_Master_ADDR+0x2d0>
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d005      	beq.n	8003f30 <I2C_Master_ADDR+0x2d0>
 8003f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	d002      	beq.n	8003f30 <I2C_Master_ADDR+0x2d0>
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d107      	bne.n	8003f40 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f3e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f40:	2300      	movs	r3, #0
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003f5c:	e00b      	b.n	8003f76 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	68fb      	ldr	r3, [r7, #12]
}
 8003f74:	e7ff      	b.n	8003f76 <I2C_Master_ADDR+0x316>
 8003f76:	bf00      	nop
 8003f78:	3744      	adds	r7, #68	; 0x44
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f90:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d02b      	beq.n	8003ff4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	781a      	ldrb	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d114      	bne.n	8003ff4 <I2C_SlaveTransmit_TXE+0x72>
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	2b29      	cmp	r3, #41	; 0x29
 8003fce:	d111      	bne.n	8003ff4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fde:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2221      	movs	r2, #33	; 0x21
 8003fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2228      	movs	r2, #40	; 0x28
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff fa13 	bl	800341a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d011      	beq.n	8004032 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	781a      	ldrb	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d02c      	beq.n	80040b2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d114      	bne.n	80040b2 <I2C_SlaveReceive_RXNE+0x74>
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	2b2a      	cmp	r3, #42	; 0x2a
 800408c:	d111      	bne.n	80040b2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2222      	movs	r2, #34	; 0x22
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2228      	movs	r2, #40	; 0x28
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7fc ff33 	bl	8000f18 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d012      	beq.n	80040f2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004108:	2300      	movs	r3, #0
 800410a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004112:	b2db      	uxtb	r3, r3
 8004114:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004118:	2b28      	cmp	r3, #40	; 0x28
 800411a:	d125      	bne.n	8004168 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004136:	2301      	movs	r3, #1
 8004138:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004140:	2b00      	cmp	r3, #0
 8004142:	d103      	bne.n	800414c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	81bb      	strh	r3, [r7, #12]
 800414a:	e002      	b.n	8004152 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800415a:	89ba      	ldrh	r2, [r7, #12]
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	4619      	mov	r1, r3
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7fc feb3 	bl	8000ecc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004166:	e00e      	b.n	8004186 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004168:	2300      	movs	r3, #0
 800416a:	60bb      	str	r3, [r7, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	60bb      	str	r3, [r7, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	60bb      	str	r3, [r7, #8]
 800417c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004186:	bf00      	nop
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80041b0:	2300      	movs	r3, #0
 80041b2:	60bb      	str	r3, [r7, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	60bb      	str	r3, [r7, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ec:	d172      	bne.n	80042d4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	2b22      	cmp	r3, #34	; 0x22
 80041f2:	d002      	beq.n	80041fa <I2C_Slave_STOPF+0x6a>
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b2a      	cmp	r3, #42	; 0x2a
 80041f8:	d135      	bne.n	8004266 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	b29a      	uxth	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f043 0204 	orr.w	r2, r3, #4
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800422c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe fb51 	bl	80028da <HAL_DMA_GetState>
 8004238:	4603      	mov	r3, r0
 800423a:	2b01      	cmp	r3, #1
 800423c:	d049      	beq.n	80042d2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	4a69      	ldr	r2, [pc, #420]	; (80043e8 <I2C_Slave_STOPF+0x258>)
 8004244:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	4618      	mov	r0, r3
 800424c:	f7fe fb23 	bl	8002896 <HAL_DMA_Abort_IT>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d03d      	beq.n	80042d2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004260:	4610      	mov	r0, r2
 8004262:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004264:	e035      	b.n	80042d2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	b29a      	uxth	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d005      	beq.n	800428a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f043 0204 	orr.w	r2, r3, #4
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004298:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe fb1b 	bl	80028da <HAL_DMA_GetState>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d014      	beq.n	80042d4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ae:	4a4e      	ldr	r2, [pc, #312]	; (80043e8 <I2C_Slave_STOPF+0x258>)
 80042b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fe faed 	bl	8002896 <HAL_DMA_Abort_IT>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042cc:	4610      	mov	r0, r2
 80042ce:	4798      	blx	r3
 80042d0:	e000      	b.n	80042d4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042d2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d03e      	beq.n	800435c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d112      	bne.n	8004312 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	d112      	bne.n	8004346 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	f043 0204 	orr.w	r2, r3, #4
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f8b3 	bl	80044d0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800436a:	e039      	b.n	80043e0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	2b2a      	cmp	r3, #42	; 0x2a
 8004370:	d109      	bne.n	8004386 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2228      	movs	r2, #40	; 0x28
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7fc fdc9 	bl	8000f18 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b28      	cmp	r3, #40	; 0x28
 8004390:	d111      	bne.n	80043b6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a15      	ldr	r2, [pc, #84]	; (80043ec <I2C_Slave_STOPF+0x25c>)
 8004396:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fc fd80 	bl	8000eb4 <HAL_I2C_ListenCpltCallback>
}
 80043b4:	e014      	b.n	80043e0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	2b22      	cmp	r3, #34	; 0x22
 80043bc:	d002      	beq.n	80043c4 <I2C_Slave_STOPF+0x234>
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	2b22      	cmp	r3, #34	; 0x22
 80043c2:	d10d      	bne.n	80043e0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fc fd9c 	bl	8000f18 <HAL_I2C_SlaveRxCpltCallback>
}
 80043e0:	bf00      	nop
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	08004735 	.word	0x08004735
 80043ec:	ffff0000 	.word	0xffff0000

080043f0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b08      	cmp	r3, #8
 800440a:	d002      	beq.n	8004412 <I2C_Slave_AF+0x22>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b20      	cmp	r3, #32
 8004410:	d129      	bne.n	8004466 <I2C_Slave_AF+0x76>
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2b28      	cmp	r3, #40	; 0x28
 8004416:	d126      	bne.n	8004466 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a2c      	ldr	r2, [pc, #176]	; (80044cc <I2C_Slave_AF+0xdc>)
 800441c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800442c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004436:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004446:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fc fd28 	bl	8000eb4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004464:	e02e      	b.n	80044c4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	2b21      	cmp	r3, #33	; 0x21
 800446a:	d126      	bne.n	80044ba <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a17      	ldr	r2, [pc, #92]	; (80044cc <I2C_Slave_AF+0xdc>)
 8004470:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2221      	movs	r2, #33	; 0x21
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004496:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044a0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fe ffb1 	bl	800341a <HAL_I2C_SlaveTxCpltCallback>
}
 80044b8:	e004      	b.n	80044c4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044c2:	615a      	str	r2, [r3, #20]
}
 80044c4:	bf00      	nop
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	ffff0000 	.word	0xffff0000

080044d0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80044e8:	7bbb      	ldrb	r3, [r7, #14]
 80044ea:	2b10      	cmp	r3, #16
 80044ec:	d002      	beq.n	80044f4 <I2C_ITError+0x24>
 80044ee:	7bbb      	ldrb	r3, [r7, #14]
 80044f0:	2b40      	cmp	r3, #64	; 0x40
 80044f2:	d10a      	bne.n	800450a <I2C_ITError+0x3a>
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	2b22      	cmp	r3, #34	; 0x22
 80044f8:	d107      	bne.n	800450a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004508:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004510:	2b28      	cmp	r3, #40	; 0x28
 8004512:	d107      	bne.n	8004524 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2228      	movs	r2, #40	; 0x28
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004522:	e015      	b.n	8004550 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800452e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004532:	d00a      	beq.n	800454a <I2C_ITError+0x7a>
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	2b60      	cmp	r3, #96	; 0x60
 8004538:	d007      	beq.n	800454a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800455e:	d162      	bne.n	8004626 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800456e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b01      	cmp	r3, #1
 800457c:	d020      	beq.n	80045c0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004582:	4a6a      	ldr	r2, [pc, #424]	; (800472c <I2C_ITError+0x25c>)
 8004584:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458a:	4618      	mov	r0, r3
 800458c:	f7fe f983 	bl	8002896 <HAL_DMA_Abort_IT>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 8089 	beq.w	80046aa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045ba:	4610      	mov	r0, r2
 80045bc:	4798      	blx	r3
 80045be:	e074      	b.n	80046aa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	4a59      	ldr	r2, [pc, #356]	; (800472c <I2C_ITError+0x25c>)
 80045c6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fe f962 	bl	8002896 <HAL_DMA_Abort_IT>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d068      	beq.n	80046aa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b40      	cmp	r3, #64	; 0x40
 80045e4:	d10b      	bne.n	80045fe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0201 	bic.w	r2, r2, #1
 800460c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004620:	4610      	mov	r0, r2
 8004622:	4798      	blx	r3
 8004624:	e041      	b.n	80046aa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b60      	cmp	r3, #96	; 0x60
 8004630:	d125      	bne.n	800467e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b40      	cmp	r3, #64	; 0x40
 800464c:	d10b      	bne.n	8004666 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0201 	bic.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fe feed 	bl	8003456 <HAL_I2C_AbortCpltCallback>
 800467c:	e015      	b.n	80046aa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	d10b      	bne.n	80046a4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7fc fc49 	bl	8000f3c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10e      	bne.n	80046d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d104      	bne.n	80046d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046e6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d113      	bne.n	8004724 <I2C_ITError+0x254>
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	2b28      	cmp	r3, #40	; 0x28
 8004700:	d110      	bne.n	8004724 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a0a      	ldr	r2, [pc, #40]	; (8004730 <I2C_ITError+0x260>)
 8004706:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fc fbc8 	bl	8000eb4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	08004735 	.word	0x08004735
 8004730:	ffff0000 	.word	0xffff0000

08004734 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800474e:	4b4b      	ldr	r3, [pc, #300]	; (800487c <I2C_DMAAbort+0x148>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	08db      	lsrs	r3, r3, #3
 8004754:	4a4a      	ldr	r2, [pc, #296]	; (8004880 <I2C_DMAAbort+0x14c>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	0a1a      	lsrs	r2, r3, #8
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	00da      	lsls	r2, r3, #3
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f043 0220 	orr.w	r2, r3, #32
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800477a:	e00a      	b.n	8004792 <I2C_DMAAbort+0x5e>
    }
    count--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3b01      	subs	r3, #1
 8004780:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800478c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004790:	d0ea      	beq.n	8004768 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479e:	2200      	movs	r2, #0
 80047a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	2200      	movs	r2, #0
 80047b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2200      	movs	r2, #0
 80047c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d4:	2200      	movs	r2, #0
 80047d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e4:	2200      	movs	r2, #0
 80047e6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b60      	cmp	r3, #96	; 0x60
 8004802:	d10e      	bne.n	8004822 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2200      	movs	r2, #0
 8004818:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800481a:	6978      	ldr	r0, [r7, #20]
 800481c:	f7fe fe1b 	bl	8003456 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004820:	e027      	b.n	8004872 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004822:	7cfb      	ldrb	r3, [r7, #19]
 8004824:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004828:	2b28      	cmp	r3, #40	; 0x28
 800482a:	d117      	bne.n	800485c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800484a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2200      	movs	r2, #0
 8004850:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2228      	movs	r2, #40	; 0x28
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800485a:	e007      	b.n	800486c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800486c:	6978      	ldr	r0, [r7, #20]
 800486e:	f7fc fb65 	bl	8000f3c <HAL_I2C_ErrorCallback>
}
 8004872:	bf00      	nop
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000028 	.word	0x20000028
 8004880:	14f8b589 	.word	0x14f8b589

08004884 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004890:	4b13      	ldr	r3, [pc, #76]	; (80048e0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	08db      	lsrs	r3, r3, #3
 8004896:	4a13      	ldr	r2, [pc, #76]	; (80048e4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	0a1a      	lsrs	r2, r3, #8
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d107      	bne.n	80048c2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f043 0220 	orr.w	r2, r3, #32
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e008      	b.n	80048d4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d0:	d0e9      	beq.n	80048a6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	20000028 	.word	0x20000028
 80048e4:	14f8b589 	.word	0x14f8b589

080048e8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80048f8:	d103      	bne.n	8004902 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004900:	e007      	b.n	8004912 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800490a:	d102      	bne.n	8004912 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2208      	movs	r2, #8
 8004910:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800491e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004920:	b08f      	sub	sp, #60	; 0x3c
 8004922:	af0a      	add	r7, sp, #40	; 0x28
 8004924:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e10f      	b.n	8004b50 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f007 fab2 	bl	800beb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2203      	movs	r2, #3
 8004954:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f003 fd99 	bl	80084a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	603b      	str	r3, [r7, #0]
 800497a:	687e      	ldr	r6, [r7, #4]
 800497c:	466d      	mov	r5, sp
 800497e:	f106 0410 	add.w	r4, r6, #16
 8004982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800498a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800498e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004992:	1d33      	adds	r3, r6, #4
 8004994:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004996:	6838      	ldr	r0, [r7, #0]
 8004998:	f003 fc70 	bl	800827c <USB_CoreInit>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e0d0      	b.n	8004b50 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2100      	movs	r1, #0
 80049b4:	4618      	mov	r0, r3
 80049b6:	f003 fd87 	bl	80084c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
 80049be:	e04a      	b.n	8004a56 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049c0:	7bfa      	ldrb	r2, [r7, #15]
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	4613      	mov	r3, r2
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	4413      	add	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	333d      	adds	r3, #61	; 0x3d
 80049d0:	2201      	movs	r2, #1
 80049d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80049d4:	7bfa      	ldrb	r2, [r7, #15]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	4413      	add	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	440b      	add	r3, r1
 80049e2:	333c      	adds	r3, #60	; 0x3c
 80049e4:	7bfa      	ldrb	r2, [r7, #15]
 80049e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80049e8:	7bfa      	ldrb	r2, [r7, #15]
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	b298      	uxth	r0, r3
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	4613      	mov	r3, r2
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	3344      	adds	r3, #68	; 0x44
 80049fc:	4602      	mov	r2, r0
 80049fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a00:	7bfa      	ldrb	r2, [r7, #15]
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	4413      	add	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	3340      	adds	r3, #64	; 0x40
 8004a10:	2200      	movs	r2, #0
 8004a12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a14:	7bfa      	ldrb	r2, [r7, #15]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	3348      	adds	r3, #72	; 0x48
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a28:	7bfa      	ldrb	r2, [r7, #15]
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	334c      	adds	r3, #76	; 0x4c
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a3c:	7bfa      	ldrb	r2, [r7, #15]
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	4613      	mov	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	3354      	adds	r3, #84	; 0x54
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	3301      	adds	r3, #1
 8004a54:	73fb      	strb	r3, [r7, #15]
 8004a56:	7bfa      	ldrb	r2, [r7, #15]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d3af      	bcc.n	80049c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a60:	2300      	movs	r3, #0
 8004a62:	73fb      	strb	r3, [r7, #15]
 8004a64:	e044      	b.n	8004af0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a66:	7bfa      	ldrb	r2, [r7, #15]
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	440b      	add	r3, r1
 8004a74:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004a78:	2200      	movs	r2, #0
 8004a7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a7c:	7bfa      	ldrb	r2, [r7, #15]
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004a8e:	7bfa      	ldrb	r2, [r7, #15]
 8004a90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a92:	7bfa      	ldrb	r2, [r7, #15]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004aa8:	7bfa      	ldrb	r2, [r7, #15]
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004abe:	7bfa      	ldrb	r2, [r7, #15]
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ad4:	7bfa      	ldrb	r2, [r7, #15]
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aea:	7bfb      	ldrb	r3, [r7, #15]
 8004aec:	3301      	adds	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
 8004af0:	7bfa      	ldrb	r2, [r7, #15]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d3b5      	bcc.n	8004a66 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	687e      	ldr	r6, [r7, #4]
 8004b02:	466d      	mov	r5, sp
 8004b04:	f106 0410 	add.w	r4, r6, #16
 8004b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b14:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b18:	1d33      	adds	r3, r6, #4
 8004b1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b1c:	6838      	ldr	r0, [r7, #0]
 8004b1e:	f003 fd1f 	bl	8008560 <USB_DevInit>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e00d      	b.n	8004b50 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f004 fe6e 	bl	800982a <USB_DevDisconnect>

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b58 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_PCD_Start+0x1c>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e020      	b.n	8004bb6 <HAL_PCD_Start+0x5e>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d109      	bne.n	8004b98 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d005      	beq.n	8004b98 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f003 fc71 	bl	8008484 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f004 fe1e 	bl	80097e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004bbe:	b590      	push	{r4, r7, lr}
 8004bc0:	b08d      	sub	sp, #52	; 0x34
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f004 fedc 	bl	8009992 <USB_GetMode>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f040 848a 	bne.w	80054f6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f004 fe40 	bl	800986c <USB_ReadInterrupts>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 8480 	beq.w	80054f4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	0a1b      	lsrs	r3, r3, #8
 8004bfe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f004 fe2d 	bl	800986c <USB_ReadInterrupts>
 8004c12:	4603      	mov	r3, r0
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d107      	bne.n	8004c2c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f002 0202 	and.w	r2, r2, #2
 8004c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f004 fe1b 	bl	800986c <USB_ReadInterrupts>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d161      	bne.n	8004d04 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0210 	bic.w	r2, r2, #16
 8004c4e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	f003 020f 	and.w	r2, r3, #15
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	0c5b      	lsrs	r3, r3, #17
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d124      	bne.n	8004cc6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004c82:	4013      	ands	r3, r2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d035      	beq.n	8004cf4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	091b      	lsrs	r3, r3, #4
 8004c90:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6a38      	ldr	r0, [r7, #32]
 8004c9c:	f004 fc52 	bl	8009544 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	091b      	lsrs	r3, r3, #4
 8004ca8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cac:	441a      	add	r2, r3
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	6a1a      	ldr	r2, [r3, #32]
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	091b      	lsrs	r3, r3, #4
 8004cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cbe:	441a      	add	r2, r3
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	621a      	str	r2, [r3, #32]
 8004cc4:	e016      	b.n	8004cf4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	0c5b      	lsrs	r3, r3, #17
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	2b06      	cmp	r3, #6
 8004cd0:	d110      	bne.n	8004cf4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004cd8:	2208      	movs	r2, #8
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6a38      	ldr	r0, [r7, #32]
 8004cde:	f004 fc31 	bl	8009544 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	6a1a      	ldr	r2, [r3, #32]
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cee:	441a      	add	r2, r3
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0210 	orr.w	r2, r2, #16
 8004d02:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f004 fdaf 	bl	800986c <USB_ReadInterrupts>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d18:	f040 80a7 	bne.w	8004e6a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f004 fdb4 	bl	8009892 <USB_ReadDevAllOutEpInterrupt>
 8004d2a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004d2c:	e099      	b.n	8004e62 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 808e 	beq.w	8004e56 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	4611      	mov	r1, r2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f004 fdd8 	bl	80098fa <USB_ReadDevOutEPInterrupt>
 8004d4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00c      	beq.n	8004d70 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d62:	461a      	mov	r2, r3
 8004d64:	2301      	movs	r3, #1
 8004d66:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fec2 	bl	8005af4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00c      	beq.n	8004d94 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d86:	461a      	mov	r2, r3
 8004d88:	2308      	movs	r3, #8
 8004d8a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004d8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 ff98 	bl	8005cc4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004daa:	461a      	mov	r2, r3
 8004dac:	2310      	movs	r3, #16
 8004dae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d030      	beq.n	8004e1c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc2:	2b80      	cmp	r3, #128	; 0x80
 8004dc4:	d109      	bne.n	8004dda <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	69fa      	ldr	r2, [r7, #28]
 8004dd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dd8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ddc:	4613      	mov	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	4413      	add	r3, r2
 8004dec:	3304      	adds	r3, #4
 8004dee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	78db      	ldrb	r3, [r3, #3]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d108      	bne.n	8004e0a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f007 f951 	bl	800c0ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e16:	461a      	mov	r2, r3
 8004e18:	2302      	movs	r3, #2
 8004e1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e32:	461a      	mov	r2, r3
 8004e34:	2320      	movs	r3, #32
 8004e36:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e54:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	3301      	adds	r3, #1
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	085b      	lsrs	r3, r3, #1
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f47f af62 	bne.w	8004d2e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f004 fcfc 	bl	800986c <USB_ReadInterrupts>
 8004e74:	4603      	mov	r3, r0
 8004e76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e7e:	f040 80db 	bne.w	8005038 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f004 fd1d 	bl	80098c6 <USB_ReadDevAllInEpInterrupt>
 8004e8c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004e92:	e0cd      	b.n	8005030 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 80c2 	beq.w	8005024 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f004 fd43 	bl	8009936 <USB_ReadDevInEPInterrupt>
 8004eb0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d057      	beq.n	8004f6c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	69f9      	ldr	r1, [r7, #28]
 8004ed8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004edc:	4013      	ands	r3, r2
 8004ede:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eec:	461a      	mov	r2, r3
 8004eee:	2301      	movs	r3, #1
 8004ef0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d132      	bne.n	8004f60 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efe:	4613      	mov	r3, r2
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	334c      	adds	r3, #76	; 0x4c
 8004f0a:	6819      	ldr	r1, [r3, #0]
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f10:	4613      	mov	r3, r2
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4403      	add	r3, r0
 8004f1a:	3348      	adds	r3, #72	; 0x48
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4419      	add	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f24:	4613      	mov	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	4413      	add	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4403      	add	r3, r0
 8004f2e:	334c      	adds	r3, #76	; 0x4c
 8004f30:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d113      	bne.n	8004f60 <HAL_PCD_IRQHandler+0x3a2>
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	440b      	add	r3, r1
 8004f46:	3354      	adds	r3, #84	; 0x54
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d108      	bne.n	8004f60 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f58:	461a      	mov	r2, r3
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	f004 fd4a 	bl	80099f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	4619      	mov	r1, r3
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f007 f825 	bl	800bfb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d008      	beq.n	8004f88 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f82:	461a      	mov	r2, r3
 8004f84:	2308      	movs	r3, #8
 8004f86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f003 0310 	and.w	r3, r3, #16
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d008      	beq.n	8004fa4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d008      	beq.n	8004fc0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fba:	461a      	mov	r2, r3
 8004fbc:	2340      	movs	r3, #64	; 0x40
 8004fbe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d023      	beq.n	8005012 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004fca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fcc:	6a38      	ldr	r0, [r7, #32]
 8004fce:	f003 fc2b 	bl	8008828 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	3338      	adds	r3, #56	; 0x38
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	78db      	ldrb	r3, [r3, #3]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d108      	bne.n	8005000 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f007 f868 	bl	800c0d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500c:	461a      	mov	r2, r3
 800500e:	2302      	movs	r3, #2
 8005010:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800501c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fcdb 	bl	80059da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	3301      	adds	r3, #1
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800502a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502c:	085b      	lsrs	r3, r3, #1
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	2b00      	cmp	r3, #0
 8005034:	f47f af2e 	bne.w	8004e94 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f004 fc15 	bl	800986c <USB_ReadInterrupts>
 8005042:	4603      	mov	r3, r0
 8005044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800504c:	d122      	bne.n	8005094 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800505c:	f023 0301 	bic.w	r3, r3, #1
 8005060:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005068:	2b01      	cmp	r3, #1
 800506a:	d108      	bne.n	800507e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005074:	2100      	movs	r1, #0
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fec2 	bl	8005e00 <HAL_PCDEx_LPM_Callback>
 800507c:	e002      	b.n	8005084 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f007 f806 	bl	800c090 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695a      	ldr	r2, [r3, #20]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005092:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	f004 fbe7 	bl	800986c <USB_ReadInterrupts>
 800509e:	4603      	mov	r3, r0
 80050a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a8:	d112      	bne.n	80050d0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d102      	bne.n	80050c0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f006 ffc2 	bl	800c044 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695a      	ldr	r2, [r3, #20]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80050ce:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f004 fbc9 	bl	800986c <USB_ReadInterrupts>
 80050da:	4603      	mov	r3, r0
 80050dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e4:	f040 80b7 	bne.w	8005256 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2110      	movs	r1, #16
 8005102:	4618      	mov	r0, r3
 8005104:	f003 fb90 	bl	8008828 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005108:	2300      	movs	r3, #0
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800510c:	e046      	b.n	800519c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800510e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	4413      	add	r3, r2
 8005116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511a:	461a      	mov	r2, r3
 800511c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005120:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005132:	0151      	lsls	r1, r2, #5
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	440a      	add	r2, r1
 8005138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800513c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005140:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514e:	461a      	mov	r2, r3
 8005150:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005154:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005166:	0151      	lsls	r1, r2, #5
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	440a      	add	r2, r1
 800516c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005170:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005174:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	440a      	add	r2, r1
 800518c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005190:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005194:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005198:	3301      	adds	r3, #1
 800519a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d3b3      	bcc.n	800510e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051b4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80051b8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d016      	beq.n	80051f0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051d2:	f043 030b 	orr.w	r3, r3, #11
 80051d6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051e8:	f043 030b 	orr.w	r3, r3, #11
 80051ec:	6453      	str	r3, [r2, #68]	; 0x44
 80051ee:	e015      	b.n	800521c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	69fa      	ldr	r2, [r7, #28]
 80051fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005202:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005206:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005216:	f043 030b 	orr.w	r3, r3, #11
 800521a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800522a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800522e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005240:	461a      	mov	r2, r3
 8005242:	f004 fbd7 	bl	80099f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695a      	ldr	r2, [r3, #20]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005254:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f004 fb06 	bl	800986c <USB_ReadInterrupts>
 8005260:	4603      	mov	r3, r0
 8005262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800526a:	d124      	bne.n	80052b6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f004 fb9c 	bl	80099ae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4618      	mov	r0, r3
 800527c:	f003 fb51 	bl	8008922 <USB_GetDevSpeed>
 8005280:	4603      	mov	r3, r0
 8005282:	461a      	mov	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681c      	ldr	r4, [r3, #0]
 800528c:	f001 f9e8 	bl	8006660 <HAL_RCC_GetHCLKFreq>
 8005290:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005296:	b2db      	uxtb	r3, r3
 8005298:	461a      	mov	r2, r3
 800529a:	4620      	mov	r0, r4
 800529c:	f003 f850 	bl	8008340 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f006 feb0 	bl	800c006 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695a      	ldr	r2, [r3, #20]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80052b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f004 fad6 	bl	800986c <USB_ReadInterrupts>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d10a      	bne.n	80052e0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f006 fe8d 	bl	800bfea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695a      	ldr	r2, [r3, #20]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f002 0208 	and.w	r2, r2, #8
 80052de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f004 fac1 	bl	800986c <USB_ReadInterrupts>
 80052ea:	4603      	mov	r3, r0
 80052ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f0:	2b80      	cmp	r3, #128	; 0x80
 80052f2:	d122      	bne.n	800533a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005300:	2301      	movs	r3, #1
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
 8005304:	e014      	b.n	8005330 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530a:	4613      	mov	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d105      	bne.n	800532a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	b2db      	uxtb	r3, r3
 8005322:	4619      	mov	r1, r3
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fb27 	bl	8005978 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	3301      	adds	r3, #1
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005336:	429a      	cmp	r2, r3
 8005338:	d3e5      	bcc.n	8005306 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f004 fa94 	bl	800986c <USB_ReadInterrupts>
 8005344:	4603      	mov	r3, r0
 8005346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800534a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800534e:	d13b      	bne.n	80053c8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005350:	2301      	movs	r3, #1
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
 8005354:	e02b      	b.n	80053ae <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800536a:	4613      	mov	r3, r2
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	4413      	add	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	440b      	add	r3, r1
 8005374:	3340      	adds	r3, #64	; 0x40
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d115      	bne.n	80053a8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800537c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800537e:	2b00      	cmp	r3, #0
 8005380:	da12      	bge.n	80053a8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005386:	4613      	mov	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	333f      	adds	r3, #63	; 0x3f
 8005392:	2201      	movs	r2, #1
 8005394:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	b2db      	uxtb	r3, r3
 800539a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	4619      	mov	r1, r3
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fae8 	bl	8005978 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	3301      	adds	r3, #1
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d3ce      	bcc.n	8005356 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695a      	ldr	r2, [r3, #20]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80053c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f004 fa4d 	bl	800986c <USB_ReadInterrupts>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053dc:	d155      	bne.n	800548a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053de:	2301      	movs	r3, #1
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
 80053e2:	e045      	b.n	8005470 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f8:	4613      	mov	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d12e      	bne.n	800546a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800540c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800540e:	2b00      	cmp	r3, #0
 8005410:	da2b      	bge.n	800546a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800541e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005422:	429a      	cmp	r2, r3
 8005424:	d121      	bne.n	800546a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800542a:	4613      	mov	r3, r2
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	4413      	add	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	440b      	add	r3, r1
 8005434:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005438:	2201      	movs	r2, #1
 800543a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005466:	6053      	str	r3, [r2, #4]
            break;
 8005468:	e007      	b.n	800547a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	3301      	adds	r3, #1
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005476:	429a      	cmp	r2, r3
 8005478:	d3b4      	bcc.n	80053e4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695a      	ldr	r2, [r3, #20]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005488:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4618      	mov	r0, r3
 8005490:	f004 f9ec 	bl	800986c <USB_ReadInterrupts>
 8005494:	4603      	mov	r3, r0
 8005496:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800549a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549e:	d10a      	bne.n	80054b6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f006 fe27 	bl	800c0f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695a      	ldr	r2, [r3, #20]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80054b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f004 f9d6 	bl	800986c <USB_ReadInterrupts>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d115      	bne.n	80054f6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f006 fe17 	bl	800c110 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6859      	ldr	r1, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]
 80054f2:	e000      	b.n	80054f6 <HAL_PCD_IRQHandler+0x938>
      return;
 80054f4:	bf00      	nop
    }
  }
}
 80054f6:	3734      	adds	r7, #52	; 0x34
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd90      	pop	{r4, r7, pc}

080054fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <HAL_PCD_SetAddress+0x1a>
 8005512:	2302      	movs	r3, #2
 8005514:	e013      	b.n	800553e <HAL_PCD_SetAddress+0x42>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	78fa      	ldrb	r2, [r7, #3]
 8005522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	78fa      	ldrb	r2, [r7, #3]
 800552c:	4611      	mov	r1, r2
 800552e:	4618      	mov	r0, r3
 8005530:	f004 f934 	bl	800979c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	4608      	mov	r0, r1
 8005550:	4611      	mov	r1, r2
 8005552:	461a      	mov	r2, r3
 8005554:	4603      	mov	r3, r0
 8005556:	70fb      	strb	r3, [r7, #3]
 8005558:	460b      	mov	r3, r1
 800555a:	803b      	strh	r3, [r7, #0]
 800555c:	4613      	mov	r3, r2
 800555e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005560:	2300      	movs	r3, #0
 8005562:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005564:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005568:	2b00      	cmp	r3, #0
 800556a:	da0f      	bge.n	800558c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	f003 020f 	and.w	r2, r3, #15
 8005572:	4613      	mov	r3, r2
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	3338      	adds	r3, #56	; 0x38
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	4413      	add	r3, r2
 8005580:	3304      	adds	r3, #4
 8005582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	705a      	strb	r2, [r3, #1]
 800558a:	e00f      	b.n	80055ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	f003 020f 	and.w	r2, r3, #15
 8005592:	4613      	mov	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	4413      	add	r3, r2
 80055a2:	3304      	adds	r3, #4
 80055a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80055b8:	883a      	ldrh	r2, [r7, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	78ba      	ldrb	r2, [r7, #2]
 80055c2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	785b      	ldrb	r3, [r3, #1]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d004      	beq.n	80055d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80055d6:	78bb      	ldrb	r3, [r7, #2]
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d102      	bne.n	80055e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_PCD_EP_Open+0xaa>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e00e      	b.n	800560e <HAL_PCD_EP_Open+0xc8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68f9      	ldr	r1, [r7, #12]
 80055fe:	4618      	mov	r0, r3
 8005600:	f003 f9b4 	bl	800896c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800560c:	7afb      	ldrb	r3, [r7, #11]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	460b      	mov	r3, r1
 8005620:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005622:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005626:	2b00      	cmp	r3, #0
 8005628:	da0f      	bge.n	800564a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800562a:	78fb      	ldrb	r3, [r7, #3]
 800562c:	f003 020f 	and.w	r2, r3, #15
 8005630:	4613      	mov	r3, r2
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	3338      	adds	r3, #56	; 0x38
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	4413      	add	r3, r2
 800563e:	3304      	adds	r3, #4
 8005640:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	705a      	strb	r2, [r3, #1]
 8005648:	e00f      	b.n	800566a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	f003 020f 	and.w	r2, r3, #15
 8005650:	4613      	mov	r3, r2
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	4413      	add	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	4413      	add	r3, r2
 8005660:	3304      	adds	r3, #4
 8005662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	b2da      	uxtb	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_PCD_EP_Close+0x6e>
 8005680:	2302      	movs	r3, #2
 8005682:	e00e      	b.n	80056a2 <HAL_PCD_EP_Close+0x8c>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68f9      	ldr	r1, [r7, #12]
 8005692:	4618      	mov	r0, r3
 8005694:	f003 f9f2 	bl	8008a7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b086      	sub	sp, #24
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	603b      	str	r3, [r7, #0]
 80056b6:	460b      	mov	r3, r1
 80056b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056ba:	7afb      	ldrb	r3, [r7, #11]
 80056bc:	f003 020f 	and.w	r2, r3, #15
 80056c0:	4613      	mov	r3, r2
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4413      	add	r3, r2
 80056d0:	3304      	adds	r3, #4
 80056d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2200      	movs	r2, #0
 80056e4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2200      	movs	r2, #0
 80056ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056ec:	7afb      	ldrb	r3, [r7, #11]
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d102      	bne.n	8005706 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005706:	7afb      	ldrb	r3, [r7, #11]
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	2b00      	cmp	r3, #0
 800570e:	d109      	bne.n	8005724 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	6979      	ldr	r1, [r7, #20]
 800571e:	f003 fcd1 	bl	80090c4 <USB_EP0StartXfer>
 8005722:	e008      	b.n	8005736 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	b2db      	uxtb	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	6979      	ldr	r1, [r7, #20]
 8005732:	f003 fa7f 	bl	8008c34 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800574c:	78fb      	ldrb	r3, [r7, #3]
 800574e:	f003 020f 	and.w	r2, r3, #15
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	4613      	mov	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005762:	681b      	ldr	r3, [r3, #0]
}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	607a      	str	r2, [r7, #4]
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	460b      	mov	r3, r1
 800577e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005780:	7afb      	ldrb	r3, [r7, #11]
 8005782:	f003 020f 	and.w	r2, r3, #15
 8005786:	4613      	mov	r3, r2
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	3338      	adds	r3, #56	; 0x38
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	3304      	adds	r3, #4
 8005796:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2200      	movs	r2, #0
 80057a8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2201      	movs	r2, #1
 80057ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057b0:	7afb      	ldrb	r3, [r7, #11]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d102      	bne.n	80057ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057ca:	7afb      	ldrb	r3, [r7, #11]
 80057cc:	f003 030f 	and.w	r3, r3, #15
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d109      	bne.n	80057e8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6818      	ldr	r0, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	461a      	mov	r2, r3
 80057e0:	6979      	ldr	r1, [r7, #20]
 80057e2:	f003 fc6f 	bl	80090c4 <USB_EP0StartXfer>
 80057e6:	e008      	b.n	80057fa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6818      	ldr	r0, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	461a      	mov	r2, r3
 80057f4:	6979      	ldr	r1, [r7, #20]
 80057f6:	f003 fa1d 	bl	8008c34 <USB_EPStartXfer>
  }

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	f003 020f 	and.w	r2, r3, #15
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	429a      	cmp	r2, r3
 800581c:	d901      	bls.n	8005822 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e050      	b.n	80058c4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005826:	2b00      	cmp	r3, #0
 8005828:	da0f      	bge.n	800584a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800582a:	78fb      	ldrb	r3, [r7, #3]
 800582c:	f003 020f 	and.w	r2, r3, #15
 8005830:	4613      	mov	r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	4413      	add	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	3338      	adds	r3, #56	; 0x38
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	4413      	add	r3, r2
 800583e:	3304      	adds	r3, #4
 8005840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	705a      	strb	r2, [r3, #1]
 8005848:	e00d      	b.n	8005866 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800584a:	78fa      	ldrb	r2, [r7, #3]
 800584c:	4613      	mov	r3, r2
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	4413      	add	r3, r2
 800585c:	3304      	adds	r3, #4
 800585e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	b2da      	uxtb	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <HAL_PCD_EP_SetStall+0x82>
 8005882:	2302      	movs	r3, #2
 8005884:	e01e      	b.n	80058c4 <HAL_PCD_EP_SetStall+0xc0>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68f9      	ldr	r1, [r7, #12]
 8005894:	4618      	mov	r0, r3
 8005896:	f003 fead 	bl	80095f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10a      	bne.n	80058ba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	b2d9      	uxtb	r1, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80058b4:	461a      	mov	r2, r3
 80058b6:	f004 f89d 	bl	80099f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058d8:	78fb      	ldrb	r3, [r7, #3]
 80058da:	f003 020f 	and.w	r2, r3, #15
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d901      	bls.n	80058ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e042      	b.n	8005970 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	da0f      	bge.n	8005912 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	f003 020f 	and.w	r2, r3, #15
 80058f8:	4613      	mov	r3, r2
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	3338      	adds	r3, #56	; 0x38
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	4413      	add	r3, r2
 8005906:	3304      	adds	r3, #4
 8005908:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2201      	movs	r2, #1
 800590e:	705a      	strb	r2, [r3, #1]
 8005910:	e00f      	b.n	8005932 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005912:	78fb      	ldrb	r3, [r7, #3]
 8005914:	f003 020f 	and.w	r2, r3, #15
 8005918:	4613      	mov	r3, r2
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	4413      	add	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	4413      	add	r3, r2
 8005928:	3304      	adds	r3, #4
 800592a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	f003 030f 	and.w	r3, r3, #15
 800593e:	b2da      	uxtb	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <HAL_PCD_EP_ClrStall+0x86>
 800594e:	2302      	movs	r3, #2
 8005950:	e00e      	b.n	8005970 <HAL_PCD_EP_ClrStall+0xa4>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68f9      	ldr	r1, [r7, #12]
 8005960:	4618      	mov	r0, r3
 8005962:	f003 feb5 	bl	80096d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005984:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005988:	2b00      	cmp	r3, #0
 800598a:	da0c      	bge.n	80059a6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	f003 020f 	and.w	r2, r3, #15
 8005992:	4613      	mov	r3, r2
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	3338      	adds	r3, #56	; 0x38
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	4413      	add	r3, r2
 80059a0:	3304      	adds	r3, #4
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e00c      	b.n	80059c0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059a6:	78fb      	ldrb	r3, [r7, #3]
 80059a8:	f003 020f 	and.w	r2, r3, #15
 80059ac:	4613      	mov	r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	4413      	add	r3, r2
 80059bc:	3304      	adds	r3, #4
 80059be:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68f9      	ldr	r1, [r7, #12]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f003 fcd4 	bl	8009374 <USB_EPStopXfer>
 80059cc:	4603      	mov	r3, r0
 80059ce:	72fb      	strb	r3, [r7, #11]

  return ret;
 80059d0:	7afb      	ldrb	r3, [r7, #11]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b08a      	sub	sp, #40	; 0x28
 80059de:	af02      	add	r7, sp, #8
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	4613      	mov	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	3338      	adds	r3, #56	; 0x38
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	4413      	add	r3, r2
 80059fe:	3304      	adds	r3, #4
 8005a00:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a1a      	ldr	r2, [r3, #32]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d901      	bls.n	8005a12 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e06c      	b.n	8005aec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d902      	bls.n	8005a2e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	3303      	adds	r3, #3
 8005a32:	089b      	lsrs	r3, r3, #2
 8005a34:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a36:	e02b      	b.n	8005a90 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	699a      	ldr	r2, [r3, #24]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d902      	bls.n	8005a54 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	3303      	adds	r3, #3
 8005a58:	089b      	lsrs	r3, r3, #2
 8005a5a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6919      	ldr	r1, [r3, #16]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	4603      	mov	r3, r0
 8005a72:	6978      	ldr	r0, [r7, #20]
 8005a74:	f003 fd28 	bl	80094c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	441a      	add	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a1a      	ldr	r2, [r3, #32]
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	441a      	add	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d809      	bhi.n	8005aba <PCD_WriteEmptyTxFifo+0xe0>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a1a      	ldr	r2, [r3, #32]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d203      	bcs.n	8005aba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1be      	bne.n	8005a38 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	699a      	ldr	r2, [r3, #24]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d811      	bhi.n	8005aea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	f003 030f 	and.w	r3, r3, #15
 8005acc:	2201      	movs	r2, #1
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	6939      	ldr	r1, [r7, #16]
 8005ae2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3720      	adds	r7, #32
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b088      	sub	sp, #32
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	333c      	adds	r3, #60	; 0x3c
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d17b      	bne.n	8005c22 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f003 0308 	and.w	r3, r3, #8
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d015      	beq.n	8005b60 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	4a61      	ldr	r2, [pc, #388]	; (8005cbc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	f240 80b9 	bls.w	8005cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 80b3 	beq.w	8005cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b56:	461a      	mov	r2, r3
 8005b58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b5c:	6093      	str	r3, [r2, #8]
 8005b5e:	e0a7      	b.n	8005cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d009      	beq.n	8005b7e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b76:	461a      	mov	r2, r3
 8005b78:	2320      	movs	r3, #32
 8005b7a:	6093      	str	r3, [r2, #8]
 8005b7c:	e098      	b.n	8005cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f040 8093 	bne.w	8005cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	4a4b      	ldr	r2, [pc, #300]	; (8005cbc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d90f      	bls.n	8005bb2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba8:	461a      	mov	r2, r3
 8005baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bae:	6093      	str	r3, [r2, #8]
 8005bb0:	e07e      	b.n	8005cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	0159      	lsls	r1, r3, #5
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	440b      	add	r3, r1
 8005bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bde:	1ad2      	subs	r2, r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d114      	bne.n	8005c14 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d109      	bne.n	8005c06 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	2101      	movs	r1, #1
 8005c00:	f003 fef8 	bl	80099f4 <USB_EP0_OutStart>
 8005c04:	e006      	b.n	8005c14 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	691a      	ldr	r2, [r3, #16]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	441a      	add	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f006 f9b0 	bl	800bf80 <HAL_PCD_DataOutStageCallback>
 8005c20:	e046      	b.n	8005cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	4a26      	ldr	r2, [pc, #152]	; (8005cc0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d124      	bne.n	8005c74 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00a      	beq.n	8005c4a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c40:	461a      	mov	r2, r3
 8005c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c46:	6093      	str	r3, [r2, #8]
 8005c48:	e032      	b.n	8005cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c60:	461a      	mov	r2, r3
 8005c62:	2320      	movs	r3, #32
 8005c64:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f006 f987 	bl	800bf80 <HAL_PCD_DataOutStageCallback>
 8005c72:	e01d      	b.n	8005cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d114      	bne.n	8005ca4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	440b      	add	r3, r1
 8005c88:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d108      	bne.n	8005ca4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	f003 fea8 	bl	80099f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f006 f968 	bl	800bf80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3720      	adds	r7, #32
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	4f54300a 	.word	0x4f54300a
 8005cc0:	4f54310a 	.word	0x4f54310a

08005cc4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	333c      	adds	r3, #60	; 0x3c
 8005cdc:	3304      	adds	r3, #4
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4a15      	ldr	r2, [pc, #84]	; (8005d4c <PCD_EP_OutSetupPacket_int+0x88>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d90e      	bls.n	8005d18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d009      	beq.n	8005d18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d10:	461a      	mov	r2, r3
 8005d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f006 f91f 	bl	800bf5c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4a0a      	ldr	r2, [pc, #40]	; (8005d4c <PCD_EP_OutSetupPacket_int+0x88>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d90c      	bls.n	8005d40 <PCD_EP_OutSetupPacket_int+0x7c>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d108      	bne.n	8005d40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d38:	461a      	mov	r2, r3
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	f003 fe5a 	bl	80099f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	4f54300a 	.word	0x4f54300a

08005d50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	70fb      	strb	r3, [r7, #3]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d107      	bne.n	8005d7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d6e:	883b      	ldrh	r3, [r7, #0]
 8005d70:	0419      	lsls	r1, r3, #16
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005d7c:	e028      	b.n	8005dd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d84:	0c1b      	lsrs	r3, r3, #16
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	4413      	add	r3, r2
 8005d8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	73fb      	strb	r3, [r7, #15]
 8005d90:	e00d      	b.n	8005dae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	3340      	adds	r3, #64	; 0x40
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	0c1b      	lsrs	r3, r3, #16
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	4413      	add	r3, r2
 8005da6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	3301      	adds	r3, #1
 8005dac:	73fb      	strb	r3, [r7, #15]
 8005dae:	7bfa      	ldrb	r2, [r7, #15]
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d3ec      	bcc.n	8005d92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005db8:	883b      	ldrh	r3, [r7, #0]
 8005dba:	0418      	lsls	r0, r3, #16
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6819      	ldr	r1, [r3, #0]
 8005dc0:	78fb      	ldrb	r3, [r7, #3]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	4302      	orrs	r2, r0
 8005dc8:	3340      	adds	r3, #64	; 0x40
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	460b      	mov	r3, r1
 8005de8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	887a      	ldrh	r2, [r7, #2]
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e267      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d075      	beq.n	8005f22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e36:	4b88      	ldr	r3, [pc, #544]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 030c 	and.w	r3, r3, #12
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d00c      	beq.n	8005e5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e42:	4b85      	ldr	r3, [pc, #532]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d112      	bne.n	8005e74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e4e:	4b82      	ldr	r3, [pc, #520]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e5a:	d10b      	bne.n	8005e74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e5c:	4b7e      	ldr	r3, [pc, #504]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d05b      	beq.n	8005f20 <HAL_RCC_OscConfig+0x108>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d157      	bne.n	8005f20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e242      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e7c:	d106      	bne.n	8005e8c <HAL_RCC_OscConfig+0x74>
 8005e7e:	4b76      	ldr	r3, [pc, #472]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a75      	ldr	r2, [pc, #468]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	e01d      	b.n	8005ec8 <HAL_RCC_OscConfig+0xb0>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e94:	d10c      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x98>
 8005e96:	4b70      	ldr	r3, [pc, #448]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a6f      	ldr	r2, [pc, #444]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	4b6d      	ldr	r3, [pc, #436]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a6c      	ldr	r2, [pc, #432]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	e00b      	b.n	8005ec8 <HAL_RCC_OscConfig+0xb0>
 8005eb0:	4b69      	ldr	r3, [pc, #420]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a68      	ldr	r2, [pc, #416]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eba:	6013      	str	r3, [r2, #0]
 8005ebc:	4b66      	ldr	r3, [pc, #408]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a65      	ldr	r2, [pc, #404]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d013      	beq.n	8005ef8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed0:	f7fc f92e 	bl	8002130 <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ed8:	f7fc f92a 	bl	8002130 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b64      	cmp	r3, #100	; 0x64
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e207      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eea:	4b5b      	ldr	r3, [pc, #364]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0f0      	beq.n	8005ed8 <HAL_RCC_OscConfig+0xc0>
 8005ef6:	e014      	b.n	8005f22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef8:	f7fc f91a 	bl	8002130 <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005efe:	e008      	b.n	8005f12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f00:	f7fc f916 	bl	8002130 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b64      	cmp	r3, #100	; 0x64
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e1f3      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f12:	4b51      	ldr	r3, [pc, #324]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1f0      	bne.n	8005f00 <HAL_RCC_OscConfig+0xe8>
 8005f1e:	e000      	b.n	8005f22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d063      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f2e:	4b4a      	ldr	r3, [pc, #296]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 030c 	and.w	r3, r3, #12
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00b      	beq.n	8005f52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f3a:	4b47      	ldr	r3, [pc, #284]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f42:	2b08      	cmp	r3, #8
 8005f44:	d11c      	bne.n	8005f80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f46:	4b44      	ldr	r3, [pc, #272]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d116      	bne.n	8005f80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f52:	4b41      	ldr	r3, [pc, #260]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d005      	beq.n	8005f6a <HAL_RCC_OscConfig+0x152>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d001      	beq.n	8005f6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e1c7      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f6a:	4b3b      	ldr	r3, [pc, #236]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	4937      	ldr	r1, [pc, #220]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f7e:	e03a      	b.n	8005ff6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d020      	beq.n	8005fca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f88:	4b34      	ldr	r3, [pc, #208]	; (800605c <HAL_RCC_OscConfig+0x244>)
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8e:	f7fc f8cf 	bl	8002130 <HAL_GetTick>
 8005f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f94:	e008      	b.n	8005fa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f96:	f7fc f8cb 	bl	8002130 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d901      	bls.n	8005fa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e1a8      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa8:	4b2b      	ldr	r3, [pc, #172]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0f0      	beq.n	8005f96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fb4:	4b28      	ldr	r3, [pc, #160]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	4925      	ldr	r1, [pc, #148]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	600b      	str	r3, [r1, #0]
 8005fc8:	e015      	b.n	8005ff6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fca:	4b24      	ldr	r3, [pc, #144]	; (800605c <HAL_RCC_OscConfig+0x244>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd0:	f7fc f8ae 	bl	8002130 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fd8:	f7fc f8aa 	bl	8002130 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e187      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fea:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f0      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0308 	and.w	r3, r3, #8
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d036      	beq.n	8006070 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d016      	beq.n	8006038 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800600a:	4b15      	ldr	r3, [pc, #84]	; (8006060 <HAL_RCC_OscConfig+0x248>)
 800600c:	2201      	movs	r2, #1
 800600e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006010:	f7fc f88e 	bl	8002130 <HAL_GetTick>
 8006014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006016:	e008      	b.n	800602a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006018:	f7fc f88a 	bl	8002130 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e167      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800602a:	4b0b      	ldr	r3, [pc, #44]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 800602c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0f0      	beq.n	8006018 <HAL_RCC_OscConfig+0x200>
 8006036:	e01b      	b.n	8006070 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006038:	4b09      	ldr	r3, [pc, #36]	; (8006060 <HAL_RCC_OscConfig+0x248>)
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800603e:	f7fc f877 	bl	8002130 <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006044:	e00e      	b.n	8006064 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006046:	f7fc f873 	bl	8002130 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d907      	bls.n	8006064 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e150      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
 8006058:	40023800 	.word	0x40023800
 800605c:	42470000 	.word	0x42470000
 8006060:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006064:	4b88      	ldr	r3, [pc, #544]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1ea      	bne.n	8006046 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 8097 	beq.w	80061ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800607e:	2300      	movs	r3, #0
 8006080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006082:	4b81      	ldr	r3, [pc, #516]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10f      	bne.n	80060ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800608e:	2300      	movs	r3, #0
 8006090:	60bb      	str	r3, [r7, #8]
 8006092:	4b7d      	ldr	r3, [pc, #500]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	4a7c      	ldr	r2, [pc, #496]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800609c:	6413      	str	r3, [r2, #64]	; 0x40
 800609e:	4b7a      	ldr	r3, [pc, #488]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a6:	60bb      	str	r3, [r7, #8]
 80060a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060aa:	2301      	movs	r3, #1
 80060ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ae:	4b77      	ldr	r3, [pc, #476]	; (800628c <HAL_RCC_OscConfig+0x474>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d118      	bne.n	80060ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060ba:	4b74      	ldr	r3, [pc, #464]	; (800628c <HAL_RCC_OscConfig+0x474>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a73      	ldr	r2, [pc, #460]	; (800628c <HAL_RCC_OscConfig+0x474>)
 80060c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060c6:	f7fc f833 	bl	8002130 <HAL_GetTick>
 80060ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060cc:	e008      	b.n	80060e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ce:	f7fc f82f 	bl	8002130 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e10c      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e0:	4b6a      	ldr	r3, [pc, #424]	; (800628c <HAL_RCC_OscConfig+0x474>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0f0      	beq.n	80060ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d106      	bne.n	8006102 <HAL_RCC_OscConfig+0x2ea>
 80060f4:	4b64      	ldr	r3, [pc, #400]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 80060f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f8:	4a63      	ldr	r2, [pc, #396]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 80060fa:	f043 0301 	orr.w	r3, r3, #1
 80060fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006100:	e01c      	b.n	800613c <HAL_RCC_OscConfig+0x324>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2b05      	cmp	r3, #5
 8006108:	d10c      	bne.n	8006124 <HAL_RCC_OscConfig+0x30c>
 800610a:	4b5f      	ldr	r3, [pc, #380]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 800610c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610e:	4a5e      	ldr	r2, [pc, #376]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006110:	f043 0304 	orr.w	r3, r3, #4
 8006114:	6713      	str	r3, [r2, #112]	; 0x70
 8006116:	4b5c      	ldr	r3, [pc, #368]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611a:	4a5b      	ldr	r2, [pc, #364]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 800611c:	f043 0301 	orr.w	r3, r3, #1
 8006120:	6713      	str	r3, [r2, #112]	; 0x70
 8006122:	e00b      	b.n	800613c <HAL_RCC_OscConfig+0x324>
 8006124:	4b58      	ldr	r3, [pc, #352]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006128:	4a57      	ldr	r2, [pc, #348]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 800612a:	f023 0301 	bic.w	r3, r3, #1
 800612e:	6713      	str	r3, [r2, #112]	; 0x70
 8006130:	4b55      	ldr	r3, [pc, #340]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006134:	4a54      	ldr	r2, [pc, #336]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006136:	f023 0304 	bic.w	r3, r3, #4
 800613a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d015      	beq.n	8006170 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006144:	f7fb fff4 	bl	8002130 <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800614a:	e00a      	b.n	8006162 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800614c:	f7fb fff0 	bl	8002130 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	f241 3288 	movw	r2, #5000	; 0x1388
 800615a:	4293      	cmp	r3, r2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e0cb      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006162:	4b49      	ldr	r3, [pc, #292]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0ee      	beq.n	800614c <HAL_RCC_OscConfig+0x334>
 800616e:	e014      	b.n	800619a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006170:	f7fb ffde 	bl	8002130 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006176:	e00a      	b.n	800618e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006178:	f7fb ffda 	bl	8002130 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	f241 3288 	movw	r2, #5000	; 0x1388
 8006186:	4293      	cmp	r3, r2
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e0b5      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800618e:	4b3e      	ldr	r3, [pc, #248]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1ee      	bne.n	8006178 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800619a:	7dfb      	ldrb	r3, [r7, #23]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d105      	bne.n	80061ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061a0:	4b39      	ldr	r3, [pc, #228]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 80061a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a4:	4a38      	ldr	r2, [pc, #224]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 80061a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 80a1 	beq.w	80062f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061b6:	4b34      	ldr	r3, [pc, #208]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 030c 	and.w	r3, r3, #12
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d05c      	beq.n	800627c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d141      	bne.n	800624e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ca:	4b31      	ldr	r3, [pc, #196]	; (8006290 <HAL_RCC_OscConfig+0x478>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d0:	f7fb ffae 	bl	8002130 <HAL_GetTick>
 80061d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d6:	e008      	b.n	80061ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061d8:	f7fb ffaa 	bl	8002130 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e087      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ea:	4b27      	ldr	r3, [pc, #156]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1f0      	bne.n	80061d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	69da      	ldr	r2, [r3, #28]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	019b      	lsls	r3, r3, #6
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620c:	085b      	lsrs	r3, r3, #1
 800620e:	3b01      	subs	r3, #1
 8006210:	041b      	lsls	r3, r3, #16
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	061b      	lsls	r3, r3, #24
 800621a:	491b      	ldr	r1, [pc, #108]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 800621c:	4313      	orrs	r3, r2
 800621e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006220:	4b1b      	ldr	r3, [pc, #108]	; (8006290 <HAL_RCC_OscConfig+0x478>)
 8006222:	2201      	movs	r2, #1
 8006224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006226:	f7fb ff83 	bl	8002130 <HAL_GetTick>
 800622a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800622c:	e008      	b.n	8006240 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800622e:	f7fb ff7f 	bl	8002130 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e05c      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006240:	4b11      	ldr	r3, [pc, #68]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0f0      	beq.n	800622e <HAL_RCC_OscConfig+0x416>
 800624c:	e054      	b.n	80062f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800624e:	4b10      	ldr	r3, [pc, #64]	; (8006290 <HAL_RCC_OscConfig+0x478>)
 8006250:	2200      	movs	r2, #0
 8006252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006254:	f7fb ff6c 	bl	8002130 <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800625c:	f7fb ff68 	bl	8002130 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e045      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800626e:	4b06      	ldr	r3, [pc, #24]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f0      	bne.n	800625c <HAL_RCC_OscConfig+0x444>
 800627a:	e03d      	b.n	80062f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d107      	bne.n	8006294 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e038      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
 8006288:	40023800 	.word	0x40023800
 800628c:	40007000 	.word	0x40007000
 8006290:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006294:	4b1b      	ldr	r3, [pc, #108]	; (8006304 <HAL_RCC_OscConfig+0x4ec>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d028      	beq.n	80062f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d121      	bne.n	80062f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d11a      	bne.n	80062f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062c4:	4013      	ands	r3, r2
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d111      	bne.n	80062f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062da:	085b      	lsrs	r3, r3, #1
 80062dc:	3b01      	subs	r3, #1
 80062de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d107      	bne.n	80062f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d001      	beq.n	80062f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	40023800 	.word	0x40023800

08006308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0cc      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800631c:	4b68      	ldr	r3, [pc, #416]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d90c      	bls.n	8006344 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800632a:	4b65      	ldr	r3, [pc, #404]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006332:	4b63      	ldr	r3, [pc, #396]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d001      	beq.n	8006344 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e0b8      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d020      	beq.n	8006392 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800635c:	4b59      	ldr	r3, [pc, #356]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	4a58      	ldr	r2, [pc, #352]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006362:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006366:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006374:	4b53      	ldr	r3, [pc, #332]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	4a52      	ldr	r2, [pc, #328]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800637e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006380:	4b50      	ldr	r3, [pc, #320]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	494d      	ldr	r1, [pc, #308]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800638e:	4313      	orrs	r3, r2
 8006390:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d044      	beq.n	8006428 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d107      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063a6:	4b47      	ldr	r3, [pc, #284]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d119      	bne.n	80063e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e07f      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d003      	beq.n	80063c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d107      	bne.n	80063d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063c6:	4b3f      	ldr	r3, [pc, #252]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e06f      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063d6:	4b3b      	ldr	r3, [pc, #236]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e067      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063e6:	4b37      	ldr	r3, [pc, #220]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f023 0203 	bic.w	r2, r3, #3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	4934      	ldr	r1, [pc, #208]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063f8:	f7fb fe9a 	bl	8002130 <HAL_GetTick>
 80063fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063fe:	e00a      	b.n	8006416 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006400:	f7fb fe96 	bl	8002130 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	f241 3288 	movw	r2, #5000	; 0x1388
 800640e:	4293      	cmp	r3, r2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e04f      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006416:	4b2b      	ldr	r3, [pc, #172]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f003 020c 	and.w	r2, r3, #12
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	429a      	cmp	r2, r3
 8006426:	d1eb      	bne.n	8006400 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006428:	4b25      	ldr	r3, [pc, #148]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d20c      	bcs.n	8006450 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006436:	4b22      	ldr	r3, [pc, #136]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800643e:	4b20      	ldr	r3, [pc, #128]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	429a      	cmp	r2, r3
 800644a:	d001      	beq.n	8006450 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e032      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b00      	cmp	r3, #0
 800645a:	d008      	beq.n	800646e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800645c:	4b19      	ldr	r3, [pc, #100]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	4916      	ldr	r1, [pc, #88]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800646a:	4313      	orrs	r3, r2
 800646c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0308 	and.w	r3, r3, #8
 8006476:	2b00      	cmp	r3, #0
 8006478:	d009      	beq.n	800648e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800647a:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	490e      	ldr	r1, [pc, #56]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	4313      	orrs	r3, r2
 800648c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800648e:	f000 f821 	bl	80064d4 <HAL_RCC_GetSysClockFreq>
 8006492:	4602      	mov	r2, r0
 8006494:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	091b      	lsrs	r3, r3, #4
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	490a      	ldr	r1, [pc, #40]	; (80064c8 <HAL_RCC_ClockConfig+0x1c0>)
 80064a0:	5ccb      	ldrb	r3, [r1, r3]
 80064a2:	fa22 f303 	lsr.w	r3, r2, r3
 80064a6:	4a09      	ldr	r2, [pc, #36]	; (80064cc <HAL_RCC_ClockConfig+0x1c4>)
 80064a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064aa:	4b09      	ldr	r3, [pc, #36]	; (80064d0 <HAL_RCC_ClockConfig+0x1c8>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fb fdfa 	bl	80020a8 <HAL_InitTick>

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	40023c00 	.word	0x40023c00
 80064c4:	40023800 	.word	0x40023800
 80064c8:	0800f270 	.word	0x0800f270
 80064cc:	20000028 	.word	0x20000028
 80064d0:	2000002c 	.word	0x2000002c

080064d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064d8:	b090      	sub	sp, #64	; 0x40
 80064da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	637b      	str	r3, [r7, #52]	; 0x34
 80064e0:	2300      	movs	r3, #0
 80064e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e4:	2300      	movs	r3, #0
 80064e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064ec:	4b59      	ldr	r3, [pc, #356]	; (8006654 <HAL_RCC_GetSysClockFreq+0x180>)
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f003 030c 	and.w	r3, r3, #12
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d00d      	beq.n	8006514 <HAL_RCC_GetSysClockFreq+0x40>
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	f200 80a1 	bhi.w	8006640 <HAL_RCC_GetSysClockFreq+0x16c>
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <HAL_RCC_GetSysClockFreq+0x34>
 8006502:	2b04      	cmp	r3, #4
 8006504:	d003      	beq.n	800650e <HAL_RCC_GetSysClockFreq+0x3a>
 8006506:	e09b      	b.n	8006640 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006508:	4b53      	ldr	r3, [pc, #332]	; (8006658 <HAL_RCC_GetSysClockFreq+0x184>)
 800650a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800650c:	e09b      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800650e:	4b53      	ldr	r3, [pc, #332]	; (800665c <HAL_RCC_GetSysClockFreq+0x188>)
 8006510:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006512:	e098      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006514:	4b4f      	ldr	r3, [pc, #316]	; (8006654 <HAL_RCC_GetSysClockFreq+0x180>)
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800651e:	4b4d      	ldr	r3, [pc, #308]	; (8006654 <HAL_RCC_GetSysClockFreq+0x180>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d028      	beq.n	800657c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800652a:	4b4a      	ldr	r3, [pc, #296]	; (8006654 <HAL_RCC_GetSysClockFreq+0x180>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	099b      	lsrs	r3, r3, #6
 8006530:	2200      	movs	r2, #0
 8006532:	623b      	str	r3, [r7, #32]
 8006534:	627a      	str	r2, [r7, #36]	; 0x24
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800653c:	2100      	movs	r1, #0
 800653e:	4b47      	ldr	r3, [pc, #284]	; (800665c <HAL_RCC_GetSysClockFreq+0x188>)
 8006540:	fb03 f201 	mul.w	r2, r3, r1
 8006544:	2300      	movs	r3, #0
 8006546:	fb00 f303 	mul.w	r3, r0, r3
 800654a:	4413      	add	r3, r2
 800654c:	4a43      	ldr	r2, [pc, #268]	; (800665c <HAL_RCC_GetSysClockFreq+0x188>)
 800654e:	fba0 1202 	umull	r1, r2, r0, r2
 8006552:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006554:	460a      	mov	r2, r1
 8006556:	62ba      	str	r2, [r7, #40]	; 0x28
 8006558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800655a:	4413      	add	r3, r2
 800655c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800655e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006560:	2200      	movs	r2, #0
 8006562:	61bb      	str	r3, [r7, #24]
 8006564:	61fa      	str	r2, [r7, #28]
 8006566:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800656a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800656e:	f7fa fb23 	bl	8000bb8 <__aeabi_uldivmod>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	4613      	mov	r3, r2
 8006578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800657a:	e053      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800657c:	4b35      	ldr	r3, [pc, #212]	; (8006654 <HAL_RCC_GetSysClockFreq+0x180>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	099b      	lsrs	r3, r3, #6
 8006582:	2200      	movs	r2, #0
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	617a      	str	r2, [r7, #20]
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800658e:	f04f 0b00 	mov.w	fp, #0
 8006592:	4652      	mov	r2, sl
 8006594:	465b      	mov	r3, fp
 8006596:	f04f 0000 	mov.w	r0, #0
 800659a:	f04f 0100 	mov.w	r1, #0
 800659e:	0159      	lsls	r1, r3, #5
 80065a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065a4:	0150      	lsls	r0, r2, #5
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	ebb2 080a 	subs.w	r8, r2, sl
 80065ae:	eb63 090b 	sbc.w	r9, r3, fp
 80065b2:	f04f 0200 	mov.w	r2, #0
 80065b6:	f04f 0300 	mov.w	r3, #0
 80065ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80065be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80065c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80065c6:	ebb2 0408 	subs.w	r4, r2, r8
 80065ca:	eb63 0509 	sbc.w	r5, r3, r9
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	f04f 0300 	mov.w	r3, #0
 80065d6:	00eb      	lsls	r3, r5, #3
 80065d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065dc:	00e2      	lsls	r2, r4, #3
 80065de:	4614      	mov	r4, r2
 80065e0:	461d      	mov	r5, r3
 80065e2:	eb14 030a 	adds.w	r3, r4, sl
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	eb45 030b 	adc.w	r3, r5, fp
 80065ec:	607b      	str	r3, [r7, #4]
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	f04f 0300 	mov.w	r3, #0
 80065f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065fa:	4629      	mov	r1, r5
 80065fc:	028b      	lsls	r3, r1, #10
 80065fe:	4621      	mov	r1, r4
 8006600:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006604:	4621      	mov	r1, r4
 8006606:	028a      	lsls	r2, r1, #10
 8006608:	4610      	mov	r0, r2
 800660a:	4619      	mov	r1, r3
 800660c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660e:	2200      	movs	r2, #0
 8006610:	60bb      	str	r3, [r7, #8]
 8006612:	60fa      	str	r2, [r7, #12]
 8006614:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006618:	f7fa face 	bl	8000bb8 <__aeabi_uldivmod>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4613      	mov	r3, r2
 8006622:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006624:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <HAL_RCC_GetSysClockFreq+0x180>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	0c1b      	lsrs	r3, r3, #16
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	3301      	adds	r3, #1
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006634:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	fbb2 f3f3 	udiv	r3, r2, r3
 800663c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800663e:	e002      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006640:	4b05      	ldr	r3, [pc, #20]	; (8006658 <HAL_RCC_GetSysClockFreq+0x184>)
 8006642:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006648:	4618      	mov	r0, r3
 800664a:	3740      	adds	r7, #64	; 0x40
 800664c:	46bd      	mov	sp, r7
 800664e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006652:	bf00      	nop
 8006654:	40023800 	.word	0x40023800
 8006658:	00f42400 	.word	0x00f42400
 800665c:	017d7840 	.word	0x017d7840

08006660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006664:	4b03      	ldr	r3, [pc, #12]	; (8006674 <HAL_RCC_GetHCLKFreq+0x14>)
 8006666:	681b      	ldr	r3, [r3, #0]
}
 8006668:	4618      	mov	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	20000028 	.word	0x20000028

08006678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800667c:	f7ff fff0 	bl	8006660 <HAL_RCC_GetHCLKFreq>
 8006680:	4602      	mov	r2, r0
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	0a9b      	lsrs	r3, r3, #10
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	4903      	ldr	r1, [pc, #12]	; (800669c <HAL_RCC_GetPCLK1Freq+0x24>)
 800668e:	5ccb      	ldrb	r3, [r1, r3]
 8006690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006694:	4618      	mov	r0, r3
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40023800 	.word	0x40023800
 800669c:	0800f280 	.word	0x0800f280

080066a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066a4:	f7ff ffdc 	bl	8006660 <HAL_RCC_GetHCLKFreq>
 80066a8:	4602      	mov	r2, r0
 80066aa:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	0b5b      	lsrs	r3, r3, #13
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	4903      	ldr	r1, [pc, #12]	; (80066c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066b6:	5ccb      	ldrb	r3, [r1, r3]
 80066b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066bc:	4618      	mov	r0, r3
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40023800 	.word	0x40023800
 80066c4:	0800f280 	.word	0x0800f280

080066c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e07b      	b.n	80067d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d108      	bne.n	80066f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ea:	d009      	beq.n	8006700 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	61da      	str	r2, [r3, #28]
 80066f2:	e005      	b.n	8006700 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fb f91c 	bl	8001958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006736:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006748:	431a      	orrs	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006770:	431a      	orrs	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006784:	ea42 0103 	orr.w	r1, r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	0c1b      	lsrs	r3, r3, #16
 800679e:	f003 0104 	and.w	r1, r3, #4
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	f003 0210 	and.w	r2, r3, #16
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69da      	ldr	r2, [r3, #28]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b082      	sub	sp, #8
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e041      	b.n	8006870 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7fb f8f1 	bl	80019e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2202      	movs	r2, #2
 800680a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3304      	adds	r3, #4
 8006816:	4619      	mov	r1, r3
 8006818:	4610      	mov	r0, r2
 800681a:	f000 fcc5 	bl	80071a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b01      	cmp	r3, #1
 800688a:	d001      	beq.n	8006890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e044      	b.n	800691a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0201 	orr.w	r2, r2, #1
 80068a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a1e      	ldr	r2, [pc, #120]	; (8006928 <HAL_TIM_Base_Start_IT+0xb0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d018      	beq.n	80068e4 <HAL_TIM_Base_Start_IT+0x6c>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ba:	d013      	beq.n	80068e4 <HAL_TIM_Base_Start_IT+0x6c>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a1a      	ldr	r2, [pc, #104]	; (800692c <HAL_TIM_Base_Start_IT+0xb4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00e      	beq.n	80068e4 <HAL_TIM_Base_Start_IT+0x6c>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a19      	ldr	r2, [pc, #100]	; (8006930 <HAL_TIM_Base_Start_IT+0xb8>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d009      	beq.n	80068e4 <HAL_TIM_Base_Start_IT+0x6c>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a17      	ldr	r2, [pc, #92]	; (8006934 <HAL_TIM_Base_Start_IT+0xbc>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d004      	beq.n	80068e4 <HAL_TIM_Base_Start_IT+0x6c>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a16      	ldr	r2, [pc, #88]	; (8006938 <HAL_TIM_Base_Start_IT+0xc0>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d111      	bne.n	8006908 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 0307 	and.w	r3, r3, #7
 80068ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2b06      	cmp	r3, #6
 80068f4:	d010      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0201 	orr.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006906:	e007      	b.n	8006918 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40010000 	.word	0x40010000
 800692c:	40000400 	.word	0x40000400
 8006930:	40000800 	.word	0x40000800
 8006934:	40000c00 	.word	0x40000c00
 8006938:	40014000 	.word	0x40014000

0800693c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e041      	b.n	80069d2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d106      	bne.n	8006968 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7fb f8be 	bl	8001ae4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3304      	adds	r3, #4
 8006978:	4619      	mov	r1, r3
 800697a:	4610      	mov	r0, r2
 800697c:	f000 fc14 	bl	80071a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e041      	b.n	8006a70 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d106      	bne.n	8006a06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f839 	bl	8006a78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	3304      	adds	r3, #4
 8006a16:	4619      	mov	r1, r3
 8006a18:	4610      	mov	r0, r2
 8006a1a:	f000 fbc5 	bl	80071a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d109      	bne.n	8006ab0 <HAL_TIM_PWM_Start+0x24>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	bf14      	ite	ne
 8006aa8:	2301      	movne	r3, #1
 8006aaa:	2300      	moveq	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	e022      	b.n	8006af6 <HAL_TIM_PWM_Start+0x6a>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d109      	bne.n	8006aca <HAL_TIM_PWM_Start+0x3e>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	bf14      	ite	ne
 8006ac2:	2301      	movne	r3, #1
 8006ac4:	2300      	moveq	r3, #0
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	e015      	b.n	8006af6 <HAL_TIM_PWM_Start+0x6a>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d109      	bne.n	8006ae4 <HAL_TIM_PWM_Start+0x58>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	bf14      	ite	ne
 8006adc:	2301      	movne	r3, #1
 8006ade:	2300      	moveq	r3, #0
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	e008      	b.n	8006af6 <HAL_TIM_PWM_Start+0x6a>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	bf14      	ite	ne
 8006af0:	2301      	movne	r3, #1
 8006af2:	2300      	moveq	r3, #0
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e068      	b.n	8006bd0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d104      	bne.n	8006b0e <HAL_TIM_PWM_Start+0x82>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b0c:	e013      	b.n	8006b36 <HAL_TIM_PWM_Start+0xaa>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d104      	bne.n	8006b1e <HAL_TIM_PWM_Start+0x92>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b1c:	e00b      	b.n	8006b36 <HAL_TIM_PWM_Start+0xaa>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d104      	bne.n	8006b2e <HAL_TIM_PWM_Start+0xa2>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b2c:	e003      	b.n	8006b36 <HAL_TIM_PWM_Start+0xaa>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2202      	movs	r2, #2
 8006b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 feb7 	bl	80078b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a23      	ldr	r2, [pc, #140]	; (8006bd8 <HAL_TIM_PWM_Start+0x14c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d107      	bne.n	8006b5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a1d      	ldr	r2, [pc, #116]	; (8006bd8 <HAL_TIM_PWM_Start+0x14c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d018      	beq.n	8006b9a <HAL_TIM_PWM_Start+0x10e>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b70:	d013      	beq.n	8006b9a <HAL_TIM_PWM_Start+0x10e>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a19      	ldr	r2, [pc, #100]	; (8006bdc <HAL_TIM_PWM_Start+0x150>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d00e      	beq.n	8006b9a <HAL_TIM_PWM_Start+0x10e>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a17      	ldr	r2, [pc, #92]	; (8006be0 <HAL_TIM_PWM_Start+0x154>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d009      	beq.n	8006b9a <HAL_TIM_PWM_Start+0x10e>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a16      	ldr	r2, [pc, #88]	; (8006be4 <HAL_TIM_PWM_Start+0x158>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d004      	beq.n	8006b9a <HAL_TIM_PWM_Start+0x10e>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a14      	ldr	r2, [pc, #80]	; (8006be8 <HAL_TIM_PWM_Start+0x15c>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d111      	bne.n	8006bbe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2b06      	cmp	r3, #6
 8006baa:	d010      	beq.n	8006bce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0201 	orr.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bbc:	e007      	b.n	8006bce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f042 0201 	orr.w	r2, r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	40010000 	.word	0x40010000
 8006bdc:	40000400 	.word	0x40000400
 8006be0:	40000800 	.word	0x40000800
 8006be4:	40000c00 	.word	0x40000c00
 8006be8:	40014000 	.word	0x40014000

08006bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d122      	bne.n	8006c48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d11b      	bne.n	8006c48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f06f 0202 	mvn.w	r2, #2
 8006c18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	f003 0303 	and.w	r3, r3, #3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fa9c 	bl	800716c <HAL_TIM_IC_CaptureCallback>
 8006c34:	e005      	b.n	8006c42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fa8e 	bl	8007158 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fa9f 	bl	8007180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f003 0304 	and.w	r3, r3, #4
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	d122      	bne.n	8006c9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d11b      	bne.n	8006c9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f06f 0204 	mvn.w	r2, #4
 8006c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2202      	movs	r2, #2
 8006c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fa72 	bl	800716c <HAL_TIM_IC_CaptureCallback>
 8006c88:	e005      	b.n	8006c96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa64 	bl	8007158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fa75 	bl	8007180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0308 	and.w	r3, r3, #8
 8006ca6:	2b08      	cmp	r3, #8
 8006ca8:	d122      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f003 0308 	and.w	r3, r3, #8
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d11b      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f06f 0208 	mvn.w	r2, #8
 8006cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2204      	movs	r2, #4
 8006cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fa48 	bl	800716c <HAL_TIM_IC_CaptureCallback>
 8006cdc:	e005      	b.n	8006cea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa3a 	bl	8007158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fa4b 	bl	8007180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f003 0310 	and.w	r3, r3, #16
 8006cfa:	2b10      	cmp	r3, #16
 8006cfc:	d122      	bne.n	8006d44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f003 0310 	and.w	r3, r3, #16
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d11b      	bne.n	8006d44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f06f 0210 	mvn.w	r2, #16
 8006d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2208      	movs	r2, #8
 8006d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fa1e 	bl	800716c <HAL_TIM_IC_CaptureCallback>
 8006d30:	e005      	b.n	8006d3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fa10 	bl	8007158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fa21 	bl	8007180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d10e      	bne.n	8006d70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d107      	bne.n	8006d70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f06f 0201 	mvn.w	r2, #1
 8006d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f9ea 	bl	8007144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7a:	2b80      	cmp	r3, #128	; 0x80
 8006d7c:	d10e      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d88:	2b80      	cmp	r3, #128	; 0x80
 8006d8a:	d107      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 ffa4 	bl	8007ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da6:	2b40      	cmp	r3, #64	; 0x40
 8006da8:	d10e      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db4:	2b40      	cmp	r3, #64	; 0x40
 8006db6:	d107      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f9e6 	bl	8007194 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f003 0320 	and.w	r3, r3, #32
 8006dd2:	2b20      	cmp	r3, #32
 8006dd4:	d10e      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f003 0320 	and.w	r3, r3, #32
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	d107      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f06f 0220 	mvn.w	r2, #32
 8006dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 ff6e 	bl	8007cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006df4:	bf00      	nop
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d101      	bne.n	8006e1a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006e16:	2302      	movs	r3, #2
 8006e18:	e048      	b.n	8006eac <HAL_TIM_OC_ConfigChannel+0xb0>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b0c      	cmp	r3, #12
 8006e26:	d839      	bhi.n	8006e9c <HAL_TIM_OC_ConfigChannel+0xa0>
 8006e28:	a201      	add	r2, pc, #4	; (adr r2, 8006e30 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2e:	bf00      	nop
 8006e30:	08006e65 	.word	0x08006e65
 8006e34:	08006e9d 	.word	0x08006e9d
 8006e38:	08006e9d 	.word	0x08006e9d
 8006e3c:	08006e9d 	.word	0x08006e9d
 8006e40:	08006e73 	.word	0x08006e73
 8006e44:	08006e9d 	.word	0x08006e9d
 8006e48:	08006e9d 	.word	0x08006e9d
 8006e4c:	08006e9d 	.word	0x08006e9d
 8006e50:	08006e81 	.word	0x08006e81
 8006e54:	08006e9d 	.word	0x08006e9d
 8006e58:	08006e9d 	.word	0x08006e9d
 8006e5c:	08006e9d 	.word	0x08006e9d
 8006e60:	08006e8f 	.word	0x08006e8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68b9      	ldr	r1, [r7, #8]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fa1c 	bl	80072a8 <TIM_OC1_SetConfig>
      break;
 8006e70:	e017      	b.n	8006ea2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68b9      	ldr	r1, [r7, #8]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fa7b 	bl	8007374 <TIM_OC2_SetConfig>
      break;
 8006e7e:	e010      	b.n	8006ea2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68b9      	ldr	r1, [r7, #8]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fae0 	bl	800744c <TIM_OC3_SetConfig>
      break;
 8006e8c:	e009      	b.n	8006ea2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68b9      	ldr	r1, [r7, #8]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 fb43 	bl	8007520 <TIM_OC4_SetConfig>
      break;
 8006e9a:	e002      	b.n	8006ea2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d101      	bne.n	8006ed2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ece:	2302      	movs	r3, #2
 8006ed0:	e0ae      	b.n	8007030 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b0c      	cmp	r3, #12
 8006ede:	f200 809f 	bhi.w	8007020 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ee2:	a201      	add	r2, pc, #4	; (adr r2, 8006ee8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee8:	08006f1d 	.word	0x08006f1d
 8006eec:	08007021 	.word	0x08007021
 8006ef0:	08007021 	.word	0x08007021
 8006ef4:	08007021 	.word	0x08007021
 8006ef8:	08006f5d 	.word	0x08006f5d
 8006efc:	08007021 	.word	0x08007021
 8006f00:	08007021 	.word	0x08007021
 8006f04:	08007021 	.word	0x08007021
 8006f08:	08006f9f 	.word	0x08006f9f
 8006f0c:	08007021 	.word	0x08007021
 8006f10:	08007021 	.word	0x08007021
 8006f14:	08007021 	.word	0x08007021
 8006f18:	08006fdf 	.word	0x08006fdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68b9      	ldr	r1, [r7, #8]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 f9c0 	bl	80072a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	699a      	ldr	r2, [r3, #24]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0208 	orr.w	r2, r2, #8
 8006f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	699a      	ldr	r2, [r3, #24]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0204 	bic.w	r2, r2, #4
 8006f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6999      	ldr	r1, [r3, #24]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	691a      	ldr	r2, [r3, #16]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	619a      	str	r2, [r3, #24]
      break;
 8006f5a:	e064      	b.n	8007026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68b9      	ldr	r1, [r7, #8]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fa06 	bl	8007374 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699a      	ldr	r2, [r3, #24]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699a      	ldr	r2, [r3, #24]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6999      	ldr	r1, [r3, #24]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	021a      	lsls	r2, r3, #8
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	619a      	str	r2, [r3, #24]
      break;
 8006f9c:	e043      	b.n	8007026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68b9      	ldr	r1, [r7, #8]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 fa51 	bl	800744c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69da      	ldr	r2, [r3, #28]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f042 0208 	orr.w	r2, r2, #8
 8006fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69da      	ldr	r2, [r3, #28]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0204 	bic.w	r2, r2, #4
 8006fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	69d9      	ldr	r1, [r3, #28]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	691a      	ldr	r2, [r3, #16]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	61da      	str	r2, [r3, #28]
      break;
 8006fdc:	e023      	b.n	8007026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 fa9b 	bl	8007520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	69da      	ldr	r2, [r3, #28]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69da      	ldr	r2, [r3, #28]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69d9      	ldr	r1, [r3, #28]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	021a      	lsls	r2, r3, #8
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	61da      	str	r2, [r3, #28]
      break;
 800701e:	e002      	b.n	8007026 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	75fb      	strb	r3, [r7, #23]
      break;
 8007024:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800702e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007048:	2b01      	cmp	r3, #1
 800704a:	d101      	bne.n	8007050 <HAL_TIM_SlaveConfigSynchro+0x18>
 800704c:	2302      	movs	r3, #2
 800704e:	e031      	b.n	80070b4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 faac 	bl	80075c0 <TIM_SlaveTimer_SetConfig>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d009      	beq.n	8007082 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e018      	b.n	80070b4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007090:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68da      	ldr	r2, [r3, #12]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070a0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b0c      	cmp	r3, #12
 80070ce:	d831      	bhi.n	8007134 <HAL_TIM_ReadCapturedValue+0x78>
 80070d0:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80070d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d6:	bf00      	nop
 80070d8:	0800710d 	.word	0x0800710d
 80070dc:	08007135 	.word	0x08007135
 80070e0:	08007135 	.word	0x08007135
 80070e4:	08007135 	.word	0x08007135
 80070e8:	08007117 	.word	0x08007117
 80070ec:	08007135 	.word	0x08007135
 80070f0:	08007135 	.word	0x08007135
 80070f4:	08007135 	.word	0x08007135
 80070f8:	08007121 	.word	0x08007121
 80070fc:	08007135 	.word	0x08007135
 8007100:	08007135 	.word	0x08007135
 8007104:	08007135 	.word	0x08007135
 8007108:	0800712b 	.word	0x0800712b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007112:	60fb      	str	r3, [r7, #12]

      break;
 8007114:	e00f      	b.n	8007136 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	60fb      	str	r3, [r7, #12]

      break;
 800711e:	e00a      	b.n	8007136 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007126:	60fb      	str	r3, [r7, #12]

      break;
 8007128:	e005      	b.n	8007136 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007130:	60fb      	str	r3, [r7, #12]

      break;
 8007132:	e000      	b.n	8007136 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007134:	bf00      	nop
  }

  return tmpreg;
 8007136:	68fb      	ldr	r3, [r7, #12]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a34      	ldr	r2, [pc, #208]	; (800728c <TIM_Base_SetConfig+0xe4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d00f      	beq.n	80071e0 <TIM_Base_SetConfig+0x38>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c6:	d00b      	beq.n	80071e0 <TIM_Base_SetConfig+0x38>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a31      	ldr	r2, [pc, #196]	; (8007290 <TIM_Base_SetConfig+0xe8>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d007      	beq.n	80071e0 <TIM_Base_SetConfig+0x38>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a30      	ldr	r2, [pc, #192]	; (8007294 <TIM_Base_SetConfig+0xec>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d003      	beq.n	80071e0 <TIM_Base_SetConfig+0x38>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a2f      	ldr	r2, [pc, #188]	; (8007298 <TIM_Base_SetConfig+0xf0>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d108      	bne.n	80071f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a25      	ldr	r2, [pc, #148]	; (800728c <TIM_Base_SetConfig+0xe4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d01b      	beq.n	8007232 <TIM_Base_SetConfig+0x8a>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007200:	d017      	beq.n	8007232 <TIM_Base_SetConfig+0x8a>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a22      	ldr	r2, [pc, #136]	; (8007290 <TIM_Base_SetConfig+0xe8>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d013      	beq.n	8007232 <TIM_Base_SetConfig+0x8a>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a21      	ldr	r2, [pc, #132]	; (8007294 <TIM_Base_SetConfig+0xec>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d00f      	beq.n	8007232 <TIM_Base_SetConfig+0x8a>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a20      	ldr	r2, [pc, #128]	; (8007298 <TIM_Base_SetConfig+0xf0>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d00b      	beq.n	8007232 <TIM_Base_SetConfig+0x8a>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a1f      	ldr	r2, [pc, #124]	; (800729c <TIM_Base_SetConfig+0xf4>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d007      	beq.n	8007232 <TIM_Base_SetConfig+0x8a>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a1e      	ldr	r2, [pc, #120]	; (80072a0 <TIM_Base_SetConfig+0xf8>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d003      	beq.n	8007232 <TIM_Base_SetConfig+0x8a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a1d      	ldr	r2, [pc, #116]	; (80072a4 <TIM_Base_SetConfig+0xfc>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d108      	bne.n	8007244 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	4313      	orrs	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	4313      	orrs	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a08      	ldr	r2, [pc, #32]	; (800728c <TIM_Base_SetConfig+0xe4>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d103      	bne.n	8007278 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	615a      	str	r2, [r3, #20]
}
 800727e:	bf00      	nop
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	40010000 	.word	0x40010000
 8007290:	40000400 	.word	0x40000400
 8007294:	40000800 	.word	0x40000800
 8007298:	40000c00 	.word	0x40000c00
 800729c:	40014000 	.word	0x40014000
 80072a0:	40014400 	.word	0x40014400
 80072a4:	40014800 	.word	0x40014800

080072a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	f023 0201 	bic.w	r2, r3, #1
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0303 	bic.w	r3, r3, #3
 80072de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f023 0302 	bic.w	r3, r3, #2
 80072f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a1c      	ldr	r2, [pc, #112]	; (8007370 <TIM_OC1_SetConfig+0xc8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d10c      	bne.n	800731e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f023 0308 	bic.w	r3, r3, #8
 800730a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f023 0304 	bic.w	r3, r3, #4
 800731c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a13      	ldr	r2, [pc, #76]	; (8007370 <TIM_OC1_SetConfig+0xc8>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d111      	bne.n	800734a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800732c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	4313      	orrs	r3, r2
 800733e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	4313      	orrs	r3, r2
 8007348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	621a      	str	r2, [r3, #32]
}
 8007364:	bf00      	nop
 8007366:	371c      	adds	r7, #28
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	40010000 	.word	0x40010000

08007374 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	f023 0210 	bic.w	r2, r3, #16
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f023 0320 	bic.w	r3, r3, #32
 80073be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	011b      	lsls	r3, r3, #4
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a1e      	ldr	r2, [pc, #120]	; (8007448 <TIM_OC2_SetConfig+0xd4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d10d      	bne.n	80073f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	011b      	lsls	r3, r3, #4
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a15      	ldr	r2, [pc, #84]	; (8007448 <TIM_OC2_SetConfig+0xd4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d113      	bne.n	8007420 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	4313      	orrs	r3, r2
 8007412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	4313      	orrs	r3, r2
 800741e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	621a      	str	r2, [r3, #32]
}
 800743a:	bf00      	nop
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	40010000 	.word	0x40010000

0800744c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 0303 	bic.w	r3, r3, #3
 8007482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	4313      	orrs	r3, r2
 800748c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	021b      	lsls	r3, r3, #8
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	4313      	orrs	r3, r2
 80074a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a1d      	ldr	r2, [pc, #116]	; (800751c <TIM_OC3_SetConfig+0xd0>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d10d      	bne.n	80074c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	021b      	lsls	r3, r3, #8
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a14      	ldr	r2, [pc, #80]	; (800751c <TIM_OC3_SetConfig+0xd0>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d113      	bne.n	80074f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	011b      	lsls	r3, r3, #4
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	011b      	lsls	r3, r3, #4
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	621a      	str	r2, [r3, #32]
}
 8007510:	bf00      	nop
 8007512:	371c      	adds	r7, #28
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	40010000 	.word	0x40010000

08007520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800754e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	021b      	lsls	r3, r3, #8
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	4313      	orrs	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800756a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	031b      	lsls	r3, r3, #12
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	4313      	orrs	r3, r2
 8007576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a10      	ldr	r2, [pc, #64]	; (80075bc <TIM_OC4_SetConfig+0x9c>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d109      	bne.n	8007594 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007586:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	019b      	lsls	r3, r3, #6
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	4313      	orrs	r3, r2
 8007592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	621a      	str	r2, [r3, #32]
}
 80075ae:	bf00      	nop
 80075b0:	371c      	adds	r7, #28
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	40010000 	.word	0x40010000

080075c0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075dc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	f023 0307 	bic.w	r3, r3, #7
 80075ee:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2b70      	cmp	r3, #112	; 0x70
 8007608:	d01a      	beq.n	8007640 <TIM_SlaveTimer_SetConfig+0x80>
 800760a:	2b70      	cmp	r3, #112	; 0x70
 800760c:	d860      	bhi.n	80076d0 <TIM_SlaveTimer_SetConfig+0x110>
 800760e:	2b60      	cmp	r3, #96	; 0x60
 8007610:	d054      	beq.n	80076bc <TIM_SlaveTimer_SetConfig+0xfc>
 8007612:	2b60      	cmp	r3, #96	; 0x60
 8007614:	d85c      	bhi.n	80076d0 <TIM_SlaveTimer_SetConfig+0x110>
 8007616:	2b50      	cmp	r3, #80	; 0x50
 8007618:	d046      	beq.n	80076a8 <TIM_SlaveTimer_SetConfig+0xe8>
 800761a:	2b50      	cmp	r3, #80	; 0x50
 800761c:	d858      	bhi.n	80076d0 <TIM_SlaveTimer_SetConfig+0x110>
 800761e:	2b40      	cmp	r3, #64	; 0x40
 8007620:	d019      	beq.n	8007656 <TIM_SlaveTimer_SetConfig+0x96>
 8007622:	2b40      	cmp	r3, #64	; 0x40
 8007624:	d854      	bhi.n	80076d0 <TIM_SlaveTimer_SetConfig+0x110>
 8007626:	2b30      	cmp	r3, #48	; 0x30
 8007628:	d055      	beq.n	80076d6 <TIM_SlaveTimer_SetConfig+0x116>
 800762a:	2b30      	cmp	r3, #48	; 0x30
 800762c:	d850      	bhi.n	80076d0 <TIM_SlaveTimer_SetConfig+0x110>
 800762e:	2b20      	cmp	r3, #32
 8007630:	d051      	beq.n	80076d6 <TIM_SlaveTimer_SetConfig+0x116>
 8007632:	2b20      	cmp	r3, #32
 8007634:	d84c      	bhi.n	80076d0 <TIM_SlaveTimer_SetConfig+0x110>
 8007636:	2b00      	cmp	r3, #0
 8007638:	d04d      	beq.n	80076d6 <TIM_SlaveTimer_SetConfig+0x116>
 800763a:	2b10      	cmp	r3, #16
 800763c:	d04b      	beq.n	80076d6 <TIM_SlaveTimer_SetConfig+0x116>
 800763e:	e047      	b.n	80076d0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6818      	ldr	r0, [r3, #0]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	68d9      	ldr	r1, [r3, #12]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	f000 f90f 	bl	8007872 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007654:	e040      	b.n	80076d8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b05      	cmp	r3, #5
 800765c:	d101      	bne.n	8007662 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e03b      	b.n	80076da <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6a1a      	ldr	r2, [r3, #32]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 0201 	bic.w	r2, r2, #1
 8007678:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007688:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	011b      	lsls	r3, r3, #4
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	4313      	orrs	r3, r2
 8007694:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	621a      	str	r2, [r3, #32]
      break;
 80076a6:	e017      	b.n	80076d8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	6899      	ldr	r1, [r3, #8]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	461a      	mov	r2, r3
 80076b6:	f000 f87d 	bl	80077b4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80076ba:	e00d      	b.n	80076d8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6818      	ldr	r0, [r3, #0]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	6899      	ldr	r1, [r3, #8]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	461a      	mov	r2, r3
 80076ca:	f000 f8a2 	bl	8007812 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80076ce:	e003      	b.n	80076d8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	75fb      	strb	r3, [r7, #23]
      break;
 80076d4:	e000      	b.n	80076d8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80076d6:	bf00      	nop
  }

  return status;
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
	...

080076e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	f023 0201 	bic.w	r2, r3, #1
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	4a24      	ldr	r2, [pc, #144]	; (80077a0 <TIM_TI1_SetConfig+0xbc>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d013      	beq.n	800773a <TIM_TI1_SetConfig+0x56>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007718:	d00f      	beq.n	800773a <TIM_TI1_SetConfig+0x56>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4a21      	ldr	r2, [pc, #132]	; (80077a4 <TIM_TI1_SetConfig+0xc0>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00b      	beq.n	800773a <TIM_TI1_SetConfig+0x56>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4a20      	ldr	r2, [pc, #128]	; (80077a8 <TIM_TI1_SetConfig+0xc4>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d007      	beq.n	800773a <TIM_TI1_SetConfig+0x56>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	4a1f      	ldr	r2, [pc, #124]	; (80077ac <TIM_TI1_SetConfig+0xc8>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d003      	beq.n	800773a <TIM_TI1_SetConfig+0x56>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	4a1e      	ldr	r2, [pc, #120]	; (80077b0 <TIM_TI1_SetConfig+0xcc>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d101      	bne.n	800773e <TIM_TI1_SetConfig+0x5a>
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <TIM_TI1_SetConfig+0x5c>
 800773e:	2300      	movs	r3, #0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d008      	beq.n	8007756 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f023 0303 	bic.w	r3, r3, #3
 800774a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	e003      	b.n	800775e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f043 0301 	orr.w	r3, r3, #1
 800775c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007764:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	b2db      	uxtb	r3, r3
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f023 030a 	bic.w	r3, r3, #10
 8007778:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f003 030a 	and.w	r3, r3, #10
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	4313      	orrs	r3, r2
 8007784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	621a      	str	r2, [r3, #32]
}
 8007792:	bf00      	nop
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	40010000 	.word	0x40010000
 80077a4:	40000400 	.word	0x40000400
 80077a8:	40000800 	.word	0x40000800
 80077ac:	40000c00 	.word	0x40000c00
 80077b0:	40014000 	.word	0x40014000

080077b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b087      	sub	sp, #28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6a1b      	ldr	r3, [r3, #32]
 80077c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	f023 0201 	bic.w	r2, r3, #1
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	011b      	lsls	r3, r3, #4
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f023 030a 	bic.w	r3, r3, #10
 80077f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	621a      	str	r2, [r3, #32]
}
 8007806:	bf00      	nop
 8007808:	371c      	adds	r7, #28
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007812:	b480      	push	{r7}
 8007814:	b087      	sub	sp, #28
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	f023 0210 	bic.w	r2, r3, #16
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6a1b      	ldr	r3, [r3, #32]
 8007834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800783c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	031b      	lsls	r3, r3, #12
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	4313      	orrs	r3, r2
 8007846:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800784e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	011b      	lsls	r3, r3, #4
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	4313      	orrs	r3, r2
 8007858:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	621a      	str	r2, [r3, #32]
}
 8007866:	bf00      	nop
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007872:	b480      	push	{r7}
 8007874:	b087      	sub	sp, #28
 8007876:	af00      	add	r7, sp, #0
 8007878:	60f8      	str	r0, [r7, #12]
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	607a      	str	r2, [r7, #4]
 800787e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800788c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	021a      	lsls	r2, r3, #8
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	431a      	orrs	r2, r3
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	4313      	orrs	r3, r2
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	4313      	orrs	r3, r2
 800789e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	609a      	str	r2, [r3, #8]
}
 80078a6:	bf00      	nop
 80078a8:	371c      	adds	r7, #28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b087      	sub	sp, #28
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	60f8      	str	r0, [r7, #12]
 80078ba:	60b9      	str	r1, [r7, #8]
 80078bc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	f003 031f 	and.w	r3, r3, #31
 80078c4:	2201      	movs	r2, #1
 80078c6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6a1a      	ldr	r2, [r3, #32]
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	43db      	mvns	r3, r3
 80078d4:	401a      	ands	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6a1a      	ldr	r2, [r3, #32]
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	f003 031f 	and.w	r3, r3, #31
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	fa01 f303 	lsl.w	r3, r1, r3
 80078ea:	431a      	orrs	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	621a      	str	r2, [r3, #32]
}
 80078f0:	bf00      	nop
 80078f2:	371c      	adds	r7, #28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08a      	sub	sp, #40	; 0x28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e09a      	b.n	8007a46 <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	d106      	bne.n	800792a <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7fa f88f 	bl	8001a48 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2202      	movs	r2, #2
 800792e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3304      	adds	r3, #4
 800793a:	4619      	mov	r1, r3
 800793c:	4610      	mov	r0, r2
 800793e:	f7ff fc33 	bl	80071a8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6818      	ldr	r0, [r3, #0]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	6819      	ldr	r1, [r3, #0]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	2203      	movs	r2, #3
 8007950:	f7ff fec8 	bl	80076e4 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f022 020c 	bic.w	r2, r2, #12
 8007962:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6999      	ldr	r1, [r3, #24]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007984:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	689a      	ldr	r2, [r3, #8]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007994:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079a4:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689a      	ldr	r2, [r3, #8]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f022 0207 	bic.w	r2, r2, #7
 80079b4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689a      	ldr	r2, [r3, #8]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0204 	orr.w	r2, r2, #4
 80079c4:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80079c6:	2300      	movs	r3, #0
 80079c8:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80079ca:	2300      	movs	r3, #0
 80079cc:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80079ce:	2370      	movs	r3, #112	; 0x70
 80079d0:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80079d2:	2300      	movs	r3, #0
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80079d6:	2300      	movs	r3, #0
 80079d8:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80079da:	2300      	movs	r3, #0
 80079dc:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f107 020c 	add.w	r2, r7, #12
 80079ec:	4611      	mov	r1, r2
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7ff fcc0 	bl	8007374 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a02:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685a      	ldr	r2, [r3, #4]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8007a12:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3728      	adds	r7, #40	; 0x28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a5e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a66:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a6e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a76:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d108      	bne.n	8007a90 <HAL_TIMEx_HallSensor_Start+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d105      	bne.n	8007a90 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a84:	7b7b      	ldrb	r3, [r7, #13]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d102      	bne.n	8007a90 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a8a:	7b3b      	ldrb	r3, [r7, #12]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d001      	beq.n	8007a94 <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e04f      	b.n	8007b34 <HAL_TIMEx_HallSensor_Start+0xe4>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	2100      	movs	r1, #0
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7ff fef8 	bl	80078b2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a1d      	ldr	r2, [pc, #116]	; (8007b3c <HAL_TIMEx_HallSensor_Start+0xec>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d018      	beq.n	8007afe <HAL_TIMEx_HallSensor_Start+0xae>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad4:	d013      	beq.n	8007afe <HAL_TIMEx_HallSensor_Start+0xae>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a19      	ldr	r2, [pc, #100]	; (8007b40 <HAL_TIMEx_HallSensor_Start+0xf0>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d00e      	beq.n	8007afe <HAL_TIMEx_HallSensor_Start+0xae>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a17      	ldr	r2, [pc, #92]	; (8007b44 <HAL_TIMEx_HallSensor_Start+0xf4>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d009      	beq.n	8007afe <HAL_TIMEx_HallSensor_Start+0xae>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a16      	ldr	r2, [pc, #88]	; (8007b48 <HAL_TIMEx_HallSensor_Start+0xf8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d004      	beq.n	8007afe <HAL_TIMEx_HallSensor_Start+0xae>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a14      	ldr	r2, [pc, #80]	; (8007b4c <HAL_TIMEx_HallSensor_Start+0xfc>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d111      	bne.n	8007b22 <HAL_TIMEx_HallSensor_Start+0xd2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f003 0307 	and.w	r3, r3, #7
 8007b08:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2b06      	cmp	r3, #6
 8007b0e:	d010      	beq.n	8007b32 <HAL_TIMEx_HallSensor_Start+0xe2>
    {
      __HAL_TIM_ENABLE(htim);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f042 0201 	orr.w	r2, r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b20:	e007      	b.n	8007b32 <HAL_TIMEx_HallSensor_Start+0xe2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f042 0201 	orr.w	r2, r2, #1
 8007b30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	40010000 	.word	0x40010000
 8007b40:	40000400 	.word	0x40000400
 8007b44:	40000800 	.word	0x40000800
 8007b48:	40000c00 	.word	0x40000c00
 8007b4c:	40014000 	.word	0x40014000

08007b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d101      	bne.n	8007b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b64:	2302      	movs	r3, #2
 8007b66:	e050      	b.n	8007c0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a1c      	ldr	r2, [pc, #112]	; (8007c18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d018      	beq.n	8007bde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb4:	d013      	beq.n	8007bde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a18      	ldr	r2, [pc, #96]	; (8007c1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d00e      	beq.n	8007bde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a16      	ldr	r2, [pc, #88]	; (8007c20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d009      	beq.n	8007bde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a15      	ldr	r2, [pc, #84]	; (8007c24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d004      	beq.n	8007bde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a13      	ldr	r2, [pc, #76]	; (8007c28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d10c      	bne.n	8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	40010000 	.word	0x40010000
 8007c1c:	40000400 	.word	0x40000400
 8007c20:	40000800 	.word	0x40000800
 8007c24:	40000c00 	.word	0x40000c00
 8007c28:	40014000 	.word	0x40014000

08007c2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d101      	bne.n	8007c48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c44:	2302      	movs	r3, #2
 8007c46:	e03d      	b.n	8007cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e03f      	b.n	8007d8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d106      	bne.n	8007d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7f9 ff64 	bl	8001bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2224      	movs	r2, #36	; 0x24
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68da      	ldr	r2, [r3, #12]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f829 	bl	8007d94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	691a      	ldr	r2, [r3, #16]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	695a      	ldr	r2, [r3, #20]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68da      	ldr	r2, [r3, #12]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2220      	movs	r2, #32
 8007d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
	...

08007d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d98:	b0c0      	sub	sp, #256	; 0x100
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db0:	68d9      	ldr	r1, [r3, #12]
 8007db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	ea40 0301 	orr.w	r3, r0, r1
 8007dbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc2:	689a      	ldr	r2, [r3, #8]
 8007dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	431a      	orrs	r2, r3
 8007dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007dec:	f021 010c 	bic.w	r1, r1, #12
 8007df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dfa:	430b      	orrs	r3, r1
 8007dfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e0e:	6999      	ldr	r1, [r3, #24]
 8007e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	ea40 0301 	orr.w	r3, r0, r1
 8007e1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	4b8f      	ldr	r3, [pc, #572]	; (8008060 <UART_SetConfig+0x2cc>)
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d005      	beq.n	8007e34 <UART_SetConfig+0xa0>
 8007e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	4b8d      	ldr	r3, [pc, #564]	; (8008064 <UART_SetConfig+0x2d0>)
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d104      	bne.n	8007e3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e34:	f7fe fc34 	bl	80066a0 <HAL_RCC_GetPCLK2Freq>
 8007e38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007e3c:	e003      	b.n	8007e46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e3e:	f7fe fc1b 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 8007e42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e50:	f040 810c 	bne.w	800806c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007e62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007e66:	4622      	mov	r2, r4
 8007e68:	462b      	mov	r3, r5
 8007e6a:	1891      	adds	r1, r2, r2
 8007e6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e6e:	415b      	adcs	r3, r3
 8007e70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e76:	4621      	mov	r1, r4
 8007e78:	eb12 0801 	adds.w	r8, r2, r1
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	eb43 0901 	adc.w	r9, r3, r1
 8007e82:	f04f 0200 	mov.w	r2, #0
 8007e86:	f04f 0300 	mov.w	r3, #0
 8007e8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e96:	4690      	mov	r8, r2
 8007e98:	4699      	mov	r9, r3
 8007e9a:	4623      	mov	r3, r4
 8007e9c:	eb18 0303 	adds.w	r3, r8, r3
 8007ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ea4:	462b      	mov	r3, r5
 8007ea6:	eb49 0303 	adc.w	r3, r9, r3
 8007eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007eba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007ebe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	18db      	adds	r3, r3, r3
 8007ec6:	653b      	str	r3, [r7, #80]	; 0x50
 8007ec8:	4613      	mov	r3, r2
 8007eca:	eb42 0303 	adc.w	r3, r2, r3
 8007ece:	657b      	str	r3, [r7, #84]	; 0x54
 8007ed0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ed4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007ed8:	f7f8 fe6e 	bl	8000bb8 <__aeabi_uldivmod>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4b61      	ldr	r3, [pc, #388]	; (8008068 <UART_SetConfig+0x2d4>)
 8007ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ee6:	095b      	lsrs	r3, r3, #5
 8007ee8:	011c      	lsls	r4, r3, #4
 8007eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ef4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007ef8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007efc:	4642      	mov	r2, r8
 8007efe:	464b      	mov	r3, r9
 8007f00:	1891      	adds	r1, r2, r2
 8007f02:	64b9      	str	r1, [r7, #72]	; 0x48
 8007f04:	415b      	adcs	r3, r3
 8007f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f0c:	4641      	mov	r1, r8
 8007f0e:	eb12 0a01 	adds.w	sl, r2, r1
 8007f12:	4649      	mov	r1, r9
 8007f14:	eb43 0b01 	adc.w	fp, r3, r1
 8007f18:	f04f 0200 	mov.w	r2, #0
 8007f1c:	f04f 0300 	mov.w	r3, #0
 8007f20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f2c:	4692      	mov	sl, r2
 8007f2e:	469b      	mov	fp, r3
 8007f30:	4643      	mov	r3, r8
 8007f32:	eb1a 0303 	adds.w	r3, sl, r3
 8007f36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f3a:	464b      	mov	r3, r9
 8007f3c:	eb4b 0303 	adc.w	r3, fp, r3
 8007f40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007f54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	18db      	adds	r3, r3, r3
 8007f5c:	643b      	str	r3, [r7, #64]	; 0x40
 8007f5e:	4613      	mov	r3, r2
 8007f60:	eb42 0303 	adc.w	r3, r2, r3
 8007f64:	647b      	str	r3, [r7, #68]	; 0x44
 8007f66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007f6e:	f7f8 fe23 	bl	8000bb8 <__aeabi_uldivmod>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4611      	mov	r1, r2
 8007f78:	4b3b      	ldr	r3, [pc, #236]	; (8008068 <UART_SetConfig+0x2d4>)
 8007f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8007f7e:	095b      	lsrs	r3, r3, #5
 8007f80:	2264      	movs	r2, #100	; 0x64
 8007f82:	fb02 f303 	mul.w	r3, r2, r3
 8007f86:	1acb      	subs	r3, r1, r3
 8007f88:	00db      	lsls	r3, r3, #3
 8007f8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007f8e:	4b36      	ldr	r3, [pc, #216]	; (8008068 <UART_SetConfig+0x2d4>)
 8007f90:	fba3 2302 	umull	r2, r3, r3, r2
 8007f94:	095b      	lsrs	r3, r3, #5
 8007f96:	005b      	lsls	r3, r3, #1
 8007f98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f9c:	441c      	add	r4, r3
 8007f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fa8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007fac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	464b      	mov	r3, r9
 8007fb4:	1891      	adds	r1, r2, r2
 8007fb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007fb8:	415b      	adcs	r3, r3
 8007fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007fc0:	4641      	mov	r1, r8
 8007fc2:	1851      	adds	r1, r2, r1
 8007fc4:	6339      	str	r1, [r7, #48]	; 0x30
 8007fc6:	4649      	mov	r1, r9
 8007fc8:	414b      	adcs	r3, r1
 8007fca:	637b      	str	r3, [r7, #52]	; 0x34
 8007fcc:	f04f 0200 	mov.w	r2, #0
 8007fd0:	f04f 0300 	mov.w	r3, #0
 8007fd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007fd8:	4659      	mov	r1, fp
 8007fda:	00cb      	lsls	r3, r1, #3
 8007fdc:	4651      	mov	r1, sl
 8007fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fe2:	4651      	mov	r1, sl
 8007fe4:	00ca      	lsls	r2, r1, #3
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	4619      	mov	r1, r3
 8007fea:	4603      	mov	r3, r0
 8007fec:	4642      	mov	r2, r8
 8007fee:	189b      	adds	r3, r3, r2
 8007ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ff4:	464b      	mov	r3, r9
 8007ff6:	460a      	mov	r2, r1
 8007ff8:	eb42 0303 	adc.w	r3, r2, r3
 8007ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800800c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008010:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008014:	460b      	mov	r3, r1
 8008016:	18db      	adds	r3, r3, r3
 8008018:	62bb      	str	r3, [r7, #40]	; 0x28
 800801a:	4613      	mov	r3, r2
 800801c:	eb42 0303 	adc.w	r3, r2, r3
 8008020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008022:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008026:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800802a:	f7f8 fdc5 	bl	8000bb8 <__aeabi_uldivmod>
 800802e:	4602      	mov	r2, r0
 8008030:	460b      	mov	r3, r1
 8008032:	4b0d      	ldr	r3, [pc, #52]	; (8008068 <UART_SetConfig+0x2d4>)
 8008034:	fba3 1302 	umull	r1, r3, r3, r2
 8008038:	095b      	lsrs	r3, r3, #5
 800803a:	2164      	movs	r1, #100	; 0x64
 800803c:	fb01 f303 	mul.w	r3, r1, r3
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	00db      	lsls	r3, r3, #3
 8008044:	3332      	adds	r3, #50	; 0x32
 8008046:	4a08      	ldr	r2, [pc, #32]	; (8008068 <UART_SetConfig+0x2d4>)
 8008048:	fba2 2303 	umull	r2, r3, r2, r3
 800804c:	095b      	lsrs	r3, r3, #5
 800804e:	f003 0207 	and.w	r2, r3, #7
 8008052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4422      	add	r2, r4
 800805a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800805c:	e106      	b.n	800826c <UART_SetConfig+0x4d8>
 800805e:	bf00      	nop
 8008060:	40011000 	.word	0x40011000
 8008064:	40011400 	.word	0x40011400
 8008068:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800806c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008070:	2200      	movs	r2, #0
 8008072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008076:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800807a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800807e:	4642      	mov	r2, r8
 8008080:	464b      	mov	r3, r9
 8008082:	1891      	adds	r1, r2, r2
 8008084:	6239      	str	r1, [r7, #32]
 8008086:	415b      	adcs	r3, r3
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
 800808a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800808e:	4641      	mov	r1, r8
 8008090:	1854      	adds	r4, r2, r1
 8008092:	4649      	mov	r1, r9
 8008094:	eb43 0501 	adc.w	r5, r3, r1
 8008098:	f04f 0200 	mov.w	r2, #0
 800809c:	f04f 0300 	mov.w	r3, #0
 80080a0:	00eb      	lsls	r3, r5, #3
 80080a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080a6:	00e2      	lsls	r2, r4, #3
 80080a8:	4614      	mov	r4, r2
 80080aa:	461d      	mov	r5, r3
 80080ac:	4643      	mov	r3, r8
 80080ae:	18e3      	adds	r3, r4, r3
 80080b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80080b4:	464b      	mov	r3, r9
 80080b6:	eb45 0303 	adc.w	r3, r5, r3
 80080ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80080be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80080ce:	f04f 0200 	mov.w	r2, #0
 80080d2:	f04f 0300 	mov.w	r3, #0
 80080d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80080da:	4629      	mov	r1, r5
 80080dc:	008b      	lsls	r3, r1, #2
 80080de:	4621      	mov	r1, r4
 80080e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080e4:	4621      	mov	r1, r4
 80080e6:	008a      	lsls	r2, r1, #2
 80080e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80080ec:	f7f8 fd64 	bl	8000bb8 <__aeabi_uldivmod>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4b60      	ldr	r3, [pc, #384]	; (8008278 <UART_SetConfig+0x4e4>)
 80080f6:	fba3 2302 	umull	r2, r3, r3, r2
 80080fa:	095b      	lsrs	r3, r3, #5
 80080fc:	011c      	lsls	r4, r3, #4
 80080fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008102:	2200      	movs	r2, #0
 8008104:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008108:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800810c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008110:	4642      	mov	r2, r8
 8008112:	464b      	mov	r3, r9
 8008114:	1891      	adds	r1, r2, r2
 8008116:	61b9      	str	r1, [r7, #24]
 8008118:	415b      	adcs	r3, r3
 800811a:	61fb      	str	r3, [r7, #28]
 800811c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008120:	4641      	mov	r1, r8
 8008122:	1851      	adds	r1, r2, r1
 8008124:	6139      	str	r1, [r7, #16]
 8008126:	4649      	mov	r1, r9
 8008128:	414b      	adcs	r3, r1
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	f04f 0200 	mov.w	r2, #0
 8008130:	f04f 0300 	mov.w	r3, #0
 8008134:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008138:	4659      	mov	r1, fp
 800813a:	00cb      	lsls	r3, r1, #3
 800813c:	4651      	mov	r1, sl
 800813e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008142:	4651      	mov	r1, sl
 8008144:	00ca      	lsls	r2, r1, #3
 8008146:	4610      	mov	r0, r2
 8008148:	4619      	mov	r1, r3
 800814a:	4603      	mov	r3, r0
 800814c:	4642      	mov	r2, r8
 800814e:	189b      	adds	r3, r3, r2
 8008150:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008154:	464b      	mov	r3, r9
 8008156:	460a      	mov	r2, r1
 8008158:	eb42 0303 	adc.w	r3, r2, r3
 800815c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	67bb      	str	r3, [r7, #120]	; 0x78
 800816a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800816c:	f04f 0200 	mov.w	r2, #0
 8008170:	f04f 0300 	mov.w	r3, #0
 8008174:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008178:	4649      	mov	r1, r9
 800817a:	008b      	lsls	r3, r1, #2
 800817c:	4641      	mov	r1, r8
 800817e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008182:	4641      	mov	r1, r8
 8008184:	008a      	lsls	r2, r1, #2
 8008186:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800818a:	f7f8 fd15 	bl	8000bb8 <__aeabi_uldivmod>
 800818e:	4602      	mov	r2, r0
 8008190:	460b      	mov	r3, r1
 8008192:	4611      	mov	r1, r2
 8008194:	4b38      	ldr	r3, [pc, #224]	; (8008278 <UART_SetConfig+0x4e4>)
 8008196:	fba3 2301 	umull	r2, r3, r3, r1
 800819a:	095b      	lsrs	r3, r3, #5
 800819c:	2264      	movs	r2, #100	; 0x64
 800819e:	fb02 f303 	mul.w	r3, r2, r3
 80081a2:	1acb      	subs	r3, r1, r3
 80081a4:	011b      	lsls	r3, r3, #4
 80081a6:	3332      	adds	r3, #50	; 0x32
 80081a8:	4a33      	ldr	r2, [pc, #204]	; (8008278 <UART_SetConfig+0x4e4>)
 80081aa:	fba2 2303 	umull	r2, r3, r2, r3
 80081ae:	095b      	lsrs	r3, r3, #5
 80081b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081b4:	441c      	add	r4, r3
 80081b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081ba:	2200      	movs	r2, #0
 80081bc:	673b      	str	r3, [r7, #112]	; 0x70
 80081be:	677a      	str	r2, [r7, #116]	; 0x74
 80081c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80081c4:	4642      	mov	r2, r8
 80081c6:	464b      	mov	r3, r9
 80081c8:	1891      	adds	r1, r2, r2
 80081ca:	60b9      	str	r1, [r7, #8]
 80081cc:	415b      	adcs	r3, r3
 80081ce:	60fb      	str	r3, [r7, #12]
 80081d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081d4:	4641      	mov	r1, r8
 80081d6:	1851      	adds	r1, r2, r1
 80081d8:	6039      	str	r1, [r7, #0]
 80081da:	4649      	mov	r1, r9
 80081dc:	414b      	adcs	r3, r1
 80081de:	607b      	str	r3, [r7, #4]
 80081e0:	f04f 0200 	mov.w	r2, #0
 80081e4:	f04f 0300 	mov.w	r3, #0
 80081e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80081ec:	4659      	mov	r1, fp
 80081ee:	00cb      	lsls	r3, r1, #3
 80081f0:	4651      	mov	r1, sl
 80081f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081f6:	4651      	mov	r1, sl
 80081f8:	00ca      	lsls	r2, r1, #3
 80081fa:	4610      	mov	r0, r2
 80081fc:	4619      	mov	r1, r3
 80081fe:	4603      	mov	r3, r0
 8008200:	4642      	mov	r2, r8
 8008202:	189b      	adds	r3, r3, r2
 8008204:	66bb      	str	r3, [r7, #104]	; 0x68
 8008206:	464b      	mov	r3, r9
 8008208:	460a      	mov	r2, r1
 800820a:	eb42 0303 	adc.w	r3, r2, r3
 800820e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	663b      	str	r3, [r7, #96]	; 0x60
 800821a:	667a      	str	r2, [r7, #100]	; 0x64
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008228:	4649      	mov	r1, r9
 800822a:	008b      	lsls	r3, r1, #2
 800822c:	4641      	mov	r1, r8
 800822e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008232:	4641      	mov	r1, r8
 8008234:	008a      	lsls	r2, r1, #2
 8008236:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800823a:	f7f8 fcbd 	bl	8000bb8 <__aeabi_uldivmod>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	4b0d      	ldr	r3, [pc, #52]	; (8008278 <UART_SetConfig+0x4e4>)
 8008244:	fba3 1302 	umull	r1, r3, r3, r2
 8008248:	095b      	lsrs	r3, r3, #5
 800824a:	2164      	movs	r1, #100	; 0x64
 800824c:	fb01 f303 	mul.w	r3, r1, r3
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	011b      	lsls	r3, r3, #4
 8008254:	3332      	adds	r3, #50	; 0x32
 8008256:	4a08      	ldr	r2, [pc, #32]	; (8008278 <UART_SetConfig+0x4e4>)
 8008258:	fba2 2303 	umull	r2, r3, r2, r3
 800825c:	095b      	lsrs	r3, r3, #5
 800825e:	f003 020f 	and.w	r2, r3, #15
 8008262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4422      	add	r2, r4
 800826a:	609a      	str	r2, [r3, #8]
}
 800826c:	bf00      	nop
 800826e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008272:	46bd      	mov	sp, r7
 8008274:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008278:	51eb851f 	.word	0x51eb851f

0800827c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800827c:	b084      	sub	sp, #16
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	f107 001c 	add.w	r0, r7, #28
 800828a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	2b01      	cmp	r3, #1
 8008292:	d122      	bne.n	80082da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008298:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80082a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d105      	bne.n	80082ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f001 fbee 	bl	8009ab0 <USB_CoreReset>
 80082d4:	4603      	mov	r3, r0
 80082d6:	73fb      	strb	r3, [r7, #15]
 80082d8:	e01a      	b.n	8008310 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f001 fbe2 	bl	8009ab0 <USB_CoreReset>
 80082ec:	4603      	mov	r3, r0
 80082ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80082f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d106      	bne.n	8008304 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	639a      	str	r2, [r3, #56]	; 0x38
 8008302:	e005      	b.n	8008310 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008308:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	2b01      	cmp	r3, #1
 8008314:	d10b      	bne.n	800832e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f043 0206 	orr.w	r2, r3, #6
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f043 0220 	orr.w	r2, r3, #32
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800833a:	b004      	add	sp, #16
 800833c:	4770      	bx	lr
	...

08008340 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	4613      	mov	r3, r2
 800834c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800834e:	79fb      	ldrb	r3, [r7, #7]
 8008350:	2b02      	cmp	r3, #2
 8008352:	d165      	bne.n	8008420 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	4a41      	ldr	r2, [pc, #260]	; (800845c <USB_SetTurnaroundTime+0x11c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d906      	bls.n	800836a <USB_SetTurnaroundTime+0x2a>
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	4a40      	ldr	r2, [pc, #256]	; (8008460 <USB_SetTurnaroundTime+0x120>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d202      	bcs.n	800836a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008364:	230f      	movs	r3, #15
 8008366:	617b      	str	r3, [r7, #20]
 8008368:	e062      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	4a3c      	ldr	r2, [pc, #240]	; (8008460 <USB_SetTurnaroundTime+0x120>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d306      	bcc.n	8008380 <USB_SetTurnaroundTime+0x40>
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	4a3b      	ldr	r2, [pc, #236]	; (8008464 <USB_SetTurnaroundTime+0x124>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d202      	bcs.n	8008380 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800837a:	230e      	movs	r3, #14
 800837c:	617b      	str	r3, [r7, #20]
 800837e:	e057      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4a38      	ldr	r2, [pc, #224]	; (8008464 <USB_SetTurnaroundTime+0x124>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d306      	bcc.n	8008396 <USB_SetTurnaroundTime+0x56>
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	4a37      	ldr	r2, [pc, #220]	; (8008468 <USB_SetTurnaroundTime+0x128>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d202      	bcs.n	8008396 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008390:	230d      	movs	r3, #13
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	e04c      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	4a33      	ldr	r2, [pc, #204]	; (8008468 <USB_SetTurnaroundTime+0x128>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d306      	bcc.n	80083ac <USB_SetTurnaroundTime+0x6c>
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	4a32      	ldr	r2, [pc, #200]	; (800846c <USB_SetTurnaroundTime+0x12c>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d802      	bhi.n	80083ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80083a6:	230c      	movs	r3, #12
 80083a8:	617b      	str	r3, [r7, #20]
 80083aa:	e041      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	4a2f      	ldr	r2, [pc, #188]	; (800846c <USB_SetTurnaroundTime+0x12c>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d906      	bls.n	80083c2 <USB_SetTurnaroundTime+0x82>
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	4a2e      	ldr	r2, [pc, #184]	; (8008470 <USB_SetTurnaroundTime+0x130>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d802      	bhi.n	80083c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80083bc:	230b      	movs	r3, #11
 80083be:	617b      	str	r3, [r7, #20]
 80083c0:	e036      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	4a2a      	ldr	r2, [pc, #168]	; (8008470 <USB_SetTurnaroundTime+0x130>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d906      	bls.n	80083d8 <USB_SetTurnaroundTime+0x98>
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	4a29      	ldr	r2, [pc, #164]	; (8008474 <USB_SetTurnaroundTime+0x134>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d802      	bhi.n	80083d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80083d2:	230a      	movs	r3, #10
 80083d4:	617b      	str	r3, [r7, #20]
 80083d6:	e02b      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	4a26      	ldr	r2, [pc, #152]	; (8008474 <USB_SetTurnaroundTime+0x134>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d906      	bls.n	80083ee <USB_SetTurnaroundTime+0xae>
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	4a25      	ldr	r2, [pc, #148]	; (8008478 <USB_SetTurnaroundTime+0x138>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d202      	bcs.n	80083ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80083e8:	2309      	movs	r3, #9
 80083ea:	617b      	str	r3, [r7, #20]
 80083ec:	e020      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	4a21      	ldr	r2, [pc, #132]	; (8008478 <USB_SetTurnaroundTime+0x138>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d306      	bcc.n	8008404 <USB_SetTurnaroundTime+0xc4>
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	4a20      	ldr	r2, [pc, #128]	; (800847c <USB_SetTurnaroundTime+0x13c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d802      	bhi.n	8008404 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80083fe:	2308      	movs	r3, #8
 8008400:	617b      	str	r3, [r7, #20]
 8008402:	e015      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	4a1d      	ldr	r2, [pc, #116]	; (800847c <USB_SetTurnaroundTime+0x13c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d906      	bls.n	800841a <USB_SetTurnaroundTime+0xda>
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	4a1c      	ldr	r2, [pc, #112]	; (8008480 <USB_SetTurnaroundTime+0x140>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d202      	bcs.n	800841a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008414:	2307      	movs	r3, #7
 8008416:	617b      	str	r3, [r7, #20]
 8008418:	e00a      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800841a:	2306      	movs	r3, #6
 800841c:	617b      	str	r3, [r7, #20]
 800841e:	e007      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008420:	79fb      	ldrb	r3, [r7, #7]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d102      	bne.n	800842c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008426:	2309      	movs	r3, #9
 8008428:	617b      	str	r3, [r7, #20]
 800842a:	e001      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800842c:	2309      	movs	r3, #9
 800842e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68da      	ldr	r2, [r3, #12]
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	029b      	lsls	r3, r3, #10
 8008444:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008448:	431a      	orrs	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	371c      	adds	r7, #28
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	00d8acbf 	.word	0x00d8acbf
 8008460:	00e4e1c0 	.word	0x00e4e1c0
 8008464:	00f42400 	.word	0x00f42400
 8008468:	01067380 	.word	0x01067380
 800846c:	011a499f 	.word	0x011a499f
 8008470:	01312cff 	.word	0x01312cff
 8008474:	014ca43f 	.word	0x014ca43f
 8008478:	016e3600 	.word	0x016e3600
 800847c:	01a6ab1f 	.word	0x01a6ab1f
 8008480:	01e84800 	.word	0x01e84800

08008484 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f043 0201 	orr.w	r2, r3, #1
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f023 0201 	bic.w	r2, r3, #1
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084e4:	78fb      	ldrb	r3, [r7, #3]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d115      	bne.n	8008516 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80084f6:	2001      	movs	r0, #1
 80084f8:	f7f9 fe26 	bl	8002148 <HAL_Delay>
      ms++;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3301      	adds	r3, #1
 8008500:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f001 fa45 	bl	8009992 <USB_GetMode>
 8008508:	4603      	mov	r3, r0
 800850a:	2b01      	cmp	r3, #1
 800850c:	d01e      	beq.n	800854c <USB_SetCurrentMode+0x84>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b31      	cmp	r3, #49	; 0x31
 8008512:	d9f0      	bls.n	80084f6 <USB_SetCurrentMode+0x2e>
 8008514:	e01a      	b.n	800854c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008516:	78fb      	ldrb	r3, [r7, #3]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d115      	bne.n	8008548 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008528:	2001      	movs	r0, #1
 800852a:	f7f9 fe0d 	bl	8002148 <HAL_Delay>
      ms++;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	3301      	adds	r3, #1
 8008532:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 fa2c 	bl	8009992 <USB_GetMode>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d005      	beq.n	800854c <USB_SetCurrentMode+0x84>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2b31      	cmp	r3, #49	; 0x31
 8008544:	d9f0      	bls.n	8008528 <USB_SetCurrentMode+0x60>
 8008546:	e001      	b.n	800854c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e005      	b.n	8008558 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2b32      	cmp	r3, #50	; 0x32
 8008550:	d101      	bne.n	8008556 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e000      	b.n	8008558 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008560:	b084      	sub	sp, #16
 8008562:	b580      	push	{r7, lr}
 8008564:	b086      	sub	sp, #24
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800856e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800857a:	2300      	movs	r3, #0
 800857c:	613b      	str	r3, [r7, #16]
 800857e:	e009      	b.n	8008594 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	3340      	adds	r3, #64	; 0x40
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	2200      	movs	r2, #0
 800858c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	3301      	adds	r3, #1
 8008592:	613b      	str	r3, [r7, #16]
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	2b0e      	cmp	r3, #14
 8008598:	d9f2      	bls.n	8008580 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800859a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800859c:	2b00      	cmp	r3, #0
 800859e:	d11c      	bne.n	80085da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085ae:	f043 0302 	orr.w	r3, r3, #2
 80085b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	639a      	str	r2, [r3, #56]	; 0x38
 80085d8:	e00b      	b.n	80085f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085f8:	461a      	mov	r2, r3
 80085fa:	2300      	movs	r3, #0
 80085fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008604:	4619      	mov	r1, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800860c:	461a      	mov	r2, r3
 800860e:	680b      	ldr	r3, [r1, #0]
 8008610:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008614:	2b01      	cmp	r3, #1
 8008616:	d10c      	bne.n	8008632 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861a:	2b00      	cmp	r3, #0
 800861c:	d104      	bne.n	8008628 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800861e:	2100      	movs	r1, #0
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f965 	bl	80088f0 <USB_SetDevSpeed>
 8008626:	e008      	b.n	800863a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008628:	2101      	movs	r1, #1
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f960 	bl	80088f0 <USB_SetDevSpeed>
 8008630:	e003      	b.n	800863a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008632:	2103      	movs	r1, #3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f95b 	bl	80088f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800863a:	2110      	movs	r1, #16
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f8f3 	bl	8008828 <USB_FlushTxFifo>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f91f 	bl	8008890 <USB_FlushRxFifo>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d001      	beq.n	800865c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008662:	461a      	mov	r2, r3
 8008664:	2300      	movs	r3, #0
 8008666:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866e:	461a      	mov	r2, r3
 8008670:	2300      	movs	r3, #0
 8008672:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800867a:	461a      	mov	r2, r3
 800867c:	2300      	movs	r3, #0
 800867e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008680:	2300      	movs	r3, #0
 8008682:	613b      	str	r3, [r7, #16]
 8008684:	e043      	b.n	800870e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	4413      	add	r3, r2
 800868e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800869c:	d118      	bne.n	80086d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	4413      	add	r3, r2
 80086ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b0:	461a      	mov	r2, r3
 80086b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	e013      	b.n	80086e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	015a      	lsls	r2, r3, #5
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	4413      	add	r3, r2
 80086c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c6:	461a      	mov	r2, r3
 80086c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086cc:	6013      	str	r3, [r2, #0]
 80086ce:	e008      	b.n	80086e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086dc:	461a      	mov	r2, r3
 80086de:	2300      	movs	r3, #0
 80086e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ee:	461a      	mov	r2, r3
 80086f0:	2300      	movs	r3, #0
 80086f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008700:	461a      	mov	r2, r3
 8008702:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008706:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	3301      	adds	r3, #1
 800870c:	613b      	str	r3, [r7, #16]
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	429a      	cmp	r2, r3
 8008714:	d3b7      	bcc.n	8008686 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008716:	2300      	movs	r3, #0
 8008718:	613b      	str	r3, [r7, #16]
 800871a:	e043      	b.n	80087a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4413      	add	r3, r2
 8008724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800872e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008732:	d118      	bne.n	8008766 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10a      	bne.n	8008750 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	4413      	add	r3, r2
 8008742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008746:	461a      	mov	r2, r3
 8008748:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800874c:	6013      	str	r3, [r2, #0]
 800874e:	e013      	b.n	8008778 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800875c:	461a      	mov	r2, r3
 800875e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	e008      	b.n	8008778 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	4413      	add	r3, r2
 800876e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008772:	461a      	mov	r2, r3
 8008774:	2300      	movs	r3, #0
 8008776:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008784:	461a      	mov	r2, r3
 8008786:	2300      	movs	r3, #0
 8008788:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	4413      	add	r3, r2
 8008792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008796:	461a      	mov	r2, r3
 8008798:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800879c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	3301      	adds	r3, #1
 80087a2:	613b      	str	r3, [r7, #16]
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d3b7      	bcc.n	800871c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80087cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80087ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d105      	bne.n	80087e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	f043 0210 	orr.w	r2, r3, #16
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	699a      	ldr	r2, [r3, #24]
 80087e4:	4b0f      	ldr	r3, [pc, #60]	; (8008824 <USB_DevInit+0x2c4>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80087ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d005      	beq.n	80087fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	f043 0208 	orr.w	r2, r3, #8
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80087fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008800:	2b01      	cmp	r3, #1
 8008802:	d107      	bne.n	8008814 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800880c:	f043 0304 	orr.w	r3, r3, #4
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008814:	7dfb      	ldrb	r3, [r7, #23]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008820:	b004      	add	sp, #16
 8008822:	4770      	bx	lr
 8008824:	803c3800 	.word	0x803c3800

08008828 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3301      	adds	r3, #1
 800883a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4a13      	ldr	r2, [pc, #76]	; (800888c <USB_FlushTxFifo+0x64>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d901      	bls.n	8008848 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e01b      	b.n	8008880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	daf2      	bge.n	8008836 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	019b      	lsls	r3, r3, #6
 8008858:	f043 0220 	orr.w	r2, r3, #32
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3301      	adds	r3, #1
 8008864:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	4a08      	ldr	r2, [pc, #32]	; (800888c <USB_FlushTxFifo+0x64>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d901      	bls.n	8008872 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e006      	b.n	8008880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	f003 0320 	and.w	r3, r3, #32
 800887a:	2b20      	cmp	r3, #32
 800887c:	d0f0      	beq.n	8008860 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	00030d40 	.word	0x00030d40

08008890 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	3301      	adds	r3, #1
 80088a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4a11      	ldr	r2, [pc, #68]	; (80088ec <USB_FlushRxFifo+0x5c>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d901      	bls.n	80088ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e018      	b.n	80088e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	daf2      	bge.n	800889c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2210      	movs	r2, #16
 80088be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	3301      	adds	r3, #1
 80088c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	4a08      	ldr	r2, [pc, #32]	; (80088ec <USB_FlushRxFifo+0x5c>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d901      	bls.n	80088d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e006      	b.n	80088e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	f003 0310 	and.w	r3, r3, #16
 80088da:	2b10      	cmp	r3, #16
 80088dc:	d0f0      	beq.n	80088c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	00030d40 	.word	0x00030d40

080088f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	460b      	mov	r3, r1
 80088fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	78fb      	ldrb	r3, [r7, #3]
 800890a:	68f9      	ldr	r1, [r7, #12]
 800890c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008910:	4313      	orrs	r3, r2
 8008912:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008922:	b480      	push	{r7}
 8008924:	b087      	sub	sp, #28
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f003 0306 	and.w	r3, r3, #6
 800893a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d102      	bne.n	8008948 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008942:	2300      	movs	r3, #0
 8008944:	75fb      	strb	r3, [r7, #23]
 8008946:	e00a      	b.n	800895e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b02      	cmp	r3, #2
 800894c:	d002      	beq.n	8008954 <USB_GetDevSpeed+0x32>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b06      	cmp	r3, #6
 8008952:	d102      	bne.n	800895a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008954:	2302      	movs	r3, #2
 8008956:	75fb      	strb	r3, [r7, #23]
 8008958:	e001      	b.n	800895e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800895a:	230f      	movs	r3, #15
 800895c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800895e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008960:	4618      	mov	r0, r3
 8008962:	371c      	adds	r7, #28
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	785b      	ldrb	r3, [r3, #1]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d13a      	bne.n	80089fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898e:	69da      	ldr	r2, [r3, #28]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	f003 030f 	and.w	r3, r3, #15
 8008998:	2101      	movs	r1, #1
 800899a:	fa01 f303 	lsl.w	r3, r1, r3
 800899e:	b29b      	uxth	r3, r3
 80089a0:	68f9      	ldr	r1, [r7, #12]
 80089a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089a6:	4313      	orrs	r3, r2
 80089a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d155      	bne.n	8008a6c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	015a      	lsls	r2, r3, #5
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4413      	add	r3, r2
 80089c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	791b      	ldrb	r3, [r3, #4]
 80089da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	059b      	lsls	r3, r3, #22
 80089e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089e4:	4313      	orrs	r3, r2
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	0151      	lsls	r1, r2, #5
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	440a      	add	r2, r1
 80089ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089fa:	6013      	str	r3, [r2, #0]
 80089fc:	e036      	b.n	8008a6c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a04:	69da      	ldr	r2, [r3, #28]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	f003 030f 	and.w	r3, r3, #15
 8008a0e:	2101      	movs	r1, #1
 8008a10:	fa01 f303 	lsl.w	r3, r1, r3
 8008a14:	041b      	lsls	r3, r3, #16
 8008a16:	68f9      	ldr	r1, [r7, #12]
 8008a18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	015a      	lsls	r2, r3, #5
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d11a      	bne.n	8008a6c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	791b      	ldrb	r3, [r3, #4]
 8008a50:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a52:	430b      	orrs	r3, r1
 8008a54:	4313      	orrs	r3, r2
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	0151      	lsls	r1, r2, #5
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	440a      	add	r2, r1
 8008a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a6a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
	...

08008a7c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	785b      	ldrb	r3, [r3, #1]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d161      	bne.n	8008b5c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008aae:	d11f      	bne.n	8008af0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	0151      	lsls	r1, r2, #5
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	440a      	add	r2, r1
 8008ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ace:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	015a      	lsls	r2, r3, #5
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	0151      	lsls	r1, r2, #5
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	440a      	add	r2, r1
 8008ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008aee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	f003 030f 	and.w	r3, r3, #15
 8008b00:	2101      	movs	r1, #1
 8008b02:	fa01 f303 	lsl.w	r3, r1, r3
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	43db      	mvns	r3, r3
 8008b0a:	68f9      	ldr	r1, [r7, #12]
 8008b0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b10:	4013      	ands	r3, r2
 8008b12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1a:	69da      	ldr	r2, [r3, #28]
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	f003 030f 	and.w	r3, r3, #15
 8008b24:	2101      	movs	r1, #1
 8008b26:	fa01 f303 	lsl.w	r3, r1, r3
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	43db      	mvns	r3, r3
 8008b2e:	68f9      	ldr	r1, [r7, #12]
 8008b30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b34:	4013      	ands	r3, r2
 8008b36:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	0159      	lsls	r1, r3, #5
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	440b      	add	r3, r1
 8008b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b52:	4619      	mov	r1, r3
 8008b54:	4b35      	ldr	r3, [pc, #212]	; (8008c2c <USB_DeactivateEndpoint+0x1b0>)
 8008b56:	4013      	ands	r3, r2
 8008b58:	600b      	str	r3, [r1, #0]
 8008b5a:	e060      	b.n	8008c1e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	015a      	lsls	r2, r3, #5
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	4413      	add	r3, r2
 8008b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b72:	d11f      	bne.n	8008bb4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	015a      	lsls	r2, r3, #5
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	0151      	lsls	r1, r2, #5
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	440a      	add	r2, r1
 8008b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b92:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	0151      	lsls	r1, r2, #5
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	440a      	add	r2, r1
 8008baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	f003 030f 	and.w	r3, r3, #15
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bca:	041b      	lsls	r3, r3, #16
 8008bcc:	43db      	mvns	r3, r3
 8008bce:	68f9      	ldr	r1, [r7, #12]
 8008bd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bde:	69da      	ldr	r2, [r3, #28]
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	f003 030f 	and.w	r3, r3, #15
 8008be8:	2101      	movs	r1, #1
 8008bea:	fa01 f303 	lsl.w	r3, r1, r3
 8008bee:	041b      	lsls	r3, r3, #16
 8008bf0:	43db      	mvns	r3, r3
 8008bf2:	68f9      	ldr	r1, [r7, #12]
 8008bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	0159      	lsls	r1, r3, #5
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	440b      	add	r3, r1
 8008c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c16:	4619      	mov	r1, r3
 8008c18:	4b05      	ldr	r3, [pc, #20]	; (8008c30 <USB_DeactivateEndpoint+0x1b4>)
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	ec337800 	.word	0xec337800
 8008c30:	eff37800 	.word	0xeff37800

08008c34 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b08a      	sub	sp, #40	; 0x28
 8008c38:	af02      	add	r7, sp, #8
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	785b      	ldrb	r3, [r3, #1]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	f040 815c 	bne.w	8008f0e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d132      	bne.n	8008cc4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	015a      	lsls	r2, r3, #5
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	0151      	lsls	r1, r2, #5
 8008c70:	69fa      	ldr	r2, [r7, #28]
 8008c72:	440a      	add	r2, r1
 8008c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	015a      	lsls	r2, r3, #5
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	0151      	lsls	r1, r2, #5
 8008c94:	69fa      	ldr	r2, [r7, #28]
 8008c96:	440a      	add	r2, r1
 8008c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ca0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	015a      	lsls	r2, r3, #5
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	4413      	add	r3, r2
 8008caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	0151      	lsls	r1, r2, #5
 8008cb4:	69fa      	ldr	r2, [r7, #28]
 8008cb6:	440a      	add	r2, r1
 8008cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cbc:	0cdb      	lsrs	r3, r3, #19
 8008cbe:	04db      	lsls	r3, r3, #19
 8008cc0:	6113      	str	r3, [r2, #16]
 8008cc2:	e074      	b.n	8008dae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	0151      	lsls	r1, r2, #5
 8008cd6:	69fa      	ldr	r2, [r7, #28]
 8008cd8:	440a      	add	r2, r1
 8008cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cde:	0cdb      	lsrs	r3, r3, #19
 8008ce0:	04db      	lsls	r3, r3, #19
 8008ce2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	015a      	lsls	r2, r3, #5
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	69ba      	ldr	r2, [r7, #24]
 8008cf4:	0151      	lsls	r1, r2, #5
 8008cf6:	69fa      	ldr	r2, [r7, #28]
 8008cf8:	440a      	add	r2, r1
 8008cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cfe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	015a      	lsls	r2, r3, #5
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	4413      	add	r3, r2
 8008d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d14:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	6999      	ldr	r1, [r3, #24]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	440b      	add	r3, r1
 8008d20:	1e59      	subs	r1, r3, #1
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d2a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d2c:	4b9d      	ldr	r3, [pc, #628]	; (8008fa4 <USB_EPStartXfer+0x370>)
 8008d2e:	400b      	ands	r3, r1
 8008d30:	69b9      	ldr	r1, [r7, #24]
 8008d32:	0148      	lsls	r0, r1, #5
 8008d34:	69f9      	ldr	r1, [r7, #28]
 8008d36:	4401      	add	r1, r0
 8008d38:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d4c:	691a      	ldr	r2, [r3, #16]
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d56:	69b9      	ldr	r1, [r7, #24]
 8008d58:	0148      	lsls	r0, r1, #5
 8008d5a:	69f9      	ldr	r1, [r7, #28]
 8008d5c:	4401      	add	r1, r0
 8008d5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d62:	4313      	orrs	r3, r2
 8008d64:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	791b      	ldrb	r3, [r3, #4]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d11f      	bne.n	8008dae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	0151      	lsls	r1, r2, #5
 8008d80:	69fa      	ldr	r2, [r7, #28]
 8008d82:	440a      	add	r2, r1
 8008d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d88:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008d8c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	0151      	lsls	r1, r2, #5
 8008da0:	69fa      	ldr	r2, [r7, #28]
 8008da2:	440a      	add	r2, r1
 8008da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008da8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008dac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008dae:	79fb      	ldrb	r3, [r7, #7]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d14b      	bne.n	8008e4c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d009      	beq.n	8008dd0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc8:	461a      	mov	r2, r3
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	791b      	ldrb	r3, [r3, #4]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d128      	bne.n	8008e2a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d110      	bne.n	8008e0a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	015a      	lsls	r2, r3, #5
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	4413      	add	r3, r2
 8008df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	0151      	lsls	r1, r2, #5
 8008dfa:	69fa      	ldr	r2, [r7, #28]
 8008dfc:	440a      	add	r2, r1
 8008dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e06:	6013      	str	r3, [r2, #0]
 8008e08:	e00f      	b.n	8008e2a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	015a      	lsls	r2, r3, #5
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	69ba      	ldr	r2, [r7, #24]
 8008e1a:	0151      	lsls	r1, r2, #5
 8008e1c:	69fa      	ldr	r2, [r7, #28]
 8008e1e:	440a      	add	r2, r1
 8008e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e28:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	015a      	lsls	r2, r3, #5
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	69ba      	ldr	r2, [r7, #24]
 8008e3a:	0151      	lsls	r1, r2, #5
 8008e3c:	69fa      	ldr	r2, [r7, #28]
 8008e3e:	440a      	add	r2, r1
 8008e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	e133      	b.n	80090b4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	69ba      	ldr	r2, [r7, #24]
 8008e5c:	0151      	lsls	r1, r2, #5
 8008e5e:	69fa      	ldr	r2, [r7, #28]
 8008e60:	440a      	add	r2, r1
 8008e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e6a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	791b      	ldrb	r3, [r3, #4]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d015      	beq.n	8008ea0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 811b 	beq.w	80090b4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	f003 030f 	and.w	r3, r3, #15
 8008e8e:	2101      	movs	r1, #1
 8008e90:	fa01 f303 	lsl.w	r3, r1, r3
 8008e94:	69f9      	ldr	r1, [r7, #28]
 8008e96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	634b      	str	r3, [r1, #52]	; 0x34
 8008e9e:	e109      	b.n	80090b4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d110      	bne.n	8008ed2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	69ba      	ldr	r2, [r7, #24]
 8008ec0:	0151      	lsls	r1, r2, #5
 8008ec2:	69fa      	ldr	r2, [r7, #28]
 8008ec4:	440a      	add	r2, r1
 8008ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	e00f      	b.n	8008ef2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	015a      	lsls	r2, r3, #5
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	4413      	add	r3, r2
 8008eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	69ba      	ldr	r2, [r7, #24]
 8008ee2:	0151      	lsls	r1, r2, #5
 8008ee4:	69fa      	ldr	r2, [r7, #28]
 8008ee6:	440a      	add	r2, r1
 8008ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ef0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	6919      	ldr	r1, [r3, #16]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	781a      	ldrb	r2, [r3, #0]
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	699b      	ldr	r3, [r3, #24]
 8008efe:	b298      	uxth	r0, r3
 8008f00:	79fb      	ldrb	r3, [r7, #7]
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	4603      	mov	r3, r0
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 fade 	bl	80094c8 <USB_WritePacket>
 8008f0c:	e0d2      	b.n	80090b4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	69ba      	ldr	r2, [r7, #24]
 8008f1e:	0151      	lsls	r1, r2, #5
 8008f20:	69fa      	ldr	r2, [r7, #28]
 8008f22:	440a      	add	r2, r1
 8008f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f28:	0cdb      	lsrs	r3, r3, #19
 8008f2a:	04db      	lsls	r3, r3, #19
 8008f2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	69ba      	ldr	r2, [r7, #24]
 8008f3e:	0151      	lsls	r1, r2, #5
 8008f40:	69fa      	ldr	r2, [r7, #28]
 8008f42:	440a      	add	r2, r1
 8008f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f50:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d126      	bne.n	8008fa8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f66:	691a      	ldr	r2, [r3, #16]
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f70:	69b9      	ldr	r1, [r7, #24]
 8008f72:	0148      	lsls	r0, r1, #5
 8008f74:	69f9      	ldr	r1, [r7, #28]
 8008f76:	4401      	add	r1, r0
 8008f78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	015a      	lsls	r2, r3, #5
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	4413      	add	r3, r2
 8008f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	0151      	lsls	r1, r2, #5
 8008f92:	69fa      	ldr	r2, [r7, #28]
 8008f94:	440a      	add	r2, r1
 8008f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f9e:	6113      	str	r3, [r2, #16]
 8008fa0:	e03a      	b.n	8009018 <USB_EPStartXfer+0x3e4>
 8008fa2:	bf00      	nop
 8008fa4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	699a      	ldr	r2, [r3, #24]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	1e5a      	subs	r2, r3, #1
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fbc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	8afa      	ldrh	r2, [r7, #22]
 8008fc4:	fb03 f202 	mul.w	r2, r3, r2
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	015a      	lsls	r2, r3, #5
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd8:	691a      	ldr	r2, [r3, #16]
 8008fda:	8afb      	ldrh	r3, [r7, #22]
 8008fdc:	04d9      	lsls	r1, r3, #19
 8008fde:	4b38      	ldr	r3, [pc, #224]	; (80090c0 <USB_EPStartXfer+0x48c>)
 8008fe0:	400b      	ands	r3, r1
 8008fe2:	69b9      	ldr	r1, [r7, #24]
 8008fe4:	0148      	lsls	r0, r1, #5
 8008fe6:	69f9      	ldr	r1, [r7, #28]
 8008fe8:	4401      	add	r1, r0
 8008fea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ffe:	691a      	ldr	r2, [r3, #16]
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	69db      	ldr	r3, [r3, #28]
 8009004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009008:	69b9      	ldr	r1, [r7, #24]
 800900a:	0148      	lsls	r0, r1, #5
 800900c:	69f9      	ldr	r1, [r7, #28]
 800900e:	4401      	add	r1, r0
 8009010:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009014:	4313      	orrs	r3, r2
 8009016:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009018:	79fb      	ldrb	r3, [r7, #7]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d10d      	bne.n	800903a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d009      	beq.n	800903a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	6919      	ldr	r1, [r3, #16]
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	4413      	add	r3, r2
 8009032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009036:	460a      	mov	r2, r1
 8009038:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	791b      	ldrb	r3, [r3, #4]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d128      	bne.n	8009094 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800904e:	2b00      	cmp	r3, #0
 8009050:	d110      	bne.n	8009074 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	015a      	lsls	r2, r3, #5
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	4413      	add	r3, r2
 800905a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	69ba      	ldr	r2, [r7, #24]
 8009062:	0151      	lsls	r1, r2, #5
 8009064:	69fa      	ldr	r2, [r7, #28]
 8009066:	440a      	add	r2, r1
 8009068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800906c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009070:	6013      	str	r3, [r2, #0]
 8009072:	e00f      	b.n	8009094 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	4413      	add	r3, r2
 800907c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	69ba      	ldr	r2, [r7, #24]
 8009084:	0151      	lsls	r1, r2, #5
 8009086:	69fa      	ldr	r2, [r7, #28]
 8009088:	440a      	add	r2, r1
 800908a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800908e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009092:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	015a      	lsls	r2, r3, #5
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	4413      	add	r3, r2
 800909c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	0151      	lsls	r1, r2, #5
 80090a6:	69fa      	ldr	r2, [r7, #28]
 80090a8:	440a      	add	r2, r1
 80090aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80090b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3720      	adds	r7, #32
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	1ff80000 	.word	0x1ff80000

080090c4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b087      	sub	sp, #28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	4613      	mov	r3, r2
 80090d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	785b      	ldrb	r3, [r3, #1]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	f040 80ce 	bne.w	8009282 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d132      	bne.n	8009154 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	015a      	lsls	r2, r3, #5
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	4413      	add	r3, r2
 80090f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	0151      	lsls	r1, r2, #5
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	440a      	add	r2, r1
 8009104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009108:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800910c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009110:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	0151      	lsls	r1, r2, #5
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	440a      	add	r2, r1
 8009128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800912c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009130:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	4413      	add	r3, r2
 800913a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	0151      	lsls	r1, r2, #5
 8009144:	697a      	ldr	r2, [r7, #20]
 8009146:	440a      	add	r2, r1
 8009148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800914c:	0cdb      	lsrs	r3, r3, #19
 800914e:	04db      	lsls	r3, r3, #19
 8009150:	6113      	str	r3, [r2, #16]
 8009152:	e04e      	b.n	80091f2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	015a      	lsls	r2, r3, #5
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	4413      	add	r3, r2
 800915c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	0151      	lsls	r1, r2, #5
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	440a      	add	r2, r1
 800916a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800916e:	0cdb      	lsrs	r3, r3, #19
 8009170:	04db      	lsls	r3, r3, #19
 8009172:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	4413      	add	r3, r2
 800917c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	0151      	lsls	r1, r2, #5
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	440a      	add	r2, r1
 800918a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800918e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009192:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009196:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	699a      	ldr	r2, [r3, #24]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d903      	bls.n	80091ac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	68da      	ldr	r2, [r3, #12]
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	015a      	lsls	r2, r3, #5
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	4413      	add	r3, r2
 80091b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	0151      	lsls	r1, r2, #5
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	440a      	add	r2, r1
 80091c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	015a      	lsls	r2, r3, #5
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d8:	691a      	ldr	r2, [r3, #16]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091e2:	6939      	ldr	r1, [r7, #16]
 80091e4:	0148      	lsls	r0, r1, #5
 80091e6:	6979      	ldr	r1, [r7, #20]
 80091e8:	4401      	add	r1, r0
 80091ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80091ee:	4313      	orrs	r3, r2
 80091f0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80091f2:	79fb      	ldrb	r3, [r7, #7]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d11e      	bne.n	8009236 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d009      	beq.n	8009214 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800920c:	461a      	mov	r2, r3
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	015a      	lsls	r2, r3, #5
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	4413      	add	r3, r2
 800921c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	0151      	lsls	r1, r2, #5
 8009226:	697a      	ldr	r2, [r7, #20]
 8009228:	440a      	add	r2, r1
 800922a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800922e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009232:	6013      	str	r3, [r2, #0]
 8009234:	e097      	b.n	8009366 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	015a      	lsls	r2, r3, #5
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	4413      	add	r3, r2
 800923e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	693a      	ldr	r2, [r7, #16]
 8009246:	0151      	lsls	r1, r2, #5
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	440a      	add	r2, r1
 800924c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009250:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009254:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	2b00      	cmp	r3, #0
 800925c:	f000 8083 	beq.w	8009366 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	f003 030f 	and.w	r3, r3, #15
 8009270:	2101      	movs	r1, #1
 8009272:	fa01 f303 	lsl.w	r3, r1, r3
 8009276:	6979      	ldr	r1, [r7, #20]
 8009278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800927c:	4313      	orrs	r3, r2
 800927e:	634b      	str	r3, [r1, #52]	; 0x34
 8009280:	e071      	b.n	8009366 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	015a      	lsls	r2, r3, #5
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	4413      	add	r3, r2
 800928a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	0151      	lsls	r1, r2, #5
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	440a      	add	r2, r1
 8009298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800929c:	0cdb      	lsrs	r3, r3, #19
 800929e:	04db      	lsls	r3, r3, #19
 80092a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	0151      	lsls	r1, r2, #5
 80092b4:	697a      	ldr	r2, [r7, #20]
 80092b6:	440a      	add	r2, r1
 80092b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d003      	beq.n	80092d6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	68da      	ldr	r2, [r3, #12]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	015a      	lsls	r2, r3, #5
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	693a      	ldr	r2, [r7, #16]
 80092ee:	0151      	lsls	r1, r2, #5
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	440a      	add	r2, r1
 80092f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	015a      	lsls	r2, r3, #5
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	4413      	add	r3, r2
 8009306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930a:	691a      	ldr	r2, [r3, #16]
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	69db      	ldr	r3, [r3, #28]
 8009310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009314:	6939      	ldr	r1, [r7, #16]
 8009316:	0148      	lsls	r0, r1, #5
 8009318:	6979      	ldr	r1, [r7, #20]
 800931a:	4401      	add	r1, r0
 800931c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009320:	4313      	orrs	r3, r2
 8009322:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009324:	79fb      	ldrb	r3, [r7, #7]
 8009326:	2b01      	cmp	r3, #1
 8009328:	d10d      	bne.n	8009346 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d009      	beq.n	8009346 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	6919      	ldr	r1, [r3, #16]
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	015a      	lsls	r2, r3, #5
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	4413      	add	r3, r2
 800933e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009342:	460a      	mov	r2, r1
 8009344:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	015a      	lsls	r2, r3, #5
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	4413      	add	r3, r2
 800934e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	0151      	lsls	r1, r2, #5
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	440a      	add	r2, r1
 800935c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009360:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009364:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	371c      	adds	r7, #28
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800937e:	2300      	movs	r3, #0
 8009380:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	785b      	ldrb	r3, [r3, #1]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d14a      	bne.n	8009428 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	015a      	lsls	r2, r3, #5
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	4413      	add	r3, r2
 800939c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093aa:	f040 8086 	bne.w	80094ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	015a      	lsls	r2, r3, #5
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	4413      	add	r3, r2
 80093b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	7812      	ldrb	r2, [r2, #0]
 80093c2:	0151      	lsls	r1, r2, #5
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	440a      	add	r2, r1
 80093c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80093d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	7812      	ldrb	r2, [r2, #0]
 80093e6:	0151      	lsls	r1, r2, #5
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	440a      	add	r2, r1
 80093ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3301      	adds	r3, #1
 80093fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8009402:	4293      	cmp	r3, r2
 8009404:	d902      	bls.n	800940c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	75fb      	strb	r3, [r7, #23]
          break;
 800940a:	e056      	b.n	80094ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	015a      	lsls	r2, r3, #5
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	4413      	add	r3, r2
 8009416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009424:	d0e7      	beq.n	80093f6 <USB_EPStopXfer+0x82>
 8009426:	e048      	b.n	80094ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	4413      	add	r3, r2
 8009432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800943c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009440:	d13b      	bne.n	80094ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	7812      	ldrb	r2, [r2, #0]
 8009456:	0151      	lsls	r1, r2, #5
 8009458:	693a      	ldr	r2, [r7, #16]
 800945a:	440a      	add	r2, r1
 800945c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009460:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009464:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	4413      	add	r3, r2
 8009470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	7812      	ldrb	r2, [r2, #0]
 800947a:	0151      	lsls	r1, r2, #5
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	440a      	add	r2, r1
 8009480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009484:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009488:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3301      	adds	r3, #1
 800948e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f242 7210 	movw	r2, #10000	; 0x2710
 8009496:	4293      	cmp	r3, r2
 8009498:	d902      	bls.n	80094a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	75fb      	strb	r3, [r7, #23]
          break;
 800949e:	e00c      	b.n	80094ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	015a      	lsls	r2, r3, #5
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	4413      	add	r3, r2
 80094aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094b8:	d0e7      	beq.n	800948a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	371c      	adds	r7, #28
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b089      	sub	sp, #36	; 0x24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	4611      	mov	r1, r2
 80094d4:	461a      	mov	r2, r3
 80094d6:	460b      	mov	r3, r1
 80094d8:	71fb      	strb	r3, [r7, #7]
 80094da:	4613      	mov	r3, r2
 80094dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80094e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d123      	bne.n	8009536 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80094ee:	88bb      	ldrh	r3, [r7, #4]
 80094f0:	3303      	adds	r3, #3
 80094f2:	089b      	lsrs	r3, r3, #2
 80094f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80094f6:	2300      	movs	r3, #0
 80094f8:	61bb      	str	r3, [r7, #24]
 80094fa:	e018      	b.n	800952e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80094fc:	79fb      	ldrb	r3, [r7, #7]
 80094fe:	031a      	lsls	r2, r3, #12
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	4413      	add	r3, r2
 8009504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009508:	461a      	mov	r2, r3
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	3301      	adds	r3, #1
 8009514:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	3301      	adds	r3, #1
 800951a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	3301      	adds	r3, #1
 8009520:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	3301      	adds	r3, #1
 8009526:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	3301      	adds	r3, #1
 800952c:	61bb      	str	r3, [r7, #24]
 800952e:	69ba      	ldr	r2, [r7, #24]
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	429a      	cmp	r2, r3
 8009534:	d3e2      	bcc.n	80094fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3724      	adds	r7, #36	; 0x24
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009544:	b480      	push	{r7}
 8009546:	b08b      	sub	sp, #44	; 0x2c
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	4613      	mov	r3, r2
 8009550:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800955a:	88fb      	ldrh	r3, [r7, #6]
 800955c:	089b      	lsrs	r3, r3, #2
 800955e:	b29b      	uxth	r3, r3
 8009560:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009562:	88fb      	ldrh	r3, [r7, #6]
 8009564:	f003 0303 	and.w	r3, r3, #3
 8009568:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800956a:	2300      	movs	r3, #0
 800956c:	623b      	str	r3, [r7, #32]
 800956e:	e014      	b.n	800959a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	601a      	str	r2, [r3, #0]
    pDest++;
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	3301      	adds	r3, #1
 8009580:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009584:	3301      	adds	r3, #1
 8009586:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958a:	3301      	adds	r3, #1
 800958c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800958e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009590:	3301      	adds	r3, #1
 8009592:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	3301      	adds	r3, #1
 8009598:	623b      	str	r3, [r7, #32]
 800959a:	6a3a      	ldr	r2, [r7, #32]
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d3e6      	bcc.n	8009570 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80095a2:	8bfb      	ldrh	r3, [r7, #30]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d01e      	beq.n	80095e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095b2:	461a      	mov	r2, r3
 80095b4:	f107 0310 	add.w	r3, r7, #16
 80095b8:	6812      	ldr	r2, [r2, #0]
 80095ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	6a3b      	ldr	r3, [r7, #32]
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	00db      	lsls	r3, r3, #3
 80095c4:	fa22 f303 	lsr.w	r3, r2, r3
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095cc:	701a      	strb	r2, [r3, #0]
      i++;
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	3301      	adds	r3, #1
 80095d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	3301      	adds	r3, #1
 80095d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80095da:	8bfb      	ldrh	r3, [r7, #30]
 80095dc:	3b01      	subs	r3, #1
 80095de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80095e0:	8bfb      	ldrh	r3, [r7, #30]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1ea      	bne.n	80095bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80095e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	372c      	adds	r7, #44	; 0x2c
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	785b      	ldrb	r3, [r3, #1]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d12c      	bne.n	800966a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	db12      	blt.n	8009648 <USB_EPSetStall+0x54>
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00f      	beq.n	8009648 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	015a      	lsls	r2, r3, #5
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	4413      	add	r3, r2
 8009630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	0151      	lsls	r1, r2, #5
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	440a      	add	r2, r1
 800963e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009642:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009646:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	0151      	lsls	r1, r2, #5
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	440a      	add	r2, r1
 800965e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009662:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	e02b      	b.n	80096c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	015a      	lsls	r2, r3, #5
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	4413      	add	r3, r2
 8009672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	db12      	blt.n	80096a2 <USB_EPSetStall+0xae>
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00f      	beq.n	80096a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	015a      	lsls	r2, r3, #5
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	4413      	add	r3, r2
 800968a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	0151      	lsls	r1, r2, #5
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	440a      	add	r2, r1
 8009698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800969c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	0151      	lsls	r1, r2, #5
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	440a      	add	r2, r1
 80096b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	785b      	ldrb	r3, [r3, #1]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d128      	bne.n	800973e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	0151      	lsls	r1, r2, #5
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	440a      	add	r2, r1
 8009702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009706:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800970a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	791b      	ldrb	r3, [r3, #4]
 8009710:	2b03      	cmp	r3, #3
 8009712:	d003      	beq.n	800971c <USB_EPClearStall+0x4c>
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	791b      	ldrb	r3, [r3, #4]
 8009718:	2b02      	cmp	r3, #2
 800971a:	d138      	bne.n	800978e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68ba      	ldr	r2, [r7, #8]
 800972c:	0151      	lsls	r1, r2, #5
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	440a      	add	r2, r1
 8009732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800973a:	6013      	str	r3, [r2, #0]
 800973c:	e027      	b.n	800978e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	015a      	lsls	r2, r3, #5
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	4413      	add	r3, r2
 8009746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	0151      	lsls	r1, r2, #5
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	440a      	add	r2, r1
 8009754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009758:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800975c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	791b      	ldrb	r3, [r3, #4]
 8009762:	2b03      	cmp	r3, #3
 8009764:	d003      	beq.n	800976e <USB_EPClearStall+0x9e>
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	791b      	ldrb	r3, [r3, #4]
 800976a:	2b02      	cmp	r3, #2
 800976c:	d10f      	bne.n	800978e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	015a      	lsls	r2, r3, #5
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	4413      	add	r3, r2
 8009776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	0151      	lsls	r1, r2, #5
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	440a      	add	r2, r1
 8009784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800978c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	460b      	mov	r3, r1
 80097a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80097be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	78fb      	ldrb	r3, [r7, #3]
 80097ca:	011b      	lsls	r3, r3, #4
 80097cc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80097d0:	68f9      	ldr	r1, [r7, #12]
 80097d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097d6:	4313      	orrs	r3, r2
 80097d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009802:	f023 0303 	bic.w	r3, r3, #3
 8009806:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009816:	f023 0302 	bic.w	r3, r3, #2
 800981a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800982a:	b480      	push	{r7}
 800982c:	b085      	sub	sp, #20
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009844:	f023 0303 	bic.w	r3, r3, #3
 8009848:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009858:	f043 0302 	orr.w	r3, r3, #2
 800985c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	695b      	ldr	r3, [r3, #20]
 8009878:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	4013      	ands	r3, r2
 8009882:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009884:	68fb      	ldr	r3, [r7, #12]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009892:	b480      	push	{r7}
 8009894:	b085      	sub	sp, #20
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ae:	69db      	ldr	r3, [r3, #28]
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	4013      	ands	r3, r2
 80098b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	0c1b      	lsrs	r3, r3, #16
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3714      	adds	r7, #20
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr

080098c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b085      	sub	sp, #20
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e2:	69db      	ldr	r3, [r3, #28]
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	4013      	ands	r3, r2
 80098e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	b29b      	uxth	r3, r3
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3714      	adds	r7, #20
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b085      	sub	sp, #20
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	460b      	mov	r3, r1
 8009904:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800990a:	78fb      	ldrb	r3, [r7, #3]
 800990c:	015a      	lsls	r2, r3, #5
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	4413      	add	r3, r2
 8009912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	4013      	ands	r3, r2
 8009926:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009928:	68bb      	ldr	r3, [r7, #8]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr

08009936 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009936:	b480      	push	{r7}
 8009938:	b087      	sub	sp, #28
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	460b      	mov	r3, r1
 8009940:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009958:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800995a:	78fb      	ldrb	r3, [r7, #3]
 800995c:	f003 030f 	and.w	r3, r3, #15
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	fa22 f303 	lsr.w	r3, r2, r3
 8009966:	01db      	lsls	r3, r3, #7
 8009968:	b2db      	uxtb	r3, r3
 800996a:	693a      	ldr	r2, [r7, #16]
 800996c:	4313      	orrs	r3, r2
 800996e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009970:	78fb      	ldrb	r3, [r7, #3]
 8009972:	015a      	lsls	r2, r3, #5
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	4413      	add	r3, r2
 8009978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	4013      	ands	r3, r2
 8009982:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009984:	68bb      	ldr	r3, [r7, #8]
}
 8009986:	4618      	mov	r0, r3
 8009988:	371c      	adds	r7, #28
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009992:	b480      	push	{r7}
 8009994:	b083      	sub	sp, #12
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	f003 0301 	and.w	r3, r3, #1
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	370c      	adds	r7, #12
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b085      	sub	sp, #20
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80099cc:	f023 0307 	bic.w	r3, r3, #7
 80099d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b087      	sub	sp, #28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	460b      	mov	r3, r1
 80099fe:	607a      	str	r2, [r7, #4]
 8009a00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	333c      	adds	r3, #60	; 0x3c
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	4a26      	ldr	r2, [pc, #152]	; (8009aac <USB_EP0_OutStart+0xb8>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d90a      	bls.n	8009a2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a28:	d101      	bne.n	8009a2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	e037      	b.n	8009a9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a34:	461a      	mov	r2, r3
 8009a36:	2300      	movs	r3, #0
 8009a38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a5c:	f043 0318 	orr.w	r3, r3, #24
 8009a60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	697a      	ldr	r2, [r7, #20]
 8009a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a70:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009a74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009a76:	7afb      	ldrb	r3, [r7, #11]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d10f      	bne.n	8009a9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a82:	461a      	mov	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a96:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009a9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	371c      	adds	r7, #28
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	4f54300a 	.word	0x4f54300a

08009ab0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	4a13      	ldr	r2, [pc, #76]	; (8009b14 <USB_CoreReset+0x64>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d901      	bls.n	8009ace <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009aca:	2303      	movs	r3, #3
 8009acc:	e01b      	b.n	8009b06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	daf2      	bge.n	8009abc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	f043 0201 	orr.w	r2, r3, #1
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	4a09      	ldr	r2, [pc, #36]	; (8009b14 <USB_CoreReset+0x64>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d901      	bls.n	8009af8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e006      	b.n	8009b06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d0f0      	beq.n	8009ae6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	00030d40 	.word	0x00030d40

08009b18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	460b      	mov	r3, r1
 8009b22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009b24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009b28:	f002 fc8a 	bl	800c440 <USBD_static_malloc>
 8009b2c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d109      	bne.n	8009b48 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	32b0      	adds	r2, #176	; 0xb0
 8009b3e:	2100      	movs	r1, #0
 8009b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009b44:	2302      	movs	r3, #2
 8009b46:	e0d4      	b.n	8009cf2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009b48:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f003 fa59 	bl	800d006 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	32b0      	adds	r2, #176	; 0xb0
 8009b5e:	68f9      	ldr	r1, [r7, #12]
 8009b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	32b0      	adds	r2, #176	; 0xb0
 8009b6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	7c1b      	ldrb	r3, [r3, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d138      	bne.n	8009bf2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b80:	4b5e      	ldr	r3, [pc, #376]	; (8009cfc <USBD_CDC_Init+0x1e4>)
 8009b82:	7819      	ldrb	r1, [r3, #0]
 8009b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b88:	2202      	movs	r2, #2
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f002 fb35 	bl	800c1fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b90:	4b5a      	ldr	r3, [pc, #360]	; (8009cfc <USBD_CDC_Init+0x1e4>)
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	f003 020f 	and.w	r2, r3, #15
 8009b98:	6879      	ldr	r1, [r7, #4]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	4413      	add	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	440b      	add	r3, r1
 8009ba4:	3324      	adds	r3, #36	; 0x24
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009baa:	4b55      	ldr	r3, [pc, #340]	; (8009d00 <USBD_CDC_Init+0x1e8>)
 8009bac:	7819      	ldrb	r1, [r3, #0]
 8009bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f002 fb20 	bl	800c1fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009bba:	4b51      	ldr	r3, [pc, #324]	; (8009d00 <USBD_CDC_Init+0x1e8>)
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	f003 020f 	and.w	r2, r3, #15
 8009bc2:	6879      	ldr	r1, [r7, #4]
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4413      	add	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	440b      	add	r3, r1
 8009bce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009bd6:	4b4b      	ldr	r3, [pc, #300]	; (8009d04 <USBD_CDC_Init+0x1ec>)
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	f003 020f 	and.w	r2, r3, #15
 8009bde:	6879      	ldr	r1, [r7, #4]
 8009be0:	4613      	mov	r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	4413      	add	r3, r2
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	440b      	add	r3, r1
 8009bea:	3326      	adds	r3, #38	; 0x26
 8009bec:	2210      	movs	r2, #16
 8009bee:	801a      	strh	r2, [r3, #0]
 8009bf0:	e035      	b.n	8009c5e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009bf2:	4b42      	ldr	r3, [pc, #264]	; (8009cfc <USBD_CDC_Init+0x1e4>)
 8009bf4:	7819      	ldrb	r1, [r3, #0]
 8009bf6:	2340      	movs	r3, #64	; 0x40
 8009bf8:	2202      	movs	r2, #2
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f002 fafd 	bl	800c1fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c00:	4b3e      	ldr	r3, [pc, #248]	; (8009cfc <USBD_CDC_Init+0x1e4>)
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	f003 020f 	and.w	r2, r3, #15
 8009c08:	6879      	ldr	r1, [r7, #4]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	440b      	add	r3, r1
 8009c14:	3324      	adds	r3, #36	; 0x24
 8009c16:	2201      	movs	r2, #1
 8009c18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c1a:	4b39      	ldr	r3, [pc, #228]	; (8009d00 <USBD_CDC_Init+0x1e8>)
 8009c1c:	7819      	ldrb	r1, [r3, #0]
 8009c1e:	2340      	movs	r3, #64	; 0x40
 8009c20:	2202      	movs	r2, #2
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f002 fae9 	bl	800c1fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c28:	4b35      	ldr	r3, [pc, #212]	; (8009d00 <USBD_CDC_Init+0x1e8>)
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	f003 020f 	and.w	r2, r3, #15
 8009c30:	6879      	ldr	r1, [r7, #4]
 8009c32:	4613      	mov	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	4413      	add	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	440b      	add	r3, r1
 8009c3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c40:	2201      	movs	r2, #1
 8009c42:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c44:	4b2f      	ldr	r3, [pc, #188]	; (8009d04 <USBD_CDC_Init+0x1ec>)
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	f003 020f 	and.w	r2, r3, #15
 8009c4c:	6879      	ldr	r1, [r7, #4]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	440b      	add	r3, r1
 8009c58:	3326      	adds	r3, #38	; 0x26
 8009c5a:	2210      	movs	r2, #16
 8009c5c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c5e:	4b29      	ldr	r3, [pc, #164]	; (8009d04 <USBD_CDC_Init+0x1ec>)
 8009c60:	7819      	ldrb	r1, [r3, #0]
 8009c62:	2308      	movs	r3, #8
 8009c64:	2203      	movs	r2, #3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f002 fac7 	bl	800c1fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009c6c:	4b25      	ldr	r3, [pc, #148]	; (8009d04 <USBD_CDC_Init+0x1ec>)
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	f003 020f 	and.w	r2, r3, #15
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	4613      	mov	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	440b      	add	r3, r1
 8009c80:	3324      	adds	r3, #36	; 0x24
 8009c82:	2201      	movs	r2, #1
 8009c84:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	33b0      	adds	r3, #176	; 0xb0
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	4413      	add	r3, r2
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d101      	bne.n	8009cc0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	e018      	b.n	8009cf2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	7c1b      	ldrb	r3, [r3, #16]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10a      	bne.n	8009cde <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009cc8:	4b0d      	ldr	r3, [pc, #52]	; (8009d00 <USBD_CDC_Init+0x1e8>)
 8009cca:	7819      	ldrb	r1, [r3, #0]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f002 fb7e 	bl	800c3d8 <USBD_LL_PrepareReceive>
 8009cdc:	e008      	b.n	8009cf0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009cde:	4b08      	ldr	r3, [pc, #32]	; (8009d00 <USBD_CDC_Init+0x1e8>)
 8009ce0:	7819      	ldrb	r1, [r3, #0]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ce8:	2340      	movs	r3, #64	; 0x40
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f002 fb74 	bl	800c3d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	200000bb 	.word	0x200000bb
 8009d00:	200000bc 	.word	0x200000bc
 8009d04:	200000bd 	.word	0x200000bd

08009d08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	460b      	mov	r3, r1
 8009d12:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009d14:	4b3a      	ldr	r3, [pc, #232]	; (8009e00 <USBD_CDC_DeInit+0xf8>)
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f002 fa93 	bl	800c246 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009d20:	4b37      	ldr	r3, [pc, #220]	; (8009e00 <USBD_CDC_DeInit+0xf8>)
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	f003 020f 	and.w	r2, r3, #15
 8009d28:	6879      	ldr	r1, [r7, #4]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	440b      	add	r3, r1
 8009d34:	3324      	adds	r3, #36	; 0x24
 8009d36:	2200      	movs	r2, #0
 8009d38:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009d3a:	4b32      	ldr	r3, [pc, #200]	; (8009e04 <USBD_CDC_DeInit+0xfc>)
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	4619      	mov	r1, r3
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f002 fa80 	bl	800c246 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009d46:	4b2f      	ldr	r3, [pc, #188]	; (8009e04 <USBD_CDC_DeInit+0xfc>)
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	f003 020f 	and.w	r2, r3, #15
 8009d4e:	6879      	ldr	r1, [r7, #4]
 8009d50:	4613      	mov	r3, r2
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	440b      	add	r3, r1
 8009d5a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d5e:	2200      	movs	r2, #0
 8009d60:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009d62:	4b29      	ldr	r3, [pc, #164]	; (8009e08 <USBD_CDC_DeInit+0x100>)
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f002 fa6c 	bl	800c246 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009d6e:	4b26      	ldr	r3, [pc, #152]	; (8009e08 <USBD_CDC_DeInit+0x100>)
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	f003 020f 	and.w	r2, r3, #15
 8009d76:	6879      	ldr	r1, [r7, #4]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	440b      	add	r3, r1
 8009d82:	3324      	adds	r3, #36	; 0x24
 8009d84:	2200      	movs	r2, #0
 8009d86:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009d88:	4b1f      	ldr	r3, [pc, #124]	; (8009e08 <USBD_CDC_DeInit+0x100>)
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	f003 020f 	and.w	r2, r3, #15
 8009d90:	6879      	ldr	r1, [r7, #4]
 8009d92:	4613      	mov	r3, r2
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4413      	add	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	440b      	add	r3, r1
 8009d9c:	3326      	adds	r3, #38	; 0x26
 8009d9e:	2200      	movs	r2, #0
 8009da0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	32b0      	adds	r2, #176	; 0xb0
 8009dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d01f      	beq.n	8009df4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	33b0      	adds	r3, #176	; 0xb0
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	32b0      	adds	r2, #176	; 0xb0
 8009dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f002 fb40 	bl	800c45c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	32b0      	adds	r2, #176	; 0xb0
 8009de6:	2100      	movs	r1, #0
 8009de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	200000bb 	.word	0x200000bb
 8009e04:	200000bc 	.word	0x200000bc
 8009e08:	200000bd 	.word	0x200000bd

08009e0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	32b0      	adds	r2, #176	; 0xb0
 8009e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e24:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009e26:	2300      	movs	r3, #0
 8009e28:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d101      	bne.n	8009e3c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e0bf      	b.n	8009fbc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d050      	beq.n	8009eea <USBD_CDC_Setup+0xde>
 8009e48:	2b20      	cmp	r3, #32
 8009e4a:	f040 80af 	bne.w	8009fac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	88db      	ldrh	r3, [r3, #6]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d03a      	beq.n	8009ecc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	b25b      	sxtb	r3, r3
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	da1b      	bge.n	8009e98 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	33b0      	adds	r3, #176	; 0xb0
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009e76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e78:	683a      	ldr	r2, [r7, #0]
 8009e7a:	88d2      	ldrh	r2, [r2, #6]
 8009e7c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	88db      	ldrh	r3, [r3, #6]
 8009e82:	2b07      	cmp	r3, #7
 8009e84:	bf28      	it	cs
 8009e86:	2307      	movcs	r3, #7
 8009e88:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	89fa      	ldrh	r2, [r7, #14]
 8009e8e:	4619      	mov	r1, r3
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f001 fd89 	bl	800b9a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009e96:	e090      	b.n	8009fba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	785a      	ldrb	r2, [r3, #1]
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	88db      	ldrh	r3, [r3, #6]
 8009ea6:	2b3f      	cmp	r3, #63	; 0x3f
 8009ea8:	d803      	bhi.n	8009eb2 <USBD_CDC_Setup+0xa6>
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	88db      	ldrh	r3, [r3, #6]
 8009eae:	b2da      	uxtb	r2, r3
 8009eb0:	e000      	b.n	8009eb4 <USBD_CDC_Setup+0xa8>
 8009eb2:	2240      	movs	r2, #64	; 0x40
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009eba:	6939      	ldr	r1, [r7, #16]
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f001 fd9b 	bl	800ba00 <USBD_CtlPrepareRx>
      break;
 8009eca:	e076      	b.n	8009fba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	33b0      	adds	r3, #176	; 0xb0
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	7850      	ldrb	r0, [r2, #1]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	4798      	blx	r3
      break;
 8009ee8:	e067      	b.n	8009fba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	785b      	ldrb	r3, [r3, #1]
 8009eee:	2b0b      	cmp	r3, #11
 8009ef0:	d851      	bhi.n	8009f96 <USBD_CDC_Setup+0x18a>
 8009ef2:	a201      	add	r2, pc, #4	; (adr r2, 8009ef8 <USBD_CDC_Setup+0xec>)
 8009ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef8:	08009f29 	.word	0x08009f29
 8009efc:	08009fa5 	.word	0x08009fa5
 8009f00:	08009f97 	.word	0x08009f97
 8009f04:	08009f97 	.word	0x08009f97
 8009f08:	08009f97 	.word	0x08009f97
 8009f0c:	08009f97 	.word	0x08009f97
 8009f10:	08009f97 	.word	0x08009f97
 8009f14:	08009f97 	.word	0x08009f97
 8009f18:	08009f97 	.word	0x08009f97
 8009f1c:	08009f97 	.word	0x08009f97
 8009f20:	08009f53 	.word	0x08009f53
 8009f24:	08009f7d 	.word	0x08009f7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b03      	cmp	r3, #3
 8009f32:	d107      	bne.n	8009f44 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f34:	f107 030a 	add.w	r3, r7, #10
 8009f38:	2202      	movs	r2, #2
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f001 fd33 	bl	800b9a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f42:	e032      	b.n	8009faa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f001 fcbd 	bl	800b8c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	75fb      	strb	r3, [r7, #23]
          break;
 8009f50:	e02b      	b.n	8009faa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b03      	cmp	r3, #3
 8009f5c:	d107      	bne.n	8009f6e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f5e:	f107 030d 	add.w	r3, r7, #13
 8009f62:	2201      	movs	r2, #1
 8009f64:	4619      	mov	r1, r3
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f001 fd1e 	bl	800b9a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f6c:	e01d      	b.n	8009faa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f6e:	6839      	ldr	r1, [r7, #0]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f001 fca8 	bl	800b8c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f76:	2303      	movs	r3, #3
 8009f78:	75fb      	strb	r3, [r7, #23]
          break;
 8009f7a:	e016      	b.n	8009faa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	2b03      	cmp	r3, #3
 8009f86:	d00f      	beq.n	8009fa8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009f88:	6839      	ldr	r1, [r7, #0]
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 fc9b 	bl	800b8c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f90:	2303      	movs	r3, #3
 8009f92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f94:	e008      	b.n	8009fa8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f96:	6839      	ldr	r1, [r7, #0]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f001 fc94 	bl	800b8c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	75fb      	strb	r3, [r7, #23]
          break;
 8009fa2:	e002      	b.n	8009faa <USBD_CDC_Setup+0x19e>
          break;
 8009fa4:	bf00      	nop
 8009fa6:	e008      	b.n	8009fba <USBD_CDC_Setup+0x1ae>
          break;
 8009fa8:	bf00      	nop
      }
      break;
 8009faa:	e006      	b.n	8009fba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009fac:	6839      	ldr	r1, [r7, #0]
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f001 fc89 	bl	800b8c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8009fb8:	bf00      	nop
  }

  return (uint8_t)ret;
 8009fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3718      	adds	r7, #24
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	32b0      	adds	r2, #176	; 0xb0
 8009fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009fea:	2303      	movs	r3, #3
 8009fec:	e065      	b.n	800a0ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	32b0      	adds	r2, #176	; 0xb0
 8009ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ffc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009ffe:	78fb      	ldrb	r3, [r7, #3]
 800a000:	f003 020f 	and.w	r2, r3, #15
 800a004:	6879      	ldr	r1, [r7, #4]
 800a006:	4613      	mov	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	440b      	add	r3, r1
 800a010:	3318      	adds	r3, #24
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d02f      	beq.n	800a078 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a018:	78fb      	ldrb	r3, [r7, #3]
 800a01a:	f003 020f 	and.w	r2, r3, #15
 800a01e:	6879      	ldr	r1, [r7, #4]
 800a020:	4613      	mov	r3, r2
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	4413      	add	r3, r2
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	440b      	add	r3, r1
 800a02a:	3318      	adds	r3, #24
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	78fb      	ldrb	r3, [r7, #3]
 800a030:	f003 010f 	and.w	r1, r3, #15
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	460b      	mov	r3, r1
 800a038:	00db      	lsls	r3, r3, #3
 800a03a:	440b      	add	r3, r1
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4403      	add	r3, r0
 800a040:	3348      	adds	r3, #72	; 0x48
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	fbb2 f1f3 	udiv	r1, r2, r3
 800a048:	fb01 f303 	mul.w	r3, r1, r3
 800a04c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d112      	bne.n	800a078 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a052:	78fb      	ldrb	r3, [r7, #3]
 800a054:	f003 020f 	and.w	r2, r3, #15
 800a058:	6879      	ldr	r1, [r7, #4]
 800a05a:	4613      	mov	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	440b      	add	r3, r1
 800a064:	3318      	adds	r3, #24
 800a066:	2200      	movs	r2, #0
 800a068:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a06a:	78f9      	ldrb	r1, [r7, #3]
 800a06c:	2300      	movs	r3, #0
 800a06e:	2200      	movs	r2, #0
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f002 f990 	bl	800c396 <USBD_LL_Transmit>
 800a076:	e01f      	b.n	800a0b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	33b0      	adds	r3, #176	; 0xb0
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d010      	beq.n	800a0b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	33b0      	adds	r3, #176	; 0xb0
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a0ae:	68ba      	ldr	r2, [r7, #8]
 800a0b0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a0b4:	78fa      	ldrb	r2, [r7, #3]
 800a0b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	32b0      	adds	r2, #176	; 0xb0
 800a0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	32b0      	adds	r2, #176	; 0xb0
 800a0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d101      	bne.n	800a0f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e01a      	b.n	800a12a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a0f4:	78fb      	ldrb	r3, [r7, #3]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f002 f98e 	bl	800c41a <USBD_LL_GetRxDataSize>
 800a0fe:	4602      	mov	r2, r0
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	33b0      	adds	r3, #176	; 0xb0
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	4413      	add	r3, r2
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a124:	4611      	mov	r1, r2
 800a126:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b084      	sub	sp, #16
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	32b0      	adds	r2, #176	; 0xb0
 800a144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a148:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d101      	bne.n	800a154 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a150:	2303      	movs	r3, #3
 800a152:	e025      	b.n	800a1a0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	33b0      	adds	r3, #176	; 0xb0
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	4413      	add	r3, r2
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d01a      	beq.n	800a19e <USBD_CDC_EP0_RxReady+0x6c>
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a16e:	2bff      	cmp	r3, #255	; 0xff
 800a170:	d015      	beq.n	800a19e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	33b0      	adds	r3, #176	; 0xb0
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	4413      	add	r3, r2
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a18a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a192:	b292      	uxth	r2, r2
 800a194:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	22ff      	movs	r2, #255	; 0xff
 800a19a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a1b0:	2182      	movs	r1, #130	; 0x82
 800a1b2:	4818      	ldr	r0, [pc, #96]	; (800a214 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a1b4:	f000 fd4f 	bl	800ac56 <USBD_GetEpDesc>
 800a1b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a1ba:	2101      	movs	r1, #1
 800a1bc:	4815      	ldr	r0, [pc, #84]	; (800a214 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a1be:	f000 fd4a 	bl	800ac56 <USBD_GetEpDesc>
 800a1c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a1c4:	2181      	movs	r1, #129	; 0x81
 800a1c6:	4813      	ldr	r0, [pc, #76]	; (800a214 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a1c8:	f000 fd45 	bl	800ac56 <USBD_GetEpDesc>
 800a1cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d002      	beq.n	800a1da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	2210      	movs	r2, #16
 800a1d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d006      	beq.n	800a1ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1e8:	711a      	strb	r2, [r3, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d006      	beq.n	800a202 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1fc:	711a      	strb	r2, [r3, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2243      	movs	r2, #67	; 0x43
 800a206:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a208:	4b02      	ldr	r3, [pc, #8]	; (800a214 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	20000078 	.word	0x20000078

0800a218 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a220:	2182      	movs	r1, #130	; 0x82
 800a222:	4818      	ldr	r0, [pc, #96]	; (800a284 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a224:	f000 fd17 	bl	800ac56 <USBD_GetEpDesc>
 800a228:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a22a:	2101      	movs	r1, #1
 800a22c:	4815      	ldr	r0, [pc, #84]	; (800a284 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a22e:	f000 fd12 	bl	800ac56 <USBD_GetEpDesc>
 800a232:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a234:	2181      	movs	r1, #129	; 0x81
 800a236:	4813      	ldr	r0, [pc, #76]	; (800a284 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a238:	f000 fd0d 	bl	800ac56 <USBD_GetEpDesc>
 800a23c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d002      	beq.n	800a24a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	2210      	movs	r2, #16
 800a248:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d006      	beq.n	800a25e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	2200      	movs	r2, #0
 800a254:	711a      	strb	r2, [r3, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	f042 0202 	orr.w	r2, r2, #2
 800a25c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d006      	beq.n	800a272 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	711a      	strb	r2, [r3, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f042 0202 	orr.w	r2, r2, #2
 800a270:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2243      	movs	r2, #67	; 0x43
 800a276:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a278:	4b02      	ldr	r3, [pc, #8]	; (800a284 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3718      	adds	r7, #24
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	20000078 	.word	0x20000078

0800a288 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a290:	2182      	movs	r1, #130	; 0x82
 800a292:	4818      	ldr	r0, [pc, #96]	; (800a2f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a294:	f000 fcdf 	bl	800ac56 <USBD_GetEpDesc>
 800a298:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a29a:	2101      	movs	r1, #1
 800a29c:	4815      	ldr	r0, [pc, #84]	; (800a2f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a29e:	f000 fcda 	bl	800ac56 <USBD_GetEpDesc>
 800a2a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a2a4:	2181      	movs	r1, #129	; 0x81
 800a2a6:	4813      	ldr	r0, [pc, #76]	; (800a2f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2a8:	f000 fcd5 	bl	800ac56 <USBD_GetEpDesc>
 800a2ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d002      	beq.n	800a2ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	2210      	movs	r2, #16
 800a2b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d006      	beq.n	800a2ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2c8:	711a      	strb	r2, [r3, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d006      	beq.n	800a2e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2dc:	711a      	strb	r2, [r3, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2243      	movs	r2, #67	; 0x43
 800a2e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2e8:	4b02      	ldr	r3, [pc, #8]	; (800a2f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3718      	adds	r7, #24
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	20000078 	.word	0x20000078

0800a2f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	220a      	movs	r2, #10
 800a304:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a306:	4b03      	ldr	r3, [pc, #12]	; (800a314 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a308:	4618      	mov	r0, r3
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr
 800a314:	20000034 	.word	0x20000034

0800a318 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a328:	2303      	movs	r3, #3
 800a32a:	e009      	b.n	800a340 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	33b0      	adds	r3, #176	; 0xb0
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	4413      	add	r3, r2
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b087      	sub	sp, #28
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	32b0      	adds	r2, #176	; 0xb0
 800a362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a366:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d101      	bne.n	800a372 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a36e:	2303      	movs	r3, #3
 800a370:	e008      	b.n	800a384 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	371c      	adds	r7, #28
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	32b0      	adds	r2, #176	; 0xb0
 800a3a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d101      	bne.n	800a3b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	e004      	b.n	800a3be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
	...

0800a3cc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	32b0      	adds	r2, #176	; 0xb0
 800a3de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	32b0      	adds	r2, #176	; 0xb0
 800a3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d101      	bne.n	800a3fe <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e025      	b.n	800a44a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a404:	2b00      	cmp	r3, #0
 800a406:	d11f      	bne.n	800a448 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a410:	4b10      	ldr	r3, [pc, #64]	; (800a454 <USBD_CDC_TransmitPacket+0x88>)
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	f003 020f 	and.w	r2, r3, #15
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	4613      	mov	r3, r2
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4413      	add	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4403      	add	r3, r0
 800a42a:	3318      	adds	r3, #24
 800a42c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a42e:	4b09      	ldr	r3, [pc, #36]	; (800a454 <USBD_CDC_TransmitPacket+0x88>)
 800a430:	7819      	ldrb	r1, [r3, #0]
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f001 ffa9 	bl	800c396 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a444:	2300      	movs	r3, #0
 800a446:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a448:	7bfb      	ldrb	r3, [r7, #15]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	200000bb 	.word	0x200000bb

0800a458 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	32b0      	adds	r2, #176	; 0xb0
 800a46a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a46e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	32b0      	adds	r2, #176	; 0xb0
 800a47a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a482:	2303      	movs	r3, #3
 800a484:	e018      	b.n	800a4b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	7c1b      	ldrb	r3, [r3, #16]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10a      	bne.n	800a4a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a48e:	4b0c      	ldr	r3, [pc, #48]	; (800a4c0 <USBD_CDC_ReceivePacket+0x68>)
 800a490:	7819      	ldrb	r1, [r3, #0]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f001 ff9b 	bl	800c3d8 <USBD_LL_PrepareReceive>
 800a4a2:	e008      	b.n	800a4b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4a4:	4b06      	ldr	r3, [pc, #24]	; (800a4c0 <USBD_CDC_ReceivePacket+0x68>)
 800a4a6:	7819      	ldrb	r1, [r3, #0]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4ae:	2340      	movs	r3, #64	; 0x40
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f001 ff91 	bl	800c3d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	200000bc 	.word	0x200000bc

0800a4c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b086      	sub	sp, #24
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d101      	bne.n	800a4dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e01f      	b.n	800a51c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d003      	beq.n	800a502 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2201      	movs	r2, #1
 800a506:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	79fa      	ldrb	r2, [r7, #7]
 800a50e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f001 fe0b 	bl	800c12c <USBD_LL_Init>
 800a516:	4603      	mov	r3, r0
 800a518:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a51a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3718      	adds	r7, #24
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a52e:	2300      	movs	r3, #0
 800a530:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d101      	bne.n	800a53c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a538:	2303      	movs	r3, #3
 800a53a:	e025      	b.n	800a588 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	32ae      	adds	r2, #174	; 0xae
 800a54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00f      	beq.n	800a578 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	32ae      	adds	r2, #174	; 0xae
 800a562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a568:	f107 020e 	add.w	r2, r7, #14
 800a56c:	4610      	mov	r0, r2
 800a56e:	4798      	blx	r3
 800a570:	4602      	mov	r2, r0
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a57e:	1c5a      	adds	r2, r3, #1
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f001 fe13 	bl	800c1c4 <USBD_LL_Start>
 800a59e:	4603      	mov	r3, r0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr

0800a5be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b084      	sub	sp, #16
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d009      	beq.n	800a5ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	78fa      	ldrb	r2, [r7, #3]
 800a5e2:	4611      	mov	r1, r2
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	4798      	blx	r3
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b084      	sub	sp, #16
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
 800a5fe:	460b      	mov	r3, r1
 800a600:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a602:	2300      	movs	r3, #0
 800a604:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	78fa      	ldrb	r2, [r7, #3]
 800a610:	4611      	mov	r1, r2
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	4798      	blx	r3
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a61c:	2303      	movs	r3, #3
 800a61e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a620:	7bfb      	ldrb	r3, [r7, #15]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b084      	sub	sp, #16
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
 800a632:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a63a:	6839      	ldr	r1, [r7, #0]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f001 f908 	bl	800b852 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a650:	461a      	mov	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a65e:	f003 031f 	and.w	r3, r3, #31
 800a662:	2b02      	cmp	r3, #2
 800a664:	d01a      	beq.n	800a69c <USBD_LL_SetupStage+0x72>
 800a666:	2b02      	cmp	r3, #2
 800a668:	d822      	bhi.n	800a6b0 <USBD_LL_SetupStage+0x86>
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d002      	beq.n	800a674 <USBD_LL_SetupStage+0x4a>
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d00a      	beq.n	800a688 <USBD_LL_SetupStage+0x5e>
 800a672:	e01d      	b.n	800a6b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a67a:	4619      	mov	r1, r3
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fb5f 	bl	800ad40 <USBD_StdDevReq>
 800a682:	4603      	mov	r3, r0
 800a684:	73fb      	strb	r3, [r7, #15]
      break;
 800a686:	e020      	b.n	800a6ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a68e:	4619      	mov	r1, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fbc7 	bl	800ae24 <USBD_StdItfReq>
 800a696:	4603      	mov	r3, r0
 800a698:	73fb      	strb	r3, [r7, #15]
      break;
 800a69a:	e016      	b.n	800a6ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fc29 	bl	800aefc <USBD_StdEPReq>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	73fb      	strb	r3, [r7, #15]
      break;
 800a6ae:	e00c      	b.n	800a6ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	4619      	mov	r1, r3
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f001 fde0 	bl	800c284 <USBD_LL_StallEP>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c8:	bf00      	nop
  }

  return ret;
 800a6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	460b      	mov	r3, r1
 800a6de:	607a      	str	r2, [r7, #4]
 800a6e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a6e6:	7afb      	ldrb	r3, [r7, #11]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d16e      	bne.n	800a7ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a6f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a6fa:	2b03      	cmp	r3, #3
 800a6fc:	f040 8098 	bne.w	800a830 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	689a      	ldr	r2, [r3, #8]
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d913      	bls.n	800a734 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	689a      	ldr	r2, [r3, #8]
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	1ad2      	subs	r2, r2, r3
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	68da      	ldr	r2, [r3, #12]
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	4293      	cmp	r3, r2
 800a724:	bf28      	it	cs
 800a726:	4613      	movcs	r3, r2
 800a728:	461a      	mov	r2, r3
 800a72a:	6879      	ldr	r1, [r7, #4]
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f001 f984 	bl	800ba3a <USBD_CtlContinueRx>
 800a732:	e07d      	b.n	800a830 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a73a:	f003 031f 	and.w	r3, r3, #31
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d014      	beq.n	800a76c <USBD_LL_DataOutStage+0x98>
 800a742:	2b02      	cmp	r3, #2
 800a744:	d81d      	bhi.n	800a782 <USBD_LL_DataOutStage+0xae>
 800a746:	2b00      	cmp	r3, #0
 800a748:	d002      	beq.n	800a750 <USBD_LL_DataOutStage+0x7c>
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d003      	beq.n	800a756 <USBD_LL_DataOutStage+0x82>
 800a74e:	e018      	b.n	800a782 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a750:	2300      	movs	r3, #0
 800a752:	75bb      	strb	r3, [r7, #22]
            break;
 800a754:	e018      	b.n	800a788 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	4619      	mov	r1, r3
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f000 fa5e 	bl	800ac22 <USBD_CoreFindIF>
 800a766:	4603      	mov	r3, r0
 800a768:	75bb      	strb	r3, [r7, #22]
            break;
 800a76a:	e00d      	b.n	800a788 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a772:	b2db      	uxtb	r3, r3
 800a774:	4619      	mov	r1, r3
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f000 fa60 	bl	800ac3c <USBD_CoreFindEP>
 800a77c:	4603      	mov	r3, r0
 800a77e:	75bb      	strb	r3, [r7, #22]
            break;
 800a780:	e002      	b.n	800a788 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a782:	2300      	movs	r3, #0
 800a784:	75bb      	strb	r3, [r7, #22]
            break;
 800a786:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a788:	7dbb      	ldrb	r3, [r7, #22]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d119      	bne.n	800a7c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a794:	b2db      	uxtb	r3, r3
 800a796:	2b03      	cmp	r3, #3
 800a798:	d113      	bne.n	800a7c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a79a:	7dba      	ldrb	r2, [r7, #22]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	32ae      	adds	r2, #174	; 0xae
 800a7a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00b      	beq.n	800a7c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a7aa:	7dba      	ldrb	r2, [r7, #22]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a7b2:	7dba      	ldrb	r2, [r7, #22]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	32ae      	adds	r2, #174	; 0xae
 800a7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f001 f94a 	bl	800ba5c <USBD_CtlSendStatus>
 800a7c8:	e032      	b.n	800a830 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a7ca:	7afb      	ldrb	r3, [r7, #11]
 800a7cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f000 fa31 	bl	800ac3c <USBD_CoreFindEP>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7de:	7dbb      	ldrb	r3, [r7, #22]
 800a7e0:	2bff      	cmp	r3, #255	; 0xff
 800a7e2:	d025      	beq.n	800a830 <USBD_LL_DataOutStage+0x15c>
 800a7e4:	7dbb      	ldrb	r3, [r7, #22]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d122      	bne.n	800a830 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b03      	cmp	r3, #3
 800a7f4:	d117      	bne.n	800a826 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a7f6:	7dba      	ldrb	r2, [r7, #22]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	32ae      	adds	r2, #174	; 0xae
 800a7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a800:	699b      	ldr	r3, [r3, #24]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00f      	beq.n	800a826 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a806:	7dba      	ldrb	r2, [r7, #22]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a80e:	7dba      	ldrb	r2, [r7, #22]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	32ae      	adds	r2, #174	; 0xae
 800a814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a818:	699b      	ldr	r3, [r3, #24]
 800a81a:	7afa      	ldrb	r2, [r7, #11]
 800a81c:	4611      	mov	r1, r2
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	4798      	blx	r3
 800a822:	4603      	mov	r3, r0
 800a824:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a826:	7dfb      	ldrb	r3, [r7, #23]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a82c:	7dfb      	ldrb	r3, [r7, #23]
 800a82e:	e000      	b.n	800a832 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3718      	adds	r7, #24
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b086      	sub	sp, #24
 800a83e:	af00      	add	r7, sp, #0
 800a840:	60f8      	str	r0, [r7, #12]
 800a842:	460b      	mov	r3, r1
 800a844:	607a      	str	r2, [r7, #4]
 800a846:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a848:	7afb      	ldrb	r3, [r7, #11]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d16f      	bne.n	800a92e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	3314      	adds	r3, #20
 800a852:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d15a      	bne.n	800a914 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	689a      	ldr	r2, [r3, #8]
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	429a      	cmp	r2, r3
 800a868:	d914      	bls.n	800a894 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	689a      	ldr	r2, [r3, #8]
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	1ad2      	subs	r2, r2, r3
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	461a      	mov	r2, r3
 800a87e:	6879      	ldr	r1, [r7, #4]
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f001 f8ac 	bl	800b9de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a886:	2300      	movs	r3, #0
 800a888:	2200      	movs	r2, #0
 800a88a:	2100      	movs	r1, #0
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f001 fda3 	bl	800c3d8 <USBD_LL_PrepareReceive>
 800a892:	e03f      	b.n	800a914 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	68da      	ldr	r2, [r3, #12]
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d11c      	bne.n	800a8da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	685a      	ldr	r2, [r3, #4]
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d316      	bcc.n	800a8da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	685a      	ldr	r2, [r3, #4]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d20f      	bcs.n	800a8da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	2100      	movs	r1, #0
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f001 f88d 	bl	800b9de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f001 fd80 	bl	800c3d8 <USBD_LL_PrepareReceive>
 800a8d8:	e01c      	b.n	800a914 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b03      	cmp	r3, #3
 800a8e4:	d10f      	bne.n	800a906 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d009      	beq.n	800a906 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a906:	2180      	movs	r1, #128	; 0x80
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f001 fcbb 	bl	800c284 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f001 f8b7 	bl	800ba82 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d03a      	beq.n	800a994 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f7ff fe42 	bl	800a5a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a92c:	e032      	b.n	800a994 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a92e:	7afb      	ldrb	r3, [r7, #11]
 800a930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a934:	b2db      	uxtb	r3, r3
 800a936:	4619      	mov	r1, r3
 800a938:	68f8      	ldr	r0, [r7, #12]
 800a93a:	f000 f97f 	bl	800ac3c <USBD_CoreFindEP>
 800a93e:	4603      	mov	r3, r0
 800a940:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a942:	7dfb      	ldrb	r3, [r7, #23]
 800a944:	2bff      	cmp	r3, #255	; 0xff
 800a946:	d025      	beq.n	800a994 <USBD_LL_DataInStage+0x15a>
 800a948:	7dfb      	ldrb	r3, [r7, #23]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d122      	bne.n	800a994 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a954:	b2db      	uxtb	r3, r3
 800a956:	2b03      	cmp	r3, #3
 800a958:	d11c      	bne.n	800a994 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a95a:	7dfa      	ldrb	r2, [r7, #23]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	32ae      	adds	r2, #174	; 0xae
 800a960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a964:	695b      	ldr	r3, [r3, #20]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d014      	beq.n	800a994 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a96a:	7dfa      	ldrb	r2, [r7, #23]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a972:	7dfa      	ldrb	r2, [r7, #23]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	32ae      	adds	r2, #174	; 0xae
 800a978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	7afa      	ldrb	r2, [r7, #11]
 800a980:	4611      	mov	r1, r2
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	4798      	blx	r3
 800a986:	4603      	mov	r3, r0
 800a988:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a98a:	7dbb      	ldrb	r3, [r7, #22]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a990:	7dbb      	ldrb	r3, [r7, #22]
 800a992:	e000      	b.n	800a996 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3718      	adds	r7, #24
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b084      	sub	sp, #16
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d014      	beq.n	800aa04 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00e      	beq.n	800aa04 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	6852      	ldr	r2, [r2, #4]
 800a9f2:	b2d2      	uxtb	r2, r2
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	4798      	blx	r3
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d001      	beq.n	800aa04 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aa00:	2303      	movs	r3, #3
 800aa02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa04:	2340      	movs	r3, #64	; 0x40
 800aa06:	2200      	movs	r2, #0
 800aa08:	2100      	movs	r1, #0
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f001 fbf5 	bl	800c1fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2240      	movs	r2, #64	; 0x40
 800aa1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa20:	2340      	movs	r3, #64	; 0x40
 800aa22:	2200      	movs	r2, #0
 800aa24:	2180      	movs	r1, #128	; 0x80
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f001 fbe7 	bl	800c1fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2240      	movs	r2, #64	; 0x40
 800aa36:	621a      	str	r2, [r3, #32]

  return ret;
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b083      	sub	sp, #12
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	78fa      	ldrb	r2, [r7, #3]
 800aa52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	370c      	adds	r7, #12
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr

0800aa62 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa62:	b480      	push	{r7}
 800aa64:	b083      	sub	sp, #12
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa70:	b2da      	uxtb	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2204      	movs	r2, #4
 800aa7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa8e:	b480      	push	{r7}
 800aa90:	b083      	sub	sp, #12
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b04      	cmp	r3, #4
 800aaa0:	d106      	bne.n	800aab0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aaa8:	b2da      	uxtb	r2, r3
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr

0800aabe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b082      	sub	sp, #8
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b03      	cmp	r3, #3
 800aad0:	d110      	bne.n	800aaf4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00b      	beq.n	800aaf4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aae2:	69db      	ldr	r3, [r3, #28]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d005      	beq.n	800aaf4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaee:	69db      	ldr	r3, [r3, #28]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b082      	sub	sp, #8
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	460b      	mov	r3, r1
 800ab08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	32ae      	adds	r2, #174	; 0xae
 800ab14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d101      	bne.n	800ab20 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	e01c      	b.n	800ab5a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	2b03      	cmp	r3, #3
 800ab2a:	d115      	bne.n	800ab58 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	32ae      	adds	r2, #174	; 0xae
 800ab36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab3a:	6a1b      	ldr	r3, [r3, #32]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00b      	beq.n	800ab58 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	32ae      	adds	r2, #174	; 0xae
 800ab4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab4e:	6a1b      	ldr	r3, [r3, #32]
 800ab50:	78fa      	ldrb	r2, [r7, #3]
 800ab52:	4611      	mov	r1, r2
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b082      	sub	sp, #8
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	32ae      	adds	r2, #174	; 0xae
 800ab78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d101      	bne.n	800ab84 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab80:	2303      	movs	r3, #3
 800ab82:	e01c      	b.n	800abbe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b03      	cmp	r3, #3
 800ab8e:	d115      	bne.n	800abbc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	32ae      	adds	r2, #174	; 0xae
 800ab9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00b      	beq.n	800abbc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	32ae      	adds	r2, #174	; 0xae
 800abae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb4:	78fa      	ldrb	r2, [r7, #3]
 800abb6:	4611      	mov	r1, r2
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800abc6:	b480      	push	{r7}
 800abc8:	b083      	sub	sp, #12
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00e      	beq.n	800ac18 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	6852      	ldr	r2, [r2, #4]
 800ac06:	b2d2      	uxtb	r2, r2
 800ac08:	4611      	mov	r1, r2
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	4798      	blx	r3
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d001      	beq.n	800ac18 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ac14:	2303      	movs	r3, #3
 800ac16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b083      	sub	sp, #12
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac2e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	460b      	mov	r3, r1
 800ac46:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac48:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	370c      	adds	r7, #12
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b086      	sub	sp, #24
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	460b      	mov	r3, r1
 800ac60:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	885b      	ldrh	r3, [r3, #2]
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d920      	bls.n	800acc0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ac86:	e013      	b.n	800acb0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ac88:	f107 030a 	add.w	r3, r7, #10
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	6978      	ldr	r0, [r7, #20]
 800ac90:	f000 f81b 	bl	800acca <USBD_GetNextDesc>
 800ac94:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	785b      	ldrb	r3, [r3, #1]
 800ac9a:	2b05      	cmp	r3, #5
 800ac9c:	d108      	bne.n	800acb0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	789b      	ldrb	r3, [r3, #2]
 800aca6:	78fa      	ldrb	r2, [r7, #3]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d008      	beq.n	800acbe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800acac:	2300      	movs	r3, #0
 800acae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	885b      	ldrh	r3, [r3, #2]
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	897b      	ldrh	r3, [r7, #10]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d8e5      	bhi.n	800ac88 <USBD_GetEpDesc+0x32>
 800acbc:	e000      	b.n	800acc0 <USBD_GetEpDesc+0x6a>
          break;
 800acbe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800acc0:	693b      	ldr	r3, [r7, #16]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3718      	adds	r7, #24
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800acca:	b480      	push	{r7}
 800accc:	b085      	sub	sp, #20
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
 800acd2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	881a      	ldrh	r2, [r3, #0]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	4413      	add	r3, r2
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	461a      	mov	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4413      	add	r3, r2
 800acf4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800acf6:	68fb      	ldr	r3, [r7, #12]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3714      	adds	r7, #20
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b087      	sub	sp, #28
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad22:	8a3b      	ldrh	r3, [r7, #16]
 800ad24:	021b      	lsls	r3, r3, #8
 800ad26:	b21a      	sxth	r2, r3
 800ad28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	b21b      	sxth	r3, r3
 800ad30:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad32:	89fb      	ldrh	r3, [r7, #14]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	371c      	adds	r7, #28
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad56:	2b40      	cmp	r3, #64	; 0x40
 800ad58:	d005      	beq.n	800ad66 <USBD_StdDevReq+0x26>
 800ad5a:	2b40      	cmp	r3, #64	; 0x40
 800ad5c:	d857      	bhi.n	800ae0e <USBD_StdDevReq+0xce>
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00f      	beq.n	800ad82 <USBD_StdDevReq+0x42>
 800ad62:	2b20      	cmp	r3, #32
 800ad64:	d153      	bne.n	800ae0e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	32ae      	adds	r2, #174	; 0xae
 800ad70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	4798      	blx	r3
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad80:	e04a      	b.n	800ae18 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	785b      	ldrb	r3, [r3, #1]
 800ad86:	2b09      	cmp	r3, #9
 800ad88:	d83b      	bhi.n	800ae02 <USBD_StdDevReq+0xc2>
 800ad8a:	a201      	add	r2, pc, #4	; (adr r2, 800ad90 <USBD_StdDevReq+0x50>)
 800ad8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad90:	0800ade5 	.word	0x0800ade5
 800ad94:	0800adf9 	.word	0x0800adf9
 800ad98:	0800ae03 	.word	0x0800ae03
 800ad9c:	0800adef 	.word	0x0800adef
 800ada0:	0800ae03 	.word	0x0800ae03
 800ada4:	0800adc3 	.word	0x0800adc3
 800ada8:	0800adb9 	.word	0x0800adb9
 800adac:	0800ae03 	.word	0x0800ae03
 800adb0:	0800addb 	.word	0x0800addb
 800adb4:	0800adcd 	.word	0x0800adcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fa3c 	bl	800b238 <USBD_GetDescriptor>
          break;
 800adc0:	e024      	b.n	800ae0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fba1 	bl	800b50c <USBD_SetAddress>
          break;
 800adca:	e01f      	b.n	800ae0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800adcc:	6839      	ldr	r1, [r7, #0]
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 fbe0 	bl	800b594 <USBD_SetConfig>
 800add4:	4603      	mov	r3, r0
 800add6:	73fb      	strb	r3, [r7, #15]
          break;
 800add8:	e018      	b.n	800ae0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800adda:	6839      	ldr	r1, [r7, #0]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fc83 	bl	800b6e8 <USBD_GetConfig>
          break;
 800ade2:	e013      	b.n	800ae0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fcb4 	bl	800b754 <USBD_GetStatus>
          break;
 800adec:	e00e      	b.n	800ae0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fce3 	bl	800b7bc <USBD_SetFeature>
          break;
 800adf6:	e009      	b.n	800ae0c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800adf8:	6839      	ldr	r1, [r7, #0]
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fd07 	bl	800b80e <USBD_ClrFeature>
          break;
 800ae00:	e004      	b.n	800ae0c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fd5e 	bl	800b8c6 <USBD_CtlError>
          break;
 800ae0a:	bf00      	nop
      }
      break;
 800ae0c:	e004      	b.n	800ae18 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ae0e:	6839      	ldr	r1, [r7, #0]
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fd58 	bl	800b8c6 <USBD_CtlError>
      break;
 800ae16:	bf00      	nop
  }

  return ret;
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop

0800ae24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae3a:	2b40      	cmp	r3, #64	; 0x40
 800ae3c:	d005      	beq.n	800ae4a <USBD_StdItfReq+0x26>
 800ae3e:	2b40      	cmp	r3, #64	; 0x40
 800ae40:	d852      	bhi.n	800aee8 <USBD_StdItfReq+0xc4>
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <USBD_StdItfReq+0x26>
 800ae46:	2b20      	cmp	r3, #32
 800ae48:	d14e      	bne.n	800aee8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	3b01      	subs	r3, #1
 800ae54:	2b02      	cmp	r3, #2
 800ae56:	d840      	bhi.n	800aeda <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	889b      	ldrh	r3, [r3, #4]
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d836      	bhi.n	800aed0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	889b      	ldrh	r3, [r3, #4]
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	4619      	mov	r1, r3
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f7ff fed9 	bl	800ac22 <USBD_CoreFindIF>
 800ae70:	4603      	mov	r3, r0
 800ae72:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae74:	7bbb      	ldrb	r3, [r7, #14]
 800ae76:	2bff      	cmp	r3, #255	; 0xff
 800ae78:	d01d      	beq.n	800aeb6 <USBD_StdItfReq+0x92>
 800ae7a:	7bbb      	ldrb	r3, [r7, #14]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d11a      	bne.n	800aeb6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ae80:	7bba      	ldrb	r2, [r7, #14]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	32ae      	adds	r2, #174	; 0xae
 800ae86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00f      	beq.n	800aeb0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae90:	7bba      	ldrb	r2, [r7, #14]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae98:	7bba      	ldrb	r2, [r7, #14]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	32ae      	adds	r2, #174	; 0xae
 800ae9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	4798      	blx	r3
 800aeaa:	4603      	mov	r3, r0
 800aeac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aeae:	e004      	b.n	800aeba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aeb4:	e001      	b.n	800aeba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	88db      	ldrh	r3, [r3, #6]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d110      	bne.n	800aee4 <USBD_StdItfReq+0xc0>
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10d      	bne.n	800aee4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fdc7 	bl	800ba5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aece:	e009      	b.n	800aee4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aed0:	6839      	ldr	r1, [r7, #0]
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 fcf7 	bl	800b8c6 <USBD_CtlError>
          break;
 800aed8:	e004      	b.n	800aee4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aeda:	6839      	ldr	r1, [r7, #0]
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fcf2 	bl	800b8c6 <USBD_CtlError>
          break;
 800aee2:	e000      	b.n	800aee6 <USBD_StdItfReq+0xc2>
          break;
 800aee4:	bf00      	nop
      }
      break;
 800aee6:	e004      	b.n	800aef2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aee8:	6839      	ldr	r1, [r7, #0]
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 fceb 	bl	800b8c6 <USBD_CtlError>
      break;
 800aef0:	bf00      	nop
  }

  return ret;
 800aef2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800af06:	2300      	movs	r3, #0
 800af08:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	889b      	ldrh	r3, [r3, #4]
 800af0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af18:	2b40      	cmp	r3, #64	; 0x40
 800af1a:	d007      	beq.n	800af2c <USBD_StdEPReq+0x30>
 800af1c:	2b40      	cmp	r3, #64	; 0x40
 800af1e:	f200 817f 	bhi.w	800b220 <USBD_StdEPReq+0x324>
 800af22:	2b00      	cmp	r3, #0
 800af24:	d02a      	beq.n	800af7c <USBD_StdEPReq+0x80>
 800af26:	2b20      	cmp	r3, #32
 800af28:	f040 817a 	bne.w	800b220 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800af2c:	7bbb      	ldrb	r3, [r7, #14]
 800af2e:	4619      	mov	r1, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7ff fe83 	bl	800ac3c <USBD_CoreFindEP>
 800af36:	4603      	mov	r3, r0
 800af38:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af3a:	7b7b      	ldrb	r3, [r7, #13]
 800af3c:	2bff      	cmp	r3, #255	; 0xff
 800af3e:	f000 8174 	beq.w	800b22a <USBD_StdEPReq+0x32e>
 800af42:	7b7b      	ldrb	r3, [r7, #13]
 800af44:	2b00      	cmp	r3, #0
 800af46:	f040 8170 	bne.w	800b22a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800af4a:	7b7a      	ldrb	r2, [r7, #13]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af52:	7b7a      	ldrb	r2, [r7, #13]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	32ae      	adds	r2, #174	; 0xae
 800af58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f000 8163 	beq.w	800b22a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800af64:	7b7a      	ldrb	r2, [r7, #13]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	32ae      	adds	r2, #174	; 0xae
 800af6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	6839      	ldr	r1, [r7, #0]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	4798      	blx	r3
 800af76:	4603      	mov	r3, r0
 800af78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af7a:	e156      	b.n	800b22a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	785b      	ldrb	r3, [r3, #1]
 800af80:	2b03      	cmp	r3, #3
 800af82:	d008      	beq.n	800af96 <USBD_StdEPReq+0x9a>
 800af84:	2b03      	cmp	r3, #3
 800af86:	f300 8145 	bgt.w	800b214 <USBD_StdEPReq+0x318>
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f000 809b 	beq.w	800b0c6 <USBD_StdEPReq+0x1ca>
 800af90:	2b01      	cmp	r3, #1
 800af92:	d03c      	beq.n	800b00e <USBD_StdEPReq+0x112>
 800af94:	e13e      	b.n	800b214 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d002      	beq.n	800afa8 <USBD_StdEPReq+0xac>
 800afa2:	2b03      	cmp	r3, #3
 800afa4:	d016      	beq.n	800afd4 <USBD_StdEPReq+0xd8>
 800afa6:	e02c      	b.n	800b002 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afa8:	7bbb      	ldrb	r3, [r7, #14]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00d      	beq.n	800afca <USBD_StdEPReq+0xce>
 800afae:	7bbb      	ldrb	r3, [r7, #14]
 800afb0:	2b80      	cmp	r3, #128	; 0x80
 800afb2:	d00a      	beq.n	800afca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800afb4:	7bbb      	ldrb	r3, [r7, #14]
 800afb6:	4619      	mov	r1, r3
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f001 f963 	bl	800c284 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800afbe:	2180      	movs	r1, #128	; 0x80
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f001 f95f 	bl	800c284 <USBD_LL_StallEP>
 800afc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800afc8:	e020      	b.n	800b00c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 fc7a 	bl	800b8c6 <USBD_CtlError>
              break;
 800afd2:	e01b      	b.n	800b00c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	885b      	ldrh	r3, [r3, #2]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10e      	bne.n	800affa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800afdc:	7bbb      	ldrb	r3, [r7, #14]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00b      	beq.n	800affa <USBD_StdEPReq+0xfe>
 800afe2:	7bbb      	ldrb	r3, [r7, #14]
 800afe4:	2b80      	cmp	r3, #128	; 0x80
 800afe6:	d008      	beq.n	800affa <USBD_StdEPReq+0xfe>
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	88db      	ldrh	r3, [r3, #6]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d104      	bne.n	800affa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
 800aff2:	4619      	mov	r1, r3
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f001 f945 	bl	800c284 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 fd2e 	bl	800ba5c <USBD_CtlSendStatus>

              break;
 800b000:	e004      	b.n	800b00c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b002:	6839      	ldr	r1, [r7, #0]
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 fc5e 	bl	800b8c6 <USBD_CtlError>
              break;
 800b00a:	bf00      	nop
          }
          break;
 800b00c:	e107      	b.n	800b21e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b02      	cmp	r3, #2
 800b018:	d002      	beq.n	800b020 <USBD_StdEPReq+0x124>
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d016      	beq.n	800b04c <USBD_StdEPReq+0x150>
 800b01e:	e04b      	b.n	800b0b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b020:	7bbb      	ldrb	r3, [r7, #14]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00d      	beq.n	800b042 <USBD_StdEPReq+0x146>
 800b026:	7bbb      	ldrb	r3, [r7, #14]
 800b028:	2b80      	cmp	r3, #128	; 0x80
 800b02a:	d00a      	beq.n	800b042 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b02c:	7bbb      	ldrb	r3, [r7, #14]
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f001 f927 	bl	800c284 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b036:	2180      	movs	r1, #128	; 0x80
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f001 f923 	bl	800c284 <USBD_LL_StallEP>
 800b03e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b040:	e040      	b.n	800b0c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 fc3e 	bl	800b8c6 <USBD_CtlError>
              break;
 800b04a:	e03b      	b.n	800b0c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	885b      	ldrh	r3, [r3, #2]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d136      	bne.n	800b0c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b054:	7bbb      	ldrb	r3, [r7, #14]
 800b056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d004      	beq.n	800b068 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b05e:	7bbb      	ldrb	r3, [r7, #14]
 800b060:	4619      	mov	r1, r3
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f001 f92d 	bl	800c2c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 fcf7 	bl	800ba5c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b06e:	7bbb      	ldrb	r3, [r7, #14]
 800b070:	4619      	mov	r1, r3
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7ff fde2 	bl	800ac3c <USBD_CoreFindEP>
 800b078:	4603      	mov	r3, r0
 800b07a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b07c:	7b7b      	ldrb	r3, [r7, #13]
 800b07e:	2bff      	cmp	r3, #255	; 0xff
 800b080:	d01f      	beq.n	800b0c2 <USBD_StdEPReq+0x1c6>
 800b082:	7b7b      	ldrb	r3, [r7, #13]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d11c      	bne.n	800b0c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b088:	7b7a      	ldrb	r2, [r7, #13]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b090:	7b7a      	ldrb	r2, [r7, #13]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	32ae      	adds	r2, #174	; 0xae
 800b096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d010      	beq.n	800b0c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b0a0:	7b7a      	ldrb	r2, [r7, #13]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	32ae      	adds	r2, #174	; 0xae
 800b0a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	6839      	ldr	r1, [r7, #0]
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	4798      	blx	r3
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b0b6:	e004      	b.n	800b0c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b0b8:	6839      	ldr	r1, [r7, #0]
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fc03 	bl	800b8c6 <USBD_CtlError>
              break;
 800b0c0:	e000      	b.n	800b0c4 <USBD_StdEPReq+0x1c8>
              break;
 800b0c2:	bf00      	nop
          }
          break;
 800b0c4:	e0ab      	b.n	800b21e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	d002      	beq.n	800b0d8 <USBD_StdEPReq+0x1dc>
 800b0d2:	2b03      	cmp	r3, #3
 800b0d4:	d032      	beq.n	800b13c <USBD_StdEPReq+0x240>
 800b0d6:	e097      	b.n	800b208 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0d8:	7bbb      	ldrb	r3, [r7, #14]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d007      	beq.n	800b0ee <USBD_StdEPReq+0x1f2>
 800b0de:	7bbb      	ldrb	r3, [r7, #14]
 800b0e0:	2b80      	cmp	r3, #128	; 0x80
 800b0e2:	d004      	beq.n	800b0ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b0e4:	6839      	ldr	r1, [r7, #0]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fbed 	bl	800b8c6 <USBD_CtlError>
                break;
 800b0ec:	e091      	b.n	800b212 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	da0b      	bge.n	800b10e <USBD_StdEPReq+0x212>
 800b0f6:	7bbb      	ldrb	r3, [r7, #14]
 800b0f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4413      	add	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	3310      	adds	r3, #16
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	4413      	add	r3, r2
 800b10a:	3304      	adds	r3, #4
 800b10c:	e00b      	b.n	800b126 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b10e:	7bbb      	ldrb	r3, [r7, #14]
 800b110:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b114:	4613      	mov	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4413      	add	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	4413      	add	r3, r2
 800b124:	3304      	adds	r3, #4
 800b126:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	2200      	movs	r2, #0
 800b12c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	2202      	movs	r2, #2
 800b132:	4619      	mov	r1, r3
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 fc37 	bl	800b9a8 <USBD_CtlSendData>
              break;
 800b13a:	e06a      	b.n	800b212 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b13c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b140:	2b00      	cmp	r3, #0
 800b142:	da11      	bge.n	800b168 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b144:	7bbb      	ldrb	r3, [r7, #14]
 800b146:	f003 020f 	and.w	r2, r3, #15
 800b14a:	6879      	ldr	r1, [r7, #4]
 800b14c:	4613      	mov	r3, r2
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	4413      	add	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	440b      	add	r3, r1
 800b156:	3324      	adds	r3, #36	; 0x24
 800b158:	881b      	ldrh	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d117      	bne.n	800b18e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b15e:	6839      	ldr	r1, [r7, #0]
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fbb0 	bl	800b8c6 <USBD_CtlError>
                  break;
 800b166:	e054      	b.n	800b212 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b168:	7bbb      	ldrb	r3, [r7, #14]
 800b16a:	f003 020f 	and.w	r2, r3, #15
 800b16e:	6879      	ldr	r1, [r7, #4]
 800b170:	4613      	mov	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4413      	add	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	440b      	add	r3, r1
 800b17a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b17e:	881b      	ldrh	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d104      	bne.n	800b18e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fb9d 	bl	800b8c6 <USBD_CtlError>
                  break;
 800b18c:	e041      	b.n	800b212 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b18e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b192:	2b00      	cmp	r3, #0
 800b194:	da0b      	bge.n	800b1ae <USBD_StdEPReq+0x2b2>
 800b196:	7bbb      	ldrb	r3, [r7, #14]
 800b198:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b19c:	4613      	mov	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4413      	add	r3, r2
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	3310      	adds	r3, #16
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	e00b      	b.n	800b1c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1ae:	7bbb      	ldrb	r3, [r7, #14]
 800b1b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	4413      	add	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	3304      	adds	r3, #4
 800b1c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b1c8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d002      	beq.n	800b1d4 <USBD_StdEPReq+0x2d8>
 800b1ce:	7bbb      	ldrb	r3, [r7, #14]
 800b1d0:	2b80      	cmp	r3, #128	; 0x80
 800b1d2:	d103      	bne.n	800b1dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	601a      	str	r2, [r3, #0]
 800b1da:	e00e      	b.n	800b1fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b1dc:	7bbb      	ldrb	r3, [r7, #14]
 800b1de:	4619      	mov	r1, r3
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f001 f88d 	bl	800c300 <USBD_LL_IsStallEP>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d003      	beq.n	800b1f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	601a      	str	r2, [r3, #0]
 800b1f2:	e002      	b.n	800b1fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	2202      	movs	r2, #2
 800b1fe:	4619      	mov	r1, r3
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 fbd1 	bl	800b9a8 <USBD_CtlSendData>
              break;
 800b206:	e004      	b.n	800b212 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b208:	6839      	ldr	r1, [r7, #0]
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fb5b 	bl	800b8c6 <USBD_CtlError>
              break;
 800b210:	bf00      	nop
          }
          break;
 800b212:	e004      	b.n	800b21e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b214:	6839      	ldr	r1, [r7, #0]
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 fb55 	bl	800b8c6 <USBD_CtlError>
          break;
 800b21c:	bf00      	nop
      }
      break;
 800b21e:	e005      	b.n	800b22c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 fb4f 	bl	800b8c6 <USBD_CtlError>
      break;
 800b228:	e000      	b.n	800b22c <USBD_StdEPReq+0x330>
      break;
 800b22a:	bf00      	nop
  }

  return ret;
 800b22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3710      	adds	r7, #16
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
	...

0800b238 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b242:	2300      	movs	r3, #0
 800b244:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b246:	2300      	movs	r3, #0
 800b248:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b24a:	2300      	movs	r3, #0
 800b24c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	885b      	ldrh	r3, [r3, #2]
 800b252:	0a1b      	lsrs	r3, r3, #8
 800b254:	b29b      	uxth	r3, r3
 800b256:	3b01      	subs	r3, #1
 800b258:	2b06      	cmp	r3, #6
 800b25a:	f200 8128 	bhi.w	800b4ae <USBD_GetDescriptor+0x276>
 800b25e:	a201      	add	r2, pc, #4	; (adr r2, 800b264 <USBD_GetDescriptor+0x2c>)
 800b260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b264:	0800b281 	.word	0x0800b281
 800b268:	0800b299 	.word	0x0800b299
 800b26c:	0800b2d9 	.word	0x0800b2d9
 800b270:	0800b4af 	.word	0x0800b4af
 800b274:	0800b4af 	.word	0x0800b4af
 800b278:	0800b44f 	.word	0x0800b44f
 800b27c:	0800b47b 	.word	0x0800b47b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	7c12      	ldrb	r2, [r2, #16]
 800b28c:	f107 0108 	add.w	r1, r7, #8
 800b290:	4610      	mov	r0, r2
 800b292:	4798      	blx	r3
 800b294:	60f8      	str	r0, [r7, #12]
      break;
 800b296:	e112      	b.n	800b4be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	7c1b      	ldrb	r3, [r3, #16]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d10d      	bne.n	800b2bc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a8:	f107 0208 	add.w	r2, r7, #8
 800b2ac:	4610      	mov	r0, r2
 800b2ae:	4798      	blx	r3
 800b2b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b2ba:	e100      	b.n	800b4be <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c4:	f107 0208 	add.w	r2, r7, #8
 800b2c8:	4610      	mov	r0, r2
 800b2ca:	4798      	blx	r3
 800b2cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	2202      	movs	r2, #2
 800b2d4:	701a      	strb	r2, [r3, #0]
      break;
 800b2d6:	e0f2      	b.n	800b4be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	885b      	ldrh	r3, [r3, #2]
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b05      	cmp	r3, #5
 800b2e0:	f200 80ac 	bhi.w	800b43c <USBD_GetDescriptor+0x204>
 800b2e4:	a201      	add	r2, pc, #4	; (adr r2, 800b2ec <USBD_GetDescriptor+0xb4>)
 800b2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ea:	bf00      	nop
 800b2ec:	0800b305 	.word	0x0800b305
 800b2f0:	0800b339 	.word	0x0800b339
 800b2f4:	0800b36d 	.word	0x0800b36d
 800b2f8:	0800b3a1 	.word	0x0800b3a1
 800b2fc:	0800b3d5 	.word	0x0800b3d5
 800b300:	0800b409 	.word	0x0800b409
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d00b      	beq.n	800b328 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	7c12      	ldrb	r2, [r2, #16]
 800b31c:	f107 0108 	add.w	r1, r7, #8
 800b320:	4610      	mov	r0, r2
 800b322:	4798      	blx	r3
 800b324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b326:	e091      	b.n	800b44c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 facb 	bl	800b8c6 <USBD_CtlError>
            err++;
 800b330:	7afb      	ldrb	r3, [r7, #11]
 800b332:	3301      	adds	r3, #1
 800b334:	72fb      	strb	r3, [r7, #11]
          break;
 800b336:	e089      	b.n	800b44c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b33e:	689b      	ldr	r3, [r3, #8]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00b      	beq.n	800b35c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	7c12      	ldrb	r2, [r2, #16]
 800b350:	f107 0108 	add.w	r1, r7, #8
 800b354:	4610      	mov	r0, r2
 800b356:	4798      	blx	r3
 800b358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b35a:	e077      	b.n	800b44c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b35c:	6839      	ldr	r1, [r7, #0]
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fab1 	bl	800b8c6 <USBD_CtlError>
            err++;
 800b364:	7afb      	ldrb	r3, [r7, #11]
 800b366:	3301      	adds	r3, #1
 800b368:	72fb      	strb	r3, [r7, #11]
          break;
 800b36a:	e06f      	b.n	800b44c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00b      	beq.n	800b390 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	7c12      	ldrb	r2, [r2, #16]
 800b384:	f107 0108 	add.w	r1, r7, #8
 800b388:	4610      	mov	r0, r2
 800b38a:	4798      	blx	r3
 800b38c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b38e:	e05d      	b.n	800b44c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 fa97 	bl	800b8c6 <USBD_CtlError>
            err++;
 800b398:	7afb      	ldrb	r3, [r7, #11]
 800b39a:	3301      	adds	r3, #1
 800b39c:	72fb      	strb	r3, [r7, #11]
          break;
 800b39e:	e055      	b.n	800b44c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3a6:	691b      	ldr	r3, [r3, #16]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00b      	beq.n	800b3c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3b2:	691b      	ldr	r3, [r3, #16]
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	7c12      	ldrb	r2, [r2, #16]
 800b3b8:	f107 0108 	add.w	r1, r7, #8
 800b3bc:	4610      	mov	r0, r2
 800b3be:	4798      	blx	r3
 800b3c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3c2:	e043      	b.n	800b44c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 fa7d 	bl	800b8c6 <USBD_CtlError>
            err++;
 800b3cc:	7afb      	ldrb	r3, [r7, #11]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3d2:	e03b      	b.n	800b44c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d00b      	beq.n	800b3f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3e6:	695b      	ldr	r3, [r3, #20]
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	7c12      	ldrb	r2, [r2, #16]
 800b3ec:	f107 0108 	add.w	r1, r7, #8
 800b3f0:	4610      	mov	r0, r2
 800b3f2:	4798      	blx	r3
 800b3f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3f6:	e029      	b.n	800b44c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3f8:	6839      	ldr	r1, [r7, #0]
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 fa63 	bl	800b8c6 <USBD_CtlError>
            err++;
 800b400:	7afb      	ldrb	r3, [r7, #11]
 800b402:	3301      	adds	r3, #1
 800b404:	72fb      	strb	r3, [r7, #11]
          break;
 800b406:	e021      	b.n	800b44c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d00b      	beq.n	800b42c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b41a:	699b      	ldr	r3, [r3, #24]
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	7c12      	ldrb	r2, [r2, #16]
 800b420:	f107 0108 	add.w	r1, r7, #8
 800b424:	4610      	mov	r0, r2
 800b426:	4798      	blx	r3
 800b428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b42a:	e00f      	b.n	800b44c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b42c:	6839      	ldr	r1, [r7, #0]
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fa49 	bl	800b8c6 <USBD_CtlError>
            err++;
 800b434:	7afb      	ldrb	r3, [r7, #11]
 800b436:	3301      	adds	r3, #1
 800b438:	72fb      	strb	r3, [r7, #11]
          break;
 800b43a:	e007      	b.n	800b44c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b43c:	6839      	ldr	r1, [r7, #0]
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 fa41 	bl	800b8c6 <USBD_CtlError>
          err++;
 800b444:	7afb      	ldrb	r3, [r7, #11]
 800b446:	3301      	adds	r3, #1
 800b448:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b44a:	bf00      	nop
      }
      break;
 800b44c:	e037      	b.n	800b4be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	7c1b      	ldrb	r3, [r3, #16]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d109      	bne.n	800b46a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b45e:	f107 0208 	add.w	r2, r7, #8
 800b462:	4610      	mov	r0, r2
 800b464:	4798      	blx	r3
 800b466:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b468:	e029      	b.n	800b4be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b46a:	6839      	ldr	r1, [r7, #0]
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fa2a 	bl	800b8c6 <USBD_CtlError>
        err++;
 800b472:	7afb      	ldrb	r3, [r7, #11]
 800b474:	3301      	adds	r3, #1
 800b476:	72fb      	strb	r3, [r7, #11]
      break;
 800b478:	e021      	b.n	800b4be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	7c1b      	ldrb	r3, [r3, #16]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d10d      	bne.n	800b49e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b48a:	f107 0208 	add.w	r2, r7, #8
 800b48e:	4610      	mov	r0, r2
 800b490:	4798      	blx	r3
 800b492:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	3301      	adds	r3, #1
 800b498:	2207      	movs	r2, #7
 800b49a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b49c:	e00f      	b.n	800b4be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b49e:	6839      	ldr	r1, [r7, #0]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 fa10 	bl	800b8c6 <USBD_CtlError>
        err++;
 800b4a6:	7afb      	ldrb	r3, [r7, #11]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	72fb      	strb	r3, [r7, #11]
      break;
 800b4ac:	e007      	b.n	800b4be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fa08 	bl	800b8c6 <USBD_CtlError>
      err++;
 800b4b6:	7afb      	ldrb	r3, [r7, #11]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	72fb      	strb	r3, [r7, #11]
      break;
 800b4bc:	bf00      	nop
  }

  if (err != 0U)
 800b4be:	7afb      	ldrb	r3, [r7, #11]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d11e      	bne.n	800b502 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	88db      	ldrh	r3, [r3, #6]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d016      	beq.n	800b4fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b4cc:	893b      	ldrh	r3, [r7, #8]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00e      	beq.n	800b4f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	88da      	ldrh	r2, [r3, #6]
 800b4d6:	893b      	ldrh	r3, [r7, #8]
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	bf28      	it	cs
 800b4dc:	4613      	movcs	r3, r2
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b4e2:	893b      	ldrh	r3, [r7, #8]
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	68f9      	ldr	r1, [r7, #12]
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fa5d 	bl	800b9a8 <USBD_CtlSendData>
 800b4ee:	e009      	b.n	800b504 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b4f0:	6839      	ldr	r1, [r7, #0]
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f9e7 	bl	800b8c6 <USBD_CtlError>
 800b4f8:	e004      	b.n	800b504 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 faae 	bl	800ba5c <USBD_CtlSendStatus>
 800b500:	e000      	b.n	800b504 <USBD_GetDescriptor+0x2cc>
    return;
 800b502:	bf00      	nop
  }
}
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop

0800b50c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	889b      	ldrh	r3, [r3, #4]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d131      	bne.n	800b582 <USBD_SetAddress+0x76>
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	88db      	ldrh	r3, [r3, #6]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d12d      	bne.n	800b582 <USBD_SetAddress+0x76>
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	885b      	ldrh	r3, [r3, #2]
 800b52a:	2b7f      	cmp	r3, #127	; 0x7f
 800b52c:	d829      	bhi.n	800b582 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	885b      	ldrh	r3, [r3, #2]
 800b532:	b2db      	uxtb	r3, r3
 800b534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b538:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b540:	b2db      	uxtb	r3, r3
 800b542:	2b03      	cmp	r3, #3
 800b544:	d104      	bne.n	800b550 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b546:	6839      	ldr	r1, [r7, #0]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 f9bc 	bl	800b8c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b54e:	e01d      	b.n	800b58c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	7bfa      	ldrb	r2, [r7, #15]
 800b554:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b558:	7bfb      	ldrb	r3, [r7, #15]
 800b55a:	4619      	mov	r1, r3
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 fefb 	bl	800c358 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 fa7a 	bl	800ba5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b568:	7bfb      	ldrb	r3, [r7, #15]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d004      	beq.n	800b578 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2202      	movs	r2, #2
 800b572:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b576:	e009      	b.n	800b58c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b580:	e004      	b.n	800b58c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b582:	6839      	ldr	r1, [r7, #0]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f99e 	bl	800b8c6 <USBD_CtlError>
  }
}
 800b58a:	bf00      	nop
 800b58c:	bf00      	nop
 800b58e:	3710      	adds	r7, #16
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	885b      	ldrh	r3, [r3, #2]
 800b5a6:	b2da      	uxtb	r2, r3
 800b5a8:	4b4e      	ldr	r3, [pc, #312]	; (800b6e4 <USBD_SetConfig+0x150>)
 800b5aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b5ac:	4b4d      	ldr	r3, [pc, #308]	; (800b6e4 <USBD_SetConfig+0x150>)
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d905      	bls.n	800b5c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f985 	bl	800b8c6 <USBD_CtlError>
    return USBD_FAIL;
 800b5bc:	2303      	movs	r3, #3
 800b5be:	e08c      	b.n	800b6da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d002      	beq.n	800b5d2 <USBD_SetConfig+0x3e>
 800b5cc:	2b03      	cmp	r3, #3
 800b5ce:	d029      	beq.n	800b624 <USBD_SetConfig+0x90>
 800b5d0:	e075      	b.n	800b6be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b5d2:	4b44      	ldr	r3, [pc, #272]	; (800b6e4 <USBD_SetConfig+0x150>)
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d020      	beq.n	800b61c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b5da:	4b42      	ldr	r3, [pc, #264]	; (800b6e4 <USBD_SetConfig+0x150>)
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	461a      	mov	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5e4:	4b3f      	ldr	r3, [pc, #252]	; (800b6e4 <USBD_SetConfig+0x150>)
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7fe ffe7 	bl	800a5be <USBD_SetClassConfig>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b5f4:	7bfb      	ldrb	r3, [r7, #15]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d008      	beq.n	800b60c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b5fa:	6839      	ldr	r1, [r7, #0]
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 f962 	bl	800b8c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2202      	movs	r2, #2
 800b606:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b60a:	e065      	b.n	800b6d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 fa25 	bl	800ba5c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2203      	movs	r2, #3
 800b616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b61a:	e05d      	b.n	800b6d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 fa1d 	bl	800ba5c <USBD_CtlSendStatus>
      break;
 800b622:	e059      	b.n	800b6d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b624:	4b2f      	ldr	r3, [pc, #188]	; (800b6e4 <USBD_SetConfig+0x150>)
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d112      	bne.n	800b652 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2202      	movs	r2, #2
 800b630:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b634:	4b2b      	ldr	r3, [pc, #172]	; (800b6e4 <USBD_SetConfig+0x150>)
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	461a      	mov	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b63e:	4b29      	ldr	r3, [pc, #164]	; (800b6e4 <USBD_SetConfig+0x150>)
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	4619      	mov	r1, r3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7fe ffd6 	bl	800a5f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 fa06 	bl	800ba5c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b650:	e042      	b.n	800b6d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b652:	4b24      	ldr	r3, [pc, #144]	; (800b6e4 <USBD_SetConfig+0x150>)
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	461a      	mov	r2, r3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d02a      	beq.n	800b6b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	b2db      	uxtb	r3, r3
 800b666:	4619      	mov	r1, r3
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7fe ffc4 	bl	800a5f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b66e:	4b1d      	ldr	r3, [pc, #116]	; (800b6e4 <USBD_SetConfig+0x150>)
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	461a      	mov	r2, r3
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b678:	4b1a      	ldr	r3, [pc, #104]	; (800b6e4 <USBD_SetConfig+0x150>)
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	4619      	mov	r1, r3
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7fe ff9d 	bl	800a5be <USBD_SetClassConfig>
 800b684:	4603      	mov	r3, r0
 800b686:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b688:	7bfb      	ldrb	r3, [r7, #15]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00f      	beq.n	800b6ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 f918 	bl	800b8c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	4619      	mov	r1, r3
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7fe ffa9 	bl	800a5f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2202      	movs	r2, #2
 800b6a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b6ac:	e014      	b.n	800b6d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f9d4 	bl	800ba5c <USBD_CtlSendStatus>
      break;
 800b6b4:	e010      	b.n	800b6d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 f9d0 	bl	800ba5c <USBD_CtlSendStatus>
      break;
 800b6bc:	e00c      	b.n	800b6d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b6be:	6839      	ldr	r1, [r7, #0]
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f900 	bl	800b8c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b6c6:	4b07      	ldr	r3, [pc, #28]	; (800b6e4 <USBD_SetConfig+0x150>)
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7fe ff92 	bl	800a5f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	73fb      	strb	r3, [r7, #15]
      break;
 800b6d6:	bf00      	nop
  }

  return ret;
 800b6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	20000578 	.word	0x20000578

0800b6e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	88db      	ldrh	r3, [r3, #6]
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d004      	beq.n	800b704 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b6fa:	6839      	ldr	r1, [r7, #0]
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 f8e2 	bl	800b8c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b702:	e023      	b.n	800b74c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	dc02      	bgt.n	800b716 <USBD_GetConfig+0x2e>
 800b710:	2b00      	cmp	r3, #0
 800b712:	dc03      	bgt.n	800b71c <USBD_GetConfig+0x34>
 800b714:	e015      	b.n	800b742 <USBD_GetConfig+0x5a>
 800b716:	2b03      	cmp	r3, #3
 800b718:	d00b      	beq.n	800b732 <USBD_GetConfig+0x4a>
 800b71a:	e012      	b.n	800b742 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	3308      	adds	r3, #8
 800b726:	2201      	movs	r2, #1
 800b728:	4619      	mov	r1, r3
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f93c 	bl	800b9a8 <USBD_CtlSendData>
        break;
 800b730:	e00c      	b.n	800b74c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	3304      	adds	r3, #4
 800b736:	2201      	movs	r2, #1
 800b738:	4619      	mov	r1, r3
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f934 	bl	800b9a8 <USBD_CtlSendData>
        break;
 800b740:	e004      	b.n	800b74c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 f8be 	bl	800b8c6 <USBD_CtlError>
        break;
 800b74a:	bf00      	nop
}
 800b74c:	bf00      	nop
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b764:	b2db      	uxtb	r3, r3
 800b766:	3b01      	subs	r3, #1
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d81e      	bhi.n	800b7aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	88db      	ldrh	r3, [r3, #6]
 800b770:	2b02      	cmp	r3, #2
 800b772:	d004      	beq.n	800b77e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b774:	6839      	ldr	r1, [r7, #0]
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 f8a5 	bl	800b8c6 <USBD_CtlError>
        break;
 800b77c:	e01a      	b.n	800b7b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d005      	beq.n	800b79a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	f043 0202 	orr.w	r2, r3, #2
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	330c      	adds	r3, #12
 800b79e:	2202      	movs	r2, #2
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 f900 	bl	800b9a8 <USBD_CtlSendData>
      break;
 800b7a8:	e004      	b.n	800b7b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b7aa:	6839      	ldr	r1, [r7, #0]
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 f88a 	bl	800b8c6 <USBD_CtlError>
      break;
 800b7b2:	bf00      	nop
  }
}
 800b7b4:	bf00      	nop
 800b7b6:	3708      	adds	r7, #8
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	885b      	ldrh	r3, [r3, #2]
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d107      	bne.n	800b7de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 f940 	bl	800ba5c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b7dc:	e013      	b.n	800b806 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	885b      	ldrh	r3, [r3, #2]
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d10b      	bne.n	800b7fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	889b      	ldrh	r3, [r3, #4]
 800b7ea:	0a1b      	lsrs	r3, r3, #8
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	b2da      	uxtb	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 f930 	bl	800ba5c <USBD_CtlSendStatus>
}
 800b7fc:	e003      	b.n	800b806 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b7fe:	6839      	ldr	r1, [r7, #0]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 f860 	bl	800b8c6 <USBD_CtlError>
}
 800b806:	bf00      	nop
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b082      	sub	sp, #8
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
 800b816:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	3b01      	subs	r3, #1
 800b822:	2b02      	cmp	r3, #2
 800b824:	d80b      	bhi.n	800b83e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	885b      	ldrh	r3, [r3, #2]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d10c      	bne.n	800b848 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 f910 	bl	800ba5c <USBD_CtlSendStatus>
      }
      break;
 800b83c:	e004      	b.n	800b848 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b83e:	6839      	ldr	r1, [r7, #0]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 f840 	bl	800b8c6 <USBD_CtlError>
      break;
 800b846:	e000      	b.n	800b84a <USBD_ClrFeature+0x3c>
      break;
 800b848:	bf00      	nop
  }
}
 800b84a:	bf00      	nop
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b084      	sub	sp, #16
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
 800b85a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	781a      	ldrb	r2, [r3, #0]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	3301      	adds	r3, #1
 800b86c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	781a      	ldrb	r2, [r3, #0]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	3301      	adds	r3, #1
 800b87a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f7ff fa41 	bl	800ad04 <SWAPBYTE>
 800b882:	4603      	mov	r3, r0
 800b884:	461a      	mov	r2, r3
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	3301      	adds	r3, #1
 800b88e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	3301      	adds	r3, #1
 800b894:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f7ff fa34 	bl	800ad04 <SWAPBYTE>
 800b89c:	4603      	mov	r3, r0
 800b89e:	461a      	mov	r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	f7ff fa27 	bl	800ad04 <SWAPBYTE>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	80da      	strh	r2, [r3, #6]
}
 800b8be:	bf00      	nop
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b082      	sub	sp, #8
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
 800b8ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8d0:	2180      	movs	r1, #128	; 0x80
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 fcd6 	bl	800c284 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b8d8:	2100      	movs	r1, #0
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 fcd2 	bl	800c284 <USBD_LL_StallEP>
}
 800b8e0:	bf00      	nop
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b086      	sub	sp, #24
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d036      	beq.n	800b96c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b902:	6938      	ldr	r0, [r7, #16]
 800b904:	f000 f836 	bl	800b974 <USBD_GetLen>
 800b908:	4603      	mov	r3, r0
 800b90a:	3301      	adds	r3, #1
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	005b      	lsls	r3, r3, #1
 800b910:	b29a      	uxth	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b916:	7dfb      	ldrb	r3, [r7, #23]
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	4413      	add	r3, r2
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	7812      	ldrb	r2, [r2, #0]
 800b920:	701a      	strb	r2, [r3, #0]
  idx++;
 800b922:	7dfb      	ldrb	r3, [r7, #23]
 800b924:	3301      	adds	r3, #1
 800b926:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b928:	7dfb      	ldrb	r3, [r7, #23]
 800b92a:	68ba      	ldr	r2, [r7, #8]
 800b92c:	4413      	add	r3, r2
 800b92e:	2203      	movs	r2, #3
 800b930:	701a      	strb	r2, [r3, #0]
  idx++;
 800b932:	7dfb      	ldrb	r3, [r7, #23]
 800b934:	3301      	adds	r3, #1
 800b936:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b938:	e013      	b.n	800b962 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b93a:	7dfb      	ldrb	r3, [r7, #23]
 800b93c:	68ba      	ldr	r2, [r7, #8]
 800b93e:	4413      	add	r3, r2
 800b940:	693a      	ldr	r2, [r7, #16]
 800b942:	7812      	ldrb	r2, [r2, #0]
 800b944:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	3301      	adds	r3, #1
 800b94a:	613b      	str	r3, [r7, #16]
    idx++;
 800b94c:	7dfb      	ldrb	r3, [r7, #23]
 800b94e:	3301      	adds	r3, #1
 800b950:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b952:	7dfb      	ldrb	r3, [r7, #23]
 800b954:	68ba      	ldr	r2, [r7, #8]
 800b956:	4413      	add	r3, r2
 800b958:	2200      	movs	r2, #0
 800b95a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b95c:	7dfb      	ldrb	r3, [r7, #23]
 800b95e:	3301      	adds	r3, #1
 800b960:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1e7      	bne.n	800b93a <USBD_GetString+0x52>
 800b96a:	e000      	b.n	800b96e <USBD_GetString+0x86>
    return;
 800b96c:	bf00      	nop
  }
}
 800b96e:	3718      	adds	r7, #24
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b97c:	2300      	movs	r3, #0
 800b97e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b984:	e005      	b.n	800b992 <USBD_GetLen+0x1e>
  {
    len++;
 800b986:	7bfb      	ldrb	r3, [r7, #15]
 800b988:	3301      	adds	r3, #1
 800b98a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	3301      	adds	r3, #1
 800b990:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d1f5      	bne.n	800b986 <USBD_GetLen+0x12>
  }

  return len;
 800b99a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3714      	adds	r7, #20
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2202      	movs	r2, #2
 800b9b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	68ba      	ldr	r2, [r7, #8]
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f000 fce1 	bl	800c396 <USBD_LL_Transmit>

  return USBD_OK;
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b084      	sub	sp, #16
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	60f8      	str	r0, [r7, #12]
 800b9e6:	60b9      	str	r1, [r7, #8]
 800b9e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f000 fcd0 	bl	800c396 <USBD_LL_Transmit>

  return USBD_OK;
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2203      	movs	r2, #3
 800ba10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	2100      	movs	r1, #0
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f000 fcd4 	bl	800c3d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b084      	sub	sp, #16
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	60f8      	str	r0, [r7, #12]
 800ba42:	60b9      	str	r1, [r7, #8]
 800ba44:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	68ba      	ldr	r2, [r7, #8]
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f000 fcc3 	bl	800c3d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2204      	movs	r2, #4
 800ba68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	2200      	movs	r2, #0
 800ba70:	2100      	movs	r1, #0
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fc8f 	bl	800c396 <USBD_LL_Transmit>

  return USBD_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b082      	sub	sp, #8
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2205      	movs	r2, #5
 800ba8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba92:	2300      	movs	r3, #0
 800ba94:	2200      	movs	r2, #0
 800ba96:	2100      	movs	r1, #0
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fc9d 	bl	800c3d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800baac:	2200      	movs	r2, #0
 800baae:	4912      	ldr	r1, [pc, #72]	; (800baf8 <MX_USB_DEVICE_Init+0x50>)
 800bab0:	4812      	ldr	r0, [pc, #72]	; (800bafc <MX_USB_DEVICE_Init+0x54>)
 800bab2:	f7fe fd07 	bl	800a4c4 <USBD_Init>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800babc:	f7f5 fe82 	bl	80017c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bac0:	490f      	ldr	r1, [pc, #60]	; (800bb00 <MX_USB_DEVICE_Init+0x58>)
 800bac2:	480e      	ldr	r0, [pc, #56]	; (800bafc <MX_USB_DEVICE_Init+0x54>)
 800bac4:	f7fe fd2e 	bl	800a524 <USBD_RegisterClass>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d001      	beq.n	800bad2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bace:	f7f5 fe79 	bl	80017c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bad2:	490c      	ldr	r1, [pc, #48]	; (800bb04 <MX_USB_DEVICE_Init+0x5c>)
 800bad4:	4809      	ldr	r0, [pc, #36]	; (800bafc <MX_USB_DEVICE_Init+0x54>)
 800bad6:	f7fe fc1f 	bl	800a318 <USBD_CDC_RegisterInterface>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d001      	beq.n	800bae4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bae0:	f7f5 fe70 	bl	80017c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bae4:	4805      	ldr	r0, [pc, #20]	; (800bafc <MX_USB_DEVICE_Init+0x54>)
 800bae6:	f7fe fd53 	bl	800a590 <USBD_Start>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800baf0:	f7f5 fe68 	bl	80017c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800baf4:	bf00      	nop
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	200000d4 	.word	0x200000d4
 800bafc:	2000057c 	.word	0x2000057c
 800bb00:	20000040 	.word	0x20000040
 800bb04:	200000c0 	.word	0x200000c0

0800bb08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	4905      	ldr	r1, [pc, #20]	; (800bb24 <CDC_Init_FS+0x1c>)
 800bb10:	4805      	ldr	r0, [pc, #20]	; (800bb28 <CDC_Init_FS+0x20>)
 800bb12:	f7fe fc1b 	bl	800a34c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb16:	4905      	ldr	r1, [pc, #20]	; (800bb2c <CDC_Init_FS+0x24>)
 800bb18:	4803      	ldr	r0, [pc, #12]	; (800bb28 <CDC_Init_FS+0x20>)
 800bb1a:	f7fe fc39 	bl	800a390 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	20001058 	.word	0x20001058
 800bb28:	2000057c 	.word	0x2000057c
 800bb2c:	20000858 	.word	0x20000858

0800bb30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb30:	b480      	push	{r7}
 800bb32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	4603      	mov	r3, r0
 800bb48:	6039      	str	r1, [r7, #0]
 800bb4a:	71fb      	strb	r3, [r7, #7]
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb50:	79fb      	ldrb	r3, [r7, #7]
 800bb52:	2b23      	cmp	r3, #35	; 0x23
 800bb54:	d84a      	bhi.n	800bbec <CDC_Control_FS+0xac>
 800bb56:	a201      	add	r2, pc, #4	; (adr r2, 800bb5c <CDC_Control_FS+0x1c>)
 800bb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5c:	0800bbed 	.word	0x0800bbed
 800bb60:	0800bbed 	.word	0x0800bbed
 800bb64:	0800bbed 	.word	0x0800bbed
 800bb68:	0800bbed 	.word	0x0800bbed
 800bb6c:	0800bbed 	.word	0x0800bbed
 800bb70:	0800bbed 	.word	0x0800bbed
 800bb74:	0800bbed 	.word	0x0800bbed
 800bb78:	0800bbed 	.word	0x0800bbed
 800bb7c:	0800bbed 	.word	0x0800bbed
 800bb80:	0800bbed 	.word	0x0800bbed
 800bb84:	0800bbed 	.word	0x0800bbed
 800bb88:	0800bbed 	.word	0x0800bbed
 800bb8c:	0800bbed 	.word	0x0800bbed
 800bb90:	0800bbed 	.word	0x0800bbed
 800bb94:	0800bbed 	.word	0x0800bbed
 800bb98:	0800bbed 	.word	0x0800bbed
 800bb9c:	0800bbed 	.word	0x0800bbed
 800bba0:	0800bbed 	.word	0x0800bbed
 800bba4:	0800bbed 	.word	0x0800bbed
 800bba8:	0800bbed 	.word	0x0800bbed
 800bbac:	0800bbed 	.word	0x0800bbed
 800bbb0:	0800bbed 	.word	0x0800bbed
 800bbb4:	0800bbed 	.word	0x0800bbed
 800bbb8:	0800bbed 	.word	0x0800bbed
 800bbbc:	0800bbed 	.word	0x0800bbed
 800bbc0:	0800bbed 	.word	0x0800bbed
 800bbc4:	0800bbed 	.word	0x0800bbed
 800bbc8:	0800bbed 	.word	0x0800bbed
 800bbcc:	0800bbed 	.word	0x0800bbed
 800bbd0:	0800bbed 	.word	0x0800bbed
 800bbd4:	0800bbed 	.word	0x0800bbed
 800bbd8:	0800bbed 	.word	0x0800bbed
 800bbdc:	0800bbed 	.word	0x0800bbed
 800bbe0:	0800bbed 	.word	0x0800bbed
 800bbe4:	0800bbed 	.word	0x0800bbed
 800bbe8:	0800bbed 	.word	0x0800bbed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bbec:	bf00      	nop
  }

  return (USBD_OK);
 800bbee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc06:	6879      	ldr	r1, [r7, #4]
 800bc08:	4805      	ldr	r0, [pc, #20]	; (800bc20 <CDC_Receive_FS+0x24>)
 800bc0a:	f7fe fbc1 	bl	800a390 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc0e:	4804      	ldr	r0, [pc, #16]	; (800bc20 <CDC_Receive_FS+0x24>)
 800bc10:	f7fe fc22 	bl	800a458 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bc14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	2000057c 	.word	0x2000057c

0800bc24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bc34:	4b0d      	ldr	r3, [pc, #52]	; (800bc6c <CDC_Transmit_FS+0x48>)
 800bc36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d001      	beq.n	800bc4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bc46:	2301      	movs	r3, #1
 800bc48:	e00b      	b.n	800bc62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bc4a:	887b      	ldrh	r3, [r7, #2]
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	6879      	ldr	r1, [r7, #4]
 800bc50:	4806      	ldr	r0, [pc, #24]	; (800bc6c <CDC_Transmit_FS+0x48>)
 800bc52:	f7fe fb7b 	bl	800a34c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bc56:	4805      	ldr	r0, [pc, #20]	; (800bc6c <CDC_Transmit_FS+0x48>)
 800bc58:	f7fe fbb8 	bl	800a3cc <USBD_CDC_TransmitPacket>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bc60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	2000057c 	.word	0x2000057c

0800bc70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b087      	sub	sp, #28
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bc82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	371c      	adds	r7, #28
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
	...

0800bc94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	6039      	str	r1, [r7, #0]
 800bc9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	2212      	movs	r2, #18
 800bca4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bca6:	4b03      	ldr	r3, [pc, #12]	; (800bcb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr
 800bcb4:	200000f0 	.word	0x200000f0

0800bcb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	6039      	str	r1, [r7, #0]
 800bcc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	2204      	movs	r2, #4
 800bcc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bcca:	4b03      	ldr	r3, [pc, #12]	; (800bcd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	370c      	adds	r7, #12
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr
 800bcd8:	20000104 	.word	0x20000104

0800bcdc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	4603      	mov	r3, r0
 800bce4:	6039      	str	r1, [r7, #0]
 800bce6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bce8:	79fb      	ldrb	r3, [r7, #7]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d105      	bne.n	800bcfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	4907      	ldr	r1, [pc, #28]	; (800bd10 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcf2:	4808      	ldr	r0, [pc, #32]	; (800bd14 <USBD_FS_ProductStrDescriptor+0x38>)
 800bcf4:	f7ff fdf8 	bl	800b8e8 <USBD_GetString>
 800bcf8:	e004      	b.n	800bd04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcfa:	683a      	ldr	r2, [r7, #0]
 800bcfc:	4904      	ldr	r1, [pc, #16]	; (800bd10 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcfe:	4805      	ldr	r0, [pc, #20]	; (800bd14 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd00:	f7ff fdf2 	bl	800b8e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd04:	4b02      	ldr	r3, [pc, #8]	; (800bd10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	20001858 	.word	0x20001858
 800bd14:	0800f228 	.word	0x0800f228

0800bd18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	4603      	mov	r3, r0
 800bd20:	6039      	str	r1, [r7, #0]
 800bd22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd24:	683a      	ldr	r2, [r7, #0]
 800bd26:	4904      	ldr	r1, [pc, #16]	; (800bd38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd28:	4804      	ldr	r0, [pc, #16]	; (800bd3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd2a:	f7ff fddd 	bl	800b8e8 <USBD_GetString>
  return USBD_StrDesc;
 800bd2e:	4b02      	ldr	r3, [pc, #8]	; (800bd38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	20001858 	.word	0x20001858
 800bd3c:	0800f240 	.word	0x0800f240

0800bd40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	4603      	mov	r3, r0
 800bd48:	6039      	str	r1, [r7, #0]
 800bd4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	221a      	movs	r2, #26
 800bd50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd52:	f000 f843 	bl	800bddc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd56:	4b02      	ldr	r3, [pc, #8]	; (800bd60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	20000108 	.word	0x20000108

0800bd64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	6039      	str	r1, [r7, #0]
 800bd6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd70:	79fb      	ldrb	r3, [r7, #7]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d105      	bne.n	800bd82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd76:	683a      	ldr	r2, [r7, #0]
 800bd78:	4907      	ldr	r1, [pc, #28]	; (800bd98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd7a:	4808      	ldr	r0, [pc, #32]	; (800bd9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd7c:	f7ff fdb4 	bl	800b8e8 <USBD_GetString>
 800bd80:	e004      	b.n	800bd8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd82:	683a      	ldr	r2, [r7, #0]
 800bd84:	4904      	ldr	r1, [pc, #16]	; (800bd98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd86:	4805      	ldr	r0, [pc, #20]	; (800bd9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd88:	f7ff fdae 	bl	800b8e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd8c:	4b02      	ldr	r3, [pc, #8]	; (800bd98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3708      	adds	r7, #8
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	20001858 	.word	0x20001858
 800bd9c:	0800f254 	.word	0x0800f254

0800bda0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	4603      	mov	r3, r0
 800bda8:	6039      	str	r1, [r7, #0]
 800bdaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdac:	79fb      	ldrb	r3, [r7, #7]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d105      	bne.n	800bdbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bdb2:	683a      	ldr	r2, [r7, #0]
 800bdb4:	4907      	ldr	r1, [pc, #28]	; (800bdd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bdb6:	4808      	ldr	r0, [pc, #32]	; (800bdd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bdb8:	f7ff fd96 	bl	800b8e8 <USBD_GetString>
 800bdbc:	e004      	b.n	800bdc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	4904      	ldr	r1, [pc, #16]	; (800bdd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bdc2:	4805      	ldr	r0, [pc, #20]	; (800bdd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bdc4:	f7ff fd90 	bl	800b8e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdc8:	4b02      	ldr	r3, [pc, #8]	; (800bdd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3708      	adds	r7, #8
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	20001858 	.word	0x20001858
 800bdd8:	0800f260 	.word	0x0800f260

0800bddc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bde2:	4b0f      	ldr	r3, [pc, #60]	; (800be20 <Get_SerialNum+0x44>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bde8:	4b0e      	ldr	r3, [pc, #56]	; (800be24 <Get_SerialNum+0x48>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bdee:	4b0e      	ldr	r3, [pc, #56]	; (800be28 <Get_SerialNum+0x4c>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d009      	beq.n	800be16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be02:	2208      	movs	r2, #8
 800be04:	4909      	ldr	r1, [pc, #36]	; (800be2c <Get_SerialNum+0x50>)
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f000 f814 	bl	800be34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be0c:	2204      	movs	r2, #4
 800be0e:	4908      	ldr	r1, [pc, #32]	; (800be30 <Get_SerialNum+0x54>)
 800be10:	68b8      	ldr	r0, [r7, #8]
 800be12:	f000 f80f 	bl	800be34 <IntToUnicode>
  }
}
 800be16:	bf00      	nop
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	1fff7a10 	.word	0x1fff7a10
 800be24:	1fff7a14 	.word	0x1fff7a14
 800be28:	1fff7a18 	.word	0x1fff7a18
 800be2c:	2000010a 	.word	0x2000010a
 800be30:	2000011a 	.word	0x2000011a

0800be34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be34:	b480      	push	{r7}
 800be36:	b087      	sub	sp, #28
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	4613      	mov	r3, r2
 800be40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be42:	2300      	movs	r3, #0
 800be44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be46:	2300      	movs	r3, #0
 800be48:	75fb      	strb	r3, [r7, #23]
 800be4a:	e027      	b.n	800be9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	0f1b      	lsrs	r3, r3, #28
 800be50:	2b09      	cmp	r3, #9
 800be52:	d80b      	bhi.n	800be6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	0f1b      	lsrs	r3, r3, #28
 800be58:	b2da      	uxtb	r2, r3
 800be5a:	7dfb      	ldrb	r3, [r7, #23]
 800be5c:	005b      	lsls	r3, r3, #1
 800be5e:	4619      	mov	r1, r3
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	440b      	add	r3, r1
 800be64:	3230      	adds	r2, #48	; 0x30
 800be66:	b2d2      	uxtb	r2, r2
 800be68:	701a      	strb	r2, [r3, #0]
 800be6a:	e00a      	b.n	800be82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	0f1b      	lsrs	r3, r3, #28
 800be70:	b2da      	uxtb	r2, r3
 800be72:	7dfb      	ldrb	r3, [r7, #23]
 800be74:	005b      	lsls	r3, r3, #1
 800be76:	4619      	mov	r1, r3
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	440b      	add	r3, r1
 800be7c:	3237      	adds	r2, #55	; 0x37
 800be7e:	b2d2      	uxtb	r2, r2
 800be80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	011b      	lsls	r3, r3, #4
 800be86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be88:	7dfb      	ldrb	r3, [r7, #23]
 800be8a:	005b      	lsls	r3, r3, #1
 800be8c:	3301      	adds	r3, #1
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	4413      	add	r3, r2
 800be92:	2200      	movs	r2, #0
 800be94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be96:	7dfb      	ldrb	r3, [r7, #23]
 800be98:	3301      	adds	r3, #1
 800be9a:	75fb      	strb	r3, [r7, #23]
 800be9c:	7dfa      	ldrb	r2, [r7, #23]
 800be9e:	79fb      	ldrb	r3, [r7, #7]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d3d3      	bcc.n	800be4c <IntToUnicode+0x18>
  }
}
 800bea4:	bf00      	nop
 800bea6:	bf00      	nop
 800bea8:	371c      	adds	r7, #28
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
	...

0800beb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b08a      	sub	sp, #40	; 0x28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bebc:	f107 0314 	add.w	r3, r7, #20
 800bec0:	2200      	movs	r2, #0
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	605a      	str	r2, [r3, #4]
 800bec6:	609a      	str	r2, [r3, #8]
 800bec8:	60da      	str	r2, [r3, #12]
 800beca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bed4:	d13a      	bne.n	800bf4c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bed6:	2300      	movs	r3, #0
 800bed8:	613b      	str	r3, [r7, #16]
 800beda:	4b1e      	ldr	r3, [pc, #120]	; (800bf54 <HAL_PCD_MspInit+0xa0>)
 800bedc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bede:	4a1d      	ldr	r2, [pc, #116]	; (800bf54 <HAL_PCD_MspInit+0xa0>)
 800bee0:	f043 0301 	orr.w	r3, r3, #1
 800bee4:	6313      	str	r3, [r2, #48]	; 0x30
 800bee6:	4b1b      	ldr	r3, [pc, #108]	; (800bf54 <HAL_PCD_MspInit+0xa0>)
 800bee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beea:	f003 0301 	and.w	r3, r3, #1
 800beee:	613b      	str	r3, [r7, #16]
 800bef0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bef2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bef8:	2302      	movs	r3, #2
 800befa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800befc:	2300      	movs	r3, #0
 800befe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf00:	2303      	movs	r3, #3
 800bf02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bf04:	230a      	movs	r3, #10
 800bf06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf08:	f107 0314 	add.w	r3, r7, #20
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	4812      	ldr	r0, [pc, #72]	; (800bf58 <HAL_PCD_MspInit+0xa4>)
 800bf10:	f7f6 fcf2 	bl	80028f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bf14:	4b0f      	ldr	r3, [pc, #60]	; (800bf54 <HAL_PCD_MspInit+0xa0>)
 800bf16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf18:	4a0e      	ldr	r2, [pc, #56]	; (800bf54 <HAL_PCD_MspInit+0xa0>)
 800bf1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf1e:	6353      	str	r3, [r2, #52]	; 0x34
 800bf20:	2300      	movs	r3, #0
 800bf22:	60fb      	str	r3, [r7, #12]
 800bf24:	4b0b      	ldr	r3, [pc, #44]	; (800bf54 <HAL_PCD_MspInit+0xa0>)
 800bf26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf28:	4a0a      	ldr	r2, [pc, #40]	; (800bf54 <HAL_PCD_MspInit+0xa0>)
 800bf2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf2e:	6453      	str	r3, [r2, #68]	; 0x44
 800bf30:	4b08      	ldr	r3, [pc, #32]	; (800bf54 <HAL_PCD_MspInit+0xa0>)
 800bf32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf38:	60fb      	str	r3, [r7, #12]
 800bf3a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	2100      	movs	r1, #0
 800bf40:	2043      	movs	r0, #67	; 0x43
 800bf42:	f7f6 fc72 	bl	800282a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bf46:	2043      	movs	r0, #67	; 0x43
 800bf48:	f7f6 fc8b 	bl	8002862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf4c:	bf00      	nop
 800bf4e:	3728      	adds	r7, #40	; 0x28
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	40023800 	.word	0x40023800
 800bf58:	40020000 	.word	0x40020000

0800bf5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bf70:	4619      	mov	r1, r3
 800bf72:	4610      	mov	r0, r2
 800bf74:	f7fe fb59 	bl	800a62a <USBD_LL_SetupStage>
}
 800bf78:	bf00      	nop
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	460b      	mov	r3, r1
 800bf8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bf92:	78fa      	ldrb	r2, [r7, #3]
 800bf94:	6879      	ldr	r1, [r7, #4]
 800bf96:	4613      	mov	r3, r2
 800bf98:	00db      	lsls	r3, r3, #3
 800bf9a:	4413      	add	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	440b      	add	r3, r1
 800bfa0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	78fb      	ldrb	r3, [r7, #3]
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	f7fe fb93 	bl	800a6d4 <USBD_LL_DataOutStage>
}
 800bfae:	bf00      	nop
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b082      	sub	sp, #8
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bfc8:	78fa      	ldrb	r2, [r7, #3]
 800bfca:	6879      	ldr	r1, [r7, #4]
 800bfcc:	4613      	mov	r3, r2
 800bfce:	00db      	lsls	r3, r3, #3
 800bfd0:	4413      	add	r3, r2
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	440b      	add	r3, r1
 800bfd6:	334c      	adds	r3, #76	; 0x4c
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	78fb      	ldrb	r3, [r7, #3]
 800bfdc:	4619      	mov	r1, r3
 800bfde:	f7fe fc2c 	bl	800a83a <USBD_LL_DataInStage>
}
 800bfe2:	bf00      	nop
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b082      	sub	sp, #8
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7fe fd60 	bl	800aabe <USBD_LL_SOF>
}
 800bffe:	bf00      	nop
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b084      	sub	sp, #16
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c00e:	2301      	movs	r3, #1
 800c010:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	2b02      	cmp	r3, #2
 800c018:	d001      	beq.n	800c01e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c01a:	f7f5 fbd3 	bl	80017c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c024:	7bfa      	ldrb	r2, [r7, #15]
 800c026:	4611      	mov	r1, r2
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fe fd0a 	bl	800aa42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c034:	4618      	mov	r0, r3
 800c036:	f7fe fcb2 	bl	800a99e <USBD_LL_Reset>
}
 800c03a:	bf00      	nop
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
	...

0800c044 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c052:	4618      	mov	r0, r3
 800c054:	f7fe fd05 	bl	800aa62 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	6812      	ldr	r2, [r2, #0]
 800c066:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c06a:	f043 0301 	orr.w	r3, r3, #1
 800c06e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6a1b      	ldr	r3, [r3, #32]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d005      	beq.n	800c084 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c078:	4b04      	ldr	r3, [pc, #16]	; (800c08c <HAL_PCD_SuspendCallback+0x48>)
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	4a03      	ldr	r2, [pc, #12]	; (800c08c <HAL_PCD_SuspendCallback+0x48>)
 800c07e:	f043 0306 	orr.w	r3, r3, #6
 800c082:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c084:	bf00      	nop
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	e000ed00 	.word	0xe000ed00

0800c090 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fe fcf5 	bl	800aa8e <USBD_LL_Resume>
}
 800c0a4:	bf00      	nop
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0be:	78fa      	ldrb	r2, [r7, #3]
 800c0c0:	4611      	mov	r1, r2
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7fe fd4d 	bl	800ab62 <USBD_LL_IsoOUTIncomplete>
}
 800c0c8:	bf00      	nop
 800c0ca:	3708      	adds	r7, #8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	460b      	mov	r3, r1
 800c0da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0e2:	78fa      	ldrb	r2, [r7, #3]
 800c0e4:	4611      	mov	r1, r2
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fe fd09 	bl	800aafe <USBD_LL_IsoINIncomplete>
}
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c102:	4618      	mov	r0, r3
 800c104:	f7fe fd5f 	bl	800abc6 <USBD_LL_DevConnected>
}
 800c108:	bf00      	nop
 800c10a:	3708      	adds	r7, #8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b082      	sub	sp, #8
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fe fd5c 	bl	800abdc <USBD_LL_DevDisconnected>
}
 800c124:	bf00      	nop
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d13c      	bne.n	800c1b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c13c:	4a20      	ldr	r2, [pc, #128]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4a1e      	ldr	r2, [pc, #120]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c148:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c14c:	4b1c      	ldr	r3, [pc, #112]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c14e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c152:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c154:	4b1a      	ldr	r3, [pc, #104]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c156:	2204      	movs	r2, #4
 800c158:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c15a:	4b19      	ldr	r3, [pc, #100]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c15c:	2202      	movs	r2, #2
 800c15e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c160:	4b17      	ldr	r3, [pc, #92]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c162:	2200      	movs	r2, #0
 800c164:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c166:	4b16      	ldr	r3, [pc, #88]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c168:	2202      	movs	r2, #2
 800c16a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c16c:	4b14      	ldr	r3, [pc, #80]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c16e:	2200      	movs	r2, #0
 800c170:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c172:	4b13      	ldr	r3, [pc, #76]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c174:	2200      	movs	r2, #0
 800c176:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c178:	4b11      	ldr	r3, [pc, #68]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c17a:	2200      	movs	r2, #0
 800c17c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c17e:	4b10      	ldr	r3, [pc, #64]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c180:	2200      	movs	r2, #0
 800c182:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c184:	4b0e      	ldr	r3, [pc, #56]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c186:	2200      	movs	r2, #0
 800c188:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c18a:	480d      	ldr	r0, [pc, #52]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c18c:	f7f8 fbc7 	bl	800491e <HAL_PCD_Init>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d001      	beq.n	800c19a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c196:	f7f5 fb15 	bl	80017c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c19a:	2180      	movs	r1, #128	; 0x80
 800c19c:	4808      	ldr	r0, [pc, #32]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c19e:	f7f9 fe1e 	bl	8005dde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c1a2:	2240      	movs	r2, #64	; 0x40
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	4806      	ldr	r0, [pc, #24]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c1a8:	f7f9 fdd2 	bl	8005d50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c1ac:	2280      	movs	r2, #128	; 0x80
 800c1ae:	2101      	movs	r1, #1
 800c1b0:	4803      	ldr	r0, [pc, #12]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c1b2:	f7f9 fdcd 	bl	8005d50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	20001a58 	.word	0x20001a58

0800c1c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7f8 fcbc 	bl	8004b58 <HAL_PCD_Start>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1e4:	7bfb      	ldrb	r3, [r7, #15]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 f942 	bl	800c470 <USBD_Get_USB_Status>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b084      	sub	sp, #16
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	4608      	mov	r0, r1
 800c204:	4611      	mov	r1, r2
 800c206:	461a      	mov	r2, r3
 800c208:	4603      	mov	r3, r0
 800c20a:	70fb      	strb	r3, [r7, #3]
 800c20c:	460b      	mov	r3, r1
 800c20e:	70bb      	strb	r3, [r7, #2]
 800c210:	4613      	mov	r3, r2
 800c212:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c214:	2300      	movs	r3, #0
 800c216:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c218:	2300      	movs	r3, #0
 800c21a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c222:	78bb      	ldrb	r3, [r7, #2]
 800c224:	883a      	ldrh	r2, [r7, #0]
 800c226:	78f9      	ldrb	r1, [r7, #3]
 800c228:	f7f9 f98d 	bl	8005546 <HAL_PCD_EP_Open>
 800c22c:	4603      	mov	r3, r0
 800c22e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c230:	7bfb      	ldrb	r3, [r7, #15]
 800c232:	4618      	mov	r0, r3
 800c234:	f000 f91c 	bl	800c470 <USBD_Get_USB_Status>
 800c238:	4603      	mov	r3, r0
 800c23a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c23c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3710      	adds	r7, #16
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b084      	sub	sp, #16
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
 800c24e:	460b      	mov	r3, r1
 800c250:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c252:	2300      	movs	r3, #0
 800c254:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c256:	2300      	movs	r3, #0
 800c258:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c260:	78fa      	ldrb	r2, [r7, #3]
 800c262:	4611      	mov	r1, r2
 800c264:	4618      	mov	r0, r3
 800c266:	f7f9 f9d6 	bl	8005616 <HAL_PCD_EP_Close>
 800c26a:	4603      	mov	r3, r0
 800c26c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c26e:	7bfb      	ldrb	r3, [r7, #15]
 800c270:	4618      	mov	r0, r3
 800c272:	f000 f8fd 	bl	800c470 <USBD_Get_USB_Status>
 800c276:	4603      	mov	r3, r0
 800c278:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c27a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3710      	adds	r7, #16
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	460b      	mov	r3, r1
 800c28e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c294:	2300      	movs	r3, #0
 800c296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c29e:	78fa      	ldrb	r2, [r7, #3]
 800c2a0:	4611      	mov	r1, r2
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7f9 faae 	bl	8005804 <HAL_PCD_EP_SetStall>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2ac:	7bfb      	ldrb	r3, [r7, #15]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f000 f8de 	bl	800c470 <USBD_Get_USB_Status>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b084      	sub	sp, #16
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2dc:	78fa      	ldrb	r2, [r7, #3]
 800c2de:	4611      	mov	r1, r2
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7f9 faf3 	bl	80058cc <HAL_PCD_EP_ClrStall>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2ea:	7bfb      	ldrb	r3, [r7, #15]
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f000 f8bf 	bl	800c470 <USBD_Get_USB_Status>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3710      	adds	r7, #16
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	460b      	mov	r3, r1
 800c30a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c312:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	da0b      	bge.n	800c334 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c31c:	78fb      	ldrb	r3, [r7, #3]
 800c31e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c322:	68f9      	ldr	r1, [r7, #12]
 800c324:	4613      	mov	r3, r2
 800c326:	00db      	lsls	r3, r3, #3
 800c328:	4413      	add	r3, r2
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	440b      	add	r3, r1
 800c32e:	333e      	adds	r3, #62	; 0x3e
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	e00b      	b.n	800c34c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c334:	78fb      	ldrb	r3, [r7, #3]
 800c336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c33a:	68f9      	ldr	r1, [r7, #12]
 800c33c:	4613      	mov	r3, r2
 800c33e:	00db      	lsls	r3, r3, #3
 800c340:	4413      	add	r3, r2
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	440b      	add	r3, r1
 800c346:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c34a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3714      	adds	r7, #20
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	460b      	mov	r3, r1
 800c362:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c364:	2300      	movs	r3, #0
 800c366:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c368:	2300      	movs	r3, #0
 800c36a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c372:	78fa      	ldrb	r2, [r7, #3]
 800c374:	4611      	mov	r1, r2
 800c376:	4618      	mov	r0, r3
 800c378:	f7f9 f8c0 	bl	80054fc <HAL_PCD_SetAddress>
 800c37c:	4603      	mov	r3, r0
 800c37e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c380:	7bfb      	ldrb	r3, [r7, #15]
 800c382:	4618      	mov	r0, r3
 800c384:	f000 f874 	bl	800c470 <USBD_Get_USB_Status>
 800c388:	4603      	mov	r3, r0
 800c38a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c38c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3710      	adds	r7, #16
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}

0800c396 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c396:	b580      	push	{r7, lr}
 800c398:	b086      	sub	sp, #24
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	60f8      	str	r0, [r7, #12]
 800c39e:	607a      	str	r2, [r7, #4]
 800c3a0:	603b      	str	r3, [r7, #0]
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3b4:	7af9      	ldrb	r1, [r7, #11]
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	f7f9 f9d9 	bl	8005770 <HAL_PCD_EP_Transmit>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3c2:	7dfb      	ldrb	r3, [r7, #23]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f000 f853 	bl	800c470 <USBD_Get_USB_Status>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3ce:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3718      	adds	r7, #24
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b086      	sub	sp, #24
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	607a      	str	r2, [r7, #4]
 800c3e2:	603b      	str	r3, [r7, #0]
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3f6:	7af9      	ldrb	r1, [r7, #11]
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	f7f9 f955 	bl	80056aa <HAL_PCD_EP_Receive>
 800c400:	4603      	mov	r3, r0
 800c402:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c404:	7dfb      	ldrb	r3, [r7, #23]
 800c406:	4618      	mov	r0, r3
 800c408:	f000 f832 	bl	800c470 <USBD_Get_USB_Status>
 800c40c:	4603      	mov	r3, r0
 800c40e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c410:	7dbb      	ldrb	r3, [r7, #22]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3718      	adds	r7, #24
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b082      	sub	sp, #8
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	460b      	mov	r3, r1
 800c424:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c42c:	78fa      	ldrb	r2, [r7, #3]
 800c42e:	4611      	mov	r1, r2
 800c430:	4618      	mov	r0, r3
 800c432:	f7f9 f985 	bl	8005740 <HAL_PCD_EP_GetRxCount>
 800c436:	4603      	mov	r3, r0
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3708      	adds	r7, #8
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c440:	b480      	push	{r7}
 800c442:	b083      	sub	sp, #12
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c448:	4b03      	ldr	r3, [pc, #12]	; (800c458 <USBD_static_malloc+0x18>)
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	370c      	adds	r7, #12
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	20001f64 	.word	0x20001f64

0800c45c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]

}
 800c464:	bf00      	nop
 800c466:	370c      	adds	r7, #12
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c470:	b480      	push	{r7}
 800c472:	b085      	sub	sp, #20
 800c474:	af00      	add	r7, sp, #0
 800c476:	4603      	mov	r3, r0
 800c478:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c47a:	2300      	movs	r3, #0
 800c47c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c47e:	79fb      	ldrb	r3, [r7, #7]
 800c480:	2b03      	cmp	r3, #3
 800c482:	d817      	bhi.n	800c4b4 <USBD_Get_USB_Status+0x44>
 800c484:	a201      	add	r2, pc, #4	; (adr r2, 800c48c <USBD_Get_USB_Status+0x1c>)
 800c486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c48a:	bf00      	nop
 800c48c:	0800c49d 	.word	0x0800c49d
 800c490:	0800c4a3 	.word	0x0800c4a3
 800c494:	0800c4a9 	.word	0x0800c4a9
 800c498:	0800c4af 	.word	0x0800c4af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c49c:	2300      	movs	r3, #0
 800c49e:	73fb      	strb	r3, [r7, #15]
    break;
 800c4a0:	e00b      	b.n	800c4ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c4a2:	2303      	movs	r3, #3
 800c4a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c4a6:	e008      	b.n	800c4ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c4ac:	e005      	b.n	800c4ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c4ae:	2303      	movs	r3, #3
 800c4b0:	73fb      	strb	r3, [r7, #15]
    break;
 800c4b2:	e002      	b.n	800c4ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c4b4:	2303      	movs	r3, #3
 800c4b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4b8:	bf00      	nop
  }
  return usb_status;
 800c4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3714      	adds	r7, #20
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <__cvt>:
 800c4c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4cc:	ec55 4b10 	vmov	r4, r5, d0
 800c4d0:	2d00      	cmp	r5, #0
 800c4d2:	460e      	mov	r6, r1
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	462b      	mov	r3, r5
 800c4d8:	bfbb      	ittet	lt
 800c4da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c4de:	461d      	movlt	r5, r3
 800c4e0:	2300      	movge	r3, #0
 800c4e2:	232d      	movlt	r3, #45	; 0x2d
 800c4e4:	700b      	strb	r3, [r1, #0]
 800c4e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c4ec:	4691      	mov	r9, r2
 800c4ee:	f023 0820 	bic.w	r8, r3, #32
 800c4f2:	bfbc      	itt	lt
 800c4f4:	4622      	movlt	r2, r4
 800c4f6:	4614      	movlt	r4, r2
 800c4f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c4fc:	d005      	beq.n	800c50a <__cvt+0x42>
 800c4fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c502:	d100      	bne.n	800c506 <__cvt+0x3e>
 800c504:	3601      	adds	r6, #1
 800c506:	2102      	movs	r1, #2
 800c508:	e000      	b.n	800c50c <__cvt+0x44>
 800c50a:	2103      	movs	r1, #3
 800c50c:	ab03      	add	r3, sp, #12
 800c50e:	9301      	str	r3, [sp, #4]
 800c510:	ab02      	add	r3, sp, #8
 800c512:	9300      	str	r3, [sp, #0]
 800c514:	ec45 4b10 	vmov	d0, r4, r5
 800c518:	4653      	mov	r3, sl
 800c51a:	4632      	mov	r2, r6
 800c51c:	f000 fe7c 	bl	800d218 <_dtoa_r>
 800c520:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c524:	4607      	mov	r7, r0
 800c526:	d102      	bne.n	800c52e <__cvt+0x66>
 800c528:	f019 0f01 	tst.w	r9, #1
 800c52c:	d022      	beq.n	800c574 <__cvt+0xac>
 800c52e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c532:	eb07 0906 	add.w	r9, r7, r6
 800c536:	d110      	bne.n	800c55a <__cvt+0x92>
 800c538:	783b      	ldrb	r3, [r7, #0]
 800c53a:	2b30      	cmp	r3, #48	; 0x30
 800c53c:	d10a      	bne.n	800c554 <__cvt+0x8c>
 800c53e:	2200      	movs	r2, #0
 800c540:	2300      	movs	r3, #0
 800c542:	4620      	mov	r0, r4
 800c544:	4629      	mov	r1, r5
 800c546:	f7f4 fac7 	bl	8000ad8 <__aeabi_dcmpeq>
 800c54a:	b918      	cbnz	r0, 800c554 <__cvt+0x8c>
 800c54c:	f1c6 0601 	rsb	r6, r6, #1
 800c550:	f8ca 6000 	str.w	r6, [sl]
 800c554:	f8da 3000 	ldr.w	r3, [sl]
 800c558:	4499      	add	r9, r3
 800c55a:	2200      	movs	r2, #0
 800c55c:	2300      	movs	r3, #0
 800c55e:	4620      	mov	r0, r4
 800c560:	4629      	mov	r1, r5
 800c562:	f7f4 fab9 	bl	8000ad8 <__aeabi_dcmpeq>
 800c566:	b108      	cbz	r0, 800c56c <__cvt+0xa4>
 800c568:	f8cd 900c 	str.w	r9, [sp, #12]
 800c56c:	2230      	movs	r2, #48	; 0x30
 800c56e:	9b03      	ldr	r3, [sp, #12]
 800c570:	454b      	cmp	r3, r9
 800c572:	d307      	bcc.n	800c584 <__cvt+0xbc>
 800c574:	9b03      	ldr	r3, [sp, #12]
 800c576:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c578:	1bdb      	subs	r3, r3, r7
 800c57a:	4638      	mov	r0, r7
 800c57c:	6013      	str	r3, [r2, #0]
 800c57e:	b004      	add	sp, #16
 800c580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c584:	1c59      	adds	r1, r3, #1
 800c586:	9103      	str	r1, [sp, #12]
 800c588:	701a      	strb	r2, [r3, #0]
 800c58a:	e7f0      	b.n	800c56e <__cvt+0xa6>

0800c58c <__exponent>:
 800c58c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c58e:	4603      	mov	r3, r0
 800c590:	2900      	cmp	r1, #0
 800c592:	bfb8      	it	lt
 800c594:	4249      	neglt	r1, r1
 800c596:	f803 2b02 	strb.w	r2, [r3], #2
 800c59a:	bfb4      	ite	lt
 800c59c:	222d      	movlt	r2, #45	; 0x2d
 800c59e:	222b      	movge	r2, #43	; 0x2b
 800c5a0:	2909      	cmp	r1, #9
 800c5a2:	7042      	strb	r2, [r0, #1]
 800c5a4:	dd2a      	ble.n	800c5fc <__exponent+0x70>
 800c5a6:	f10d 0207 	add.w	r2, sp, #7
 800c5aa:	4617      	mov	r7, r2
 800c5ac:	260a      	movs	r6, #10
 800c5ae:	4694      	mov	ip, r2
 800c5b0:	fb91 f5f6 	sdiv	r5, r1, r6
 800c5b4:	fb06 1415 	mls	r4, r6, r5, r1
 800c5b8:	3430      	adds	r4, #48	; 0x30
 800c5ba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c5be:	460c      	mov	r4, r1
 800c5c0:	2c63      	cmp	r4, #99	; 0x63
 800c5c2:	f102 32ff 	add.w	r2, r2, #4294967295
 800c5c6:	4629      	mov	r1, r5
 800c5c8:	dcf1      	bgt.n	800c5ae <__exponent+0x22>
 800c5ca:	3130      	adds	r1, #48	; 0x30
 800c5cc:	f1ac 0402 	sub.w	r4, ip, #2
 800c5d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c5d4:	1c41      	adds	r1, r0, #1
 800c5d6:	4622      	mov	r2, r4
 800c5d8:	42ba      	cmp	r2, r7
 800c5da:	d30a      	bcc.n	800c5f2 <__exponent+0x66>
 800c5dc:	f10d 0209 	add.w	r2, sp, #9
 800c5e0:	eba2 020c 	sub.w	r2, r2, ip
 800c5e4:	42bc      	cmp	r4, r7
 800c5e6:	bf88      	it	hi
 800c5e8:	2200      	movhi	r2, #0
 800c5ea:	4413      	add	r3, r2
 800c5ec:	1a18      	subs	r0, r3, r0
 800c5ee:	b003      	add	sp, #12
 800c5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5f2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c5f6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c5fa:	e7ed      	b.n	800c5d8 <__exponent+0x4c>
 800c5fc:	2330      	movs	r3, #48	; 0x30
 800c5fe:	3130      	adds	r1, #48	; 0x30
 800c600:	7083      	strb	r3, [r0, #2]
 800c602:	70c1      	strb	r1, [r0, #3]
 800c604:	1d03      	adds	r3, r0, #4
 800c606:	e7f1      	b.n	800c5ec <__exponent+0x60>

0800c608 <_printf_float>:
 800c608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60c:	ed2d 8b02 	vpush	{d8}
 800c610:	b08d      	sub	sp, #52	; 0x34
 800c612:	460c      	mov	r4, r1
 800c614:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c618:	4616      	mov	r6, r2
 800c61a:	461f      	mov	r7, r3
 800c61c:	4605      	mov	r5, r0
 800c61e:	f000 fcfb 	bl	800d018 <_localeconv_r>
 800c622:	f8d0 a000 	ldr.w	sl, [r0]
 800c626:	4650      	mov	r0, sl
 800c628:	f7f3 fe2a 	bl	8000280 <strlen>
 800c62c:	2300      	movs	r3, #0
 800c62e:	930a      	str	r3, [sp, #40]	; 0x28
 800c630:	6823      	ldr	r3, [r4, #0]
 800c632:	9305      	str	r3, [sp, #20]
 800c634:	f8d8 3000 	ldr.w	r3, [r8]
 800c638:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c63c:	3307      	adds	r3, #7
 800c63e:	f023 0307 	bic.w	r3, r3, #7
 800c642:	f103 0208 	add.w	r2, r3, #8
 800c646:	f8c8 2000 	str.w	r2, [r8]
 800c64a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c64e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c652:	9307      	str	r3, [sp, #28]
 800c654:	f8cd 8018 	str.w	r8, [sp, #24]
 800c658:	ee08 0a10 	vmov	s16, r0
 800c65c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c660:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c664:	4b9e      	ldr	r3, [pc, #632]	; (800c8e0 <_printf_float+0x2d8>)
 800c666:	f04f 32ff 	mov.w	r2, #4294967295
 800c66a:	f7f4 fa67 	bl	8000b3c <__aeabi_dcmpun>
 800c66e:	bb88      	cbnz	r0, 800c6d4 <_printf_float+0xcc>
 800c670:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c674:	4b9a      	ldr	r3, [pc, #616]	; (800c8e0 <_printf_float+0x2d8>)
 800c676:	f04f 32ff 	mov.w	r2, #4294967295
 800c67a:	f7f4 fa41 	bl	8000b00 <__aeabi_dcmple>
 800c67e:	bb48      	cbnz	r0, 800c6d4 <_printf_float+0xcc>
 800c680:	2200      	movs	r2, #0
 800c682:	2300      	movs	r3, #0
 800c684:	4640      	mov	r0, r8
 800c686:	4649      	mov	r1, r9
 800c688:	f7f4 fa30 	bl	8000aec <__aeabi_dcmplt>
 800c68c:	b110      	cbz	r0, 800c694 <_printf_float+0x8c>
 800c68e:	232d      	movs	r3, #45	; 0x2d
 800c690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c694:	4a93      	ldr	r2, [pc, #588]	; (800c8e4 <_printf_float+0x2dc>)
 800c696:	4b94      	ldr	r3, [pc, #592]	; (800c8e8 <_printf_float+0x2e0>)
 800c698:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c69c:	bf94      	ite	ls
 800c69e:	4690      	movls	r8, r2
 800c6a0:	4698      	movhi	r8, r3
 800c6a2:	2303      	movs	r3, #3
 800c6a4:	6123      	str	r3, [r4, #16]
 800c6a6:	9b05      	ldr	r3, [sp, #20]
 800c6a8:	f023 0304 	bic.w	r3, r3, #4
 800c6ac:	6023      	str	r3, [r4, #0]
 800c6ae:	f04f 0900 	mov.w	r9, #0
 800c6b2:	9700      	str	r7, [sp, #0]
 800c6b4:	4633      	mov	r3, r6
 800c6b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800c6b8:	4621      	mov	r1, r4
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	f000 f9da 	bl	800ca74 <_printf_common>
 800c6c0:	3001      	adds	r0, #1
 800c6c2:	f040 8090 	bne.w	800c7e6 <_printf_float+0x1de>
 800c6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ca:	b00d      	add	sp, #52	; 0x34
 800c6cc:	ecbd 8b02 	vpop	{d8}
 800c6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d4:	4642      	mov	r2, r8
 800c6d6:	464b      	mov	r3, r9
 800c6d8:	4640      	mov	r0, r8
 800c6da:	4649      	mov	r1, r9
 800c6dc:	f7f4 fa2e 	bl	8000b3c <__aeabi_dcmpun>
 800c6e0:	b140      	cbz	r0, 800c6f4 <_printf_float+0xec>
 800c6e2:	464b      	mov	r3, r9
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	bfbc      	itt	lt
 800c6e8:	232d      	movlt	r3, #45	; 0x2d
 800c6ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c6ee:	4a7f      	ldr	r2, [pc, #508]	; (800c8ec <_printf_float+0x2e4>)
 800c6f0:	4b7f      	ldr	r3, [pc, #508]	; (800c8f0 <_printf_float+0x2e8>)
 800c6f2:	e7d1      	b.n	800c698 <_printf_float+0x90>
 800c6f4:	6863      	ldr	r3, [r4, #4]
 800c6f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c6fa:	9206      	str	r2, [sp, #24]
 800c6fc:	1c5a      	adds	r2, r3, #1
 800c6fe:	d13f      	bne.n	800c780 <_printf_float+0x178>
 800c700:	2306      	movs	r3, #6
 800c702:	6063      	str	r3, [r4, #4]
 800c704:	9b05      	ldr	r3, [sp, #20]
 800c706:	6861      	ldr	r1, [r4, #4]
 800c708:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c70c:	2300      	movs	r3, #0
 800c70e:	9303      	str	r3, [sp, #12]
 800c710:	ab0a      	add	r3, sp, #40	; 0x28
 800c712:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c716:	ab09      	add	r3, sp, #36	; 0x24
 800c718:	ec49 8b10 	vmov	d0, r8, r9
 800c71c:	9300      	str	r3, [sp, #0]
 800c71e:	6022      	str	r2, [r4, #0]
 800c720:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c724:	4628      	mov	r0, r5
 800c726:	f7ff fecf 	bl	800c4c8 <__cvt>
 800c72a:	9b06      	ldr	r3, [sp, #24]
 800c72c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c72e:	2b47      	cmp	r3, #71	; 0x47
 800c730:	4680      	mov	r8, r0
 800c732:	d108      	bne.n	800c746 <_printf_float+0x13e>
 800c734:	1cc8      	adds	r0, r1, #3
 800c736:	db02      	blt.n	800c73e <_printf_float+0x136>
 800c738:	6863      	ldr	r3, [r4, #4]
 800c73a:	4299      	cmp	r1, r3
 800c73c:	dd41      	ble.n	800c7c2 <_printf_float+0x1ba>
 800c73e:	f1ab 0302 	sub.w	r3, fp, #2
 800c742:	fa5f fb83 	uxtb.w	fp, r3
 800c746:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c74a:	d820      	bhi.n	800c78e <_printf_float+0x186>
 800c74c:	3901      	subs	r1, #1
 800c74e:	465a      	mov	r2, fp
 800c750:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c754:	9109      	str	r1, [sp, #36]	; 0x24
 800c756:	f7ff ff19 	bl	800c58c <__exponent>
 800c75a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c75c:	1813      	adds	r3, r2, r0
 800c75e:	2a01      	cmp	r2, #1
 800c760:	4681      	mov	r9, r0
 800c762:	6123      	str	r3, [r4, #16]
 800c764:	dc02      	bgt.n	800c76c <_printf_float+0x164>
 800c766:	6822      	ldr	r2, [r4, #0]
 800c768:	07d2      	lsls	r2, r2, #31
 800c76a:	d501      	bpl.n	800c770 <_printf_float+0x168>
 800c76c:	3301      	adds	r3, #1
 800c76e:	6123      	str	r3, [r4, #16]
 800c770:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c774:	2b00      	cmp	r3, #0
 800c776:	d09c      	beq.n	800c6b2 <_printf_float+0xaa>
 800c778:	232d      	movs	r3, #45	; 0x2d
 800c77a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c77e:	e798      	b.n	800c6b2 <_printf_float+0xaa>
 800c780:	9a06      	ldr	r2, [sp, #24]
 800c782:	2a47      	cmp	r2, #71	; 0x47
 800c784:	d1be      	bne.n	800c704 <_printf_float+0xfc>
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1bc      	bne.n	800c704 <_printf_float+0xfc>
 800c78a:	2301      	movs	r3, #1
 800c78c:	e7b9      	b.n	800c702 <_printf_float+0xfa>
 800c78e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c792:	d118      	bne.n	800c7c6 <_printf_float+0x1be>
 800c794:	2900      	cmp	r1, #0
 800c796:	6863      	ldr	r3, [r4, #4]
 800c798:	dd0b      	ble.n	800c7b2 <_printf_float+0x1aa>
 800c79a:	6121      	str	r1, [r4, #16]
 800c79c:	b913      	cbnz	r3, 800c7a4 <_printf_float+0x19c>
 800c79e:	6822      	ldr	r2, [r4, #0]
 800c7a0:	07d0      	lsls	r0, r2, #31
 800c7a2:	d502      	bpl.n	800c7aa <_printf_float+0x1a2>
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	440b      	add	r3, r1
 800c7a8:	6123      	str	r3, [r4, #16]
 800c7aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800c7ac:	f04f 0900 	mov.w	r9, #0
 800c7b0:	e7de      	b.n	800c770 <_printf_float+0x168>
 800c7b2:	b913      	cbnz	r3, 800c7ba <_printf_float+0x1b2>
 800c7b4:	6822      	ldr	r2, [r4, #0]
 800c7b6:	07d2      	lsls	r2, r2, #31
 800c7b8:	d501      	bpl.n	800c7be <_printf_float+0x1b6>
 800c7ba:	3302      	adds	r3, #2
 800c7bc:	e7f4      	b.n	800c7a8 <_printf_float+0x1a0>
 800c7be:	2301      	movs	r3, #1
 800c7c0:	e7f2      	b.n	800c7a8 <_printf_float+0x1a0>
 800c7c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c7c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7c8:	4299      	cmp	r1, r3
 800c7ca:	db05      	blt.n	800c7d8 <_printf_float+0x1d0>
 800c7cc:	6823      	ldr	r3, [r4, #0]
 800c7ce:	6121      	str	r1, [r4, #16]
 800c7d0:	07d8      	lsls	r0, r3, #31
 800c7d2:	d5ea      	bpl.n	800c7aa <_printf_float+0x1a2>
 800c7d4:	1c4b      	adds	r3, r1, #1
 800c7d6:	e7e7      	b.n	800c7a8 <_printf_float+0x1a0>
 800c7d8:	2900      	cmp	r1, #0
 800c7da:	bfd4      	ite	le
 800c7dc:	f1c1 0202 	rsble	r2, r1, #2
 800c7e0:	2201      	movgt	r2, #1
 800c7e2:	4413      	add	r3, r2
 800c7e4:	e7e0      	b.n	800c7a8 <_printf_float+0x1a0>
 800c7e6:	6823      	ldr	r3, [r4, #0]
 800c7e8:	055a      	lsls	r2, r3, #21
 800c7ea:	d407      	bmi.n	800c7fc <_printf_float+0x1f4>
 800c7ec:	6923      	ldr	r3, [r4, #16]
 800c7ee:	4642      	mov	r2, r8
 800c7f0:	4631      	mov	r1, r6
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	47b8      	blx	r7
 800c7f6:	3001      	adds	r0, #1
 800c7f8:	d12c      	bne.n	800c854 <_printf_float+0x24c>
 800c7fa:	e764      	b.n	800c6c6 <_printf_float+0xbe>
 800c7fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c800:	f240 80e0 	bls.w	800c9c4 <_printf_float+0x3bc>
 800c804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c808:	2200      	movs	r2, #0
 800c80a:	2300      	movs	r3, #0
 800c80c:	f7f4 f964 	bl	8000ad8 <__aeabi_dcmpeq>
 800c810:	2800      	cmp	r0, #0
 800c812:	d034      	beq.n	800c87e <_printf_float+0x276>
 800c814:	4a37      	ldr	r2, [pc, #220]	; (800c8f4 <_printf_float+0x2ec>)
 800c816:	2301      	movs	r3, #1
 800c818:	4631      	mov	r1, r6
 800c81a:	4628      	mov	r0, r5
 800c81c:	47b8      	blx	r7
 800c81e:	3001      	adds	r0, #1
 800c820:	f43f af51 	beq.w	800c6c6 <_printf_float+0xbe>
 800c824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c828:	429a      	cmp	r2, r3
 800c82a:	db02      	blt.n	800c832 <_printf_float+0x22a>
 800c82c:	6823      	ldr	r3, [r4, #0]
 800c82e:	07d8      	lsls	r0, r3, #31
 800c830:	d510      	bpl.n	800c854 <_printf_float+0x24c>
 800c832:	ee18 3a10 	vmov	r3, s16
 800c836:	4652      	mov	r2, sl
 800c838:	4631      	mov	r1, r6
 800c83a:	4628      	mov	r0, r5
 800c83c:	47b8      	blx	r7
 800c83e:	3001      	adds	r0, #1
 800c840:	f43f af41 	beq.w	800c6c6 <_printf_float+0xbe>
 800c844:	f04f 0800 	mov.w	r8, #0
 800c848:	f104 091a 	add.w	r9, r4, #26
 800c84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c84e:	3b01      	subs	r3, #1
 800c850:	4543      	cmp	r3, r8
 800c852:	dc09      	bgt.n	800c868 <_printf_float+0x260>
 800c854:	6823      	ldr	r3, [r4, #0]
 800c856:	079b      	lsls	r3, r3, #30
 800c858:	f100 8107 	bmi.w	800ca6a <_printf_float+0x462>
 800c85c:	68e0      	ldr	r0, [r4, #12]
 800c85e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c860:	4298      	cmp	r0, r3
 800c862:	bfb8      	it	lt
 800c864:	4618      	movlt	r0, r3
 800c866:	e730      	b.n	800c6ca <_printf_float+0xc2>
 800c868:	2301      	movs	r3, #1
 800c86a:	464a      	mov	r2, r9
 800c86c:	4631      	mov	r1, r6
 800c86e:	4628      	mov	r0, r5
 800c870:	47b8      	blx	r7
 800c872:	3001      	adds	r0, #1
 800c874:	f43f af27 	beq.w	800c6c6 <_printf_float+0xbe>
 800c878:	f108 0801 	add.w	r8, r8, #1
 800c87c:	e7e6      	b.n	800c84c <_printf_float+0x244>
 800c87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c880:	2b00      	cmp	r3, #0
 800c882:	dc39      	bgt.n	800c8f8 <_printf_float+0x2f0>
 800c884:	4a1b      	ldr	r2, [pc, #108]	; (800c8f4 <_printf_float+0x2ec>)
 800c886:	2301      	movs	r3, #1
 800c888:	4631      	mov	r1, r6
 800c88a:	4628      	mov	r0, r5
 800c88c:	47b8      	blx	r7
 800c88e:	3001      	adds	r0, #1
 800c890:	f43f af19 	beq.w	800c6c6 <_printf_float+0xbe>
 800c894:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c898:	4313      	orrs	r3, r2
 800c89a:	d102      	bne.n	800c8a2 <_printf_float+0x29a>
 800c89c:	6823      	ldr	r3, [r4, #0]
 800c89e:	07d9      	lsls	r1, r3, #31
 800c8a0:	d5d8      	bpl.n	800c854 <_printf_float+0x24c>
 800c8a2:	ee18 3a10 	vmov	r3, s16
 800c8a6:	4652      	mov	r2, sl
 800c8a8:	4631      	mov	r1, r6
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	47b8      	blx	r7
 800c8ae:	3001      	adds	r0, #1
 800c8b0:	f43f af09 	beq.w	800c6c6 <_printf_float+0xbe>
 800c8b4:	f04f 0900 	mov.w	r9, #0
 800c8b8:	f104 0a1a 	add.w	sl, r4, #26
 800c8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8be:	425b      	negs	r3, r3
 800c8c0:	454b      	cmp	r3, r9
 800c8c2:	dc01      	bgt.n	800c8c8 <_printf_float+0x2c0>
 800c8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8c6:	e792      	b.n	800c7ee <_printf_float+0x1e6>
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	4652      	mov	r2, sl
 800c8cc:	4631      	mov	r1, r6
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	47b8      	blx	r7
 800c8d2:	3001      	adds	r0, #1
 800c8d4:	f43f aef7 	beq.w	800c6c6 <_printf_float+0xbe>
 800c8d8:	f109 0901 	add.w	r9, r9, #1
 800c8dc:	e7ee      	b.n	800c8bc <_printf_float+0x2b4>
 800c8de:	bf00      	nop
 800c8e0:	7fefffff 	.word	0x7fefffff
 800c8e4:	0800f288 	.word	0x0800f288
 800c8e8:	0800f28c 	.word	0x0800f28c
 800c8ec:	0800f290 	.word	0x0800f290
 800c8f0:	0800f294 	.word	0x0800f294
 800c8f4:	0800f298 	.word	0x0800f298
 800c8f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	bfa8      	it	ge
 800c900:	461a      	movge	r2, r3
 800c902:	2a00      	cmp	r2, #0
 800c904:	4691      	mov	r9, r2
 800c906:	dc37      	bgt.n	800c978 <_printf_float+0x370>
 800c908:	f04f 0b00 	mov.w	fp, #0
 800c90c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c910:	f104 021a 	add.w	r2, r4, #26
 800c914:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c916:	9305      	str	r3, [sp, #20]
 800c918:	eba3 0309 	sub.w	r3, r3, r9
 800c91c:	455b      	cmp	r3, fp
 800c91e:	dc33      	bgt.n	800c988 <_printf_float+0x380>
 800c920:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c924:	429a      	cmp	r2, r3
 800c926:	db3b      	blt.n	800c9a0 <_printf_float+0x398>
 800c928:	6823      	ldr	r3, [r4, #0]
 800c92a:	07da      	lsls	r2, r3, #31
 800c92c:	d438      	bmi.n	800c9a0 <_printf_float+0x398>
 800c92e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c932:	eba2 0903 	sub.w	r9, r2, r3
 800c936:	9b05      	ldr	r3, [sp, #20]
 800c938:	1ad2      	subs	r2, r2, r3
 800c93a:	4591      	cmp	r9, r2
 800c93c:	bfa8      	it	ge
 800c93e:	4691      	movge	r9, r2
 800c940:	f1b9 0f00 	cmp.w	r9, #0
 800c944:	dc35      	bgt.n	800c9b2 <_printf_float+0x3aa>
 800c946:	f04f 0800 	mov.w	r8, #0
 800c94a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c94e:	f104 0a1a 	add.w	sl, r4, #26
 800c952:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c956:	1a9b      	subs	r3, r3, r2
 800c958:	eba3 0309 	sub.w	r3, r3, r9
 800c95c:	4543      	cmp	r3, r8
 800c95e:	f77f af79 	ble.w	800c854 <_printf_float+0x24c>
 800c962:	2301      	movs	r3, #1
 800c964:	4652      	mov	r2, sl
 800c966:	4631      	mov	r1, r6
 800c968:	4628      	mov	r0, r5
 800c96a:	47b8      	blx	r7
 800c96c:	3001      	adds	r0, #1
 800c96e:	f43f aeaa 	beq.w	800c6c6 <_printf_float+0xbe>
 800c972:	f108 0801 	add.w	r8, r8, #1
 800c976:	e7ec      	b.n	800c952 <_printf_float+0x34a>
 800c978:	4613      	mov	r3, r2
 800c97a:	4631      	mov	r1, r6
 800c97c:	4642      	mov	r2, r8
 800c97e:	4628      	mov	r0, r5
 800c980:	47b8      	blx	r7
 800c982:	3001      	adds	r0, #1
 800c984:	d1c0      	bne.n	800c908 <_printf_float+0x300>
 800c986:	e69e      	b.n	800c6c6 <_printf_float+0xbe>
 800c988:	2301      	movs	r3, #1
 800c98a:	4631      	mov	r1, r6
 800c98c:	4628      	mov	r0, r5
 800c98e:	9205      	str	r2, [sp, #20]
 800c990:	47b8      	blx	r7
 800c992:	3001      	adds	r0, #1
 800c994:	f43f ae97 	beq.w	800c6c6 <_printf_float+0xbe>
 800c998:	9a05      	ldr	r2, [sp, #20]
 800c99a:	f10b 0b01 	add.w	fp, fp, #1
 800c99e:	e7b9      	b.n	800c914 <_printf_float+0x30c>
 800c9a0:	ee18 3a10 	vmov	r3, s16
 800c9a4:	4652      	mov	r2, sl
 800c9a6:	4631      	mov	r1, r6
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	47b8      	blx	r7
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	d1be      	bne.n	800c92e <_printf_float+0x326>
 800c9b0:	e689      	b.n	800c6c6 <_printf_float+0xbe>
 800c9b2:	9a05      	ldr	r2, [sp, #20]
 800c9b4:	464b      	mov	r3, r9
 800c9b6:	4442      	add	r2, r8
 800c9b8:	4631      	mov	r1, r6
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	47b8      	blx	r7
 800c9be:	3001      	adds	r0, #1
 800c9c0:	d1c1      	bne.n	800c946 <_printf_float+0x33e>
 800c9c2:	e680      	b.n	800c6c6 <_printf_float+0xbe>
 800c9c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9c6:	2a01      	cmp	r2, #1
 800c9c8:	dc01      	bgt.n	800c9ce <_printf_float+0x3c6>
 800c9ca:	07db      	lsls	r3, r3, #31
 800c9cc:	d53a      	bpl.n	800ca44 <_printf_float+0x43c>
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	4642      	mov	r2, r8
 800c9d2:	4631      	mov	r1, r6
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	47b8      	blx	r7
 800c9d8:	3001      	adds	r0, #1
 800c9da:	f43f ae74 	beq.w	800c6c6 <_printf_float+0xbe>
 800c9de:	ee18 3a10 	vmov	r3, s16
 800c9e2:	4652      	mov	r2, sl
 800c9e4:	4631      	mov	r1, r6
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	47b8      	blx	r7
 800c9ea:	3001      	adds	r0, #1
 800c9ec:	f43f ae6b 	beq.w	800c6c6 <_printf_float+0xbe>
 800c9f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c9fc:	f7f4 f86c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca00:	b9d8      	cbnz	r0, 800ca3a <_printf_float+0x432>
 800ca02:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ca06:	f108 0201 	add.w	r2, r8, #1
 800ca0a:	4631      	mov	r1, r6
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	47b8      	blx	r7
 800ca10:	3001      	adds	r0, #1
 800ca12:	d10e      	bne.n	800ca32 <_printf_float+0x42a>
 800ca14:	e657      	b.n	800c6c6 <_printf_float+0xbe>
 800ca16:	2301      	movs	r3, #1
 800ca18:	4652      	mov	r2, sl
 800ca1a:	4631      	mov	r1, r6
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	47b8      	blx	r7
 800ca20:	3001      	adds	r0, #1
 800ca22:	f43f ae50 	beq.w	800c6c6 <_printf_float+0xbe>
 800ca26:	f108 0801 	add.w	r8, r8, #1
 800ca2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca2c:	3b01      	subs	r3, #1
 800ca2e:	4543      	cmp	r3, r8
 800ca30:	dcf1      	bgt.n	800ca16 <_printf_float+0x40e>
 800ca32:	464b      	mov	r3, r9
 800ca34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ca38:	e6da      	b.n	800c7f0 <_printf_float+0x1e8>
 800ca3a:	f04f 0800 	mov.w	r8, #0
 800ca3e:	f104 0a1a 	add.w	sl, r4, #26
 800ca42:	e7f2      	b.n	800ca2a <_printf_float+0x422>
 800ca44:	2301      	movs	r3, #1
 800ca46:	4642      	mov	r2, r8
 800ca48:	e7df      	b.n	800ca0a <_printf_float+0x402>
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	464a      	mov	r2, r9
 800ca4e:	4631      	mov	r1, r6
 800ca50:	4628      	mov	r0, r5
 800ca52:	47b8      	blx	r7
 800ca54:	3001      	adds	r0, #1
 800ca56:	f43f ae36 	beq.w	800c6c6 <_printf_float+0xbe>
 800ca5a:	f108 0801 	add.w	r8, r8, #1
 800ca5e:	68e3      	ldr	r3, [r4, #12]
 800ca60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca62:	1a5b      	subs	r3, r3, r1
 800ca64:	4543      	cmp	r3, r8
 800ca66:	dcf0      	bgt.n	800ca4a <_printf_float+0x442>
 800ca68:	e6f8      	b.n	800c85c <_printf_float+0x254>
 800ca6a:	f04f 0800 	mov.w	r8, #0
 800ca6e:	f104 0919 	add.w	r9, r4, #25
 800ca72:	e7f4      	b.n	800ca5e <_printf_float+0x456>

0800ca74 <_printf_common>:
 800ca74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca78:	4616      	mov	r6, r2
 800ca7a:	4699      	mov	r9, r3
 800ca7c:	688a      	ldr	r2, [r1, #8]
 800ca7e:	690b      	ldr	r3, [r1, #16]
 800ca80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca84:	4293      	cmp	r3, r2
 800ca86:	bfb8      	it	lt
 800ca88:	4613      	movlt	r3, r2
 800ca8a:	6033      	str	r3, [r6, #0]
 800ca8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca90:	4607      	mov	r7, r0
 800ca92:	460c      	mov	r4, r1
 800ca94:	b10a      	cbz	r2, 800ca9a <_printf_common+0x26>
 800ca96:	3301      	adds	r3, #1
 800ca98:	6033      	str	r3, [r6, #0]
 800ca9a:	6823      	ldr	r3, [r4, #0]
 800ca9c:	0699      	lsls	r1, r3, #26
 800ca9e:	bf42      	ittt	mi
 800caa0:	6833      	ldrmi	r3, [r6, #0]
 800caa2:	3302      	addmi	r3, #2
 800caa4:	6033      	strmi	r3, [r6, #0]
 800caa6:	6825      	ldr	r5, [r4, #0]
 800caa8:	f015 0506 	ands.w	r5, r5, #6
 800caac:	d106      	bne.n	800cabc <_printf_common+0x48>
 800caae:	f104 0a19 	add.w	sl, r4, #25
 800cab2:	68e3      	ldr	r3, [r4, #12]
 800cab4:	6832      	ldr	r2, [r6, #0]
 800cab6:	1a9b      	subs	r3, r3, r2
 800cab8:	42ab      	cmp	r3, r5
 800caba:	dc26      	bgt.n	800cb0a <_printf_common+0x96>
 800cabc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cac0:	1e13      	subs	r3, r2, #0
 800cac2:	6822      	ldr	r2, [r4, #0]
 800cac4:	bf18      	it	ne
 800cac6:	2301      	movne	r3, #1
 800cac8:	0692      	lsls	r2, r2, #26
 800caca:	d42b      	bmi.n	800cb24 <_printf_common+0xb0>
 800cacc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cad0:	4649      	mov	r1, r9
 800cad2:	4638      	mov	r0, r7
 800cad4:	47c0      	blx	r8
 800cad6:	3001      	adds	r0, #1
 800cad8:	d01e      	beq.n	800cb18 <_printf_common+0xa4>
 800cada:	6823      	ldr	r3, [r4, #0]
 800cadc:	6922      	ldr	r2, [r4, #16]
 800cade:	f003 0306 	and.w	r3, r3, #6
 800cae2:	2b04      	cmp	r3, #4
 800cae4:	bf02      	ittt	eq
 800cae6:	68e5      	ldreq	r5, [r4, #12]
 800cae8:	6833      	ldreq	r3, [r6, #0]
 800caea:	1aed      	subeq	r5, r5, r3
 800caec:	68a3      	ldr	r3, [r4, #8]
 800caee:	bf0c      	ite	eq
 800caf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800caf4:	2500      	movne	r5, #0
 800caf6:	4293      	cmp	r3, r2
 800caf8:	bfc4      	itt	gt
 800cafa:	1a9b      	subgt	r3, r3, r2
 800cafc:	18ed      	addgt	r5, r5, r3
 800cafe:	2600      	movs	r6, #0
 800cb00:	341a      	adds	r4, #26
 800cb02:	42b5      	cmp	r5, r6
 800cb04:	d11a      	bne.n	800cb3c <_printf_common+0xc8>
 800cb06:	2000      	movs	r0, #0
 800cb08:	e008      	b.n	800cb1c <_printf_common+0xa8>
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	4652      	mov	r2, sl
 800cb0e:	4649      	mov	r1, r9
 800cb10:	4638      	mov	r0, r7
 800cb12:	47c0      	blx	r8
 800cb14:	3001      	adds	r0, #1
 800cb16:	d103      	bne.n	800cb20 <_printf_common+0xac>
 800cb18:	f04f 30ff 	mov.w	r0, #4294967295
 800cb1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb20:	3501      	adds	r5, #1
 800cb22:	e7c6      	b.n	800cab2 <_printf_common+0x3e>
 800cb24:	18e1      	adds	r1, r4, r3
 800cb26:	1c5a      	adds	r2, r3, #1
 800cb28:	2030      	movs	r0, #48	; 0x30
 800cb2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb2e:	4422      	add	r2, r4
 800cb30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb38:	3302      	adds	r3, #2
 800cb3a:	e7c7      	b.n	800cacc <_printf_common+0x58>
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	4622      	mov	r2, r4
 800cb40:	4649      	mov	r1, r9
 800cb42:	4638      	mov	r0, r7
 800cb44:	47c0      	blx	r8
 800cb46:	3001      	adds	r0, #1
 800cb48:	d0e6      	beq.n	800cb18 <_printf_common+0xa4>
 800cb4a:	3601      	adds	r6, #1
 800cb4c:	e7d9      	b.n	800cb02 <_printf_common+0x8e>
	...

0800cb50 <_printf_i>:
 800cb50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb54:	7e0f      	ldrb	r7, [r1, #24]
 800cb56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb58:	2f78      	cmp	r7, #120	; 0x78
 800cb5a:	4691      	mov	r9, r2
 800cb5c:	4680      	mov	r8, r0
 800cb5e:	460c      	mov	r4, r1
 800cb60:	469a      	mov	sl, r3
 800cb62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb66:	d807      	bhi.n	800cb78 <_printf_i+0x28>
 800cb68:	2f62      	cmp	r7, #98	; 0x62
 800cb6a:	d80a      	bhi.n	800cb82 <_printf_i+0x32>
 800cb6c:	2f00      	cmp	r7, #0
 800cb6e:	f000 80d4 	beq.w	800cd1a <_printf_i+0x1ca>
 800cb72:	2f58      	cmp	r7, #88	; 0x58
 800cb74:	f000 80c0 	beq.w	800ccf8 <_printf_i+0x1a8>
 800cb78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb80:	e03a      	b.n	800cbf8 <_printf_i+0xa8>
 800cb82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb86:	2b15      	cmp	r3, #21
 800cb88:	d8f6      	bhi.n	800cb78 <_printf_i+0x28>
 800cb8a:	a101      	add	r1, pc, #4	; (adr r1, 800cb90 <_printf_i+0x40>)
 800cb8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb90:	0800cbe9 	.word	0x0800cbe9
 800cb94:	0800cbfd 	.word	0x0800cbfd
 800cb98:	0800cb79 	.word	0x0800cb79
 800cb9c:	0800cb79 	.word	0x0800cb79
 800cba0:	0800cb79 	.word	0x0800cb79
 800cba4:	0800cb79 	.word	0x0800cb79
 800cba8:	0800cbfd 	.word	0x0800cbfd
 800cbac:	0800cb79 	.word	0x0800cb79
 800cbb0:	0800cb79 	.word	0x0800cb79
 800cbb4:	0800cb79 	.word	0x0800cb79
 800cbb8:	0800cb79 	.word	0x0800cb79
 800cbbc:	0800cd01 	.word	0x0800cd01
 800cbc0:	0800cc29 	.word	0x0800cc29
 800cbc4:	0800ccbb 	.word	0x0800ccbb
 800cbc8:	0800cb79 	.word	0x0800cb79
 800cbcc:	0800cb79 	.word	0x0800cb79
 800cbd0:	0800cd23 	.word	0x0800cd23
 800cbd4:	0800cb79 	.word	0x0800cb79
 800cbd8:	0800cc29 	.word	0x0800cc29
 800cbdc:	0800cb79 	.word	0x0800cb79
 800cbe0:	0800cb79 	.word	0x0800cb79
 800cbe4:	0800ccc3 	.word	0x0800ccc3
 800cbe8:	682b      	ldr	r3, [r5, #0]
 800cbea:	1d1a      	adds	r2, r3, #4
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	602a      	str	r2, [r5, #0]
 800cbf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e09f      	b.n	800cd3c <_printf_i+0x1ec>
 800cbfc:	6820      	ldr	r0, [r4, #0]
 800cbfe:	682b      	ldr	r3, [r5, #0]
 800cc00:	0607      	lsls	r7, r0, #24
 800cc02:	f103 0104 	add.w	r1, r3, #4
 800cc06:	6029      	str	r1, [r5, #0]
 800cc08:	d501      	bpl.n	800cc0e <_printf_i+0xbe>
 800cc0a:	681e      	ldr	r6, [r3, #0]
 800cc0c:	e003      	b.n	800cc16 <_printf_i+0xc6>
 800cc0e:	0646      	lsls	r6, r0, #25
 800cc10:	d5fb      	bpl.n	800cc0a <_printf_i+0xba>
 800cc12:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cc16:	2e00      	cmp	r6, #0
 800cc18:	da03      	bge.n	800cc22 <_printf_i+0xd2>
 800cc1a:	232d      	movs	r3, #45	; 0x2d
 800cc1c:	4276      	negs	r6, r6
 800cc1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc22:	485a      	ldr	r0, [pc, #360]	; (800cd8c <_printf_i+0x23c>)
 800cc24:	230a      	movs	r3, #10
 800cc26:	e012      	b.n	800cc4e <_printf_i+0xfe>
 800cc28:	682b      	ldr	r3, [r5, #0]
 800cc2a:	6820      	ldr	r0, [r4, #0]
 800cc2c:	1d19      	adds	r1, r3, #4
 800cc2e:	6029      	str	r1, [r5, #0]
 800cc30:	0605      	lsls	r5, r0, #24
 800cc32:	d501      	bpl.n	800cc38 <_printf_i+0xe8>
 800cc34:	681e      	ldr	r6, [r3, #0]
 800cc36:	e002      	b.n	800cc3e <_printf_i+0xee>
 800cc38:	0641      	lsls	r1, r0, #25
 800cc3a:	d5fb      	bpl.n	800cc34 <_printf_i+0xe4>
 800cc3c:	881e      	ldrh	r6, [r3, #0]
 800cc3e:	4853      	ldr	r0, [pc, #332]	; (800cd8c <_printf_i+0x23c>)
 800cc40:	2f6f      	cmp	r7, #111	; 0x6f
 800cc42:	bf0c      	ite	eq
 800cc44:	2308      	moveq	r3, #8
 800cc46:	230a      	movne	r3, #10
 800cc48:	2100      	movs	r1, #0
 800cc4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc4e:	6865      	ldr	r5, [r4, #4]
 800cc50:	60a5      	str	r5, [r4, #8]
 800cc52:	2d00      	cmp	r5, #0
 800cc54:	bfa2      	ittt	ge
 800cc56:	6821      	ldrge	r1, [r4, #0]
 800cc58:	f021 0104 	bicge.w	r1, r1, #4
 800cc5c:	6021      	strge	r1, [r4, #0]
 800cc5e:	b90e      	cbnz	r6, 800cc64 <_printf_i+0x114>
 800cc60:	2d00      	cmp	r5, #0
 800cc62:	d04b      	beq.n	800ccfc <_printf_i+0x1ac>
 800cc64:	4615      	mov	r5, r2
 800cc66:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc6a:	fb03 6711 	mls	r7, r3, r1, r6
 800cc6e:	5dc7      	ldrb	r7, [r0, r7]
 800cc70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc74:	4637      	mov	r7, r6
 800cc76:	42bb      	cmp	r3, r7
 800cc78:	460e      	mov	r6, r1
 800cc7a:	d9f4      	bls.n	800cc66 <_printf_i+0x116>
 800cc7c:	2b08      	cmp	r3, #8
 800cc7e:	d10b      	bne.n	800cc98 <_printf_i+0x148>
 800cc80:	6823      	ldr	r3, [r4, #0]
 800cc82:	07de      	lsls	r6, r3, #31
 800cc84:	d508      	bpl.n	800cc98 <_printf_i+0x148>
 800cc86:	6923      	ldr	r3, [r4, #16]
 800cc88:	6861      	ldr	r1, [r4, #4]
 800cc8a:	4299      	cmp	r1, r3
 800cc8c:	bfde      	ittt	le
 800cc8e:	2330      	movle	r3, #48	; 0x30
 800cc90:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc94:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cc98:	1b52      	subs	r2, r2, r5
 800cc9a:	6122      	str	r2, [r4, #16]
 800cc9c:	f8cd a000 	str.w	sl, [sp]
 800cca0:	464b      	mov	r3, r9
 800cca2:	aa03      	add	r2, sp, #12
 800cca4:	4621      	mov	r1, r4
 800cca6:	4640      	mov	r0, r8
 800cca8:	f7ff fee4 	bl	800ca74 <_printf_common>
 800ccac:	3001      	adds	r0, #1
 800ccae:	d14a      	bne.n	800cd46 <_printf_i+0x1f6>
 800ccb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb4:	b004      	add	sp, #16
 800ccb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccba:	6823      	ldr	r3, [r4, #0]
 800ccbc:	f043 0320 	orr.w	r3, r3, #32
 800ccc0:	6023      	str	r3, [r4, #0]
 800ccc2:	4833      	ldr	r0, [pc, #204]	; (800cd90 <_printf_i+0x240>)
 800ccc4:	2778      	movs	r7, #120	; 0x78
 800ccc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ccca:	6823      	ldr	r3, [r4, #0]
 800cccc:	6829      	ldr	r1, [r5, #0]
 800ccce:	061f      	lsls	r7, r3, #24
 800ccd0:	f851 6b04 	ldr.w	r6, [r1], #4
 800ccd4:	d402      	bmi.n	800ccdc <_printf_i+0x18c>
 800ccd6:	065f      	lsls	r7, r3, #25
 800ccd8:	bf48      	it	mi
 800ccda:	b2b6      	uxthmi	r6, r6
 800ccdc:	07df      	lsls	r7, r3, #31
 800ccde:	bf48      	it	mi
 800cce0:	f043 0320 	orrmi.w	r3, r3, #32
 800cce4:	6029      	str	r1, [r5, #0]
 800cce6:	bf48      	it	mi
 800cce8:	6023      	strmi	r3, [r4, #0]
 800ccea:	b91e      	cbnz	r6, 800ccf4 <_printf_i+0x1a4>
 800ccec:	6823      	ldr	r3, [r4, #0]
 800ccee:	f023 0320 	bic.w	r3, r3, #32
 800ccf2:	6023      	str	r3, [r4, #0]
 800ccf4:	2310      	movs	r3, #16
 800ccf6:	e7a7      	b.n	800cc48 <_printf_i+0xf8>
 800ccf8:	4824      	ldr	r0, [pc, #144]	; (800cd8c <_printf_i+0x23c>)
 800ccfa:	e7e4      	b.n	800ccc6 <_printf_i+0x176>
 800ccfc:	4615      	mov	r5, r2
 800ccfe:	e7bd      	b.n	800cc7c <_printf_i+0x12c>
 800cd00:	682b      	ldr	r3, [r5, #0]
 800cd02:	6826      	ldr	r6, [r4, #0]
 800cd04:	6961      	ldr	r1, [r4, #20]
 800cd06:	1d18      	adds	r0, r3, #4
 800cd08:	6028      	str	r0, [r5, #0]
 800cd0a:	0635      	lsls	r5, r6, #24
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	d501      	bpl.n	800cd14 <_printf_i+0x1c4>
 800cd10:	6019      	str	r1, [r3, #0]
 800cd12:	e002      	b.n	800cd1a <_printf_i+0x1ca>
 800cd14:	0670      	lsls	r0, r6, #25
 800cd16:	d5fb      	bpl.n	800cd10 <_printf_i+0x1c0>
 800cd18:	8019      	strh	r1, [r3, #0]
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	6123      	str	r3, [r4, #16]
 800cd1e:	4615      	mov	r5, r2
 800cd20:	e7bc      	b.n	800cc9c <_printf_i+0x14c>
 800cd22:	682b      	ldr	r3, [r5, #0]
 800cd24:	1d1a      	adds	r2, r3, #4
 800cd26:	602a      	str	r2, [r5, #0]
 800cd28:	681d      	ldr	r5, [r3, #0]
 800cd2a:	6862      	ldr	r2, [r4, #4]
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	4628      	mov	r0, r5
 800cd30:	f7f3 fa56 	bl	80001e0 <memchr>
 800cd34:	b108      	cbz	r0, 800cd3a <_printf_i+0x1ea>
 800cd36:	1b40      	subs	r0, r0, r5
 800cd38:	6060      	str	r0, [r4, #4]
 800cd3a:	6863      	ldr	r3, [r4, #4]
 800cd3c:	6123      	str	r3, [r4, #16]
 800cd3e:	2300      	movs	r3, #0
 800cd40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd44:	e7aa      	b.n	800cc9c <_printf_i+0x14c>
 800cd46:	6923      	ldr	r3, [r4, #16]
 800cd48:	462a      	mov	r2, r5
 800cd4a:	4649      	mov	r1, r9
 800cd4c:	4640      	mov	r0, r8
 800cd4e:	47d0      	blx	sl
 800cd50:	3001      	adds	r0, #1
 800cd52:	d0ad      	beq.n	800ccb0 <_printf_i+0x160>
 800cd54:	6823      	ldr	r3, [r4, #0]
 800cd56:	079b      	lsls	r3, r3, #30
 800cd58:	d413      	bmi.n	800cd82 <_printf_i+0x232>
 800cd5a:	68e0      	ldr	r0, [r4, #12]
 800cd5c:	9b03      	ldr	r3, [sp, #12]
 800cd5e:	4298      	cmp	r0, r3
 800cd60:	bfb8      	it	lt
 800cd62:	4618      	movlt	r0, r3
 800cd64:	e7a6      	b.n	800ccb4 <_printf_i+0x164>
 800cd66:	2301      	movs	r3, #1
 800cd68:	4632      	mov	r2, r6
 800cd6a:	4649      	mov	r1, r9
 800cd6c:	4640      	mov	r0, r8
 800cd6e:	47d0      	blx	sl
 800cd70:	3001      	adds	r0, #1
 800cd72:	d09d      	beq.n	800ccb0 <_printf_i+0x160>
 800cd74:	3501      	adds	r5, #1
 800cd76:	68e3      	ldr	r3, [r4, #12]
 800cd78:	9903      	ldr	r1, [sp, #12]
 800cd7a:	1a5b      	subs	r3, r3, r1
 800cd7c:	42ab      	cmp	r3, r5
 800cd7e:	dcf2      	bgt.n	800cd66 <_printf_i+0x216>
 800cd80:	e7eb      	b.n	800cd5a <_printf_i+0x20a>
 800cd82:	2500      	movs	r5, #0
 800cd84:	f104 0619 	add.w	r6, r4, #25
 800cd88:	e7f5      	b.n	800cd76 <_printf_i+0x226>
 800cd8a:	bf00      	nop
 800cd8c:	0800f29a 	.word	0x0800f29a
 800cd90:	0800f2ab 	.word	0x0800f2ab

0800cd94 <std>:
 800cd94:	2300      	movs	r3, #0
 800cd96:	b510      	push	{r4, lr}
 800cd98:	4604      	mov	r4, r0
 800cd9a:	e9c0 3300 	strd	r3, r3, [r0]
 800cd9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cda2:	6083      	str	r3, [r0, #8]
 800cda4:	8181      	strh	r1, [r0, #12]
 800cda6:	6643      	str	r3, [r0, #100]	; 0x64
 800cda8:	81c2      	strh	r2, [r0, #14]
 800cdaa:	6183      	str	r3, [r0, #24]
 800cdac:	4619      	mov	r1, r3
 800cdae:	2208      	movs	r2, #8
 800cdb0:	305c      	adds	r0, #92	; 0x5c
 800cdb2:	f000 f928 	bl	800d006 <memset>
 800cdb6:	4b0d      	ldr	r3, [pc, #52]	; (800cdec <std+0x58>)
 800cdb8:	6263      	str	r3, [r4, #36]	; 0x24
 800cdba:	4b0d      	ldr	r3, [pc, #52]	; (800cdf0 <std+0x5c>)
 800cdbc:	62a3      	str	r3, [r4, #40]	; 0x28
 800cdbe:	4b0d      	ldr	r3, [pc, #52]	; (800cdf4 <std+0x60>)
 800cdc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cdc2:	4b0d      	ldr	r3, [pc, #52]	; (800cdf8 <std+0x64>)
 800cdc4:	6323      	str	r3, [r4, #48]	; 0x30
 800cdc6:	4b0d      	ldr	r3, [pc, #52]	; (800cdfc <std+0x68>)
 800cdc8:	6224      	str	r4, [r4, #32]
 800cdca:	429c      	cmp	r4, r3
 800cdcc:	d006      	beq.n	800cddc <std+0x48>
 800cdce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cdd2:	4294      	cmp	r4, r2
 800cdd4:	d002      	beq.n	800cddc <std+0x48>
 800cdd6:	33d0      	adds	r3, #208	; 0xd0
 800cdd8:	429c      	cmp	r4, r3
 800cdda:	d105      	bne.n	800cde8 <std+0x54>
 800cddc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cde0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cde4:	f000 b98c 	b.w	800d100 <__retarget_lock_init_recursive>
 800cde8:	bd10      	pop	{r4, pc}
 800cdea:	bf00      	nop
 800cdec:	0800cf81 	.word	0x0800cf81
 800cdf0:	0800cfa3 	.word	0x0800cfa3
 800cdf4:	0800cfdb 	.word	0x0800cfdb
 800cdf8:	0800cfff 	.word	0x0800cfff
 800cdfc:	20002184 	.word	0x20002184

0800ce00 <stdio_exit_handler>:
 800ce00:	4a02      	ldr	r2, [pc, #8]	; (800ce0c <stdio_exit_handler+0xc>)
 800ce02:	4903      	ldr	r1, [pc, #12]	; (800ce10 <stdio_exit_handler+0x10>)
 800ce04:	4803      	ldr	r0, [pc, #12]	; (800ce14 <stdio_exit_handler+0x14>)
 800ce06:	f000 b869 	b.w	800cedc <_fwalk_sglue>
 800ce0a:	bf00      	nop
 800ce0c:	20000124 	.word	0x20000124
 800ce10:	0800eab1 	.word	0x0800eab1
 800ce14:	20000130 	.word	0x20000130

0800ce18 <cleanup_stdio>:
 800ce18:	6841      	ldr	r1, [r0, #4]
 800ce1a:	4b0c      	ldr	r3, [pc, #48]	; (800ce4c <cleanup_stdio+0x34>)
 800ce1c:	4299      	cmp	r1, r3
 800ce1e:	b510      	push	{r4, lr}
 800ce20:	4604      	mov	r4, r0
 800ce22:	d001      	beq.n	800ce28 <cleanup_stdio+0x10>
 800ce24:	f001 fe44 	bl	800eab0 <_fflush_r>
 800ce28:	68a1      	ldr	r1, [r4, #8]
 800ce2a:	4b09      	ldr	r3, [pc, #36]	; (800ce50 <cleanup_stdio+0x38>)
 800ce2c:	4299      	cmp	r1, r3
 800ce2e:	d002      	beq.n	800ce36 <cleanup_stdio+0x1e>
 800ce30:	4620      	mov	r0, r4
 800ce32:	f001 fe3d 	bl	800eab0 <_fflush_r>
 800ce36:	68e1      	ldr	r1, [r4, #12]
 800ce38:	4b06      	ldr	r3, [pc, #24]	; (800ce54 <cleanup_stdio+0x3c>)
 800ce3a:	4299      	cmp	r1, r3
 800ce3c:	d004      	beq.n	800ce48 <cleanup_stdio+0x30>
 800ce3e:	4620      	mov	r0, r4
 800ce40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce44:	f001 be34 	b.w	800eab0 <_fflush_r>
 800ce48:	bd10      	pop	{r4, pc}
 800ce4a:	bf00      	nop
 800ce4c:	20002184 	.word	0x20002184
 800ce50:	200021ec 	.word	0x200021ec
 800ce54:	20002254 	.word	0x20002254

0800ce58 <global_stdio_init.part.0>:
 800ce58:	b510      	push	{r4, lr}
 800ce5a:	4b0b      	ldr	r3, [pc, #44]	; (800ce88 <global_stdio_init.part.0+0x30>)
 800ce5c:	4c0b      	ldr	r4, [pc, #44]	; (800ce8c <global_stdio_init.part.0+0x34>)
 800ce5e:	4a0c      	ldr	r2, [pc, #48]	; (800ce90 <global_stdio_init.part.0+0x38>)
 800ce60:	601a      	str	r2, [r3, #0]
 800ce62:	4620      	mov	r0, r4
 800ce64:	2200      	movs	r2, #0
 800ce66:	2104      	movs	r1, #4
 800ce68:	f7ff ff94 	bl	800cd94 <std>
 800ce6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ce70:	2201      	movs	r2, #1
 800ce72:	2109      	movs	r1, #9
 800ce74:	f7ff ff8e 	bl	800cd94 <std>
 800ce78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ce7c:	2202      	movs	r2, #2
 800ce7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce82:	2112      	movs	r1, #18
 800ce84:	f7ff bf86 	b.w	800cd94 <std>
 800ce88:	200022bc 	.word	0x200022bc
 800ce8c:	20002184 	.word	0x20002184
 800ce90:	0800ce01 	.word	0x0800ce01

0800ce94 <__sfp_lock_acquire>:
 800ce94:	4801      	ldr	r0, [pc, #4]	; (800ce9c <__sfp_lock_acquire+0x8>)
 800ce96:	f000 b934 	b.w	800d102 <__retarget_lock_acquire_recursive>
 800ce9a:	bf00      	nop
 800ce9c:	200022c5 	.word	0x200022c5

0800cea0 <__sfp_lock_release>:
 800cea0:	4801      	ldr	r0, [pc, #4]	; (800cea8 <__sfp_lock_release+0x8>)
 800cea2:	f000 b92f 	b.w	800d104 <__retarget_lock_release_recursive>
 800cea6:	bf00      	nop
 800cea8:	200022c5 	.word	0x200022c5

0800ceac <__sinit>:
 800ceac:	b510      	push	{r4, lr}
 800ceae:	4604      	mov	r4, r0
 800ceb0:	f7ff fff0 	bl	800ce94 <__sfp_lock_acquire>
 800ceb4:	6a23      	ldr	r3, [r4, #32]
 800ceb6:	b11b      	cbz	r3, 800cec0 <__sinit+0x14>
 800ceb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cebc:	f7ff bff0 	b.w	800cea0 <__sfp_lock_release>
 800cec0:	4b04      	ldr	r3, [pc, #16]	; (800ced4 <__sinit+0x28>)
 800cec2:	6223      	str	r3, [r4, #32]
 800cec4:	4b04      	ldr	r3, [pc, #16]	; (800ced8 <__sinit+0x2c>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d1f5      	bne.n	800ceb8 <__sinit+0xc>
 800cecc:	f7ff ffc4 	bl	800ce58 <global_stdio_init.part.0>
 800ced0:	e7f2      	b.n	800ceb8 <__sinit+0xc>
 800ced2:	bf00      	nop
 800ced4:	0800ce19 	.word	0x0800ce19
 800ced8:	200022bc 	.word	0x200022bc

0800cedc <_fwalk_sglue>:
 800cedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cee0:	4607      	mov	r7, r0
 800cee2:	4688      	mov	r8, r1
 800cee4:	4614      	mov	r4, r2
 800cee6:	2600      	movs	r6, #0
 800cee8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ceec:	f1b9 0901 	subs.w	r9, r9, #1
 800cef0:	d505      	bpl.n	800cefe <_fwalk_sglue+0x22>
 800cef2:	6824      	ldr	r4, [r4, #0]
 800cef4:	2c00      	cmp	r4, #0
 800cef6:	d1f7      	bne.n	800cee8 <_fwalk_sglue+0xc>
 800cef8:	4630      	mov	r0, r6
 800cefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cefe:	89ab      	ldrh	r3, [r5, #12]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d907      	bls.n	800cf14 <_fwalk_sglue+0x38>
 800cf04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	d003      	beq.n	800cf14 <_fwalk_sglue+0x38>
 800cf0c:	4629      	mov	r1, r5
 800cf0e:	4638      	mov	r0, r7
 800cf10:	47c0      	blx	r8
 800cf12:	4306      	orrs	r6, r0
 800cf14:	3568      	adds	r5, #104	; 0x68
 800cf16:	e7e9      	b.n	800ceec <_fwalk_sglue+0x10>

0800cf18 <sniprintf>:
 800cf18:	b40c      	push	{r2, r3}
 800cf1a:	b530      	push	{r4, r5, lr}
 800cf1c:	4b17      	ldr	r3, [pc, #92]	; (800cf7c <sniprintf+0x64>)
 800cf1e:	1e0c      	subs	r4, r1, #0
 800cf20:	681d      	ldr	r5, [r3, #0]
 800cf22:	b09d      	sub	sp, #116	; 0x74
 800cf24:	da08      	bge.n	800cf38 <sniprintf+0x20>
 800cf26:	238b      	movs	r3, #139	; 0x8b
 800cf28:	602b      	str	r3, [r5, #0]
 800cf2a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf2e:	b01d      	add	sp, #116	; 0x74
 800cf30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf34:	b002      	add	sp, #8
 800cf36:	4770      	bx	lr
 800cf38:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cf3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cf40:	bf14      	ite	ne
 800cf42:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cf46:	4623      	moveq	r3, r4
 800cf48:	9304      	str	r3, [sp, #16]
 800cf4a:	9307      	str	r3, [sp, #28]
 800cf4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf50:	9002      	str	r0, [sp, #8]
 800cf52:	9006      	str	r0, [sp, #24]
 800cf54:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cf58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cf5a:	ab21      	add	r3, sp, #132	; 0x84
 800cf5c:	a902      	add	r1, sp, #8
 800cf5e:	4628      	mov	r0, r5
 800cf60:	9301      	str	r3, [sp, #4]
 800cf62:	f001 fc21 	bl	800e7a8 <_svfiprintf_r>
 800cf66:	1c43      	adds	r3, r0, #1
 800cf68:	bfbc      	itt	lt
 800cf6a:	238b      	movlt	r3, #139	; 0x8b
 800cf6c:	602b      	strlt	r3, [r5, #0]
 800cf6e:	2c00      	cmp	r4, #0
 800cf70:	d0dd      	beq.n	800cf2e <sniprintf+0x16>
 800cf72:	9b02      	ldr	r3, [sp, #8]
 800cf74:	2200      	movs	r2, #0
 800cf76:	701a      	strb	r2, [r3, #0]
 800cf78:	e7d9      	b.n	800cf2e <sniprintf+0x16>
 800cf7a:	bf00      	nop
 800cf7c:	2000017c 	.word	0x2000017c

0800cf80 <__sread>:
 800cf80:	b510      	push	{r4, lr}
 800cf82:	460c      	mov	r4, r1
 800cf84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf88:	f000 f86c 	bl	800d064 <_read_r>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	bfab      	itete	ge
 800cf90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf92:	89a3      	ldrhlt	r3, [r4, #12]
 800cf94:	181b      	addge	r3, r3, r0
 800cf96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf9a:	bfac      	ite	ge
 800cf9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf9e:	81a3      	strhlt	r3, [r4, #12]
 800cfa0:	bd10      	pop	{r4, pc}

0800cfa2 <__swrite>:
 800cfa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfa6:	461f      	mov	r7, r3
 800cfa8:	898b      	ldrh	r3, [r1, #12]
 800cfaa:	05db      	lsls	r3, r3, #23
 800cfac:	4605      	mov	r5, r0
 800cfae:	460c      	mov	r4, r1
 800cfb0:	4616      	mov	r6, r2
 800cfb2:	d505      	bpl.n	800cfc0 <__swrite+0x1e>
 800cfb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfb8:	2302      	movs	r3, #2
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f000 f840 	bl	800d040 <_lseek_r>
 800cfc0:	89a3      	ldrh	r3, [r4, #12]
 800cfc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfca:	81a3      	strh	r3, [r4, #12]
 800cfcc:	4632      	mov	r2, r6
 800cfce:	463b      	mov	r3, r7
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd6:	f000 b857 	b.w	800d088 <_write_r>

0800cfda <__sseek>:
 800cfda:	b510      	push	{r4, lr}
 800cfdc:	460c      	mov	r4, r1
 800cfde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfe2:	f000 f82d 	bl	800d040 <_lseek_r>
 800cfe6:	1c43      	adds	r3, r0, #1
 800cfe8:	89a3      	ldrh	r3, [r4, #12]
 800cfea:	bf15      	itete	ne
 800cfec:	6560      	strne	r0, [r4, #84]	; 0x54
 800cfee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cff6:	81a3      	strheq	r3, [r4, #12]
 800cff8:	bf18      	it	ne
 800cffa:	81a3      	strhne	r3, [r4, #12]
 800cffc:	bd10      	pop	{r4, pc}

0800cffe <__sclose>:
 800cffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d002:	f000 b80d 	b.w	800d020 <_close_r>

0800d006 <memset>:
 800d006:	4402      	add	r2, r0
 800d008:	4603      	mov	r3, r0
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d100      	bne.n	800d010 <memset+0xa>
 800d00e:	4770      	bx	lr
 800d010:	f803 1b01 	strb.w	r1, [r3], #1
 800d014:	e7f9      	b.n	800d00a <memset+0x4>
	...

0800d018 <_localeconv_r>:
 800d018:	4800      	ldr	r0, [pc, #0]	; (800d01c <_localeconv_r+0x4>)
 800d01a:	4770      	bx	lr
 800d01c:	20000270 	.word	0x20000270

0800d020 <_close_r>:
 800d020:	b538      	push	{r3, r4, r5, lr}
 800d022:	4d06      	ldr	r5, [pc, #24]	; (800d03c <_close_r+0x1c>)
 800d024:	2300      	movs	r3, #0
 800d026:	4604      	mov	r4, r0
 800d028:	4608      	mov	r0, r1
 800d02a:	602b      	str	r3, [r5, #0]
 800d02c:	f7f4 ff73 	bl	8001f16 <_close>
 800d030:	1c43      	adds	r3, r0, #1
 800d032:	d102      	bne.n	800d03a <_close_r+0x1a>
 800d034:	682b      	ldr	r3, [r5, #0]
 800d036:	b103      	cbz	r3, 800d03a <_close_r+0x1a>
 800d038:	6023      	str	r3, [r4, #0]
 800d03a:	bd38      	pop	{r3, r4, r5, pc}
 800d03c:	200022c0 	.word	0x200022c0

0800d040 <_lseek_r>:
 800d040:	b538      	push	{r3, r4, r5, lr}
 800d042:	4d07      	ldr	r5, [pc, #28]	; (800d060 <_lseek_r+0x20>)
 800d044:	4604      	mov	r4, r0
 800d046:	4608      	mov	r0, r1
 800d048:	4611      	mov	r1, r2
 800d04a:	2200      	movs	r2, #0
 800d04c:	602a      	str	r2, [r5, #0]
 800d04e:	461a      	mov	r2, r3
 800d050:	f7f4 ff88 	bl	8001f64 <_lseek>
 800d054:	1c43      	adds	r3, r0, #1
 800d056:	d102      	bne.n	800d05e <_lseek_r+0x1e>
 800d058:	682b      	ldr	r3, [r5, #0]
 800d05a:	b103      	cbz	r3, 800d05e <_lseek_r+0x1e>
 800d05c:	6023      	str	r3, [r4, #0]
 800d05e:	bd38      	pop	{r3, r4, r5, pc}
 800d060:	200022c0 	.word	0x200022c0

0800d064 <_read_r>:
 800d064:	b538      	push	{r3, r4, r5, lr}
 800d066:	4d07      	ldr	r5, [pc, #28]	; (800d084 <_read_r+0x20>)
 800d068:	4604      	mov	r4, r0
 800d06a:	4608      	mov	r0, r1
 800d06c:	4611      	mov	r1, r2
 800d06e:	2200      	movs	r2, #0
 800d070:	602a      	str	r2, [r5, #0]
 800d072:	461a      	mov	r2, r3
 800d074:	f7f4 ff16 	bl	8001ea4 <_read>
 800d078:	1c43      	adds	r3, r0, #1
 800d07a:	d102      	bne.n	800d082 <_read_r+0x1e>
 800d07c:	682b      	ldr	r3, [r5, #0]
 800d07e:	b103      	cbz	r3, 800d082 <_read_r+0x1e>
 800d080:	6023      	str	r3, [r4, #0]
 800d082:	bd38      	pop	{r3, r4, r5, pc}
 800d084:	200022c0 	.word	0x200022c0

0800d088 <_write_r>:
 800d088:	b538      	push	{r3, r4, r5, lr}
 800d08a:	4d07      	ldr	r5, [pc, #28]	; (800d0a8 <_write_r+0x20>)
 800d08c:	4604      	mov	r4, r0
 800d08e:	4608      	mov	r0, r1
 800d090:	4611      	mov	r1, r2
 800d092:	2200      	movs	r2, #0
 800d094:	602a      	str	r2, [r5, #0]
 800d096:	461a      	mov	r2, r3
 800d098:	f7f4 ff21 	bl	8001ede <_write>
 800d09c:	1c43      	adds	r3, r0, #1
 800d09e:	d102      	bne.n	800d0a6 <_write_r+0x1e>
 800d0a0:	682b      	ldr	r3, [r5, #0]
 800d0a2:	b103      	cbz	r3, 800d0a6 <_write_r+0x1e>
 800d0a4:	6023      	str	r3, [r4, #0]
 800d0a6:	bd38      	pop	{r3, r4, r5, pc}
 800d0a8:	200022c0 	.word	0x200022c0

0800d0ac <__errno>:
 800d0ac:	4b01      	ldr	r3, [pc, #4]	; (800d0b4 <__errno+0x8>)
 800d0ae:	6818      	ldr	r0, [r3, #0]
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	2000017c 	.word	0x2000017c

0800d0b8 <__libc_init_array>:
 800d0b8:	b570      	push	{r4, r5, r6, lr}
 800d0ba:	4d0d      	ldr	r5, [pc, #52]	; (800d0f0 <__libc_init_array+0x38>)
 800d0bc:	4c0d      	ldr	r4, [pc, #52]	; (800d0f4 <__libc_init_array+0x3c>)
 800d0be:	1b64      	subs	r4, r4, r5
 800d0c0:	10a4      	asrs	r4, r4, #2
 800d0c2:	2600      	movs	r6, #0
 800d0c4:	42a6      	cmp	r6, r4
 800d0c6:	d109      	bne.n	800d0dc <__libc_init_array+0x24>
 800d0c8:	4d0b      	ldr	r5, [pc, #44]	; (800d0f8 <__libc_init_array+0x40>)
 800d0ca:	4c0c      	ldr	r4, [pc, #48]	; (800d0fc <__libc_init_array+0x44>)
 800d0cc:	f002 f894 	bl	800f1f8 <_init>
 800d0d0:	1b64      	subs	r4, r4, r5
 800d0d2:	10a4      	asrs	r4, r4, #2
 800d0d4:	2600      	movs	r6, #0
 800d0d6:	42a6      	cmp	r6, r4
 800d0d8:	d105      	bne.n	800d0e6 <__libc_init_array+0x2e>
 800d0da:	bd70      	pop	{r4, r5, r6, pc}
 800d0dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0e0:	4798      	blx	r3
 800d0e2:	3601      	adds	r6, #1
 800d0e4:	e7ee      	b.n	800d0c4 <__libc_init_array+0xc>
 800d0e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0ea:	4798      	blx	r3
 800d0ec:	3601      	adds	r6, #1
 800d0ee:	e7f2      	b.n	800d0d6 <__libc_init_array+0x1e>
 800d0f0:	0800f604 	.word	0x0800f604
 800d0f4:	0800f604 	.word	0x0800f604
 800d0f8:	0800f604 	.word	0x0800f604
 800d0fc:	0800f608 	.word	0x0800f608

0800d100 <__retarget_lock_init_recursive>:
 800d100:	4770      	bx	lr

0800d102 <__retarget_lock_acquire_recursive>:
 800d102:	4770      	bx	lr

0800d104 <__retarget_lock_release_recursive>:
 800d104:	4770      	bx	lr

0800d106 <quorem>:
 800d106:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10a:	6903      	ldr	r3, [r0, #16]
 800d10c:	690c      	ldr	r4, [r1, #16]
 800d10e:	42a3      	cmp	r3, r4
 800d110:	4607      	mov	r7, r0
 800d112:	db7e      	blt.n	800d212 <quorem+0x10c>
 800d114:	3c01      	subs	r4, #1
 800d116:	f101 0814 	add.w	r8, r1, #20
 800d11a:	f100 0514 	add.w	r5, r0, #20
 800d11e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d122:	9301      	str	r3, [sp, #4]
 800d124:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d128:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d12c:	3301      	adds	r3, #1
 800d12e:	429a      	cmp	r2, r3
 800d130:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d134:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d138:	fbb2 f6f3 	udiv	r6, r2, r3
 800d13c:	d331      	bcc.n	800d1a2 <quorem+0x9c>
 800d13e:	f04f 0e00 	mov.w	lr, #0
 800d142:	4640      	mov	r0, r8
 800d144:	46ac      	mov	ip, r5
 800d146:	46f2      	mov	sl, lr
 800d148:	f850 2b04 	ldr.w	r2, [r0], #4
 800d14c:	b293      	uxth	r3, r2
 800d14e:	fb06 e303 	mla	r3, r6, r3, lr
 800d152:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d156:	0c1a      	lsrs	r2, r3, #16
 800d158:	b29b      	uxth	r3, r3
 800d15a:	ebaa 0303 	sub.w	r3, sl, r3
 800d15e:	f8dc a000 	ldr.w	sl, [ip]
 800d162:	fa13 f38a 	uxtah	r3, r3, sl
 800d166:	fb06 220e 	mla	r2, r6, lr, r2
 800d16a:	9300      	str	r3, [sp, #0]
 800d16c:	9b00      	ldr	r3, [sp, #0]
 800d16e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d172:	b292      	uxth	r2, r2
 800d174:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d178:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d17c:	f8bd 3000 	ldrh.w	r3, [sp]
 800d180:	4581      	cmp	r9, r0
 800d182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d186:	f84c 3b04 	str.w	r3, [ip], #4
 800d18a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d18e:	d2db      	bcs.n	800d148 <quorem+0x42>
 800d190:	f855 300b 	ldr.w	r3, [r5, fp]
 800d194:	b92b      	cbnz	r3, 800d1a2 <quorem+0x9c>
 800d196:	9b01      	ldr	r3, [sp, #4]
 800d198:	3b04      	subs	r3, #4
 800d19a:	429d      	cmp	r5, r3
 800d19c:	461a      	mov	r2, r3
 800d19e:	d32c      	bcc.n	800d1fa <quorem+0xf4>
 800d1a0:	613c      	str	r4, [r7, #16]
 800d1a2:	4638      	mov	r0, r7
 800d1a4:	f001 f9a6 	bl	800e4f4 <__mcmp>
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	db22      	blt.n	800d1f2 <quorem+0xec>
 800d1ac:	3601      	adds	r6, #1
 800d1ae:	4629      	mov	r1, r5
 800d1b0:	2000      	movs	r0, #0
 800d1b2:	f858 2b04 	ldr.w	r2, [r8], #4
 800d1b6:	f8d1 c000 	ldr.w	ip, [r1]
 800d1ba:	b293      	uxth	r3, r2
 800d1bc:	1ac3      	subs	r3, r0, r3
 800d1be:	0c12      	lsrs	r2, r2, #16
 800d1c0:	fa13 f38c 	uxtah	r3, r3, ip
 800d1c4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d1c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1d2:	45c1      	cmp	r9, r8
 800d1d4:	f841 3b04 	str.w	r3, [r1], #4
 800d1d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d1dc:	d2e9      	bcs.n	800d1b2 <quorem+0xac>
 800d1de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d1e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d1e6:	b922      	cbnz	r2, 800d1f2 <quorem+0xec>
 800d1e8:	3b04      	subs	r3, #4
 800d1ea:	429d      	cmp	r5, r3
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	d30a      	bcc.n	800d206 <quorem+0x100>
 800d1f0:	613c      	str	r4, [r7, #16]
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	b003      	add	sp, #12
 800d1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1fa:	6812      	ldr	r2, [r2, #0]
 800d1fc:	3b04      	subs	r3, #4
 800d1fe:	2a00      	cmp	r2, #0
 800d200:	d1ce      	bne.n	800d1a0 <quorem+0x9a>
 800d202:	3c01      	subs	r4, #1
 800d204:	e7c9      	b.n	800d19a <quorem+0x94>
 800d206:	6812      	ldr	r2, [r2, #0]
 800d208:	3b04      	subs	r3, #4
 800d20a:	2a00      	cmp	r2, #0
 800d20c:	d1f0      	bne.n	800d1f0 <quorem+0xea>
 800d20e:	3c01      	subs	r4, #1
 800d210:	e7eb      	b.n	800d1ea <quorem+0xe4>
 800d212:	2000      	movs	r0, #0
 800d214:	e7ee      	b.n	800d1f4 <quorem+0xee>
	...

0800d218 <_dtoa_r>:
 800d218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d21c:	ed2d 8b04 	vpush	{d8-d9}
 800d220:	69c5      	ldr	r5, [r0, #28]
 800d222:	b093      	sub	sp, #76	; 0x4c
 800d224:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d228:	ec57 6b10 	vmov	r6, r7, d0
 800d22c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d230:	9107      	str	r1, [sp, #28]
 800d232:	4604      	mov	r4, r0
 800d234:	920a      	str	r2, [sp, #40]	; 0x28
 800d236:	930d      	str	r3, [sp, #52]	; 0x34
 800d238:	b975      	cbnz	r5, 800d258 <_dtoa_r+0x40>
 800d23a:	2010      	movs	r0, #16
 800d23c:	f000 fe2a 	bl	800de94 <malloc>
 800d240:	4602      	mov	r2, r0
 800d242:	61e0      	str	r0, [r4, #28]
 800d244:	b920      	cbnz	r0, 800d250 <_dtoa_r+0x38>
 800d246:	4bae      	ldr	r3, [pc, #696]	; (800d500 <_dtoa_r+0x2e8>)
 800d248:	21ef      	movs	r1, #239	; 0xef
 800d24a:	48ae      	ldr	r0, [pc, #696]	; (800d504 <_dtoa_r+0x2ec>)
 800d24c:	f001 fc90 	bl	800eb70 <__assert_func>
 800d250:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d254:	6005      	str	r5, [r0, #0]
 800d256:	60c5      	str	r5, [r0, #12]
 800d258:	69e3      	ldr	r3, [r4, #28]
 800d25a:	6819      	ldr	r1, [r3, #0]
 800d25c:	b151      	cbz	r1, 800d274 <_dtoa_r+0x5c>
 800d25e:	685a      	ldr	r2, [r3, #4]
 800d260:	604a      	str	r2, [r1, #4]
 800d262:	2301      	movs	r3, #1
 800d264:	4093      	lsls	r3, r2
 800d266:	608b      	str	r3, [r1, #8]
 800d268:	4620      	mov	r0, r4
 800d26a:	f000 ff07 	bl	800e07c <_Bfree>
 800d26e:	69e3      	ldr	r3, [r4, #28]
 800d270:	2200      	movs	r2, #0
 800d272:	601a      	str	r2, [r3, #0]
 800d274:	1e3b      	subs	r3, r7, #0
 800d276:	bfbb      	ittet	lt
 800d278:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d27c:	9303      	strlt	r3, [sp, #12]
 800d27e:	2300      	movge	r3, #0
 800d280:	2201      	movlt	r2, #1
 800d282:	bfac      	ite	ge
 800d284:	f8c8 3000 	strge.w	r3, [r8]
 800d288:	f8c8 2000 	strlt.w	r2, [r8]
 800d28c:	4b9e      	ldr	r3, [pc, #632]	; (800d508 <_dtoa_r+0x2f0>)
 800d28e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d292:	ea33 0308 	bics.w	r3, r3, r8
 800d296:	d11b      	bne.n	800d2d0 <_dtoa_r+0xb8>
 800d298:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d29a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d29e:	6013      	str	r3, [r2, #0]
 800d2a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d2a4:	4333      	orrs	r3, r6
 800d2a6:	f000 8593 	beq.w	800ddd0 <_dtoa_r+0xbb8>
 800d2aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2ac:	b963      	cbnz	r3, 800d2c8 <_dtoa_r+0xb0>
 800d2ae:	4b97      	ldr	r3, [pc, #604]	; (800d50c <_dtoa_r+0x2f4>)
 800d2b0:	e027      	b.n	800d302 <_dtoa_r+0xea>
 800d2b2:	4b97      	ldr	r3, [pc, #604]	; (800d510 <_dtoa_r+0x2f8>)
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	3308      	adds	r3, #8
 800d2b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d2ba:	6013      	str	r3, [r2, #0]
 800d2bc:	9800      	ldr	r0, [sp, #0]
 800d2be:	b013      	add	sp, #76	; 0x4c
 800d2c0:	ecbd 8b04 	vpop	{d8-d9}
 800d2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c8:	4b90      	ldr	r3, [pc, #576]	; (800d50c <_dtoa_r+0x2f4>)
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	3303      	adds	r3, #3
 800d2ce:	e7f3      	b.n	800d2b8 <_dtoa_r+0xa0>
 800d2d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	ec51 0b17 	vmov	r0, r1, d7
 800d2da:	eeb0 8a47 	vmov.f32	s16, s14
 800d2de:	eef0 8a67 	vmov.f32	s17, s15
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	f7f3 fbf8 	bl	8000ad8 <__aeabi_dcmpeq>
 800d2e8:	4681      	mov	r9, r0
 800d2ea:	b160      	cbz	r0, 800d306 <_dtoa_r+0xee>
 800d2ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	6013      	str	r3, [r2, #0]
 800d2f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f000 8568 	beq.w	800ddca <_dtoa_r+0xbb2>
 800d2fa:	4b86      	ldr	r3, [pc, #536]	; (800d514 <_dtoa_r+0x2fc>)
 800d2fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d2fe:	6013      	str	r3, [r2, #0]
 800d300:	3b01      	subs	r3, #1
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	e7da      	b.n	800d2bc <_dtoa_r+0xa4>
 800d306:	aa10      	add	r2, sp, #64	; 0x40
 800d308:	a911      	add	r1, sp, #68	; 0x44
 800d30a:	4620      	mov	r0, r4
 800d30c:	eeb0 0a48 	vmov.f32	s0, s16
 800d310:	eef0 0a68 	vmov.f32	s1, s17
 800d314:	f001 f994 	bl	800e640 <__d2b>
 800d318:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d31c:	4682      	mov	sl, r0
 800d31e:	2d00      	cmp	r5, #0
 800d320:	d07f      	beq.n	800d422 <_dtoa_r+0x20a>
 800d322:	ee18 3a90 	vmov	r3, s17
 800d326:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d32a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d32e:	ec51 0b18 	vmov	r0, r1, d8
 800d332:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d336:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d33a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d33e:	4619      	mov	r1, r3
 800d340:	2200      	movs	r2, #0
 800d342:	4b75      	ldr	r3, [pc, #468]	; (800d518 <_dtoa_r+0x300>)
 800d344:	f7f2 ffa8 	bl	8000298 <__aeabi_dsub>
 800d348:	a367      	add	r3, pc, #412	; (adr r3, 800d4e8 <_dtoa_r+0x2d0>)
 800d34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34e:	f7f3 f95b 	bl	8000608 <__aeabi_dmul>
 800d352:	a367      	add	r3, pc, #412	; (adr r3, 800d4f0 <_dtoa_r+0x2d8>)
 800d354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d358:	f7f2 ffa0 	bl	800029c <__adddf3>
 800d35c:	4606      	mov	r6, r0
 800d35e:	4628      	mov	r0, r5
 800d360:	460f      	mov	r7, r1
 800d362:	f7f3 f8e7 	bl	8000534 <__aeabi_i2d>
 800d366:	a364      	add	r3, pc, #400	; (adr r3, 800d4f8 <_dtoa_r+0x2e0>)
 800d368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36c:	f7f3 f94c 	bl	8000608 <__aeabi_dmul>
 800d370:	4602      	mov	r2, r0
 800d372:	460b      	mov	r3, r1
 800d374:	4630      	mov	r0, r6
 800d376:	4639      	mov	r1, r7
 800d378:	f7f2 ff90 	bl	800029c <__adddf3>
 800d37c:	4606      	mov	r6, r0
 800d37e:	460f      	mov	r7, r1
 800d380:	f7f3 fbf2 	bl	8000b68 <__aeabi_d2iz>
 800d384:	2200      	movs	r2, #0
 800d386:	4683      	mov	fp, r0
 800d388:	2300      	movs	r3, #0
 800d38a:	4630      	mov	r0, r6
 800d38c:	4639      	mov	r1, r7
 800d38e:	f7f3 fbad 	bl	8000aec <__aeabi_dcmplt>
 800d392:	b148      	cbz	r0, 800d3a8 <_dtoa_r+0x190>
 800d394:	4658      	mov	r0, fp
 800d396:	f7f3 f8cd 	bl	8000534 <__aeabi_i2d>
 800d39a:	4632      	mov	r2, r6
 800d39c:	463b      	mov	r3, r7
 800d39e:	f7f3 fb9b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3a2:	b908      	cbnz	r0, 800d3a8 <_dtoa_r+0x190>
 800d3a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d3a8:	f1bb 0f16 	cmp.w	fp, #22
 800d3ac:	d857      	bhi.n	800d45e <_dtoa_r+0x246>
 800d3ae:	4b5b      	ldr	r3, [pc, #364]	; (800d51c <_dtoa_r+0x304>)
 800d3b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b8:	ec51 0b18 	vmov	r0, r1, d8
 800d3bc:	f7f3 fb96 	bl	8000aec <__aeabi_dcmplt>
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d04e      	beq.n	800d462 <_dtoa_r+0x24a>
 800d3c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	930c      	str	r3, [sp, #48]	; 0x30
 800d3cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3ce:	1b5b      	subs	r3, r3, r5
 800d3d0:	1e5a      	subs	r2, r3, #1
 800d3d2:	bf45      	ittet	mi
 800d3d4:	f1c3 0301 	rsbmi	r3, r3, #1
 800d3d8:	9305      	strmi	r3, [sp, #20]
 800d3da:	2300      	movpl	r3, #0
 800d3dc:	2300      	movmi	r3, #0
 800d3de:	9206      	str	r2, [sp, #24]
 800d3e0:	bf54      	ite	pl
 800d3e2:	9305      	strpl	r3, [sp, #20]
 800d3e4:	9306      	strmi	r3, [sp, #24]
 800d3e6:	f1bb 0f00 	cmp.w	fp, #0
 800d3ea:	db3c      	blt.n	800d466 <_dtoa_r+0x24e>
 800d3ec:	9b06      	ldr	r3, [sp, #24]
 800d3ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d3f2:	445b      	add	r3, fp
 800d3f4:	9306      	str	r3, [sp, #24]
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	9308      	str	r3, [sp, #32]
 800d3fa:	9b07      	ldr	r3, [sp, #28]
 800d3fc:	2b09      	cmp	r3, #9
 800d3fe:	d868      	bhi.n	800d4d2 <_dtoa_r+0x2ba>
 800d400:	2b05      	cmp	r3, #5
 800d402:	bfc4      	itt	gt
 800d404:	3b04      	subgt	r3, #4
 800d406:	9307      	strgt	r3, [sp, #28]
 800d408:	9b07      	ldr	r3, [sp, #28]
 800d40a:	f1a3 0302 	sub.w	r3, r3, #2
 800d40e:	bfcc      	ite	gt
 800d410:	2500      	movgt	r5, #0
 800d412:	2501      	movle	r5, #1
 800d414:	2b03      	cmp	r3, #3
 800d416:	f200 8085 	bhi.w	800d524 <_dtoa_r+0x30c>
 800d41a:	e8df f003 	tbb	[pc, r3]
 800d41e:	3b2e      	.short	0x3b2e
 800d420:	5839      	.short	0x5839
 800d422:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d426:	441d      	add	r5, r3
 800d428:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d42c:	2b20      	cmp	r3, #32
 800d42e:	bfc1      	itttt	gt
 800d430:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d434:	fa08 f803 	lslgt.w	r8, r8, r3
 800d438:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d43c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d440:	bfd6      	itet	le
 800d442:	f1c3 0320 	rsble	r3, r3, #32
 800d446:	ea48 0003 	orrgt.w	r0, r8, r3
 800d44a:	fa06 f003 	lslle.w	r0, r6, r3
 800d44e:	f7f3 f861 	bl	8000514 <__aeabi_ui2d>
 800d452:	2201      	movs	r2, #1
 800d454:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d458:	3d01      	subs	r5, #1
 800d45a:	920e      	str	r2, [sp, #56]	; 0x38
 800d45c:	e76f      	b.n	800d33e <_dtoa_r+0x126>
 800d45e:	2301      	movs	r3, #1
 800d460:	e7b3      	b.n	800d3ca <_dtoa_r+0x1b2>
 800d462:	900c      	str	r0, [sp, #48]	; 0x30
 800d464:	e7b2      	b.n	800d3cc <_dtoa_r+0x1b4>
 800d466:	9b05      	ldr	r3, [sp, #20]
 800d468:	eba3 030b 	sub.w	r3, r3, fp
 800d46c:	9305      	str	r3, [sp, #20]
 800d46e:	f1cb 0300 	rsb	r3, fp, #0
 800d472:	9308      	str	r3, [sp, #32]
 800d474:	2300      	movs	r3, #0
 800d476:	930b      	str	r3, [sp, #44]	; 0x2c
 800d478:	e7bf      	b.n	800d3fa <_dtoa_r+0x1e2>
 800d47a:	2300      	movs	r3, #0
 800d47c:	9309      	str	r3, [sp, #36]	; 0x24
 800d47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d480:	2b00      	cmp	r3, #0
 800d482:	dc52      	bgt.n	800d52a <_dtoa_r+0x312>
 800d484:	2301      	movs	r3, #1
 800d486:	9301      	str	r3, [sp, #4]
 800d488:	9304      	str	r3, [sp, #16]
 800d48a:	461a      	mov	r2, r3
 800d48c:	920a      	str	r2, [sp, #40]	; 0x28
 800d48e:	e00b      	b.n	800d4a8 <_dtoa_r+0x290>
 800d490:	2301      	movs	r3, #1
 800d492:	e7f3      	b.n	800d47c <_dtoa_r+0x264>
 800d494:	2300      	movs	r3, #0
 800d496:	9309      	str	r3, [sp, #36]	; 0x24
 800d498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d49a:	445b      	add	r3, fp
 800d49c:	9301      	str	r3, [sp, #4]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	9304      	str	r3, [sp, #16]
 800d4a4:	bfb8      	it	lt
 800d4a6:	2301      	movlt	r3, #1
 800d4a8:	69e0      	ldr	r0, [r4, #28]
 800d4aa:	2100      	movs	r1, #0
 800d4ac:	2204      	movs	r2, #4
 800d4ae:	f102 0614 	add.w	r6, r2, #20
 800d4b2:	429e      	cmp	r6, r3
 800d4b4:	d93d      	bls.n	800d532 <_dtoa_r+0x31a>
 800d4b6:	6041      	str	r1, [r0, #4]
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f000 fd9f 	bl	800dffc <_Balloc>
 800d4be:	9000      	str	r0, [sp, #0]
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	d139      	bne.n	800d538 <_dtoa_r+0x320>
 800d4c4:	4b16      	ldr	r3, [pc, #88]	; (800d520 <_dtoa_r+0x308>)
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	f240 11af 	movw	r1, #431	; 0x1af
 800d4cc:	e6bd      	b.n	800d24a <_dtoa_r+0x32>
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	e7e1      	b.n	800d496 <_dtoa_r+0x27e>
 800d4d2:	2501      	movs	r5, #1
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	9307      	str	r3, [sp, #28]
 800d4d8:	9509      	str	r5, [sp, #36]	; 0x24
 800d4da:	f04f 33ff 	mov.w	r3, #4294967295
 800d4de:	9301      	str	r3, [sp, #4]
 800d4e0:	9304      	str	r3, [sp, #16]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	2312      	movs	r3, #18
 800d4e6:	e7d1      	b.n	800d48c <_dtoa_r+0x274>
 800d4e8:	636f4361 	.word	0x636f4361
 800d4ec:	3fd287a7 	.word	0x3fd287a7
 800d4f0:	8b60c8b3 	.word	0x8b60c8b3
 800d4f4:	3fc68a28 	.word	0x3fc68a28
 800d4f8:	509f79fb 	.word	0x509f79fb
 800d4fc:	3fd34413 	.word	0x3fd34413
 800d500:	0800f2c9 	.word	0x0800f2c9
 800d504:	0800f2e0 	.word	0x0800f2e0
 800d508:	7ff00000 	.word	0x7ff00000
 800d50c:	0800f2c5 	.word	0x0800f2c5
 800d510:	0800f2bc 	.word	0x0800f2bc
 800d514:	0800f299 	.word	0x0800f299
 800d518:	3ff80000 	.word	0x3ff80000
 800d51c:	0800f3d0 	.word	0x0800f3d0
 800d520:	0800f338 	.word	0x0800f338
 800d524:	2301      	movs	r3, #1
 800d526:	9309      	str	r3, [sp, #36]	; 0x24
 800d528:	e7d7      	b.n	800d4da <_dtoa_r+0x2c2>
 800d52a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d52c:	9301      	str	r3, [sp, #4]
 800d52e:	9304      	str	r3, [sp, #16]
 800d530:	e7ba      	b.n	800d4a8 <_dtoa_r+0x290>
 800d532:	3101      	adds	r1, #1
 800d534:	0052      	lsls	r2, r2, #1
 800d536:	e7ba      	b.n	800d4ae <_dtoa_r+0x296>
 800d538:	69e3      	ldr	r3, [r4, #28]
 800d53a:	9a00      	ldr	r2, [sp, #0]
 800d53c:	601a      	str	r2, [r3, #0]
 800d53e:	9b04      	ldr	r3, [sp, #16]
 800d540:	2b0e      	cmp	r3, #14
 800d542:	f200 80a8 	bhi.w	800d696 <_dtoa_r+0x47e>
 800d546:	2d00      	cmp	r5, #0
 800d548:	f000 80a5 	beq.w	800d696 <_dtoa_r+0x47e>
 800d54c:	f1bb 0f00 	cmp.w	fp, #0
 800d550:	dd38      	ble.n	800d5c4 <_dtoa_r+0x3ac>
 800d552:	4bc0      	ldr	r3, [pc, #768]	; (800d854 <_dtoa_r+0x63c>)
 800d554:	f00b 020f 	and.w	r2, fp, #15
 800d558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d55c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d560:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d564:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d568:	d019      	beq.n	800d59e <_dtoa_r+0x386>
 800d56a:	4bbb      	ldr	r3, [pc, #748]	; (800d858 <_dtoa_r+0x640>)
 800d56c:	ec51 0b18 	vmov	r0, r1, d8
 800d570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d574:	f7f3 f972 	bl	800085c <__aeabi_ddiv>
 800d578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d57c:	f008 080f 	and.w	r8, r8, #15
 800d580:	2503      	movs	r5, #3
 800d582:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d858 <_dtoa_r+0x640>
 800d586:	f1b8 0f00 	cmp.w	r8, #0
 800d58a:	d10a      	bne.n	800d5a2 <_dtoa_r+0x38a>
 800d58c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d590:	4632      	mov	r2, r6
 800d592:	463b      	mov	r3, r7
 800d594:	f7f3 f962 	bl	800085c <__aeabi_ddiv>
 800d598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d59c:	e02b      	b.n	800d5f6 <_dtoa_r+0x3de>
 800d59e:	2502      	movs	r5, #2
 800d5a0:	e7ef      	b.n	800d582 <_dtoa_r+0x36a>
 800d5a2:	f018 0f01 	tst.w	r8, #1
 800d5a6:	d008      	beq.n	800d5ba <_dtoa_r+0x3a2>
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	4639      	mov	r1, r7
 800d5ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d5b0:	f7f3 f82a 	bl	8000608 <__aeabi_dmul>
 800d5b4:	3501      	adds	r5, #1
 800d5b6:	4606      	mov	r6, r0
 800d5b8:	460f      	mov	r7, r1
 800d5ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d5be:	f109 0908 	add.w	r9, r9, #8
 800d5c2:	e7e0      	b.n	800d586 <_dtoa_r+0x36e>
 800d5c4:	f000 809f 	beq.w	800d706 <_dtoa_r+0x4ee>
 800d5c8:	f1cb 0600 	rsb	r6, fp, #0
 800d5cc:	4ba1      	ldr	r3, [pc, #644]	; (800d854 <_dtoa_r+0x63c>)
 800d5ce:	4fa2      	ldr	r7, [pc, #648]	; (800d858 <_dtoa_r+0x640>)
 800d5d0:	f006 020f 	and.w	r2, r6, #15
 800d5d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5dc:	ec51 0b18 	vmov	r0, r1, d8
 800d5e0:	f7f3 f812 	bl	8000608 <__aeabi_dmul>
 800d5e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5e8:	1136      	asrs	r6, r6, #4
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	2502      	movs	r5, #2
 800d5ee:	2e00      	cmp	r6, #0
 800d5f0:	d17e      	bne.n	800d6f0 <_dtoa_r+0x4d8>
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d1d0      	bne.n	800d598 <_dtoa_r+0x380>
 800d5f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f000 8084 	beq.w	800d70a <_dtoa_r+0x4f2>
 800d602:	4b96      	ldr	r3, [pc, #600]	; (800d85c <_dtoa_r+0x644>)
 800d604:	2200      	movs	r2, #0
 800d606:	4640      	mov	r0, r8
 800d608:	4649      	mov	r1, r9
 800d60a:	f7f3 fa6f 	bl	8000aec <__aeabi_dcmplt>
 800d60e:	2800      	cmp	r0, #0
 800d610:	d07b      	beq.n	800d70a <_dtoa_r+0x4f2>
 800d612:	9b04      	ldr	r3, [sp, #16]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d078      	beq.n	800d70a <_dtoa_r+0x4f2>
 800d618:	9b01      	ldr	r3, [sp, #4]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	dd39      	ble.n	800d692 <_dtoa_r+0x47a>
 800d61e:	4b90      	ldr	r3, [pc, #576]	; (800d860 <_dtoa_r+0x648>)
 800d620:	2200      	movs	r2, #0
 800d622:	4640      	mov	r0, r8
 800d624:	4649      	mov	r1, r9
 800d626:	f7f2 ffef 	bl	8000608 <__aeabi_dmul>
 800d62a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d62e:	9e01      	ldr	r6, [sp, #4]
 800d630:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d634:	3501      	adds	r5, #1
 800d636:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d63a:	4628      	mov	r0, r5
 800d63c:	f7f2 ff7a 	bl	8000534 <__aeabi_i2d>
 800d640:	4642      	mov	r2, r8
 800d642:	464b      	mov	r3, r9
 800d644:	f7f2 ffe0 	bl	8000608 <__aeabi_dmul>
 800d648:	4b86      	ldr	r3, [pc, #536]	; (800d864 <_dtoa_r+0x64c>)
 800d64a:	2200      	movs	r2, #0
 800d64c:	f7f2 fe26 	bl	800029c <__adddf3>
 800d650:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d658:	9303      	str	r3, [sp, #12]
 800d65a:	2e00      	cmp	r6, #0
 800d65c:	d158      	bne.n	800d710 <_dtoa_r+0x4f8>
 800d65e:	4b82      	ldr	r3, [pc, #520]	; (800d868 <_dtoa_r+0x650>)
 800d660:	2200      	movs	r2, #0
 800d662:	4640      	mov	r0, r8
 800d664:	4649      	mov	r1, r9
 800d666:	f7f2 fe17 	bl	8000298 <__aeabi_dsub>
 800d66a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d66e:	4680      	mov	r8, r0
 800d670:	4689      	mov	r9, r1
 800d672:	f7f3 fa59 	bl	8000b28 <__aeabi_dcmpgt>
 800d676:	2800      	cmp	r0, #0
 800d678:	f040 8296 	bne.w	800dba8 <_dtoa_r+0x990>
 800d67c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d680:	4640      	mov	r0, r8
 800d682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d686:	4649      	mov	r1, r9
 800d688:	f7f3 fa30 	bl	8000aec <__aeabi_dcmplt>
 800d68c:	2800      	cmp	r0, #0
 800d68e:	f040 8289 	bne.w	800dba4 <_dtoa_r+0x98c>
 800d692:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d696:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d698:	2b00      	cmp	r3, #0
 800d69a:	f2c0 814e 	blt.w	800d93a <_dtoa_r+0x722>
 800d69e:	f1bb 0f0e 	cmp.w	fp, #14
 800d6a2:	f300 814a 	bgt.w	800d93a <_dtoa_r+0x722>
 800d6a6:	4b6b      	ldr	r3, [pc, #428]	; (800d854 <_dtoa_r+0x63c>)
 800d6a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d6ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	f280 80dc 	bge.w	800d870 <_dtoa_r+0x658>
 800d6b8:	9b04      	ldr	r3, [sp, #16]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	f300 80d8 	bgt.w	800d870 <_dtoa_r+0x658>
 800d6c0:	f040 826f 	bne.w	800dba2 <_dtoa_r+0x98a>
 800d6c4:	4b68      	ldr	r3, [pc, #416]	; (800d868 <_dtoa_r+0x650>)
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	4640      	mov	r0, r8
 800d6ca:	4649      	mov	r1, r9
 800d6cc:	f7f2 ff9c 	bl	8000608 <__aeabi_dmul>
 800d6d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6d4:	f7f3 fa1e 	bl	8000b14 <__aeabi_dcmpge>
 800d6d8:	9e04      	ldr	r6, [sp, #16]
 800d6da:	4637      	mov	r7, r6
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	f040 8245 	bne.w	800db6c <_dtoa_r+0x954>
 800d6e2:	9d00      	ldr	r5, [sp, #0]
 800d6e4:	2331      	movs	r3, #49	; 0x31
 800d6e6:	f805 3b01 	strb.w	r3, [r5], #1
 800d6ea:	f10b 0b01 	add.w	fp, fp, #1
 800d6ee:	e241      	b.n	800db74 <_dtoa_r+0x95c>
 800d6f0:	07f2      	lsls	r2, r6, #31
 800d6f2:	d505      	bpl.n	800d700 <_dtoa_r+0x4e8>
 800d6f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6f8:	f7f2 ff86 	bl	8000608 <__aeabi_dmul>
 800d6fc:	3501      	adds	r5, #1
 800d6fe:	2301      	movs	r3, #1
 800d700:	1076      	asrs	r6, r6, #1
 800d702:	3708      	adds	r7, #8
 800d704:	e773      	b.n	800d5ee <_dtoa_r+0x3d6>
 800d706:	2502      	movs	r5, #2
 800d708:	e775      	b.n	800d5f6 <_dtoa_r+0x3de>
 800d70a:	9e04      	ldr	r6, [sp, #16]
 800d70c:	465f      	mov	r7, fp
 800d70e:	e792      	b.n	800d636 <_dtoa_r+0x41e>
 800d710:	9900      	ldr	r1, [sp, #0]
 800d712:	4b50      	ldr	r3, [pc, #320]	; (800d854 <_dtoa_r+0x63c>)
 800d714:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d718:	4431      	add	r1, r6
 800d71a:	9102      	str	r1, [sp, #8]
 800d71c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d71e:	eeb0 9a47 	vmov.f32	s18, s14
 800d722:	eef0 9a67 	vmov.f32	s19, s15
 800d726:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d72a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d72e:	2900      	cmp	r1, #0
 800d730:	d044      	beq.n	800d7bc <_dtoa_r+0x5a4>
 800d732:	494e      	ldr	r1, [pc, #312]	; (800d86c <_dtoa_r+0x654>)
 800d734:	2000      	movs	r0, #0
 800d736:	f7f3 f891 	bl	800085c <__aeabi_ddiv>
 800d73a:	ec53 2b19 	vmov	r2, r3, d9
 800d73e:	f7f2 fdab 	bl	8000298 <__aeabi_dsub>
 800d742:	9d00      	ldr	r5, [sp, #0]
 800d744:	ec41 0b19 	vmov	d9, r0, r1
 800d748:	4649      	mov	r1, r9
 800d74a:	4640      	mov	r0, r8
 800d74c:	f7f3 fa0c 	bl	8000b68 <__aeabi_d2iz>
 800d750:	4606      	mov	r6, r0
 800d752:	f7f2 feef 	bl	8000534 <__aeabi_i2d>
 800d756:	4602      	mov	r2, r0
 800d758:	460b      	mov	r3, r1
 800d75a:	4640      	mov	r0, r8
 800d75c:	4649      	mov	r1, r9
 800d75e:	f7f2 fd9b 	bl	8000298 <__aeabi_dsub>
 800d762:	3630      	adds	r6, #48	; 0x30
 800d764:	f805 6b01 	strb.w	r6, [r5], #1
 800d768:	ec53 2b19 	vmov	r2, r3, d9
 800d76c:	4680      	mov	r8, r0
 800d76e:	4689      	mov	r9, r1
 800d770:	f7f3 f9bc 	bl	8000aec <__aeabi_dcmplt>
 800d774:	2800      	cmp	r0, #0
 800d776:	d164      	bne.n	800d842 <_dtoa_r+0x62a>
 800d778:	4642      	mov	r2, r8
 800d77a:	464b      	mov	r3, r9
 800d77c:	4937      	ldr	r1, [pc, #220]	; (800d85c <_dtoa_r+0x644>)
 800d77e:	2000      	movs	r0, #0
 800d780:	f7f2 fd8a 	bl	8000298 <__aeabi_dsub>
 800d784:	ec53 2b19 	vmov	r2, r3, d9
 800d788:	f7f3 f9b0 	bl	8000aec <__aeabi_dcmplt>
 800d78c:	2800      	cmp	r0, #0
 800d78e:	f040 80b6 	bne.w	800d8fe <_dtoa_r+0x6e6>
 800d792:	9b02      	ldr	r3, [sp, #8]
 800d794:	429d      	cmp	r5, r3
 800d796:	f43f af7c 	beq.w	800d692 <_dtoa_r+0x47a>
 800d79a:	4b31      	ldr	r3, [pc, #196]	; (800d860 <_dtoa_r+0x648>)
 800d79c:	ec51 0b19 	vmov	r0, r1, d9
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f7f2 ff31 	bl	8000608 <__aeabi_dmul>
 800d7a6:	4b2e      	ldr	r3, [pc, #184]	; (800d860 <_dtoa_r+0x648>)
 800d7a8:	ec41 0b19 	vmov	d9, r0, r1
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	4640      	mov	r0, r8
 800d7b0:	4649      	mov	r1, r9
 800d7b2:	f7f2 ff29 	bl	8000608 <__aeabi_dmul>
 800d7b6:	4680      	mov	r8, r0
 800d7b8:	4689      	mov	r9, r1
 800d7ba:	e7c5      	b.n	800d748 <_dtoa_r+0x530>
 800d7bc:	ec51 0b17 	vmov	r0, r1, d7
 800d7c0:	f7f2 ff22 	bl	8000608 <__aeabi_dmul>
 800d7c4:	9b02      	ldr	r3, [sp, #8]
 800d7c6:	9d00      	ldr	r5, [sp, #0]
 800d7c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7ca:	ec41 0b19 	vmov	d9, r0, r1
 800d7ce:	4649      	mov	r1, r9
 800d7d0:	4640      	mov	r0, r8
 800d7d2:	f7f3 f9c9 	bl	8000b68 <__aeabi_d2iz>
 800d7d6:	4606      	mov	r6, r0
 800d7d8:	f7f2 feac 	bl	8000534 <__aeabi_i2d>
 800d7dc:	3630      	adds	r6, #48	; 0x30
 800d7de:	4602      	mov	r2, r0
 800d7e0:	460b      	mov	r3, r1
 800d7e2:	4640      	mov	r0, r8
 800d7e4:	4649      	mov	r1, r9
 800d7e6:	f7f2 fd57 	bl	8000298 <__aeabi_dsub>
 800d7ea:	f805 6b01 	strb.w	r6, [r5], #1
 800d7ee:	9b02      	ldr	r3, [sp, #8]
 800d7f0:	429d      	cmp	r5, r3
 800d7f2:	4680      	mov	r8, r0
 800d7f4:	4689      	mov	r9, r1
 800d7f6:	f04f 0200 	mov.w	r2, #0
 800d7fa:	d124      	bne.n	800d846 <_dtoa_r+0x62e>
 800d7fc:	4b1b      	ldr	r3, [pc, #108]	; (800d86c <_dtoa_r+0x654>)
 800d7fe:	ec51 0b19 	vmov	r0, r1, d9
 800d802:	f7f2 fd4b 	bl	800029c <__adddf3>
 800d806:	4602      	mov	r2, r0
 800d808:	460b      	mov	r3, r1
 800d80a:	4640      	mov	r0, r8
 800d80c:	4649      	mov	r1, r9
 800d80e:	f7f3 f98b 	bl	8000b28 <__aeabi_dcmpgt>
 800d812:	2800      	cmp	r0, #0
 800d814:	d173      	bne.n	800d8fe <_dtoa_r+0x6e6>
 800d816:	ec53 2b19 	vmov	r2, r3, d9
 800d81a:	4914      	ldr	r1, [pc, #80]	; (800d86c <_dtoa_r+0x654>)
 800d81c:	2000      	movs	r0, #0
 800d81e:	f7f2 fd3b 	bl	8000298 <__aeabi_dsub>
 800d822:	4602      	mov	r2, r0
 800d824:	460b      	mov	r3, r1
 800d826:	4640      	mov	r0, r8
 800d828:	4649      	mov	r1, r9
 800d82a:	f7f3 f95f 	bl	8000aec <__aeabi_dcmplt>
 800d82e:	2800      	cmp	r0, #0
 800d830:	f43f af2f 	beq.w	800d692 <_dtoa_r+0x47a>
 800d834:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d836:	1e6b      	subs	r3, r5, #1
 800d838:	930f      	str	r3, [sp, #60]	; 0x3c
 800d83a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d83e:	2b30      	cmp	r3, #48	; 0x30
 800d840:	d0f8      	beq.n	800d834 <_dtoa_r+0x61c>
 800d842:	46bb      	mov	fp, r7
 800d844:	e04a      	b.n	800d8dc <_dtoa_r+0x6c4>
 800d846:	4b06      	ldr	r3, [pc, #24]	; (800d860 <_dtoa_r+0x648>)
 800d848:	f7f2 fede 	bl	8000608 <__aeabi_dmul>
 800d84c:	4680      	mov	r8, r0
 800d84e:	4689      	mov	r9, r1
 800d850:	e7bd      	b.n	800d7ce <_dtoa_r+0x5b6>
 800d852:	bf00      	nop
 800d854:	0800f3d0 	.word	0x0800f3d0
 800d858:	0800f3a8 	.word	0x0800f3a8
 800d85c:	3ff00000 	.word	0x3ff00000
 800d860:	40240000 	.word	0x40240000
 800d864:	401c0000 	.word	0x401c0000
 800d868:	40140000 	.word	0x40140000
 800d86c:	3fe00000 	.word	0x3fe00000
 800d870:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d874:	9d00      	ldr	r5, [sp, #0]
 800d876:	4642      	mov	r2, r8
 800d878:	464b      	mov	r3, r9
 800d87a:	4630      	mov	r0, r6
 800d87c:	4639      	mov	r1, r7
 800d87e:	f7f2 ffed 	bl	800085c <__aeabi_ddiv>
 800d882:	f7f3 f971 	bl	8000b68 <__aeabi_d2iz>
 800d886:	9001      	str	r0, [sp, #4]
 800d888:	f7f2 fe54 	bl	8000534 <__aeabi_i2d>
 800d88c:	4642      	mov	r2, r8
 800d88e:	464b      	mov	r3, r9
 800d890:	f7f2 feba 	bl	8000608 <__aeabi_dmul>
 800d894:	4602      	mov	r2, r0
 800d896:	460b      	mov	r3, r1
 800d898:	4630      	mov	r0, r6
 800d89a:	4639      	mov	r1, r7
 800d89c:	f7f2 fcfc 	bl	8000298 <__aeabi_dsub>
 800d8a0:	9e01      	ldr	r6, [sp, #4]
 800d8a2:	9f04      	ldr	r7, [sp, #16]
 800d8a4:	3630      	adds	r6, #48	; 0x30
 800d8a6:	f805 6b01 	strb.w	r6, [r5], #1
 800d8aa:	9e00      	ldr	r6, [sp, #0]
 800d8ac:	1bae      	subs	r6, r5, r6
 800d8ae:	42b7      	cmp	r7, r6
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	d134      	bne.n	800d920 <_dtoa_r+0x708>
 800d8b6:	f7f2 fcf1 	bl	800029c <__adddf3>
 800d8ba:	4642      	mov	r2, r8
 800d8bc:	464b      	mov	r3, r9
 800d8be:	4606      	mov	r6, r0
 800d8c0:	460f      	mov	r7, r1
 800d8c2:	f7f3 f931 	bl	8000b28 <__aeabi_dcmpgt>
 800d8c6:	b9c8      	cbnz	r0, 800d8fc <_dtoa_r+0x6e4>
 800d8c8:	4642      	mov	r2, r8
 800d8ca:	464b      	mov	r3, r9
 800d8cc:	4630      	mov	r0, r6
 800d8ce:	4639      	mov	r1, r7
 800d8d0:	f7f3 f902 	bl	8000ad8 <__aeabi_dcmpeq>
 800d8d4:	b110      	cbz	r0, 800d8dc <_dtoa_r+0x6c4>
 800d8d6:	9b01      	ldr	r3, [sp, #4]
 800d8d8:	07db      	lsls	r3, r3, #31
 800d8da:	d40f      	bmi.n	800d8fc <_dtoa_r+0x6e4>
 800d8dc:	4651      	mov	r1, sl
 800d8de:	4620      	mov	r0, r4
 800d8e0:	f000 fbcc 	bl	800e07c <_Bfree>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d8e8:	702b      	strb	r3, [r5, #0]
 800d8ea:	f10b 0301 	add.w	r3, fp, #1
 800d8ee:	6013      	str	r3, [r2, #0]
 800d8f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	f43f ace2 	beq.w	800d2bc <_dtoa_r+0xa4>
 800d8f8:	601d      	str	r5, [r3, #0]
 800d8fa:	e4df      	b.n	800d2bc <_dtoa_r+0xa4>
 800d8fc:	465f      	mov	r7, fp
 800d8fe:	462b      	mov	r3, r5
 800d900:	461d      	mov	r5, r3
 800d902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d906:	2a39      	cmp	r2, #57	; 0x39
 800d908:	d106      	bne.n	800d918 <_dtoa_r+0x700>
 800d90a:	9a00      	ldr	r2, [sp, #0]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d1f7      	bne.n	800d900 <_dtoa_r+0x6e8>
 800d910:	9900      	ldr	r1, [sp, #0]
 800d912:	2230      	movs	r2, #48	; 0x30
 800d914:	3701      	adds	r7, #1
 800d916:	700a      	strb	r2, [r1, #0]
 800d918:	781a      	ldrb	r2, [r3, #0]
 800d91a:	3201      	adds	r2, #1
 800d91c:	701a      	strb	r2, [r3, #0]
 800d91e:	e790      	b.n	800d842 <_dtoa_r+0x62a>
 800d920:	4ba3      	ldr	r3, [pc, #652]	; (800dbb0 <_dtoa_r+0x998>)
 800d922:	2200      	movs	r2, #0
 800d924:	f7f2 fe70 	bl	8000608 <__aeabi_dmul>
 800d928:	2200      	movs	r2, #0
 800d92a:	2300      	movs	r3, #0
 800d92c:	4606      	mov	r6, r0
 800d92e:	460f      	mov	r7, r1
 800d930:	f7f3 f8d2 	bl	8000ad8 <__aeabi_dcmpeq>
 800d934:	2800      	cmp	r0, #0
 800d936:	d09e      	beq.n	800d876 <_dtoa_r+0x65e>
 800d938:	e7d0      	b.n	800d8dc <_dtoa_r+0x6c4>
 800d93a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d93c:	2a00      	cmp	r2, #0
 800d93e:	f000 80ca 	beq.w	800dad6 <_dtoa_r+0x8be>
 800d942:	9a07      	ldr	r2, [sp, #28]
 800d944:	2a01      	cmp	r2, #1
 800d946:	f300 80ad 	bgt.w	800daa4 <_dtoa_r+0x88c>
 800d94a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d94c:	2a00      	cmp	r2, #0
 800d94e:	f000 80a5 	beq.w	800da9c <_dtoa_r+0x884>
 800d952:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d956:	9e08      	ldr	r6, [sp, #32]
 800d958:	9d05      	ldr	r5, [sp, #20]
 800d95a:	9a05      	ldr	r2, [sp, #20]
 800d95c:	441a      	add	r2, r3
 800d95e:	9205      	str	r2, [sp, #20]
 800d960:	9a06      	ldr	r2, [sp, #24]
 800d962:	2101      	movs	r1, #1
 800d964:	441a      	add	r2, r3
 800d966:	4620      	mov	r0, r4
 800d968:	9206      	str	r2, [sp, #24]
 800d96a:	f000 fc3d 	bl	800e1e8 <__i2b>
 800d96e:	4607      	mov	r7, r0
 800d970:	b165      	cbz	r5, 800d98c <_dtoa_r+0x774>
 800d972:	9b06      	ldr	r3, [sp, #24]
 800d974:	2b00      	cmp	r3, #0
 800d976:	dd09      	ble.n	800d98c <_dtoa_r+0x774>
 800d978:	42ab      	cmp	r3, r5
 800d97a:	9a05      	ldr	r2, [sp, #20]
 800d97c:	bfa8      	it	ge
 800d97e:	462b      	movge	r3, r5
 800d980:	1ad2      	subs	r2, r2, r3
 800d982:	9205      	str	r2, [sp, #20]
 800d984:	9a06      	ldr	r2, [sp, #24]
 800d986:	1aed      	subs	r5, r5, r3
 800d988:	1ad3      	subs	r3, r2, r3
 800d98a:	9306      	str	r3, [sp, #24]
 800d98c:	9b08      	ldr	r3, [sp, #32]
 800d98e:	b1f3      	cbz	r3, 800d9ce <_dtoa_r+0x7b6>
 800d990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d992:	2b00      	cmp	r3, #0
 800d994:	f000 80a3 	beq.w	800dade <_dtoa_r+0x8c6>
 800d998:	2e00      	cmp	r6, #0
 800d99a:	dd10      	ble.n	800d9be <_dtoa_r+0x7a6>
 800d99c:	4639      	mov	r1, r7
 800d99e:	4632      	mov	r2, r6
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	f000 fce1 	bl	800e368 <__pow5mult>
 800d9a6:	4652      	mov	r2, sl
 800d9a8:	4601      	mov	r1, r0
 800d9aa:	4607      	mov	r7, r0
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	f000 fc31 	bl	800e214 <__multiply>
 800d9b2:	4651      	mov	r1, sl
 800d9b4:	4680      	mov	r8, r0
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	f000 fb60 	bl	800e07c <_Bfree>
 800d9bc:	46c2      	mov	sl, r8
 800d9be:	9b08      	ldr	r3, [sp, #32]
 800d9c0:	1b9a      	subs	r2, r3, r6
 800d9c2:	d004      	beq.n	800d9ce <_dtoa_r+0x7b6>
 800d9c4:	4651      	mov	r1, sl
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	f000 fcce 	bl	800e368 <__pow5mult>
 800d9cc:	4682      	mov	sl, r0
 800d9ce:	2101      	movs	r1, #1
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	f000 fc09 	bl	800e1e8 <__i2b>
 800d9d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	4606      	mov	r6, r0
 800d9dc:	f340 8081 	ble.w	800dae2 <_dtoa_r+0x8ca>
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	4601      	mov	r1, r0
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f000 fcbf 	bl	800e368 <__pow5mult>
 800d9ea:	9b07      	ldr	r3, [sp, #28]
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	4606      	mov	r6, r0
 800d9f0:	dd7a      	ble.n	800dae8 <_dtoa_r+0x8d0>
 800d9f2:	f04f 0800 	mov.w	r8, #0
 800d9f6:	6933      	ldr	r3, [r6, #16]
 800d9f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d9fc:	6918      	ldr	r0, [r3, #16]
 800d9fe:	f000 fba5 	bl	800e14c <__hi0bits>
 800da02:	f1c0 0020 	rsb	r0, r0, #32
 800da06:	9b06      	ldr	r3, [sp, #24]
 800da08:	4418      	add	r0, r3
 800da0a:	f010 001f 	ands.w	r0, r0, #31
 800da0e:	f000 8094 	beq.w	800db3a <_dtoa_r+0x922>
 800da12:	f1c0 0320 	rsb	r3, r0, #32
 800da16:	2b04      	cmp	r3, #4
 800da18:	f340 8085 	ble.w	800db26 <_dtoa_r+0x90e>
 800da1c:	9b05      	ldr	r3, [sp, #20]
 800da1e:	f1c0 001c 	rsb	r0, r0, #28
 800da22:	4403      	add	r3, r0
 800da24:	9305      	str	r3, [sp, #20]
 800da26:	9b06      	ldr	r3, [sp, #24]
 800da28:	4403      	add	r3, r0
 800da2a:	4405      	add	r5, r0
 800da2c:	9306      	str	r3, [sp, #24]
 800da2e:	9b05      	ldr	r3, [sp, #20]
 800da30:	2b00      	cmp	r3, #0
 800da32:	dd05      	ble.n	800da40 <_dtoa_r+0x828>
 800da34:	4651      	mov	r1, sl
 800da36:	461a      	mov	r2, r3
 800da38:	4620      	mov	r0, r4
 800da3a:	f000 fcef 	bl	800e41c <__lshift>
 800da3e:	4682      	mov	sl, r0
 800da40:	9b06      	ldr	r3, [sp, #24]
 800da42:	2b00      	cmp	r3, #0
 800da44:	dd05      	ble.n	800da52 <_dtoa_r+0x83a>
 800da46:	4631      	mov	r1, r6
 800da48:	461a      	mov	r2, r3
 800da4a:	4620      	mov	r0, r4
 800da4c:	f000 fce6 	bl	800e41c <__lshift>
 800da50:	4606      	mov	r6, r0
 800da52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da54:	2b00      	cmp	r3, #0
 800da56:	d072      	beq.n	800db3e <_dtoa_r+0x926>
 800da58:	4631      	mov	r1, r6
 800da5a:	4650      	mov	r0, sl
 800da5c:	f000 fd4a 	bl	800e4f4 <__mcmp>
 800da60:	2800      	cmp	r0, #0
 800da62:	da6c      	bge.n	800db3e <_dtoa_r+0x926>
 800da64:	2300      	movs	r3, #0
 800da66:	4651      	mov	r1, sl
 800da68:	220a      	movs	r2, #10
 800da6a:	4620      	mov	r0, r4
 800da6c:	f000 fb28 	bl	800e0c0 <__multadd>
 800da70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da72:	f10b 3bff 	add.w	fp, fp, #4294967295
 800da76:	4682      	mov	sl, r0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	f000 81b0 	beq.w	800ddde <_dtoa_r+0xbc6>
 800da7e:	2300      	movs	r3, #0
 800da80:	4639      	mov	r1, r7
 800da82:	220a      	movs	r2, #10
 800da84:	4620      	mov	r0, r4
 800da86:	f000 fb1b 	bl	800e0c0 <__multadd>
 800da8a:	9b01      	ldr	r3, [sp, #4]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	4607      	mov	r7, r0
 800da90:	f300 8096 	bgt.w	800dbc0 <_dtoa_r+0x9a8>
 800da94:	9b07      	ldr	r3, [sp, #28]
 800da96:	2b02      	cmp	r3, #2
 800da98:	dc59      	bgt.n	800db4e <_dtoa_r+0x936>
 800da9a:	e091      	b.n	800dbc0 <_dtoa_r+0x9a8>
 800da9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800daa2:	e758      	b.n	800d956 <_dtoa_r+0x73e>
 800daa4:	9b04      	ldr	r3, [sp, #16]
 800daa6:	1e5e      	subs	r6, r3, #1
 800daa8:	9b08      	ldr	r3, [sp, #32]
 800daaa:	42b3      	cmp	r3, r6
 800daac:	bfbf      	itttt	lt
 800daae:	9b08      	ldrlt	r3, [sp, #32]
 800dab0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800dab2:	9608      	strlt	r6, [sp, #32]
 800dab4:	1af3      	sublt	r3, r6, r3
 800dab6:	bfb4      	ite	lt
 800dab8:	18d2      	addlt	r2, r2, r3
 800daba:	1b9e      	subge	r6, r3, r6
 800dabc:	9b04      	ldr	r3, [sp, #16]
 800dabe:	bfbc      	itt	lt
 800dac0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800dac2:	2600      	movlt	r6, #0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	bfb7      	itett	lt
 800dac8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800dacc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800dad0:	1a9d      	sublt	r5, r3, r2
 800dad2:	2300      	movlt	r3, #0
 800dad4:	e741      	b.n	800d95a <_dtoa_r+0x742>
 800dad6:	9e08      	ldr	r6, [sp, #32]
 800dad8:	9d05      	ldr	r5, [sp, #20]
 800dada:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dadc:	e748      	b.n	800d970 <_dtoa_r+0x758>
 800dade:	9a08      	ldr	r2, [sp, #32]
 800dae0:	e770      	b.n	800d9c4 <_dtoa_r+0x7ac>
 800dae2:	9b07      	ldr	r3, [sp, #28]
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	dc19      	bgt.n	800db1c <_dtoa_r+0x904>
 800dae8:	9b02      	ldr	r3, [sp, #8]
 800daea:	b9bb      	cbnz	r3, 800db1c <_dtoa_r+0x904>
 800daec:	9b03      	ldr	r3, [sp, #12]
 800daee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800daf2:	b99b      	cbnz	r3, 800db1c <_dtoa_r+0x904>
 800daf4:	9b03      	ldr	r3, [sp, #12]
 800daf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dafa:	0d1b      	lsrs	r3, r3, #20
 800dafc:	051b      	lsls	r3, r3, #20
 800dafe:	b183      	cbz	r3, 800db22 <_dtoa_r+0x90a>
 800db00:	9b05      	ldr	r3, [sp, #20]
 800db02:	3301      	adds	r3, #1
 800db04:	9305      	str	r3, [sp, #20]
 800db06:	9b06      	ldr	r3, [sp, #24]
 800db08:	3301      	adds	r3, #1
 800db0a:	9306      	str	r3, [sp, #24]
 800db0c:	f04f 0801 	mov.w	r8, #1
 800db10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db12:	2b00      	cmp	r3, #0
 800db14:	f47f af6f 	bne.w	800d9f6 <_dtoa_r+0x7de>
 800db18:	2001      	movs	r0, #1
 800db1a:	e774      	b.n	800da06 <_dtoa_r+0x7ee>
 800db1c:	f04f 0800 	mov.w	r8, #0
 800db20:	e7f6      	b.n	800db10 <_dtoa_r+0x8f8>
 800db22:	4698      	mov	r8, r3
 800db24:	e7f4      	b.n	800db10 <_dtoa_r+0x8f8>
 800db26:	d082      	beq.n	800da2e <_dtoa_r+0x816>
 800db28:	9a05      	ldr	r2, [sp, #20]
 800db2a:	331c      	adds	r3, #28
 800db2c:	441a      	add	r2, r3
 800db2e:	9205      	str	r2, [sp, #20]
 800db30:	9a06      	ldr	r2, [sp, #24]
 800db32:	441a      	add	r2, r3
 800db34:	441d      	add	r5, r3
 800db36:	9206      	str	r2, [sp, #24]
 800db38:	e779      	b.n	800da2e <_dtoa_r+0x816>
 800db3a:	4603      	mov	r3, r0
 800db3c:	e7f4      	b.n	800db28 <_dtoa_r+0x910>
 800db3e:	9b04      	ldr	r3, [sp, #16]
 800db40:	2b00      	cmp	r3, #0
 800db42:	dc37      	bgt.n	800dbb4 <_dtoa_r+0x99c>
 800db44:	9b07      	ldr	r3, [sp, #28]
 800db46:	2b02      	cmp	r3, #2
 800db48:	dd34      	ble.n	800dbb4 <_dtoa_r+0x99c>
 800db4a:	9b04      	ldr	r3, [sp, #16]
 800db4c:	9301      	str	r3, [sp, #4]
 800db4e:	9b01      	ldr	r3, [sp, #4]
 800db50:	b963      	cbnz	r3, 800db6c <_dtoa_r+0x954>
 800db52:	4631      	mov	r1, r6
 800db54:	2205      	movs	r2, #5
 800db56:	4620      	mov	r0, r4
 800db58:	f000 fab2 	bl	800e0c0 <__multadd>
 800db5c:	4601      	mov	r1, r0
 800db5e:	4606      	mov	r6, r0
 800db60:	4650      	mov	r0, sl
 800db62:	f000 fcc7 	bl	800e4f4 <__mcmp>
 800db66:	2800      	cmp	r0, #0
 800db68:	f73f adbb 	bgt.w	800d6e2 <_dtoa_r+0x4ca>
 800db6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db6e:	9d00      	ldr	r5, [sp, #0]
 800db70:	ea6f 0b03 	mvn.w	fp, r3
 800db74:	f04f 0800 	mov.w	r8, #0
 800db78:	4631      	mov	r1, r6
 800db7a:	4620      	mov	r0, r4
 800db7c:	f000 fa7e 	bl	800e07c <_Bfree>
 800db80:	2f00      	cmp	r7, #0
 800db82:	f43f aeab 	beq.w	800d8dc <_dtoa_r+0x6c4>
 800db86:	f1b8 0f00 	cmp.w	r8, #0
 800db8a:	d005      	beq.n	800db98 <_dtoa_r+0x980>
 800db8c:	45b8      	cmp	r8, r7
 800db8e:	d003      	beq.n	800db98 <_dtoa_r+0x980>
 800db90:	4641      	mov	r1, r8
 800db92:	4620      	mov	r0, r4
 800db94:	f000 fa72 	bl	800e07c <_Bfree>
 800db98:	4639      	mov	r1, r7
 800db9a:	4620      	mov	r0, r4
 800db9c:	f000 fa6e 	bl	800e07c <_Bfree>
 800dba0:	e69c      	b.n	800d8dc <_dtoa_r+0x6c4>
 800dba2:	2600      	movs	r6, #0
 800dba4:	4637      	mov	r7, r6
 800dba6:	e7e1      	b.n	800db6c <_dtoa_r+0x954>
 800dba8:	46bb      	mov	fp, r7
 800dbaa:	4637      	mov	r7, r6
 800dbac:	e599      	b.n	800d6e2 <_dtoa_r+0x4ca>
 800dbae:	bf00      	nop
 800dbb0:	40240000 	.word	0x40240000
 800dbb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	f000 80c8 	beq.w	800dd4c <_dtoa_r+0xb34>
 800dbbc:	9b04      	ldr	r3, [sp, #16]
 800dbbe:	9301      	str	r3, [sp, #4]
 800dbc0:	2d00      	cmp	r5, #0
 800dbc2:	dd05      	ble.n	800dbd0 <_dtoa_r+0x9b8>
 800dbc4:	4639      	mov	r1, r7
 800dbc6:	462a      	mov	r2, r5
 800dbc8:	4620      	mov	r0, r4
 800dbca:	f000 fc27 	bl	800e41c <__lshift>
 800dbce:	4607      	mov	r7, r0
 800dbd0:	f1b8 0f00 	cmp.w	r8, #0
 800dbd4:	d05b      	beq.n	800dc8e <_dtoa_r+0xa76>
 800dbd6:	6879      	ldr	r1, [r7, #4]
 800dbd8:	4620      	mov	r0, r4
 800dbda:	f000 fa0f 	bl	800dffc <_Balloc>
 800dbde:	4605      	mov	r5, r0
 800dbe0:	b928      	cbnz	r0, 800dbee <_dtoa_r+0x9d6>
 800dbe2:	4b83      	ldr	r3, [pc, #524]	; (800ddf0 <_dtoa_r+0xbd8>)
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800dbea:	f7ff bb2e 	b.w	800d24a <_dtoa_r+0x32>
 800dbee:	693a      	ldr	r2, [r7, #16]
 800dbf0:	3202      	adds	r2, #2
 800dbf2:	0092      	lsls	r2, r2, #2
 800dbf4:	f107 010c 	add.w	r1, r7, #12
 800dbf8:	300c      	adds	r0, #12
 800dbfa:	f000 ffab 	bl	800eb54 <memcpy>
 800dbfe:	2201      	movs	r2, #1
 800dc00:	4629      	mov	r1, r5
 800dc02:	4620      	mov	r0, r4
 800dc04:	f000 fc0a 	bl	800e41c <__lshift>
 800dc08:	9b00      	ldr	r3, [sp, #0]
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	9304      	str	r3, [sp, #16]
 800dc0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc12:	4413      	add	r3, r2
 800dc14:	9308      	str	r3, [sp, #32]
 800dc16:	9b02      	ldr	r3, [sp, #8]
 800dc18:	f003 0301 	and.w	r3, r3, #1
 800dc1c:	46b8      	mov	r8, r7
 800dc1e:	9306      	str	r3, [sp, #24]
 800dc20:	4607      	mov	r7, r0
 800dc22:	9b04      	ldr	r3, [sp, #16]
 800dc24:	4631      	mov	r1, r6
 800dc26:	3b01      	subs	r3, #1
 800dc28:	4650      	mov	r0, sl
 800dc2a:	9301      	str	r3, [sp, #4]
 800dc2c:	f7ff fa6b 	bl	800d106 <quorem>
 800dc30:	4641      	mov	r1, r8
 800dc32:	9002      	str	r0, [sp, #8]
 800dc34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dc38:	4650      	mov	r0, sl
 800dc3a:	f000 fc5b 	bl	800e4f4 <__mcmp>
 800dc3e:	463a      	mov	r2, r7
 800dc40:	9005      	str	r0, [sp, #20]
 800dc42:	4631      	mov	r1, r6
 800dc44:	4620      	mov	r0, r4
 800dc46:	f000 fc71 	bl	800e52c <__mdiff>
 800dc4a:	68c2      	ldr	r2, [r0, #12]
 800dc4c:	4605      	mov	r5, r0
 800dc4e:	bb02      	cbnz	r2, 800dc92 <_dtoa_r+0xa7a>
 800dc50:	4601      	mov	r1, r0
 800dc52:	4650      	mov	r0, sl
 800dc54:	f000 fc4e 	bl	800e4f4 <__mcmp>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	9209      	str	r2, [sp, #36]	; 0x24
 800dc60:	f000 fa0c 	bl	800e07c <_Bfree>
 800dc64:	9b07      	ldr	r3, [sp, #28]
 800dc66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc68:	9d04      	ldr	r5, [sp, #16]
 800dc6a:	ea43 0102 	orr.w	r1, r3, r2
 800dc6e:	9b06      	ldr	r3, [sp, #24]
 800dc70:	4319      	orrs	r1, r3
 800dc72:	d110      	bne.n	800dc96 <_dtoa_r+0xa7e>
 800dc74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dc78:	d029      	beq.n	800dcce <_dtoa_r+0xab6>
 800dc7a:	9b05      	ldr	r3, [sp, #20]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	dd02      	ble.n	800dc86 <_dtoa_r+0xa6e>
 800dc80:	9b02      	ldr	r3, [sp, #8]
 800dc82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800dc86:	9b01      	ldr	r3, [sp, #4]
 800dc88:	f883 9000 	strb.w	r9, [r3]
 800dc8c:	e774      	b.n	800db78 <_dtoa_r+0x960>
 800dc8e:	4638      	mov	r0, r7
 800dc90:	e7ba      	b.n	800dc08 <_dtoa_r+0x9f0>
 800dc92:	2201      	movs	r2, #1
 800dc94:	e7e1      	b.n	800dc5a <_dtoa_r+0xa42>
 800dc96:	9b05      	ldr	r3, [sp, #20]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	db04      	blt.n	800dca6 <_dtoa_r+0xa8e>
 800dc9c:	9907      	ldr	r1, [sp, #28]
 800dc9e:	430b      	orrs	r3, r1
 800dca0:	9906      	ldr	r1, [sp, #24]
 800dca2:	430b      	orrs	r3, r1
 800dca4:	d120      	bne.n	800dce8 <_dtoa_r+0xad0>
 800dca6:	2a00      	cmp	r2, #0
 800dca8:	dded      	ble.n	800dc86 <_dtoa_r+0xa6e>
 800dcaa:	4651      	mov	r1, sl
 800dcac:	2201      	movs	r2, #1
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f000 fbb4 	bl	800e41c <__lshift>
 800dcb4:	4631      	mov	r1, r6
 800dcb6:	4682      	mov	sl, r0
 800dcb8:	f000 fc1c 	bl	800e4f4 <__mcmp>
 800dcbc:	2800      	cmp	r0, #0
 800dcbe:	dc03      	bgt.n	800dcc8 <_dtoa_r+0xab0>
 800dcc0:	d1e1      	bne.n	800dc86 <_dtoa_r+0xa6e>
 800dcc2:	f019 0f01 	tst.w	r9, #1
 800dcc6:	d0de      	beq.n	800dc86 <_dtoa_r+0xa6e>
 800dcc8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dccc:	d1d8      	bne.n	800dc80 <_dtoa_r+0xa68>
 800dcce:	9a01      	ldr	r2, [sp, #4]
 800dcd0:	2339      	movs	r3, #57	; 0x39
 800dcd2:	7013      	strb	r3, [r2, #0]
 800dcd4:	462b      	mov	r3, r5
 800dcd6:	461d      	mov	r5, r3
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dcde:	2a39      	cmp	r2, #57	; 0x39
 800dce0:	d06c      	beq.n	800ddbc <_dtoa_r+0xba4>
 800dce2:	3201      	adds	r2, #1
 800dce4:	701a      	strb	r2, [r3, #0]
 800dce6:	e747      	b.n	800db78 <_dtoa_r+0x960>
 800dce8:	2a00      	cmp	r2, #0
 800dcea:	dd07      	ble.n	800dcfc <_dtoa_r+0xae4>
 800dcec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dcf0:	d0ed      	beq.n	800dcce <_dtoa_r+0xab6>
 800dcf2:	9a01      	ldr	r2, [sp, #4]
 800dcf4:	f109 0301 	add.w	r3, r9, #1
 800dcf8:	7013      	strb	r3, [r2, #0]
 800dcfa:	e73d      	b.n	800db78 <_dtoa_r+0x960>
 800dcfc:	9b04      	ldr	r3, [sp, #16]
 800dcfe:	9a08      	ldr	r2, [sp, #32]
 800dd00:	f803 9c01 	strb.w	r9, [r3, #-1]
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d043      	beq.n	800dd90 <_dtoa_r+0xb78>
 800dd08:	4651      	mov	r1, sl
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	220a      	movs	r2, #10
 800dd0e:	4620      	mov	r0, r4
 800dd10:	f000 f9d6 	bl	800e0c0 <__multadd>
 800dd14:	45b8      	cmp	r8, r7
 800dd16:	4682      	mov	sl, r0
 800dd18:	f04f 0300 	mov.w	r3, #0
 800dd1c:	f04f 020a 	mov.w	r2, #10
 800dd20:	4641      	mov	r1, r8
 800dd22:	4620      	mov	r0, r4
 800dd24:	d107      	bne.n	800dd36 <_dtoa_r+0xb1e>
 800dd26:	f000 f9cb 	bl	800e0c0 <__multadd>
 800dd2a:	4680      	mov	r8, r0
 800dd2c:	4607      	mov	r7, r0
 800dd2e:	9b04      	ldr	r3, [sp, #16]
 800dd30:	3301      	adds	r3, #1
 800dd32:	9304      	str	r3, [sp, #16]
 800dd34:	e775      	b.n	800dc22 <_dtoa_r+0xa0a>
 800dd36:	f000 f9c3 	bl	800e0c0 <__multadd>
 800dd3a:	4639      	mov	r1, r7
 800dd3c:	4680      	mov	r8, r0
 800dd3e:	2300      	movs	r3, #0
 800dd40:	220a      	movs	r2, #10
 800dd42:	4620      	mov	r0, r4
 800dd44:	f000 f9bc 	bl	800e0c0 <__multadd>
 800dd48:	4607      	mov	r7, r0
 800dd4a:	e7f0      	b.n	800dd2e <_dtoa_r+0xb16>
 800dd4c:	9b04      	ldr	r3, [sp, #16]
 800dd4e:	9301      	str	r3, [sp, #4]
 800dd50:	9d00      	ldr	r5, [sp, #0]
 800dd52:	4631      	mov	r1, r6
 800dd54:	4650      	mov	r0, sl
 800dd56:	f7ff f9d6 	bl	800d106 <quorem>
 800dd5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dd5e:	9b00      	ldr	r3, [sp, #0]
 800dd60:	f805 9b01 	strb.w	r9, [r5], #1
 800dd64:	1aea      	subs	r2, r5, r3
 800dd66:	9b01      	ldr	r3, [sp, #4]
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	dd07      	ble.n	800dd7c <_dtoa_r+0xb64>
 800dd6c:	4651      	mov	r1, sl
 800dd6e:	2300      	movs	r3, #0
 800dd70:	220a      	movs	r2, #10
 800dd72:	4620      	mov	r0, r4
 800dd74:	f000 f9a4 	bl	800e0c0 <__multadd>
 800dd78:	4682      	mov	sl, r0
 800dd7a:	e7ea      	b.n	800dd52 <_dtoa_r+0xb3a>
 800dd7c:	9b01      	ldr	r3, [sp, #4]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	bfc8      	it	gt
 800dd82:	461d      	movgt	r5, r3
 800dd84:	9b00      	ldr	r3, [sp, #0]
 800dd86:	bfd8      	it	le
 800dd88:	2501      	movle	r5, #1
 800dd8a:	441d      	add	r5, r3
 800dd8c:	f04f 0800 	mov.w	r8, #0
 800dd90:	4651      	mov	r1, sl
 800dd92:	2201      	movs	r2, #1
 800dd94:	4620      	mov	r0, r4
 800dd96:	f000 fb41 	bl	800e41c <__lshift>
 800dd9a:	4631      	mov	r1, r6
 800dd9c:	4682      	mov	sl, r0
 800dd9e:	f000 fba9 	bl	800e4f4 <__mcmp>
 800dda2:	2800      	cmp	r0, #0
 800dda4:	dc96      	bgt.n	800dcd4 <_dtoa_r+0xabc>
 800dda6:	d102      	bne.n	800ddae <_dtoa_r+0xb96>
 800dda8:	f019 0f01 	tst.w	r9, #1
 800ddac:	d192      	bne.n	800dcd4 <_dtoa_r+0xabc>
 800ddae:	462b      	mov	r3, r5
 800ddb0:	461d      	mov	r5, r3
 800ddb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddb6:	2a30      	cmp	r2, #48	; 0x30
 800ddb8:	d0fa      	beq.n	800ddb0 <_dtoa_r+0xb98>
 800ddba:	e6dd      	b.n	800db78 <_dtoa_r+0x960>
 800ddbc:	9a00      	ldr	r2, [sp, #0]
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d189      	bne.n	800dcd6 <_dtoa_r+0xabe>
 800ddc2:	f10b 0b01 	add.w	fp, fp, #1
 800ddc6:	2331      	movs	r3, #49	; 0x31
 800ddc8:	e796      	b.n	800dcf8 <_dtoa_r+0xae0>
 800ddca:	4b0a      	ldr	r3, [pc, #40]	; (800ddf4 <_dtoa_r+0xbdc>)
 800ddcc:	f7ff ba99 	b.w	800d302 <_dtoa_r+0xea>
 800ddd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	f47f aa6d 	bne.w	800d2b2 <_dtoa_r+0x9a>
 800ddd8:	4b07      	ldr	r3, [pc, #28]	; (800ddf8 <_dtoa_r+0xbe0>)
 800ddda:	f7ff ba92 	b.w	800d302 <_dtoa_r+0xea>
 800ddde:	9b01      	ldr	r3, [sp, #4]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	dcb5      	bgt.n	800dd50 <_dtoa_r+0xb38>
 800dde4:	9b07      	ldr	r3, [sp, #28]
 800dde6:	2b02      	cmp	r3, #2
 800dde8:	f73f aeb1 	bgt.w	800db4e <_dtoa_r+0x936>
 800ddec:	e7b0      	b.n	800dd50 <_dtoa_r+0xb38>
 800ddee:	bf00      	nop
 800ddf0:	0800f338 	.word	0x0800f338
 800ddf4:	0800f298 	.word	0x0800f298
 800ddf8:	0800f2bc 	.word	0x0800f2bc

0800ddfc <_free_r>:
 800ddfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddfe:	2900      	cmp	r1, #0
 800de00:	d044      	beq.n	800de8c <_free_r+0x90>
 800de02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de06:	9001      	str	r0, [sp, #4]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	f1a1 0404 	sub.w	r4, r1, #4
 800de0e:	bfb8      	it	lt
 800de10:	18e4      	addlt	r4, r4, r3
 800de12:	f000 f8e7 	bl	800dfe4 <__malloc_lock>
 800de16:	4a1e      	ldr	r2, [pc, #120]	; (800de90 <_free_r+0x94>)
 800de18:	9801      	ldr	r0, [sp, #4]
 800de1a:	6813      	ldr	r3, [r2, #0]
 800de1c:	b933      	cbnz	r3, 800de2c <_free_r+0x30>
 800de1e:	6063      	str	r3, [r4, #4]
 800de20:	6014      	str	r4, [r2, #0]
 800de22:	b003      	add	sp, #12
 800de24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de28:	f000 b8e2 	b.w	800dff0 <__malloc_unlock>
 800de2c:	42a3      	cmp	r3, r4
 800de2e:	d908      	bls.n	800de42 <_free_r+0x46>
 800de30:	6825      	ldr	r5, [r4, #0]
 800de32:	1961      	adds	r1, r4, r5
 800de34:	428b      	cmp	r3, r1
 800de36:	bf01      	itttt	eq
 800de38:	6819      	ldreq	r1, [r3, #0]
 800de3a:	685b      	ldreq	r3, [r3, #4]
 800de3c:	1949      	addeq	r1, r1, r5
 800de3e:	6021      	streq	r1, [r4, #0]
 800de40:	e7ed      	b.n	800de1e <_free_r+0x22>
 800de42:	461a      	mov	r2, r3
 800de44:	685b      	ldr	r3, [r3, #4]
 800de46:	b10b      	cbz	r3, 800de4c <_free_r+0x50>
 800de48:	42a3      	cmp	r3, r4
 800de4a:	d9fa      	bls.n	800de42 <_free_r+0x46>
 800de4c:	6811      	ldr	r1, [r2, #0]
 800de4e:	1855      	adds	r5, r2, r1
 800de50:	42a5      	cmp	r5, r4
 800de52:	d10b      	bne.n	800de6c <_free_r+0x70>
 800de54:	6824      	ldr	r4, [r4, #0]
 800de56:	4421      	add	r1, r4
 800de58:	1854      	adds	r4, r2, r1
 800de5a:	42a3      	cmp	r3, r4
 800de5c:	6011      	str	r1, [r2, #0]
 800de5e:	d1e0      	bne.n	800de22 <_free_r+0x26>
 800de60:	681c      	ldr	r4, [r3, #0]
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	6053      	str	r3, [r2, #4]
 800de66:	440c      	add	r4, r1
 800de68:	6014      	str	r4, [r2, #0]
 800de6a:	e7da      	b.n	800de22 <_free_r+0x26>
 800de6c:	d902      	bls.n	800de74 <_free_r+0x78>
 800de6e:	230c      	movs	r3, #12
 800de70:	6003      	str	r3, [r0, #0]
 800de72:	e7d6      	b.n	800de22 <_free_r+0x26>
 800de74:	6825      	ldr	r5, [r4, #0]
 800de76:	1961      	adds	r1, r4, r5
 800de78:	428b      	cmp	r3, r1
 800de7a:	bf04      	itt	eq
 800de7c:	6819      	ldreq	r1, [r3, #0]
 800de7e:	685b      	ldreq	r3, [r3, #4]
 800de80:	6063      	str	r3, [r4, #4]
 800de82:	bf04      	itt	eq
 800de84:	1949      	addeq	r1, r1, r5
 800de86:	6021      	streq	r1, [r4, #0]
 800de88:	6054      	str	r4, [r2, #4]
 800de8a:	e7ca      	b.n	800de22 <_free_r+0x26>
 800de8c:	b003      	add	sp, #12
 800de8e:	bd30      	pop	{r4, r5, pc}
 800de90:	200022c8 	.word	0x200022c8

0800de94 <malloc>:
 800de94:	4b02      	ldr	r3, [pc, #8]	; (800dea0 <malloc+0xc>)
 800de96:	4601      	mov	r1, r0
 800de98:	6818      	ldr	r0, [r3, #0]
 800de9a:	f000 b823 	b.w	800dee4 <_malloc_r>
 800de9e:	bf00      	nop
 800dea0:	2000017c 	.word	0x2000017c

0800dea4 <sbrk_aligned>:
 800dea4:	b570      	push	{r4, r5, r6, lr}
 800dea6:	4e0e      	ldr	r6, [pc, #56]	; (800dee0 <sbrk_aligned+0x3c>)
 800dea8:	460c      	mov	r4, r1
 800deaa:	6831      	ldr	r1, [r6, #0]
 800deac:	4605      	mov	r5, r0
 800deae:	b911      	cbnz	r1, 800deb6 <sbrk_aligned+0x12>
 800deb0:	f000 fe40 	bl	800eb34 <_sbrk_r>
 800deb4:	6030      	str	r0, [r6, #0]
 800deb6:	4621      	mov	r1, r4
 800deb8:	4628      	mov	r0, r5
 800deba:	f000 fe3b 	bl	800eb34 <_sbrk_r>
 800debe:	1c43      	adds	r3, r0, #1
 800dec0:	d00a      	beq.n	800ded8 <sbrk_aligned+0x34>
 800dec2:	1cc4      	adds	r4, r0, #3
 800dec4:	f024 0403 	bic.w	r4, r4, #3
 800dec8:	42a0      	cmp	r0, r4
 800deca:	d007      	beq.n	800dedc <sbrk_aligned+0x38>
 800decc:	1a21      	subs	r1, r4, r0
 800dece:	4628      	mov	r0, r5
 800ded0:	f000 fe30 	bl	800eb34 <_sbrk_r>
 800ded4:	3001      	adds	r0, #1
 800ded6:	d101      	bne.n	800dedc <sbrk_aligned+0x38>
 800ded8:	f04f 34ff 	mov.w	r4, #4294967295
 800dedc:	4620      	mov	r0, r4
 800dede:	bd70      	pop	{r4, r5, r6, pc}
 800dee0:	200022cc 	.word	0x200022cc

0800dee4 <_malloc_r>:
 800dee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dee8:	1ccd      	adds	r5, r1, #3
 800deea:	f025 0503 	bic.w	r5, r5, #3
 800deee:	3508      	adds	r5, #8
 800def0:	2d0c      	cmp	r5, #12
 800def2:	bf38      	it	cc
 800def4:	250c      	movcc	r5, #12
 800def6:	2d00      	cmp	r5, #0
 800def8:	4607      	mov	r7, r0
 800defa:	db01      	blt.n	800df00 <_malloc_r+0x1c>
 800defc:	42a9      	cmp	r1, r5
 800defe:	d905      	bls.n	800df0c <_malloc_r+0x28>
 800df00:	230c      	movs	r3, #12
 800df02:	603b      	str	r3, [r7, #0]
 800df04:	2600      	movs	r6, #0
 800df06:	4630      	mov	r0, r6
 800df08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800dfe0 <_malloc_r+0xfc>
 800df10:	f000 f868 	bl	800dfe4 <__malloc_lock>
 800df14:	f8d8 3000 	ldr.w	r3, [r8]
 800df18:	461c      	mov	r4, r3
 800df1a:	bb5c      	cbnz	r4, 800df74 <_malloc_r+0x90>
 800df1c:	4629      	mov	r1, r5
 800df1e:	4638      	mov	r0, r7
 800df20:	f7ff ffc0 	bl	800dea4 <sbrk_aligned>
 800df24:	1c43      	adds	r3, r0, #1
 800df26:	4604      	mov	r4, r0
 800df28:	d155      	bne.n	800dfd6 <_malloc_r+0xf2>
 800df2a:	f8d8 4000 	ldr.w	r4, [r8]
 800df2e:	4626      	mov	r6, r4
 800df30:	2e00      	cmp	r6, #0
 800df32:	d145      	bne.n	800dfc0 <_malloc_r+0xdc>
 800df34:	2c00      	cmp	r4, #0
 800df36:	d048      	beq.n	800dfca <_malloc_r+0xe6>
 800df38:	6823      	ldr	r3, [r4, #0]
 800df3a:	4631      	mov	r1, r6
 800df3c:	4638      	mov	r0, r7
 800df3e:	eb04 0903 	add.w	r9, r4, r3
 800df42:	f000 fdf7 	bl	800eb34 <_sbrk_r>
 800df46:	4581      	cmp	r9, r0
 800df48:	d13f      	bne.n	800dfca <_malloc_r+0xe6>
 800df4a:	6821      	ldr	r1, [r4, #0]
 800df4c:	1a6d      	subs	r5, r5, r1
 800df4e:	4629      	mov	r1, r5
 800df50:	4638      	mov	r0, r7
 800df52:	f7ff ffa7 	bl	800dea4 <sbrk_aligned>
 800df56:	3001      	adds	r0, #1
 800df58:	d037      	beq.n	800dfca <_malloc_r+0xe6>
 800df5a:	6823      	ldr	r3, [r4, #0]
 800df5c:	442b      	add	r3, r5
 800df5e:	6023      	str	r3, [r4, #0]
 800df60:	f8d8 3000 	ldr.w	r3, [r8]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d038      	beq.n	800dfda <_malloc_r+0xf6>
 800df68:	685a      	ldr	r2, [r3, #4]
 800df6a:	42a2      	cmp	r2, r4
 800df6c:	d12b      	bne.n	800dfc6 <_malloc_r+0xe2>
 800df6e:	2200      	movs	r2, #0
 800df70:	605a      	str	r2, [r3, #4]
 800df72:	e00f      	b.n	800df94 <_malloc_r+0xb0>
 800df74:	6822      	ldr	r2, [r4, #0]
 800df76:	1b52      	subs	r2, r2, r5
 800df78:	d41f      	bmi.n	800dfba <_malloc_r+0xd6>
 800df7a:	2a0b      	cmp	r2, #11
 800df7c:	d917      	bls.n	800dfae <_malloc_r+0xca>
 800df7e:	1961      	adds	r1, r4, r5
 800df80:	42a3      	cmp	r3, r4
 800df82:	6025      	str	r5, [r4, #0]
 800df84:	bf18      	it	ne
 800df86:	6059      	strne	r1, [r3, #4]
 800df88:	6863      	ldr	r3, [r4, #4]
 800df8a:	bf08      	it	eq
 800df8c:	f8c8 1000 	streq.w	r1, [r8]
 800df90:	5162      	str	r2, [r4, r5]
 800df92:	604b      	str	r3, [r1, #4]
 800df94:	4638      	mov	r0, r7
 800df96:	f104 060b 	add.w	r6, r4, #11
 800df9a:	f000 f829 	bl	800dff0 <__malloc_unlock>
 800df9e:	f026 0607 	bic.w	r6, r6, #7
 800dfa2:	1d23      	adds	r3, r4, #4
 800dfa4:	1af2      	subs	r2, r6, r3
 800dfa6:	d0ae      	beq.n	800df06 <_malloc_r+0x22>
 800dfa8:	1b9b      	subs	r3, r3, r6
 800dfaa:	50a3      	str	r3, [r4, r2]
 800dfac:	e7ab      	b.n	800df06 <_malloc_r+0x22>
 800dfae:	42a3      	cmp	r3, r4
 800dfb0:	6862      	ldr	r2, [r4, #4]
 800dfb2:	d1dd      	bne.n	800df70 <_malloc_r+0x8c>
 800dfb4:	f8c8 2000 	str.w	r2, [r8]
 800dfb8:	e7ec      	b.n	800df94 <_malloc_r+0xb0>
 800dfba:	4623      	mov	r3, r4
 800dfbc:	6864      	ldr	r4, [r4, #4]
 800dfbe:	e7ac      	b.n	800df1a <_malloc_r+0x36>
 800dfc0:	4634      	mov	r4, r6
 800dfc2:	6876      	ldr	r6, [r6, #4]
 800dfc4:	e7b4      	b.n	800df30 <_malloc_r+0x4c>
 800dfc6:	4613      	mov	r3, r2
 800dfc8:	e7cc      	b.n	800df64 <_malloc_r+0x80>
 800dfca:	230c      	movs	r3, #12
 800dfcc:	603b      	str	r3, [r7, #0]
 800dfce:	4638      	mov	r0, r7
 800dfd0:	f000 f80e 	bl	800dff0 <__malloc_unlock>
 800dfd4:	e797      	b.n	800df06 <_malloc_r+0x22>
 800dfd6:	6025      	str	r5, [r4, #0]
 800dfd8:	e7dc      	b.n	800df94 <_malloc_r+0xb0>
 800dfda:	605b      	str	r3, [r3, #4]
 800dfdc:	deff      	udf	#255	; 0xff
 800dfde:	bf00      	nop
 800dfe0:	200022c8 	.word	0x200022c8

0800dfe4 <__malloc_lock>:
 800dfe4:	4801      	ldr	r0, [pc, #4]	; (800dfec <__malloc_lock+0x8>)
 800dfe6:	f7ff b88c 	b.w	800d102 <__retarget_lock_acquire_recursive>
 800dfea:	bf00      	nop
 800dfec:	200022c4 	.word	0x200022c4

0800dff0 <__malloc_unlock>:
 800dff0:	4801      	ldr	r0, [pc, #4]	; (800dff8 <__malloc_unlock+0x8>)
 800dff2:	f7ff b887 	b.w	800d104 <__retarget_lock_release_recursive>
 800dff6:	bf00      	nop
 800dff8:	200022c4 	.word	0x200022c4

0800dffc <_Balloc>:
 800dffc:	b570      	push	{r4, r5, r6, lr}
 800dffe:	69c6      	ldr	r6, [r0, #28]
 800e000:	4604      	mov	r4, r0
 800e002:	460d      	mov	r5, r1
 800e004:	b976      	cbnz	r6, 800e024 <_Balloc+0x28>
 800e006:	2010      	movs	r0, #16
 800e008:	f7ff ff44 	bl	800de94 <malloc>
 800e00c:	4602      	mov	r2, r0
 800e00e:	61e0      	str	r0, [r4, #28]
 800e010:	b920      	cbnz	r0, 800e01c <_Balloc+0x20>
 800e012:	4b18      	ldr	r3, [pc, #96]	; (800e074 <_Balloc+0x78>)
 800e014:	4818      	ldr	r0, [pc, #96]	; (800e078 <_Balloc+0x7c>)
 800e016:	216b      	movs	r1, #107	; 0x6b
 800e018:	f000 fdaa 	bl	800eb70 <__assert_func>
 800e01c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e020:	6006      	str	r6, [r0, #0]
 800e022:	60c6      	str	r6, [r0, #12]
 800e024:	69e6      	ldr	r6, [r4, #28]
 800e026:	68f3      	ldr	r3, [r6, #12]
 800e028:	b183      	cbz	r3, 800e04c <_Balloc+0x50>
 800e02a:	69e3      	ldr	r3, [r4, #28]
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e032:	b9b8      	cbnz	r0, 800e064 <_Balloc+0x68>
 800e034:	2101      	movs	r1, #1
 800e036:	fa01 f605 	lsl.w	r6, r1, r5
 800e03a:	1d72      	adds	r2, r6, #5
 800e03c:	0092      	lsls	r2, r2, #2
 800e03e:	4620      	mov	r0, r4
 800e040:	f000 fdb4 	bl	800ebac <_calloc_r>
 800e044:	b160      	cbz	r0, 800e060 <_Balloc+0x64>
 800e046:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e04a:	e00e      	b.n	800e06a <_Balloc+0x6e>
 800e04c:	2221      	movs	r2, #33	; 0x21
 800e04e:	2104      	movs	r1, #4
 800e050:	4620      	mov	r0, r4
 800e052:	f000 fdab 	bl	800ebac <_calloc_r>
 800e056:	69e3      	ldr	r3, [r4, #28]
 800e058:	60f0      	str	r0, [r6, #12]
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d1e4      	bne.n	800e02a <_Balloc+0x2e>
 800e060:	2000      	movs	r0, #0
 800e062:	bd70      	pop	{r4, r5, r6, pc}
 800e064:	6802      	ldr	r2, [r0, #0]
 800e066:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e06a:	2300      	movs	r3, #0
 800e06c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e070:	e7f7      	b.n	800e062 <_Balloc+0x66>
 800e072:	bf00      	nop
 800e074:	0800f2c9 	.word	0x0800f2c9
 800e078:	0800f349 	.word	0x0800f349

0800e07c <_Bfree>:
 800e07c:	b570      	push	{r4, r5, r6, lr}
 800e07e:	69c6      	ldr	r6, [r0, #28]
 800e080:	4605      	mov	r5, r0
 800e082:	460c      	mov	r4, r1
 800e084:	b976      	cbnz	r6, 800e0a4 <_Bfree+0x28>
 800e086:	2010      	movs	r0, #16
 800e088:	f7ff ff04 	bl	800de94 <malloc>
 800e08c:	4602      	mov	r2, r0
 800e08e:	61e8      	str	r0, [r5, #28]
 800e090:	b920      	cbnz	r0, 800e09c <_Bfree+0x20>
 800e092:	4b09      	ldr	r3, [pc, #36]	; (800e0b8 <_Bfree+0x3c>)
 800e094:	4809      	ldr	r0, [pc, #36]	; (800e0bc <_Bfree+0x40>)
 800e096:	218f      	movs	r1, #143	; 0x8f
 800e098:	f000 fd6a 	bl	800eb70 <__assert_func>
 800e09c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0a0:	6006      	str	r6, [r0, #0]
 800e0a2:	60c6      	str	r6, [r0, #12]
 800e0a4:	b13c      	cbz	r4, 800e0b6 <_Bfree+0x3a>
 800e0a6:	69eb      	ldr	r3, [r5, #28]
 800e0a8:	6862      	ldr	r2, [r4, #4]
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e0b0:	6021      	str	r1, [r4, #0]
 800e0b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e0b6:	bd70      	pop	{r4, r5, r6, pc}
 800e0b8:	0800f2c9 	.word	0x0800f2c9
 800e0bc:	0800f349 	.word	0x0800f349

0800e0c0 <__multadd>:
 800e0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c4:	690d      	ldr	r5, [r1, #16]
 800e0c6:	4607      	mov	r7, r0
 800e0c8:	460c      	mov	r4, r1
 800e0ca:	461e      	mov	r6, r3
 800e0cc:	f101 0c14 	add.w	ip, r1, #20
 800e0d0:	2000      	movs	r0, #0
 800e0d2:	f8dc 3000 	ldr.w	r3, [ip]
 800e0d6:	b299      	uxth	r1, r3
 800e0d8:	fb02 6101 	mla	r1, r2, r1, r6
 800e0dc:	0c1e      	lsrs	r6, r3, #16
 800e0de:	0c0b      	lsrs	r3, r1, #16
 800e0e0:	fb02 3306 	mla	r3, r2, r6, r3
 800e0e4:	b289      	uxth	r1, r1
 800e0e6:	3001      	adds	r0, #1
 800e0e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e0ec:	4285      	cmp	r5, r0
 800e0ee:	f84c 1b04 	str.w	r1, [ip], #4
 800e0f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e0f6:	dcec      	bgt.n	800e0d2 <__multadd+0x12>
 800e0f8:	b30e      	cbz	r6, 800e13e <__multadd+0x7e>
 800e0fa:	68a3      	ldr	r3, [r4, #8]
 800e0fc:	42ab      	cmp	r3, r5
 800e0fe:	dc19      	bgt.n	800e134 <__multadd+0x74>
 800e100:	6861      	ldr	r1, [r4, #4]
 800e102:	4638      	mov	r0, r7
 800e104:	3101      	adds	r1, #1
 800e106:	f7ff ff79 	bl	800dffc <_Balloc>
 800e10a:	4680      	mov	r8, r0
 800e10c:	b928      	cbnz	r0, 800e11a <__multadd+0x5a>
 800e10e:	4602      	mov	r2, r0
 800e110:	4b0c      	ldr	r3, [pc, #48]	; (800e144 <__multadd+0x84>)
 800e112:	480d      	ldr	r0, [pc, #52]	; (800e148 <__multadd+0x88>)
 800e114:	21ba      	movs	r1, #186	; 0xba
 800e116:	f000 fd2b 	bl	800eb70 <__assert_func>
 800e11a:	6922      	ldr	r2, [r4, #16]
 800e11c:	3202      	adds	r2, #2
 800e11e:	f104 010c 	add.w	r1, r4, #12
 800e122:	0092      	lsls	r2, r2, #2
 800e124:	300c      	adds	r0, #12
 800e126:	f000 fd15 	bl	800eb54 <memcpy>
 800e12a:	4621      	mov	r1, r4
 800e12c:	4638      	mov	r0, r7
 800e12e:	f7ff ffa5 	bl	800e07c <_Bfree>
 800e132:	4644      	mov	r4, r8
 800e134:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e138:	3501      	adds	r5, #1
 800e13a:	615e      	str	r6, [r3, #20]
 800e13c:	6125      	str	r5, [r4, #16]
 800e13e:	4620      	mov	r0, r4
 800e140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e144:	0800f338 	.word	0x0800f338
 800e148:	0800f349 	.word	0x0800f349

0800e14c <__hi0bits>:
 800e14c:	0c03      	lsrs	r3, r0, #16
 800e14e:	041b      	lsls	r3, r3, #16
 800e150:	b9d3      	cbnz	r3, 800e188 <__hi0bits+0x3c>
 800e152:	0400      	lsls	r0, r0, #16
 800e154:	2310      	movs	r3, #16
 800e156:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e15a:	bf04      	itt	eq
 800e15c:	0200      	lsleq	r0, r0, #8
 800e15e:	3308      	addeq	r3, #8
 800e160:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e164:	bf04      	itt	eq
 800e166:	0100      	lsleq	r0, r0, #4
 800e168:	3304      	addeq	r3, #4
 800e16a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e16e:	bf04      	itt	eq
 800e170:	0080      	lsleq	r0, r0, #2
 800e172:	3302      	addeq	r3, #2
 800e174:	2800      	cmp	r0, #0
 800e176:	db05      	blt.n	800e184 <__hi0bits+0x38>
 800e178:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e17c:	f103 0301 	add.w	r3, r3, #1
 800e180:	bf08      	it	eq
 800e182:	2320      	moveq	r3, #32
 800e184:	4618      	mov	r0, r3
 800e186:	4770      	bx	lr
 800e188:	2300      	movs	r3, #0
 800e18a:	e7e4      	b.n	800e156 <__hi0bits+0xa>

0800e18c <__lo0bits>:
 800e18c:	6803      	ldr	r3, [r0, #0]
 800e18e:	f013 0207 	ands.w	r2, r3, #7
 800e192:	d00c      	beq.n	800e1ae <__lo0bits+0x22>
 800e194:	07d9      	lsls	r1, r3, #31
 800e196:	d422      	bmi.n	800e1de <__lo0bits+0x52>
 800e198:	079a      	lsls	r2, r3, #30
 800e19a:	bf49      	itett	mi
 800e19c:	085b      	lsrmi	r3, r3, #1
 800e19e:	089b      	lsrpl	r3, r3, #2
 800e1a0:	6003      	strmi	r3, [r0, #0]
 800e1a2:	2201      	movmi	r2, #1
 800e1a4:	bf5c      	itt	pl
 800e1a6:	6003      	strpl	r3, [r0, #0]
 800e1a8:	2202      	movpl	r2, #2
 800e1aa:	4610      	mov	r0, r2
 800e1ac:	4770      	bx	lr
 800e1ae:	b299      	uxth	r1, r3
 800e1b0:	b909      	cbnz	r1, 800e1b6 <__lo0bits+0x2a>
 800e1b2:	0c1b      	lsrs	r3, r3, #16
 800e1b4:	2210      	movs	r2, #16
 800e1b6:	b2d9      	uxtb	r1, r3
 800e1b8:	b909      	cbnz	r1, 800e1be <__lo0bits+0x32>
 800e1ba:	3208      	adds	r2, #8
 800e1bc:	0a1b      	lsrs	r3, r3, #8
 800e1be:	0719      	lsls	r1, r3, #28
 800e1c0:	bf04      	itt	eq
 800e1c2:	091b      	lsreq	r3, r3, #4
 800e1c4:	3204      	addeq	r2, #4
 800e1c6:	0799      	lsls	r1, r3, #30
 800e1c8:	bf04      	itt	eq
 800e1ca:	089b      	lsreq	r3, r3, #2
 800e1cc:	3202      	addeq	r2, #2
 800e1ce:	07d9      	lsls	r1, r3, #31
 800e1d0:	d403      	bmi.n	800e1da <__lo0bits+0x4e>
 800e1d2:	085b      	lsrs	r3, r3, #1
 800e1d4:	f102 0201 	add.w	r2, r2, #1
 800e1d8:	d003      	beq.n	800e1e2 <__lo0bits+0x56>
 800e1da:	6003      	str	r3, [r0, #0]
 800e1dc:	e7e5      	b.n	800e1aa <__lo0bits+0x1e>
 800e1de:	2200      	movs	r2, #0
 800e1e0:	e7e3      	b.n	800e1aa <__lo0bits+0x1e>
 800e1e2:	2220      	movs	r2, #32
 800e1e4:	e7e1      	b.n	800e1aa <__lo0bits+0x1e>
	...

0800e1e8 <__i2b>:
 800e1e8:	b510      	push	{r4, lr}
 800e1ea:	460c      	mov	r4, r1
 800e1ec:	2101      	movs	r1, #1
 800e1ee:	f7ff ff05 	bl	800dffc <_Balloc>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	b928      	cbnz	r0, 800e202 <__i2b+0x1a>
 800e1f6:	4b05      	ldr	r3, [pc, #20]	; (800e20c <__i2b+0x24>)
 800e1f8:	4805      	ldr	r0, [pc, #20]	; (800e210 <__i2b+0x28>)
 800e1fa:	f240 1145 	movw	r1, #325	; 0x145
 800e1fe:	f000 fcb7 	bl	800eb70 <__assert_func>
 800e202:	2301      	movs	r3, #1
 800e204:	6144      	str	r4, [r0, #20]
 800e206:	6103      	str	r3, [r0, #16]
 800e208:	bd10      	pop	{r4, pc}
 800e20a:	bf00      	nop
 800e20c:	0800f338 	.word	0x0800f338
 800e210:	0800f349 	.word	0x0800f349

0800e214 <__multiply>:
 800e214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e218:	4691      	mov	r9, r2
 800e21a:	690a      	ldr	r2, [r1, #16]
 800e21c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e220:	429a      	cmp	r2, r3
 800e222:	bfb8      	it	lt
 800e224:	460b      	movlt	r3, r1
 800e226:	460c      	mov	r4, r1
 800e228:	bfbc      	itt	lt
 800e22a:	464c      	movlt	r4, r9
 800e22c:	4699      	movlt	r9, r3
 800e22e:	6927      	ldr	r7, [r4, #16]
 800e230:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e234:	68a3      	ldr	r3, [r4, #8]
 800e236:	6861      	ldr	r1, [r4, #4]
 800e238:	eb07 060a 	add.w	r6, r7, sl
 800e23c:	42b3      	cmp	r3, r6
 800e23e:	b085      	sub	sp, #20
 800e240:	bfb8      	it	lt
 800e242:	3101      	addlt	r1, #1
 800e244:	f7ff feda 	bl	800dffc <_Balloc>
 800e248:	b930      	cbnz	r0, 800e258 <__multiply+0x44>
 800e24a:	4602      	mov	r2, r0
 800e24c:	4b44      	ldr	r3, [pc, #272]	; (800e360 <__multiply+0x14c>)
 800e24e:	4845      	ldr	r0, [pc, #276]	; (800e364 <__multiply+0x150>)
 800e250:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e254:	f000 fc8c 	bl	800eb70 <__assert_func>
 800e258:	f100 0514 	add.w	r5, r0, #20
 800e25c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e260:	462b      	mov	r3, r5
 800e262:	2200      	movs	r2, #0
 800e264:	4543      	cmp	r3, r8
 800e266:	d321      	bcc.n	800e2ac <__multiply+0x98>
 800e268:	f104 0314 	add.w	r3, r4, #20
 800e26c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e270:	f109 0314 	add.w	r3, r9, #20
 800e274:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e278:	9202      	str	r2, [sp, #8]
 800e27a:	1b3a      	subs	r2, r7, r4
 800e27c:	3a15      	subs	r2, #21
 800e27e:	f022 0203 	bic.w	r2, r2, #3
 800e282:	3204      	adds	r2, #4
 800e284:	f104 0115 	add.w	r1, r4, #21
 800e288:	428f      	cmp	r7, r1
 800e28a:	bf38      	it	cc
 800e28c:	2204      	movcc	r2, #4
 800e28e:	9201      	str	r2, [sp, #4]
 800e290:	9a02      	ldr	r2, [sp, #8]
 800e292:	9303      	str	r3, [sp, #12]
 800e294:	429a      	cmp	r2, r3
 800e296:	d80c      	bhi.n	800e2b2 <__multiply+0x9e>
 800e298:	2e00      	cmp	r6, #0
 800e29a:	dd03      	ble.n	800e2a4 <__multiply+0x90>
 800e29c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d05b      	beq.n	800e35c <__multiply+0x148>
 800e2a4:	6106      	str	r6, [r0, #16]
 800e2a6:	b005      	add	sp, #20
 800e2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ac:	f843 2b04 	str.w	r2, [r3], #4
 800e2b0:	e7d8      	b.n	800e264 <__multiply+0x50>
 800e2b2:	f8b3 a000 	ldrh.w	sl, [r3]
 800e2b6:	f1ba 0f00 	cmp.w	sl, #0
 800e2ba:	d024      	beq.n	800e306 <__multiply+0xf2>
 800e2bc:	f104 0e14 	add.w	lr, r4, #20
 800e2c0:	46a9      	mov	r9, r5
 800e2c2:	f04f 0c00 	mov.w	ip, #0
 800e2c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e2ca:	f8d9 1000 	ldr.w	r1, [r9]
 800e2ce:	fa1f fb82 	uxth.w	fp, r2
 800e2d2:	b289      	uxth	r1, r1
 800e2d4:	fb0a 110b 	mla	r1, sl, fp, r1
 800e2d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e2dc:	f8d9 2000 	ldr.w	r2, [r9]
 800e2e0:	4461      	add	r1, ip
 800e2e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e2e6:	fb0a c20b 	mla	r2, sl, fp, ip
 800e2ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e2ee:	b289      	uxth	r1, r1
 800e2f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e2f4:	4577      	cmp	r7, lr
 800e2f6:	f849 1b04 	str.w	r1, [r9], #4
 800e2fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e2fe:	d8e2      	bhi.n	800e2c6 <__multiply+0xb2>
 800e300:	9a01      	ldr	r2, [sp, #4]
 800e302:	f845 c002 	str.w	ip, [r5, r2]
 800e306:	9a03      	ldr	r2, [sp, #12]
 800e308:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e30c:	3304      	adds	r3, #4
 800e30e:	f1b9 0f00 	cmp.w	r9, #0
 800e312:	d021      	beq.n	800e358 <__multiply+0x144>
 800e314:	6829      	ldr	r1, [r5, #0]
 800e316:	f104 0c14 	add.w	ip, r4, #20
 800e31a:	46ae      	mov	lr, r5
 800e31c:	f04f 0a00 	mov.w	sl, #0
 800e320:	f8bc b000 	ldrh.w	fp, [ip]
 800e324:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e328:	fb09 220b 	mla	r2, r9, fp, r2
 800e32c:	4452      	add	r2, sl
 800e32e:	b289      	uxth	r1, r1
 800e330:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e334:	f84e 1b04 	str.w	r1, [lr], #4
 800e338:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e33c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e340:	f8be 1000 	ldrh.w	r1, [lr]
 800e344:	fb09 110a 	mla	r1, r9, sl, r1
 800e348:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e34c:	4567      	cmp	r7, ip
 800e34e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e352:	d8e5      	bhi.n	800e320 <__multiply+0x10c>
 800e354:	9a01      	ldr	r2, [sp, #4]
 800e356:	50a9      	str	r1, [r5, r2]
 800e358:	3504      	adds	r5, #4
 800e35a:	e799      	b.n	800e290 <__multiply+0x7c>
 800e35c:	3e01      	subs	r6, #1
 800e35e:	e79b      	b.n	800e298 <__multiply+0x84>
 800e360:	0800f338 	.word	0x0800f338
 800e364:	0800f349 	.word	0x0800f349

0800e368 <__pow5mult>:
 800e368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e36c:	4615      	mov	r5, r2
 800e36e:	f012 0203 	ands.w	r2, r2, #3
 800e372:	4606      	mov	r6, r0
 800e374:	460f      	mov	r7, r1
 800e376:	d007      	beq.n	800e388 <__pow5mult+0x20>
 800e378:	4c25      	ldr	r4, [pc, #148]	; (800e410 <__pow5mult+0xa8>)
 800e37a:	3a01      	subs	r2, #1
 800e37c:	2300      	movs	r3, #0
 800e37e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e382:	f7ff fe9d 	bl	800e0c0 <__multadd>
 800e386:	4607      	mov	r7, r0
 800e388:	10ad      	asrs	r5, r5, #2
 800e38a:	d03d      	beq.n	800e408 <__pow5mult+0xa0>
 800e38c:	69f4      	ldr	r4, [r6, #28]
 800e38e:	b97c      	cbnz	r4, 800e3b0 <__pow5mult+0x48>
 800e390:	2010      	movs	r0, #16
 800e392:	f7ff fd7f 	bl	800de94 <malloc>
 800e396:	4602      	mov	r2, r0
 800e398:	61f0      	str	r0, [r6, #28]
 800e39a:	b928      	cbnz	r0, 800e3a8 <__pow5mult+0x40>
 800e39c:	4b1d      	ldr	r3, [pc, #116]	; (800e414 <__pow5mult+0xac>)
 800e39e:	481e      	ldr	r0, [pc, #120]	; (800e418 <__pow5mult+0xb0>)
 800e3a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e3a4:	f000 fbe4 	bl	800eb70 <__assert_func>
 800e3a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e3ac:	6004      	str	r4, [r0, #0]
 800e3ae:	60c4      	str	r4, [r0, #12]
 800e3b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e3b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e3b8:	b94c      	cbnz	r4, 800e3ce <__pow5mult+0x66>
 800e3ba:	f240 2171 	movw	r1, #625	; 0x271
 800e3be:	4630      	mov	r0, r6
 800e3c0:	f7ff ff12 	bl	800e1e8 <__i2b>
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	6003      	str	r3, [r0, #0]
 800e3ce:	f04f 0900 	mov.w	r9, #0
 800e3d2:	07eb      	lsls	r3, r5, #31
 800e3d4:	d50a      	bpl.n	800e3ec <__pow5mult+0x84>
 800e3d6:	4639      	mov	r1, r7
 800e3d8:	4622      	mov	r2, r4
 800e3da:	4630      	mov	r0, r6
 800e3dc:	f7ff ff1a 	bl	800e214 <__multiply>
 800e3e0:	4639      	mov	r1, r7
 800e3e2:	4680      	mov	r8, r0
 800e3e4:	4630      	mov	r0, r6
 800e3e6:	f7ff fe49 	bl	800e07c <_Bfree>
 800e3ea:	4647      	mov	r7, r8
 800e3ec:	106d      	asrs	r5, r5, #1
 800e3ee:	d00b      	beq.n	800e408 <__pow5mult+0xa0>
 800e3f0:	6820      	ldr	r0, [r4, #0]
 800e3f2:	b938      	cbnz	r0, 800e404 <__pow5mult+0x9c>
 800e3f4:	4622      	mov	r2, r4
 800e3f6:	4621      	mov	r1, r4
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	f7ff ff0b 	bl	800e214 <__multiply>
 800e3fe:	6020      	str	r0, [r4, #0]
 800e400:	f8c0 9000 	str.w	r9, [r0]
 800e404:	4604      	mov	r4, r0
 800e406:	e7e4      	b.n	800e3d2 <__pow5mult+0x6a>
 800e408:	4638      	mov	r0, r7
 800e40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e40e:	bf00      	nop
 800e410:	0800f498 	.word	0x0800f498
 800e414:	0800f2c9 	.word	0x0800f2c9
 800e418:	0800f349 	.word	0x0800f349

0800e41c <__lshift>:
 800e41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e420:	460c      	mov	r4, r1
 800e422:	6849      	ldr	r1, [r1, #4]
 800e424:	6923      	ldr	r3, [r4, #16]
 800e426:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e42a:	68a3      	ldr	r3, [r4, #8]
 800e42c:	4607      	mov	r7, r0
 800e42e:	4691      	mov	r9, r2
 800e430:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e434:	f108 0601 	add.w	r6, r8, #1
 800e438:	42b3      	cmp	r3, r6
 800e43a:	db0b      	blt.n	800e454 <__lshift+0x38>
 800e43c:	4638      	mov	r0, r7
 800e43e:	f7ff fddd 	bl	800dffc <_Balloc>
 800e442:	4605      	mov	r5, r0
 800e444:	b948      	cbnz	r0, 800e45a <__lshift+0x3e>
 800e446:	4602      	mov	r2, r0
 800e448:	4b28      	ldr	r3, [pc, #160]	; (800e4ec <__lshift+0xd0>)
 800e44a:	4829      	ldr	r0, [pc, #164]	; (800e4f0 <__lshift+0xd4>)
 800e44c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e450:	f000 fb8e 	bl	800eb70 <__assert_func>
 800e454:	3101      	adds	r1, #1
 800e456:	005b      	lsls	r3, r3, #1
 800e458:	e7ee      	b.n	800e438 <__lshift+0x1c>
 800e45a:	2300      	movs	r3, #0
 800e45c:	f100 0114 	add.w	r1, r0, #20
 800e460:	f100 0210 	add.w	r2, r0, #16
 800e464:	4618      	mov	r0, r3
 800e466:	4553      	cmp	r3, sl
 800e468:	db33      	blt.n	800e4d2 <__lshift+0xb6>
 800e46a:	6920      	ldr	r0, [r4, #16]
 800e46c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e470:	f104 0314 	add.w	r3, r4, #20
 800e474:	f019 091f 	ands.w	r9, r9, #31
 800e478:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e47c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e480:	d02b      	beq.n	800e4da <__lshift+0xbe>
 800e482:	f1c9 0e20 	rsb	lr, r9, #32
 800e486:	468a      	mov	sl, r1
 800e488:	2200      	movs	r2, #0
 800e48a:	6818      	ldr	r0, [r3, #0]
 800e48c:	fa00 f009 	lsl.w	r0, r0, r9
 800e490:	4310      	orrs	r0, r2
 800e492:	f84a 0b04 	str.w	r0, [sl], #4
 800e496:	f853 2b04 	ldr.w	r2, [r3], #4
 800e49a:	459c      	cmp	ip, r3
 800e49c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e4a0:	d8f3      	bhi.n	800e48a <__lshift+0x6e>
 800e4a2:	ebac 0304 	sub.w	r3, ip, r4
 800e4a6:	3b15      	subs	r3, #21
 800e4a8:	f023 0303 	bic.w	r3, r3, #3
 800e4ac:	3304      	adds	r3, #4
 800e4ae:	f104 0015 	add.w	r0, r4, #21
 800e4b2:	4584      	cmp	ip, r0
 800e4b4:	bf38      	it	cc
 800e4b6:	2304      	movcc	r3, #4
 800e4b8:	50ca      	str	r2, [r1, r3]
 800e4ba:	b10a      	cbz	r2, 800e4c0 <__lshift+0xa4>
 800e4bc:	f108 0602 	add.w	r6, r8, #2
 800e4c0:	3e01      	subs	r6, #1
 800e4c2:	4638      	mov	r0, r7
 800e4c4:	612e      	str	r6, [r5, #16]
 800e4c6:	4621      	mov	r1, r4
 800e4c8:	f7ff fdd8 	bl	800e07c <_Bfree>
 800e4cc:	4628      	mov	r0, r5
 800e4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	e7c5      	b.n	800e466 <__lshift+0x4a>
 800e4da:	3904      	subs	r1, #4
 800e4dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e4e4:	459c      	cmp	ip, r3
 800e4e6:	d8f9      	bhi.n	800e4dc <__lshift+0xc0>
 800e4e8:	e7ea      	b.n	800e4c0 <__lshift+0xa4>
 800e4ea:	bf00      	nop
 800e4ec:	0800f338 	.word	0x0800f338
 800e4f0:	0800f349 	.word	0x0800f349

0800e4f4 <__mcmp>:
 800e4f4:	b530      	push	{r4, r5, lr}
 800e4f6:	6902      	ldr	r2, [r0, #16]
 800e4f8:	690c      	ldr	r4, [r1, #16]
 800e4fa:	1b12      	subs	r2, r2, r4
 800e4fc:	d10e      	bne.n	800e51c <__mcmp+0x28>
 800e4fe:	f100 0314 	add.w	r3, r0, #20
 800e502:	3114      	adds	r1, #20
 800e504:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e508:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e50c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e510:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e514:	42a5      	cmp	r5, r4
 800e516:	d003      	beq.n	800e520 <__mcmp+0x2c>
 800e518:	d305      	bcc.n	800e526 <__mcmp+0x32>
 800e51a:	2201      	movs	r2, #1
 800e51c:	4610      	mov	r0, r2
 800e51e:	bd30      	pop	{r4, r5, pc}
 800e520:	4283      	cmp	r3, r0
 800e522:	d3f3      	bcc.n	800e50c <__mcmp+0x18>
 800e524:	e7fa      	b.n	800e51c <__mcmp+0x28>
 800e526:	f04f 32ff 	mov.w	r2, #4294967295
 800e52a:	e7f7      	b.n	800e51c <__mcmp+0x28>

0800e52c <__mdiff>:
 800e52c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e530:	460c      	mov	r4, r1
 800e532:	4606      	mov	r6, r0
 800e534:	4611      	mov	r1, r2
 800e536:	4620      	mov	r0, r4
 800e538:	4690      	mov	r8, r2
 800e53a:	f7ff ffdb 	bl	800e4f4 <__mcmp>
 800e53e:	1e05      	subs	r5, r0, #0
 800e540:	d110      	bne.n	800e564 <__mdiff+0x38>
 800e542:	4629      	mov	r1, r5
 800e544:	4630      	mov	r0, r6
 800e546:	f7ff fd59 	bl	800dffc <_Balloc>
 800e54a:	b930      	cbnz	r0, 800e55a <__mdiff+0x2e>
 800e54c:	4b3a      	ldr	r3, [pc, #232]	; (800e638 <__mdiff+0x10c>)
 800e54e:	4602      	mov	r2, r0
 800e550:	f240 2137 	movw	r1, #567	; 0x237
 800e554:	4839      	ldr	r0, [pc, #228]	; (800e63c <__mdiff+0x110>)
 800e556:	f000 fb0b 	bl	800eb70 <__assert_func>
 800e55a:	2301      	movs	r3, #1
 800e55c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e564:	bfa4      	itt	ge
 800e566:	4643      	movge	r3, r8
 800e568:	46a0      	movge	r8, r4
 800e56a:	4630      	mov	r0, r6
 800e56c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e570:	bfa6      	itte	ge
 800e572:	461c      	movge	r4, r3
 800e574:	2500      	movge	r5, #0
 800e576:	2501      	movlt	r5, #1
 800e578:	f7ff fd40 	bl	800dffc <_Balloc>
 800e57c:	b920      	cbnz	r0, 800e588 <__mdiff+0x5c>
 800e57e:	4b2e      	ldr	r3, [pc, #184]	; (800e638 <__mdiff+0x10c>)
 800e580:	4602      	mov	r2, r0
 800e582:	f240 2145 	movw	r1, #581	; 0x245
 800e586:	e7e5      	b.n	800e554 <__mdiff+0x28>
 800e588:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e58c:	6926      	ldr	r6, [r4, #16]
 800e58e:	60c5      	str	r5, [r0, #12]
 800e590:	f104 0914 	add.w	r9, r4, #20
 800e594:	f108 0514 	add.w	r5, r8, #20
 800e598:	f100 0e14 	add.w	lr, r0, #20
 800e59c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e5a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e5a4:	f108 0210 	add.w	r2, r8, #16
 800e5a8:	46f2      	mov	sl, lr
 800e5aa:	2100      	movs	r1, #0
 800e5ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800e5b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e5b4:	fa11 f88b 	uxtah	r8, r1, fp
 800e5b8:	b299      	uxth	r1, r3
 800e5ba:	0c1b      	lsrs	r3, r3, #16
 800e5bc:	eba8 0801 	sub.w	r8, r8, r1
 800e5c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e5c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e5c8:	fa1f f888 	uxth.w	r8, r8
 800e5cc:	1419      	asrs	r1, r3, #16
 800e5ce:	454e      	cmp	r6, r9
 800e5d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e5d4:	f84a 3b04 	str.w	r3, [sl], #4
 800e5d8:	d8e8      	bhi.n	800e5ac <__mdiff+0x80>
 800e5da:	1b33      	subs	r3, r6, r4
 800e5dc:	3b15      	subs	r3, #21
 800e5de:	f023 0303 	bic.w	r3, r3, #3
 800e5e2:	3304      	adds	r3, #4
 800e5e4:	3415      	adds	r4, #21
 800e5e6:	42a6      	cmp	r6, r4
 800e5e8:	bf38      	it	cc
 800e5ea:	2304      	movcc	r3, #4
 800e5ec:	441d      	add	r5, r3
 800e5ee:	4473      	add	r3, lr
 800e5f0:	469e      	mov	lr, r3
 800e5f2:	462e      	mov	r6, r5
 800e5f4:	4566      	cmp	r6, ip
 800e5f6:	d30e      	bcc.n	800e616 <__mdiff+0xea>
 800e5f8:	f10c 0203 	add.w	r2, ip, #3
 800e5fc:	1b52      	subs	r2, r2, r5
 800e5fe:	f022 0203 	bic.w	r2, r2, #3
 800e602:	3d03      	subs	r5, #3
 800e604:	45ac      	cmp	ip, r5
 800e606:	bf38      	it	cc
 800e608:	2200      	movcc	r2, #0
 800e60a:	4413      	add	r3, r2
 800e60c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e610:	b17a      	cbz	r2, 800e632 <__mdiff+0x106>
 800e612:	6107      	str	r7, [r0, #16]
 800e614:	e7a4      	b.n	800e560 <__mdiff+0x34>
 800e616:	f856 8b04 	ldr.w	r8, [r6], #4
 800e61a:	fa11 f288 	uxtah	r2, r1, r8
 800e61e:	1414      	asrs	r4, r2, #16
 800e620:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e624:	b292      	uxth	r2, r2
 800e626:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e62a:	f84e 2b04 	str.w	r2, [lr], #4
 800e62e:	1421      	asrs	r1, r4, #16
 800e630:	e7e0      	b.n	800e5f4 <__mdiff+0xc8>
 800e632:	3f01      	subs	r7, #1
 800e634:	e7ea      	b.n	800e60c <__mdiff+0xe0>
 800e636:	bf00      	nop
 800e638:	0800f338 	.word	0x0800f338
 800e63c:	0800f349 	.word	0x0800f349

0800e640 <__d2b>:
 800e640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e644:	460f      	mov	r7, r1
 800e646:	2101      	movs	r1, #1
 800e648:	ec59 8b10 	vmov	r8, r9, d0
 800e64c:	4616      	mov	r6, r2
 800e64e:	f7ff fcd5 	bl	800dffc <_Balloc>
 800e652:	4604      	mov	r4, r0
 800e654:	b930      	cbnz	r0, 800e664 <__d2b+0x24>
 800e656:	4602      	mov	r2, r0
 800e658:	4b24      	ldr	r3, [pc, #144]	; (800e6ec <__d2b+0xac>)
 800e65a:	4825      	ldr	r0, [pc, #148]	; (800e6f0 <__d2b+0xb0>)
 800e65c:	f240 310f 	movw	r1, #783	; 0x30f
 800e660:	f000 fa86 	bl	800eb70 <__assert_func>
 800e664:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e668:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e66c:	bb2d      	cbnz	r5, 800e6ba <__d2b+0x7a>
 800e66e:	9301      	str	r3, [sp, #4]
 800e670:	f1b8 0300 	subs.w	r3, r8, #0
 800e674:	d026      	beq.n	800e6c4 <__d2b+0x84>
 800e676:	4668      	mov	r0, sp
 800e678:	9300      	str	r3, [sp, #0]
 800e67a:	f7ff fd87 	bl	800e18c <__lo0bits>
 800e67e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e682:	b1e8      	cbz	r0, 800e6c0 <__d2b+0x80>
 800e684:	f1c0 0320 	rsb	r3, r0, #32
 800e688:	fa02 f303 	lsl.w	r3, r2, r3
 800e68c:	430b      	orrs	r3, r1
 800e68e:	40c2      	lsrs	r2, r0
 800e690:	6163      	str	r3, [r4, #20]
 800e692:	9201      	str	r2, [sp, #4]
 800e694:	9b01      	ldr	r3, [sp, #4]
 800e696:	61a3      	str	r3, [r4, #24]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	bf14      	ite	ne
 800e69c:	2202      	movne	r2, #2
 800e69e:	2201      	moveq	r2, #1
 800e6a0:	6122      	str	r2, [r4, #16]
 800e6a2:	b1bd      	cbz	r5, 800e6d4 <__d2b+0x94>
 800e6a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e6a8:	4405      	add	r5, r0
 800e6aa:	603d      	str	r5, [r7, #0]
 800e6ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e6b0:	6030      	str	r0, [r6, #0]
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	b003      	add	sp, #12
 800e6b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6be:	e7d6      	b.n	800e66e <__d2b+0x2e>
 800e6c0:	6161      	str	r1, [r4, #20]
 800e6c2:	e7e7      	b.n	800e694 <__d2b+0x54>
 800e6c4:	a801      	add	r0, sp, #4
 800e6c6:	f7ff fd61 	bl	800e18c <__lo0bits>
 800e6ca:	9b01      	ldr	r3, [sp, #4]
 800e6cc:	6163      	str	r3, [r4, #20]
 800e6ce:	3020      	adds	r0, #32
 800e6d0:	2201      	movs	r2, #1
 800e6d2:	e7e5      	b.n	800e6a0 <__d2b+0x60>
 800e6d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e6d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e6dc:	6038      	str	r0, [r7, #0]
 800e6de:	6918      	ldr	r0, [r3, #16]
 800e6e0:	f7ff fd34 	bl	800e14c <__hi0bits>
 800e6e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e6e8:	e7e2      	b.n	800e6b0 <__d2b+0x70>
 800e6ea:	bf00      	nop
 800e6ec:	0800f338 	.word	0x0800f338
 800e6f0:	0800f349 	.word	0x0800f349

0800e6f4 <__ssputs_r>:
 800e6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6f8:	688e      	ldr	r6, [r1, #8]
 800e6fa:	461f      	mov	r7, r3
 800e6fc:	42be      	cmp	r6, r7
 800e6fe:	680b      	ldr	r3, [r1, #0]
 800e700:	4682      	mov	sl, r0
 800e702:	460c      	mov	r4, r1
 800e704:	4690      	mov	r8, r2
 800e706:	d82c      	bhi.n	800e762 <__ssputs_r+0x6e>
 800e708:	898a      	ldrh	r2, [r1, #12]
 800e70a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e70e:	d026      	beq.n	800e75e <__ssputs_r+0x6a>
 800e710:	6965      	ldr	r5, [r4, #20]
 800e712:	6909      	ldr	r1, [r1, #16]
 800e714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e718:	eba3 0901 	sub.w	r9, r3, r1
 800e71c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e720:	1c7b      	adds	r3, r7, #1
 800e722:	444b      	add	r3, r9
 800e724:	106d      	asrs	r5, r5, #1
 800e726:	429d      	cmp	r5, r3
 800e728:	bf38      	it	cc
 800e72a:	461d      	movcc	r5, r3
 800e72c:	0553      	lsls	r3, r2, #21
 800e72e:	d527      	bpl.n	800e780 <__ssputs_r+0x8c>
 800e730:	4629      	mov	r1, r5
 800e732:	f7ff fbd7 	bl	800dee4 <_malloc_r>
 800e736:	4606      	mov	r6, r0
 800e738:	b360      	cbz	r0, 800e794 <__ssputs_r+0xa0>
 800e73a:	6921      	ldr	r1, [r4, #16]
 800e73c:	464a      	mov	r2, r9
 800e73e:	f000 fa09 	bl	800eb54 <memcpy>
 800e742:	89a3      	ldrh	r3, [r4, #12]
 800e744:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e74c:	81a3      	strh	r3, [r4, #12]
 800e74e:	6126      	str	r6, [r4, #16]
 800e750:	6165      	str	r5, [r4, #20]
 800e752:	444e      	add	r6, r9
 800e754:	eba5 0509 	sub.w	r5, r5, r9
 800e758:	6026      	str	r6, [r4, #0]
 800e75a:	60a5      	str	r5, [r4, #8]
 800e75c:	463e      	mov	r6, r7
 800e75e:	42be      	cmp	r6, r7
 800e760:	d900      	bls.n	800e764 <__ssputs_r+0x70>
 800e762:	463e      	mov	r6, r7
 800e764:	6820      	ldr	r0, [r4, #0]
 800e766:	4632      	mov	r2, r6
 800e768:	4641      	mov	r1, r8
 800e76a:	f000 f9c9 	bl	800eb00 <memmove>
 800e76e:	68a3      	ldr	r3, [r4, #8]
 800e770:	1b9b      	subs	r3, r3, r6
 800e772:	60a3      	str	r3, [r4, #8]
 800e774:	6823      	ldr	r3, [r4, #0]
 800e776:	4433      	add	r3, r6
 800e778:	6023      	str	r3, [r4, #0]
 800e77a:	2000      	movs	r0, #0
 800e77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e780:	462a      	mov	r2, r5
 800e782:	f000 fa3b 	bl	800ebfc <_realloc_r>
 800e786:	4606      	mov	r6, r0
 800e788:	2800      	cmp	r0, #0
 800e78a:	d1e0      	bne.n	800e74e <__ssputs_r+0x5a>
 800e78c:	6921      	ldr	r1, [r4, #16]
 800e78e:	4650      	mov	r0, sl
 800e790:	f7ff fb34 	bl	800ddfc <_free_r>
 800e794:	230c      	movs	r3, #12
 800e796:	f8ca 3000 	str.w	r3, [sl]
 800e79a:	89a3      	ldrh	r3, [r4, #12]
 800e79c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7a0:	81a3      	strh	r3, [r4, #12]
 800e7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e7a6:	e7e9      	b.n	800e77c <__ssputs_r+0x88>

0800e7a8 <_svfiprintf_r>:
 800e7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ac:	4698      	mov	r8, r3
 800e7ae:	898b      	ldrh	r3, [r1, #12]
 800e7b0:	061b      	lsls	r3, r3, #24
 800e7b2:	b09d      	sub	sp, #116	; 0x74
 800e7b4:	4607      	mov	r7, r0
 800e7b6:	460d      	mov	r5, r1
 800e7b8:	4614      	mov	r4, r2
 800e7ba:	d50e      	bpl.n	800e7da <_svfiprintf_r+0x32>
 800e7bc:	690b      	ldr	r3, [r1, #16]
 800e7be:	b963      	cbnz	r3, 800e7da <_svfiprintf_r+0x32>
 800e7c0:	2140      	movs	r1, #64	; 0x40
 800e7c2:	f7ff fb8f 	bl	800dee4 <_malloc_r>
 800e7c6:	6028      	str	r0, [r5, #0]
 800e7c8:	6128      	str	r0, [r5, #16]
 800e7ca:	b920      	cbnz	r0, 800e7d6 <_svfiprintf_r+0x2e>
 800e7cc:	230c      	movs	r3, #12
 800e7ce:	603b      	str	r3, [r7, #0]
 800e7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d4:	e0d0      	b.n	800e978 <_svfiprintf_r+0x1d0>
 800e7d6:	2340      	movs	r3, #64	; 0x40
 800e7d8:	616b      	str	r3, [r5, #20]
 800e7da:	2300      	movs	r3, #0
 800e7dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e7de:	2320      	movs	r3, #32
 800e7e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7e8:	2330      	movs	r3, #48	; 0x30
 800e7ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e990 <_svfiprintf_r+0x1e8>
 800e7ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7f2:	f04f 0901 	mov.w	r9, #1
 800e7f6:	4623      	mov	r3, r4
 800e7f8:	469a      	mov	sl, r3
 800e7fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7fe:	b10a      	cbz	r2, 800e804 <_svfiprintf_r+0x5c>
 800e800:	2a25      	cmp	r2, #37	; 0x25
 800e802:	d1f9      	bne.n	800e7f8 <_svfiprintf_r+0x50>
 800e804:	ebba 0b04 	subs.w	fp, sl, r4
 800e808:	d00b      	beq.n	800e822 <_svfiprintf_r+0x7a>
 800e80a:	465b      	mov	r3, fp
 800e80c:	4622      	mov	r2, r4
 800e80e:	4629      	mov	r1, r5
 800e810:	4638      	mov	r0, r7
 800e812:	f7ff ff6f 	bl	800e6f4 <__ssputs_r>
 800e816:	3001      	adds	r0, #1
 800e818:	f000 80a9 	beq.w	800e96e <_svfiprintf_r+0x1c6>
 800e81c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e81e:	445a      	add	r2, fp
 800e820:	9209      	str	r2, [sp, #36]	; 0x24
 800e822:	f89a 3000 	ldrb.w	r3, [sl]
 800e826:	2b00      	cmp	r3, #0
 800e828:	f000 80a1 	beq.w	800e96e <_svfiprintf_r+0x1c6>
 800e82c:	2300      	movs	r3, #0
 800e82e:	f04f 32ff 	mov.w	r2, #4294967295
 800e832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e836:	f10a 0a01 	add.w	sl, sl, #1
 800e83a:	9304      	str	r3, [sp, #16]
 800e83c:	9307      	str	r3, [sp, #28]
 800e83e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e842:	931a      	str	r3, [sp, #104]	; 0x68
 800e844:	4654      	mov	r4, sl
 800e846:	2205      	movs	r2, #5
 800e848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e84c:	4850      	ldr	r0, [pc, #320]	; (800e990 <_svfiprintf_r+0x1e8>)
 800e84e:	f7f1 fcc7 	bl	80001e0 <memchr>
 800e852:	9a04      	ldr	r2, [sp, #16]
 800e854:	b9d8      	cbnz	r0, 800e88e <_svfiprintf_r+0xe6>
 800e856:	06d0      	lsls	r0, r2, #27
 800e858:	bf44      	itt	mi
 800e85a:	2320      	movmi	r3, #32
 800e85c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e860:	0711      	lsls	r1, r2, #28
 800e862:	bf44      	itt	mi
 800e864:	232b      	movmi	r3, #43	; 0x2b
 800e866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e86a:	f89a 3000 	ldrb.w	r3, [sl]
 800e86e:	2b2a      	cmp	r3, #42	; 0x2a
 800e870:	d015      	beq.n	800e89e <_svfiprintf_r+0xf6>
 800e872:	9a07      	ldr	r2, [sp, #28]
 800e874:	4654      	mov	r4, sl
 800e876:	2000      	movs	r0, #0
 800e878:	f04f 0c0a 	mov.w	ip, #10
 800e87c:	4621      	mov	r1, r4
 800e87e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e882:	3b30      	subs	r3, #48	; 0x30
 800e884:	2b09      	cmp	r3, #9
 800e886:	d94d      	bls.n	800e924 <_svfiprintf_r+0x17c>
 800e888:	b1b0      	cbz	r0, 800e8b8 <_svfiprintf_r+0x110>
 800e88a:	9207      	str	r2, [sp, #28]
 800e88c:	e014      	b.n	800e8b8 <_svfiprintf_r+0x110>
 800e88e:	eba0 0308 	sub.w	r3, r0, r8
 800e892:	fa09 f303 	lsl.w	r3, r9, r3
 800e896:	4313      	orrs	r3, r2
 800e898:	9304      	str	r3, [sp, #16]
 800e89a:	46a2      	mov	sl, r4
 800e89c:	e7d2      	b.n	800e844 <_svfiprintf_r+0x9c>
 800e89e:	9b03      	ldr	r3, [sp, #12]
 800e8a0:	1d19      	adds	r1, r3, #4
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	9103      	str	r1, [sp, #12]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	bfbb      	ittet	lt
 800e8aa:	425b      	neglt	r3, r3
 800e8ac:	f042 0202 	orrlt.w	r2, r2, #2
 800e8b0:	9307      	strge	r3, [sp, #28]
 800e8b2:	9307      	strlt	r3, [sp, #28]
 800e8b4:	bfb8      	it	lt
 800e8b6:	9204      	strlt	r2, [sp, #16]
 800e8b8:	7823      	ldrb	r3, [r4, #0]
 800e8ba:	2b2e      	cmp	r3, #46	; 0x2e
 800e8bc:	d10c      	bne.n	800e8d8 <_svfiprintf_r+0x130>
 800e8be:	7863      	ldrb	r3, [r4, #1]
 800e8c0:	2b2a      	cmp	r3, #42	; 0x2a
 800e8c2:	d134      	bne.n	800e92e <_svfiprintf_r+0x186>
 800e8c4:	9b03      	ldr	r3, [sp, #12]
 800e8c6:	1d1a      	adds	r2, r3, #4
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	9203      	str	r2, [sp, #12]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	bfb8      	it	lt
 800e8d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e8d4:	3402      	adds	r4, #2
 800e8d6:	9305      	str	r3, [sp, #20]
 800e8d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e9a0 <_svfiprintf_r+0x1f8>
 800e8dc:	7821      	ldrb	r1, [r4, #0]
 800e8de:	2203      	movs	r2, #3
 800e8e0:	4650      	mov	r0, sl
 800e8e2:	f7f1 fc7d 	bl	80001e0 <memchr>
 800e8e6:	b138      	cbz	r0, 800e8f8 <_svfiprintf_r+0x150>
 800e8e8:	9b04      	ldr	r3, [sp, #16]
 800e8ea:	eba0 000a 	sub.w	r0, r0, sl
 800e8ee:	2240      	movs	r2, #64	; 0x40
 800e8f0:	4082      	lsls	r2, r0
 800e8f2:	4313      	orrs	r3, r2
 800e8f4:	3401      	adds	r4, #1
 800e8f6:	9304      	str	r3, [sp, #16]
 800e8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8fc:	4825      	ldr	r0, [pc, #148]	; (800e994 <_svfiprintf_r+0x1ec>)
 800e8fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e902:	2206      	movs	r2, #6
 800e904:	f7f1 fc6c 	bl	80001e0 <memchr>
 800e908:	2800      	cmp	r0, #0
 800e90a:	d038      	beq.n	800e97e <_svfiprintf_r+0x1d6>
 800e90c:	4b22      	ldr	r3, [pc, #136]	; (800e998 <_svfiprintf_r+0x1f0>)
 800e90e:	bb1b      	cbnz	r3, 800e958 <_svfiprintf_r+0x1b0>
 800e910:	9b03      	ldr	r3, [sp, #12]
 800e912:	3307      	adds	r3, #7
 800e914:	f023 0307 	bic.w	r3, r3, #7
 800e918:	3308      	adds	r3, #8
 800e91a:	9303      	str	r3, [sp, #12]
 800e91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e91e:	4433      	add	r3, r6
 800e920:	9309      	str	r3, [sp, #36]	; 0x24
 800e922:	e768      	b.n	800e7f6 <_svfiprintf_r+0x4e>
 800e924:	fb0c 3202 	mla	r2, ip, r2, r3
 800e928:	460c      	mov	r4, r1
 800e92a:	2001      	movs	r0, #1
 800e92c:	e7a6      	b.n	800e87c <_svfiprintf_r+0xd4>
 800e92e:	2300      	movs	r3, #0
 800e930:	3401      	adds	r4, #1
 800e932:	9305      	str	r3, [sp, #20]
 800e934:	4619      	mov	r1, r3
 800e936:	f04f 0c0a 	mov.w	ip, #10
 800e93a:	4620      	mov	r0, r4
 800e93c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e940:	3a30      	subs	r2, #48	; 0x30
 800e942:	2a09      	cmp	r2, #9
 800e944:	d903      	bls.n	800e94e <_svfiprintf_r+0x1a6>
 800e946:	2b00      	cmp	r3, #0
 800e948:	d0c6      	beq.n	800e8d8 <_svfiprintf_r+0x130>
 800e94a:	9105      	str	r1, [sp, #20]
 800e94c:	e7c4      	b.n	800e8d8 <_svfiprintf_r+0x130>
 800e94e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e952:	4604      	mov	r4, r0
 800e954:	2301      	movs	r3, #1
 800e956:	e7f0      	b.n	800e93a <_svfiprintf_r+0x192>
 800e958:	ab03      	add	r3, sp, #12
 800e95a:	9300      	str	r3, [sp, #0]
 800e95c:	462a      	mov	r2, r5
 800e95e:	4b0f      	ldr	r3, [pc, #60]	; (800e99c <_svfiprintf_r+0x1f4>)
 800e960:	a904      	add	r1, sp, #16
 800e962:	4638      	mov	r0, r7
 800e964:	f7fd fe50 	bl	800c608 <_printf_float>
 800e968:	1c42      	adds	r2, r0, #1
 800e96a:	4606      	mov	r6, r0
 800e96c:	d1d6      	bne.n	800e91c <_svfiprintf_r+0x174>
 800e96e:	89ab      	ldrh	r3, [r5, #12]
 800e970:	065b      	lsls	r3, r3, #25
 800e972:	f53f af2d 	bmi.w	800e7d0 <_svfiprintf_r+0x28>
 800e976:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e978:	b01d      	add	sp, #116	; 0x74
 800e97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e97e:	ab03      	add	r3, sp, #12
 800e980:	9300      	str	r3, [sp, #0]
 800e982:	462a      	mov	r2, r5
 800e984:	4b05      	ldr	r3, [pc, #20]	; (800e99c <_svfiprintf_r+0x1f4>)
 800e986:	a904      	add	r1, sp, #16
 800e988:	4638      	mov	r0, r7
 800e98a:	f7fe f8e1 	bl	800cb50 <_printf_i>
 800e98e:	e7eb      	b.n	800e968 <_svfiprintf_r+0x1c0>
 800e990:	0800f4a4 	.word	0x0800f4a4
 800e994:	0800f4ae 	.word	0x0800f4ae
 800e998:	0800c609 	.word	0x0800c609
 800e99c:	0800e6f5 	.word	0x0800e6f5
 800e9a0:	0800f4aa 	.word	0x0800f4aa

0800e9a4 <__sflush_r>:
 800e9a4:	898a      	ldrh	r2, [r1, #12]
 800e9a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9aa:	4605      	mov	r5, r0
 800e9ac:	0710      	lsls	r0, r2, #28
 800e9ae:	460c      	mov	r4, r1
 800e9b0:	d458      	bmi.n	800ea64 <__sflush_r+0xc0>
 800e9b2:	684b      	ldr	r3, [r1, #4]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	dc05      	bgt.n	800e9c4 <__sflush_r+0x20>
 800e9b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	dc02      	bgt.n	800e9c4 <__sflush_r+0x20>
 800e9be:	2000      	movs	r0, #0
 800e9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9c6:	2e00      	cmp	r6, #0
 800e9c8:	d0f9      	beq.n	800e9be <__sflush_r+0x1a>
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e9d0:	682f      	ldr	r7, [r5, #0]
 800e9d2:	6a21      	ldr	r1, [r4, #32]
 800e9d4:	602b      	str	r3, [r5, #0]
 800e9d6:	d032      	beq.n	800ea3e <__sflush_r+0x9a>
 800e9d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e9da:	89a3      	ldrh	r3, [r4, #12]
 800e9dc:	075a      	lsls	r2, r3, #29
 800e9de:	d505      	bpl.n	800e9ec <__sflush_r+0x48>
 800e9e0:	6863      	ldr	r3, [r4, #4]
 800e9e2:	1ac0      	subs	r0, r0, r3
 800e9e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e9e6:	b10b      	cbz	r3, 800e9ec <__sflush_r+0x48>
 800e9e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e9ea:	1ac0      	subs	r0, r0, r3
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9f2:	6a21      	ldr	r1, [r4, #32]
 800e9f4:	4628      	mov	r0, r5
 800e9f6:	47b0      	blx	r6
 800e9f8:	1c43      	adds	r3, r0, #1
 800e9fa:	89a3      	ldrh	r3, [r4, #12]
 800e9fc:	d106      	bne.n	800ea0c <__sflush_r+0x68>
 800e9fe:	6829      	ldr	r1, [r5, #0]
 800ea00:	291d      	cmp	r1, #29
 800ea02:	d82b      	bhi.n	800ea5c <__sflush_r+0xb8>
 800ea04:	4a29      	ldr	r2, [pc, #164]	; (800eaac <__sflush_r+0x108>)
 800ea06:	410a      	asrs	r2, r1
 800ea08:	07d6      	lsls	r6, r2, #31
 800ea0a:	d427      	bmi.n	800ea5c <__sflush_r+0xb8>
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	6062      	str	r2, [r4, #4]
 800ea10:	04d9      	lsls	r1, r3, #19
 800ea12:	6922      	ldr	r2, [r4, #16]
 800ea14:	6022      	str	r2, [r4, #0]
 800ea16:	d504      	bpl.n	800ea22 <__sflush_r+0x7e>
 800ea18:	1c42      	adds	r2, r0, #1
 800ea1a:	d101      	bne.n	800ea20 <__sflush_r+0x7c>
 800ea1c:	682b      	ldr	r3, [r5, #0]
 800ea1e:	b903      	cbnz	r3, 800ea22 <__sflush_r+0x7e>
 800ea20:	6560      	str	r0, [r4, #84]	; 0x54
 800ea22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea24:	602f      	str	r7, [r5, #0]
 800ea26:	2900      	cmp	r1, #0
 800ea28:	d0c9      	beq.n	800e9be <__sflush_r+0x1a>
 800ea2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea2e:	4299      	cmp	r1, r3
 800ea30:	d002      	beq.n	800ea38 <__sflush_r+0x94>
 800ea32:	4628      	mov	r0, r5
 800ea34:	f7ff f9e2 	bl	800ddfc <_free_r>
 800ea38:	2000      	movs	r0, #0
 800ea3a:	6360      	str	r0, [r4, #52]	; 0x34
 800ea3c:	e7c0      	b.n	800e9c0 <__sflush_r+0x1c>
 800ea3e:	2301      	movs	r3, #1
 800ea40:	4628      	mov	r0, r5
 800ea42:	47b0      	blx	r6
 800ea44:	1c41      	adds	r1, r0, #1
 800ea46:	d1c8      	bne.n	800e9da <__sflush_r+0x36>
 800ea48:	682b      	ldr	r3, [r5, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d0c5      	beq.n	800e9da <__sflush_r+0x36>
 800ea4e:	2b1d      	cmp	r3, #29
 800ea50:	d001      	beq.n	800ea56 <__sflush_r+0xb2>
 800ea52:	2b16      	cmp	r3, #22
 800ea54:	d101      	bne.n	800ea5a <__sflush_r+0xb6>
 800ea56:	602f      	str	r7, [r5, #0]
 800ea58:	e7b1      	b.n	800e9be <__sflush_r+0x1a>
 800ea5a:	89a3      	ldrh	r3, [r4, #12]
 800ea5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea60:	81a3      	strh	r3, [r4, #12]
 800ea62:	e7ad      	b.n	800e9c0 <__sflush_r+0x1c>
 800ea64:	690f      	ldr	r7, [r1, #16]
 800ea66:	2f00      	cmp	r7, #0
 800ea68:	d0a9      	beq.n	800e9be <__sflush_r+0x1a>
 800ea6a:	0793      	lsls	r3, r2, #30
 800ea6c:	680e      	ldr	r6, [r1, #0]
 800ea6e:	bf08      	it	eq
 800ea70:	694b      	ldreq	r3, [r1, #20]
 800ea72:	600f      	str	r7, [r1, #0]
 800ea74:	bf18      	it	ne
 800ea76:	2300      	movne	r3, #0
 800ea78:	eba6 0807 	sub.w	r8, r6, r7
 800ea7c:	608b      	str	r3, [r1, #8]
 800ea7e:	f1b8 0f00 	cmp.w	r8, #0
 800ea82:	dd9c      	ble.n	800e9be <__sflush_r+0x1a>
 800ea84:	6a21      	ldr	r1, [r4, #32]
 800ea86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea88:	4643      	mov	r3, r8
 800ea8a:	463a      	mov	r2, r7
 800ea8c:	4628      	mov	r0, r5
 800ea8e:	47b0      	blx	r6
 800ea90:	2800      	cmp	r0, #0
 800ea92:	dc06      	bgt.n	800eaa2 <__sflush_r+0xfe>
 800ea94:	89a3      	ldrh	r3, [r4, #12]
 800ea96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea9a:	81a3      	strh	r3, [r4, #12]
 800ea9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eaa0:	e78e      	b.n	800e9c0 <__sflush_r+0x1c>
 800eaa2:	4407      	add	r7, r0
 800eaa4:	eba8 0800 	sub.w	r8, r8, r0
 800eaa8:	e7e9      	b.n	800ea7e <__sflush_r+0xda>
 800eaaa:	bf00      	nop
 800eaac:	dfbffffe 	.word	0xdfbffffe

0800eab0 <_fflush_r>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	690b      	ldr	r3, [r1, #16]
 800eab4:	4605      	mov	r5, r0
 800eab6:	460c      	mov	r4, r1
 800eab8:	b913      	cbnz	r3, 800eac0 <_fflush_r+0x10>
 800eaba:	2500      	movs	r5, #0
 800eabc:	4628      	mov	r0, r5
 800eabe:	bd38      	pop	{r3, r4, r5, pc}
 800eac0:	b118      	cbz	r0, 800eaca <_fflush_r+0x1a>
 800eac2:	6a03      	ldr	r3, [r0, #32]
 800eac4:	b90b      	cbnz	r3, 800eaca <_fflush_r+0x1a>
 800eac6:	f7fe f9f1 	bl	800ceac <__sinit>
 800eaca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d0f3      	beq.n	800eaba <_fflush_r+0xa>
 800ead2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ead4:	07d0      	lsls	r0, r2, #31
 800ead6:	d404      	bmi.n	800eae2 <_fflush_r+0x32>
 800ead8:	0599      	lsls	r1, r3, #22
 800eada:	d402      	bmi.n	800eae2 <_fflush_r+0x32>
 800eadc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eade:	f7fe fb10 	bl	800d102 <__retarget_lock_acquire_recursive>
 800eae2:	4628      	mov	r0, r5
 800eae4:	4621      	mov	r1, r4
 800eae6:	f7ff ff5d 	bl	800e9a4 <__sflush_r>
 800eaea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eaec:	07da      	lsls	r2, r3, #31
 800eaee:	4605      	mov	r5, r0
 800eaf0:	d4e4      	bmi.n	800eabc <_fflush_r+0xc>
 800eaf2:	89a3      	ldrh	r3, [r4, #12]
 800eaf4:	059b      	lsls	r3, r3, #22
 800eaf6:	d4e1      	bmi.n	800eabc <_fflush_r+0xc>
 800eaf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eafa:	f7fe fb03 	bl	800d104 <__retarget_lock_release_recursive>
 800eafe:	e7dd      	b.n	800eabc <_fflush_r+0xc>

0800eb00 <memmove>:
 800eb00:	4288      	cmp	r0, r1
 800eb02:	b510      	push	{r4, lr}
 800eb04:	eb01 0402 	add.w	r4, r1, r2
 800eb08:	d902      	bls.n	800eb10 <memmove+0x10>
 800eb0a:	4284      	cmp	r4, r0
 800eb0c:	4623      	mov	r3, r4
 800eb0e:	d807      	bhi.n	800eb20 <memmove+0x20>
 800eb10:	1e43      	subs	r3, r0, #1
 800eb12:	42a1      	cmp	r1, r4
 800eb14:	d008      	beq.n	800eb28 <memmove+0x28>
 800eb16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb1e:	e7f8      	b.n	800eb12 <memmove+0x12>
 800eb20:	4402      	add	r2, r0
 800eb22:	4601      	mov	r1, r0
 800eb24:	428a      	cmp	r2, r1
 800eb26:	d100      	bne.n	800eb2a <memmove+0x2a>
 800eb28:	bd10      	pop	{r4, pc}
 800eb2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eb32:	e7f7      	b.n	800eb24 <memmove+0x24>

0800eb34 <_sbrk_r>:
 800eb34:	b538      	push	{r3, r4, r5, lr}
 800eb36:	4d06      	ldr	r5, [pc, #24]	; (800eb50 <_sbrk_r+0x1c>)
 800eb38:	2300      	movs	r3, #0
 800eb3a:	4604      	mov	r4, r0
 800eb3c:	4608      	mov	r0, r1
 800eb3e:	602b      	str	r3, [r5, #0]
 800eb40:	f7f3 fa1e 	bl	8001f80 <_sbrk>
 800eb44:	1c43      	adds	r3, r0, #1
 800eb46:	d102      	bne.n	800eb4e <_sbrk_r+0x1a>
 800eb48:	682b      	ldr	r3, [r5, #0]
 800eb4a:	b103      	cbz	r3, 800eb4e <_sbrk_r+0x1a>
 800eb4c:	6023      	str	r3, [r4, #0]
 800eb4e:	bd38      	pop	{r3, r4, r5, pc}
 800eb50:	200022c0 	.word	0x200022c0

0800eb54 <memcpy>:
 800eb54:	440a      	add	r2, r1
 800eb56:	4291      	cmp	r1, r2
 800eb58:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb5c:	d100      	bne.n	800eb60 <memcpy+0xc>
 800eb5e:	4770      	bx	lr
 800eb60:	b510      	push	{r4, lr}
 800eb62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb6a:	4291      	cmp	r1, r2
 800eb6c:	d1f9      	bne.n	800eb62 <memcpy+0xe>
 800eb6e:	bd10      	pop	{r4, pc}

0800eb70 <__assert_func>:
 800eb70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb72:	4614      	mov	r4, r2
 800eb74:	461a      	mov	r2, r3
 800eb76:	4b09      	ldr	r3, [pc, #36]	; (800eb9c <__assert_func+0x2c>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4605      	mov	r5, r0
 800eb7c:	68d8      	ldr	r0, [r3, #12]
 800eb7e:	b14c      	cbz	r4, 800eb94 <__assert_func+0x24>
 800eb80:	4b07      	ldr	r3, [pc, #28]	; (800eba0 <__assert_func+0x30>)
 800eb82:	9100      	str	r1, [sp, #0]
 800eb84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb88:	4906      	ldr	r1, [pc, #24]	; (800eba4 <__assert_func+0x34>)
 800eb8a:	462b      	mov	r3, r5
 800eb8c:	f000 f872 	bl	800ec74 <fiprintf>
 800eb90:	f000 f882 	bl	800ec98 <abort>
 800eb94:	4b04      	ldr	r3, [pc, #16]	; (800eba8 <__assert_func+0x38>)
 800eb96:	461c      	mov	r4, r3
 800eb98:	e7f3      	b.n	800eb82 <__assert_func+0x12>
 800eb9a:	bf00      	nop
 800eb9c:	2000017c 	.word	0x2000017c
 800eba0:	0800f4bf 	.word	0x0800f4bf
 800eba4:	0800f4cc 	.word	0x0800f4cc
 800eba8:	0800f4fa 	.word	0x0800f4fa

0800ebac <_calloc_r>:
 800ebac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebae:	fba1 2402 	umull	r2, r4, r1, r2
 800ebb2:	b94c      	cbnz	r4, 800ebc8 <_calloc_r+0x1c>
 800ebb4:	4611      	mov	r1, r2
 800ebb6:	9201      	str	r2, [sp, #4]
 800ebb8:	f7ff f994 	bl	800dee4 <_malloc_r>
 800ebbc:	9a01      	ldr	r2, [sp, #4]
 800ebbe:	4605      	mov	r5, r0
 800ebc0:	b930      	cbnz	r0, 800ebd0 <_calloc_r+0x24>
 800ebc2:	4628      	mov	r0, r5
 800ebc4:	b003      	add	sp, #12
 800ebc6:	bd30      	pop	{r4, r5, pc}
 800ebc8:	220c      	movs	r2, #12
 800ebca:	6002      	str	r2, [r0, #0]
 800ebcc:	2500      	movs	r5, #0
 800ebce:	e7f8      	b.n	800ebc2 <_calloc_r+0x16>
 800ebd0:	4621      	mov	r1, r4
 800ebd2:	f7fe fa18 	bl	800d006 <memset>
 800ebd6:	e7f4      	b.n	800ebc2 <_calloc_r+0x16>

0800ebd8 <__ascii_mbtowc>:
 800ebd8:	b082      	sub	sp, #8
 800ebda:	b901      	cbnz	r1, 800ebde <__ascii_mbtowc+0x6>
 800ebdc:	a901      	add	r1, sp, #4
 800ebde:	b142      	cbz	r2, 800ebf2 <__ascii_mbtowc+0x1a>
 800ebe0:	b14b      	cbz	r3, 800ebf6 <__ascii_mbtowc+0x1e>
 800ebe2:	7813      	ldrb	r3, [r2, #0]
 800ebe4:	600b      	str	r3, [r1, #0]
 800ebe6:	7812      	ldrb	r2, [r2, #0]
 800ebe8:	1e10      	subs	r0, r2, #0
 800ebea:	bf18      	it	ne
 800ebec:	2001      	movne	r0, #1
 800ebee:	b002      	add	sp, #8
 800ebf0:	4770      	bx	lr
 800ebf2:	4610      	mov	r0, r2
 800ebf4:	e7fb      	b.n	800ebee <__ascii_mbtowc+0x16>
 800ebf6:	f06f 0001 	mvn.w	r0, #1
 800ebfa:	e7f8      	b.n	800ebee <__ascii_mbtowc+0x16>

0800ebfc <_realloc_r>:
 800ebfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec00:	4680      	mov	r8, r0
 800ec02:	4614      	mov	r4, r2
 800ec04:	460e      	mov	r6, r1
 800ec06:	b921      	cbnz	r1, 800ec12 <_realloc_r+0x16>
 800ec08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec0c:	4611      	mov	r1, r2
 800ec0e:	f7ff b969 	b.w	800dee4 <_malloc_r>
 800ec12:	b92a      	cbnz	r2, 800ec20 <_realloc_r+0x24>
 800ec14:	f7ff f8f2 	bl	800ddfc <_free_r>
 800ec18:	4625      	mov	r5, r4
 800ec1a:	4628      	mov	r0, r5
 800ec1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec20:	f000 f841 	bl	800eca6 <_malloc_usable_size_r>
 800ec24:	4284      	cmp	r4, r0
 800ec26:	4607      	mov	r7, r0
 800ec28:	d802      	bhi.n	800ec30 <_realloc_r+0x34>
 800ec2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec2e:	d812      	bhi.n	800ec56 <_realloc_r+0x5a>
 800ec30:	4621      	mov	r1, r4
 800ec32:	4640      	mov	r0, r8
 800ec34:	f7ff f956 	bl	800dee4 <_malloc_r>
 800ec38:	4605      	mov	r5, r0
 800ec3a:	2800      	cmp	r0, #0
 800ec3c:	d0ed      	beq.n	800ec1a <_realloc_r+0x1e>
 800ec3e:	42bc      	cmp	r4, r7
 800ec40:	4622      	mov	r2, r4
 800ec42:	4631      	mov	r1, r6
 800ec44:	bf28      	it	cs
 800ec46:	463a      	movcs	r2, r7
 800ec48:	f7ff ff84 	bl	800eb54 <memcpy>
 800ec4c:	4631      	mov	r1, r6
 800ec4e:	4640      	mov	r0, r8
 800ec50:	f7ff f8d4 	bl	800ddfc <_free_r>
 800ec54:	e7e1      	b.n	800ec1a <_realloc_r+0x1e>
 800ec56:	4635      	mov	r5, r6
 800ec58:	e7df      	b.n	800ec1a <_realloc_r+0x1e>

0800ec5a <__ascii_wctomb>:
 800ec5a:	b149      	cbz	r1, 800ec70 <__ascii_wctomb+0x16>
 800ec5c:	2aff      	cmp	r2, #255	; 0xff
 800ec5e:	bf85      	ittet	hi
 800ec60:	238a      	movhi	r3, #138	; 0x8a
 800ec62:	6003      	strhi	r3, [r0, #0]
 800ec64:	700a      	strbls	r2, [r1, #0]
 800ec66:	f04f 30ff 	movhi.w	r0, #4294967295
 800ec6a:	bf98      	it	ls
 800ec6c:	2001      	movls	r0, #1
 800ec6e:	4770      	bx	lr
 800ec70:	4608      	mov	r0, r1
 800ec72:	4770      	bx	lr

0800ec74 <fiprintf>:
 800ec74:	b40e      	push	{r1, r2, r3}
 800ec76:	b503      	push	{r0, r1, lr}
 800ec78:	4601      	mov	r1, r0
 800ec7a:	ab03      	add	r3, sp, #12
 800ec7c:	4805      	ldr	r0, [pc, #20]	; (800ec94 <fiprintf+0x20>)
 800ec7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec82:	6800      	ldr	r0, [r0, #0]
 800ec84:	9301      	str	r3, [sp, #4]
 800ec86:	f000 f83f 	bl	800ed08 <_vfiprintf_r>
 800ec8a:	b002      	add	sp, #8
 800ec8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec90:	b003      	add	sp, #12
 800ec92:	4770      	bx	lr
 800ec94:	2000017c 	.word	0x2000017c

0800ec98 <abort>:
 800ec98:	b508      	push	{r3, lr}
 800ec9a:	2006      	movs	r0, #6
 800ec9c:	f000 fa0c 	bl	800f0b8 <raise>
 800eca0:	2001      	movs	r0, #1
 800eca2:	f7f3 f8f5 	bl	8001e90 <_exit>

0800eca6 <_malloc_usable_size_r>:
 800eca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecaa:	1f18      	subs	r0, r3, #4
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	bfbc      	itt	lt
 800ecb0:	580b      	ldrlt	r3, [r1, r0]
 800ecb2:	18c0      	addlt	r0, r0, r3
 800ecb4:	4770      	bx	lr

0800ecb6 <__sfputc_r>:
 800ecb6:	6893      	ldr	r3, [r2, #8]
 800ecb8:	3b01      	subs	r3, #1
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	b410      	push	{r4}
 800ecbe:	6093      	str	r3, [r2, #8]
 800ecc0:	da08      	bge.n	800ecd4 <__sfputc_r+0x1e>
 800ecc2:	6994      	ldr	r4, [r2, #24]
 800ecc4:	42a3      	cmp	r3, r4
 800ecc6:	db01      	blt.n	800eccc <__sfputc_r+0x16>
 800ecc8:	290a      	cmp	r1, #10
 800ecca:	d103      	bne.n	800ecd4 <__sfputc_r+0x1e>
 800eccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecd0:	f000 b934 	b.w	800ef3c <__swbuf_r>
 800ecd4:	6813      	ldr	r3, [r2, #0]
 800ecd6:	1c58      	adds	r0, r3, #1
 800ecd8:	6010      	str	r0, [r2, #0]
 800ecda:	7019      	strb	r1, [r3, #0]
 800ecdc:	4608      	mov	r0, r1
 800ecde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ece2:	4770      	bx	lr

0800ece4 <__sfputs_r>:
 800ece4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ece6:	4606      	mov	r6, r0
 800ece8:	460f      	mov	r7, r1
 800ecea:	4614      	mov	r4, r2
 800ecec:	18d5      	adds	r5, r2, r3
 800ecee:	42ac      	cmp	r4, r5
 800ecf0:	d101      	bne.n	800ecf6 <__sfputs_r+0x12>
 800ecf2:	2000      	movs	r0, #0
 800ecf4:	e007      	b.n	800ed06 <__sfputs_r+0x22>
 800ecf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecfa:	463a      	mov	r2, r7
 800ecfc:	4630      	mov	r0, r6
 800ecfe:	f7ff ffda 	bl	800ecb6 <__sfputc_r>
 800ed02:	1c43      	adds	r3, r0, #1
 800ed04:	d1f3      	bne.n	800ecee <__sfputs_r+0xa>
 800ed06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ed08 <_vfiprintf_r>:
 800ed08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed0c:	460d      	mov	r5, r1
 800ed0e:	b09d      	sub	sp, #116	; 0x74
 800ed10:	4614      	mov	r4, r2
 800ed12:	4698      	mov	r8, r3
 800ed14:	4606      	mov	r6, r0
 800ed16:	b118      	cbz	r0, 800ed20 <_vfiprintf_r+0x18>
 800ed18:	6a03      	ldr	r3, [r0, #32]
 800ed1a:	b90b      	cbnz	r3, 800ed20 <_vfiprintf_r+0x18>
 800ed1c:	f7fe f8c6 	bl	800ceac <__sinit>
 800ed20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed22:	07d9      	lsls	r1, r3, #31
 800ed24:	d405      	bmi.n	800ed32 <_vfiprintf_r+0x2a>
 800ed26:	89ab      	ldrh	r3, [r5, #12]
 800ed28:	059a      	lsls	r2, r3, #22
 800ed2a:	d402      	bmi.n	800ed32 <_vfiprintf_r+0x2a>
 800ed2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed2e:	f7fe f9e8 	bl	800d102 <__retarget_lock_acquire_recursive>
 800ed32:	89ab      	ldrh	r3, [r5, #12]
 800ed34:	071b      	lsls	r3, r3, #28
 800ed36:	d501      	bpl.n	800ed3c <_vfiprintf_r+0x34>
 800ed38:	692b      	ldr	r3, [r5, #16]
 800ed3a:	b99b      	cbnz	r3, 800ed64 <_vfiprintf_r+0x5c>
 800ed3c:	4629      	mov	r1, r5
 800ed3e:	4630      	mov	r0, r6
 800ed40:	f000 f93a 	bl	800efb8 <__swsetup_r>
 800ed44:	b170      	cbz	r0, 800ed64 <_vfiprintf_r+0x5c>
 800ed46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed48:	07dc      	lsls	r4, r3, #31
 800ed4a:	d504      	bpl.n	800ed56 <_vfiprintf_r+0x4e>
 800ed4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed50:	b01d      	add	sp, #116	; 0x74
 800ed52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed56:	89ab      	ldrh	r3, [r5, #12]
 800ed58:	0598      	lsls	r0, r3, #22
 800ed5a:	d4f7      	bmi.n	800ed4c <_vfiprintf_r+0x44>
 800ed5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed5e:	f7fe f9d1 	bl	800d104 <__retarget_lock_release_recursive>
 800ed62:	e7f3      	b.n	800ed4c <_vfiprintf_r+0x44>
 800ed64:	2300      	movs	r3, #0
 800ed66:	9309      	str	r3, [sp, #36]	; 0x24
 800ed68:	2320      	movs	r3, #32
 800ed6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed72:	2330      	movs	r3, #48	; 0x30
 800ed74:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ef28 <_vfiprintf_r+0x220>
 800ed78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed7c:	f04f 0901 	mov.w	r9, #1
 800ed80:	4623      	mov	r3, r4
 800ed82:	469a      	mov	sl, r3
 800ed84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed88:	b10a      	cbz	r2, 800ed8e <_vfiprintf_r+0x86>
 800ed8a:	2a25      	cmp	r2, #37	; 0x25
 800ed8c:	d1f9      	bne.n	800ed82 <_vfiprintf_r+0x7a>
 800ed8e:	ebba 0b04 	subs.w	fp, sl, r4
 800ed92:	d00b      	beq.n	800edac <_vfiprintf_r+0xa4>
 800ed94:	465b      	mov	r3, fp
 800ed96:	4622      	mov	r2, r4
 800ed98:	4629      	mov	r1, r5
 800ed9a:	4630      	mov	r0, r6
 800ed9c:	f7ff ffa2 	bl	800ece4 <__sfputs_r>
 800eda0:	3001      	adds	r0, #1
 800eda2:	f000 80a9 	beq.w	800eef8 <_vfiprintf_r+0x1f0>
 800eda6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eda8:	445a      	add	r2, fp
 800edaa:	9209      	str	r2, [sp, #36]	; 0x24
 800edac:	f89a 3000 	ldrb.w	r3, [sl]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	f000 80a1 	beq.w	800eef8 <_vfiprintf_r+0x1f0>
 800edb6:	2300      	movs	r3, #0
 800edb8:	f04f 32ff 	mov.w	r2, #4294967295
 800edbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edc0:	f10a 0a01 	add.w	sl, sl, #1
 800edc4:	9304      	str	r3, [sp, #16]
 800edc6:	9307      	str	r3, [sp, #28]
 800edc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800edcc:	931a      	str	r3, [sp, #104]	; 0x68
 800edce:	4654      	mov	r4, sl
 800edd0:	2205      	movs	r2, #5
 800edd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edd6:	4854      	ldr	r0, [pc, #336]	; (800ef28 <_vfiprintf_r+0x220>)
 800edd8:	f7f1 fa02 	bl	80001e0 <memchr>
 800eddc:	9a04      	ldr	r2, [sp, #16]
 800edde:	b9d8      	cbnz	r0, 800ee18 <_vfiprintf_r+0x110>
 800ede0:	06d1      	lsls	r1, r2, #27
 800ede2:	bf44      	itt	mi
 800ede4:	2320      	movmi	r3, #32
 800ede6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edea:	0713      	lsls	r3, r2, #28
 800edec:	bf44      	itt	mi
 800edee:	232b      	movmi	r3, #43	; 0x2b
 800edf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edf4:	f89a 3000 	ldrb.w	r3, [sl]
 800edf8:	2b2a      	cmp	r3, #42	; 0x2a
 800edfa:	d015      	beq.n	800ee28 <_vfiprintf_r+0x120>
 800edfc:	9a07      	ldr	r2, [sp, #28]
 800edfe:	4654      	mov	r4, sl
 800ee00:	2000      	movs	r0, #0
 800ee02:	f04f 0c0a 	mov.w	ip, #10
 800ee06:	4621      	mov	r1, r4
 800ee08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee0c:	3b30      	subs	r3, #48	; 0x30
 800ee0e:	2b09      	cmp	r3, #9
 800ee10:	d94d      	bls.n	800eeae <_vfiprintf_r+0x1a6>
 800ee12:	b1b0      	cbz	r0, 800ee42 <_vfiprintf_r+0x13a>
 800ee14:	9207      	str	r2, [sp, #28]
 800ee16:	e014      	b.n	800ee42 <_vfiprintf_r+0x13a>
 800ee18:	eba0 0308 	sub.w	r3, r0, r8
 800ee1c:	fa09 f303 	lsl.w	r3, r9, r3
 800ee20:	4313      	orrs	r3, r2
 800ee22:	9304      	str	r3, [sp, #16]
 800ee24:	46a2      	mov	sl, r4
 800ee26:	e7d2      	b.n	800edce <_vfiprintf_r+0xc6>
 800ee28:	9b03      	ldr	r3, [sp, #12]
 800ee2a:	1d19      	adds	r1, r3, #4
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	9103      	str	r1, [sp, #12]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	bfbb      	ittet	lt
 800ee34:	425b      	neglt	r3, r3
 800ee36:	f042 0202 	orrlt.w	r2, r2, #2
 800ee3a:	9307      	strge	r3, [sp, #28]
 800ee3c:	9307      	strlt	r3, [sp, #28]
 800ee3e:	bfb8      	it	lt
 800ee40:	9204      	strlt	r2, [sp, #16]
 800ee42:	7823      	ldrb	r3, [r4, #0]
 800ee44:	2b2e      	cmp	r3, #46	; 0x2e
 800ee46:	d10c      	bne.n	800ee62 <_vfiprintf_r+0x15a>
 800ee48:	7863      	ldrb	r3, [r4, #1]
 800ee4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ee4c:	d134      	bne.n	800eeb8 <_vfiprintf_r+0x1b0>
 800ee4e:	9b03      	ldr	r3, [sp, #12]
 800ee50:	1d1a      	adds	r2, r3, #4
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	9203      	str	r2, [sp, #12]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	bfb8      	it	lt
 800ee5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee5e:	3402      	adds	r4, #2
 800ee60:	9305      	str	r3, [sp, #20]
 800ee62:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ef38 <_vfiprintf_r+0x230>
 800ee66:	7821      	ldrb	r1, [r4, #0]
 800ee68:	2203      	movs	r2, #3
 800ee6a:	4650      	mov	r0, sl
 800ee6c:	f7f1 f9b8 	bl	80001e0 <memchr>
 800ee70:	b138      	cbz	r0, 800ee82 <_vfiprintf_r+0x17a>
 800ee72:	9b04      	ldr	r3, [sp, #16]
 800ee74:	eba0 000a 	sub.w	r0, r0, sl
 800ee78:	2240      	movs	r2, #64	; 0x40
 800ee7a:	4082      	lsls	r2, r0
 800ee7c:	4313      	orrs	r3, r2
 800ee7e:	3401      	adds	r4, #1
 800ee80:	9304      	str	r3, [sp, #16]
 800ee82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee86:	4829      	ldr	r0, [pc, #164]	; (800ef2c <_vfiprintf_r+0x224>)
 800ee88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee8c:	2206      	movs	r2, #6
 800ee8e:	f7f1 f9a7 	bl	80001e0 <memchr>
 800ee92:	2800      	cmp	r0, #0
 800ee94:	d03f      	beq.n	800ef16 <_vfiprintf_r+0x20e>
 800ee96:	4b26      	ldr	r3, [pc, #152]	; (800ef30 <_vfiprintf_r+0x228>)
 800ee98:	bb1b      	cbnz	r3, 800eee2 <_vfiprintf_r+0x1da>
 800ee9a:	9b03      	ldr	r3, [sp, #12]
 800ee9c:	3307      	adds	r3, #7
 800ee9e:	f023 0307 	bic.w	r3, r3, #7
 800eea2:	3308      	adds	r3, #8
 800eea4:	9303      	str	r3, [sp, #12]
 800eea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eea8:	443b      	add	r3, r7
 800eeaa:	9309      	str	r3, [sp, #36]	; 0x24
 800eeac:	e768      	b.n	800ed80 <_vfiprintf_r+0x78>
 800eeae:	fb0c 3202 	mla	r2, ip, r2, r3
 800eeb2:	460c      	mov	r4, r1
 800eeb4:	2001      	movs	r0, #1
 800eeb6:	e7a6      	b.n	800ee06 <_vfiprintf_r+0xfe>
 800eeb8:	2300      	movs	r3, #0
 800eeba:	3401      	adds	r4, #1
 800eebc:	9305      	str	r3, [sp, #20]
 800eebe:	4619      	mov	r1, r3
 800eec0:	f04f 0c0a 	mov.w	ip, #10
 800eec4:	4620      	mov	r0, r4
 800eec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eeca:	3a30      	subs	r2, #48	; 0x30
 800eecc:	2a09      	cmp	r2, #9
 800eece:	d903      	bls.n	800eed8 <_vfiprintf_r+0x1d0>
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d0c6      	beq.n	800ee62 <_vfiprintf_r+0x15a>
 800eed4:	9105      	str	r1, [sp, #20]
 800eed6:	e7c4      	b.n	800ee62 <_vfiprintf_r+0x15a>
 800eed8:	fb0c 2101 	mla	r1, ip, r1, r2
 800eedc:	4604      	mov	r4, r0
 800eede:	2301      	movs	r3, #1
 800eee0:	e7f0      	b.n	800eec4 <_vfiprintf_r+0x1bc>
 800eee2:	ab03      	add	r3, sp, #12
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	462a      	mov	r2, r5
 800eee8:	4b12      	ldr	r3, [pc, #72]	; (800ef34 <_vfiprintf_r+0x22c>)
 800eeea:	a904      	add	r1, sp, #16
 800eeec:	4630      	mov	r0, r6
 800eeee:	f7fd fb8b 	bl	800c608 <_printf_float>
 800eef2:	4607      	mov	r7, r0
 800eef4:	1c78      	adds	r0, r7, #1
 800eef6:	d1d6      	bne.n	800eea6 <_vfiprintf_r+0x19e>
 800eef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eefa:	07d9      	lsls	r1, r3, #31
 800eefc:	d405      	bmi.n	800ef0a <_vfiprintf_r+0x202>
 800eefe:	89ab      	ldrh	r3, [r5, #12]
 800ef00:	059a      	lsls	r2, r3, #22
 800ef02:	d402      	bmi.n	800ef0a <_vfiprintf_r+0x202>
 800ef04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef06:	f7fe f8fd 	bl	800d104 <__retarget_lock_release_recursive>
 800ef0a:	89ab      	ldrh	r3, [r5, #12]
 800ef0c:	065b      	lsls	r3, r3, #25
 800ef0e:	f53f af1d 	bmi.w	800ed4c <_vfiprintf_r+0x44>
 800ef12:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef14:	e71c      	b.n	800ed50 <_vfiprintf_r+0x48>
 800ef16:	ab03      	add	r3, sp, #12
 800ef18:	9300      	str	r3, [sp, #0]
 800ef1a:	462a      	mov	r2, r5
 800ef1c:	4b05      	ldr	r3, [pc, #20]	; (800ef34 <_vfiprintf_r+0x22c>)
 800ef1e:	a904      	add	r1, sp, #16
 800ef20:	4630      	mov	r0, r6
 800ef22:	f7fd fe15 	bl	800cb50 <_printf_i>
 800ef26:	e7e4      	b.n	800eef2 <_vfiprintf_r+0x1ea>
 800ef28:	0800f4a4 	.word	0x0800f4a4
 800ef2c:	0800f4ae 	.word	0x0800f4ae
 800ef30:	0800c609 	.word	0x0800c609
 800ef34:	0800ece5 	.word	0x0800ece5
 800ef38:	0800f4aa 	.word	0x0800f4aa

0800ef3c <__swbuf_r>:
 800ef3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef3e:	460e      	mov	r6, r1
 800ef40:	4614      	mov	r4, r2
 800ef42:	4605      	mov	r5, r0
 800ef44:	b118      	cbz	r0, 800ef4e <__swbuf_r+0x12>
 800ef46:	6a03      	ldr	r3, [r0, #32]
 800ef48:	b90b      	cbnz	r3, 800ef4e <__swbuf_r+0x12>
 800ef4a:	f7fd ffaf 	bl	800ceac <__sinit>
 800ef4e:	69a3      	ldr	r3, [r4, #24]
 800ef50:	60a3      	str	r3, [r4, #8]
 800ef52:	89a3      	ldrh	r3, [r4, #12]
 800ef54:	071a      	lsls	r2, r3, #28
 800ef56:	d525      	bpl.n	800efa4 <__swbuf_r+0x68>
 800ef58:	6923      	ldr	r3, [r4, #16]
 800ef5a:	b31b      	cbz	r3, 800efa4 <__swbuf_r+0x68>
 800ef5c:	6823      	ldr	r3, [r4, #0]
 800ef5e:	6922      	ldr	r2, [r4, #16]
 800ef60:	1a98      	subs	r0, r3, r2
 800ef62:	6963      	ldr	r3, [r4, #20]
 800ef64:	b2f6      	uxtb	r6, r6
 800ef66:	4283      	cmp	r3, r0
 800ef68:	4637      	mov	r7, r6
 800ef6a:	dc04      	bgt.n	800ef76 <__swbuf_r+0x3a>
 800ef6c:	4621      	mov	r1, r4
 800ef6e:	4628      	mov	r0, r5
 800ef70:	f7ff fd9e 	bl	800eab0 <_fflush_r>
 800ef74:	b9e0      	cbnz	r0, 800efb0 <__swbuf_r+0x74>
 800ef76:	68a3      	ldr	r3, [r4, #8]
 800ef78:	3b01      	subs	r3, #1
 800ef7a:	60a3      	str	r3, [r4, #8]
 800ef7c:	6823      	ldr	r3, [r4, #0]
 800ef7e:	1c5a      	adds	r2, r3, #1
 800ef80:	6022      	str	r2, [r4, #0]
 800ef82:	701e      	strb	r6, [r3, #0]
 800ef84:	6962      	ldr	r2, [r4, #20]
 800ef86:	1c43      	adds	r3, r0, #1
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d004      	beq.n	800ef96 <__swbuf_r+0x5a>
 800ef8c:	89a3      	ldrh	r3, [r4, #12]
 800ef8e:	07db      	lsls	r3, r3, #31
 800ef90:	d506      	bpl.n	800efa0 <__swbuf_r+0x64>
 800ef92:	2e0a      	cmp	r6, #10
 800ef94:	d104      	bne.n	800efa0 <__swbuf_r+0x64>
 800ef96:	4621      	mov	r1, r4
 800ef98:	4628      	mov	r0, r5
 800ef9a:	f7ff fd89 	bl	800eab0 <_fflush_r>
 800ef9e:	b938      	cbnz	r0, 800efb0 <__swbuf_r+0x74>
 800efa0:	4638      	mov	r0, r7
 800efa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efa4:	4621      	mov	r1, r4
 800efa6:	4628      	mov	r0, r5
 800efa8:	f000 f806 	bl	800efb8 <__swsetup_r>
 800efac:	2800      	cmp	r0, #0
 800efae:	d0d5      	beq.n	800ef5c <__swbuf_r+0x20>
 800efb0:	f04f 37ff 	mov.w	r7, #4294967295
 800efb4:	e7f4      	b.n	800efa0 <__swbuf_r+0x64>
	...

0800efb8 <__swsetup_r>:
 800efb8:	b538      	push	{r3, r4, r5, lr}
 800efba:	4b2a      	ldr	r3, [pc, #168]	; (800f064 <__swsetup_r+0xac>)
 800efbc:	4605      	mov	r5, r0
 800efbe:	6818      	ldr	r0, [r3, #0]
 800efc0:	460c      	mov	r4, r1
 800efc2:	b118      	cbz	r0, 800efcc <__swsetup_r+0x14>
 800efc4:	6a03      	ldr	r3, [r0, #32]
 800efc6:	b90b      	cbnz	r3, 800efcc <__swsetup_r+0x14>
 800efc8:	f7fd ff70 	bl	800ceac <__sinit>
 800efcc:	89a3      	ldrh	r3, [r4, #12]
 800efce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800efd2:	0718      	lsls	r0, r3, #28
 800efd4:	d422      	bmi.n	800f01c <__swsetup_r+0x64>
 800efd6:	06d9      	lsls	r1, r3, #27
 800efd8:	d407      	bmi.n	800efea <__swsetup_r+0x32>
 800efda:	2309      	movs	r3, #9
 800efdc:	602b      	str	r3, [r5, #0]
 800efde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800efe2:	81a3      	strh	r3, [r4, #12]
 800efe4:	f04f 30ff 	mov.w	r0, #4294967295
 800efe8:	e034      	b.n	800f054 <__swsetup_r+0x9c>
 800efea:	0758      	lsls	r0, r3, #29
 800efec:	d512      	bpl.n	800f014 <__swsetup_r+0x5c>
 800efee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eff0:	b141      	cbz	r1, 800f004 <__swsetup_r+0x4c>
 800eff2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eff6:	4299      	cmp	r1, r3
 800eff8:	d002      	beq.n	800f000 <__swsetup_r+0x48>
 800effa:	4628      	mov	r0, r5
 800effc:	f7fe fefe 	bl	800ddfc <_free_r>
 800f000:	2300      	movs	r3, #0
 800f002:	6363      	str	r3, [r4, #52]	; 0x34
 800f004:	89a3      	ldrh	r3, [r4, #12]
 800f006:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f00a:	81a3      	strh	r3, [r4, #12]
 800f00c:	2300      	movs	r3, #0
 800f00e:	6063      	str	r3, [r4, #4]
 800f010:	6923      	ldr	r3, [r4, #16]
 800f012:	6023      	str	r3, [r4, #0]
 800f014:	89a3      	ldrh	r3, [r4, #12]
 800f016:	f043 0308 	orr.w	r3, r3, #8
 800f01a:	81a3      	strh	r3, [r4, #12]
 800f01c:	6923      	ldr	r3, [r4, #16]
 800f01e:	b94b      	cbnz	r3, 800f034 <__swsetup_r+0x7c>
 800f020:	89a3      	ldrh	r3, [r4, #12]
 800f022:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f02a:	d003      	beq.n	800f034 <__swsetup_r+0x7c>
 800f02c:	4621      	mov	r1, r4
 800f02e:	4628      	mov	r0, r5
 800f030:	f000 f884 	bl	800f13c <__smakebuf_r>
 800f034:	89a0      	ldrh	r0, [r4, #12]
 800f036:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f03a:	f010 0301 	ands.w	r3, r0, #1
 800f03e:	d00a      	beq.n	800f056 <__swsetup_r+0x9e>
 800f040:	2300      	movs	r3, #0
 800f042:	60a3      	str	r3, [r4, #8]
 800f044:	6963      	ldr	r3, [r4, #20]
 800f046:	425b      	negs	r3, r3
 800f048:	61a3      	str	r3, [r4, #24]
 800f04a:	6923      	ldr	r3, [r4, #16]
 800f04c:	b943      	cbnz	r3, 800f060 <__swsetup_r+0xa8>
 800f04e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f052:	d1c4      	bne.n	800efde <__swsetup_r+0x26>
 800f054:	bd38      	pop	{r3, r4, r5, pc}
 800f056:	0781      	lsls	r1, r0, #30
 800f058:	bf58      	it	pl
 800f05a:	6963      	ldrpl	r3, [r4, #20]
 800f05c:	60a3      	str	r3, [r4, #8]
 800f05e:	e7f4      	b.n	800f04a <__swsetup_r+0x92>
 800f060:	2000      	movs	r0, #0
 800f062:	e7f7      	b.n	800f054 <__swsetup_r+0x9c>
 800f064:	2000017c 	.word	0x2000017c

0800f068 <_raise_r>:
 800f068:	291f      	cmp	r1, #31
 800f06a:	b538      	push	{r3, r4, r5, lr}
 800f06c:	4604      	mov	r4, r0
 800f06e:	460d      	mov	r5, r1
 800f070:	d904      	bls.n	800f07c <_raise_r+0x14>
 800f072:	2316      	movs	r3, #22
 800f074:	6003      	str	r3, [r0, #0]
 800f076:	f04f 30ff 	mov.w	r0, #4294967295
 800f07a:	bd38      	pop	{r3, r4, r5, pc}
 800f07c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f07e:	b112      	cbz	r2, 800f086 <_raise_r+0x1e>
 800f080:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f084:	b94b      	cbnz	r3, 800f09a <_raise_r+0x32>
 800f086:	4620      	mov	r0, r4
 800f088:	f000 f830 	bl	800f0ec <_getpid_r>
 800f08c:	462a      	mov	r2, r5
 800f08e:	4601      	mov	r1, r0
 800f090:	4620      	mov	r0, r4
 800f092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f096:	f000 b817 	b.w	800f0c8 <_kill_r>
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d00a      	beq.n	800f0b4 <_raise_r+0x4c>
 800f09e:	1c59      	adds	r1, r3, #1
 800f0a0:	d103      	bne.n	800f0aa <_raise_r+0x42>
 800f0a2:	2316      	movs	r3, #22
 800f0a4:	6003      	str	r3, [r0, #0]
 800f0a6:	2001      	movs	r0, #1
 800f0a8:	e7e7      	b.n	800f07a <_raise_r+0x12>
 800f0aa:	2400      	movs	r4, #0
 800f0ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f0b0:	4628      	mov	r0, r5
 800f0b2:	4798      	blx	r3
 800f0b4:	2000      	movs	r0, #0
 800f0b6:	e7e0      	b.n	800f07a <_raise_r+0x12>

0800f0b8 <raise>:
 800f0b8:	4b02      	ldr	r3, [pc, #8]	; (800f0c4 <raise+0xc>)
 800f0ba:	4601      	mov	r1, r0
 800f0bc:	6818      	ldr	r0, [r3, #0]
 800f0be:	f7ff bfd3 	b.w	800f068 <_raise_r>
 800f0c2:	bf00      	nop
 800f0c4:	2000017c 	.word	0x2000017c

0800f0c8 <_kill_r>:
 800f0c8:	b538      	push	{r3, r4, r5, lr}
 800f0ca:	4d07      	ldr	r5, [pc, #28]	; (800f0e8 <_kill_r+0x20>)
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	4608      	mov	r0, r1
 800f0d2:	4611      	mov	r1, r2
 800f0d4:	602b      	str	r3, [r5, #0]
 800f0d6:	f7f2 fecb 	bl	8001e70 <_kill>
 800f0da:	1c43      	adds	r3, r0, #1
 800f0dc:	d102      	bne.n	800f0e4 <_kill_r+0x1c>
 800f0de:	682b      	ldr	r3, [r5, #0]
 800f0e0:	b103      	cbz	r3, 800f0e4 <_kill_r+0x1c>
 800f0e2:	6023      	str	r3, [r4, #0]
 800f0e4:	bd38      	pop	{r3, r4, r5, pc}
 800f0e6:	bf00      	nop
 800f0e8:	200022c0 	.word	0x200022c0

0800f0ec <_getpid_r>:
 800f0ec:	f7f2 beb8 	b.w	8001e60 <_getpid>

0800f0f0 <__swhatbuf_r>:
 800f0f0:	b570      	push	{r4, r5, r6, lr}
 800f0f2:	460c      	mov	r4, r1
 800f0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0f8:	2900      	cmp	r1, #0
 800f0fa:	b096      	sub	sp, #88	; 0x58
 800f0fc:	4615      	mov	r5, r2
 800f0fe:	461e      	mov	r6, r3
 800f100:	da0d      	bge.n	800f11e <__swhatbuf_r+0x2e>
 800f102:	89a3      	ldrh	r3, [r4, #12]
 800f104:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f108:	f04f 0100 	mov.w	r1, #0
 800f10c:	bf0c      	ite	eq
 800f10e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f112:	2340      	movne	r3, #64	; 0x40
 800f114:	2000      	movs	r0, #0
 800f116:	6031      	str	r1, [r6, #0]
 800f118:	602b      	str	r3, [r5, #0]
 800f11a:	b016      	add	sp, #88	; 0x58
 800f11c:	bd70      	pop	{r4, r5, r6, pc}
 800f11e:	466a      	mov	r2, sp
 800f120:	f000 f848 	bl	800f1b4 <_fstat_r>
 800f124:	2800      	cmp	r0, #0
 800f126:	dbec      	blt.n	800f102 <__swhatbuf_r+0x12>
 800f128:	9901      	ldr	r1, [sp, #4]
 800f12a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f12e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f132:	4259      	negs	r1, r3
 800f134:	4159      	adcs	r1, r3
 800f136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f13a:	e7eb      	b.n	800f114 <__swhatbuf_r+0x24>

0800f13c <__smakebuf_r>:
 800f13c:	898b      	ldrh	r3, [r1, #12]
 800f13e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f140:	079d      	lsls	r5, r3, #30
 800f142:	4606      	mov	r6, r0
 800f144:	460c      	mov	r4, r1
 800f146:	d507      	bpl.n	800f158 <__smakebuf_r+0x1c>
 800f148:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f14c:	6023      	str	r3, [r4, #0]
 800f14e:	6123      	str	r3, [r4, #16]
 800f150:	2301      	movs	r3, #1
 800f152:	6163      	str	r3, [r4, #20]
 800f154:	b002      	add	sp, #8
 800f156:	bd70      	pop	{r4, r5, r6, pc}
 800f158:	ab01      	add	r3, sp, #4
 800f15a:	466a      	mov	r2, sp
 800f15c:	f7ff ffc8 	bl	800f0f0 <__swhatbuf_r>
 800f160:	9900      	ldr	r1, [sp, #0]
 800f162:	4605      	mov	r5, r0
 800f164:	4630      	mov	r0, r6
 800f166:	f7fe febd 	bl	800dee4 <_malloc_r>
 800f16a:	b948      	cbnz	r0, 800f180 <__smakebuf_r+0x44>
 800f16c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f170:	059a      	lsls	r2, r3, #22
 800f172:	d4ef      	bmi.n	800f154 <__smakebuf_r+0x18>
 800f174:	f023 0303 	bic.w	r3, r3, #3
 800f178:	f043 0302 	orr.w	r3, r3, #2
 800f17c:	81a3      	strh	r3, [r4, #12]
 800f17e:	e7e3      	b.n	800f148 <__smakebuf_r+0xc>
 800f180:	89a3      	ldrh	r3, [r4, #12]
 800f182:	6020      	str	r0, [r4, #0]
 800f184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f188:	81a3      	strh	r3, [r4, #12]
 800f18a:	9b00      	ldr	r3, [sp, #0]
 800f18c:	6163      	str	r3, [r4, #20]
 800f18e:	9b01      	ldr	r3, [sp, #4]
 800f190:	6120      	str	r0, [r4, #16]
 800f192:	b15b      	cbz	r3, 800f1ac <__smakebuf_r+0x70>
 800f194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f198:	4630      	mov	r0, r6
 800f19a:	f000 f81d 	bl	800f1d8 <_isatty_r>
 800f19e:	b128      	cbz	r0, 800f1ac <__smakebuf_r+0x70>
 800f1a0:	89a3      	ldrh	r3, [r4, #12]
 800f1a2:	f023 0303 	bic.w	r3, r3, #3
 800f1a6:	f043 0301 	orr.w	r3, r3, #1
 800f1aa:	81a3      	strh	r3, [r4, #12]
 800f1ac:	89a3      	ldrh	r3, [r4, #12]
 800f1ae:	431d      	orrs	r5, r3
 800f1b0:	81a5      	strh	r5, [r4, #12]
 800f1b2:	e7cf      	b.n	800f154 <__smakebuf_r+0x18>

0800f1b4 <_fstat_r>:
 800f1b4:	b538      	push	{r3, r4, r5, lr}
 800f1b6:	4d07      	ldr	r5, [pc, #28]	; (800f1d4 <_fstat_r+0x20>)
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	4608      	mov	r0, r1
 800f1be:	4611      	mov	r1, r2
 800f1c0:	602b      	str	r3, [r5, #0]
 800f1c2:	f7f2 feb4 	bl	8001f2e <_fstat>
 800f1c6:	1c43      	adds	r3, r0, #1
 800f1c8:	d102      	bne.n	800f1d0 <_fstat_r+0x1c>
 800f1ca:	682b      	ldr	r3, [r5, #0]
 800f1cc:	b103      	cbz	r3, 800f1d0 <_fstat_r+0x1c>
 800f1ce:	6023      	str	r3, [r4, #0]
 800f1d0:	bd38      	pop	{r3, r4, r5, pc}
 800f1d2:	bf00      	nop
 800f1d4:	200022c0 	.word	0x200022c0

0800f1d8 <_isatty_r>:
 800f1d8:	b538      	push	{r3, r4, r5, lr}
 800f1da:	4d06      	ldr	r5, [pc, #24]	; (800f1f4 <_isatty_r+0x1c>)
 800f1dc:	2300      	movs	r3, #0
 800f1de:	4604      	mov	r4, r0
 800f1e0:	4608      	mov	r0, r1
 800f1e2:	602b      	str	r3, [r5, #0]
 800f1e4:	f7f2 feb3 	bl	8001f4e <_isatty>
 800f1e8:	1c43      	adds	r3, r0, #1
 800f1ea:	d102      	bne.n	800f1f2 <_isatty_r+0x1a>
 800f1ec:	682b      	ldr	r3, [r5, #0]
 800f1ee:	b103      	cbz	r3, 800f1f2 <_isatty_r+0x1a>
 800f1f0:	6023      	str	r3, [r4, #0]
 800f1f2:	bd38      	pop	{r3, r4, r5, pc}
 800f1f4:	200022c0 	.word	0x200022c0

0800f1f8 <_init>:
 800f1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1fa:	bf00      	nop
 800f1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1fe:	bc08      	pop	{r3}
 800f200:	469e      	mov	lr, r3
 800f202:	4770      	bx	lr

0800f204 <_fini>:
 800f204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f206:	bf00      	nop
 800f208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f20a:	bc08      	pop	{r3}
 800f20c:	469e      	mov	lr, r3
 800f20e:	4770      	bx	lr
