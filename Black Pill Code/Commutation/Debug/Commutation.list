
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  0800f798  0800f798  0001f798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb6c  0800fb6c  000202e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb6c  0800fb6c  0001fb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb74  0800fb74  000202e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb74  0800fb74  0001fb74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb78  0800fb78  0001fb78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  0800fb7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021c0  200002e8  0800fe64  000202e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200024a8  0800fe64  000224a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d0d9  00000000  00000000  0002035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000412e  00000000  00000000  0003d434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a40  00000000  00000000  00041568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001477  00000000  00000000  00042fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c3ba  00000000  00000000  0004441f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa3f  00000000  00000000  000607d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3bad  00000000  00000000  00080218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008004  00000000  00000000  00123dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0012bdcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e8 	.word	0x200002e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f780 	.word	0x0800f780

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002ec 	.word	0x200002ec
 80001dc:	0800f780 	.word	0x0800f780

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <PrepareCommutation>:
static void MX_TIM9_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

HAL_StatusTypeDef PrepareCommutation (char Direction) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]

	// Read IDR for Hall Sensor status
	uint16_t Hall = (GPIOA->IDR & 0b111) - 1;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <PrepareCommutation+0x68>)
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	81fb      	strh	r3, [r7, #14]

	// Set Registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8000ece:	89fa      	ldrh	r2, [r7, #14]
 8000ed0:	4913      	ldr	r1, [pc, #76]	; (8000f20 <PrepareCommutation+0x6c>)
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	440b      	add	r3, r1
 8000edc:	881a      	ldrh	r2, [r3, #0]
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <PrepareCommutation+0x70>)
 8000ee0:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 8000ee2:	89fa      	ldrh	r2, [r7, #14]
 8000ee4:	490e      	ldr	r1, [pc, #56]	; (8000f20 <PrepareCommutation+0x6c>)
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	440b      	add	r3, r1
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	881a      	ldrh	r2, [r3, #0]
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <PrepareCommutation+0x70>)
 8000ef6:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 8000ef8:	89fa      	ldrh	r2, [r7, #14]
 8000efa:	4909      	ldr	r1, [pc, #36]	; (8000f20 <PrepareCommutation+0x6c>)
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	440b      	add	r3, r1
 8000f06:	3302      	adds	r3, #2
 8000f08:	881a      	ldrh	r2, [r3, #0]
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <PrepareCommutation+0x70>)
 8000f0c:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 8000f0e:	2300      	movs	r3, #0

}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	20000000 	.word	0x20000000
 8000f24:	40010000 	.word	0x40010000

08000f28 <StartupSequence>:

HAL_StatusTypeDef StartupSequence (char Direction) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_EnableListen_IT (&hi2c1);
 8000f32:	4855      	ldr	r0, [pc, #340]	; (8001088 <StartupSequence+0x160>)
 8000f34:	f002 f9f8 	bl	8003328 <HAL_I2C_EnableListen_IT>

	// Initialize some variables
	Fapb1tclk = HAL_RCC_GetPCLK1Freq() * 2;
 8000f38:	f005 fd62 	bl	8006a00 <HAL_RCC_GetPCLK1Freq>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4a52      	ldr	r2, [pc, #328]	; (800108c <StartupSequence+0x164>)
 8000f42:	6013      	str	r3, [r2, #0]
	Fapb2tclk = HAL_RCC_GetPCLK2Freq() * 2;
 8000f44:	f005 fd70 	bl	8006a28 <HAL_RCC_GetPCLK2Freq>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4a50      	ldr	r2, [pc, #320]	; (8001090 <StartupSequence+0x168>)
 8000f4e:	6013      	str	r3, [r2, #0]
	RPMConst = (Fapb2tclk / (TIM9->PSC + 1)) * 2;
 8000f50:	4b4f      	ldr	r3, [pc, #316]	; (8001090 <StartupSequence+0x168>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b4f      	ldr	r3, [pc, #316]	; (8001094 <StartupSequence+0x16c>)
 8000f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f58:	3301      	adds	r3, #1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <StartupSequence+0x170>)
 8000f62:	6013      	str	r3, [r2, #0]

	// Set first commutation state according to Hall sensors
	if (PrepareCommutation (Direction) == HAL_ERROR) {
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ffa4 	bl	8000eb4 <PrepareCommutation>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d101      	bne.n	8000f76 <StartupSequence+0x4e>
		return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e084      	b.n	8001080 <StartupSequence+0x158>
	}

	// Start HallSensor timer
	HAL_TIMEx_HallSensor_Start (&htim2);
 8000f76:	4849      	ldr	r0, [pc, #292]	; (800109c <StartupSequence+0x174>)
 8000f78:	f007 fa3c 	bl	80083f4 <HAL_TIMEx_HallSensor_Start>

	// Start all PWM signals on TIM1
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4848      	ldr	r0, [pc, #288]	; (80010a0 <StartupSequence+0x178>)
 8000f80:	f005 ff28 	bl	8006dd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 8000f84:	2104      	movs	r1, #4
 8000f86:	4846      	ldr	r0, [pc, #280]	; (80010a0 <StartupSequence+0x178>)
 8000f88:	f005 ff24 	bl	8006dd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 8000f8c:	2108      	movs	r1, #8
 8000f8e:	4844      	ldr	r0, [pc, #272]	; (80010a0 <StartupSequence+0x178>)
 8000f90:	f005 ff20 	bl	8006dd4 <HAL_TIM_PWM_Start>

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 8000f94:	4b43      	ldr	r3, [pc, #268]	; (80010a4 <StartupSequence+0x17c>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	4a42      	ldr	r2, [pc, #264]	; (80010a4 <StartupSequence+0x17c>)
 8000f9a:	f023 0320 	bic.w	r3, r3, #32
 8000f9e:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 8000fa0:	4b40      	ldr	r3, [pc, #256]	; (80010a4 <StartupSequence+0x17c>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	4a3f      	ldr	r2, [pc, #252]	; (80010a4 <StartupSequence+0x17c>)
 8000fa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000faa:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 8000fac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fba:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8000fbc:	4b35      	ldr	r3, [pc, #212]	; (8001094 <StartupSequence+0x16c>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	4a34      	ldr	r2, [pc, #208]	; (8001094 <StartupSequence+0x16c>)
 8000fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fc6:	60d3      	str	r3, [r2, #12]

	// Start Interrupts
	HAL_TIM_Base_Start_IT (&htim1);
 8000fc8:	4835      	ldr	r0, [pc, #212]	; (80010a0 <StartupSequence+0x178>)
 8000fca:	f005 fe19 	bl	8006c00 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim2);
 8000fce:	4833      	ldr	r0, [pc, #204]	; (800109c <StartupSequence+0x174>)
 8000fd0:	f005 fe16 	bl	8006c00 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim9);
 8000fd4:	4834      	ldr	r0, [pc, #208]	; (80010a8 <StartupSequence+0x180>)
 8000fd6:	f005 fe13 	bl	8006c00 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT (&htim9, TIM_CHANNEL_2);
 8000fda:	2104      	movs	r1, #4
 8000fdc:	4832      	ldr	r0, [pc, #200]	; (80010a8 <StartupSequence+0x180>)
 8000fde:	f006 f85d 	bl	800709c <HAL_TIM_IC_Start_IT>

	// Clear all interrupt triggers
	TIM1->SR &= ~TIM_SR_COMIF;		// Clear Commutation interrupt flag
 8000fe2:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <StartupSequence+0x17c>)
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	4a2f      	ldr	r2, [pc, #188]	; (80010a4 <StartupSequence+0x17c>)
 8000fe8:	f023 0320 	bic.w	r3, r3, #32
 8000fec:	6113      	str	r3, [r2, #16]
	TIM1->SR &= ~TIM_SR_BIF;		// Clear Break interrupt flag
 8000fee:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <StartupSequence+0x17c>)
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	4a2c      	ldr	r2, [pc, #176]	; (80010a4 <StartupSequence+0x17c>)
 8000ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ff8:	6113      	str	r3, [r2, #16]
	TIM2->SR &= ~TIM_SR_TIF;		// Clear timer 2 interrupt flag
 8000ffa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001008:	6113      	str	r3, [r2, #16]
	TIM9->SR &= ~TIM_SR_TIF;		// Clear timer 9 interrupt flag
 800100a:	4b22      	ldr	r3, [pc, #136]	; (8001094 <StartupSequence+0x16c>)
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	4a21      	ldr	r2, [pc, #132]	; (8001094 <StartupSequence+0x16c>)
 8001010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001014:	6113      	str	r3, [r2, #16]

	// Enable interrupts
	TIM1->DIER |= TIM_DIER_COMIE;	// Enable Commutation events in DIER register
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <StartupSequence+0x17c>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	4a22      	ldr	r2, [pc, #136]	; (80010a4 <StartupSequence+0x17c>)
 800101c:	f043 0320 	orr.w	r3, r3, #32
 8001020:	60d3      	str	r3, [r2, #12]
	TIM2->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 2
 8001022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800102c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001030:	60d3      	str	r3, [r2, #12]
	TIM9->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 9
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <StartupSequence+0x16c>)
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	4a17      	ldr	r2, [pc, #92]	; (8001094 <StartupSequence+0x16c>)
 8001038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800103c:	60d3      	str	r3, [r2, #12]

	// Write some registers
	TIM1->CR2  |= TIM_CR2_CCPC; 	// Set CCPC in CR2 to preload CCxE, CCxNE and OCxM bits
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <StartupSequence+0x17c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <StartupSequence+0x17c>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6053      	str	r3, [r2, #4]
	TIM1->EGR  |= TIM_EGR_COMG; 	// Set COMG bit in EGR for first commutation
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <StartupSequence+0x17c>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	4a15      	ldr	r2, [pc, #84]	; (80010a4 <StartupSequence+0x17c>)
 8001050:	f043 0320 	orr.w	r3, r3, #32
 8001054:	6153      	str	r3, [r2, #20]
	TIM1->DIER |= TIM_DIER_COMIE; 	// Enable commutation events in DIER register
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <StartupSequence+0x17c>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <StartupSequence+0x17c>)
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	60d3      	str	r3, [r2, #12]
	TIM1->BDTR &= ~TIM_BDTR_DTG;	// Reset DTG bits
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <StartupSequence+0x17c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <StartupSequence+0x17c>)
 8001068:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800106c:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR |= 0x800A;			// Set dead-time to 100ns and make sure to enable MOE bit
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <StartupSequence+0x17c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a0c      	ldr	r2, [pc, #48]	; (80010a4 <StartupSequence+0x17c>)
 8001074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001078:	f043 030a 	orr.w	r3, r3, #10
 800107c:	6453      	str	r3, [r2, #68]	; 0x44

	return HAL_OK;
 800107e:	2300      	movs	r3, #0

}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2000034c 	.word	0x2000034c
 800108c:	20000534 	.word	0x20000534
 8001090:	20000538 	.word	0x20000538
 8001094:	40014000 	.word	0x40014000
 8001098:	2000053c 	.word	0x2000053c
 800109c:	20000440 	.word	0x20000440
 80010a0:	200003f8 	.word	0x200003f8
 80010a4:	40010000 	.word	0x40010000
 80010a8:	20000488 	.word	0x20000488

080010ac <StopSequence>:

HAL_StatusTypeDef StopSequence() {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

	// Stop HallSensor timer
	HAL_TIMEx_HallSensor_Stop (&htim2);
 80010b0:	481e      	ldr	r0, [pc, #120]	; (800112c <StopSequence+0x80>)
 80010b2:	f007 fa1f 	bl	80084f4 <HAL_TIMEx_HallSensor_Stop>

	// Disable all output channels
	TIM1->CCER  = 0x0000;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <StopSequence+0x84>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = 0x0000;
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <StopSequence+0x84>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = 0x0000;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <StopSequence+0x84>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	61da      	str	r2, [r3, #28]

	// Disable commutation events if not already disabled
	if ( (TIM1->DIER & TIM_DIER_COMIE) >= 1 ) { 	// If COMIE bit in DIER is set commutation events are still enabled
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <StopSequence+0x84>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	f003 0320 	and.w	r3, r3, #32
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00b      	beq.n	80010ec <StopSequence+0x40>

		TIM1->EGR |= TIM_EGR_COMG; 							// Trigger commutation event
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <StopSequence+0x84>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	4a15      	ldr	r2, [pc, #84]	; (8001130 <StopSequence+0x84>)
 80010da:	f043 0320 	orr.w	r3, r3, #32
 80010de:	6153      	str	r3, [r2, #20]
		// while ( (TIM1->SR & TIM_SR_COMIF) >= 1 ); 	// Wait until commutation event has happened
		TIM1->DIER &= ~TIM_DIER_COMIE; 						// Disable commutation events in DIER register
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <StopSequence+0x84>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	4a12      	ldr	r2, [pc, #72]	; (8001130 <StopSequence+0x84>)
 80010e6:	f023 0320 	bic.w	r3, r3, #32
 80010ea:	60d3      	str	r3, [r2, #12]

	}

	// Stop interrupts
	HAL_TIM_Base_Stop_IT (&htim1);
 80010ec:	4811      	ldr	r0, [pc, #68]	; (8001134 <StopSequence+0x88>)
 80010ee:	f005 fde9 	bl	8006cc4 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim2);
 80010f2:	480e      	ldr	r0, [pc, #56]	; (800112c <StopSequence+0x80>)
 80010f4:	f005 fde6 	bl	8006cc4 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim9);
 80010f8:	480f      	ldr	r0, [pc, #60]	; (8001138 <StopSequence+0x8c>)
 80010fa:	f005 fde3 	bl	8006cc4 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Stop_IT (&htim9, TIM_CHANNEL_2);
 80010fe:	2104      	movs	r1, #4
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <StopSequence+0x8c>)
 8001102:	f006 f8e5 	bl	80072d0 <HAL_TIM_IC_Stop_IT>

	// Stop PWM Timers
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_1);
 8001106:	2100      	movs	r1, #0
 8001108:	480a      	ldr	r0, [pc, #40]	; (8001134 <StopSequence+0x88>)
 800110a:	f005 ff13 	bl	8006f34 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_2);
 800110e:	2104      	movs	r1, #4
 8001110:	4808      	ldr	r0, [pc, #32]	; (8001134 <StopSequence+0x88>)
 8001112:	f005 ff0f 	bl	8006f34 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_3);
 8001116:	2108      	movs	r1, #8
 8001118:	4806      	ldr	r0, [pc, #24]	; (8001134 <StopSequence+0x88>)
 800111a:	f005 ff0b 	bl	8006f34 <HAL_TIM_PWM_Stop>

	Registers[RPMReg] = 0;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <StopSequence+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	80da      	strh	r2, [r3, #6]

	return HAL_OK;
 8001124:	2300      	movs	r3, #0

}
 8001126:	4618      	mov	r0, r3
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000440 	.word	0x20000440
 8001130:	40010000 	.word	0x40010000
 8001134:	200003f8 	.word	0x200003f8
 8001138:	20000488 	.word	0x20000488
 800113c:	20000514 	.word	0x20000514

08001140 <ProcessData>:

void ProcessData (void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

	StartReg = RxData[0]; 			// Start address of registers to be written
 8001146:	4b3e      	ldr	r3, [pc, #248]	; (8001240 <ProcessData+0x100>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	4b3d      	ldr	r3, [pc, #244]	; (8001244 <ProcessData+0x104>)
 800114e:	601a      	str	r2, [r3, #0]
	NumReg = RxCount - 1; 			// Number of registers to be written
 8001150:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <ProcessData+0x108>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	3b01      	subs	r3, #1
 8001156:	4a3d      	ldr	r2, [pc, #244]	; (800124c <ProcessData+0x10c>)
 8001158:	6013      	str	r3, [r2, #0]
	EndReg = StartReg + NumReg - 1; // Last register to be written
 800115a:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <ProcessData+0x104>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b3b      	ldr	r3, [pc, #236]	; (800124c <ProcessData+0x10c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	3b01      	subs	r3, #1
 8001166:	4a3a      	ldr	r2, [pc, #232]	; (8001250 <ProcessData+0x110>)
 8001168:	6013      	str	r3, [r2, #0]

	// If the last register to be wriiten is larger than the size of the register call the error handler
	if (EndReg > RxSize) {
 800116a:	4b39      	ldr	r3, [pc, #228]	; (8001250 <ProcessData+0x110>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b06      	cmp	r3, #6
 8001170:	dd01      	ble.n	8001176 <ProcessData+0x36>
		Error_Handler();
 8001172:	f000 fc47 	bl	8001a04 <Error_Handler>
	}

	// Write data into the register using a for loop
	for (int i = 1; i < NumReg + 1; i++) {
 8001176:	2301      	movs	r3, #1
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	e00f      	b.n	800119c <ProcessData+0x5c>
		Registers[StartReg++] = RxData[i + 1];
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3301      	adds	r3, #1
 8001180:	4a2f      	ldr	r2, [pc, #188]	; (8001240 <ProcessData+0x100>)
 8001182:	5cd0      	ldrb	r0, [r2, r3]
 8001184:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <ProcessData+0x104>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	492e      	ldr	r1, [pc, #184]	; (8001244 <ProcessData+0x104>)
 800118c:	600a      	str	r2, [r1, #0]
 800118e:	b281      	uxth	r1, r0
 8001190:	4a30      	ldr	r2, [pc, #192]	; (8001254 <ProcessData+0x114>)
 8001192:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 1; i < NumReg + 1; i++) {
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3301      	adds	r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <ProcessData+0x10c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	ddea      	ble.n	800117c <ProcessData+0x3c>
	}

	// If the PWM is higher than 0 but the motor is not turning then startup
	if ( Registers[PWMReg] > 0 && Registers[RPMReg] <= 0) {
 80011a6:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <ProcessData+0x114>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <ProcessData+0x82>
 80011ae:	4b29      	ldr	r3, [pc, #164]	; (8001254 <ProcessData+0x114>)
 80011b0:	88db      	ldrh	r3, [r3, #6]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d105      	bne.n	80011c2 <ProcessData+0x82>
		StartupSequence(Registers[DirReg]);
 80011b6:	4b27      	ldr	r3, [pc, #156]	; (8001254 <ProcessData+0x114>)
 80011b8:	885b      	ldrh	r3, [r3, #2]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff feb3 	bl	8000f28 <StartupSequence>
	}

	// If the PWM is 0 or negative but the motor is still turning shutdown
	if ( Registers[PWMReg] <= 0 && Registers[RPMReg] > 0 ) {
 80011c2:	4b24      	ldr	r3, [pc, #144]	; (8001254 <ProcessData+0x114>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d105      	bne.n	80011d6 <ProcessData+0x96>
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <ProcessData+0x114>)
 80011cc:	88db      	ldrh	r3, [r3, #6]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <ProcessData+0x96>
		StopSequence();
 80011d2:	f7ff ff6b 	bl	80010ac <StopSequence>
	}

	// Update PWM values
	if ( Registers[PWMReg] >= 0 ) {

		uint32_t PWM = (Registers[PWMReg] * TIM1->ARR) / 100; // Calculate required CCRx value
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <ProcessData+0x114>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <ProcessData+0x118>)
 80011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e0:	fb02 f303 	mul.w	r3, r2, r3
 80011e4:	4a1d      	ldr	r2, [pc, #116]	; (800125c <ProcessData+0x11c>)
 80011e6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	603b      	str	r3, [r7, #0]

		if (PWM >= TIM1->ARR - 60) {
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <ProcessData+0x118>)
 80011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f2:	3b3c      	subs	r3, #60	; 0x3c
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d303      	bcc.n	8001202 <ProcessData+0xc2>
			PWM = TIM1->ARR - 60;
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <ProcessData+0x118>)
 80011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fe:	3b3c      	subs	r3, #60	; 0x3c
 8001200:	603b      	str	r3, [r7, #0]
		}

		TIM1->CR1 |= TIM_CR1_UDIS; 	// Disable Update Events
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <ProcessData+0x118>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a14      	ldr	r2, [pc, #80]	; (8001258 <ProcessData+0x118>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6013      	str	r3, [r2, #0]
		TIM1->CCR1 = PWM;	  		// Set new PWM for channel 1
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <ProcessData+0x118>)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = PWM;	  		// Set new PWM for channel 2
 8001214:	4a10      	ldr	r2, [pc, #64]	; (8001258 <ProcessData+0x118>)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = PWM;	  		// Set new PWM for channel 3
 800121a:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <ProcessData+0x118>)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM1->CR1 &= ~TIM_CR1_UDIS; // Enable Update Events
 8001220:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <ProcessData+0x118>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0c      	ldr	r2, [pc, #48]	; (8001258 <ProcessData+0x118>)
 8001226:	f023 0302 	bic.w	r3, r3, #2
 800122a:	6013      	str	r3, [r2, #0]

	}

	// Empty the RxData array
	memset(RxData, 0, RxSize);
 800122c:	2206      	movs	r2, #6
 800122e:	2100      	movs	r1, #0
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <ProcessData+0x100>)
 8001232:	f00c fb52 	bl	800d8da <memset>

}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000052c 	.word	0x2000052c
 8001244:	2000051c 	.word	0x2000051c
 8001248:	20000529 	.word	0x20000529
 800124c:	20000520 	.word	0x20000520
 8001250:	20000524 	.word	0x20000524
 8001254:	20000514 	.word	0x20000514
 8001258:	40010000 	.word	0x40010000
 800125c:	51eb851f 	.word	0x51eb851f

08001260 <HAL_I2C_ListenCpltCallback>:

extern void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef *hi2c) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

	HAL_I2C_EnableListen_IT (hi2c);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f002 f85d 	bl	8003328 <HAL_I2C_EnableListen_IT>

}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_I2C_AddrCallback>:

extern void HAL_I2C_AddrCallback (I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
 8001284:	4613      	mov	r3, r2
 8001286:	803b      	strh	r3, [r7, #0]

	if ( TransferDirection == I2C_DIRECTION_TRANSMIT ) { // If the master wants to transmit the data
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d10d      	bne.n	80012aa <HAL_I2C_AddrCallback+0x32>

		RxCount = 0;
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <HAL_I2C_AddrCallback+0x8c>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_FIRST_FRAME);
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_I2C_AddrCallback+0x8c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <HAL_I2C_AddrCallback+0x90>)
 800129c:	18d1      	adds	r1, r2, r3
 800129e:	2301      	movs	r3, #1
 80012a0:	2201      	movs	r2, #1
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f001 ffcd 	bl	8003242 <HAL_I2C_Slave_Seq_Receive_IT>
		StartReg = RxData[0];
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, Registers[TxCount + StartReg] >> 8, 1, I2C_FIRST_FRAME);
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, Registers[TxCount + StartReg], 1, I2C_NEXT_FRAME);

	}
}
 80012a8:	e027      	b.n	80012fa <HAL_I2C_AddrCallback+0x82>
		TxCount = 0;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_I2C_AddrCallback+0x94>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
		StartReg = RxData[0];
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_I2C_AddrCallback+0x90>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <HAL_I2C_AddrCallback+0x98>)
 80012b8:	601a      	str	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, Registers[TxCount + StartReg] >> 8, 1, I2C_FIRST_FRAME);
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <HAL_I2C_AddrCallback+0x94>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_I2C_AddrCallback+0x98>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <HAL_I2C_AddrCallback+0x9c>)
 80012c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4619      	mov	r1, r3
 80012d2:	2301      	movs	r3, #1
 80012d4:	2201      	movs	r2, #1
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f001 ff40 	bl	800315c <HAL_I2C_Slave_Seq_Transmit_IT>
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, Registers[TxCount + StartReg], 1, I2C_NEXT_FRAME);
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_I2C_AddrCallback+0x94>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_I2C_AddrCallback+0x98>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <HAL_I2C_AddrCallback+0x9c>)
 80012ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ee:	4619      	mov	r1, r3
 80012f0:	2304      	movs	r3, #4
 80012f2:	2201      	movs	r2, #1
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f001 ff31 	bl	800315c <HAL_I2C_Slave_Seq_Transmit_IT>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000529 	.word	0x20000529
 8001308:	2000052c 	.word	0x2000052c
 800130c:	20000528 	.word	0x20000528
 8001310:	2000051c 	.word	0x2000051c
 8001314:	20000514 	.word	0x20000514

08001318 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback (I2C_HandleTypeDef *hi2c) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

	TxCount++;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_I2C_SlaveTxCpltCallback+0x5c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_I2C_SlaveTxCpltCallback+0x5c>)
 800132a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Seq_Transmit_IT (hi2c, Registers[TxCount + StartReg] >> 8, 1, I2C_NEXT_FRAME);
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_I2C_SlaveTxCpltCallback+0x5c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_I2C_SlaveTxCpltCallback+0x60>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a10      	ldr	r2, [pc, #64]	; (800137c <HAL_I2C_SlaveTxCpltCallback+0x64>)
 800133a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800133e:	0a1b      	lsrs	r3, r3, #8
 8001340:	b29b      	uxth	r3, r3
 8001342:	4619      	mov	r1, r3
 8001344:	2304      	movs	r3, #4
 8001346:	2201      	movs	r2, #1
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f001 ff07 	bl	800315c <HAL_I2C_Slave_Seq_Transmit_IT>
	HAL_I2C_Slave_Seq_Transmit_IT (hi2c, Registers[TxCount + StartReg], 1, I2C_NEXT_FRAME);
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_I2C_SlaveTxCpltCallback+0x5c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_I2C_SlaveTxCpltCallback+0x60>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4413      	add	r3, r2
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_I2C_SlaveTxCpltCallback+0x64>)
 800135c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001360:	4619      	mov	r1, r3
 8001362:	2304      	movs	r3, #4
 8001364:	2201      	movs	r2, #1
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f001 fef8 	bl	800315c <HAL_I2C_Slave_Seq_Transmit_IT>

}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000528 	.word	0x20000528
 8001378:	2000051c 	.word	0x2000051c
 800137c:	20000514 	.word	0x20000514

08001380 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback (I2C_HandleTypeDef *hi2c) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

	RxCount++;
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8001392:	701a      	strb	r2, [r3, #0]

	if ( RxCount < RxSize ) {
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b05      	cmp	r3, #5
 800139a:	d818      	bhi.n	80013ce <HAL_I2C_SlaveRxCpltCallback+0x4e>

		if (RxCount == RxSize - 1) {
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d10a      	bne.n	80013ba <HAL_I2C_SlaveRxCpltCallback+0x3a>
			HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_LAST_FRAME);
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80013ac:	18d1      	adds	r1, r2, r3
 80013ae:	2320      	movs	r3, #32
 80013b0:	2201      	movs	r2, #1
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f001 ff45 	bl	8003242 <HAL_I2C_Slave_Seq_Receive_IT>
 80013b8:	e009      	b.n	80013ce <HAL_I2C_SlaveRxCpltCallback+0x4e>
		} else {
			HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_NEXT_FRAME);
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80013c2:	18d1      	adds	r1, r2, r3
 80013c4:	2304      	movs	r3, #4
 80013c6:	2201      	movs	r2, #1
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f001 ff3a 	bl	8003242 <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if ( RxCount == RxSize) {
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d101      	bne.n	80013da <HAL_I2C_SlaveRxCpltCallback+0x5a>
		ProcessData();
 80013d6:	f7ff feb3 	bl	8001140 <ProcessData>
	}

}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000529 	.word	0x20000529
 80013e8:	2000052c 	.word	0x2000052c

080013ec <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback (I2C_HandleTypeDef *hi2c) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

	if ( HAL_I2C_GetError (hi2c) == 4) {
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f002 f9f1 	bl	80037dc <HAL_I2C_GetError>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d111      	bne.n	8001424 <HAL_I2C_ErrorCallback+0x38>

		__HAL_I2C_CLEAR_FLAG (hi2c, I2C_FLAG_AF); 	// Clear AF flag
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001408:	615a      	str	r2, [r3, #20]

		if ( TxCount == 0) { 						// Error while recieving
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_I2C_ErrorCallback+0x48>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d102      	bne.n	8001418 <HAL_I2C_ErrorCallback+0x2c>
			ProcessData();
 8001412:	f7ff fe95 	bl	8001140 <ProcessData>
 8001416:	e005      	b.n	8001424 <HAL_I2C_ErrorCallback+0x38>
		} else { 									// Error while transmitting
			TxCount--;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_I2C_ErrorCallback+0x48>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	3b01      	subs	r3, #1
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <HAL_I2C_ErrorCallback+0x48>)
 8001422:	701a      	strb	r2, [r3, #0]
		}

	}

	HAL_I2C_EnableListen_IT(hi2c);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f001 ff7f 	bl	8003328 <HAL_I2C_EnableListen_IT>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000528 	.word	0x20000528

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143c:	f000 ff7c 	bl	8002338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001440:	f000 f81c 	bl	800147c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001444:	f000 faa8 	bl	8001998 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001448:	f000 f882 	bl	8001550 <MX_ADC1_Init>
  MX_TIM1_Init();
 800144c:	f000 f936 	bl	80016bc <MX_TIM1_Init>
  MX_SPI1_Init();
 8001450:	f000 f8fe 	bl	8001650 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001454:	f000 f9ec 	bl	8001830 <MX_TIM2_Init>
  MX_TIM9_Init();
 8001458:	f000 fa34 	bl	80018c4 <MX_TIM9_Init>
  MX_I2C1_Init();
 800145c:	f000 f8ca 	bl	80015f4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001460:	f00a ffe6 	bl	800c430 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8001464:	f000 fa6e 	bl	8001944 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	StartupSequence (Registers[DirReg]);
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <main+0x40>)
 800146a:	885b      	ldrh	r3, [r3, #2]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fd5a 	bl	8000f28 <StartupSequence>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001474:	e7fe      	b.n	8001474 <main+0x3c>
 8001476:	bf00      	nop
 8001478:	20000514 	.word	0x20000514

0800147c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b094      	sub	sp, #80	; 0x50
 8001480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001482:	f107 0320 	add.w	r3, r7, #32
 8001486:	2230      	movs	r2, #48	; 0x30
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f00c fa25 	bl	800d8da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <SystemClock_Config+0xcc>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	4a27      	ldr	r2, [pc, #156]	; (8001548 <SystemClock_Config+0xcc>)
 80014aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ae:	6413      	str	r3, [r2, #64]	; 0x40
 80014b0:	4b25      	ldr	r3, [pc, #148]	; (8001548 <SystemClock_Config+0xcc>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <SystemClock_Config+0xd0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a21      	ldr	r2, [pc, #132]	; (800154c <SystemClock_Config+0xd0>)
 80014c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b1f      	ldr	r3, [pc, #124]	; (800154c <SystemClock_Config+0xd0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d8:	2301      	movs	r3, #1
 80014da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e2:	2302      	movs	r3, #2
 80014e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014ec:	2319      	movs	r3, #25
 80014ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80014f0:	23c0      	movs	r3, #192	; 0xc0
 80014f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014f8:	2304      	movs	r3, #4
 80014fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fc:	f107 0320 	add.w	r3, r7, #32
 8001500:	4618      	mov	r0, r3
 8001502:	f004 fe4d 	bl	80061a0 <HAL_RCC_OscConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800150c:	f000 fa7a 	bl	8001a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001510:	230f      	movs	r3, #15
 8001512:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001514:	2302      	movs	r3, #2
 8001516:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800151c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001520:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001526:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2103      	movs	r1, #3
 800152e:	4618      	mov	r0, r3
 8001530:	f005 f8ae 	bl	8006690 <HAL_RCC_ClockConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800153a:	f000 fa63 	bl	8001a04 <Error_Handler>
  }
}
 800153e:	bf00      	nop
 8001540:	3750      	adds	r7, #80	; 0x50
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40007000 	.word	0x40007000

08001550 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001556:	463b      	mov	r3, r7
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <MX_ADC1_Init+0x98>)
 8001564:	4a21      	ldr	r2, [pc, #132]	; (80015ec <MX_ADC1_Init+0x9c>)
 8001566:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <MX_ADC1_Init+0x98>)
 800156a:	2200      	movs	r2, #0
 800156c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <MX_ADC1_Init+0x98>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <MX_ADC1_Init+0x98>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_ADC1_Init+0x98>)
 800157c:	2200      	movs	r2, #0
 800157e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <MX_ADC1_Init+0x98>)
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MX_ADC1_Init+0x98>)
 800158a:	2200      	movs	r2, #0
 800158c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_ADC1_Init+0x98>)
 8001590:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <MX_ADC1_Init+0xa0>)
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_ADC1_Init+0x98>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <MX_ADC1_Init+0x98>)
 800159c:	2201      	movs	r2, #1
 800159e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_ADC1_Init+0x98>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_ADC1_Init+0x98>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ae:	480e      	ldr	r0, [pc, #56]	; (80015e8 <MX_ADC1_Init+0x98>)
 80015b0:	f000 ff58 	bl	8002464 <HAL_ADC_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80015ba:	f000 fa23 	bl	8001a04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015be:	2304      	movs	r3, #4
 80015c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015c2:	2301      	movs	r3, #1
 80015c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ca:	463b      	mov	r3, r7
 80015cc:	4619      	mov	r1, r3
 80015ce:	4806      	ldr	r0, [pc, #24]	; (80015e8 <MX_ADC1_Init+0x98>)
 80015d0:	f000 ff8c 	bl	80024ec <HAL_ADC_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80015da:	f000 fa13 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000304 	.word	0x20000304
 80015ec:	40012000 	.word	0x40012000
 80015f0:	0f000001 	.word	0x0f000001

080015f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_I2C1_Init+0x50>)
 80015fa:	4a13      	ldr	r2, [pc, #76]	; (8001648 <MX_I2C1_Init+0x54>)
 80015fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_I2C1_Init+0x50>)
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <MX_I2C1_Init+0x58>)
 8001602:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_I2C1_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_I2C1_Init+0x50>)
 800160c:	2220      	movs	r2, #32
 800160e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_I2C1_Init+0x50>)
 8001612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001616:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <MX_I2C1_Init+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_I2C1_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <MX_I2C1_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_I2C1_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_I2C1_Init+0x50>)
 8001632:	f001 fc4f 	bl	8002ed4 <HAL_I2C_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800163c:	f000 f9e2 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000034c 	.word	0x2000034c
 8001648:	40005400 	.word	0x40005400
 800164c:	000186a0 	.word	0x000186a0

08001650 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <MX_SPI1_Init+0x64>)
 8001656:	4a18      	ldr	r2, [pc, #96]	; (80016b8 <MX_SPI1_Init+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <MX_SPI1_Init+0x64>)
 800165c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001660:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <MX_SPI1_Init+0x64>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <MX_SPI1_Init+0x64>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_SPI1_Init+0x64>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_SPI1_Init+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <MX_SPI1_Init+0x64>)
 800167c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001680:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_SPI1_Init+0x64>)
 8001684:	2200      	movs	r2, #0
 8001686:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <MX_SPI1_Init+0x64>)
 800168a:	2200      	movs	r2, #0
 800168c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_SPI1_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <MX_SPI1_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_SPI1_Init+0x64>)
 800169c:	220a      	movs	r2, #10
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <MX_SPI1_Init+0x64>)
 80016a2:	f005 f9d5 	bl	8006a50 <HAL_SPI_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016ac:	f000 f9aa 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200003a0 	.word	0x200003a0
 80016b8:	40013000 	.word	0x40013000

080016bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b096      	sub	sp, #88	; 0x58
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80016c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016dc:	f107 0320 	add.w	r3, r7, #32
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
 80016ec:	615a      	str	r2, [r3, #20]
 80016ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016f0:	463b      	mov	r3, r7
 80016f2:	2220      	movs	r2, #32
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f00c f8ef 	bl	800d8da <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016fc:	4b4a      	ldr	r3, [pc, #296]	; (8001828 <MX_TIM1_Init+0x16c>)
 80016fe:	4a4b      	ldr	r2, [pc, #300]	; (800182c <MX_TIM1_Init+0x170>)
 8001700:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001702:	4b49      	ldr	r3, [pc, #292]	; (8001828 <MX_TIM1_Init+0x16c>)
 8001704:	2200      	movs	r2, #0
 8001706:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001708:	4b47      	ldr	r3, [pc, #284]	; (8001828 <MX_TIM1_Init+0x16c>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 800170e:	4b46      	ldr	r3, [pc, #280]	; (8001828 <MX_TIM1_Init+0x16c>)
 8001710:	f240 727f 	movw	r2, #1919	; 0x77f
 8001714:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001716:	4b44      	ldr	r3, [pc, #272]	; (8001828 <MX_TIM1_Init+0x16c>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800171c:	4b42      	ldr	r3, [pc, #264]	; (8001828 <MX_TIM1_Init+0x16c>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <MX_TIM1_Init+0x16c>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001728:	483f      	ldr	r0, [pc, #252]	; (8001828 <MX_TIM1_Init+0x16c>)
 800172a:	f005 fa1a 	bl	8006b62 <HAL_TIM_Base_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001734:	f000 f966 	bl	8001a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001738:	483b      	ldr	r0, [pc, #236]	; (8001828 <MX_TIM1_Init+0x16c>)
 800173a:	f005 faf2 	bl	8006d22 <HAL_TIM_PWM_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001744:	f000 f95e 	bl	8001a04 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001748:	2304      	movs	r3, #4
 800174a:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800174c:	2300      	movs	r3, #0
 800174e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001750:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001754:	4619      	mov	r1, r3
 8001756:	4834      	ldr	r0, [pc, #208]	; (8001828 <MX_TIM1_Init+0x16c>)
 8001758:	f006 f8ce 	bl	80078f8 <HAL_TIM_SlaveConfigSynchro>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001762:	f000 f94f 	bl	8001a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800176e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001772:	4619      	mov	r1, r3
 8001774:	482c      	ldr	r0, [pc, #176]	; (8001828 <MX_TIM1_Init+0x16c>)
 8001776:	f006 fef5 	bl	8008564 <HAL_TIMEx_MasterConfigSynchronization>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001780:	f000 f940 	bl	8001a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001784:	2360      	movs	r3, #96	; 0x60
 8001786:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800178c:	2300      	movs	r3, #0
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	2200      	movs	r2, #0
 80017a6:	4619      	mov	r1, r3
 80017a8:	481f      	ldr	r0, [pc, #124]	; (8001828 <MX_TIM1_Init+0x16c>)
 80017aa:	f005 ffe3 	bl	8007774 <HAL_TIM_PWM_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80017b4:	f000 f926 	bl	8001a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017b8:	f107 0320 	add.w	r3, r7, #32
 80017bc:	2204      	movs	r2, #4
 80017be:	4619      	mov	r1, r3
 80017c0:	4819      	ldr	r0, [pc, #100]	; (8001828 <MX_TIM1_Init+0x16c>)
 80017c2:	f005 ffd7 	bl	8007774 <HAL_TIM_PWM_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80017cc:	f000 f91a 	bl	8001a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017d0:	f107 0320 	add.w	r3, r7, #32
 80017d4:	2208      	movs	r2, #8
 80017d6:	4619      	mov	r1, r3
 80017d8:	4813      	ldr	r0, [pc, #76]	; (8001828 <MX_TIM1_Init+0x16c>)
 80017da:	f005 ffcb 	bl	8007774 <HAL_TIM_PWM_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80017e4:	f000 f90e 	bl	8001a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001800:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001806:	463b      	mov	r3, r7
 8001808:	4619      	mov	r1, r3
 800180a:	4807      	ldr	r0, [pc, #28]	; (8001828 <MX_TIM1_Init+0x16c>)
 800180c:	f006 ff18 	bl	8008640 <HAL_TIMEx_ConfigBreakDeadTime>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8001816:	f000 f8f5 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800181a:	4803      	ldr	r0, [pc, #12]	; (8001828 <MX_TIM1_Init+0x16c>)
 800181c:	f000 faf2 	bl	8001e04 <HAL_TIM_MspPostInit>

}
 8001820:	bf00      	nop
 8001822:	3758      	adds	r7, #88	; 0x58
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200003f8 	.word	0x200003f8
 800182c:	40010000 	.word	0x40010000

08001830 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MX_TIM2_Init+0x90>)
 800184e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001852:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_TIM2_Init+0x90>)
 8001856:	2200      	movs	r2, #0
 8001858:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <MX_TIM2_Init+0x90>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001860:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_TIM2_Init+0x90>)
 8001862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001866:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MX_TIM2_Init+0x90>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <MX_TIM2_Init+0x90>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	4619      	mov	r1, r3
 800188a:	480d      	ldr	r0, [pc, #52]	; (80018c0 <MX_TIM2_Init+0x90>)
 800188c:	f006 fd08 	bl	80082a0 <HAL_TIMEx_HallSensor_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001896:	f000 f8b5 	bl	8001a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800189a:	2350      	movs	r3, #80	; 0x50
 800189c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018a2:	463b      	mov	r3, r7
 80018a4:	4619      	mov	r1, r3
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <MX_TIM2_Init+0x90>)
 80018a8:	f006 fe5c 	bl	8008564 <HAL_TIMEx_MasterConfigSynchronization>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80018b2:	f000 f8a7 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000440 	.word	0x20000440

080018c4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80018ca:	463b      	mov	r3, r7
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <MX_TIM9_Init+0x78>)
 80018d8:	4a19      	ldr	r2, [pc, #100]	; (8001940 <MX_TIM9_Init+0x7c>)
 80018da:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1499;
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <MX_TIM9_Init+0x78>)
 80018de:	f240 52db 	movw	r2, #1499	; 0x5db
 80018e2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <MX_TIM9_Init+0x78>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 63999;
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <MX_TIM9_Init+0x78>)
 80018ec:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80018f0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <MX_TIM9_Init+0x78>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <MX_TIM9_Init+0x78>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80018fe:	480f      	ldr	r0, [pc, #60]	; (800193c <MX_TIM9_Init+0x78>)
 8001900:	f005 fb7c 	bl	8006ffc <HAL_TIM_IC_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800190a:	f000 f87b 	bl	8001a04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001912:	2301      	movs	r3, #1
 8001914:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 800191a:	2302      	movs	r3, #2
 800191c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800191e:	463b      	mov	r3, r7
 8001920:	2204      	movs	r2, #4
 8001922:	4619      	mov	r1, r3
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_TIM9_Init+0x78>)
 8001926:	f005 fe89 	bl	800763c <HAL_TIM_IC_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM9_Init+0x70>
  {
    Error_Handler();
 8001930:	f000 f868 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000488 	.word	0x20000488
 8001940:	40014000 	.word	0x40014000

08001944 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001948:	4b11      	ldr	r3, [pc, #68]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 800194a:	4a12      	ldr	r2, [pc, #72]	; (8001994 <MX_USART1_UART_Init+0x50>)
 800194c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 8001950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 800196a:	220c      	movs	r2, #12
 800196c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 800197c:	f006 fec6 	bl	800870c <HAL_UART_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001986:	f000 f83d 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200004d0 	.word	0x200004d0
 8001994:	40011000 	.word	0x40011000

08001998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <MX_GPIO_Init+0x68>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a16      	ldr	r2, [pc, #88]	; (8001a00 <MX_GPIO_Init+0x68>)
 80019a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <MX_GPIO_Init+0x68>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <MX_GPIO_Init+0x68>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a0f      	ldr	r2, [pc, #60]	; (8001a00 <MX_GPIO_Init+0x68>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <MX_GPIO_Init+0x68>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_GPIO_Init+0x68>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <MX_GPIO_Init+0x68>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_GPIO_Init+0x68>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800

08001a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a08:	b672      	cpsid	i
}
 8001a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <Error_Handler+0x8>
	...

08001a10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a24:	6453      	str	r3, [r2, #68]	; 0x44
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800

08001a60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a17      	ldr	r2, [pc, #92]	; (8001adc <HAL_ADC_MspInit+0x7c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d127      	bne.n	8001ad2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <HAL_ADC_MspInit+0x80>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <HAL_ADC_MspInit+0x80>)
 8001a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a90:	6453      	str	r3, [r2, #68]	; 0x44
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <HAL_ADC_MspInit+0x80>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_ADC_MspInit+0x80>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <HAL_ADC_MspInit+0x80>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <HAL_ADC_MspInit+0x80>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aba:	2310      	movs	r3, #16
 8001abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <HAL_ADC_MspInit+0x84>)
 8001ace:	f001 f87d 	bl	8002bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40012000 	.word	0x40012000
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40020000 	.word	0x40020000

08001ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a21      	ldr	r2, [pc, #132]	; (8001b8c <HAL_I2C_MspInit+0xa4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d13b      	bne.n	8001b82 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_I2C_MspInit+0xa8>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <HAL_I2C_MspInit+0xa8>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_I2C_MspInit+0xa8>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b26:	23c0      	movs	r3, #192	; 0xc0
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b2a:	2312      	movs	r3, #18
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b36:	2304      	movs	r3, #4
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4814      	ldr	r0, [pc, #80]	; (8001b94 <HAL_I2C_MspInit+0xac>)
 8001b42:	f001 f843 	bl	8002bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_I2C_MspInit+0xa8>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <HAL_I2C_MspInit+0xa8>)
 8001b50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b54:	6413      	str	r3, [r2, #64]	; 0x40
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_I2C_MspInit+0xa8>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	201f      	movs	r0, #31
 8001b68:	f000 ffc9 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b6c:	201f      	movs	r0, #31
 8001b6e:	f000 ffe2 	bl	8002b36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2020      	movs	r0, #32
 8001b78:	f000 ffc1 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001b7c:	2020      	movs	r0, #32
 8001b7e:	f000 ffda 	bl	8002b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	3728      	adds	r7, #40	; 0x28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40005400 	.word	0x40005400
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020400 	.word	0x40020400

08001b98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a28      	ldr	r2, [pc, #160]	; (8001c58 <HAL_SPI_MspInit+0xc0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d149      	bne.n	8001c4e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <HAL_SPI_MspInit+0xc4>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a26      	ldr	r2, [pc, #152]	; (8001c5c <HAL_SPI_MspInit+0xc4>)
 8001bc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <HAL_SPI_MspInit+0xc4>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_SPI_MspInit+0xc4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a1f      	ldr	r2, [pc, #124]	; (8001c5c <HAL_SPI_MspInit+0xc4>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_SPI_MspInit+0xc4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_SPI_MspInit+0xc4>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <HAL_SPI_MspInit+0xc4>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_SPI_MspInit+0xc4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c0e:	2360      	movs	r3, #96	; 0x60
 8001c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c1e:	2305      	movs	r3, #5
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4619      	mov	r1, r3
 8001c28:	480d      	ldr	r0, [pc, #52]	; (8001c60 <HAL_SPI_MspInit+0xc8>)
 8001c2a:	f000 ffcf 	bl	8002bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c2e:	2320      	movs	r3, #32
 8001c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c3e:	2305      	movs	r3, #5
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	4806      	ldr	r0, [pc, #24]	; (8001c64 <HAL_SPI_MspInit+0xcc>)
 8001c4a:	f000 ffbf 	bl	8002bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c4e:	bf00      	nop
 8001c50:	3728      	adds	r7, #40	; 0x28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40013000 	.word	0x40013000
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020000 	.word	0x40020000
 8001c64:	40020400 	.word	0x40020400

08001c68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <HAL_TIM_Base_MspInit+0x58>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d11d      	bne.n	8001cb6 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_TIM_Base_MspInit+0x5c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a10      	ldr	r2, [pc, #64]	; (8001cc4 <HAL_TIM_Base_MspInit+0x5c>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_TIM_Base_MspInit+0x5c>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2018      	movs	r0, #24
 8001c9c:	f000 ff2f 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001ca0:	2018      	movs	r0, #24
 8001ca2:	f000 ff48 	bl	8002b36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	201a      	movs	r0, #26
 8001cac:	f000 ff27 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001cb0:	201a      	movs	r0, #26
 8001cb2:	f000 ff40 	bl	8002b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce8:	d133      	bne.n	8001d52 <HAL_TIMEx_HallSensor_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a1a      	ldr	r2, [pc, #104]	; (8001d5c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001d22:	2307      	movs	r3, #7
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d32:	2301      	movs	r3, #1
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4808      	ldr	r0, [pc, #32]	; (8001d60 <HAL_TIMEx_HallSensor_MspInit+0x98>)
 8001d3e:	f000 ff45 	bl	8002bcc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	201c      	movs	r0, #28
 8001d48:	f000 fed9 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d4c:	201c      	movs	r0, #28
 8001d4e:	f000 fef2 	bl	8002b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	; 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020000 	.word	0x40020000

08001d64 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM9)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1d      	ldr	r2, [pc, #116]	; (8001df8 <HAL_TIM_IC_MspInit+0x94>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d133      	bne.n	8001dee <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <HAL_TIM_IC_MspInit+0x98>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	4a1b      	ldr	r2, [pc, #108]	; (8001dfc <HAL_TIM_IC_MspInit+0x98>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d94:	6453      	str	r3, [r2, #68]	; 0x44
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_TIM_IC_MspInit+0x98>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <HAL_TIM_IC_MspInit+0x98>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <HAL_TIM_IC_MspInit+0x98>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_TIM_IC_MspInit+0x98>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PA3     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dbe:	2308      	movs	r3, #8
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4809      	ldr	r0, [pc, #36]	; (8001e00 <HAL_TIM_IC_MspInit+0x9c>)
 8001dda:	f000 fef7 	bl	8002bcc <HAL_GPIO_Init>

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	2018      	movs	r0, #24
 8001de4:	f000 fe8b 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001de8:	2018      	movs	r0, #24
 8001dea:	f000 fea4 	bl	8002b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	; 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40014000 	.word	0x40014000
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40020000 	.word	0x40020000

08001e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a22      	ldr	r2, [pc, #136]	; (8001eac <HAL_TIM_MspPostInit+0xa8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d13d      	bne.n	8001ea2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_TIM_MspPostInit+0xac>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a20      	ldr	r2, [pc, #128]	; (8001eb0 <HAL_TIM_MspPostInit+0xac>)
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_TIM_MspPostInit+0xac>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <HAL_TIM_MspPostInit+0xac>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a19      	ldr	r2, [pc, #100]	; (8001eb0 <HAL_TIM_MspPostInit+0xac>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <HAL_TIM_MspPostInit+0xac>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e5e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e70:	2301      	movs	r3, #1
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	480e      	ldr	r0, [pc, #56]	; (8001eb4 <HAL_TIM_MspPostInit+0xb0>)
 8001e7c:	f000 fea6 	bl	8002bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001e80:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e92:	2301      	movs	r3, #1
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4806      	ldr	r0, [pc, #24]	; (8001eb8 <HAL_TIM_MspPostInit+0xb4>)
 8001e9e:	f000 fe95 	bl	8002bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ea2:	bf00      	nop
 8001ea4:	3728      	adds	r7, #40	; 0x28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	40020000 	.word	0x40020000

08001ebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a28      	ldr	r2, [pc, #160]	; (8001f7c <HAL_UART_MspInit+0xc0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d14a      	bne.n	8001f74 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <HAL_UART_MspInit+0xc4>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	4a26      	ldr	r2, [pc, #152]	; (8001f80 <HAL_UART_MspInit+0xc4>)
 8001ee8:	f043 0310 	orr.w	r3, r3, #16
 8001eec:	6453      	str	r3, [r2, #68]	; 0x44
 8001eee:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <HAL_UART_MspInit+0xc4>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_UART_MspInit+0xc4>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a1f      	ldr	r2, [pc, #124]	; (8001f80 <HAL_UART_MspInit+0xc4>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HAL_UART_MspInit+0xc4>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <HAL_UART_MspInit+0xc4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a18      	ldr	r2, [pc, #96]	; (8001f80 <HAL_UART_MspInit+0xc4>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <HAL_UART_MspInit+0xc4>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f44:	2307      	movs	r3, #7
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	480d      	ldr	r0, [pc, #52]	; (8001f84 <HAL_UART_MspInit+0xc8>)
 8001f50:	f000 fe3c 	bl	8002bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f54:	2308      	movs	r3, #8
 8001f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f64:	2307      	movs	r3, #7
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4806      	ldr	r0, [pc, #24]	; (8001f88 <HAL_UART_MspInit+0xcc>)
 8001f70:	f000 fe2c 	bl	8002bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f74:	bf00      	nop
 8001f76:	3728      	adds	r7, #40	; 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40011000 	.word	0x40011000
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020000 	.word	0x40020000
 8001f88:	40020400 	.word	0x40020400

08001f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <NMI_Handler+0x4>

08001f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <HardFault_Handler+0x4>

08001f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <MemManage_Handler+0x4>

08001f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <BusFault_Handler+0x4>

08001fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <UsageFault_Handler+0x4>

08001faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd8:	f000 fa00 	bl	80023dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	if ( (TIM9->SR & TIM_SR_CC2IF) >= 1) { // If the CC2IF is set it means a input capture has happened
 8001fe4:	4b24      	ldr	r3, [pc, #144]	; (8002078 <TIM1_BRK_TIM9_IRQHandler+0x98>)
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d038      	beq.n	8002062 <TIM1_BRK_TIM9_IRQHandler+0x82>

		Total -= RPM[i];
 8001ff0:	4b22      	ldr	r3, [pc, #136]	; (800207c <TIM1_BRK_TIM9_IRQHandler+0x9c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a22      	ldr	r2, [pc, #136]	; (8002080 <TIM1_BRK_TIM9_IRQHandler+0xa0>)
 8001ff6:	7812      	ldrb	r2, [r2, #0]
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4a22      	ldr	r2, [pc, #136]	; (8002084 <TIM1_BRK_TIM9_IRQHandler+0xa4>)
 8001ffc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	4a1e      	ldr	r2, [pc, #120]	; (800207c <TIM1_BRK_TIM9_IRQHandler+0x9c>)
 8002004:	6013      	str	r3, [r2, #0]
		RPM[i] = RPMConst / (TIM9->CCR2);
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <TIM1_BRK_TIM9_IRQHandler+0xa8>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <TIM1_BRK_TIM9_IRQHandler+0x98>)
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	fbb2 f1f3 	udiv	r1, r2, r3
 8002012:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <TIM1_BRK_TIM9_IRQHandler+0xa0>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	b289      	uxth	r1, r1
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <TIM1_BRK_TIM9_IRQHandler+0xa4>)
 800201c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		Total += RPM[i];
 8002020:	4b17      	ldr	r3, [pc, #92]	; (8002080 <TIM1_BRK_TIM9_IRQHandler+0xa0>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <TIM1_BRK_TIM9_IRQHandler+0xa4>)
 8002028:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800202c:	461a      	mov	r2, r3
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <TIM1_BRK_TIM9_IRQHandler+0x9c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4413      	add	r3, r2
 8002034:	4a11      	ldr	r2, [pc, #68]	; (800207c <TIM1_BRK_TIM9_IRQHandler+0x9c>)
 8002036:	6013      	str	r3, [r2, #0]

		i++;
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <TIM1_BRK_TIM9_IRQHandler+0xa0>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <TIM1_BRK_TIM9_IRQHandler+0xa0>)
 8002042:	701a      	strb	r2, [r3, #0]

		if ( i > AvgSize ) {
			i = 0;
		}

		Registers[RPMReg] = Total / AvgSize;
 8002044:	4b0d      	ldr	r3, [pc, #52]	; (800207c <TIM1_BRK_TIM9_IRQHandler+0x9c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	b29a      	uxth	r2, r3
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <TIM1_BRK_TIM9_IRQHandler+0xac>)
 800204e:	80da      	strh	r2, [r3, #6]

		//Registers[RPMReg] = RPMConst / (TIM9->CCR2);

		// If maximum RPM is exceeded -> shutdown
		if ( Registers[RPMReg] > MaximumRPM ) {
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <TIM1_BRK_TIM9_IRQHandler+0xac>)
 8002052:	88db      	ldrh	r3, [r3, #6]
 8002054:	f241 3288 	movw	r2, #5000	; 0x1388
 8002058:	4293      	cmp	r3, r2
 800205a:	d905      	bls.n	8002068 <TIM1_BRK_TIM9_IRQHandler+0x88>
			StopSequence();
 800205c:	f7ff f826 	bl	80010ac <StopSequence>
 8002060:	e002      	b.n	8002068 <TIM1_BRK_TIM9_IRQHandler+0x88>
		}
	} else {
		Registers[RPMReg] = 0; // If the CC2IF was not set it means the timer has overflowed and the motor is thus stationary
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <TIM1_BRK_TIM9_IRQHandler+0xac>)
 8002064:	2200      	movs	r2, #0
 8002066:	80da      	strh	r2, [r3, #6]
	}


  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002068:	4809      	ldr	r0, [pc, #36]	; (8002090 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 800206a:	f005 f9df 	bl	800742c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800206e:	4809      	ldr	r0, [pc, #36]	; (8002094 <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8002070:	f005 f9dc 	bl	800742c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40014000 	.word	0x40014000
 800207c:	20000540 	.word	0x20000540
 8002080:	20000744 	.word	0x20000744
 8002084:	20000544 	.word	0x20000544
 8002088:	2000053c 	.word	0x2000053c
 800208c:	20000514 	.word	0x20000514
 8002090:	200003f8 	.word	0x200003f8
 8002094:	20000488 	.word	0x20000488

08002098 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	PrepareCommutation (Registers[DirReg]); // Set next Commutation states
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 800209e:	885b      	ldrh	r3, [r3, #2]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe ff06 	bl	8000eb4 <PrepareCommutation>

	TIM1->SR &= ~TIM_SR_COMIF; 				// Reset COMIF in SR register
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 80020ae:	f023 0320 	bic.w	r3, r3, #32
 80020b2:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020b4:	4804      	ldr	r0, [pc, #16]	; (80020c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 80020b6:	f005 f9b9 	bl	800742c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000514 	.word	0x20000514
 80020c4:	40010000 	.word	0x40010000
 80020c8:	200003f8 	.word	0x200003f8

080020cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	// Reset Timer 9 counter.
	TIM9->CNT = 0x0;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <TIM2_IRQHandler+0x20>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24

	// Set COMG bit in EGR
	TIM1->EGR |= TIM_EGR_COMG;
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <TIM2_IRQHandler+0x24>)
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <TIM2_IRQHandler+0x24>)
 80020dc:	f043 0320 	orr.w	r3, r3, #32
 80020e0:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020e2:	4804      	ldr	r0, [pc, #16]	; (80020f4 <TIM2_IRQHandler+0x28>)
 80020e4:	f005 f9a2 	bl	800742c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40014000 	.word	0x40014000
 80020f0:	40010000 	.word	0x40010000
 80020f4:	20000440 	.word	0x20000440

080020f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <I2C1_EV_IRQHandler+0x10>)
 80020fe:	f001 f949 	bl	8003394 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	2000034c 	.word	0x2000034c

0800210c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <I2C1_ER_IRQHandler+0x10>)
 8002112:	f001 fa92 	bl	800363a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	2000034c 	.word	0x2000034c

08002120 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <OTG_FS_IRQHandler+0x10>)
 8002126:	f002 ff0e 	bl	8004f46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20001c30 	.word	0x20001c30

08002134 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return 1;
 8002138:	2301      	movs	r3, #1
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <_kill>:

int _kill(int pid, int sig)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800214e:	f00b fc17 	bl	800d980 <__errno>
 8002152:	4603      	mov	r3, r0
 8002154:	2216      	movs	r2, #22
 8002156:	601a      	str	r2, [r3, #0]
  return -1;
 8002158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <_exit>:

void _exit (int status)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800216c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ffe7 	bl	8002144 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002176:	e7fe      	b.n	8002176 <_exit+0x12>

08002178 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	e00a      	b.n	80021a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800218a:	f3af 8000 	nop.w
 800218e:	4601      	mov	r1, r0
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	60ba      	str	r2, [r7, #8]
 8002196:	b2ca      	uxtb	r2, r1
 8002198:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	3301      	adds	r3, #1
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	dbf0      	blt.n	800218a <_read+0x12>
  }

  return len;
 80021a8:	687b      	ldr	r3, [r7, #4]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	e009      	b.n	80021d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	60ba      	str	r2, [r7, #8]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	3301      	adds	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	dbf1      	blt.n	80021c4 <_write+0x12>
  }
  return len;
 80021e0:	687b      	ldr	r3, [r7, #4]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <_close>:

int _close(int file)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002212:	605a      	str	r2, [r3, #4]
  return 0;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <_isatty>:

int _isatty(int file)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800225c:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <_sbrk+0x5c>)
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <_sbrk+0x60>)
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <_sbrk+0x64>)
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <_sbrk+0x68>)
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <_sbrk+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	429a      	cmp	r2, r3
 8002282:	d207      	bcs.n	8002294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002284:	f00b fb7c 	bl	800d980 <__errno>
 8002288:	4603      	mov	r3, r0
 800228a:	220c      	movs	r2, #12
 800228c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002292:	e009      	b.n	80022a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <_sbrk+0x64>)
 80022a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a6:	68fb      	ldr	r3, [r7, #12]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20020000 	.word	0x20020000
 80022b4:	00000400 	.word	0x00000400
 80022b8:	20000748 	.word	0x20000748
 80022bc:	200024a8 	.word	0x200024a8

080022c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <SystemInit+0x20>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <SystemInit+0x20>)
 80022cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800231c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022e8:	480d      	ldr	r0, [pc, #52]	; (8002320 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022ea:	490e      	ldr	r1, [pc, #56]	; (8002324 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022ec:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f0:	e002      	b.n	80022f8 <LoopCopyDataInit>

080022f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f6:	3304      	adds	r3, #4

080022f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022fc:	d3f9      	bcc.n	80022f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fe:	4a0b      	ldr	r2, [pc, #44]	; (800232c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002300:	4c0b      	ldr	r4, [pc, #44]	; (8002330 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002304:	e001      	b.n	800230a <LoopFillZerobss>

08002306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002308:	3204      	adds	r2, #4

0800230a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800230c:	d3fb      	bcc.n	8002306 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800230e:	f7ff ffd7 	bl	80022c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002312:	f00b fb3b 	bl	800d98c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002316:	f7ff f88f 	bl	8001438 <main>
  bx  lr    
 800231a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800231c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002324:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8002328:	0800fb7c 	.word	0x0800fb7c
  ldr r2, =_sbss
 800232c:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8002330:	200024a8 	.word	0x200024a8

08002334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002334:	e7fe      	b.n	8002334 <ADC_IRQHandler>
	...

08002338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_Init+0x40>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <HAL_Init+0x40>)
 8002342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002346:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_Init+0x40>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <HAL_Init+0x40>)
 800234e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002352:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_Init+0x40>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a07      	ldr	r2, [pc, #28]	; (8002378 <HAL_Init+0x40>)
 800235a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002360:	2003      	movs	r0, #3
 8002362:	f000 fbc1 	bl	8002ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002366:	200f      	movs	r0, #15
 8002368:	f000 f808 	bl	800237c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800236c:	f7ff fb50 	bl	8001a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023c00 	.word	0x40023c00

0800237c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_InitTick+0x54>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_InitTick+0x58>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	4619      	mov	r1, r3
 800238e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002392:	fbb3 f3f1 	udiv	r3, r3, r1
 8002396:	fbb2 f3f3 	udiv	r3, r2, r3
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fbd9 	bl	8002b52 <HAL_SYSTICK_Config>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00e      	b.n	80023c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b0f      	cmp	r3, #15
 80023ae:	d80a      	bhi.n	80023c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b0:	2200      	movs	r2, #0
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023b8:	f000 fba1 	bl	8002afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023bc:	4a06      	ldr	r2, [pc, #24]	; (80023d8 <HAL_InitTick+0x5c>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e000      	b.n	80023c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000024 	.word	0x20000024
 80023d4:	2000002c 	.word	0x2000002c
 80023d8:	20000028 	.word	0x20000028

080023dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_IncTick+0x20>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_IncTick+0x24>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	4a04      	ldr	r2, [pc, #16]	; (8002400 <HAL_IncTick+0x24>)
 80023ee:	6013      	str	r3, [r2, #0]
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	2000002c 	.word	0x2000002c
 8002400:	2000074c 	.word	0x2000074c

08002404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return uwTick;
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <HAL_GetTick+0x14>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	2000074c 	.word	0x2000074c

0800241c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002424:	f7ff ffee 	bl	8002404 <HAL_GetTick>
 8002428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002434:	d005      	beq.n	8002442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_Delay+0x44>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4413      	add	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002442:	bf00      	nop
 8002444:	f7ff ffde 	bl	8002404 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	429a      	cmp	r2, r3
 8002452:	d8f7      	bhi.n	8002444 <HAL_Delay+0x28>
  {
  }
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2000002c 	.word	0x2000002c

08002464 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e033      	b.n	80024e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff faec 	bl	8001a60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d118      	bne.n	80024d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024aa:	f023 0302 	bic.w	r3, r3, #2
 80024ae:	f043 0202 	orr.w	r2, r3, #2
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f94a 	bl	8002750 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f023 0303 	bic.w	r3, r3, #3
 80024ca:	f043 0201 	orr.w	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
 80024d2:	e001      	b.n	80024d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1c>
 8002504:	2302      	movs	r3, #2
 8002506:	e113      	b.n	8002730 <HAL_ADC_ConfigChannel+0x244>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b09      	cmp	r3, #9
 8002516:	d925      	bls.n	8002564 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68d9      	ldr	r1, [r3, #12]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	b29b      	uxth	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	3b1e      	subs	r3, #30
 800252e:	2207      	movs	r2, #7
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43da      	mvns	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	400a      	ands	r2, r1
 800253c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68d9      	ldr	r1, [r3, #12]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	4618      	mov	r0, r3
 8002550:	4603      	mov	r3, r0
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4403      	add	r3, r0
 8002556:	3b1e      	subs	r3, #30
 8002558:	409a      	lsls	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	e022      	b.n	80025aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6919      	ldr	r1, [r3, #16]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	4613      	mov	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	2207      	movs	r2, #7
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43da      	mvns	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	400a      	ands	r2, r1
 8002586:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6919      	ldr	r1, [r3, #16]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	4618      	mov	r0, r3
 800259a:	4603      	mov	r3, r0
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4403      	add	r3, r0
 80025a0:	409a      	lsls	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d824      	bhi.n	80025fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	3b05      	subs	r3, #5
 80025c4:	221f      	movs	r2, #31
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43da      	mvns	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	400a      	ands	r2, r1
 80025d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	4618      	mov	r0, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	3b05      	subs	r3, #5
 80025ee:	fa00 f203 	lsl.w	r2, r0, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	635a      	str	r2, [r3, #52]	; 0x34
 80025fa:	e04c      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b0c      	cmp	r3, #12
 8002602:	d824      	bhi.n	800264e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	3b23      	subs	r3, #35	; 0x23
 8002616:	221f      	movs	r2, #31
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43da      	mvns	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	400a      	ands	r2, r1
 8002624:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	4618      	mov	r0, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	3b23      	subs	r3, #35	; 0x23
 8002640:	fa00 f203 	lsl.w	r2, r0, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
 800264c:	e023      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	3b41      	subs	r3, #65	; 0x41
 8002660:	221f      	movs	r2, #31
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	400a      	ands	r2, r1
 800266e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	4618      	mov	r0, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	3b41      	subs	r3, #65	; 0x41
 800268a:	fa00 f203 	lsl.w	r2, r0, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002696:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_ADC_ConfigChannel+0x250>)
 8002698:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a28      	ldr	r2, [pc, #160]	; (8002740 <HAL_ADC_ConfigChannel+0x254>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d10f      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x1d8>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b12      	cmp	r3, #18
 80026aa:	d10b      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <HAL_ADC_ConfigChannel+0x254>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d12b      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x23a>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1c      	ldr	r2, [pc, #112]	; (8002744 <HAL_ADC_ConfigChannel+0x258>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d003      	beq.n	80026e0 <HAL_ADC_ConfigChannel+0x1f4>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b11      	cmp	r3, #17
 80026de:	d122      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a11      	ldr	r2, [pc, #68]	; (8002744 <HAL_ADC_ConfigChannel+0x258>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d111      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <HAL_ADC_ConfigChannel+0x25c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a11      	ldr	r2, [pc, #68]	; (800274c <HAL_ADC_ConfigChannel+0x260>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	0c9a      	lsrs	r2, r3, #18
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002718:	e002      	b.n	8002720 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	3b01      	subs	r3, #1
 800271e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f9      	bne.n	800271a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	40012300 	.word	0x40012300
 8002740:	40012000 	.word	0x40012000
 8002744:	10000012 	.word	0x10000012
 8002748:	20000024 	.word	0x20000024
 800274c:	431bde83 	.word	0x431bde83

08002750 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002758:	4b79      	ldr	r3, [pc, #484]	; (8002940 <ADC_Init+0x1f0>)
 800275a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	431a      	orrs	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002784:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	021a      	lsls	r2, r3, #8
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6899      	ldr	r1, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	4a58      	ldr	r2, [pc, #352]	; (8002944 <ADC_Init+0x1f4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d022      	beq.n	800282e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6899      	ldr	r1, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002818:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6899      	ldr	r1, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	e00f      	b.n	800284e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800283c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800284c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0202 	bic.w	r2, r2, #2
 800285c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6899      	ldr	r1, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7e1b      	ldrb	r3, [r3, #24]
 8002868:	005a      	lsls	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d01b      	beq.n	80028b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800288a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800289a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	3b01      	subs	r3, #1
 80028a8:	035a      	lsls	r2, r3, #13
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	e007      	b.n	80028c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	3b01      	subs	r3, #1
 80028e0:	051a      	lsls	r2, r3, #20
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6899      	ldr	r1, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002906:	025a      	lsls	r2, r3, #9
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6899      	ldr	r1, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	029a      	lsls	r2, r3, #10
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	609a      	str	r2, [r3, #8]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	40012300 	.word	0x40012300
 8002944:	0f000001 	.word	0x0f000001

08002948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <__NVIC_SetPriorityGrouping+0x44>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002964:	4013      	ands	r3, r2
 8002966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800297a:	4a04      	ldr	r2, [pc, #16]	; (800298c <__NVIC_SetPriorityGrouping+0x44>)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	60d3      	str	r3, [r2, #12]
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	0a1b      	lsrs	r3, r3, #8
 800299a:	f003 0307 	and.w	r3, r3, #7
}
 800299e:	4618      	mov	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	db0b      	blt.n	80029d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	f003 021f 	and.w	r2, r3, #31
 80029c4:	4907      	ldr	r1, [pc, #28]	; (80029e4 <__NVIC_EnableIRQ+0x38>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	2001      	movs	r0, #1
 80029ce:	fa00 f202 	lsl.w	r2, r0, r2
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000e100 	.word	0xe000e100

080029e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	db0a      	blt.n	8002a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	490c      	ldr	r1, [pc, #48]	; (8002a34 <__NVIC_SetPriority+0x4c>)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	0112      	lsls	r2, r2, #4
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a10:	e00a      	b.n	8002a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4908      	ldr	r1, [pc, #32]	; (8002a38 <__NVIC_SetPriority+0x50>)
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	3b04      	subs	r3, #4
 8002a20:	0112      	lsls	r2, r2, #4
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	440b      	add	r3, r1
 8002a26:	761a      	strb	r2, [r3, #24]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000e100 	.word	0xe000e100
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f1c3 0307 	rsb	r3, r3, #7
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	bf28      	it	cs
 8002a5a:	2304      	movcs	r3, #4
 8002a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3304      	adds	r3, #4
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d902      	bls.n	8002a6c <NVIC_EncodePriority+0x30>
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3b03      	subs	r3, #3
 8002a6a:	e000      	b.n	8002a6e <NVIC_EncodePriority+0x32>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	401a      	ands	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43d9      	mvns	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	4313      	orrs	r3, r2
         );
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3724      	adds	r7, #36	; 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ab4:	d301      	bcc.n	8002aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e00f      	b.n	8002ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aba:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <SysTick_Config+0x40>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ac2:	210f      	movs	r1, #15
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ac8:	f7ff ff8e 	bl	80029e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <SysTick_Config+0x40>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ad2:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <SysTick_Config+0x40>)
 8002ad4:	2207      	movs	r2, #7
 8002ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	e000e010 	.word	0xe000e010

08002ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff ff29 	bl	8002948 <__NVIC_SetPriorityGrouping>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	4603      	mov	r3, r0
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b10:	f7ff ff3e 	bl	8002990 <__NVIC_GetPriorityGrouping>
 8002b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	6978      	ldr	r0, [r7, #20]
 8002b1c:	f7ff ff8e 	bl	8002a3c <NVIC_EncodePriority>
 8002b20:	4602      	mov	r2, r0
 8002b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff5d 	bl	80029e8 <__NVIC_SetPriority>
}
 8002b2e:	bf00      	nop
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff31 	bl	80029ac <__NVIC_EnableIRQ>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff ffa2 	bl	8002aa4 <SysTick_Config>
 8002b60:	4603      	mov	r3, r0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d004      	beq.n	8002b88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2280      	movs	r2, #128	; 0x80
 8002b82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e00c      	b.n	8002ba2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2205      	movs	r2, #5
 8002b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0201 	bic.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bbc:	b2db      	uxtb	r3, r3
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
 8002be6:	e159      	b.n	8002e9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002be8:	2201      	movs	r2, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	f040 8148 	bne.w	8002e96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d005      	beq.n	8002c1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d130      	bne.n	8002c80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	2203      	movs	r2, #3
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c54:	2201      	movs	r2, #1
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 0201 	and.w	r2, r3, #1
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d017      	beq.n	8002cbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2203      	movs	r2, #3
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d123      	bne.n	8002d10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	08da      	lsrs	r2, r3, #3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3208      	adds	r2, #8
 8002cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	220f      	movs	r2, #15
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	08da      	lsrs	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3208      	adds	r2, #8
 8002d0a:	69b9      	ldr	r1, [r7, #24]
 8002d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 0203 	and.w	r2, r3, #3
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80a2 	beq.w	8002e96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b57      	ldr	r3, [pc, #348]	; (8002eb4 <HAL_GPIO_Init+0x2e8>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	4a56      	ldr	r2, [pc, #344]	; (8002eb4 <HAL_GPIO_Init+0x2e8>)
 8002d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d60:	6453      	str	r3, [r2, #68]	; 0x44
 8002d62:	4b54      	ldr	r3, [pc, #336]	; (8002eb4 <HAL_GPIO_Init+0x2e8>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d6e:	4a52      	ldr	r2, [pc, #328]	; (8002eb8 <HAL_GPIO_Init+0x2ec>)
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	3302      	adds	r3, #2
 8002d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	220f      	movs	r2, #15
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a49      	ldr	r2, [pc, #292]	; (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d019      	beq.n	8002dce <HAL_GPIO_Init+0x202>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a48      	ldr	r2, [pc, #288]	; (8002ec0 <HAL_GPIO_Init+0x2f4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d013      	beq.n	8002dca <HAL_GPIO_Init+0x1fe>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a47      	ldr	r2, [pc, #284]	; (8002ec4 <HAL_GPIO_Init+0x2f8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00d      	beq.n	8002dc6 <HAL_GPIO_Init+0x1fa>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a46      	ldr	r2, [pc, #280]	; (8002ec8 <HAL_GPIO_Init+0x2fc>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d007      	beq.n	8002dc2 <HAL_GPIO_Init+0x1f6>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a45      	ldr	r2, [pc, #276]	; (8002ecc <HAL_GPIO_Init+0x300>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d101      	bne.n	8002dbe <HAL_GPIO_Init+0x1f2>
 8002dba:	2304      	movs	r3, #4
 8002dbc:	e008      	b.n	8002dd0 <HAL_GPIO_Init+0x204>
 8002dbe:	2307      	movs	r3, #7
 8002dc0:	e006      	b.n	8002dd0 <HAL_GPIO_Init+0x204>
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e004      	b.n	8002dd0 <HAL_GPIO_Init+0x204>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e002      	b.n	8002dd0 <HAL_GPIO_Init+0x204>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_GPIO_Init+0x204>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	f002 0203 	and.w	r2, r2, #3
 8002dd6:	0092      	lsls	r2, r2, #2
 8002dd8:	4093      	lsls	r3, r2
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002de0:	4935      	ldr	r1, [pc, #212]	; (8002eb8 <HAL_GPIO_Init+0x2ec>)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dee:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e12:	4a2f      	ldr	r2, [pc, #188]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e18:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e3c:	4a24      	ldr	r2, [pc, #144]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e42:	4b23      	ldr	r3, [pc, #140]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e66:	4a1a      	ldr	r2, [pc, #104]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e6c:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e90:	4a0f      	ldr	r2, [pc, #60]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	f67f aea2 	bls.w	8002be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3724      	adds	r7, #36	; 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	40020400 	.word	0x40020400
 8002ec4:	40020800 	.word	0x40020800
 8002ec8:	40020c00 	.word	0x40020c00
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40013c00 	.word	0x40013c00

08002ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e12b      	b.n	800313e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fe fdf4 	bl	8001ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2224      	movs	r2, #36	; 0x24
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f38:	f003 fd62 	bl	8006a00 <HAL_RCC_GetPCLK1Freq>
 8002f3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4a81      	ldr	r2, [pc, #516]	; (8003148 <HAL_I2C_Init+0x274>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d807      	bhi.n	8002f58 <HAL_I2C_Init+0x84>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4a80      	ldr	r2, [pc, #512]	; (800314c <HAL_I2C_Init+0x278>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	bf94      	ite	ls
 8002f50:	2301      	movls	r3, #1
 8002f52:	2300      	movhi	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	e006      	b.n	8002f66 <HAL_I2C_Init+0x92>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4a7d      	ldr	r2, [pc, #500]	; (8003150 <HAL_I2C_Init+0x27c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	bf94      	ite	ls
 8002f60:	2301      	movls	r3, #1
 8002f62:	2300      	movhi	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e0e7      	b.n	800313e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4a78      	ldr	r2, [pc, #480]	; (8003154 <HAL_I2C_Init+0x280>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	0c9b      	lsrs	r3, r3, #18
 8002f78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a6a      	ldr	r2, [pc, #424]	; (8003148 <HAL_I2C_Init+0x274>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d802      	bhi.n	8002fa8 <HAL_I2C_Init+0xd4>
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	e009      	b.n	8002fbc <HAL_I2C_Init+0xe8>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	4a69      	ldr	r2, [pc, #420]	; (8003158 <HAL_I2C_Init+0x284>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	099b      	lsrs	r3, r3, #6
 8002fba:	3301      	adds	r3, #1
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	495c      	ldr	r1, [pc, #368]	; (8003148 <HAL_I2C_Init+0x274>)
 8002fd8:	428b      	cmp	r3, r1
 8002fda:	d819      	bhi.n	8003010 <HAL_I2C_Init+0x13c>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	1e59      	subs	r1, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fea:	1c59      	adds	r1, r3, #1
 8002fec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ff0:	400b      	ands	r3, r1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <HAL_I2C_Init+0x138>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1e59      	subs	r1, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	fbb1 f3f3 	udiv	r3, r1, r3
 8003004:	3301      	adds	r3, #1
 8003006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300a:	e051      	b.n	80030b0 <HAL_I2C_Init+0x1dc>
 800300c:	2304      	movs	r3, #4
 800300e:	e04f      	b.n	80030b0 <HAL_I2C_Init+0x1dc>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d111      	bne.n	800303c <HAL_I2C_Init+0x168>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1e58      	subs	r0, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6859      	ldr	r1, [r3, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	440b      	add	r3, r1
 8003026:	fbb0 f3f3 	udiv	r3, r0, r3
 800302a:	3301      	adds	r3, #1
 800302c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	e012      	b.n	8003062 <HAL_I2C_Init+0x18e>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1e58      	subs	r0, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6859      	ldr	r1, [r3, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	0099      	lsls	r1, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003052:	3301      	adds	r3, #1
 8003054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Init+0x196>
 8003066:	2301      	movs	r3, #1
 8003068:	e022      	b.n	80030b0 <HAL_I2C_Init+0x1dc>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10e      	bne.n	8003090 <HAL_I2C_Init+0x1bc>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1e58      	subs	r0, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6859      	ldr	r1, [r3, #4]
 800307a:	460b      	mov	r3, r1
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	440b      	add	r3, r1
 8003080:	fbb0 f3f3 	udiv	r3, r0, r3
 8003084:	3301      	adds	r3, #1
 8003086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800308e:	e00f      	b.n	80030b0 <HAL_I2C_Init+0x1dc>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1e58      	subs	r0, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	0099      	lsls	r1, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a6:	3301      	adds	r3, #1
 80030a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	6809      	ldr	r1, [r1, #0]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69da      	ldr	r2, [r3, #28]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6911      	ldr	r1, [r2, #16]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	68d2      	ldr	r2, [r2, #12]
 80030ea:	4311      	orrs	r1, r2
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	430b      	orrs	r3, r1
 80030f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695a      	ldr	r2, [r3, #20]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0201 	orr.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	000186a0 	.word	0x000186a0
 800314c:	001e847f 	.word	0x001e847f
 8003150:	003d08ff 	.word	0x003d08ff
 8003154:	431bde83 	.word	0x431bde83
 8003158:	10624dd3 	.word	0x10624dd3

0800315c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003178:	2b28      	cmp	r3, #40	; 0x28
 800317a:	d15b      	bne.n	8003234 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e054      	b.n	8003236 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8003196:	2302      	movs	r3, #2
 8003198:	e04d      	b.n	8003236 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d007      	beq.n	80031c0 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2229      	movs	r2, #41	; 0x29
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	88fa      	ldrh	r2, [r7, #6]
 80031f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800322e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	e000      	b.n	8003236 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8003242:	b480      	push	{r7}
 8003244:	b087      	sub	sp, #28
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	603b      	str	r3, [r7, #0]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800325e:	2b28      	cmp	r3, #40	; 0x28
 8003260:	d15b      	bne.n	800331a <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e054      	b.n	800331c <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800327c:	2302      	movs	r3, #2
 800327e:	e04d      	b.n	800331c <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b01      	cmp	r3, #1
 8003294:	d007      	beq.n	80032a6 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	222a      	movs	r2, #42	; 0x2a
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	88fa      	ldrh	r2, [r7, #6]
 80032d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003314:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	e000      	b.n	800331c <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800331a:	2302      	movs	r3, #2
  }
}
 800331c:	4618      	mov	r0, r3
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b20      	cmp	r3, #32
 800333a:	d124      	bne.n	8003386 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2228      	movs	r2, #40	; 0x28
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b01      	cmp	r3, #1
 8003350:	d007      	beq.n	8003362 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0201 	orr.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003370:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003380:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	e000      	b.n	8003388 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003386:	2302      	movs	r3, #2
  }
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d003      	beq.n	80033cc <HAL_I2C_EV_IRQHandler+0x38>
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	2b40      	cmp	r3, #64	; 0x40
 80033c8:	f040 80b1 	bne.w	800352e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10d      	bne.n	8003402 <HAL_I2C_EV_IRQHandler+0x6e>
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80033ec:	d003      	beq.n	80033f6 <HAL_I2C_EV_IRQHandler+0x62>
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80033f4:	d101      	bne.n	80033fa <HAL_I2C_EV_IRQHandler+0x66>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_I2C_EV_IRQHandler+0x68>
 80033fa:	2300      	movs	r3, #0
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	f000 8114 	beq.w	800362a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00b      	beq.n	8003424 <HAL_I2C_EV_IRQHandler+0x90>
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003412:	2b00      	cmp	r3, #0
 8003414:	d006      	beq.n	8003424 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f001 fc2a 	bl	8004c70 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fd34 	bl	8003e8a <I2C_Master_SB>
 8003422:	e083      	b.n	800352c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_I2C_EV_IRQHandler+0xac>
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fdac 	bl	8003f96 <I2C_Master_ADD10>
 800343e:	e075      	b.n	800352c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <HAL_I2C_EV_IRQHandler+0xc8>
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fdc8 	bl	8003fea <I2C_Master_ADDR>
 800345a:	e067      	b.n	800352c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d036      	beq.n	80034d4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003474:	f000 80db 	beq.w	800362e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00d      	beq.n	800349e <HAL_I2C_EV_IRQHandler+0x10a>
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_I2C_EV_IRQHandler+0x10a>
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d103      	bne.n	800349e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f9ac 	bl	80037f4 <I2C_MasterTransmit_TXE>
 800349c:	e046      	b.n	800352c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80c2 	beq.w	800362e <HAL_I2C_EV_IRQHandler+0x29a>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80bc 	beq.w	800362e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80034b6:	7bbb      	ldrb	r3, [r7, #14]
 80034b8:	2b21      	cmp	r3, #33	; 0x21
 80034ba:	d103      	bne.n	80034c4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fa35 	bl	800392c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034c2:	e0b4      	b.n	800362e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	2b40      	cmp	r3, #64	; 0x40
 80034c8:	f040 80b1 	bne.w	800362e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 faa3 	bl	8003a18 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034d2:	e0ac      	b.n	800362e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e2:	f000 80a4 	beq.w	800362e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00d      	beq.n	800350c <HAL_I2C_EV_IRQHandler+0x178>
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <HAL_I2C_EV_IRQHandler+0x178>
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d103      	bne.n	800350c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fb1b 	bl	8003b40 <I2C_MasterReceive_RXNE>
 800350a:	e00f      	b.n	800352c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 808b 	beq.w	800362e <HAL_I2C_EV_IRQHandler+0x29a>
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 8085 	beq.w	800362e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fbc6 	bl	8003cb6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800352a:	e080      	b.n	800362e <HAL_I2C_EV_IRQHandler+0x29a>
 800352c:	e07f      	b.n	800362e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	2b00      	cmp	r3, #0
 8003534:	d004      	beq.n	8003540 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	e007      	b.n	8003550 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d011      	beq.n	800357e <HAL_I2C_EV_IRQHandler+0x1ea>
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00c      	beq.n	800357e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003574:	69b9      	ldr	r1, [r7, #24]
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 ff86 	bl	8004488 <I2C_Slave_ADDR>
 800357c:	e05a      	b.n	8003634 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_I2C_EV_IRQHandler+0x206>
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 ffc0 	bl	8004518 <I2C_Slave_STOPF>
 8003598:	e04c      	b.n	8003634 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800359a:	7bbb      	ldrb	r3, [r7, #14]
 800359c:	2b21      	cmp	r3, #33	; 0x21
 800359e:	d002      	beq.n	80035a6 <HAL_I2C_EV_IRQHandler+0x212>
 80035a0:	7bbb      	ldrb	r3, [r7, #14]
 80035a2:	2b29      	cmp	r3, #41	; 0x29
 80035a4:	d120      	bne.n	80035e8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00d      	beq.n	80035cc <HAL_I2C_EV_IRQHandler+0x238>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_I2C_EV_IRQHandler+0x238>
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d103      	bne.n	80035cc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fea1 	bl	800430c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035ca:	e032      	b.n	8003632 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d02d      	beq.n	8003632 <HAL_I2C_EV_IRQHandler+0x29e>
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d028      	beq.n	8003632 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fed0 	bl	8004386 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035e6:	e024      	b.n	8003632 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00d      	beq.n	800360e <HAL_I2C_EV_IRQHandler+0x27a>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_I2C_EV_IRQHandler+0x27a>
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fede 	bl	80043c8 <I2C_SlaveReceive_RXNE>
 800360c:	e012      	b.n	8003634 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00d      	beq.n	8003634 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800361e:	2b00      	cmp	r3, #0
 8003620:	d008      	beq.n	8003634 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 ff0e 	bl	8004444 <I2C_SlaveReceive_BTF>
 8003628:	e004      	b.n	8003634 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800362a:	bf00      	nop
 800362c:	e002      	b.n	8003634 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800362e:	bf00      	nop
 8003630:	e000      	b.n	8003634 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003632:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b08a      	sub	sp, #40	; 0x28
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800365c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00d      	beq.n	8003684 <HAL_I2C_ER_IRQHandler+0x4a>
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003682:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00d      	beq.n	80036aa <HAL_I2C_ER_IRQHandler+0x70>
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	f043 0302 	orr.w	r3, r3, #2
 800369e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80036a8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d03e      	beq.n	8003732 <HAL_I2C_ER_IRQHandler+0xf8>
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d039      	beq.n	8003732 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80036be:	7efb      	ldrb	r3, [r7, #27]
 80036c0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80036d8:	7ebb      	ldrb	r3, [r7, #26]
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d112      	bne.n	8003704 <HAL_I2C_ER_IRQHandler+0xca>
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10f      	bne.n	8003704 <HAL_I2C_ER_IRQHandler+0xca>
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	2b21      	cmp	r3, #33	; 0x21
 80036e8:	d008      	beq.n	80036fc <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80036ea:	7cfb      	ldrb	r3, [r7, #19]
 80036ec:	2b29      	cmp	r3, #41	; 0x29
 80036ee:	d005      	beq.n	80036fc <HAL_I2C_ER_IRQHandler+0xc2>
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	2b28      	cmp	r3, #40	; 0x28
 80036f4:	d106      	bne.n	8003704 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b21      	cmp	r3, #33	; 0x21
 80036fa:	d103      	bne.n	8003704 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f001 f83b 	bl	8004778 <I2C_Slave_AF>
 8003702:	e016      	b.n	8003732 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800370c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	f043 0304 	orr.w	r3, r3, #4
 8003714:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003716:	7efb      	ldrb	r3, [r7, #27]
 8003718:	2b10      	cmp	r3, #16
 800371a:	d002      	beq.n	8003722 <HAL_I2C_ER_IRQHandler+0xe8>
 800371c:	7efb      	ldrb	r3, [r7, #27]
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d107      	bne.n	8003732 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003730:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00d      	beq.n	8003758 <HAL_I2C_ER_IRQHandler+0x11e>
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	f043 0308 	orr.w	r3, r3, #8
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003756:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f001 f874 	bl	8004858 <I2C_ITError>
  }
}
 8003770:	bf00      	nop
 8003772:	3728      	adds	r7, #40	; 0x28
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003802:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800380a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003816:	2b00      	cmp	r3, #0
 8003818:	d150      	bne.n	80038bc <I2C_MasterTransmit_TXE+0xc8>
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	2b21      	cmp	r3, #33	; 0x21
 800381e:	d14d      	bne.n	80038bc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b08      	cmp	r3, #8
 8003824:	d01d      	beq.n	8003862 <I2C_MasterTransmit_TXE+0x6e>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b20      	cmp	r3, #32
 800382a:	d01a      	beq.n	8003862 <I2C_MasterTransmit_TXE+0x6e>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003832:	d016      	beq.n	8003862 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003842:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2211      	movs	r2, #17
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff ff8c 	bl	8003778 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003860:	e060      	b.n	8003924 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003870:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003880:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d107      	bne.n	80038ac <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff ff7b 	bl	80037a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038aa:	e03b      	b.n	8003924 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff ff5f 	bl	8003778 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038ba:	e033      	b.n	8003924 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	2b21      	cmp	r3, #33	; 0x21
 80038c0:	d005      	beq.n	80038ce <I2C_MasterTransmit_TXE+0xda>
 80038c2:	7bbb      	ldrb	r3, [r7, #14]
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d12d      	bne.n	8003924 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b22      	cmp	r3, #34	; 0x22
 80038cc:	d12a      	bne.n	8003924 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d108      	bne.n	80038ea <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80038e8:	e01c      	b.n	8003924 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b40      	cmp	r3, #64	; 0x40
 80038f4:	d103      	bne.n	80038fe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f88e 	bl	8003a18 <I2C_MemoryTransmit_TXE_BTF>
}
 80038fc:	e012      	b.n	8003924 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	781a      	ldrb	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003922:	e7ff      	b.n	8003924 <I2C_MasterTransmit_TXE+0x130>
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b21      	cmp	r3, #33	; 0x21
 8003944:	d164      	bne.n	8003a10 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d012      	beq.n	8003976 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	781a      	ldrb	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003974:	e04c      	b.n	8003a10 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d01d      	beq.n	80039b8 <I2C_MasterTransmit_BTF+0x8c>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b20      	cmp	r3, #32
 8003980:	d01a      	beq.n	80039b8 <I2C_MasterTransmit_BTF+0x8c>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003988:	d016      	beq.n	80039b8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003998:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2211      	movs	r2, #17
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff fee1 	bl	8003778 <HAL_I2C_MasterTxCpltCallback>
}
 80039b6:	e02b      	b.n	8003a10 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039c6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b40      	cmp	r3, #64	; 0x40
 80039f0:	d107      	bne.n	8003a02 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff fed0 	bl	80037a0 <HAL_I2C_MemTxCpltCallback>
}
 8003a00:	e006      	b.n	8003a10 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff feb4 	bl	8003778 <HAL_I2C_MasterTxCpltCallback>
}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a26:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d11d      	bne.n	8003a6c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d10b      	bne.n	8003a50 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a48:	1c9a      	adds	r2, r3, #2
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003a4e:	e073      	b.n	8003b38 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	121b      	asrs	r3, r3, #8
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a6a:	e065      	b.n	8003b38 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d10b      	bne.n	8003a8c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a8a:	e055      	b.n	8003b38 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d151      	bne.n	8003b38 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	2b22      	cmp	r3, #34	; 0x22
 8003a98:	d10d      	bne.n	8003ab6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ab4:	e040      	b.n	8003b38 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b21      	cmp	r3, #33	; 0x21
 8003ac4:	d112      	bne.n	8003aec <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	781a      	ldrb	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003aea:	e025      	b.n	8003b38 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d120      	bne.n	8003b38 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	2b21      	cmp	r3, #33	; 0x21
 8003afa:	d11d      	bne.n	8003b38 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b0a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff fe34 	bl	80037a0 <HAL_I2C_MemTxCpltCallback>
}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b22      	cmp	r3, #34	; 0x22
 8003b52:	f040 80ac 	bne.w	8003cae <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d921      	bls.n	8003ba8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	f040 808c 	bne.w	8003cae <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003ba6:	e082      	b.n	8003cae <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d075      	beq.n	8003c9c <I2C_MasterReceive_RXNE+0x15c>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d002      	beq.n	8003bbc <I2C_MasterReceive_RXNE+0x7c>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d16f      	bne.n	8003c9c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f001 f825 	bl	8004c0c <I2C_WaitOnSTOPRequestThroughIT>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d142      	bne.n	8003c4e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003be6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b40      	cmp	r3, #64	; 0x40
 8003c20:	d10a      	bne.n	8003c38 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff fdbf 	bl	80037b4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c36:	e03a      	b.n	8003cae <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2212      	movs	r2, #18
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff fda0 	bl	800378c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c4c:	e02f      	b.n	8003cae <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c5c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7fd fba9 	bl	80013ec <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c9a:	e008      	b.n	8003cae <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003caa:	605a      	str	r2, [r3, #4]
}
 8003cac:	e7ff      	b.n	8003cae <I2C_MasterReceive_RXNE+0x16e>
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b084      	sub	sp, #16
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d11b      	bne.n	8003d06 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cdc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003d04:	e0bd      	b.n	8003e82 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d129      	bne.n	8003d64 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d1e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d00a      	beq.n	8003d3c <I2C_MasterReceive_BTF+0x86>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d007      	beq.n	8003d3c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d3a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d62:	e08e      	b.n	8003e82 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d176      	bne.n	8003e5c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d002      	beq.n	8003d7a <I2C_MasterReceive_BTF+0xc4>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b10      	cmp	r3, #16
 8003d78:	d108      	bne.n	8003d8c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e019      	b.n	8003dc0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d002      	beq.n	8003d98 <I2C_MasterReceive_BTF+0xe2>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d108      	bne.n	8003daa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	e00a      	b.n	8003dc0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d007      	beq.n	8003dc0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dbe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e1a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b40      	cmp	r3, #64	; 0x40
 8003e2e:	d10a      	bne.n	8003e46 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff fcb8 	bl	80037b4 <HAL_I2C_MemRxCpltCallback>
}
 8003e44:	e01d      	b.n	8003e82 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2212      	movs	r2, #18
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fc99 	bl	800378c <HAL_I2C_MasterRxCpltCallback>
}
 8003e5a:	e012      	b.n	8003e82 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e82:	bf00      	nop
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b40      	cmp	r3, #64	; 0x40
 8003e9c:	d117      	bne.n	8003ece <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003eb6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003eb8:	e067      	b.n	8003f8a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	611a      	str	r2, [r3, #16]
}
 8003ecc:	e05d      	b.n	8003f8a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ed6:	d133      	bne.n	8003f40 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b21      	cmp	r3, #33	; 0x21
 8003ee2:	d109      	bne.n	8003ef8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ef4:	611a      	str	r2, [r3, #16]
 8003ef6:	e008      	b.n	8003f0a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d004      	beq.n	8003f1c <I2C_Master_SB+0x92>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d108      	bne.n	8003f2e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d032      	beq.n	8003f8a <I2C_Master_SB+0x100>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d02d      	beq.n	8003f8a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f3c:	605a      	str	r2, [r3, #4]
}
 8003f3e:	e024      	b.n	8003f8a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10e      	bne.n	8003f66 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	11db      	asrs	r3, r3, #7
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	f003 0306 	and.w	r3, r3, #6
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	f063 030f 	orn	r3, r3, #15
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	611a      	str	r2, [r3, #16]
}
 8003f64:	e011      	b.n	8003f8a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d10d      	bne.n	8003f8a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	11db      	asrs	r3, r3, #7
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	f003 0306 	and.w	r3, r3, #6
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f063 030e 	orn	r3, r3, #14
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	611a      	str	r2, [r3, #16]
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <I2C_Master_ADD10+0x26>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d108      	bne.n	8003fce <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00c      	beq.n	8003fde <I2C_Master_ADD10+0x48>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fdc:	605a      	str	r2, [r3, #4]
  }
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b091      	sub	sp, #68	; 0x44
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ff8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b22      	cmp	r3, #34	; 0x22
 8004012:	f040 8169 	bne.w	80042e8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10f      	bne.n	800403e <I2C_Master_ADDR+0x54>
 800401e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004022:	2b40      	cmp	r3, #64	; 0x40
 8004024:	d10b      	bne.n	800403e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004026:	2300      	movs	r3, #0
 8004028:	633b      	str	r3, [r7, #48]	; 0x30
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	633b      	str	r3, [r7, #48]	; 0x30
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	633b      	str	r3, [r7, #48]	; 0x30
 800403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403c:	e160      	b.n	8004300 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004042:	2b00      	cmp	r3, #0
 8004044:	d11d      	bne.n	8004082 <I2C_Master_ADDR+0x98>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800404e:	d118      	bne.n	8004082 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004050:	2300      	movs	r3, #0
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004064:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004074:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	651a      	str	r2, [r3, #80]	; 0x50
 8004080:	e13e      	b.n	8004300 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d113      	bne.n	80040b4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408c:	2300      	movs	r3, #0
 800408e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	62bb      	str	r3, [r7, #40]	; 0x28
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	e115      	b.n	80042e0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	f040 808a 	bne.w	80041d4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80040c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040c6:	d137      	bne.n	8004138 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e6:	d113      	bne.n	8004110 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f8:	2300      	movs	r3, #0
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	e0e7      	b.n	80042e0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004110:	2300      	movs	r3, #0
 8004112:	623b      	str	r3, [r7, #32]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	623b      	str	r3, [r7, #32]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	623b      	str	r3, [r7, #32]
 8004124:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	e0d3      	b.n	80042e0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413a:	2b08      	cmp	r3, #8
 800413c:	d02e      	beq.n	800419c <I2C_Master_ADDR+0x1b2>
 800413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004140:	2b20      	cmp	r3, #32
 8004142:	d02b      	beq.n	800419c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004146:	2b12      	cmp	r3, #18
 8004148:	d102      	bne.n	8004150 <I2C_Master_ADDR+0x166>
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	2b01      	cmp	r3, #1
 800414e:	d125      	bne.n	800419c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004152:	2b04      	cmp	r3, #4
 8004154:	d00e      	beq.n	8004174 <I2C_Master_ADDR+0x18a>
 8004156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004158:	2b02      	cmp	r3, #2
 800415a:	d00b      	beq.n	8004174 <I2C_Master_ADDR+0x18a>
 800415c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415e:	2b10      	cmp	r3, #16
 8004160:	d008      	beq.n	8004174 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e007      	b.n	8004184 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004182:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004184:	2300      	movs	r3, #0
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	e0a1      	b.n	80042e0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041aa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ac:	2300      	movs	r3, #0
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	61bb      	str	r3, [r7, #24]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	e085      	b.n	80042e0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d14d      	bne.n	800427a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d016      	beq.n	8004212 <I2C_Master_ADDR+0x228>
 80041e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d013      	beq.n	8004212 <I2C_Master_ADDR+0x228>
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d010      	beq.n	8004212 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	e007      	b.n	8004222 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004220:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004230:	d117      	bne.n	8004262 <I2C_Master_ADDR+0x278>
 8004232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004234:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004238:	d00b      	beq.n	8004252 <I2C_Master_ADDR+0x268>
 800423a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423c:	2b01      	cmp	r3, #1
 800423e:	d008      	beq.n	8004252 <I2C_Master_ADDR+0x268>
 8004240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004242:	2b08      	cmp	r3, #8
 8004244:	d005      	beq.n	8004252 <I2C_Master_ADDR+0x268>
 8004246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004248:	2b10      	cmp	r3, #16
 800424a:	d002      	beq.n	8004252 <I2C_Master_ADDR+0x268>
 800424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424e:	2b20      	cmp	r3, #32
 8004250:	d107      	bne.n	8004262 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004260:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004262:	2300      	movs	r3, #0
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	e032      	b.n	80042e0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004288:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004298:	d117      	bne.n	80042ca <I2C_Master_ADDR+0x2e0>
 800429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042a0:	d00b      	beq.n	80042ba <I2C_Master_ADDR+0x2d0>
 80042a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d008      	beq.n	80042ba <I2C_Master_ADDR+0x2d0>
 80042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d005      	beq.n	80042ba <I2C_Master_ADDR+0x2d0>
 80042ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d002      	beq.n	80042ba <I2C_Master_ADDR+0x2d0>
 80042b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	d107      	bne.n	80042ca <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ca:	2300      	movs	r3, #0
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80042e6:	e00b      	b.n	8004300 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e8:	2300      	movs	r3, #0
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
}
 80042fe:	e7ff      	b.n	8004300 <I2C_Master_ADDR+0x316>
 8004300:	bf00      	nop
 8004302:	3744      	adds	r7, #68	; 0x44
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d02b      	beq.n	800437e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	781a      	ldrb	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d114      	bne.n	800437e <I2C_SlaveTransmit_TXE+0x72>
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	2b29      	cmp	r3, #41	; 0x29
 8004358:	d111      	bne.n	800437e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004368:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2221      	movs	r2, #33	; 0x21
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2228      	movs	r2, #40	; 0x28
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7fc ffcd 	bl	8001318 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d011      	beq.n	80043bc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	781a      	ldrb	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d02c      	beq.n	800443c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d114      	bne.n	800443c <I2C_SlaveReceive_RXNE+0x74>
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2b2a      	cmp	r3, #42	; 0x2a
 8004416:	d111      	bne.n	800443c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004426:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2222      	movs	r2, #34	; 0x22
 800442c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2228      	movs	r2, #40	; 0x28
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fc ffa2 	bl	8001380 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800443c:	bf00      	nop
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d012      	beq.n	800447c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004492:	2300      	movs	r3, #0
 8004494:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044a2:	2b28      	cmp	r3, #40	; 0x28
 80044a4:	d125      	bne.n	80044f2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d103      	bne.n	80044d6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	81bb      	strh	r3, [r7, #12]
 80044d4:	e002      	b.n	80044dc <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80044e4:	89ba      	ldrh	r2, [r7, #12]
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	4619      	mov	r1, r3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fc fec4 	bl	8001278 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80044f0:	e00e      	b.n	8004510 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004510:	bf00      	nop
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004526:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004536:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004538:	2300      	movs	r3, #0
 800453a:	60bb      	str	r3, [r7, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004564:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004574:	d172      	bne.n	800465c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	2b22      	cmp	r3, #34	; 0x22
 800457a:	d002      	beq.n	8004582 <I2C_Slave_STOPF+0x6a>
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	2b2a      	cmp	r3, #42	; 0x2a
 8004580:	d135      	bne.n	80045ee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	b29a      	uxth	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f043 0204 	orr.w	r2, r3, #4
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe faf7 	bl	8002bae <HAL_DMA_GetState>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d049      	beq.n	800465a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	4a69      	ldr	r2, [pc, #420]	; (8004770 <I2C_Slave_STOPF+0x258>)
 80045cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fe fac9 	bl	8002b6a <HAL_DMA_Abort_IT>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d03d      	beq.n	800465a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045e8:	4610      	mov	r0, r2
 80045ea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045ec:	e035      	b.n	800465a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	f043 0204 	orr.w	r2, r3, #4
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004620:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe fac1 	bl	8002bae <HAL_DMA_GetState>
 800462c:	4603      	mov	r3, r0
 800462e:	2b01      	cmp	r3, #1
 8004630:	d014      	beq.n	800465c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004636:	4a4e      	ldr	r2, [pc, #312]	; (8004770 <I2C_Slave_STOPF+0x258>)
 8004638:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe fa93 	bl	8002b6a <HAL_DMA_Abort_IT>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004654:	4610      	mov	r0, r2
 8004656:	4798      	blx	r3
 8004658:	e000      	b.n	800465c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800465a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d03e      	beq.n	80046e4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b04      	cmp	r3, #4
 8004672:	d112      	bne.n	800469a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691a      	ldr	r2, [r3, #16]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d112      	bne.n	80046ce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	f043 0204 	orr.w	r2, r3, #4
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f8b3 	bl	8004858 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80046f2:	e039      	b.n	8004768 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	2b2a      	cmp	r3, #42	; 0x2a
 80046f8:	d109      	bne.n	800470e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2228      	movs	r2, #40	; 0x28
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7fc fe39 	bl	8001380 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b28      	cmp	r3, #40	; 0x28
 8004718:	d111      	bne.n	800473e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a15      	ldr	r2, [pc, #84]	; (8004774 <I2C_Slave_STOPF+0x25c>)
 800471e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fc fd92 	bl	8001260 <HAL_I2C_ListenCpltCallback>
}
 800473c:	e014      	b.n	8004768 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	2b22      	cmp	r3, #34	; 0x22
 8004744:	d002      	beq.n	800474c <I2C_Slave_STOPF+0x234>
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	2b22      	cmp	r3, #34	; 0x22
 800474a:	d10d      	bne.n	8004768 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fc fe0c 	bl	8001380 <HAL_I2C_SlaveRxCpltCallback>
}
 8004768:	bf00      	nop
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	08004abd 	.word	0x08004abd
 8004774:	ffff0000 	.word	0xffff0000

08004778 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004786:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b08      	cmp	r3, #8
 8004792:	d002      	beq.n	800479a <I2C_Slave_AF+0x22>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b20      	cmp	r3, #32
 8004798:	d129      	bne.n	80047ee <I2C_Slave_AF+0x76>
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	2b28      	cmp	r3, #40	; 0x28
 800479e:	d126      	bne.n	80047ee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a2c      	ldr	r2, [pc, #176]	; (8004854 <I2C_Slave_AF+0xdc>)
 80047a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047b4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047be:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ce:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fc fd3a 	bl	8001260 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80047ec:	e02e      	b.n	800484c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
 80047f0:	2b21      	cmp	r3, #33	; 0x21
 80047f2:	d126      	bne.n	8004842 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a17      	ldr	r2, [pc, #92]	; (8004854 <I2C_Slave_AF+0xdc>)
 80047f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2221      	movs	r2, #33	; 0x21
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800481e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004828:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004838:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fc fd6c 	bl	8001318 <HAL_I2C_SlaveTxCpltCallback>
}
 8004840:	e004      	b.n	800484c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800484a:	615a      	str	r2, [r3, #20]
}
 800484c:	bf00      	nop
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	ffff0000 	.word	0xffff0000

08004858 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004866:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800486e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004870:	7bbb      	ldrb	r3, [r7, #14]
 8004872:	2b10      	cmp	r3, #16
 8004874:	d002      	beq.n	800487c <I2C_ITError+0x24>
 8004876:	7bbb      	ldrb	r3, [r7, #14]
 8004878:	2b40      	cmp	r3, #64	; 0x40
 800487a:	d10a      	bne.n	8004892 <I2C_ITError+0x3a>
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b22      	cmp	r3, #34	; 0x22
 8004880:	d107      	bne.n	8004892 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004890:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004898:	2b28      	cmp	r3, #40	; 0x28
 800489a:	d107      	bne.n	80048ac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2228      	movs	r2, #40	; 0x28
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048aa:	e015      	b.n	80048d8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ba:	d00a      	beq.n	80048d2 <I2C_ITError+0x7a>
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	2b60      	cmp	r3, #96	; 0x60
 80048c0:	d007      	beq.n	80048d2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e6:	d162      	bne.n	80049ae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b01      	cmp	r3, #1
 8004904:	d020      	beq.n	8004948 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490a:	4a6a      	ldr	r2, [pc, #424]	; (8004ab4 <I2C_ITError+0x25c>)
 800490c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004912:	4618      	mov	r0, r3
 8004914:	f7fe f929 	bl	8002b6a <HAL_DMA_Abort_IT>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 8089 	beq.w	8004a32 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004942:	4610      	mov	r0, r2
 8004944:	4798      	blx	r3
 8004946:	e074      	b.n	8004a32 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	4a59      	ldr	r2, [pc, #356]	; (8004ab4 <I2C_ITError+0x25c>)
 800494e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	4618      	mov	r0, r3
 8004956:	f7fe f908 	bl	8002b6a <HAL_DMA_Abort_IT>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d068      	beq.n	8004a32 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b40      	cmp	r3, #64	; 0x40
 800496c:	d10b      	bne.n	8004986 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0201 	bic.w	r2, r2, #1
 8004994:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049a8:	4610      	mov	r0, r2
 80049aa:	4798      	blx	r3
 80049ac:	e041      	b.n	8004a32 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b60      	cmp	r3, #96	; 0x60
 80049b8:	d125      	bne.n	8004a06 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	2b40      	cmp	r3, #64	; 0x40
 80049d4:	d10b      	bne.n	80049ee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0201 	bic.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fe fee2 	bl	80037c8 <HAL_I2C_AbortCpltCallback>
 8004a04:	e015      	b.n	8004a32 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b40      	cmp	r3, #64	; 0x40
 8004a12:	d10b      	bne.n	8004a2c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691a      	ldr	r2, [r3, #16]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7fc fcdd 	bl	80013ec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10e      	bne.n	8004a60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d109      	bne.n	8004a60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d104      	bne.n	8004a60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a6e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a76:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d113      	bne.n	8004aac <I2C_ITError+0x254>
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	2b28      	cmp	r3, #40	; 0x28
 8004a88:	d110      	bne.n	8004aac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <I2C_ITError+0x260>)
 8004a8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fc fbda 	bl	8001260 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	08004abd 	.word	0x08004abd
 8004ab8:	ffff0000 	.word	0xffff0000

08004abc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ad6:	4b4b      	ldr	r3, [pc, #300]	; (8004c04 <I2C_DMAAbort+0x148>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	08db      	lsrs	r3, r3, #3
 8004adc:	4a4a      	ldr	r2, [pc, #296]	; (8004c08 <I2C_DMAAbort+0x14c>)
 8004ade:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae2:	0a1a      	lsrs	r2, r3, #8
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	00da      	lsls	r2, r3, #3
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f043 0220 	orr.w	r2, r3, #32
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004b02:	e00a      	b.n	8004b1a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b18:	d0ea      	beq.n	8004af0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b26:	2200      	movs	r2, #0
 8004b28:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	2200      	movs	r2, #0
 8004b38:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b48:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0201 	bic.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b60      	cmp	r3, #96	; 0x60
 8004b8a:	d10e      	bne.n	8004baa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ba2:	6978      	ldr	r0, [r7, #20]
 8004ba4:	f7fe fe10 	bl	80037c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ba8:	e027      	b.n	8004bfa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004baa:	7cfb      	ldrb	r3, [r7, #19]
 8004bac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bb0:	2b28      	cmp	r3, #40	; 0x28
 8004bb2:	d117      	bne.n	8004be4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bd2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2228      	movs	r2, #40	; 0x28
 8004bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004be2:	e007      	b.n	8004bf4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004bf4:	6978      	ldr	r0, [r7, #20]
 8004bf6:	f7fc fbf9 	bl	80013ec <HAL_I2C_ErrorCallback>
}
 8004bfa:	bf00      	nop
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000024 	.word	0x20000024
 8004c08:	14f8b589 	.word	0x14f8b589

08004c0c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c18:	4b13      	ldr	r3, [pc, #76]	; (8004c68 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	08db      	lsrs	r3, r3, #3
 8004c1e:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	0a1a      	lsrs	r2, r3, #8
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d107      	bne.n	8004c4a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f043 0220 	orr.w	r2, r3, #32
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e008      	b.n	8004c5c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c58:	d0e9      	beq.n	8004c2e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	20000024 	.word	0x20000024
 8004c6c:	14f8b589 	.word	0x14f8b589

08004c70 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004c80:	d103      	bne.n	8004c8a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c88:	e007      	b.n	8004c9a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004c92:	d102      	bne.n	8004c9a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2208      	movs	r2, #8
 8004c98:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ca8:	b08f      	sub	sp, #60	; 0x3c
 8004caa:	af0a      	add	r7, sp, #40	; 0x28
 8004cac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e10f      	b.n	8004ed8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f007 fd8c 	bl	800c7f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2203      	movs	r2, #3
 8004cdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d102      	bne.n	8004cf2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f004 f8df 	bl	8008eba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	603b      	str	r3, [r7, #0]
 8004d02:	687e      	ldr	r6, [r7, #4]
 8004d04:	466d      	mov	r5, sp
 8004d06:	f106 0410 	add.w	r4, r6, #16
 8004d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d16:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d1a:	1d33      	adds	r3, r6, #4
 8004d1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d1e:	6838      	ldr	r0, [r7, #0]
 8004d20:	f003 ffb6 	bl	8008c90 <USB_CoreInit>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e0d0      	b.n	8004ed8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f004 f8cd 	bl	8008edc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d42:	2300      	movs	r3, #0
 8004d44:	73fb      	strb	r3, [r7, #15]
 8004d46:	e04a      	b.n	8004dde <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d48:	7bfa      	ldrb	r2, [r7, #15]
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	333d      	adds	r3, #61	; 0x3d
 8004d58:	2201      	movs	r2, #1
 8004d5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d5c:	7bfa      	ldrb	r2, [r7, #15]
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	4613      	mov	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	440b      	add	r3, r1
 8004d6a:	333c      	adds	r3, #60	; 0x3c
 8004d6c:	7bfa      	ldrb	r2, [r7, #15]
 8004d6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d70:	7bfa      	ldrb	r2, [r7, #15]
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	b298      	uxth	r0, r3
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	3344      	adds	r3, #68	; 0x44
 8004d84:	4602      	mov	r2, r0
 8004d86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d88:	7bfa      	ldrb	r2, [r7, #15]
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	3340      	adds	r3, #64	; 0x40
 8004d98:	2200      	movs	r2, #0
 8004d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d9c:	7bfa      	ldrb	r2, [r7, #15]
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	3348      	adds	r3, #72	; 0x48
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004db0:	7bfa      	ldrb	r2, [r7, #15]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	4413      	add	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	334c      	adds	r3, #76	; 0x4c
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004dc4:	7bfa      	ldrb	r2, [r7, #15]
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	3354      	adds	r3, #84	; 0x54
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	73fb      	strb	r3, [r7, #15]
 8004dde:	7bfa      	ldrb	r2, [r7, #15]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d3af      	bcc.n	8004d48 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004de8:	2300      	movs	r3, #0
 8004dea:	73fb      	strb	r3, [r7, #15]
 8004dec:	e044      	b.n	8004e78 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004dee:	7bfa      	ldrb	r2, [r7, #15]
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	4413      	add	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004e00:	2200      	movs	r2, #0
 8004e02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e04:	7bfa      	ldrb	r2, [r7, #15]
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	440b      	add	r3, r1
 8004e12:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004e16:	7bfa      	ldrb	r2, [r7, #15]
 8004e18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e1a:	7bfa      	ldrb	r2, [r7, #15]
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e30:	7bfa      	ldrb	r2, [r7, #15]
 8004e32:	6879      	ldr	r1, [r7, #4]
 8004e34:	4613      	mov	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e46:	7bfa      	ldrb	r2, [r7, #15]
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e5c:	7bfa      	ldrb	r2, [r7, #15]
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	3301      	adds	r3, #1
 8004e76:	73fb      	strb	r3, [r7, #15]
 8004e78:	7bfa      	ldrb	r2, [r7, #15]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d3b5      	bcc.n	8004dee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	687e      	ldr	r6, [r7, #4]
 8004e8a:	466d      	mov	r5, sp
 8004e8c:	f106 0410 	add.w	r4, r6, #16
 8004e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ea0:	1d33      	adds	r3, r6, #4
 8004ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ea4:	6838      	ldr	r0, [r7, #0]
 8004ea6:	f004 f865 	bl	8008f74 <USB_DevInit>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e00d      	b.n	8004ed8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f005 f9b4 	bl	800a23e <USB_DevDisconnect>

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ee0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_PCD_Start+0x1c>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e020      	b.n	8004f3e <HAL_PCD_Start+0x5e>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d109      	bne.n	8004f20 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d005      	beq.n	8004f20 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f003 ffb7 	bl	8008e98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f005 f964 	bl	800a1fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f46:	b590      	push	{r4, r7, lr}
 8004f48:	b08d      	sub	sp, #52	; 0x34
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f005 fa22 	bl	800a3a6 <USB_GetMode>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f040 848a 	bne.w	800587e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f005 f986 	bl	800a280 <USB_ReadInterrupts>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8480 	beq.w	800587c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	0a1b      	lsrs	r3, r3, #8
 8004f86:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f005 f973 	bl	800a280 <USB_ReadInterrupts>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d107      	bne.n	8004fb4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f002 0202 	and.w	r2, r2, #2
 8004fb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f005 f961 	bl	800a280 <USB_ReadInterrupts>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f003 0310 	and.w	r3, r3, #16
 8004fc4:	2b10      	cmp	r3, #16
 8004fc6:	d161      	bne.n	800508c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0210 	bic.w	r2, r2, #16
 8004fd6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	f003 020f 	and.w	r2, r3, #15
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	0c5b      	lsrs	r3, r3, #17
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	2b02      	cmp	r3, #2
 8005002:	d124      	bne.n	800504e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800500a:	4013      	ands	r3, r2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d035      	beq.n	800507c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	091b      	lsrs	r3, r3, #4
 8005018:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800501a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800501e:	b29b      	uxth	r3, r3
 8005020:	461a      	mov	r2, r3
 8005022:	6a38      	ldr	r0, [r7, #32]
 8005024:	f004 ff98 	bl	8009f58 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	091b      	lsrs	r3, r3, #4
 8005030:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005034:	441a      	add	r2, r3
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	6a1a      	ldr	r2, [r3, #32]
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	091b      	lsrs	r3, r3, #4
 8005042:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005046:	441a      	add	r2, r3
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	621a      	str	r2, [r3, #32]
 800504c:	e016      	b.n	800507c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	0c5b      	lsrs	r3, r3, #17
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	2b06      	cmp	r3, #6
 8005058:	d110      	bne.n	800507c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005060:	2208      	movs	r2, #8
 8005062:	4619      	mov	r1, r3
 8005064:	6a38      	ldr	r0, [r7, #32]
 8005066:	f004 ff77 	bl	8009f58 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	6a1a      	ldr	r2, [r3, #32]
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	091b      	lsrs	r3, r3, #4
 8005072:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005076:	441a      	add	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699a      	ldr	r2, [r3, #24]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0210 	orr.w	r2, r2, #16
 800508a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f005 f8f5 	bl	800a280 <USB_ReadInterrupts>
 8005096:	4603      	mov	r3, r0
 8005098:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800509c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050a0:	f040 80a7 	bne.w	80051f2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f005 f8fa 	bl	800a2a6 <USB_ReadDevAllOutEpInterrupt>
 80050b2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80050b4:	e099      	b.n	80051ea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 808e 	beq.w	80051de <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	4611      	mov	r1, r2
 80050cc:	4618      	mov	r0, r3
 80050ce:	f005 f91e 	bl	800a30e <USB_ReadDevOutEPInterrupt>
 80050d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00c      	beq.n	80050f8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ea:	461a      	mov	r2, r3
 80050ec:	2301      	movs	r3, #1
 80050ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80050f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fec2 	bl	8005e7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00c      	beq.n	800511c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510e:	461a      	mov	r2, r3
 8005110:	2308      	movs	r3, #8
 8005112:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 ff98 	bl	800604c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b00      	cmp	r3, #0
 8005124:	d008      	beq.n	8005138 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005132:	461a      	mov	r2, r3
 8005134:	2310      	movs	r3, #16
 8005136:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d030      	beq.n	80051a4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	2b80      	cmp	r3, #128	; 0x80
 800514c:	d109      	bne.n	8005162 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800515c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005160:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	4413      	add	r3, r2
 8005174:	3304      	adds	r3, #4
 8005176:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	78db      	ldrb	r3, [r3, #3]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d108      	bne.n	8005192 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2200      	movs	r2, #0
 8005184:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	b2db      	uxtb	r3, r3
 800518a:	4619      	mov	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f007 fc2b 	bl	800c9e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519e:	461a      	mov	r2, r3
 80051a0:	2302      	movs	r3, #2
 80051a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d008      	beq.n	80051c0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ba:	461a      	mov	r2, r3
 80051bc:	2320      	movs	r3, #32
 80051be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d009      	beq.n	80051de <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d6:	461a      	mov	r2, r3
 80051d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051dc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	3301      	adds	r3, #1
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	085b      	lsrs	r3, r3, #1
 80051e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f47f af62 	bne.w	80050b6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f005 f842 	bl	800a280 <USB_ReadInterrupts>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005202:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005206:	f040 80db 	bne.w	80053c0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f005 f863 	bl	800a2da <USB_ReadDevAllInEpInterrupt>
 8005214:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800521a:	e0cd      	b.n	80053b8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 80c2 	beq.w	80053ac <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	4611      	mov	r1, r2
 8005232:	4618      	mov	r0, r3
 8005234:	f005 f889 	bl	800a34a <USB_ReadDevInEPInterrupt>
 8005238:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d057      	beq.n	80052f4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	2201      	movs	r2, #1
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	43db      	mvns	r3, r3
 800525e:	69f9      	ldr	r1, [r7, #28]
 8005260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005264:	4013      	ands	r3, r2
 8005266:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	461a      	mov	r2, r3
 8005276:	2301      	movs	r3, #1
 8005278:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d132      	bne.n	80052e8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005286:	4613      	mov	r3, r2
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	4413      	add	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	440b      	add	r3, r1
 8005290:	334c      	adds	r3, #76	; 0x4c
 8005292:	6819      	ldr	r1, [r3, #0]
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005298:	4613      	mov	r3, r2
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4403      	add	r3, r0
 80052a2:	3348      	adds	r3, #72	; 0x48
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4419      	add	r1, r3
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ac:	4613      	mov	r3, r2
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4403      	add	r3, r0
 80052b6:	334c      	adds	r3, #76	; 0x4c
 80052b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d113      	bne.n	80052e8 <HAL_PCD_IRQHandler+0x3a2>
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c4:	4613      	mov	r3, r2
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	3354      	adds	r3, #84	; 0x54
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d108      	bne.n	80052e8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052e0:	461a      	mov	r2, r3
 80052e2:	2101      	movs	r1, #1
 80052e4:	f005 f890 	bl	800a408 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	4619      	mov	r1, r3
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f007 faff 	bl	800c8f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d008      	beq.n	8005310 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530a:	461a      	mov	r2, r3
 800530c:	2308      	movs	r3, #8
 800530e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f003 0310 	and.w	r3, r3, #16
 8005316:	2b00      	cmp	r3, #0
 8005318:	d008      	beq.n	800532c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005326:	461a      	mov	r2, r3
 8005328:	2310      	movs	r3, #16
 800532a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d008      	beq.n	8005348 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005342:	461a      	mov	r2, r3
 8005344:	2340      	movs	r3, #64	; 0x40
 8005346:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d023      	beq.n	800539a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005352:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005354:	6a38      	ldr	r0, [r7, #32]
 8005356:	f003 ff71 	bl	800923c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800535a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535c:	4613      	mov	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	3338      	adds	r3, #56	; 0x38
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	4413      	add	r3, r2
 800536a:	3304      	adds	r3, #4
 800536c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	78db      	ldrb	r3, [r3, #3]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d108      	bne.n	8005388 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2200      	movs	r2, #0
 800537a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	b2db      	uxtb	r3, r3
 8005380:	4619      	mov	r1, r3
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f007 fb42 	bl	800ca0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	461a      	mov	r2, r3
 8005396:	2302      	movs	r3, #2
 8005398:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80053a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fcdb 	bl	8005d62 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	3301      	adds	r3, #1
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80053b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80053b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f47f af2e 	bne.w	800521c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f004 ff5b 	bl	800a280 <USB_ReadInterrupts>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053d4:	d122      	bne.n	800541c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053e4:	f023 0301 	bic.w	r3, r3, #1
 80053e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d108      	bne.n	8005406 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80053fc:	2100      	movs	r1, #0
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fec2 	bl	8006188 <HAL_PCDEx_LPM_Callback>
 8005404:	e002      	b.n	800540c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f007 fae0 	bl	800c9cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800541a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f004 ff2d 	bl	800a280 <USB_ReadInterrupts>
 8005426:	4603      	mov	r3, r0
 8005428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800542c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005430:	d112      	bne.n	8005458 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b01      	cmp	r3, #1
 8005440:	d102      	bne.n	8005448 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f007 fa9c 	bl	800c980 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695a      	ldr	r2, [r3, #20]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005456:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f004 ff0f 	bl	800a280 <USB_ReadInterrupts>
 8005462:	4603      	mov	r3, r0
 8005464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546c:	f040 80b7 	bne.w	80055de <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	69fa      	ldr	r2, [r7, #28]
 800547a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800547e:	f023 0301 	bic.w	r3, r3, #1
 8005482:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2110      	movs	r1, #16
 800548a:	4618      	mov	r0, r3
 800548c:	f003 fed6 	bl	800923c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005490:	2300      	movs	r3, #0
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005494:	e046      	b.n	8005524 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a2:	461a      	mov	r2, r3
 80054a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ba:	0151      	lsls	r1, r2, #5
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	440a      	add	r2, r1
 80054c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d6:	461a      	mov	r2, r3
 80054d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ee:	0151      	lsls	r1, r2, #5
 80054f0:	69fa      	ldr	r2, [r7, #28]
 80054f2:	440a      	add	r2, r1
 80054f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800550e:	0151      	lsls	r1, r2, #5
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	440a      	add	r2, r1
 8005514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005518:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800551c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	3301      	adds	r3, #1
 8005522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800552a:	429a      	cmp	r2, r3
 800552c:	d3b3      	bcc.n	8005496 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800553c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005540:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005546:	2b00      	cmp	r3, #0
 8005548:	d016      	beq.n	8005578 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005554:	69fa      	ldr	r2, [r7, #28]
 8005556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800555a:	f043 030b 	orr.w	r3, r3, #11
 800555e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556a:	69fa      	ldr	r2, [r7, #28]
 800556c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005570:	f043 030b 	orr.w	r3, r3, #11
 8005574:	6453      	str	r3, [r2, #68]	; 0x44
 8005576:	e015      	b.n	80055a4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005586:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800558a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800558e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800559e:	f043 030b 	orr.w	r3, r3, #11
 80055a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69fa      	ldr	r2, [r7, #28]
 80055ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80055b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80055c8:	461a      	mov	r2, r3
 80055ca:	f004 ff1d 	bl	800a408 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695a      	ldr	r2, [r3, #20]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80055dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f004 fe4c 	bl	800a280 <USB_ReadInterrupts>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f2:	d124      	bne.n	800563e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f004 fee2 	bl	800a3c2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f003 fe97 	bl	8009336 <USB_GetDevSpeed>
 8005608:	4603      	mov	r3, r0
 800560a:	461a      	mov	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681c      	ldr	r4, [r3, #0]
 8005614:	f001 f9e8 	bl	80069e8 <HAL_RCC_GetHCLKFreq>
 8005618:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800561e:	b2db      	uxtb	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	4620      	mov	r0, r4
 8005624:	f003 fb96 	bl	8008d54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f007 f98a 	bl	800c942 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800563c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f004 fe1c 	bl	800a280 <USB_ReadInterrupts>
 8005648:	4603      	mov	r3, r0
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b08      	cmp	r3, #8
 8005650:	d10a      	bne.n	8005668 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f007 f967 	bl	800c926 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f002 0208 	and.w	r2, r2, #8
 8005666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f004 fe07 	bl	800a280 <USB_ReadInterrupts>
 8005672:	4603      	mov	r3, r0
 8005674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005678:	2b80      	cmp	r3, #128	; 0x80
 800567a:	d122      	bne.n	80056c2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005688:	2301      	movs	r3, #1
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
 800568c:	e014      	b.n	80056b8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005692:	4613      	mov	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d105      	bne.n	80056b2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fb27 	bl	8005d00 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	3301      	adds	r3, #1
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056be:	429a      	cmp	r2, r3
 80056c0:	d3e5      	bcc.n	800568e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f004 fdda 	bl	800a280 <USB_ReadInterrupts>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056d6:	d13b      	bne.n	8005750 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056d8:	2301      	movs	r3, #1
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
 80056dc:	e02b      	b.n	8005736 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f2:	4613      	mov	r3, r2
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	3340      	adds	r3, #64	; 0x40
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d115      	bne.n	8005730 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005704:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005706:	2b00      	cmp	r3, #0
 8005708:	da12      	bge.n	8005730 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570e:	4613      	mov	r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	333f      	adds	r3, #63	; 0x3f
 800571a:	2201      	movs	r2, #1
 800571c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	b2db      	uxtb	r3, r3
 8005722:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005726:	b2db      	uxtb	r3, r3
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fae8 	bl	8005d00 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	3301      	adds	r3, #1
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573c:	429a      	cmp	r2, r3
 800573e:	d3ce      	bcc.n	80056de <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695a      	ldr	r2, [r3, #20]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800574e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4618      	mov	r0, r3
 8005756:	f004 fd93 	bl	800a280 <USB_ReadInterrupts>
 800575a:	4603      	mov	r3, r0
 800575c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005760:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005764:	d155      	bne.n	8005812 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005766:	2301      	movs	r3, #1
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
 800576a:	e045      	b.n	80057f8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005780:	4613      	mov	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d12e      	bne.n	80057f2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005794:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005796:	2b00      	cmp	r3, #0
 8005798:	da2b      	bge.n	80057f2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80057a6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d121      	bne.n	80057f2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b2:	4613      	mov	r3, r2
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80057c0:	2201      	movs	r2, #1
 80057c2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10a      	bne.n	80057f2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057ee:	6053      	str	r3, [r2, #4]
            break;
 80057f0:	e007      	b.n	8005802 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	3301      	adds	r3, #1
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057fe:	429a      	cmp	r2, r3
 8005800:	d3b4      	bcc.n	800576c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695a      	ldr	r2, [r3, #20]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005810:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f004 fd32 	bl	800a280 <USB_ReadInterrupts>
 800581c:	4603      	mov	r3, r0
 800581e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005826:	d10a      	bne.n	800583e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f007 f901 	bl	800ca30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695a      	ldr	r2, [r3, #20]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800583c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f004 fd1c 	bl	800a280 <USB_ReadInterrupts>
 8005848:	4603      	mov	r3, r0
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b04      	cmp	r3, #4
 8005850:	d115      	bne.n	800587e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f007 f8f1 	bl	800ca4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6859      	ldr	r1, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	e000      	b.n	800587e <HAL_PCD_IRQHandler+0x938>
      return;
 800587c:	bf00      	nop
    }
  }
}
 800587e:	3734      	adds	r7, #52	; 0x34
 8005880:	46bd      	mov	sp, r7
 8005882:	bd90      	pop	{r4, r7, pc}

08005884 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005896:	2b01      	cmp	r3, #1
 8005898:	d101      	bne.n	800589e <HAL_PCD_SetAddress+0x1a>
 800589a:	2302      	movs	r3, #2
 800589c:	e013      	b.n	80058c6 <HAL_PCD_SetAddress+0x42>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	78fa      	ldrb	r2, [r7, #3]
 80058aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	78fa      	ldrb	r2, [r7, #3]
 80058b4:	4611      	mov	r1, r2
 80058b6:	4618      	mov	r0, r3
 80058b8:	f004 fc7a 	bl	800a1b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	4608      	mov	r0, r1
 80058d8:	4611      	mov	r1, r2
 80058da:	461a      	mov	r2, r3
 80058dc:	4603      	mov	r3, r0
 80058de:	70fb      	strb	r3, [r7, #3]
 80058e0:	460b      	mov	r3, r1
 80058e2:	803b      	strh	r3, [r7, #0]
 80058e4:	4613      	mov	r3, r2
 80058e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	da0f      	bge.n	8005914 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	f003 020f 	and.w	r2, r3, #15
 80058fa:	4613      	mov	r3, r2
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	3338      	adds	r3, #56	; 0x38
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	4413      	add	r3, r2
 8005908:	3304      	adds	r3, #4
 800590a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	705a      	strb	r2, [r3, #1]
 8005912:	e00f      	b.n	8005934 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005914:	78fb      	ldrb	r3, [r7, #3]
 8005916:	f003 020f 	and.w	r2, r3, #15
 800591a:	4613      	mov	r3, r2
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	4413      	add	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	4413      	add	r3, r2
 800592a:	3304      	adds	r3, #4
 800592c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	b2da      	uxtb	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005940:	883a      	ldrh	r2, [r7, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	78ba      	ldrb	r2, [r7, #2]
 800594a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	785b      	ldrb	r3, [r3, #1]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d004      	beq.n	800595e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	b29a      	uxth	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800595e:	78bb      	ldrb	r3, [r7, #2]
 8005960:	2b02      	cmp	r3, #2
 8005962:	d102      	bne.n	800596a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_PCD_EP_Open+0xaa>
 8005974:	2302      	movs	r3, #2
 8005976:	e00e      	b.n	8005996 <HAL_PCD_EP_Open+0xc8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68f9      	ldr	r1, [r7, #12]
 8005986:	4618      	mov	r0, r3
 8005988:	f003 fcfa 	bl	8009380 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005994:	7afb      	ldrb	r3, [r7, #11]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	460b      	mov	r3, r1
 80059a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	da0f      	bge.n	80059d2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	4613      	mov	r3, r2
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	4413      	add	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	3338      	adds	r3, #56	; 0x38
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	4413      	add	r3, r2
 80059c6:	3304      	adds	r3, #4
 80059c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	705a      	strb	r2, [r3, #1]
 80059d0:	e00f      	b.n	80059f2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059d2:	78fb      	ldrb	r3, [r7, #3]
 80059d4:	f003 020f 	and.w	r2, r3, #15
 80059d8:	4613      	mov	r3, r2
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	4413      	add	r3, r2
 80059e8:	3304      	adds	r3, #4
 80059ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80059f2:	78fb      	ldrb	r3, [r7, #3]
 80059f4:	f003 030f 	and.w	r3, r3, #15
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_PCD_EP_Close+0x6e>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e00e      	b.n	8005a2a <HAL_PCD_EP_Close+0x8c>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68f9      	ldr	r1, [r7, #12]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f003 fd38 	bl	8009490 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b086      	sub	sp, #24
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	60f8      	str	r0, [r7, #12]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a42:	7afb      	ldrb	r3, [r7, #11]
 8005a44:	f003 020f 	and.w	r2, r3, #15
 8005a48:	4613      	mov	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	4413      	add	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	3304      	adds	r3, #4
 8005a5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2200      	movs	r2, #0
 8005a72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a74:	7afb      	ldrb	r3, [r7, #11]
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d102      	bne.n	8005a8e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a8e:	7afb      	ldrb	r3, [r7, #11]
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d109      	bne.n	8005aac <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6818      	ldr	r0, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	6979      	ldr	r1, [r7, #20]
 8005aa6:	f004 f817 	bl	8009ad8 <USB_EP0StartXfer>
 8005aaa:	e008      	b.n	8005abe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6818      	ldr	r0, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6979      	ldr	r1, [r7, #20]
 8005aba:	f003 fdc5 	bl	8009648 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	f003 020f 	and.w	r2, r3, #15
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	4613      	mov	r3, r2
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005aea:	681b      	ldr	r3, [r3, #0]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	607a      	str	r2, [r7, #4]
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	460b      	mov	r3, r1
 8005b06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b08:	7afb      	ldrb	r3, [r7, #11]
 8005b0a:	f003 020f 	and.w	r2, r3, #15
 8005b0e:	4613      	mov	r3, r2
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	3338      	adds	r3, #56	; 0x38
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2201      	movs	r2, #1
 8005b36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b38:	7afb      	ldrb	r3, [r7, #11]
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d102      	bne.n	8005b52 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b52:	7afb      	ldrb	r3, [r7, #11]
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d109      	bne.n	8005b70 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6818      	ldr	r0, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	6979      	ldr	r1, [r7, #20]
 8005b6a:	f003 ffb5 	bl	8009ad8 <USB_EP0StartXfer>
 8005b6e:	e008      	b.n	8005b82 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6818      	ldr	r0, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	6979      	ldr	r1, [r7, #20]
 8005b7e:	f003 fd63 	bl	8009648 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	f003 020f 	and.w	r2, r3, #15
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d901      	bls.n	8005baa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e050      	b.n	8005c4c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005baa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	da0f      	bge.n	8005bd2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bb2:	78fb      	ldrb	r3, [r7, #3]
 8005bb4:	f003 020f 	and.w	r2, r3, #15
 8005bb8:	4613      	mov	r3, r2
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	3338      	adds	r3, #56	; 0x38
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	705a      	strb	r2, [r3, #1]
 8005bd0:	e00d      	b.n	8005bee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005bd2:	78fa      	ldrb	r2, [r7, #3]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	4413      	add	r3, r2
 8005be4:	3304      	adds	r3, #4
 8005be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_PCD_EP_SetStall+0x82>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e01e      	b.n	8005c4c <HAL_PCD_EP_SetStall+0xc0>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68f9      	ldr	r1, [r7, #12]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f004 f9f3 	bl	800a008 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c22:	78fb      	ldrb	r3, [r7, #3]
 8005c24:	f003 030f 	and.w	r3, r3, #15
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6818      	ldr	r0, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	b2d9      	uxtb	r1, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f004 fbe3 	bl	800a408 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	f003 020f 	and.w	r2, r3, #15
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d901      	bls.n	8005c72 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e042      	b.n	8005cf8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	da0f      	bge.n	8005c9a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c7a:	78fb      	ldrb	r3, [r7, #3]
 8005c7c:	f003 020f 	and.w	r2, r3, #15
 8005c80:	4613      	mov	r3, r2
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	3338      	adds	r3, #56	; 0x38
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	3304      	adds	r3, #4
 8005c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	705a      	strb	r2, [r3, #1]
 8005c98:	e00f      	b.n	8005cba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	f003 020f 	and.w	r2, r3, #15
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	4413      	add	r3, r2
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d101      	bne.n	8005cda <HAL_PCD_EP_ClrStall+0x86>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e00e      	b.n	8005cf8 <HAL_PCD_EP_ClrStall+0xa4>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68f9      	ldr	r1, [r7, #12]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f004 f9fb 	bl	800a0e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	da0c      	bge.n	8005d2e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	f003 020f 	and.w	r2, r3, #15
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	3338      	adds	r3, #56	; 0x38
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	4413      	add	r3, r2
 8005d28:	3304      	adds	r3, #4
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	e00c      	b.n	8005d48 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d2e:	78fb      	ldrb	r3, [r7, #3]
 8005d30:	f003 020f 	and.w	r2, r3, #15
 8005d34:	4613      	mov	r3, r2
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	4413      	add	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	4413      	add	r3, r2
 8005d44:	3304      	adds	r3, #4
 8005d46:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68f9      	ldr	r1, [r7, #12]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f004 f81a 	bl	8009d88 <USB_EPStopXfer>
 8005d54:	4603      	mov	r3, r0
 8005d56:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005d58:	7afb      	ldrb	r3, [r7, #11]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b08a      	sub	sp, #40	; 0x28
 8005d66:	af02      	add	r7, sp, #8
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	3338      	adds	r3, #56	; 0x38
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	4413      	add	r3, r2
 8005d86:	3304      	adds	r3, #4
 8005d88:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a1a      	ldr	r2, [r3, #32]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d901      	bls.n	8005d9a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e06c      	b.n	8005e74 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d902      	bls.n	8005db6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	3303      	adds	r3, #3
 8005dba:	089b      	lsrs	r3, r3, #2
 8005dbc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005dbe:	e02b      	b.n	8005e18 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	699a      	ldr	r2, [r3, #24]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d902      	bls.n	8005ddc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	3303      	adds	r3, #3
 8005de0:	089b      	lsrs	r3, r3, #2
 8005de2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6919      	ldr	r1, [r3, #16]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	4603      	mov	r3, r0
 8005dfa:	6978      	ldr	r0, [r7, #20]
 8005dfc:	f004 f86e 	bl	8009edc <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	441a      	add	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a1a      	ldr	r2, [r3, #32]
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	441a      	add	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d809      	bhi.n	8005e42 <PCD_WriteEmptyTxFifo+0xe0>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a1a      	ldr	r2, [r3, #32]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d203      	bcs.n	8005e42 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1be      	bne.n	8005dc0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d811      	bhi.n	8005e72 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	f003 030f 	and.w	r3, r3, #15
 8005e54:	2201      	movs	r2, #1
 8005e56:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	43db      	mvns	r3, r3
 8005e68:	6939      	ldr	r1, [r7, #16]
 8005e6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e6e:	4013      	ands	r3, r2
 8005e70:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3720      	adds	r7, #32
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	333c      	adds	r3, #60	; 0x3c
 8005e94:	3304      	adds	r3, #4
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d17b      	bne.n	8005faa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d015      	beq.n	8005ee8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	4a61      	ldr	r2, [pc, #388]	; (8006044 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	f240 80b9 	bls.w	8006038 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 80b3 	beq.w	8006038 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ee4:	6093      	str	r3, [r2, #8]
 8005ee6:	e0a7      	b.n	8006038 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f003 0320 	and.w	r3, r3, #32
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d009      	beq.n	8005f06 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efe:	461a      	mov	r2, r3
 8005f00:	2320      	movs	r3, #32
 8005f02:	6093      	str	r3, [r2, #8]
 8005f04:	e098      	b.n	8006038 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f040 8093 	bne.w	8006038 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	4a4b      	ldr	r2, [pc, #300]	; (8006044 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d90f      	bls.n	8005f3a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f30:	461a      	mov	r2, r3
 8005f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f36:	6093      	str	r3, [r2, #8]
 8005f38:	e07e      	b.n	8006038 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	69da      	ldr	r2, [r3, #28]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	0159      	lsls	r1, r3, #5
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	440b      	add	r3, r1
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f66:	1ad2      	subs	r2, r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d114      	bne.n	8005f9c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d109      	bne.n	8005f8e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6818      	ldr	r0, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f84:	461a      	mov	r2, r3
 8005f86:	2101      	movs	r1, #1
 8005f88:	f004 fa3e 	bl	800a408 <USB_EP0_OutStart>
 8005f8c:	e006      	b.n	8005f9c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	691a      	ldr	r2, [r3, #16]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	441a      	add	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f006 fc8a 	bl	800c8bc <HAL_PCD_DataOutStageCallback>
 8005fa8:	e046      	b.n	8006038 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	4a26      	ldr	r2, [pc, #152]	; (8006048 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d124      	bne.n	8005ffc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc8:	461a      	mov	r2, r3
 8005fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fce:	6093      	str	r3, [r2, #8]
 8005fd0:	e032      	b.n	8006038 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f003 0320 	and.w	r3, r3, #32
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d008      	beq.n	8005fee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe8:	461a      	mov	r2, r3
 8005fea:	2320      	movs	r3, #32
 8005fec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f006 fc61 	bl	800c8bc <HAL_PCD_DataOutStageCallback>
 8005ffa:	e01d      	b.n	8006038 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d114      	bne.n	800602c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	4613      	mov	r3, r2
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	440b      	add	r3, r1
 8006010:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d108      	bne.n	800602c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6818      	ldr	r0, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006024:	461a      	mov	r2, r3
 8006026:	2100      	movs	r1, #0
 8006028:	f004 f9ee 	bl	800a408 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f006 fc42 	bl	800c8bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3720      	adds	r7, #32
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	4f54300a 	.word	0x4f54300a
 8006048:	4f54310a 	.word	0x4f54310a

0800604c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	333c      	adds	r3, #60	; 0x3c
 8006064:	3304      	adds	r3, #4
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4a15      	ldr	r2, [pc, #84]	; (80060d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d90e      	bls.n	80060a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006088:	2b00      	cmp	r3, #0
 800608a:	d009      	beq.n	80060a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006098:	461a      	mov	r2, r3
 800609a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800609e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f006 fbf9 	bl	800c898 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4a0a      	ldr	r2, [pc, #40]	; (80060d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d90c      	bls.n	80060c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d108      	bne.n	80060c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80060c0:	461a      	mov	r2, r3
 80060c2:	2101      	movs	r1, #1
 80060c4:	f004 f9a0 	bl	800a408 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	4f54300a 	.word	0x4f54300a

080060d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	70fb      	strb	r3, [r7, #3]
 80060e4:	4613      	mov	r3, r2
 80060e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d107      	bne.n	8006106 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80060f6:	883b      	ldrh	r3, [r7, #0]
 80060f8:	0419      	lsls	r1, r3, #16
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	430a      	orrs	r2, r1
 8006102:	629a      	str	r2, [r3, #40]	; 0x28
 8006104:	e028      	b.n	8006158 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610c:	0c1b      	lsrs	r3, r3, #16
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	4413      	add	r3, r2
 8006112:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006114:	2300      	movs	r3, #0
 8006116:	73fb      	strb	r3, [r7, #15]
 8006118:	e00d      	b.n	8006136 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	3340      	adds	r3, #64	; 0x40
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	0c1b      	lsrs	r3, r3, #16
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	4413      	add	r3, r2
 800612e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	3301      	adds	r3, #1
 8006134:	73fb      	strb	r3, [r7, #15]
 8006136:	7bfa      	ldrb	r2, [r7, #15]
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	3b01      	subs	r3, #1
 800613c:	429a      	cmp	r2, r3
 800613e:	d3ec      	bcc.n	800611a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006140:	883b      	ldrh	r3, [r7, #0]
 8006142:	0418      	lsls	r0, r3, #16
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6819      	ldr	r1, [r3, #0]
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	3b01      	subs	r3, #1
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	4302      	orrs	r2, r0
 8006150:	3340      	adds	r3, #64	; 0x40
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	440b      	add	r3, r1
 8006156:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	460b      	mov	r3, r1
 8006170:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	887a      	ldrh	r2, [r7, #2]
 8006178:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e267      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d075      	beq.n	80062aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061be:	4b88      	ldr	r3, [pc, #544]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 030c 	and.w	r3, r3, #12
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d00c      	beq.n	80061e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061ca:	4b85      	ldr	r3, [pc, #532]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061d2:	2b08      	cmp	r3, #8
 80061d4:	d112      	bne.n	80061fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061d6:	4b82      	ldr	r3, [pc, #520]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061e2:	d10b      	bne.n	80061fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061e4:	4b7e      	ldr	r3, [pc, #504]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d05b      	beq.n	80062a8 <HAL_RCC_OscConfig+0x108>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d157      	bne.n	80062a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e242      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006204:	d106      	bne.n	8006214 <HAL_RCC_OscConfig+0x74>
 8006206:	4b76      	ldr	r3, [pc, #472]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a75      	ldr	r2, [pc, #468]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 800620c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	e01d      	b.n	8006250 <HAL_RCC_OscConfig+0xb0>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800621c:	d10c      	bne.n	8006238 <HAL_RCC_OscConfig+0x98>
 800621e:	4b70      	ldr	r3, [pc, #448]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a6f      	ldr	r2, [pc, #444]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	4b6d      	ldr	r3, [pc, #436]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a6c      	ldr	r2, [pc, #432]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	e00b      	b.n	8006250 <HAL_RCC_OscConfig+0xb0>
 8006238:	4b69      	ldr	r3, [pc, #420]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a68      	ldr	r2, [pc, #416]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 800623e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	4b66      	ldr	r3, [pc, #408]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a65      	ldr	r2, [pc, #404]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 800624a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800624e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d013      	beq.n	8006280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006258:	f7fc f8d4 	bl	8002404 <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006260:	f7fc f8d0 	bl	8002404 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b64      	cmp	r3, #100	; 0x64
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e207      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006272:	4b5b      	ldr	r3, [pc, #364]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0f0      	beq.n	8006260 <HAL_RCC_OscConfig+0xc0>
 800627e:	e014      	b.n	80062aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006280:	f7fc f8c0 	bl	8002404 <HAL_GetTick>
 8006284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006288:	f7fc f8bc 	bl	8002404 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b64      	cmp	r3, #100	; 0x64
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e1f3      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800629a:	4b51      	ldr	r3, [pc, #324]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1f0      	bne.n	8006288 <HAL_RCC_OscConfig+0xe8>
 80062a6:	e000      	b.n	80062aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d063      	beq.n	800637e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062b6:	4b4a      	ldr	r3, [pc, #296]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 030c 	and.w	r3, r3, #12
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00b      	beq.n	80062da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062c2:	4b47      	ldr	r3, [pc, #284]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062ca:	2b08      	cmp	r3, #8
 80062cc:	d11c      	bne.n	8006308 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ce:	4b44      	ldr	r3, [pc, #272]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d116      	bne.n	8006308 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062da:	4b41      	ldr	r3, [pc, #260]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <HAL_RCC_OscConfig+0x152>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d001      	beq.n	80062f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e1c7      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062f2:	4b3b      	ldr	r3, [pc, #236]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	4937      	ldr	r1, [pc, #220]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006302:	4313      	orrs	r3, r2
 8006304:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006306:	e03a      	b.n	800637e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d020      	beq.n	8006352 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006310:	4b34      	ldr	r3, [pc, #208]	; (80063e4 <HAL_RCC_OscConfig+0x244>)
 8006312:	2201      	movs	r2, #1
 8006314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006316:	f7fc f875 	bl	8002404 <HAL_GetTick>
 800631a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800631c:	e008      	b.n	8006330 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800631e:	f7fc f871 	bl	8002404 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e1a8      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006330:	4b2b      	ldr	r3, [pc, #172]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0f0      	beq.n	800631e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800633c:	4b28      	ldr	r3, [pc, #160]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	4925      	ldr	r1, [pc, #148]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 800634c:	4313      	orrs	r3, r2
 800634e:	600b      	str	r3, [r1, #0]
 8006350:	e015      	b.n	800637e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006352:	4b24      	ldr	r3, [pc, #144]	; (80063e4 <HAL_RCC_OscConfig+0x244>)
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006358:	f7fc f854 	bl	8002404 <HAL_GetTick>
 800635c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800635e:	e008      	b.n	8006372 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006360:	f7fc f850 	bl	8002404 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e187      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006372:	4b1b      	ldr	r3, [pc, #108]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f0      	bne.n	8006360 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d036      	beq.n	80063f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d016      	beq.n	80063c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006392:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <HAL_RCC_OscConfig+0x248>)
 8006394:	2201      	movs	r2, #1
 8006396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006398:	f7fc f834 	bl	8002404 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063a0:	f7fc f830 	bl	8002404 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e167      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063b2:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80063b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0f0      	beq.n	80063a0 <HAL_RCC_OscConfig+0x200>
 80063be:	e01b      	b.n	80063f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063c0:	4b09      	ldr	r3, [pc, #36]	; (80063e8 <HAL_RCC_OscConfig+0x248>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063c6:	f7fc f81d 	bl	8002404 <HAL_GetTick>
 80063ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063cc:	e00e      	b.n	80063ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063ce:	f7fc f819 	bl	8002404 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d907      	bls.n	80063ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e150      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
 80063e0:	40023800 	.word	0x40023800
 80063e4:	42470000 	.word	0x42470000
 80063e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063ec:	4b88      	ldr	r3, [pc, #544]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80063ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1ea      	bne.n	80063ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 8097 	beq.w	8006534 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006406:	2300      	movs	r3, #0
 8006408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800640a:	4b81      	ldr	r3, [pc, #516]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10f      	bne.n	8006436 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006416:	2300      	movs	r3, #0
 8006418:	60bb      	str	r3, [r7, #8]
 800641a:	4b7d      	ldr	r3, [pc, #500]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	4a7c      	ldr	r2, [pc, #496]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 8006420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006424:	6413      	str	r3, [r2, #64]	; 0x40
 8006426:	4b7a      	ldr	r3, [pc, #488]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642e:	60bb      	str	r3, [r7, #8]
 8006430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006432:	2301      	movs	r3, #1
 8006434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006436:	4b77      	ldr	r3, [pc, #476]	; (8006614 <HAL_RCC_OscConfig+0x474>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643e:	2b00      	cmp	r3, #0
 8006440:	d118      	bne.n	8006474 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006442:	4b74      	ldr	r3, [pc, #464]	; (8006614 <HAL_RCC_OscConfig+0x474>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a73      	ldr	r2, [pc, #460]	; (8006614 <HAL_RCC_OscConfig+0x474>)
 8006448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800644c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800644e:	f7fb ffd9 	bl	8002404 <HAL_GetTick>
 8006452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006454:	e008      	b.n	8006468 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006456:	f7fb ffd5 	bl	8002404 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d901      	bls.n	8006468 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e10c      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006468:	4b6a      	ldr	r3, [pc, #424]	; (8006614 <HAL_RCC_OscConfig+0x474>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0f0      	beq.n	8006456 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d106      	bne.n	800648a <HAL_RCC_OscConfig+0x2ea>
 800647c:	4b64      	ldr	r3, [pc, #400]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 800647e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006480:	4a63      	ldr	r2, [pc, #396]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 8006482:	f043 0301 	orr.w	r3, r3, #1
 8006486:	6713      	str	r3, [r2, #112]	; 0x70
 8006488:	e01c      	b.n	80064c4 <HAL_RCC_OscConfig+0x324>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	2b05      	cmp	r3, #5
 8006490:	d10c      	bne.n	80064ac <HAL_RCC_OscConfig+0x30c>
 8006492:	4b5f      	ldr	r3, [pc, #380]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 8006494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006496:	4a5e      	ldr	r2, [pc, #376]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 8006498:	f043 0304 	orr.w	r3, r3, #4
 800649c:	6713      	str	r3, [r2, #112]	; 0x70
 800649e:	4b5c      	ldr	r3, [pc, #368]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80064a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a2:	4a5b      	ldr	r2, [pc, #364]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80064a4:	f043 0301 	orr.w	r3, r3, #1
 80064a8:	6713      	str	r3, [r2, #112]	; 0x70
 80064aa:	e00b      	b.n	80064c4 <HAL_RCC_OscConfig+0x324>
 80064ac:	4b58      	ldr	r3, [pc, #352]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80064ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b0:	4a57      	ldr	r2, [pc, #348]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80064b2:	f023 0301 	bic.w	r3, r3, #1
 80064b6:	6713      	str	r3, [r2, #112]	; 0x70
 80064b8:	4b55      	ldr	r3, [pc, #340]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80064ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064bc:	4a54      	ldr	r2, [pc, #336]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80064be:	f023 0304 	bic.w	r3, r3, #4
 80064c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d015      	beq.n	80064f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064cc:	f7fb ff9a 	bl	8002404 <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064d2:	e00a      	b.n	80064ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064d4:	f7fb ff96 	bl	8002404 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e0cb      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ea:	4b49      	ldr	r3, [pc, #292]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0ee      	beq.n	80064d4 <HAL_RCC_OscConfig+0x334>
 80064f6:	e014      	b.n	8006522 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064f8:	f7fb ff84 	bl	8002404 <HAL_GetTick>
 80064fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064fe:	e00a      	b.n	8006516 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006500:	f7fb ff80 	bl	8002404 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	f241 3288 	movw	r2, #5000	; 0x1388
 800650e:	4293      	cmp	r3, r2
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e0b5      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006516:	4b3e      	ldr	r3, [pc, #248]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1ee      	bne.n	8006500 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006522:	7dfb      	ldrb	r3, [r7, #23]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d105      	bne.n	8006534 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006528:	4b39      	ldr	r3, [pc, #228]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 800652a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652c:	4a38      	ldr	r2, [pc, #224]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 800652e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006532:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 80a1 	beq.w	8006680 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800653e:	4b34      	ldr	r3, [pc, #208]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 030c 	and.w	r3, r3, #12
 8006546:	2b08      	cmp	r3, #8
 8006548:	d05c      	beq.n	8006604 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d141      	bne.n	80065d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006552:	4b31      	ldr	r3, [pc, #196]	; (8006618 <HAL_RCC_OscConfig+0x478>)
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006558:	f7fb ff54 	bl	8002404 <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006560:	f7fb ff50 	bl	8002404 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e087      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006572:	4b27      	ldr	r3, [pc, #156]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	69da      	ldr	r2, [r3, #28]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	431a      	orrs	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	019b      	lsls	r3, r3, #6
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	085b      	lsrs	r3, r3, #1
 8006596:	3b01      	subs	r3, #1
 8006598:	041b      	lsls	r3, r3, #16
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	061b      	lsls	r3, r3, #24
 80065a2:	491b      	ldr	r1, [pc, #108]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065a8:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <HAL_RCC_OscConfig+0x478>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ae:	f7fb ff29 	bl	8002404 <HAL_GetTick>
 80065b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065b4:	e008      	b.n	80065c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065b6:	f7fb ff25 	bl	8002404 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d901      	bls.n	80065c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e05c      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065c8:	4b11      	ldr	r3, [pc, #68]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0f0      	beq.n	80065b6 <HAL_RCC_OscConfig+0x416>
 80065d4:	e054      	b.n	8006680 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065d6:	4b10      	ldr	r3, [pc, #64]	; (8006618 <HAL_RCC_OscConfig+0x478>)
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065dc:	f7fb ff12 	bl	8002404 <HAL_GetTick>
 80065e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e4:	f7fb ff0e 	bl	8002404 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e045      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065f6:	4b06      	ldr	r3, [pc, #24]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f0      	bne.n	80065e4 <HAL_RCC_OscConfig+0x444>
 8006602:	e03d      	b.n	8006680 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d107      	bne.n	800661c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e038      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
 8006610:	40023800 	.word	0x40023800
 8006614:	40007000 	.word	0x40007000
 8006618:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800661c:	4b1b      	ldr	r3, [pc, #108]	; (800668c <HAL_RCC_OscConfig+0x4ec>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d028      	beq.n	800667c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006634:	429a      	cmp	r2, r3
 8006636:	d121      	bne.n	800667c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006642:	429a      	cmp	r2, r3
 8006644:	d11a      	bne.n	800667c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800664c:	4013      	ands	r3, r2
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006652:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006654:	4293      	cmp	r3, r2
 8006656:	d111      	bne.n	800667c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	3b01      	subs	r3, #1
 8006666:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006668:	429a      	cmp	r2, r3
 800666a:	d107      	bne.n	800667c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006676:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006678:	429a      	cmp	r2, r3
 800667a:	d001      	beq.n	8006680 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e000      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3718      	adds	r7, #24
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	40023800 	.word	0x40023800

08006690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e0cc      	b.n	800683e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066a4:	4b68      	ldr	r3, [pc, #416]	; (8006848 <HAL_RCC_ClockConfig+0x1b8>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d90c      	bls.n	80066cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b2:	4b65      	ldr	r3, [pc, #404]	; (8006848 <HAL_RCC_ClockConfig+0x1b8>)
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ba:	4b63      	ldr	r3, [pc, #396]	; (8006848 <HAL_RCC_ClockConfig+0x1b8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0307 	and.w	r3, r3, #7
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d001      	beq.n	80066cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e0b8      	b.n	800683e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d020      	beq.n	800671a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066e4:	4b59      	ldr	r3, [pc, #356]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	4a58      	ldr	r2, [pc, #352]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 80066ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0308 	and.w	r3, r3, #8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066fc:	4b53      	ldr	r3, [pc, #332]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	4a52      	ldr	r2, [pc, #328]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 8006702:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006708:	4b50      	ldr	r3, [pc, #320]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	494d      	ldr	r1, [pc, #308]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 8006716:	4313      	orrs	r3, r2
 8006718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d044      	beq.n	80067b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d107      	bne.n	800673e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800672e:	4b47      	ldr	r3, [pc, #284]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d119      	bne.n	800676e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e07f      	b.n	800683e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	2b02      	cmp	r3, #2
 8006744:	d003      	beq.n	800674e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800674a:	2b03      	cmp	r3, #3
 800674c:	d107      	bne.n	800675e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800674e:	4b3f      	ldr	r3, [pc, #252]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d109      	bne.n	800676e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e06f      	b.n	800683e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800675e:	4b3b      	ldr	r3, [pc, #236]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e067      	b.n	800683e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800676e:	4b37      	ldr	r3, [pc, #220]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f023 0203 	bic.w	r2, r3, #3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	4934      	ldr	r1, [pc, #208]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 800677c:	4313      	orrs	r3, r2
 800677e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006780:	f7fb fe40 	bl	8002404 <HAL_GetTick>
 8006784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006786:	e00a      	b.n	800679e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006788:	f7fb fe3c 	bl	8002404 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	f241 3288 	movw	r2, #5000	; 0x1388
 8006796:	4293      	cmp	r3, r2
 8006798:	d901      	bls.n	800679e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e04f      	b.n	800683e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800679e:	4b2b      	ldr	r3, [pc, #172]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f003 020c 	and.w	r2, r3, #12
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d1eb      	bne.n	8006788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067b0:	4b25      	ldr	r3, [pc, #148]	; (8006848 <HAL_RCC_ClockConfig+0x1b8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d20c      	bcs.n	80067d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067be:	4b22      	ldr	r3, [pc, #136]	; (8006848 <HAL_RCC_ClockConfig+0x1b8>)
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	b2d2      	uxtb	r2, r2
 80067c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c6:	4b20      	ldr	r3, [pc, #128]	; (8006848 <HAL_RCC_ClockConfig+0x1b8>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d001      	beq.n	80067d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e032      	b.n	800683e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d008      	beq.n	80067f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067e4:	4b19      	ldr	r3, [pc, #100]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	4916      	ldr	r1, [pc, #88]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d009      	beq.n	8006816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006802:	4b12      	ldr	r3, [pc, #72]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	490e      	ldr	r1, [pc, #56]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 8006812:	4313      	orrs	r3, r2
 8006814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006816:	f000 f821 	bl	800685c <HAL_RCC_GetSysClockFreq>
 800681a:	4602      	mov	r2, r0
 800681c:	4b0b      	ldr	r3, [pc, #44]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	091b      	lsrs	r3, r3, #4
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	490a      	ldr	r1, [pc, #40]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 8006828:	5ccb      	ldrb	r3, [r1, r3]
 800682a:	fa22 f303 	lsr.w	r3, r2, r3
 800682e:	4a09      	ldr	r2, [pc, #36]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006832:	4b09      	ldr	r3, [pc, #36]	; (8006858 <HAL_RCC_ClockConfig+0x1c8>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4618      	mov	r0, r3
 8006838:	f7fb fda0 	bl	800237c <HAL_InitTick>

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	40023c00 	.word	0x40023c00
 800684c:	40023800 	.word	0x40023800
 8006850:	0800f7e0 	.word	0x0800f7e0
 8006854:	20000024 	.word	0x20000024
 8006858:	20000028 	.word	0x20000028

0800685c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800685c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006860:	b090      	sub	sp, #64	; 0x40
 8006862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006864:	2300      	movs	r3, #0
 8006866:	637b      	str	r3, [r7, #52]	; 0x34
 8006868:	2300      	movs	r3, #0
 800686a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800686c:	2300      	movs	r3, #0
 800686e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006874:	4b59      	ldr	r3, [pc, #356]	; (80069dc <HAL_RCC_GetSysClockFreq+0x180>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 030c 	and.w	r3, r3, #12
 800687c:	2b08      	cmp	r3, #8
 800687e:	d00d      	beq.n	800689c <HAL_RCC_GetSysClockFreq+0x40>
 8006880:	2b08      	cmp	r3, #8
 8006882:	f200 80a1 	bhi.w	80069c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <HAL_RCC_GetSysClockFreq+0x34>
 800688a:	2b04      	cmp	r3, #4
 800688c:	d003      	beq.n	8006896 <HAL_RCC_GetSysClockFreq+0x3a>
 800688e:	e09b      	b.n	80069c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006890:	4b53      	ldr	r3, [pc, #332]	; (80069e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006892:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006894:	e09b      	b.n	80069ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006896:	4b53      	ldr	r3, [pc, #332]	; (80069e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006898:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800689a:	e098      	b.n	80069ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800689c:	4b4f      	ldr	r3, [pc, #316]	; (80069dc <HAL_RCC_GetSysClockFreq+0x180>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068a6:	4b4d      	ldr	r3, [pc, #308]	; (80069dc <HAL_RCC_GetSysClockFreq+0x180>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d028      	beq.n	8006904 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068b2:	4b4a      	ldr	r3, [pc, #296]	; (80069dc <HAL_RCC_GetSysClockFreq+0x180>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	099b      	lsrs	r3, r3, #6
 80068b8:	2200      	movs	r2, #0
 80068ba:	623b      	str	r3, [r7, #32]
 80068bc:	627a      	str	r2, [r7, #36]	; 0x24
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80068c4:	2100      	movs	r1, #0
 80068c6:	4b47      	ldr	r3, [pc, #284]	; (80069e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80068c8:	fb03 f201 	mul.w	r2, r3, r1
 80068cc:	2300      	movs	r3, #0
 80068ce:	fb00 f303 	mul.w	r3, r0, r3
 80068d2:	4413      	add	r3, r2
 80068d4:	4a43      	ldr	r2, [pc, #268]	; (80069e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80068d6:	fba0 1202 	umull	r1, r2, r0, r2
 80068da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068dc:	460a      	mov	r2, r1
 80068de:	62ba      	str	r2, [r7, #40]	; 0x28
 80068e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068e2:	4413      	add	r3, r2
 80068e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e8:	2200      	movs	r2, #0
 80068ea:	61bb      	str	r3, [r7, #24]
 80068ec:	61fa      	str	r2, [r7, #28]
 80068ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80068f6:	f7fa f95f 	bl	8000bb8 <__aeabi_uldivmod>
 80068fa:	4602      	mov	r2, r0
 80068fc:	460b      	mov	r3, r1
 80068fe:	4613      	mov	r3, r2
 8006900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006902:	e053      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006904:	4b35      	ldr	r3, [pc, #212]	; (80069dc <HAL_RCC_GetSysClockFreq+0x180>)
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	099b      	lsrs	r3, r3, #6
 800690a:	2200      	movs	r2, #0
 800690c:	613b      	str	r3, [r7, #16]
 800690e:	617a      	str	r2, [r7, #20]
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006916:	f04f 0b00 	mov.w	fp, #0
 800691a:	4652      	mov	r2, sl
 800691c:	465b      	mov	r3, fp
 800691e:	f04f 0000 	mov.w	r0, #0
 8006922:	f04f 0100 	mov.w	r1, #0
 8006926:	0159      	lsls	r1, r3, #5
 8006928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800692c:	0150      	lsls	r0, r2, #5
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	ebb2 080a 	subs.w	r8, r2, sl
 8006936:	eb63 090b 	sbc.w	r9, r3, fp
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006946:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800694a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800694e:	ebb2 0408 	subs.w	r4, r2, r8
 8006952:	eb63 0509 	sbc.w	r5, r3, r9
 8006956:	f04f 0200 	mov.w	r2, #0
 800695a:	f04f 0300 	mov.w	r3, #0
 800695e:	00eb      	lsls	r3, r5, #3
 8006960:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006964:	00e2      	lsls	r2, r4, #3
 8006966:	4614      	mov	r4, r2
 8006968:	461d      	mov	r5, r3
 800696a:	eb14 030a 	adds.w	r3, r4, sl
 800696e:	603b      	str	r3, [r7, #0]
 8006970:	eb45 030b 	adc.w	r3, r5, fp
 8006974:	607b      	str	r3, [r7, #4]
 8006976:	f04f 0200 	mov.w	r2, #0
 800697a:	f04f 0300 	mov.w	r3, #0
 800697e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006982:	4629      	mov	r1, r5
 8006984:	028b      	lsls	r3, r1, #10
 8006986:	4621      	mov	r1, r4
 8006988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800698c:	4621      	mov	r1, r4
 800698e:	028a      	lsls	r2, r1, #10
 8006990:	4610      	mov	r0, r2
 8006992:	4619      	mov	r1, r3
 8006994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006996:	2200      	movs	r2, #0
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	60fa      	str	r2, [r7, #12]
 800699c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069a0:	f7fa f90a 	bl	8000bb8 <__aeabi_uldivmod>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4613      	mov	r3, r2
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069ac:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <HAL_RCC_GetSysClockFreq+0x180>)
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	0c1b      	lsrs	r3, r3, #16
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	3301      	adds	r3, #1
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80069bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069c6:	e002      	b.n	80069ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069c8:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80069ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3740      	adds	r7, #64	; 0x40
 80069d4:	46bd      	mov	sp, r7
 80069d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069da:	bf00      	nop
 80069dc:	40023800 	.word	0x40023800
 80069e0:	00f42400 	.word	0x00f42400
 80069e4:	017d7840 	.word	0x017d7840

080069e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069ec:	4b03      	ldr	r3, [pc, #12]	; (80069fc <HAL_RCC_GetHCLKFreq+0x14>)
 80069ee:	681b      	ldr	r3, [r3, #0]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	20000024 	.word	0x20000024

08006a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a04:	f7ff fff0 	bl	80069e8 <HAL_RCC_GetHCLKFreq>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	0a9b      	lsrs	r3, r3, #10
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	4903      	ldr	r1, [pc, #12]	; (8006a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a16:	5ccb      	ldrb	r3, [r1, r3]
 8006a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	40023800 	.word	0x40023800
 8006a24:	0800f7f0 	.word	0x0800f7f0

08006a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a2c:	f7ff ffdc 	bl	80069e8 <HAL_RCC_GetHCLKFreq>
 8006a30:	4602      	mov	r2, r0
 8006a32:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	0b5b      	lsrs	r3, r3, #13
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	4903      	ldr	r1, [pc, #12]	; (8006a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a3e:	5ccb      	ldrb	r3, [r1, r3]
 8006a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	0800f7f0 	.word	0x0800f7f0

08006a50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e07b      	b.n	8006b5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d108      	bne.n	8006a7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a72:	d009      	beq.n	8006a88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	61da      	str	r2, [r3, #28]
 8006a7a:	e005      	b.n	8006a88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d106      	bne.n	8006aa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fb f878 	bl	8001b98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006abe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ada:	431a      	orrs	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	431a      	orrs	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006af8:	431a      	orrs	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b02:	431a      	orrs	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0c:	ea42 0103 	orr.w	r1, r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	0c1b      	lsrs	r3, r3, #16
 8006b26:	f003 0104 	and.w	r1, r3, #4
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	f003 0210 	and.w	r2, r3, #16
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69da      	ldr	r2, [r3, #28]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b082      	sub	sp, #8
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e041      	b.n	8006bf8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d106      	bne.n	8006b8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7fb f86d 	bl	8001c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2202      	movs	r2, #2
 8006b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	f000 ff1d 	bl	80079e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d001      	beq.n	8006c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e044      	b.n	8006ca2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0201 	orr.w	r2, r2, #1
 8006c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a1e      	ldr	r2, [pc, #120]	; (8006cb0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d018      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x6c>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c42:	d013      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x6c>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1a      	ldr	r2, [pc, #104]	; (8006cb4 <HAL_TIM_Base_Start_IT+0xb4>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00e      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x6c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a19      	ldr	r2, [pc, #100]	; (8006cb8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d009      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x6c>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a17      	ldr	r2, [pc, #92]	; (8006cbc <HAL_TIM_Base_Start_IT+0xbc>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d004      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x6c>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a16      	ldr	r2, [pc, #88]	; (8006cc0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d111      	bne.n	8006c90 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b06      	cmp	r3, #6
 8006c7c:	d010      	beq.n	8006ca0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f042 0201 	orr.w	r2, r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8e:	e007      	b.n	8006ca0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0201 	orr.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	40010000 	.word	0x40010000
 8006cb4:	40000400 	.word	0x40000400
 8006cb8:	40000800 	.word	0x40000800
 8006cbc:	40000c00 	.word	0x40000c00
 8006cc0:	40014000 	.word	0x40014000

08006cc4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0201 	bic.w	r2, r2, #1
 8006cda:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6a1a      	ldr	r2, [r3, #32]
 8006ce2:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10f      	bne.n	8006d0c <HAL_TIM_Base_Stop_IT+0x48>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6a1a      	ldr	r2, [r3, #32]
 8006cf2:	f240 4344 	movw	r3, #1092	; 0x444
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d107      	bne.n	8006d0c <HAL_TIM_Base_Stop_IT+0x48>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0201 	bic.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b082      	sub	sp, #8
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e041      	b.n	8006db8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d106      	bne.n	8006d4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f839 	bl	8006dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2202      	movs	r2, #2
 8006d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4610      	mov	r0, r2
 8006d62:	f000 fe3d 	bl	80079e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d109      	bne.n	8006df8 <HAL_TIM_PWM_Start+0x24>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	bf14      	ite	ne
 8006df0:	2301      	movne	r3, #1
 8006df2:	2300      	moveq	r3, #0
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	e022      	b.n	8006e3e <HAL_TIM_PWM_Start+0x6a>
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d109      	bne.n	8006e12 <HAL_TIM_PWM_Start+0x3e>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	bf14      	ite	ne
 8006e0a:	2301      	movne	r3, #1
 8006e0c:	2300      	moveq	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	e015      	b.n	8006e3e <HAL_TIM_PWM_Start+0x6a>
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d109      	bne.n	8006e2c <HAL_TIM_PWM_Start+0x58>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	bf14      	ite	ne
 8006e24:	2301      	movne	r3, #1
 8006e26:	2300      	moveq	r3, #0
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	e008      	b.n	8006e3e <HAL_TIM_PWM_Start+0x6a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	bf14      	ite	ne
 8006e38:	2301      	movne	r3, #1
 8006e3a:	2300      	moveq	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e068      	b.n	8006f18 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d104      	bne.n	8006e56 <HAL_TIM_PWM_Start+0x82>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e54:	e013      	b.n	8006e7e <HAL_TIM_PWM_Start+0xaa>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d104      	bne.n	8006e66 <HAL_TIM_PWM_Start+0x92>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e64:	e00b      	b.n	8006e7e <HAL_TIM_PWM_Start+0xaa>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d104      	bne.n	8006e76 <HAL_TIM_PWM_Start+0xa2>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e74:	e003      	b.n	8006e7e <HAL_TIM_PWM_Start+0xaa>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2201      	movs	r2, #1
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f001 f9e5 	bl	8008256 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a23      	ldr	r2, [pc, #140]	; (8006f20 <HAL_TIM_PWM_Start+0x14c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d107      	bne.n	8006ea6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ea4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a1d      	ldr	r2, [pc, #116]	; (8006f20 <HAL_TIM_PWM_Start+0x14c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d018      	beq.n	8006ee2 <HAL_TIM_PWM_Start+0x10e>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb8:	d013      	beq.n	8006ee2 <HAL_TIM_PWM_Start+0x10e>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a19      	ldr	r2, [pc, #100]	; (8006f24 <HAL_TIM_PWM_Start+0x150>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d00e      	beq.n	8006ee2 <HAL_TIM_PWM_Start+0x10e>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a17      	ldr	r2, [pc, #92]	; (8006f28 <HAL_TIM_PWM_Start+0x154>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d009      	beq.n	8006ee2 <HAL_TIM_PWM_Start+0x10e>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a16      	ldr	r2, [pc, #88]	; (8006f2c <HAL_TIM_PWM_Start+0x158>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d004      	beq.n	8006ee2 <HAL_TIM_PWM_Start+0x10e>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a14      	ldr	r2, [pc, #80]	; (8006f30 <HAL_TIM_PWM_Start+0x15c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d111      	bne.n	8006f06 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f003 0307 	and.w	r3, r3, #7
 8006eec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2b06      	cmp	r3, #6
 8006ef2:	d010      	beq.n	8006f16 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 0201 	orr.w	r2, r2, #1
 8006f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f04:	e007      	b.n	8006f16 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f042 0201 	orr.w	r2, r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	40010000 	.word	0x40010000
 8006f24:	40000400 	.word	0x40000400
 8006f28:	40000800 	.word	0x40000800
 8006f2c:	40000c00 	.word	0x40000c00
 8006f30:	40014000 	.word	0x40014000

08006f34 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2200      	movs	r2, #0
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f001 f985 	bl	8008256 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a29      	ldr	r2, [pc, #164]	; (8006ff8 <HAL_TIM_PWM_Stop+0xc4>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d117      	bne.n	8006f86 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6a1a      	ldr	r2, [r3, #32]
 8006f5c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f60:	4013      	ands	r3, r2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10f      	bne.n	8006f86 <HAL_TIM_PWM_Stop+0x52>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6a1a      	ldr	r2, [r3, #32]
 8006f6c:	f240 4344 	movw	r3, #1092	; 0x444
 8006f70:	4013      	ands	r3, r2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d107      	bne.n	8006f86 <HAL_TIM_PWM_Stop+0x52>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6a1a      	ldr	r2, [r3, #32]
 8006f8c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f90:	4013      	ands	r3, r2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10f      	bne.n	8006fb6 <HAL_TIM_PWM_Stop+0x82>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6a1a      	ldr	r2, [r3, #32]
 8006f9c:	f240 4344 	movw	r3, #1092	; 0x444
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d107      	bne.n	8006fb6 <HAL_TIM_PWM_Stop+0x82>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0201 	bic.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d104      	bne.n	8006fc6 <HAL_TIM_PWM_Stop+0x92>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fc4:	e013      	b.n	8006fee <HAL_TIM_PWM_Stop+0xba>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d104      	bne.n	8006fd6 <HAL_TIM_PWM_Stop+0xa2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fd4:	e00b      	b.n	8006fee <HAL_TIM_PWM_Stop+0xba>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d104      	bne.n	8006fe6 <HAL_TIM_PWM_Stop+0xb2>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fe4:	e003      	b.n	8006fee <HAL_TIM_PWM_Stop+0xba>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	40010000 	.word	0x40010000

08006ffc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e041      	b.n	8007092 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d106      	bne.n	8007028 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7fa fe9e 	bl	8001d64 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	3304      	adds	r3, #4
 8007038:	4619      	mov	r1, r3
 800703a:	4610      	mov	r0, r2
 800703c:	f000 fcd0 	bl	80079e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
	...

0800709c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d104      	bne.n	80070ba <HAL_TIM_IC_Start_IT+0x1e>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	e013      	b.n	80070e2 <HAL_TIM_IC_Start_IT+0x46>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b04      	cmp	r3, #4
 80070be:	d104      	bne.n	80070ca <HAL_TIM_IC_Start_IT+0x2e>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	e00b      	b.n	80070e2 <HAL_TIM_IC_Start_IT+0x46>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d104      	bne.n	80070da <HAL_TIM_IC_Start_IT+0x3e>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	e003      	b.n	80070e2 <HAL_TIM_IC_Start_IT+0x46>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d104      	bne.n	80070f4 <HAL_TIM_IC_Start_IT+0x58>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	e013      	b.n	800711c <HAL_TIM_IC_Start_IT+0x80>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2b04      	cmp	r3, #4
 80070f8:	d104      	bne.n	8007104 <HAL_TIM_IC_Start_IT+0x68>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007100:	b2db      	uxtb	r3, r3
 8007102:	e00b      	b.n	800711c <HAL_TIM_IC_Start_IT+0x80>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b08      	cmp	r3, #8
 8007108:	d104      	bne.n	8007114 <HAL_TIM_IC_Start_IT+0x78>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007110:	b2db      	uxtb	r3, r3
 8007112:	e003      	b.n	800711c <HAL_TIM_IC_Start_IT+0x80>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800711a:	b2db      	uxtb	r3, r3
 800711c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d102      	bne.n	800712a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007124:	7b7b      	ldrb	r3, [r7, #13]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d001      	beq.n	800712e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e0c2      	b.n	80072b4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d104      	bne.n	800713e <HAL_TIM_IC_Start_IT+0xa2>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800713c:	e013      	b.n	8007166 <HAL_TIM_IC_Start_IT+0xca>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b04      	cmp	r3, #4
 8007142:	d104      	bne.n	800714e <HAL_TIM_IC_Start_IT+0xb2>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800714c:	e00b      	b.n	8007166 <HAL_TIM_IC_Start_IT+0xca>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b08      	cmp	r3, #8
 8007152:	d104      	bne.n	800715e <HAL_TIM_IC_Start_IT+0xc2>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800715c:	e003      	b.n	8007166 <HAL_TIM_IC_Start_IT+0xca>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2202      	movs	r2, #2
 8007162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d104      	bne.n	8007176 <HAL_TIM_IC_Start_IT+0xda>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007174:	e013      	b.n	800719e <HAL_TIM_IC_Start_IT+0x102>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b04      	cmp	r3, #4
 800717a:	d104      	bne.n	8007186 <HAL_TIM_IC_Start_IT+0xea>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007184:	e00b      	b.n	800719e <HAL_TIM_IC_Start_IT+0x102>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b08      	cmp	r3, #8
 800718a:	d104      	bne.n	8007196 <HAL_TIM_IC_Start_IT+0xfa>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007194:	e003      	b.n	800719e <HAL_TIM_IC_Start_IT+0x102>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2202      	movs	r2, #2
 800719a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b0c      	cmp	r3, #12
 80071a2:	d841      	bhi.n	8007228 <HAL_TIM_IC_Start_IT+0x18c>
 80071a4:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <HAL_TIM_IC_Start_IT+0x110>)
 80071a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071aa:	bf00      	nop
 80071ac:	080071e1 	.word	0x080071e1
 80071b0:	08007229 	.word	0x08007229
 80071b4:	08007229 	.word	0x08007229
 80071b8:	08007229 	.word	0x08007229
 80071bc:	080071f3 	.word	0x080071f3
 80071c0:	08007229 	.word	0x08007229
 80071c4:	08007229 	.word	0x08007229
 80071c8:	08007229 	.word	0x08007229
 80071cc:	08007205 	.word	0x08007205
 80071d0:	08007229 	.word	0x08007229
 80071d4:	08007229 	.word	0x08007229
 80071d8:	08007229 	.word	0x08007229
 80071dc:	08007217 	.word	0x08007217
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0202 	orr.w	r2, r2, #2
 80071ee:	60da      	str	r2, [r3, #12]
      break;
 80071f0:	e01d      	b.n	800722e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68da      	ldr	r2, [r3, #12]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0204 	orr.w	r2, r2, #4
 8007200:	60da      	str	r2, [r3, #12]
      break;
 8007202:	e014      	b.n	800722e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0208 	orr.w	r2, r2, #8
 8007212:	60da      	str	r2, [r3, #12]
      break;
 8007214:	e00b      	b.n	800722e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f042 0210 	orr.w	r2, r2, #16
 8007224:	60da      	str	r2, [r3, #12]
      break;
 8007226:	e002      	b.n	800722e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	73fb      	strb	r3, [r7, #15]
      break;
 800722c:	bf00      	nop
  }

  if (status == HAL_OK)
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d13e      	bne.n	80072b2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2201      	movs	r2, #1
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	4618      	mov	r0, r3
 800723e:	f001 f80a 	bl	8008256 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a1d      	ldr	r2, [pc, #116]	; (80072bc <HAL_TIM_IC_Start_IT+0x220>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d018      	beq.n	800727e <HAL_TIM_IC_Start_IT+0x1e2>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007254:	d013      	beq.n	800727e <HAL_TIM_IC_Start_IT+0x1e2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a19      	ldr	r2, [pc, #100]	; (80072c0 <HAL_TIM_IC_Start_IT+0x224>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d00e      	beq.n	800727e <HAL_TIM_IC_Start_IT+0x1e2>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a17      	ldr	r2, [pc, #92]	; (80072c4 <HAL_TIM_IC_Start_IT+0x228>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d009      	beq.n	800727e <HAL_TIM_IC_Start_IT+0x1e2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a16      	ldr	r2, [pc, #88]	; (80072c8 <HAL_TIM_IC_Start_IT+0x22c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d004      	beq.n	800727e <HAL_TIM_IC_Start_IT+0x1e2>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a14      	ldr	r2, [pc, #80]	; (80072cc <HAL_TIM_IC_Start_IT+0x230>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d111      	bne.n	80072a2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f003 0307 	and.w	r3, r3, #7
 8007288:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2b06      	cmp	r3, #6
 800728e:	d010      	beq.n	80072b2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0201 	orr.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a0:	e007      	b.n	80072b2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0201 	orr.w	r2, r2, #1
 80072b0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	40010000 	.word	0x40010000
 80072c0:	40000400 	.word	0x40000400
 80072c4:	40000800 	.word	0x40000800
 80072c8:	40000c00 	.word	0x40000c00
 80072cc:	40014000 	.word	0x40014000

080072d0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b0c      	cmp	r3, #12
 80072e2:	d841      	bhi.n	8007368 <HAL_TIM_IC_Stop_IT+0x98>
 80072e4:	a201      	add	r2, pc, #4	; (adr r2, 80072ec <HAL_TIM_IC_Stop_IT+0x1c>)
 80072e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ea:	bf00      	nop
 80072ec:	08007321 	.word	0x08007321
 80072f0:	08007369 	.word	0x08007369
 80072f4:	08007369 	.word	0x08007369
 80072f8:	08007369 	.word	0x08007369
 80072fc:	08007333 	.word	0x08007333
 8007300:	08007369 	.word	0x08007369
 8007304:	08007369 	.word	0x08007369
 8007308:	08007369 	.word	0x08007369
 800730c:	08007345 	.word	0x08007345
 8007310:	08007369 	.word	0x08007369
 8007314:	08007369 	.word	0x08007369
 8007318:	08007369 	.word	0x08007369
 800731c:	08007357 	.word	0x08007357
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0202 	bic.w	r2, r2, #2
 800732e:	60da      	str	r2, [r3, #12]
      break;
 8007330:	e01d      	b.n	800736e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0204 	bic.w	r2, r2, #4
 8007340:	60da      	str	r2, [r3, #12]
      break;
 8007342:	e014      	b.n	800736e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0208 	bic.w	r2, r2, #8
 8007352:	60da      	str	r2, [r3, #12]
      break;
 8007354:	e00b      	b.n	800736e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68da      	ldr	r2, [r3, #12]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0210 	bic.w	r2, r2, #16
 8007364:	60da      	str	r2, [r3, #12]
      break;
 8007366:	e002      	b.n	800736e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	73fb      	strb	r3, [r7, #15]
      break;
 800736c:	bf00      	nop
  }

  if (status == HAL_OK)
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d156      	bne.n	8007422 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2200      	movs	r2, #0
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	4618      	mov	r0, r3
 800737e:	f000 ff6a 	bl	8008256 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6a1a      	ldr	r2, [r3, #32]
 8007388:	f241 1311 	movw	r3, #4369	; 0x1111
 800738c:	4013      	ands	r3, r2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10f      	bne.n	80073b2 <HAL_TIM_IC_Stop_IT+0xe2>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6a1a      	ldr	r2, [r3, #32]
 8007398:	f240 4344 	movw	r3, #1092	; 0x444
 800739c:	4013      	ands	r3, r2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d107      	bne.n	80073b2 <HAL_TIM_IC_Stop_IT+0xe2>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 0201 	bic.w	r2, r2, #1
 80073b0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d104      	bne.n	80073c2 <HAL_TIM_IC_Stop_IT+0xf2>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073c0:	e013      	b.n	80073ea <HAL_TIM_IC_Stop_IT+0x11a>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d104      	bne.n	80073d2 <HAL_TIM_IC_Stop_IT+0x102>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073d0:	e00b      	b.n	80073ea <HAL_TIM_IC_Stop_IT+0x11a>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b08      	cmp	r3, #8
 80073d6:	d104      	bne.n	80073e2 <HAL_TIM_IC_Stop_IT+0x112>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073e0:	e003      	b.n	80073ea <HAL_TIM_IC_Stop_IT+0x11a>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d104      	bne.n	80073fa <HAL_TIM_IC_Stop_IT+0x12a>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073f8:	e013      	b.n	8007422 <HAL_TIM_IC_Stop_IT+0x152>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b04      	cmp	r3, #4
 80073fe:	d104      	bne.n	800740a <HAL_TIM_IC_Stop_IT+0x13a>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007408:	e00b      	b.n	8007422 <HAL_TIM_IC_Stop_IT+0x152>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b08      	cmp	r3, #8
 800740e:	d104      	bne.n	800741a <HAL_TIM_IC_Stop_IT+0x14a>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007418:	e003      	b.n	8007422 <HAL_TIM_IC_Stop_IT+0x152>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8007422:	7bfb      	ldrb	r3, [r7, #15]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b02      	cmp	r3, #2
 8007440:	d122      	bne.n	8007488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f003 0302 	and.w	r3, r3, #2
 800744c:	2b02      	cmp	r3, #2
 800744e:	d11b      	bne.n	8007488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f06f 0202 	mvn.w	r2, #2
 8007458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	f003 0303 	and.w	r3, r3, #3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fa98 	bl	80079a4 <HAL_TIM_IC_CaptureCallback>
 8007474:	e005      	b.n	8007482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa8a 	bl	8007990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fa9b 	bl	80079b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	f003 0304 	and.w	r3, r3, #4
 8007492:	2b04      	cmp	r3, #4
 8007494:	d122      	bne.n	80074dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d11b      	bne.n	80074dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f06f 0204 	mvn.w	r2, #4
 80074ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2202      	movs	r2, #2
 80074b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fa6e 	bl	80079a4 <HAL_TIM_IC_CaptureCallback>
 80074c8:	e005      	b.n	80074d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa60 	bl	8007990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fa71 	bl	80079b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f003 0308 	and.w	r3, r3, #8
 80074e6:	2b08      	cmp	r3, #8
 80074e8:	d122      	bne.n	8007530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f003 0308 	and.w	r3, r3, #8
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d11b      	bne.n	8007530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f06f 0208 	mvn.w	r2, #8
 8007500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2204      	movs	r2, #4
 8007506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	f003 0303 	and.w	r3, r3, #3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fa44 	bl	80079a4 <HAL_TIM_IC_CaptureCallback>
 800751c:	e005      	b.n	800752a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fa36 	bl	8007990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fa47 	bl	80079b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f003 0310 	and.w	r3, r3, #16
 800753a:	2b10      	cmp	r3, #16
 800753c:	d122      	bne.n	8007584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f003 0310 	and.w	r3, r3, #16
 8007548:	2b10      	cmp	r3, #16
 800754a:	d11b      	bne.n	8007584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f06f 0210 	mvn.w	r2, #16
 8007554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2208      	movs	r2, #8
 800755a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fa1a 	bl	80079a4 <HAL_TIM_IC_CaptureCallback>
 8007570:	e005      	b.n	800757e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fa0c 	bl	8007990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fa1d 	bl	80079b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b01      	cmp	r3, #1
 8007590:	d10e      	bne.n	80075b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b01      	cmp	r3, #1
 800759e:	d107      	bne.n	80075b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f06f 0201 	mvn.w	r2, #1
 80075a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f9e6 	bl	800797c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ba:	2b80      	cmp	r3, #128	; 0x80
 80075bc:	d10e      	bne.n	80075dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c8:	2b80      	cmp	r3, #128	; 0x80
 80075ca:	d107      	bne.n	80075dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 f88e 	bl	80086f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e6:	2b40      	cmp	r3, #64	; 0x40
 80075e8:	d10e      	bne.n	8007608 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f4:	2b40      	cmp	r3, #64	; 0x40
 80075f6:	d107      	bne.n	8007608 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f9e2 	bl	80079cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	f003 0320 	and.w	r3, r3, #32
 8007612:	2b20      	cmp	r3, #32
 8007614:	d10e      	bne.n	8007634 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f003 0320 	and.w	r3, r3, #32
 8007620:	2b20      	cmp	r3, #32
 8007622:	d107      	bne.n	8007634 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f06f 0220 	mvn.w	r2, #32
 800762c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 f858 	bl	80086e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007634:	bf00      	nop
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007652:	2b01      	cmp	r3, #1
 8007654:	d101      	bne.n	800765a <HAL_TIM_IC_ConfigChannel+0x1e>
 8007656:	2302      	movs	r3, #2
 8007658:	e088      	b.n	800776c <HAL_TIM_IC_ConfigChannel+0x130>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d11b      	bne.n	80076a0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	6819      	ldr	r1, [r3, #0]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f000 fc50 	bl	8007f1c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	699a      	ldr	r2, [r3, #24]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 020c 	bic.w	r2, r2, #12
 800768a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6999      	ldr	r1, [r3, #24]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	689a      	ldr	r2, [r3, #8]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	619a      	str	r2, [r3, #24]
 800769e:	e060      	b.n	8007762 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	d11c      	bne.n	80076e0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6818      	ldr	r0, [r3, #0]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	6819      	ldr	r1, [r3, #0]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f000 fcc8 	bl	800804a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	699a      	ldr	r2, [r3, #24]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80076c8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6999      	ldr	r1, [r3, #24]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	021a      	lsls	r2, r3, #8
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	619a      	str	r2, [r3, #24]
 80076de:	e040      	b.n	8007762 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b08      	cmp	r3, #8
 80076e4:	d11b      	bne.n	800771e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	6819      	ldr	r1, [r3, #0]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	685a      	ldr	r2, [r3, #4]
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f000 fd15 	bl	8008124 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69da      	ldr	r2, [r3, #28]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 020c 	bic.w	r2, r2, #12
 8007708:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69d9      	ldr	r1, [r3, #28]
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	61da      	str	r2, [r3, #28]
 800771c:	e021      	b.n	8007762 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b0c      	cmp	r3, #12
 8007722:	d11c      	bne.n	800775e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6818      	ldr	r0, [r3, #0]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	6819      	ldr	r1, [r3, #0]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	685a      	ldr	r2, [r3, #4]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f000 fd32 	bl	800819c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	69da      	ldr	r2, [r3, #28]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007746:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	69d9      	ldr	r1, [r3, #28]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	021a      	lsls	r2, r3, #8
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	430a      	orrs	r2, r1
 800775a:	61da      	str	r2, [r3, #28]
 800775c:	e001      	b.n	8007762 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800776a:	7dfb      	ldrb	r3, [r7, #23]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800778a:	2b01      	cmp	r3, #1
 800778c:	d101      	bne.n	8007792 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800778e:	2302      	movs	r3, #2
 8007790:	e0ae      	b.n	80078f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b0c      	cmp	r3, #12
 800779e:	f200 809f 	bhi.w	80078e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077a2:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a8:	080077dd 	.word	0x080077dd
 80077ac:	080078e1 	.word	0x080078e1
 80077b0:	080078e1 	.word	0x080078e1
 80077b4:	080078e1 	.word	0x080078e1
 80077b8:	0800781d 	.word	0x0800781d
 80077bc:	080078e1 	.word	0x080078e1
 80077c0:	080078e1 	.word	0x080078e1
 80077c4:	080078e1 	.word	0x080078e1
 80077c8:	0800785f 	.word	0x0800785f
 80077cc:	080078e1 	.word	0x080078e1
 80077d0:	080078e1 	.word	0x080078e1
 80077d4:	080078e1 	.word	0x080078e1
 80077d8:	0800789f 	.word	0x0800789f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68b9      	ldr	r1, [r7, #8]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 f97c 	bl	8007ae0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f042 0208 	orr.w	r2, r2, #8
 80077f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	699a      	ldr	r2, [r3, #24]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f022 0204 	bic.w	r2, r2, #4
 8007806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6999      	ldr	r1, [r3, #24]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	691a      	ldr	r2, [r3, #16]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	619a      	str	r2, [r3, #24]
      break;
 800781a:	e064      	b.n	80078e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68b9      	ldr	r1, [r7, #8]
 8007822:	4618      	mov	r0, r3
 8007824:	f000 f9c2 	bl	8007bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699a      	ldr	r2, [r3, #24]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699a      	ldr	r2, [r3, #24]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6999      	ldr	r1, [r3, #24]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	021a      	lsls	r2, r3, #8
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	430a      	orrs	r2, r1
 800785a:	619a      	str	r2, [r3, #24]
      break;
 800785c:	e043      	b.n	80078e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68b9      	ldr	r1, [r7, #8]
 8007864:	4618      	mov	r0, r3
 8007866:	f000 fa0d 	bl	8007c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69da      	ldr	r2, [r3, #28]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f042 0208 	orr.w	r2, r2, #8
 8007878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69da      	ldr	r2, [r3, #28]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 0204 	bic.w	r2, r2, #4
 8007888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	69d9      	ldr	r1, [r3, #28]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	691a      	ldr	r2, [r3, #16]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	430a      	orrs	r2, r1
 800789a:	61da      	str	r2, [r3, #28]
      break;
 800789c:	e023      	b.n	80078e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68b9      	ldr	r1, [r7, #8]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fa57 	bl	8007d58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69da      	ldr	r2, [r3, #28]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69da      	ldr	r2, [r3, #28]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69d9      	ldr	r1, [r3, #28]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	021a      	lsls	r2, r3, #8
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	61da      	str	r2, [r3, #28]
      break;
 80078de:	e002      	b.n	80078e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	75fb      	strb	r3, [r7, #23]
      break;
 80078e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3718      	adds	r7, #24
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007908:	2b01      	cmp	r3, #1
 800790a:	d101      	bne.n	8007910 <HAL_TIM_SlaveConfigSynchro+0x18>
 800790c:	2302      	movs	r3, #2
 800790e:	e031      	b.n	8007974 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fa68 	bl	8007df8 <TIM_SlaveTimer_SetConfig>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d009      	beq.n	8007942 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e018      	b.n	8007974 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68da      	ldr	r2, [r3, #12]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007950:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007960:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a34      	ldr	r2, [pc, #208]	; (8007ac4 <TIM_Base_SetConfig+0xe4>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d00f      	beq.n	8007a18 <TIM_Base_SetConfig+0x38>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079fe:	d00b      	beq.n	8007a18 <TIM_Base_SetConfig+0x38>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a31      	ldr	r2, [pc, #196]	; (8007ac8 <TIM_Base_SetConfig+0xe8>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d007      	beq.n	8007a18 <TIM_Base_SetConfig+0x38>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a30      	ldr	r2, [pc, #192]	; (8007acc <TIM_Base_SetConfig+0xec>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d003      	beq.n	8007a18 <TIM_Base_SetConfig+0x38>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a2f      	ldr	r2, [pc, #188]	; (8007ad0 <TIM_Base_SetConfig+0xf0>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d108      	bne.n	8007a2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a25      	ldr	r2, [pc, #148]	; (8007ac4 <TIM_Base_SetConfig+0xe4>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d01b      	beq.n	8007a6a <TIM_Base_SetConfig+0x8a>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a38:	d017      	beq.n	8007a6a <TIM_Base_SetConfig+0x8a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a22      	ldr	r2, [pc, #136]	; (8007ac8 <TIM_Base_SetConfig+0xe8>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d013      	beq.n	8007a6a <TIM_Base_SetConfig+0x8a>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a21      	ldr	r2, [pc, #132]	; (8007acc <TIM_Base_SetConfig+0xec>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d00f      	beq.n	8007a6a <TIM_Base_SetConfig+0x8a>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a20      	ldr	r2, [pc, #128]	; (8007ad0 <TIM_Base_SetConfig+0xf0>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d00b      	beq.n	8007a6a <TIM_Base_SetConfig+0x8a>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a1f      	ldr	r2, [pc, #124]	; (8007ad4 <TIM_Base_SetConfig+0xf4>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d007      	beq.n	8007a6a <TIM_Base_SetConfig+0x8a>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a1e      	ldr	r2, [pc, #120]	; (8007ad8 <TIM_Base_SetConfig+0xf8>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d003      	beq.n	8007a6a <TIM_Base_SetConfig+0x8a>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a1d      	ldr	r2, [pc, #116]	; (8007adc <TIM_Base_SetConfig+0xfc>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d108      	bne.n	8007a7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	689a      	ldr	r2, [r3, #8]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a08      	ldr	r2, [pc, #32]	; (8007ac4 <TIM_Base_SetConfig+0xe4>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d103      	bne.n	8007ab0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	691a      	ldr	r2, [r3, #16]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	615a      	str	r2, [r3, #20]
}
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	40010000 	.word	0x40010000
 8007ac8:	40000400 	.word	0x40000400
 8007acc:	40000800 	.word	0x40000800
 8007ad0:	40000c00 	.word	0x40000c00
 8007ad4:	40014000 	.word	0x40014000
 8007ad8:	40014400 	.word	0x40014400
 8007adc:	40014800 	.word	0x40014800

08007ae0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	f023 0201 	bic.w	r2, r3, #1
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0303 	bic.w	r3, r3, #3
 8007b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f023 0302 	bic.w	r3, r3, #2
 8007b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a1c      	ldr	r2, [pc, #112]	; (8007ba8 <TIM_OC1_SetConfig+0xc8>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d10c      	bne.n	8007b56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f023 0308 	bic.w	r3, r3, #8
 8007b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f023 0304 	bic.w	r3, r3, #4
 8007b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a13      	ldr	r2, [pc, #76]	; (8007ba8 <TIM_OC1_SetConfig+0xc8>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d111      	bne.n	8007b82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	621a      	str	r2, [r3, #32]
}
 8007b9c:	bf00      	nop
 8007b9e:	371c      	adds	r7, #28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	40010000 	.word	0x40010000

08007bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	f023 0210 	bic.w	r2, r3, #16
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	021b      	lsls	r3, r3, #8
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f023 0320 	bic.w	r3, r3, #32
 8007bf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	011b      	lsls	r3, r3, #4
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a1e      	ldr	r2, [pc, #120]	; (8007c80 <TIM_OC2_SetConfig+0xd4>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d10d      	bne.n	8007c28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	011b      	lsls	r3, r3, #4
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a15      	ldr	r2, [pc, #84]	; (8007c80 <TIM_OC2_SetConfig+0xd4>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d113      	bne.n	8007c58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	621a      	str	r2, [r3, #32]
}
 8007c72:	bf00      	nop
 8007c74:	371c      	adds	r7, #28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	40010000 	.word	0x40010000

08007c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 0303 	bic.w	r3, r3, #3
 8007cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	021b      	lsls	r3, r3, #8
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a1d      	ldr	r2, [pc, #116]	; (8007d54 <TIM_OC3_SetConfig+0xd0>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d10d      	bne.n	8007cfe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	021b      	lsls	r3, r3, #8
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a14      	ldr	r2, [pc, #80]	; (8007d54 <TIM_OC3_SetConfig+0xd0>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d113      	bne.n	8007d2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	621a      	str	r2, [r3, #32]
}
 8007d48:	bf00      	nop
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	40010000 	.word	0x40010000

08007d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b087      	sub	sp, #28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	021b      	lsls	r3, r3, #8
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	031b      	lsls	r3, r3, #12
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a10      	ldr	r2, [pc, #64]	; (8007df4 <TIM_OC4_SetConfig+0x9c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d109      	bne.n	8007dcc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	019b      	lsls	r3, r3, #6
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	621a      	str	r2, [r3, #32]
}
 8007de6:	bf00      	nop
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	40010000 	.word	0x40010000

08007df8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e14:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	f023 0307 	bic.w	r3, r3, #7
 8007e26:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	2b70      	cmp	r3, #112	; 0x70
 8007e40:	d01a      	beq.n	8007e78 <TIM_SlaveTimer_SetConfig+0x80>
 8007e42:	2b70      	cmp	r3, #112	; 0x70
 8007e44:	d860      	bhi.n	8007f08 <TIM_SlaveTimer_SetConfig+0x110>
 8007e46:	2b60      	cmp	r3, #96	; 0x60
 8007e48:	d054      	beq.n	8007ef4 <TIM_SlaveTimer_SetConfig+0xfc>
 8007e4a:	2b60      	cmp	r3, #96	; 0x60
 8007e4c:	d85c      	bhi.n	8007f08 <TIM_SlaveTimer_SetConfig+0x110>
 8007e4e:	2b50      	cmp	r3, #80	; 0x50
 8007e50:	d046      	beq.n	8007ee0 <TIM_SlaveTimer_SetConfig+0xe8>
 8007e52:	2b50      	cmp	r3, #80	; 0x50
 8007e54:	d858      	bhi.n	8007f08 <TIM_SlaveTimer_SetConfig+0x110>
 8007e56:	2b40      	cmp	r3, #64	; 0x40
 8007e58:	d019      	beq.n	8007e8e <TIM_SlaveTimer_SetConfig+0x96>
 8007e5a:	2b40      	cmp	r3, #64	; 0x40
 8007e5c:	d854      	bhi.n	8007f08 <TIM_SlaveTimer_SetConfig+0x110>
 8007e5e:	2b30      	cmp	r3, #48	; 0x30
 8007e60:	d055      	beq.n	8007f0e <TIM_SlaveTimer_SetConfig+0x116>
 8007e62:	2b30      	cmp	r3, #48	; 0x30
 8007e64:	d850      	bhi.n	8007f08 <TIM_SlaveTimer_SetConfig+0x110>
 8007e66:	2b20      	cmp	r3, #32
 8007e68:	d051      	beq.n	8007f0e <TIM_SlaveTimer_SetConfig+0x116>
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	d84c      	bhi.n	8007f08 <TIM_SlaveTimer_SetConfig+0x110>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d04d      	beq.n	8007f0e <TIM_SlaveTimer_SetConfig+0x116>
 8007e72:	2b10      	cmp	r3, #16
 8007e74:	d04b      	beq.n	8007f0e <TIM_SlaveTimer_SetConfig+0x116>
 8007e76:	e047      	b.n	8007f08 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6818      	ldr	r0, [r3, #0]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	68d9      	ldr	r1, [r3, #12]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	f000 f9c5 	bl	8008216 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007e8c:	e040      	b.n	8007f10 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	d101      	bne.n	8007e9a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e03b      	b.n	8007f12 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6a1a      	ldr	r2, [r3, #32]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 0201 	bic.w	r2, r2, #1
 8007eb0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ec0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	011b      	lsls	r3, r3, #4
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	621a      	str	r2, [r3, #32]
      break;
 8007ede:	e017      	b.n	8007f10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6818      	ldr	r0, [r3, #0]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	6899      	ldr	r1, [r3, #8]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	461a      	mov	r2, r3
 8007eee:	f000 f87d 	bl	8007fec <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007ef2:	e00d      	b.n	8007f10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6818      	ldr	r0, [r3, #0]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	6899      	ldr	r1, [r3, #8]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	461a      	mov	r2, r3
 8007f02:	f000 f8df 	bl	80080c4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007f06:	e003      	b.n	8007f10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f0c:	e000      	b.n	8007f10 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007f0e:	bf00      	nop
  }

  return status;
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	f023 0201 	bic.w	r2, r3, #1
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	4a24      	ldr	r2, [pc, #144]	; (8007fd8 <TIM_TI1_SetConfig+0xbc>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d013      	beq.n	8007f72 <TIM_TI1_SetConfig+0x56>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f50:	d00f      	beq.n	8007f72 <TIM_TI1_SetConfig+0x56>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	4a21      	ldr	r2, [pc, #132]	; (8007fdc <TIM_TI1_SetConfig+0xc0>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00b      	beq.n	8007f72 <TIM_TI1_SetConfig+0x56>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	4a20      	ldr	r2, [pc, #128]	; (8007fe0 <TIM_TI1_SetConfig+0xc4>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d007      	beq.n	8007f72 <TIM_TI1_SetConfig+0x56>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	4a1f      	ldr	r2, [pc, #124]	; (8007fe4 <TIM_TI1_SetConfig+0xc8>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d003      	beq.n	8007f72 <TIM_TI1_SetConfig+0x56>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	4a1e      	ldr	r2, [pc, #120]	; (8007fe8 <TIM_TI1_SetConfig+0xcc>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d101      	bne.n	8007f76 <TIM_TI1_SetConfig+0x5a>
 8007f72:	2301      	movs	r3, #1
 8007f74:	e000      	b.n	8007f78 <TIM_TI1_SetConfig+0x5c>
 8007f76:	2300      	movs	r3, #0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d008      	beq.n	8007f8e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	f023 0303 	bic.w	r3, r3, #3
 8007f82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	e003      	b.n	8007f96 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f043 0301 	orr.w	r3, r3, #1
 8007f94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	011b      	lsls	r3, r3, #4
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	f023 030a 	bic.w	r3, r3, #10
 8007fb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	f003 030a 	and.w	r3, r3, #10
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	697a      	ldr	r2, [r7, #20]
 8007fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	621a      	str	r2, [r3, #32]
}
 8007fca:	bf00      	nop
 8007fcc:	371c      	adds	r7, #28
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	40010000 	.word	0x40010000
 8007fdc:	40000400 	.word	0x40000400
 8007fe0:	40000800 	.word	0x40000800
 8007fe4:	40000c00 	.word	0x40000c00
 8007fe8:	40014000 	.word	0x40014000

08007fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a1b      	ldr	r3, [r3, #32]
 8007ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	f023 0201 	bic.w	r2, r3, #1
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	011b      	lsls	r3, r3, #4
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	4313      	orrs	r3, r2
 8008020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f023 030a 	bic.w	r3, r3, #10
 8008028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	4313      	orrs	r3, r2
 8008030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	621a      	str	r2, [r3, #32]
}
 800803e:	bf00      	nop
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800804a:	b480      	push	{r7}
 800804c:	b087      	sub	sp, #28
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	607a      	str	r2, [r7, #4]
 8008056:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	f023 0210 	bic.w	r2, r3, #16
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008076:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	021b      	lsls	r3, r3, #8
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	4313      	orrs	r3, r2
 8008080:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008088:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	031b      	lsls	r3, r3, #12
 800808e:	b29b      	uxth	r3, r3
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	4313      	orrs	r3, r2
 8008094:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800809c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	011b      	lsls	r3, r3, #4
 80080a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	621a      	str	r2, [r3, #32]
}
 80080b8:	bf00      	nop
 80080ba:	371c      	adds	r7, #28
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6a1b      	ldr	r3, [r3, #32]
 80080d4:	f023 0210 	bic.w	r2, r3, #16
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	031b      	lsls	r3, r3, #12
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008100:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	011b      	lsls	r3, r3, #4
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	4313      	orrs	r3, r2
 800810a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	621a      	str	r2, [r3, #32]
}
 8008118:	bf00      	nop
 800811a:	371c      	adds	r7, #28
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008124:	b480      	push	{r7}
 8008126:	b087      	sub	sp, #28
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f023 0303 	bic.w	r3, r3, #3
 8008150:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4313      	orrs	r3, r2
 8008158:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008160:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	b2db      	uxtb	r3, r3
 8008168:	697a      	ldr	r2, [r7, #20]
 800816a:	4313      	orrs	r3, r2
 800816c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008174:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	021b      	lsls	r3, r3, #8
 800817a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	4313      	orrs	r3, r2
 8008182:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	621a      	str	r2, [r3, #32]
}
 8008190:	bf00      	nop
 8008192:	371c      	adds	r7, #28
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
 80081a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6a1b      	ldr	r3, [r3, #32]
 80081c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	031b      	lsls	r3, r3, #12
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80081ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	031b      	lsls	r3, r3, #12
 80081f4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	621a      	str	r2, [r3, #32]
}
 800820a:	bf00      	nop
 800820c:	371c      	adds	r7, #28
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008216:	b480      	push	{r7}
 8008218:	b087      	sub	sp, #28
 800821a:	af00      	add	r7, sp, #0
 800821c:	60f8      	str	r0, [r7, #12]
 800821e:	60b9      	str	r1, [r7, #8]
 8008220:	607a      	str	r2, [r7, #4]
 8008222:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008230:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	021a      	lsls	r2, r3, #8
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	431a      	orrs	r2, r3
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	4313      	orrs	r3, r2
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	4313      	orrs	r3, r2
 8008242:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	609a      	str	r2, [r3, #8]
}
 800824a:	bf00      	nop
 800824c:	371c      	adds	r7, #28
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008256:	b480      	push	{r7}
 8008258:	b087      	sub	sp, #28
 800825a:	af00      	add	r7, sp, #0
 800825c:	60f8      	str	r0, [r7, #12]
 800825e:	60b9      	str	r1, [r7, #8]
 8008260:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f003 031f 	and.w	r3, r3, #31
 8008268:	2201      	movs	r2, #1
 800826a:	fa02 f303 	lsl.w	r3, r2, r3
 800826e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6a1a      	ldr	r2, [r3, #32]
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	43db      	mvns	r3, r3
 8008278:	401a      	ands	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6a1a      	ldr	r2, [r3, #32]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	f003 031f 	and.w	r3, r3, #31
 8008288:	6879      	ldr	r1, [r7, #4]
 800828a:	fa01 f303 	lsl.w	r3, r1, r3
 800828e:	431a      	orrs	r2, r3
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	621a      	str	r2, [r3, #32]
}
 8008294:	bf00      	nop
 8008296:	371c      	adds	r7, #28
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08a      	sub	sp, #40	; 0x28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e09a      	b.n	80083ea <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d106      	bne.n	80082ce <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7f9 fcfd 	bl	8001cc8 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2202      	movs	r2, #2
 80082d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	3304      	adds	r3, #4
 80082de:	4619      	mov	r1, r3
 80082e0:	4610      	mov	r0, r2
 80082e2:	f7ff fb7d 	bl	80079e0 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	6819      	ldr	r1, [r3, #0]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	2203      	movs	r2, #3
 80082f4:	f7ff fe12 	bl	8007f1c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	699a      	ldr	r2, [r3, #24]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 020c 	bic.w	r2, r2, #12
 8008306:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6999      	ldr	r1, [r3, #24]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008328:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689a      	ldr	r2, [r3, #8]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008338:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	689a      	ldr	r2, [r3, #8]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008348:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0207 	bic.w	r2, r2, #7
 8008358:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689a      	ldr	r2, [r3, #8]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f042 0204 	orr.w	r2, r2, #4
 8008368:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800836a:	2300      	movs	r3, #0
 800836c:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800836e:	2300      	movs	r3, #0
 8008370:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8008372:	2370      	movs	r3, #112	; 0x70
 8008374:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008376:	2300      	movs	r3, #0
 8008378:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800837a:	2300      	movs	r3, #0
 800837c:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800837e:	2300      	movs	r3, #0
 8008380:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f107 020c 	add.w	r2, r7, #12
 8008390:	4611      	mov	r1, r2
 8008392:	4618      	mov	r0, r3
 8008394:	f7ff fc0a 	bl	8007bac <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80083a6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80083b6:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3728      	adds	r7, #40	; 0x28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008402:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800840a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008412:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800841a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d108      	bne.n	8008434 <HAL_TIMEx_HallSensor_Start+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d105      	bne.n	8008434 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008428:	7b7b      	ldrb	r3, [r7, #13]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d102      	bne.n	8008434 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800842e:	7b3b      	ldrb	r3, [r7, #12]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d001      	beq.n	8008438 <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e04f      	b.n	80084d8 <HAL_TIMEx_HallSensor_Start+0xe4>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2202      	movs	r2, #2
 8008444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2202      	movs	r2, #2
 8008454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2201      	movs	r2, #1
 800845e:	2100      	movs	r1, #0
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff fef8 	bl	8008256 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a1d      	ldr	r2, [pc, #116]	; (80084e0 <HAL_TIMEx_HallSensor_Start+0xec>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d018      	beq.n	80084a2 <HAL_TIMEx_HallSensor_Start+0xae>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008478:	d013      	beq.n	80084a2 <HAL_TIMEx_HallSensor_Start+0xae>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a19      	ldr	r2, [pc, #100]	; (80084e4 <HAL_TIMEx_HallSensor_Start+0xf0>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d00e      	beq.n	80084a2 <HAL_TIMEx_HallSensor_Start+0xae>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a17      	ldr	r2, [pc, #92]	; (80084e8 <HAL_TIMEx_HallSensor_Start+0xf4>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d009      	beq.n	80084a2 <HAL_TIMEx_HallSensor_Start+0xae>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a16      	ldr	r2, [pc, #88]	; (80084ec <HAL_TIMEx_HallSensor_Start+0xf8>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d004      	beq.n	80084a2 <HAL_TIMEx_HallSensor_Start+0xae>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a14      	ldr	r2, [pc, #80]	; (80084f0 <HAL_TIMEx_HallSensor_Start+0xfc>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d111      	bne.n	80084c6 <HAL_TIMEx_HallSensor_Start+0xd2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f003 0307 	and.w	r3, r3, #7
 80084ac:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2b06      	cmp	r3, #6
 80084b2:	d010      	beq.n	80084d6 <HAL_TIMEx_HallSensor_Start+0xe2>
    {
      __HAL_TIM_ENABLE(htim);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f042 0201 	orr.w	r2, r2, #1
 80084c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084c4:	e007      	b.n	80084d6 <HAL_TIMEx_HallSensor_Start+0xe2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f042 0201 	orr.w	r2, r2, #1
 80084d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	40010000 	.word	0x40010000
 80084e4:	40000400 	.word	0x40000400
 80084e8:	40000800 	.word	0x40000800
 80084ec:	40000c00 	.word	0x40000c00
 80084f0:	40014000 	.word	0x40014000

080084f4 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2200      	movs	r2, #0
 8008502:	2100      	movs	r1, #0
 8008504:	4618      	mov	r0, r3
 8008506:	f7ff fea6 	bl	8008256 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	6a1a      	ldr	r2, [r3, #32]
 8008510:	f241 1311 	movw	r3, #4369	; 0x1111
 8008514:	4013      	ands	r3, r2
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10f      	bne.n	800853a <HAL_TIMEx_HallSensor_Stop+0x46>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	6a1a      	ldr	r2, [r3, #32]
 8008520:	f240 4344 	movw	r3, #1092	; 0x444
 8008524:	4013      	ands	r3, r2
 8008526:	2b00      	cmp	r3, #0
 8008528:	d107      	bne.n	800853a <HAL_TIMEx_HallSensor_Stop+0x46>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 0201 	bic.w	r2, r2, #1
 8008538:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008574:	2b01      	cmp	r3, #1
 8008576:	d101      	bne.n	800857c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008578:	2302      	movs	r3, #2
 800857a:	e050      	b.n	800861e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2202      	movs	r2, #2
 8008588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a1c      	ldr	r2, [pc, #112]	; (800862c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d018      	beq.n	80085f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c8:	d013      	beq.n	80085f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a18      	ldr	r2, [pc, #96]	; (8008630 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d00e      	beq.n	80085f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a16      	ldr	r2, [pc, #88]	; (8008634 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d009      	beq.n	80085f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a15      	ldr	r2, [pc, #84]	; (8008638 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d004      	beq.n	80085f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a13      	ldr	r2, [pc, #76]	; (800863c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d10c      	bne.n	800860c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	4313      	orrs	r3, r2
 8008602:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	40010000 	.word	0x40010000
 8008630:	40000400 	.word	0x40000400
 8008634:	40000800 	.word	0x40000800
 8008638:	40000c00 	.word	0x40000c00
 800863c:	40014000 	.word	0x40014000

08008640 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800864a:	2300      	movs	r3, #0
 800864c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008654:	2b01      	cmp	r3, #1
 8008656:	d101      	bne.n	800865c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008658:	2302      	movs	r3, #2
 800865a:	e03d      	b.n	80086d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	4313      	orrs	r3, r2
 8008670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	4313      	orrs	r3, r2
 800867e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4313      	orrs	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d101      	bne.n	800871e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e03f      	b.n	800879e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d106      	bne.n	8008738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7f9 fbc2 	bl	8001ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2224      	movs	r2, #36	; 0x24
 800873c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800874e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f829 	bl	80087a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	691a      	ldr	r2, [r3, #16]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	695a      	ldr	r2, [r3, #20]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68da      	ldr	r2, [r3, #12]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2220      	movs	r2, #32
 8008790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2220      	movs	r2, #32
 8008798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
	...

080087a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087ac:	b0c0      	sub	sp, #256	; 0x100
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80087c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087c4:	68d9      	ldr	r1, [r3, #12]
 80087c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	ea40 0301 	orr.w	r3, r0, r1
 80087d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087d6:	689a      	ldr	r2, [r3, #8]
 80087d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	431a      	orrs	r2, r3
 80087e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	431a      	orrs	r2, r3
 80087e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80087f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008800:	f021 010c 	bic.w	r1, r1, #12
 8008804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800880e:	430b      	orrs	r3, r1
 8008810:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800881e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008822:	6999      	ldr	r1, [r3, #24]
 8008824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	ea40 0301 	orr.w	r3, r0, r1
 800882e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	4b8f      	ldr	r3, [pc, #572]	; (8008a74 <UART_SetConfig+0x2cc>)
 8008838:	429a      	cmp	r2, r3
 800883a:	d005      	beq.n	8008848 <UART_SetConfig+0xa0>
 800883c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	4b8d      	ldr	r3, [pc, #564]	; (8008a78 <UART_SetConfig+0x2d0>)
 8008844:	429a      	cmp	r2, r3
 8008846:	d104      	bne.n	8008852 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008848:	f7fe f8ee 	bl	8006a28 <HAL_RCC_GetPCLK2Freq>
 800884c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008850:	e003      	b.n	800885a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008852:	f7fe f8d5 	bl	8006a00 <HAL_RCC_GetPCLK1Freq>
 8008856:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800885a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800885e:	69db      	ldr	r3, [r3, #28]
 8008860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008864:	f040 810c 	bne.w	8008a80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800886c:	2200      	movs	r2, #0
 800886e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008872:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008876:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800887a:	4622      	mov	r2, r4
 800887c:	462b      	mov	r3, r5
 800887e:	1891      	adds	r1, r2, r2
 8008880:	65b9      	str	r1, [r7, #88]	; 0x58
 8008882:	415b      	adcs	r3, r3
 8008884:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008886:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800888a:	4621      	mov	r1, r4
 800888c:	eb12 0801 	adds.w	r8, r2, r1
 8008890:	4629      	mov	r1, r5
 8008892:	eb43 0901 	adc.w	r9, r3, r1
 8008896:	f04f 0200 	mov.w	r2, #0
 800889a:	f04f 0300 	mov.w	r3, #0
 800889e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80088a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80088a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80088aa:	4690      	mov	r8, r2
 80088ac:	4699      	mov	r9, r3
 80088ae:	4623      	mov	r3, r4
 80088b0:	eb18 0303 	adds.w	r3, r8, r3
 80088b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088b8:	462b      	mov	r3, r5
 80088ba:	eb49 0303 	adc.w	r3, r9, r3
 80088be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80088c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80088ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80088d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80088d6:	460b      	mov	r3, r1
 80088d8:	18db      	adds	r3, r3, r3
 80088da:	653b      	str	r3, [r7, #80]	; 0x50
 80088dc:	4613      	mov	r3, r2
 80088de:	eb42 0303 	adc.w	r3, r2, r3
 80088e2:	657b      	str	r3, [r7, #84]	; 0x54
 80088e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80088e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80088ec:	f7f8 f964 	bl	8000bb8 <__aeabi_uldivmod>
 80088f0:	4602      	mov	r2, r0
 80088f2:	460b      	mov	r3, r1
 80088f4:	4b61      	ldr	r3, [pc, #388]	; (8008a7c <UART_SetConfig+0x2d4>)
 80088f6:	fba3 2302 	umull	r2, r3, r3, r2
 80088fa:	095b      	lsrs	r3, r3, #5
 80088fc:	011c      	lsls	r4, r3, #4
 80088fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008902:	2200      	movs	r2, #0
 8008904:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008908:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800890c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008910:	4642      	mov	r2, r8
 8008912:	464b      	mov	r3, r9
 8008914:	1891      	adds	r1, r2, r2
 8008916:	64b9      	str	r1, [r7, #72]	; 0x48
 8008918:	415b      	adcs	r3, r3
 800891a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800891c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008920:	4641      	mov	r1, r8
 8008922:	eb12 0a01 	adds.w	sl, r2, r1
 8008926:	4649      	mov	r1, r9
 8008928:	eb43 0b01 	adc.w	fp, r3, r1
 800892c:	f04f 0200 	mov.w	r2, #0
 8008930:	f04f 0300 	mov.w	r3, #0
 8008934:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008938:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800893c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008940:	4692      	mov	sl, r2
 8008942:	469b      	mov	fp, r3
 8008944:	4643      	mov	r3, r8
 8008946:	eb1a 0303 	adds.w	r3, sl, r3
 800894a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800894e:	464b      	mov	r3, r9
 8008950:	eb4b 0303 	adc.w	r3, fp, r3
 8008954:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008964:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008968:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800896c:	460b      	mov	r3, r1
 800896e:	18db      	adds	r3, r3, r3
 8008970:	643b      	str	r3, [r7, #64]	; 0x40
 8008972:	4613      	mov	r3, r2
 8008974:	eb42 0303 	adc.w	r3, r2, r3
 8008978:	647b      	str	r3, [r7, #68]	; 0x44
 800897a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800897e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008982:	f7f8 f919 	bl	8000bb8 <__aeabi_uldivmod>
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	4611      	mov	r1, r2
 800898c:	4b3b      	ldr	r3, [pc, #236]	; (8008a7c <UART_SetConfig+0x2d4>)
 800898e:	fba3 2301 	umull	r2, r3, r3, r1
 8008992:	095b      	lsrs	r3, r3, #5
 8008994:	2264      	movs	r2, #100	; 0x64
 8008996:	fb02 f303 	mul.w	r3, r2, r3
 800899a:	1acb      	subs	r3, r1, r3
 800899c:	00db      	lsls	r3, r3, #3
 800899e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80089a2:	4b36      	ldr	r3, [pc, #216]	; (8008a7c <UART_SetConfig+0x2d4>)
 80089a4:	fba3 2302 	umull	r2, r3, r3, r2
 80089a8:	095b      	lsrs	r3, r3, #5
 80089aa:	005b      	lsls	r3, r3, #1
 80089ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80089b0:	441c      	add	r4, r3
 80089b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089b6:	2200      	movs	r2, #0
 80089b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80089c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80089c4:	4642      	mov	r2, r8
 80089c6:	464b      	mov	r3, r9
 80089c8:	1891      	adds	r1, r2, r2
 80089ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80089cc:	415b      	adcs	r3, r3
 80089ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089d4:	4641      	mov	r1, r8
 80089d6:	1851      	adds	r1, r2, r1
 80089d8:	6339      	str	r1, [r7, #48]	; 0x30
 80089da:	4649      	mov	r1, r9
 80089dc:	414b      	adcs	r3, r1
 80089de:	637b      	str	r3, [r7, #52]	; 0x34
 80089e0:	f04f 0200 	mov.w	r2, #0
 80089e4:	f04f 0300 	mov.w	r3, #0
 80089e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80089ec:	4659      	mov	r1, fp
 80089ee:	00cb      	lsls	r3, r1, #3
 80089f0:	4651      	mov	r1, sl
 80089f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089f6:	4651      	mov	r1, sl
 80089f8:	00ca      	lsls	r2, r1, #3
 80089fa:	4610      	mov	r0, r2
 80089fc:	4619      	mov	r1, r3
 80089fe:	4603      	mov	r3, r0
 8008a00:	4642      	mov	r2, r8
 8008a02:	189b      	adds	r3, r3, r2
 8008a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a08:	464b      	mov	r3, r9
 8008a0a:	460a      	mov	r2, r1
 8008a0c:	eb42 0303 	adc.w	r3, r2, r3
 8008a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008a24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008a28:	460b      	mov	r3, r1
 8008a2a:	18db      	adds	r3, r3, r3
 8008a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a2e:	4613      	mov	r3, r2
 8008a30:	eb42 0303 	adc.w	r3, r2, r3
 8008a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008a3e:	f7f8 f8bb 	bl	8000bb8 <__aeabi_uldivmod>
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	4b0d      	ldr	r3, [pc, #52]	; (8008a7c <UART_SetConfig+0x2d4>)
 8008a48:	fba3 1302 	umull	r1, r3, r3, r2
 8008a4c:	095b      	lsrs	r3, r3, #5
 8008a4e:	2164      	movs	r1, #100	; 0x64
 8008a50:	fb01 f303 	mul.w	r3, r1, r3
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	00db      	lsls	r3, r3, #3
 8008a58:	3332      	adds	r3, #50	; 0x32
 8008a5a:	4a08      	ldr	r2, [pc, #32]	; (8008a7c <UART_SetConfig+0x2d4>)
 8008a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a60:	095b      	lsrs	r3, r3, #5
 8008a62:	f003 0207 	and.w	r2, r3, #7
 8008a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4422      	add	r2, r4
 8008a6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a70:	e106      	b.n	8008c80 <UART_SetConfig+0x4d8>
 8008a72:	bf00      	nop
 8008a74:	40011000 	.word	0x40011000
 8008a78:	40011400 	.word	0x40011400
 8008a7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a84:	2200      	movs	r2, #0
 8008a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008a8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008a92:	4642      	mov	r2, r8
 8008a94:	464b      	mov	r3, r9
 8008a96:	1891      	adds	r1, r2, r2
 8008a98:	6239      	str	r1, [r7, #32]
 8008a9a:	415b      	adcs	r3, r3
 8008a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008aa2:	4641      	mov	r1, r8
 8008aa4:	1854      	adds	r4, r2, r1
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	eb43 0501 	adc.w	r5, r3, r1
 8008aac:	f04f 0200 	mov.w	r2, #0
 8008ab0:	f04f 0300 	mov.w	r3, #0
 8008ab4:	00eb      	lsls	r3, r5, #3
 8008ab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008aba:	00e2      	lsls	r2, r4, #3
 8008abc:	4614      	mov	r4, r2
 8008abe:	461d      	mov	r5, r3
 8008ac0:	4643      	mov	r3, r8
 8008ac2:	18e3      	adds	r3, r4, r3
 8008ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ac8:	464b      	mov	r3, r9
 8008aca:	eb45 0303 	adc.w	r3, r5, r3
 8008ace:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ade:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ae2:	f04f 0200 	mov.w	r2, #0
 8008ae6:	f04f 0300 	mov.w	r3, #0
 8008aea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008aee:	4629      	mov	r1, r5
 8008af0:	008b      	lsls	r3, r1, #2
 8008af2:	4621      	mov	r1, r4
 8008af4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008af8:	4621      	mov	r1, r4
 8008afa:	008a      	lsls	r2, r1, #2
 8008afc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008b00:	f7f8 f85a 	bl	8000bb8 <__aeabi_uldivmod>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	4b60      	ldr	r3, [pc, #384]	; (8008c8c <UART_SetConfig+0x4e4>)
 8008b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8008b0e:	095b      	lsrs	r3, r3, #5
 8008b10:	011c      	lsls	r4, r3, #4
 8008b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b16:	2200      	movs	r2, #0
 8008b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008b20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008b24:	4642      	mov	r2, r8
 8008b26:	464b      	mov	r3, r9
 8008b28:	1891      	adds	r1, r2, r2
 8008b2a:	61b9      	str	r1, [r7, #24]
 8008b2c:	415b      	adcs	r3, r3
 8008b2e:	61fb      	str	r3, [r7, #28]
 8008b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b34:	4641      	mov	r1, r8
 8008b36:	1851      	adds	r1, r2, r1
 8008b38:	6139      	str	r1, [r7, #16]
 8008b3a:	4649      	mov	r1, r9
 8008b3c:	414b      	adcs	r3, r1
 8008b3e:	617b      	str	r3, [r7, #20]
 8008b40:	f04f 0200 	mov.w	r2, #0
 8008b44:	f04f 0300 	mov.w	r3, #0
 8008b48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b4c:	4659      	mov	r1, fp
 8008b4e:	00cb      	lsls	r3, r1, #3
 8008b50:	4651      	mov	r1, sl
 8008b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b56:	4651      	mov	r1, sl
 8008b58:	00ca      	lsls	r2, r1, #3
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	4603      	mov	r3, r0
 8008b60:	4642      	mov	r2, r8
 8008b62:	189b      	adds	r3, r3, r2
 8008b64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b68:	464b      	mov	r3, r9
 8008b6a:	460a      	mov	r2, r1
 8008b6c:	eb42 0303 	adc.w	r3, r2, r3
 8008b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008b80:	f04f 0200 	mov.w	r2, #0
 8008b84:	f04f 0300 	mov.w	r3, #0
 8008b88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008b8c:	4649      	mov	r1, r9
 8008b8e:	008b      	lsls	r3, r1, #2
 8008b90:	4641      	mov	r1, r8
 8008b92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b96:	4641      	mov	r1, r8
 8008b98:	008a      	lsls	r2, r1, #2
 8008b9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008b9e:	f7f8 f80b 	bl	8000bb8 <__aeabi_uldivmod>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	4b38      	ldr	r3, [pc, #224]	; (8008c8c <UART_SetConfig+0x4e4>)
 8008baa:	fba3 2301 	umull	r2, r3, r3, r1
 8008bae:	095b      	lsrs	r3, r3, #5
 8008bb0:	2264      	movs	r2, #100	; 0x64
 8008bb2:	fb02 f303 	mul.w	r3, r2, r3
 8008bb6:	1acb      	subs	r3, r1, r3
 8008bb8:	011b      	lsls	r3, r3, #4
 8008bba:	3332      	adds	r3, #50	; 0x32
 8008bbc:	4a33      	ldr	r2, [pc, #204]	; (8008c8c <UART_SetConfig+0x4e4>)
 8008bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc2:	095b      	lsrs	r3, r3, #5
 8008bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bc8:	441c      	add	r4, r3
 8008bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bce:	2200      	movs	r2, #0
 8008bd0:	673b      	str	r3, [r7, #112]	; 0x70
 8008bd2:	677a      	str	r2, [r7, #116]	; 0x74
 8008bd4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008bd8:	4642      	mov	r2, r8
 8008bda:	464b      	mov	r3, r9
 8008bdc:	1891      	adds	r1, r2, r2
 8008bde:	60b9      	str	r1, [r7, #8]
 8008be0:	415b      	adcs	r3, r3
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008be8:	4641      	mov	r1, r8
 8008bea:	1851      	adds	r1, r2, r1
 8008bec:	6039      	str	r1, [r7, #0]
 8008bee:	4649      	mov	r1, r9
 8008bf0:	414b      	adcs	r3, r1
 8008bf2:	607b      	str	r3, [r7, #4]
 8008bf4:	f04f 0200 	mov.w	r2, #0
 8008bf8:	f04f 0300 	mov.w	r3, #0
 8008bfc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008c00:	4659      	mov	r1, fp
 8008c02:	00cb      	lsls	r3, r1, #3
 8008c04:	4651      	mov	r1, sl
 8008c06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c0a:	4651      	mov	r1, sl
 8008c0c:	00ca      	lsls	r2, r1, #3
 8008c0e:	4610      	mov	r0, r2
 8008c10:	4619      	mov	r1, r3
 8008c12:	4603      	mov	r3, r0
 8008c14:	4642      	mov	r2, r8
 8008c16:	189b      	adds	r3, r3, r2
 8008c18:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c1a:	464b      	mov	r3, r9
 8008c1c:	460a      	mov	r2, r1
 8008c1e:	eb42 0303 	adc.w	r3, r2, r3
 8008c22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	663b      	str	r3, [r7, #96]	; 0x60
 8008c2e:	667a      	str	r2, [r7, #100]	; 0x64
 8008c30:	f04f 0200 	mov.w	r2, #0
 8008c34:	f04f 0300 	mov.w	r3, #0
 8008c38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	008b      	lsls	r3, r1, #2
 8008c40:	4641      	mov	r1, r8
 8008c42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c46:	4641      	mov	r1, r8
 8008c48:	008a      	lsls	r2, r1, #2
 8008c4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008c4e:	f7f7 ffb3 	bl	8000bb8 <__aeabi_uldivmod>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4b0d      	ldr	r3, [pc, #52]	; (8008c8c <UART_SetConfig+0x4e4>)
 8008c58:	fba3 1302 	umull	r1, r3, r3, r2
 8008c5c:	095b      	lsrs	r3, r3, #5
 8008c5e:	2164      	movs	r1, #100	; 0x64
 8008c60:	fb01 f303 	mul.w	r3, r1, r3
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	011b      	lsls	r3, r3, #4
 8008c68:	3332      	adds	r3, #50	; 0x32
 8008c6a:	4a08      	ldr	r2, [pc, #32]	; (8008c8c <UART_SetConfig+0x4e4>)
 8008c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c70:	095b      	lsrs	r3, r3, #5
 8008c72:	f003 020f 	and.w	r2, r3, #15
 8008c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4422      	add	r2, r4
 8008c7e:	609a      	str	r2, [r3, #8]
}
 8008c80:	bf00      	nop
 8008c82:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008c86:	46bd      	mov	sp, r7
 8008c88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c8c:	51eb851f 	.word	0x51eb851f

08008c90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c90:	b084      	sub	sp, #16
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b084      	sub	sp, #16
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	f107 001c 	add.w	r0, r7, #28
 8008c9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d122      	bne.n	8008cee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d105      	bne.n	8008ce2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f001 fbee 	bl	800a4c4 <USB_CoreReset>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	73fb      	strb	r3, [r7, #15]
 8008cec:	e01a      	b.n	8008d24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 fbe2 	bl	800a4c4 <USB_CoreReset>
 8008d00:	4603      	mov	r3, r0
 8008d02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d106      	bne.n	8008d18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	639a      	str	r2, [r3, #56]	; 0x38
 8008d16:	e005      	b.n	8008d24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d10b      	bne.n	8008d42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f043 0206 	orr.w	r2, r3, #6
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f043 0220 	orr.w	r2, r3, #32
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d4e:	b004      	add	sp, #16
 8008d50:	4770      	bx	lr
	...

08008d54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b087      	sub	sp, #28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008d62:	79fb      	ldrb	r3, [r7, #7]
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d165      	bne.n	8008e34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	4a41      	ldr	r2, [pc, #260]	; (8008e70 <USB_SetTurnaroundTime+0x11c>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d906      	bls.n	8008d7e <USB_SetTurnaroundTime+0x2a>
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	4a40      	ldr	r2, [pc, #256]	; (8008e74 <USB_SetTurnaroundTime+0x120>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d202      	bcs.n	8008d7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008d78:	230f      	movs	r3, #15
 8008d7a:	617b      	str	r3, [r7, #20]
 8008d7c:	e062      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	4a3c      	ldr	r2, [pc, #240]	; (8008e74 <USB_SetTurnaroundTime+0x120>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d306      	bcc.n	8008d94 <USB_SetTurnaroundTime+0x40>
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	4a3b      	ldr	r2, [pc, #236]	; (8008e78 <USB_SetTurnaroundTime+0x124>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d202      	bcs.n	8008d94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008d8e:	230e      	movs	r3, #14
 8008d90:	617b      	str	r3, [r7, #20]
 8008d92:	e057      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	4a38      	ldr	r2, [pc, #224]	; (8008e78 <USB_SetTurnaroundTime+0x124>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d306      	bcc.n	8008daa <USB_SetTurnaroundTime+0x56>
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	4a37      	ldr	r2, [pc, #220]	; (8008e7c <USB_SetTurnaroundTime+0x128>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d202      	bcs.n	8008daa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008da4:	230d      	movs	r3, #13
 8008da6:	617b      	str	r3, [r7, #20]
 8008da8:	e04c      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	4a33      	ldr	r2, [pc, #204]	; (8008e7c <USB_SetTurnaroundTime+0x128>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d306      	bcc.n	8008dc0 <USB_SetTurnaroundTime+0x6c>
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	4a32      	ldr	r2, [pc, #200]	; (8008e80 <USB_SetTurnaroundTime+0x12c>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d802      	bhi.n	8008dc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008dba:	230c      	movs	r3, #12
 8008dbc:	617b      	str	r3, [r7, #20]
 8008dbe:	e041      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	4a2f      	ldr	r2, [pc, #188]	; (8008e80 <USB_SetTurnaroundTime+0x12c>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d906      	bls.n	8008dd6 <USB_SetTurnaroundTime+0x82>
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4a2e      	ldr	r2, [pc, #184]	; (8008e84 <USB_SetTurnaroundTime+0x130>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d802      	bhi.n	8008dd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008dd0:	230b      	movs	r3, #11
 8008dd2:	617b      	str	r3, [r7, #20]
 8008dd4:	e036      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	4a2a      	ldr	r2, [pc, #168]	; (8008e84 <USB_SetTurnaroundTime+0x130>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d906      	bls.n	8008dec <USB_SetTurnaroundTime+0x98>
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	4a29      	ldr	r2, [pc, #164]	; (8008e88 <USB_SetTurnaroundTime+0x134>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d802      	bhi.n	8008dec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008de6:	230a      	movs	r3, #10
 8008de8:	617b      	str	r3, [r7, #20]
 8008dea:	e02b      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	4a26      	ldr	r2, [pc, #152]	; (8008e88 <USB_SetTurnaroundTime+0x134>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d906      	bls.n	8008e02 <USB_SetTurnaroundTime+0xae>
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	4a25      	ldr	r2, [pc, #148]	; (8008e8c <USB_SetTurnaroundTime+0x138>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d202      	bcs.n	8008e02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008dfc:	2309      	movs	r3, #9
 8008dfe:	617b      	str	r3, [r7, #20]
 8008e00:	e020      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	4a21      	ldr	r2, [pc, #132]	; (8008e8c <USB_SetTurnaroundTime+0x138>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d306      	bcc.n	8008e18 <USB_SetTurnaroundTime+0xc4>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	4a20      	ldr	r2, [pc, #128]	; (8008e90 <USB_SetTurnaroundTime+0x13c>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d802      	bhi.n	8008e18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008e12:	2308      	movs	r3, #8
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	e015      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	4a1d      	ldr	r2, [pc, #116]	; (8008e90 <USB_SetTurnaroundTime+0x13c>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d906      	bls.n	8008e2e <USB_SetTurnaroundTime+0xda>
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	4a1c      	ldr	r2, [pc, #112]	; (8008e94 <USB_SetTurnaroundTime+0x140>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d202      	bcs.n	8008e2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008e28:	2307      	movs	r3, #7
 8008e2a:	617b      	str	r3, [r7, #20]
 8008e2c:	e00a      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008e2e:	2306      	movs	r3, #6
 8008e30:	617b      	str	r3, [r7, #20]
 8008e32:	e007      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008e34:	79fb      	ldrb	r3, [r7, #7]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d102      	bne.n	8008e40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008e3a:	2309      	movs	r3, #9
 8008e3c:	617b      	str	r3, [r7, #20]
 8008e3e:	e001      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008e40:	2309      	movs	r3, #9
 8008e42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	029b      	lsls	r3, r3, #10
 8008e58:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008e5c:	431a      	orrs	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	371c      	adds	r7, #28
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	00d8acbf 	.word	0x00d8acbf
 8008e74:	00e4e1c0 	.word	0x00e4e1c0
 8008e78:	00f42400 	.word	0x00f42400
 8008e7c:	01067380 	.word	0x01067380
 8008e80:	011a499f 	.word	0x011a499f
 8008e84:	01312cff 	.word	0x01312cff
 8008e88:	014ca43f 	.word	0x014ca43f
 8008e8c:	016e3600 	.word	0x016e3600
 8008e90:	01a6ab1f 	.word	0x01a6ab1f
 8008e94:	01e84800 	.word	0x01e84800

08008e98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f043 0201 	orr.w	r2, r3, #1
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b083      	sub	sp, #12
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	f023 0201 	bic.w	r2, r3, #1
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ef8:	78fb      	ldrb	r3, [r7, #3]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d115      	bne.n	8008f2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f0a:	2001      	movs	r0, #1
 8008f0c:	f7f9 fa86 	bl	800241c <HAL_Delay>
      ms++;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	3301      	adds	r3, #1
 8008f14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f001 fa45 	bl	800a3a6 <USB_GetMode>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d01e      	beq.n	8008f60 <USB_SetCurrentMode+0x84>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b31      	cmp	r3, #49	; 0x31
 8008f26:	d9f0      	bls.n	8008f0a <USB_SetCurrentMode+0x2e>
 8008f28:	e01a      	b.n	8008f60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f2a:	78fb      	ldrb	r3, [r7, #3]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d115      	bne.n	8008f5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f3c:	2001      	movs	r0, #1
 8008f3e:	f7f9 fa6d 	bl	800241c <HAL_Delay>
      ms++;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3301      	adds	r3, #1
 8008f46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f001 fa2c 	bl	800a3a6 <USB_GetMode>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d005      	beq.n	8008f60 <USB_SetCurrentMode+0x84>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b31      	cmp	r3, #49	; 0x31
 8008f58:	d9f0      	bls.n	8008f3c <USB_SetCurrentMode+0x60>
 8008f5a:	e001      	b.n	8008f60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e005      	b.n	8008f6c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2b32      	cmp	r3, #50	; 0x32
 8008f64:	d101      	bne.n	8008f6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e000      	b.n	8008f6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f74:	b084      	sub	sp, #16
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b086      	sub	sp, #24
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008f8e:	2300      	movs	r3, #0
 8008f90:	613b      	str	r3, [r7, #16]
 8008f92:	e009      	b.n	8008fa8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	3340      	adds	r3, #64	; 0x40
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4413      	add	r3, r2
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	613b      	str	r3, [r7, #16]
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	2b0e      	cmp	r3, #14
 8008fac:	d9f2      	bls.n	8008f94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d11c      	bne.n	8008fee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fc2:	f043 0302 	orr.w	r3, r3, #2
 8008fc6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fcc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	639a      	str	r2, [r3, #56]	; 0x38
 8008fec:	e00b      	b.n	8009006 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800900c:	461a      	mov	r2, r3
 800900e:	2300      	movs	r3, #0
 8009010:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009018:	4619      	mov	r1, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009020:	461a      	mov	r2, r3
 8009022:	680b      	ldr	r3, [r1, #0]
 8009024:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009028:	2b01      	cmp	r3, #1
 800902a:	d10c      	bne.n	8009046 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902e:	2b00      	cmp	r3, #0
 8009030:	d104      	bne.n	800903c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009032:	2100      	movs	r1, #0
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 f965 	bl	8009304 <USB_SetDevSpeed>
 800903a:	e008      	b.n	800904e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800903c:	2101      	movs	r1, #1
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f960 	bl	8009304 <USB_SetDevSpeed>
 8009044:	e003      	b.n	800904e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009046:	2103      	movs	r1, #3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f95b 	bl	8009304 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800904e:	2110      	movs	r1, #16
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f8f3 	bl	800923c <USB_FlushTxFifo>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f91f 	bl	80092a4 <USB_FlushRxFifo>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009076:	461a      	mov	r2, r3
 8009078:	2300      	movs	r3, #0
 800907a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009082:	461a      	mov	r2, r3
 8009084:	2300      	movs	r3, #0
 8009086:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908e:	461a      	mov	r2, r3
 8009090:	2300      	movs	r3, #0
 8009092:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009094:	2300      	movs	r3, #0
 8009096:	613b      	str	r3, [r7, #16]
 8009098:	e043      	b.n	8009122 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	015a      	lsls	r2, r3, #5
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	4413      	add	r3, r2
 80090a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090b0:	d118      	bne.n	80090e4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10a      	bne.n	80090ce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c4:	461a      	mov	r2, r3
 80090c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	e013      	b.n	80090f6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090da:	461a      	mov	r2, r3
 80090dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090e0:	6013      	str	r3, [r2, #0]
 80090e2:	e008      	b.n	80090f6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f0:	461a      	mov	r2, r3
 80090f2:	2300      	movs	r3, #0
 80090f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009102:	461a      	mov	r2, r3
 8009104:	2300      	movs	r3, #0
 8009106:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	4413      	add	r3, r2
 8009110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009114:	461a      	mov	r2, r3
 8009116:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800911a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	3301      	adds	r3, #1
 8009120:	613b      	str	r3, [r7, #16]
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	429a      	cmp	r2, r3
 8009128:	d3b7      	bcc.n	800909a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800912a:	2300      	movs	r3, #0
 800912c:	613b      	str	r3, [r7, #16]
 800912e:	e043      	b.n	80091b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009146:	d118      	bne.n	800917a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10a      	bne.n	8009164 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	4413      	add	r3, r2
 8009156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915a:	461a      	mov	r2, r3
 800915c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009160:	6013      	str	r3, [r2, #0]
 8009162:	e013      	b.n	800918c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009170:	461a      	mov	r2, r3
 8009172:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	e008      	b.n	800918c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	015a      	lsls	r2, r3, #5
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	4413      	add	r3, r2
 8009182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009186:	461a      	mov	r2, r3
 8009188:	2300      	movs	r3, #0
 800918a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	4413      	add	r3, r2
 8009194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009198:	461a      	mov	r2, r3
 800919a:	2300      	movs	r3, #0
 800919c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091aa:	461a      	mov	r2, r3
 80091ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	3301      	adds	r3, #1
 80091b6:	613b      	str	r3, [r7, #16]
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d3b7      	bcc.n	8009130 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80091e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d105      	bne.n	80091f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	f043 0210 	orr.w	r2, r3, #16
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	699a      	ldr	r2, [r3, #24]
 80091f8:	4b0f      	ldr	r3, [pc, #60]	; (8009238 <USB_DevInit+0x2c4>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009202:	2b00      	cmp	r3, #0
 8009204:	d005      	beq.n	8009212 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	f043 0208 	orr.w	r2, r3, #8
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009214:	2b01      	cmp	r3, #1
 8009216:	d107      	bne.n	8009228 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009220:	f043 0304 	orr.w	r3, r3, #4
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009228:	7dfb      	ldrb	r3, [r7, #23]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009234:	b004      	add	sp, #16
 8009236:	4770      	bx	lr
 8009238:	803c3800 	.word	0x803c3800

0800923c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009246:	2300      	movs	r3, #0
 8009248:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	3301      	adds	r3, #1
 800924e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4a13      	ldr	r2, [pc, #76]	; (80092a0 <USB_FlushTxFifo+0x64>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d901      	bls.n	800925c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	e01b      	b.n	8009294 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	daf2      	bge.n	800924a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009264:	2300      	movs	r3, #0
 8009266:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	019b      	lsls	r3, r3, #6
 800926c:	f043 0220 	orr.w	r2, r3, #32
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	3301      	adds	r3, #1
 8009278:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	4a08      	ldr	r2, [pc, #32]	; (80092a0 <USB_FlushTxFifo+0x64>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d901      	bls.n	8009286 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009282:	2303      	movs	r3, #3
 8009284:	e006      	b.n	8009294 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	f003 0320 	and.w	r3, r3, #32
 800928e:	2b20      	cmp	r3, #32
 8009290:	d0f0      	beq.n	8009274 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	00030d40 	.word	0x00030d40

080092a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092ac:	2300      	movs	r3, #0
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3301      	adds	r3, #1
 80092b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4a11      	ldr	r2, [pc, #68]	; (8009300 <USB_FlushRxFifo+0x5c>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d901      	bls.n	80092c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e018      	b.n	80092f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	daf2      	bge.n	80092b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2210      	movs	r2, #16
 80092d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	3301      	adds	r3, #1
 80092d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	4a08      	ldr	r2, [pc, #32]	; (8009300 <USB_FlushRxFifo+0x5c>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d901      	bls.n	80092e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e006      	b.n	80092f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	f003 0310 	and.w	r3, r3, #16
 80092ee:	2b10      	cmp	r3, #16
 80092f0:	d0f0      	beq.n	80092d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	00030d40 	.word	0x00030d40

08009304 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	78fb      	ldrb	r3, [r7, #3]
 800931e:	68f9      	ldr	r1, [r7, #12]
 8009320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009324:	4313      	orrs	r3, r2
 8009326:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009336:	b480      	push	{r7}
 8009338:	b087      	sub	sp, #28
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	f003 0306 	and.w	r3, r3, #6
 800934e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d102      	bne.n	800935c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009356:	2300      	movs	r3, #0
 8009358:	75fb      	strb	r3, [r7, #23]
 800935a:	e00a      	b.n	8009372 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2b02      	cmp	r3, #2
 8009360:	d002      	beq.n	8009368 <USB_GetDevSpeed+0x32>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b06      	cmp	r3, #6
 8009366:	d102      	bne.n	800936e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009368:	2302      	movs	r3, #2
 800936a:	75fb      	strb	r3, [r7, #23]
 800936c:	e001      	b.n	8009372 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800936e:	230f      	movs	r3, #15
 8009370:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009372:	7dfb      	ldrb	r3, [r7, #23]
}
 8009374:	4618      	mov	r0, r3
 8009376:	371c      	adds	r7, #28
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	785b      	ldrb	r3, [r3, #1]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d13a      	bne.n	8009412 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a2:	69da      	ldr	r2, [r3, #28]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	f003 030f 	and.w	r3, r3, #15
 80093ac:	2101      	movs	r1, #1
 80093ae:	fa01 f303 	lsl.w	r3, r1, r3
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	68f9      	ldr	r1, [r7, #12]
 80093b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093ba:	4313      	orrs	r3, r2
 80093bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d155      	bne.n	8009480 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	791b      	ldrb	r3, [r3, #4]
 80093ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80093f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	059b      	lsls	r3, r3, #22
 80093f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80093f8:	4313      	orrs	r3, r2
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	0151      	lsls	r1, r2, #5
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	440a      	add	r2, r1
 8009402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800940a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800940e:	6013      	str	r3, [r2, #0]
 8009410:	e036      	b.n	8009480 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009418:	69da      	ldr	r2, [r3, #28]
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	f003 030f 	and.w	r3, r3, #15
 8009422:	2101      	movs	r1, #1
 8009424:	fa01 f303 	lsl.w	r3, r1, r3
 8009428:	041b      	lsls	r3, r3, #16
 800942a:	68f9      	ldr	r1, [r7, #12]
 800942c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009430:	4313      	orrs	r3, r2
 8009432:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	015a      	lsls	r2, r3, #5
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	4413      	add	r3, r2
 800943c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d11a      	bne.n	8009480 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	4413      	add	r3, r2
 8009452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	791b      	ldrb	r3, [r3, #4]
 8009464:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009466:	430b      	orrs	r3, r1
 8009468:	4313      	orrs	r3, r2
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	0151      	lsls	r1, r2, #5
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	440a      	add	r2, r1
 8009472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800947a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800947e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
	...

08009490 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	785b      	ldrb	r3, [r3, #1]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d161      	bne.n	8009570 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	015a      	lsls	r2, r3, #5
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4413      	add	r3, r2
 80094b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094c2:	d11f      	bne.n	8009504 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	015a      	lsls	r2, r3, #5
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	4413      	add	r3, r2
 80094cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	0151      	lsls	r1, r2, #5
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	440a      	add	r2, r1
 80094da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	0151      	lsls	r1, r2, #5
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	440a      	add	r2, r1
 80094fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009502:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800950a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	f003 030f 	and.w	r3, r3, #15
 8009514:	2101      	movs	r1, #1
 8009516:	fa01 f303 	lsl.w	r3, r1, r3
 800951a:	b29b      	uxth	r3, r3
 800951c:	43db      	mvns	r3, r3
 800951e:	68f9      	ldr	r1, [r7, #12]
 8009520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009524:	4013      	ands	r3, r2
 8009526:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800952e:	69da      	ldr	r2, [r3, #28]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	f003 030f 	and.w	r3, r3, #15
 8009538:	2101      	movs	r1, #1
 800953a:	fa01 f303 	lsl.w	r3, r1, r3
 800953e:	b29b      	uxth	r3, r3
 8009540:	43db      	mvns	r3, r3
 8009542:	68f9      	ldr	r1, [r7, #12]
 8009544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009548:	4013      	ands	r3, r2
 800954a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	015a      	lsls	r2, r3, #5
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	4413      	add	r3, r2
 8009554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	0159      	lsls	r1, r3, #5
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	440b      	add	r3, r1
 8009562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009566:	4619      	mov	r1, r3
 8009568:	4b35      	ldr	r3, [pc, #212]	; (8009640 <USB_DeactivateEndpoint+0x1b0>)
 800956a:	4013      	ands	r3, r2
 800956c:	600b      	str	r3, [r1, #0]
 800956e:	e060      	b.n	8009632 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009586:	d11f      	bne.n	80095c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	0151      	lsls	r1, r2, #5
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	440a      	add	r2, r1
 800959e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80095a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	015a      	lsls	r2, r3, #5
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	0151      	lsls	r1, r2, #5
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	440a      	add	r2, r1
 80095be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	f003 030f 	and.w	r3, r3, #15
 80095d8:	2101      	movs	r1, #1
 80095da:	fa01 f303 	lsl.w	r3, r1, r3
 80095de:	041b      	lsls	r3, r3, #16
 80095e0:	43db      	mvns	r3, r3
 80095e2:	68f9      	ldr	r1, [r7, #12]
 80095e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095e8:	4013      	ands	r3, r2
 80095ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095f2:	69da      	ldr	r2, [r3, #28]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	f003 030f 	and.w	r3, r3, #15
 80095fc:	2101      	movs	r1, #1
 80095fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009602:	041b      	lsls	r3, r3, #16
 8009604:	43db      	mvns	r3, r3
 8009606:	68f9      	ldr	r1, [r7, #12]
 8009608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800960c:	4013      	ands	r3, r2
 800960e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	0159      	lsls	r1, r3, #5
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	440b      	add	r3, r1
 8009626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962a:	4619      	mov	r1, r3
 800962c:	4b05      	ldr	r3, [pc, #20]	; (8009644 <USB_DeactivateEndpoint+0x1b4>)
 800962e:	4013      	ands	r3, r2
 8009630:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3714      	adds	r7, #20
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	ec337800 	.word	0xec337800
 8009644:	eff37800 	.word	0xeff37800

08009648 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08a      	sub	sp, #40	; 0x28
 800964c:	af02      	add	r7, sp, #8
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	4613      	mov	r3, r2
 8009654:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	785b      	ldrb	r3, [r3, #1]
 8009664:	2b01      	cmp	r3, #1
 8009666:	f040 815c 	bne.w	8009922 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d132      	bne.n	80096d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	69ba      	ldr	r2, [r7, #24]
 8009682:	0151      	lsls	r1, r2, #5
 8009684:	69fa      	ldr	r2, [r7, #28]
 8009686:	440a      	add	r2, r1
 8009688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800968c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009690:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009694:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	69ba      	ldr	r2, [r7, #24]
 80096a6:	0151      	lsls	r1, r2, #5
 80096a8:	69fa      	ldr	r2, [r7, #28]
 80096aa:	440a      	add	r2, r1
 80096ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	015a      	lsls	r2, r3, #5
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	4413      	add	r3, r2
 80096be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	69ba      	ldr	r2, [r7, #24]
 80096c6:	0151      	lsls	r1, r2, #5
 80096c8:	69fa      	ldr	r2, [r7, #28]
 80096ca:	440a      	add	r2, r1
 80096cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096d0:	0cdb      	lsrs	r3, r3, #19
 80096d2:	04db      	lsls	r3, r3, #19
 80096d4:	6113      	str	r3, [r2, #16]
 80096d6:	e074      	b.n	80097c2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	015a      	lsls	r2, r3, #5
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	4413      	add	r3, r2
 80096e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	69ba      	ldr	r2, [r7, #24]
 80096e8:	0151      	lsls	r1, r2, #5
 80096ea:	69fa      	ldr	r2, [r7, #28]
 80096ec:	440a      	add	r2, r1
 80096ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096f2:	0cdb      	lsrs	r3, r3, #19
 80096f4:	04db      	lsls	r3, r3, #19
 80096f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	69ba      	ldr	r2, [r7, #24]
 8009708:	0151      	lsls	r1, r2, #5
 800970a:	69fa      	ldr	r2, [r7, #28]
 800970c:	440a      	add	r2, r1
 800970e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009712:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009716:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800971a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009728:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	6999      	ldr	r1, [r3, #24]
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	440b      	add	r3, r1
 8009734:	1e59      	subs	r1, r3, #1
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	fbb1 f3f3 	udiv	r3, r1, r3
 800973e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009740:	4b9d      	ldr	r3, [pc, #628]	; (80099b8 <USB_EPStartXfer+0x370>)
 8009742:	400b      	ands	r3, r1
 8009744:	69b9      	ldr	r1, [r7, #24]
 8009746:	0148      	lsls	r0, r1, #5
 8009748:	69f9      	ldr	r1, [r7, #28]
 800974a:	4401      	add	r1, r0
 800974c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009750:	4313      	orrs	r3, r2
 8009752:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	015a      	lsls	r2, r3, #5
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	4413      	add	r3, r2
 800975c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009760:	691a      	ldr	r2, [r3, #16]
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800976a:	69b9      	ldr	r1, [r7, #24]
 800976c:	0148      	lsls	r0, r1, #5
 800976e:	69f9      	ldr	r1, [r7, #28]
 8009770:	4401      	add	r1, r0
 8009772:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009776:	4313      	orrs	r3, r2
 8009778:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	791b      	ldrb	r3, [r3, #4]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d11f      	bne.n	80097c2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	0151      	lsls	r1, r2, #5
 8009794:	69fa      	ldr	r2, [r7, #28]
 8009796:	440a      	add	r2, r1
 8009798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800979c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80097a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	69ba      	ldr	r2, [r7, #24]
 80097b2:	0151      	lsls	r1, r2, #5
 80097b4:	69fa      	ldr	r2, [r7, #28]
 80097b6:	440a      	add	r2, r1
 80097b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80097c2:	79fb      	ldrb	r3, [r7, #7]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d14b      	bne.n	8009860 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d009      	beq.n	80097e4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097dc:	461a      	mov	r2, r3
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	791b      	ldrb	r3, [r3, #4]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d128      	bne.n	800983e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d110      	bne.n	800981e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	4413      	add	r3, r2
 8009804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	69ba      	ldr	r2, [r7, #24]
 800980c:	0151      	lsls	r1, r2, #5
 800980e:	69fa      	ldr	r2, [r7, #28]
 8009810:	440a      	add	r2, r1
 8009812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009816:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800981a:	6013      	str	r3, [r2, #0]
 800981c:	e00f      	b.n	800983e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	4413      	add	r3, r2
 8009826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	69ba      	ldr	r2, [r7, #24]
 800982e:	0151      	lsls	r1, r2, #5
 8009830:	69fa      	ldr	r2, [r7, #28]
 8009832:	440a      	add	r2, r1
 8009834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800983c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	015a      	lsls	r2, r3, #5
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	4413      	add	r3, r2
 8009846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	69ba      	ldr	r2, [r7, #24]
 800984e:	0151      	lsls	r1, r2, #5
 8009850:	69fa      	ldr	r2, [r7, #28]
 8009852:	440a      	add	r2, r1
 8009854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009858:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800985c:	6013      	str	r3, [r2, #0]
 800985e:	e133      	b.n	8009ac8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	4413      	add	r3, r2
 8009868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	69ba      	ldr	r2, [r7, #24]
 8009870:	0151      	lsls	r1, r2, #5
 8009872:	69fa      	ldr	r2, [r7, #28]
 8009874:	440a      	add	r2, r1
 8009876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800987a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800987e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	791b      	ldrb	r3, [r3, #4]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d015      	beq.n	80098b4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	699b      	ldr	r3, [r3, #24]
 800988c:	2b00      	cmp	r3, #0
 800988e:	f000 811b 	beq.w	8009ac8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	f003 030f 	and.w	r3, r3, #15
 80098a2:	2101      	movs	r1, #1
 80098a4:	fa01 f303 	lsl.w	r3, r1, r3
 80098a8:	69f9      	ldr	r1, [r7, #28]
 80098aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098ae:	4313      	orrs	r3, r2
 80098b0:	634b      	str	r3, [r1, #52]	; 0x34
 80098b2:	e109      	b.n	8009ac8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d110      	bne.n	80098e6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	015a      	lsls	r2, r3, #5
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	4413      	add	r3, r2
 80098cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	69ba      	ldr	r2, [r7, #24]
 80098d4:	0151      	lsls	r1, r2, #5
 80098d6:	69fa      	ldr	r2, [r7, #28]
 80098d8:	440a      	add	r2, r1
 80098da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	e00f      	b.n	8009906 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	015a      	lsls	r2, r3, #5
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	4413      	add	r3, r2
 80098ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	69ba      	ldr	r2, [r7, #24]
 80098f6:	0151      	lsls	r1, r2, #5
 80098f8:	69fa      	ldr	r2, [r7, #28]
 80098fa:	440a      	add	r2, r1
 80098fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009904:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	6919      	ldr	r1, [r3, #16]
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	781a      	ldrb	r2, [r3, #0]
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	b298      	uxth	r0, r3
 8009914:	79fb      	ldrb	r3, [r7, #7]
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	4603      	mov	r3, r0
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 fade 	bl	8009edc <USB_WritePacket>
 8009920:	e0d2      	b.n	8009ac8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	015a      	lsls	r2, r3, #5
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	4413      	add	r3, r2
 800992a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	69ba      	ldr	r2, [r7, #24]
 8009932:	0151      	lsls	r1, r2, #5
 8009934:	69fa      	ldr	r2, [r7, #28]
 8009936:	440a      	add	r2, r1
 8009938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800993c:	0cdb      	lsrs	r3, r3, #19
 800993e:	04db      	lsls	r3, r3, #19
 8009940:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	4413      	add	r3, r2
 800994a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	69ba      	ldr	r2, [r7, #24]
 8009952:	0151      	lsls	r1, r2, #5
 8009954:	69fa      	ldr	r2, [r7, #28]
 8009956:	440a      	add	r2, r1
 8009958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800995c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009960:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009964:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d126      	bne.n	80099bc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	015a      	lsls	r2, r3, #5
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	4413      	add	r3, r2
 8009976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800997a:	691a      	ldr	r2, [r3, #16]
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009984:	69b9      	ldr	r1, [r7, #24]
 8009986:	0148      	lsls	r0, r1, #5
 8009988:	69f9      	ldr	r1, [r7, #28]
 800998a:	4401      	add	r1, r0
 800998c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009990:	4313      	orrs	r3, r2
 8009992:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	69ba      	ldr	r2, [r7, #24]
 80099a4:	0151      	lsls	r1, r2, #5
 80099a6:	69fa      	ldr	r2, [r7, #28]
 80099a8:	440a      	add	r2, r1
 80099aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099b2:	6113      	str	r3, [r2, #16]
 80099b4:	e03a      	b.n	8009a2c <USB_EPStartXfer+0x3e4>
 80099b6:	bf00      	nop
 80099b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	699a      	ldr	r2, [r3, #24]
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	4413      	add	r3, r2
 80099c6:	1e5a      	subs	r2, r3, #1
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	8afa      	ldrh	r2, [r7, #22]
 80099d8:	fb03 f202 	mul.w	r2, r3, r2
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ec:	691a      	ldr	r2, [r3, #16]
 80099ee:	8afb      	ldrh	r3, [r7, #22]
 80099f0:	04d9      	lsls	r1, r3, #19
 80099f2:	4b38      	ldr	r3, [pc, #224]	; (8009ad4 <USB_EPStartXfer+0x48c>)
 80099f4:	400b      	ands	r3, r1
 80099f6:	69b9      	ldr	r1, [r7, #24]
 80099f8:	0148      	lsls	r0, r1, #5
 80099fa:	69f9      	ldr	r1, [r7, #28]
 80099fc:	4401      	add	r1, r0
 80099fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a02:	4313      	orrs	r3, r2
 8009a04:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a12:	691a      	ldr	r2, [r3, #16]
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	69db      	ldr	r3, [r3, #28]
 8009a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a1c:	69b9      	ldr	r1, [r7, #24]
 8009a1e:	0148      	lsls	r0, r1, #5
 8009a20:	69f9      	ldr	r1, [r7, #28]
 8009a22:	4401      	add	r1, r0
 8009a24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009a2c:	79fb      	ldrb	r3, [r7, #7]
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d10d      	bne.n	8009a4e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d009      	beq.n	8009a4e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	6919      	ldr	r1, [r3, #16]
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	015a      	lsls	r2, r3, #5
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a4a:	460a      	mov	r2, r1
 8009a4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	791b      	ldrb	r3, [r3, #4]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d128      	bne.n	8009aa8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d110      	bne.n	8009a88 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	0151      	lsls	r1, r2, #5
 8009a78:	69fa      	ldr	r2, [r7, #28]
 8009a7a:	440a      	add	r2, r1
 8009a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	e00f      	b.n	8009aa8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	015a      	lsls	r2, r3, #5
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	69ba      	ldr	r2, [r7, #24]
 8009a98:	0151      	lsls	r1, r2, #5
 8009a9a:	69fa      	ldr	r2, [r7, #28]
 8009a9c:	440a      	add	r2, r1
 8009a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aa6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	69ba      	ldr	r2, [r7, #24]
 8009ab8:	0151      	lsls	r1, r2, #5
 8009aba:	69fa      	ldr	r2, [r7, #28]
 8009abc:	440a      	add	r2, r1
 8009abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ac2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ac6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3720      	adds	r7, #32
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	1ff80000 	.word	0x1ff80000

08009ad8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b087      	sub	sp, #28
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	785b      	ldrb	r3, [r3, #1]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	f040 80ce 	bne.w	8009c96 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d132      	bne.n	8009b68 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	0151      	lsls	r1, r2, #5
 8009b14:	697a      	ldr	r2, [r7, #20]
 8009b16:	440a      	add	r2, r1
 8009b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	015a      	lsls	r2, r3, #5
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	0151      	lsls	r1, r2, #5
 8009b38:	697a      	ldr	r2, [r7, #20]
 8009b3a:	440a      	add	r2, r1
 8009b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	015a      	lsls	r2, r3, #5
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	0151      	lsls	r1, r2, #5
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	440a      	add	r2, r1
 8009b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b60:	0cdb      	lsrs	r3, r3, #19
 8009b62:	04db      	lsls	r3, r3, #19
 8009b64:	6113      	str	r3, [r2, #16]
 8009b66:	e04e      	b.n	8009c06 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	015a      	lsls	r2, r3, #5
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	4413      	add	r3, r2
 8009b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	0151      	lsls	r1, r2, #5
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	440a      	add	r2, r1
 8009b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b82:	0cdb      	lsrs	r3, r3, #19
 8009b84:	04db      	lsls	r3, r3, #19
 8009b86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	0151      	lsls	r1, r2, #5
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	440a      	add	r2, r1
 8009b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ba6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009baa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	699a      	ldr	r2, [r3, #24]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d903      	bls.n	8009bc0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	68da      	ldr	r2, [r3, #12]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	015a      	lsls	r2, r3, #5
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	0151      	lsls	r1, r2, #5
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	440a      	add	r2, r1
 8009bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009bde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	015a      	lsls	r2, r3, #5
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bec:	691a      	ldr	r2, [r3, #16]
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bf6:	6939      	ldr	r1, [r7, #16]
 8009bf8:	0148      	lsls	r0, r1, #5
 8009bfa:	6979      	ldr	r1, [r7, #20]
 8009bfc:	4401      	add	r1, r0
 8009bfe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009c02:	4313      	orrs	r3, r2
 8009c04:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009c06:	79fb      	ldrb	r3, [r7, #7]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d11e      	bne.n	8009c4a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	695b      	ldr	r3, [r3, #20]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d009      	beq.n	8009c28 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c20:	461a      	mov	r2, r3
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	015a      	lsls	r2, r3, #5
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	4413      	add	r3, r2
 8009c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	0151      	lsls	r1, r2, #5
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	440a      	add	r2, r1
 8009c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c46:	6013      	str	r3, [r2, #0]
 8009c48:	e097      	b.n	8009d7a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	015a      	lsls	r2, r3, #5
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	4413      	add	r3, r2
 8009c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	0151      	lsls	r1, r2, #5
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	440a      	add	r2, r1
 8009c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c68:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f000 8083 	beq.w	8009d7a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	f003 030f 	and.w	r3, r3, #15
 8009c84:	2101      	movs	r1, #1
 8009c86:	fa01 f303 	lsl.w	r3, r1, r3
 8009c8a:	6979      	ldr	r1, [r7, #20]
 8009c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c90:	4313      	orrs	r3, r2
 8009c92:	634b      	str	r3, [r1, #52]	; 0x34
 8009c94:	e071      	b.n	8009d7a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	015a      	lsls	r2, r3, #5
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	0151      	lsls	r1, r2, #5
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	440a      	add	r2, r1
 8009cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cb0:	0cdb      	lsrs	r3, r3, #19
 8009cb2:	04db      	lsls	r3, r3, #19
 8009cb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	015a      	lsls	r2, r3, #5
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	0151      	lsls	r1, r2, #5
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	440a      	add	r2, r1
 8009ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009cd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009cd8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	68da      	ldr	r2, [r3, #12]
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	015a      	lsls	r2, r3, #5
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	0151      	lsls	r1, r2, #5
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	440a      	add	r2, r1
 8009d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1e:	691a      	ldr	r2, [r3, #16]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	69db      	ldr	r3, [r3, #28]
 8009d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d28:	6939      	ldr	r1, [r7, #16]
 8009d2a:	0148      	lsls	r0, r1, #5
 8009d2c:	6979      	ldr	r1, [r7, #20]
 8009d2e:	4401      	add	r1, r0
 8009d30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d34:	4313      	orrs	r3, r2
 8009d36:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009d38:	79fb      	ldrb	r3, [r7, #7]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d10d      	bne.n	8009d5a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d009      	beq.n	8009d5a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	6919      	ldr	r1, [r3, #16]
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	015a      	lsls	r2, r3, #5
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	4413      	add	r3, r2
 8009d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d56:	460a      	mov	r2, r1
 8009d58:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	015a      	lsls	r2, r3, #5
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	4413      	add	r3, r2
 8009d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	0151      	lsls	r1, r2, #5
 8009d6c:	697a      	ldr	r2, [r7, #20]
 8009d6e:	440a      	add	r2, r1
 8009d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	371c      	adds	r7, #28
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d92:	2300      	movs	r3, #0
 8009d94:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	785b      	ldrb	r3, [r3, #1]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d14a      	bne.n	8009e3c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dbe:	f040 8086 	bne.w	8009ece <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	015a      	lsls	r2, r3, #5
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	4413      	add	r3, r2
 8009dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	7812      	ldrb	r2, [r2, #0]
 8009dd6:	0151      	lsls	r1, r2, #5
 8009dd8:	693a      	ldr	r2, [r7, #16]
 8009dda:	440a      	add	r2, r1
 8009ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009de0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009de4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	7812      	ldrb	r2, [r2, #0]
 8009dfa:	0151      	lsls	r1, r2, #5
 8009dfc:	693a      	ldr	r2, [r7, #16]
 8009dfe:	440a      	add	r2, r1
 8009e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f242 7210 	movw	r2, #10000	; 0x2710
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d902      	bls.n	8009e20 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	75fb      	strb	r3, [r7, #23]
          break;
 8009e1e:	e056      	b.n	8009ece <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	015a      	lsls	r2, r3, #5
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	4413      	add	r3, r2
 8009e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e38:	d0e7      	beq.n	8009e0a <USB_EPStopXfer+0x82>
 8009e3a:	e048      	b.n	8009ece <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	015a      	lsls	r2, r3, #5
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	4413      	add	r3, r2
 8009e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e54:	d13b      	bne.n	8009ece <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	015a      	lsls	r2, r3, #5
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	4413      	add	r3, r2
 8009e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	7812      	ldrb	r2, [r2, #0]
 8009e6a:	0151      	lsls	r1, r2, #5
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	440a      	add	r2, r1
 8009e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e78:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	683a      	ldr	r2, [r7, #0]
 8009e8c:	7812      	ldrb	r2, [r2, #0]
 8009e8e:	0151      	lsls	r1, r2, #5
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	440a      	add	r2, r1
 8009e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f242 7210 	movw	r2, #10000	; 0x2710
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d902      	bls.n	8009eb4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8009eb2:	e00c      	b.n	8009ece <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	015a      	lsls	r2, r3, #5
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ecc:	d0e7      	beq.n	8009e9e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	371c      	adds	r7, #28
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b089      	sub	sp, #36	; 0x24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	4611      	mov	r1, r2
 8009ee8:	461a      	mov	r2, r3
 8009eea:	460b      	mov	r3, r1
 8009eec:	71fb      	strb	r3, [r7, #7]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009efa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d123      	bne.n	8009f4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009f02:	88bb      	ldrh	r3, [r7, #4]
 8009f04:	3303      	adds	r3, #3
 8009f06:	089b      	lsrs	r3, r3, #2
 8009f08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	61bb      	str	r3, [r7, #24]
 8009f0e:	e018      	b.n	8009f42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009f10:	79fb      	ldrb	r3, [r7, #7]
 8009f12:	031a      	lsls	r2, r3, #12
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	4413      	add	r3, r2
 8009f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	3301      	adds	r3, #1
 8009f28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	3301      	adds	r3, #1
 8009f34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	61bb      	str	r3, [r7, #24]
 8009f42:	69ba      	ldr	r2, [r7, #24]
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d3e2      	bcc.n	8009f10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3724      	adds	r7, #36	; 0x24
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b08b      	sub	sp, #44	; 0x2c
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	4613      	mov	r3, r2
 8009f64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009f6e:	88fb      	ldrh	r3, [r7, #6]
 8009f70:	089b      	lsrs	r3, r3, #2
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009f76:	88fb      	ldrh	r3, [r7, #6]
 8009f78:	f003 0303 	and.w	r3, r3, #3
 8009f7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009f7e:	2300      	movs	r3, #0
 8009f80:	623b      	str	r3, [r7, #32]
 8009f82:	e014      	b.n	8009fae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	3301      	adds	r3, #1
 8009f94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	3301      	adds	r3, #1
 8009f9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	3301      	adds	r3, #1
 8009fac:	623b      	str	r3, [r7, #32]
 8009fae:	6a3a      	ldr	r2, [r7, #32]
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d3e6      	bcc.n	8009f84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009fb6:	8bfb      	ldrh	r3, [r7, #30]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d01e      	beq.n	8009ffa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	f107 0310 	add.w	r3, r7, #16
 8009fcc:	6812      	ldr	r2, [r2, #0]
 8009fce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	6a3b      	ldr	r3, [r7, #32]
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	00db      	lsls	r3, r3, #3
 8009fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	701a      	strb	r2, [r3, #0]
      i++;
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	623b      	str	r3, [r7, #32]
      pDest++;
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fea:	3301      	adds	r3, #1
 8009fec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009fee:	8bfb      	ldrh	r3, [r7, #30]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009ff4:	8bfb      	ldrh	r3, [r7, #30]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1ea      	bne.n	8009fd0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	372c      	adds	r7, #44	; 0x2c
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	785b      	ldrb	r3, [r3, #1]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d12c      	bne.n	800a07e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	015a      	lsls	r2, r3, #5
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	4413      	add	r3, r2
 800a02c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	db12      	blt.n	800a05c <USB_EPSetStall+0x54>
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00f      	beq.n	800a05c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	015a      	lsls	r2, r3, #5
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	4413      	add	r3, r2
 800a044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	0151      	lsls	r1, r2, #5
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	440a      	add	r2, r1
 800a052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a056:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a05a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	015a      	lsls	r2, r3, #5
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	4413      	add	r3, r2
 800a064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	0151      	lsls	r1, r2, #5
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	440a      	add	r2, r1
 800a072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a076:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a07a:	6013      	str	r3, [r2, #0]
 800a07c:	e02b      	b.n	800a0d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	015a      	lsls	r2, r3, #5
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	4413      	add	r3, r2
 800a086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	db12      	blt.n	800a0b6 <USB_EPSetStall+0xae>
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00f      	beq.n	800a0b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	015a      	lsls	r2, r3, #5
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	4413      	add	r3, r2
 800a09e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	0151      	lsls	r1, r2, #5
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	440a      	add	r2, r1
 800a0ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a0b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	0151      	lsls	r1, r2, #5
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	440a      	add	r2, r1
 800a0cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	785b      	ldrb	r3, [r3, #1]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d128      	bne.n	800a152 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	015a      	lsls	r2, r3, #5
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	4413      	add	r3, r2
 800a108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68ba      	ldr	r2, [r7, #8]
 800a110:	0151      	lsls	r1, r2, #5
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	440a      	add	r2, r1
 800a116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a11a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a11e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	791b      	ldrb	r3, [r3, #4]
 800a124:	2b03      	cmp	r3, #3
 800a126:	d003      	beq.n	800a130 <USB_EPClearStall+0x4c>
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	791b      	ldrb	r3, [r3, #4]
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d138      	bne.n	800a1a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	0151      	lsls	r1, r2, #5
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	440a      	add	r2, r1
 800a146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a14a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	e027      	b.n	800a1a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	015a      	lsls	r2, r3, #5
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	4413      	add	r3, r2
 800a15a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	0151      	lsls	r1, r2, #5
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	440a      	add	r2, r1
 800a168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a16c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a170:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	791b      	ldrb	r3, [r3, #4]
 800a176:	2b03      	cmp	r3, #3
 800a178:	d003      	beq.n	800a182 <USB_EPClearStall+0x9e>
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	791b      	ldrb	r3, [r3, #4]
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d10f      	bne.n	800a1a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	0151      	lsls	r1, r2, #5
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	440a      	add	r2, r1
 800a198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a19c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3714      	adds	r7, #20
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a1d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	78fb      	ldrb	r3, [r7, #3]
 800a1de:	011b      	lsls	r3, r3, #4
 800a1e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a1e4:	68f9      	ldr	r1, [r7, #12]
 800a1e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3714      	adds	r7, #20
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a216:	f023 0303 	bic.w	r3, r3, #3
 800a21a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a22a:	f023 0302 	bic.w	r3, r3, #2
 800a22e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3714      	adds	r7, #20
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a23e:	b480      	push	{r7}
 800a240:	b085      	sub	sp, #20
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a258:	f023 0303 	bic.w	r3, r3, #3
 800a25c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a26c:	f043 0302 	orr.w	r3, r3, #2
 800a270:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3714      	adds	r7, #20
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	695b      	ldr	r3, [r3, #20]
 800a28c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	68fa      	ldr	r2, [r7, #12]
 800a294:	4013      	ands	r3, r2
 800a296:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a298:	68fb      	ldr	r3, [r7, #12]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3714      	adds	r7, #20
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b085      	sub	sp, #20
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2c2:	69db      	ldr	r3, [r3, #28]
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	0c1b      	lsrs	r3, r3, #16
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b085      	sub	sp, #20
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2f6:	69db      	ldr	r3, [r3, #28]
 800a2f8:	68ba      	ldr	r2, [r7, #8]
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	b29b      	uxth	r3, r3
}
 800a302:	4618      	mov	r0, r3
 800a304:	3714      	adds	r7, #20
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a30e:	b480      	push	{r7}
 800a310:	b085      	sub	sp, #20
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	460b      	mov	r3, r1
 800a318:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a31e:	78fb      	ldrb	r3, [r7, #3]
 800a320:	015a      	lsls	r2, r3, #5
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	4413      	add	r3, r2
 800a326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	4013      	ands	r3, r2
 800a33a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a33c:	68bb      	ldr	r3, [r7, #8]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b087      	sub	sp, #28
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	460b      	mov	r3, r1
 800a354:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a36c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a36e:	78fb      	ldrb	r3, [r7, #3]
 800a370:	f003 030f 	and.w	r3, r3, #15
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	fa22 f303 	lsr.w	r3, r2, r3
 800a37a:	01db      	lsls	r3, r3, #7
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	4313      	orrs	r3, r2
 800a382:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	015a      	lsls	r2, r3, #5
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	4413      	add	r3, r2
 800a38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	4013      	ands	r3, r2
 800a396:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a398:	68bb      	ldr	r3, [r7, #8]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	371c      	adds	r7, #28
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	f003 0301 	and.w	r3, r3, #1
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	370c      	adds	r7, #12
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr

0800a3c2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a3c2:	b480      	push	{r7}
 800a3c4:	b085      	sub	sp, #20
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a3e0:	f023 0307 	bic.w	r3, r3, #7
 800a3e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	460b      	mov	r3, r1
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	333c      	adds	r3, #60	; 0x3c
 800a41e:	3304      	adds	r3, #4
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	4a26      	ldr	r2, [pc, #152]	; (800a4c0 <USB_EP0_OutStart+0xb8>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d90a      	bls.n	800a442 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a438:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a43c:	d101      	bne.n	800a442 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	e037      	b.n	800a4b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a448:	461a      	mov	r2, r3
 800a44a:	2300      	movs	r3, #0
 800a44c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a45c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a460:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a470:	f043 0318 	orr.w	r3, r3, #24
 800a474:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a484:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a488:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a48a:	7afb      	ldrb	r3, [r7, #11]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d10f      	bne.n	800a4b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a496:	461a      	mov	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a4ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	371c      	adds	r7, #28
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	4f54300a 	.word	0x4f54300a

0800a4c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	4a13      	ldr	r2, [pc, #76]	; (800a528 <USB_CoreReset+0x64>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d901      	bls.n	800a4e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	e01b      	b.n	800a51a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	daf2      	bge.n	800a4d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	f043 0201 	orr.w	r2, r3, #1
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	4a09      	ldr	r2, [pc, #36]	; (800a528 <USB_CoreReset+0x64>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d901      	bls.n	800a50c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e006      	b.n	800a51a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	f003 0301 	and.w	r3, r3, #1
 800a514:	2b01      	cmp	r3, #1
 800a516:	d0f0      	beq.n	800a4fa <USB_CoreReset+0x36>

  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	00030d40 	.word	0x00030d40

0800a52c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	460b      	mov	r3, r1
 800a536:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a538:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a53c:	f002 fc1e 	bl	800cd7c <USBD_static_malloc>
 800a540:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d109      	bne.n	800a55c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	32b0      	adds	r2, #176	; 0xb0
 800a552:	2100      	movs	r1, #0
 800a554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a558:	2302      	movs	r3, #2
 800a55a:	e0d4      	b.n	800a706 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a55c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a560:	2100      	movs	r1, #0
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f003 f9b9 	bl	800d8da <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	32b0      	adds	r2, #176	; 0xb0
 800a572:	68f9      	ldr	r1, [r7, #12]
 800a574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	32b0      	adds	r2, #176	; 0xb0
 800a582:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	7c1b      	ldrb	r3, [r3, #16]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d138      	bne.n	800a606 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a594:	4b5e      	ldr	r3, [pc, #376]	; (800a710 <USBD_CDC_Init+0x1e4>)
 800a596:	7819      	ldrb	r1, [r3, #0]
 800a598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a59c:	2202      	movs	r2, #2
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f002 fac9 	bl	800cb36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a5a4:	4b5a      	ldr	r3, [pc, #360]	; (800a710 <USBD_CDC_Init+0x1e4>)
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	f003 020f 	and.w	r2, r3, #15
 800a5ac:	6879      	ldr	r1, [r7, #4]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	4413      	add	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	440b      	add	r3, r1
 800a5b8:	3324      	adds	r3, #36	; 0x24
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a5be:	4b55      	ldr	r3, [pc, #340]	; (800a714 <USBD_CDC_Init+0x1e8>)
 800a5c0:	7819      	ldrb	r1, [r3, #0]
 800a5c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f002 fab4 	bl	800cb36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a5ce:	4b51      	ldr	r3, [pc, #324]	; (800a714 <USBD_CDC_Init+0x1e8>)
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	f003 020f 	and.w	r2, r3, #15
 800a5d6:	6879      	ldr	r1, [r7, #4]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4413      	add	r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	440b      	add	r3, r1
 800a5e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a5ea:	4b4b      	ldr	r3, [pc, #300]	; (800a718 <USBD_CDC_Init+0x1ec>)
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	f003 020f 	and.w	r2, r3, #15
 800a5f2:	6879      	ldr	r1, [r7, #4]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	440b      	add	r3, r1
 800a5fe:	3326      	adds	r3, #38	; 0x26
 800a600:	2210      	movs	r2, #16
 800a602:	801a      	strh	r2, [r3, #0]
 800a604:	e035      	b.n	800a672 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a606:	4b42      	ldr	r3, [pc, #264]	; (800a710 <USBD_CDC_Init+0x1e4>)
 800a608:	7819      	ldrb	r1, [r3, #0]
 800a60a:	2340      	movs	r3, #64	; 0x40
 800a60c:	2202      	movs	r2, #2
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f002 fa91 	bl	800cb36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a614:	4b3e      	ldr	r3, [pc, #248]	; (800a710 <USBD_CDC_Init+0x1e4>)
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	f003 020f 	and.w	r2, r3, #15
 800a61c:	6879      	ldr	r1, [r7, #4]
 800a61e:	4613      	mov	r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	4413      	add	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	440b      	add	r3, r1
 800a628:	3324      	adds	r3, #36	; 0x24
 800a62a:	2201      	movs	r2, #1
 800a62c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a62e:	4b39      	ldr	r3, [pc, #228]	; (800a714 <USBD_CDC_Init+0x1e8>)
 800a630:	7819      	ldrb	r1, [r3, #0]
 800a632:	2340      	movs	r3, #64	; 0x40
 800a634:	2202      	movs	r2, #2
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f002 fa7d 	bl	800cb36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a63c:	4b35      	ldr	r3, [pc, #212]	; (800a714 <USBD_CDC_Init+0x1e8>)
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	f003 020f 	and.w	r2, r3, #15
 800a644:	6879      	ldr	r1, [r7, #4]
 800a646:	4613      	mov	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	440b      	add	r3, r1
 800a650:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a654:	2201      	movs	r2, #1
 800a656:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a658:	4b2f      	ldr	r3, [pc, #188]	; (800a718 <USBD_CDC_Init+0x1ec>)
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	f003 020f 	and.w	r2, r3, #15
 800a660:	6879      	ldr	r1, [r7, #4]
 800a662:	4613      	mov	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	4413      	add	r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	440b      	add	r3, r1
 800a66c:	3326      	adds	r3, #38	; 0x26
 800a66e:	2210      	movs	r2, #16
 800a670:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a672:	4b29      	ldr	r3, [pc, #164]	; (800a718 <USBD_CDC_Init+0x1ec>)
 800a674:	7819      	ldrb	r1, [r3, #0]
 800a676:	2308      	movs	r3, #8
 800a678:	2203      	movs	r2, #3
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f002 fa5b 	bl	800cb36 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a680:	4b25      	ldr	r3, [pc, #148]	; (800a718 <USBD_CDC_Init+0x1ec>)
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	f003 020f 	and.w	r2, r3, #15
 800a688:	6879      	ldr	r1, [r7, #4]
 800a68a:	4613      	mov	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4413      	add	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	440b      	add	r3, r1
 800a694:	3324      	adds	r3, #36	; 0x24
 800a696:	2201      	movs	r2, #1
 800a698:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	33b0      	adds	r3, #176	; 0xb0
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	e018      	b.n	800a706 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	7c1b      	ldrb	r3, [r3, #16]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10a      	bne.n	800a6f2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6dc:	4b0d      	ldr	r3, [pc, #52]	; (800a714 <USBD_CDC_Init+0x1e8>)
 800a6de:	7819      	ldrb	r1, [r3, #0]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a6e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f002 fb12 	bl	800cd14 <USBD_LL_PrepareReceive>
 800a6f0:	e008      	b.n	800a704 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6f2:	4b08      	ldr	r3, [pc, #32]	; (800a714 <USBD_CDC_Init+0x1e8>)
 800a6f4:	7819      	ldrb	r1, [r3, #0]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a6fc:	2340      	movs	r3, #64	; 0x40
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f002 fb08 	bl	800cd14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	200000b7 	.word	0x200000b7
 800a714:	200000b8 	.word	0x200000b8
 800a718:	200000b9 	.word	0x200000b9

0800a71c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a728:	4b3a      	ldr	r3, [pc, #232]	; (800a814 <USBD_CDC_DeInit+0xf8>)
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	4619      	mov	r1, r3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f002 fa27 	bl	800cb82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a734:	4b37      	ldr	r3, [pc, #220]	; (800a814 <USBD_CDC_DeInit+0xf8>)
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	f003 020f 	and.w	r2, r3, #15
 800a73c:	6879      	ldr	r1, [r7, #4]
 800a73e:	4613      	mov	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	440b      	add	r3, r1
 800a748:	3324      	adds	r3, #36	; 0x24
 800a74a:	2200      	movs	r2, #0
 800a74c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a74e:	4b32      	ldr	r3, [pc, #200]	; (800a818 <USBD_CDC_DeInit+0xfc>)
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	4619      	mov	r1, r3
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f002 fa14 	bl	800cb82 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a75a:	4b2f      	ldr	r3, [pc, #188]	; (800a818 <USBD_CDC_DeInit+0xfc>)
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	f003 020f 	and.w	r2, r3, #15
 800a762:	6879      	ldr	r1, [r7, #4]
 800a764:	4613      	mov	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	4413      	add	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	440b      	add	r3, r1
 800a76e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a772:	2200      	movs	r2, #0
 800a774:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a776:	4b29      	ldr	r3, [pc, #164]	; (800a81c <USBD_CDC_DeInit+0x100>)
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	4619      	mov	r1, r3
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f002 fa00 	bl	800cb82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a782:	4b26      	ldr	r3, [pc, #152]	; (800a81c <USBD_CDC_DeInit+0x100>)
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	f003 020f 	and.w	r2, r3, #15
 800a78a:	6879      	ldr	r1, [r7, #4]
 800a78c:	4613      	mov	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	440b      	add	r3, r1
 800a796:	3324      	adds	r3, #36	; 0x24
 800a798:	2200      	movs	r2, #0
 800a79a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a79c:	4b1f      	ldr	r3, [pc, #124]	; (800a81c <USBD_CDC_DeInit+0x100>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	f003 020f 	and.w	r2, r3, #15
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4413      	add	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	440b      	add	r3, r1
 800a7b0:	3326      	adds	r3, #38	; 0x26
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	32b0      	adds	r2, #176	; 0xb0
 800a7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d01f      	beq.n	800a808 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	33b0      	adds	r3, #176	; 0xb0
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4413      	add	r3, r2
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	32b0      	adds	r2, #176	; 0xb0
 800a7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f002 fad4 	bl	800cd98 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	32b0      	adds	r2, #176	; 0xb0
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	200000b7 	.word	0x200000b7
 800a818:	200000b8 	.word	0x200000b8
 800a81c:	200000b9 	.word	0x200000b9

0800a820 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	32b0      	adds	r2, #176	; 0xb0
 800a834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a838:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a83a:	2300      	movs	r3, #0
 800a83c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a83e:	2300      	movs	r3, #0
 800a840:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a842:	2300      	movs	r3, #0
 800a844:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e0bf      	b.n	800a9d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d050      	beq.n	800a8fe <USBD_CDC_Setup+0xde>
 800a85c:	2b20      	cmp	r3, #32
 800a85e:	f040 80af 	bne.w	800a9c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	88db      	ldrh	r3, [r3, #6]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d03a      	beq.n	800a8e0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	b25b      	sxtb	r3, r3
 800a870:	2b00      	cmp	r3, #0
 800a872:	da1b      	bge.n	800a8ac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	33b0      	adds	r3, #176	; 0xb0
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	683a      	ldr	r2, [r7, #0]
 800a888:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a88a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a88c:	683a      	ldr	r2, [r7, #0]
 800a88e:	88d2      	ldrh	r2, [r2, #6]
 800a890:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	88db      	ldrh	r3, [r3, #6]
 800a896:	2b07      	cmp	r3, #7
 800a898:	bf28      	it	cs
 800a89a:	2307      	movcs	r3, #7
 800a89c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	89fa      	ldrh	r2, [r7, #14]
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f001 fd43 	bl	800c330 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a8aa:	e090      	b.n	800a9ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	785a      	ldrb	r2, [r3, #1]
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	88db      	ldrh	r3, [r3, #6]
 800a8ba:	2b3f      	cmp	r3, #63	; 0x3f
 800a8bc:	d803      	bhi.n	800a8c6 <USBD_CDC_Setup+0xa6>
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	88db      	ldrh	r3, [r3, #6]
 800a8c2:	b2da      	uxtb	r2, r3
 800a8c4:	e000      	b.n	800a8c8 <USBD_CDC_Setup+0xa8>
 800a8c6:	2240      	movs	r2, #64	; 0x40
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a8ce:	6939      	ldr	r1, [r7, #16]
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f001 fd55 	bl	800c388 <USBD_CtlPrepareRx>
      break;
 800a8de:	e076      	b.n	800a9ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	33b0      	adds	r3, #176	; 0xb0
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	7850      	ldrb	r0, [r2, #1]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	6839      	ldr	r1, [r7, #0]
 800a8fa:	4798      	blx	r3
      break;
 800a8fc:	e067      	b.n	800a9ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	785b      	ldrb	r3, [r3, #1]
 800a902:	2b0b      	cmp	r3, #11
 800a904:	d851      	bhi.n	800a9aa <USBD_CDC_Setup+0x18a>
 800a906:	a201      	add	r2, pc, #4	; (adr r2, 800a90c <USBD_CDC_Setup+0xec>)
 800a908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90c:	0800a93d 	.word	0x0800a93d
 800a910:	0800a9b9 	.word	0x0800a9b9
 800a914:	0800a9ab 	.word	0x0800a9ab
 800a918:	0800a9ab 	.word	0x0800a9ab
 800a91c:	0800a9ab 	.word	0x0800a9ab
 800a920:	0800a9ab 	.word	0x0800a9ab
 800a924:	0800a9ab 	.word	0x0800a9ab
 800a928:	0800a9ab 	.word	0x0800a9ab
 800a92c:	0800a9ab 	.word	0x0800a9ab
 800a930:	0800a9ab 	.word	0x0800a9ab
 800a934:	0800a967 	.word	0x0800a967
 800a938:	0800a991 	.word	0x0800a991
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a942:	b2db      	uxtb	r3, r3
 800a944:	2b03      	cmp	r3, #3
 800a946:	d107      	bne.n	800a958 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a948:	f107 030a 	add.w	r3, r7, #10
 800a94c:	2202      	movs	r2, #2
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f001 fced 	bl	800c330 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a956:	e032      	b.n	800a9be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a958:	6839      	ldr	r1, [r7, #0]
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f001 fc77 	bl	800c24e <USBD_CtlError>
            ret = USBD_FAIL;
 800a960:	2303      	movs	r3, #3
 800a962:	75fb      	strb	r3, [r7, #23]
          break;
 800a964:	e02b      	b.n	800a9be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	2b03      	cmp	r3, #3
 800a970:	d107      	bne.n	800a982 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a972:	f107 030d 	add.w	r3, r7, #13
 800a976:	2201      	movs	r2, #1
 800a978:	4619      	mov	r1, r3
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f001 fcd8 	bl	800c330 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a980:	e01d      	b.n	800a9be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a982:	6839      	ldr	r1, [r7, #0]
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f001 fc62 	bl	800c24e <USBD_CtlError>
            ret = USBD_FAIL;
 800a98a:	2303      	movs	r3, #3
 800a98c:	75fb      	strb	r3, [r7, #23]
          break;
 800a98e:	e016      	b.n	800a9be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a996:	b2db      	uxtb	r3, r3
 800a998:	2b03      	cmp	r3, #3
 800a99a:	d00f      	beq.n	800a9bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f001 fc55 	bl	800c24e <USBD_CtlError>
            ret = USBD_FAIL;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a9a8:	e008      	b.n	800a9bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a9aa:	6839      	ldr	r1, [r7, #0]
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f001 fc4e 	bl	800c24e <USBD_CtlError>
          ret = USBD_FAIL;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	75fb      	strb	r3, [r7, #23]
          break;
 800a9b6:	e002      	b.n	800a9be <USBD_CDC_Setup+0x19e>
          break;
 800a9b8:	bf00      	nop
 800a9ba:	e008      	b.n	800a9ce <USBD_CDC_Setup+0x1ae>
          break;
 800a9bc:	bf00      	nop
      }
      break;
 800a9be:	e006      	b.n	800a9ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a9c0:	6839      	ldr	r1, [r7, #0]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f001 fc43 	bl	800c24e <USBD_CtlError>
      ret = USBD_FAIL;
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	75fb      	strb	r3, [r7, #23]
      break;
 800a9cc:	bf00      	nop
  }

  return (uint8_t)ret;
 800a9ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3718      	adds	r7, #24
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	32b0      	adds	r2, #176	; 0xb0
 800a9f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	e065      	b.n	800aace <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	32b0      	adds	r2, #176	; 0xb0
 800aa0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aa12:	78fb      	ldrb	r3, [r7, #3]
 800aa14:	f003 020f 	and.w	r2, r3, #15
 800aa18:	6879      	ldr	r1, [r7, #4]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4413      	add	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	440b      	add	r3, r1
 800aa24:	3318      	adds	r3, #24
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d02f      	beq.n	800aa8c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aa2c:	78fb      	ldrb	r3, [r7, #3]
 800aa2e:	f003 020f 	and.w	r2, r3, #15
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	4613      	mov	r3, r2
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	4413      	add	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	440b      	add	r3, r1
 800aa3e:	3318      	adds	r3, #24
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	78fb      	ldrb	r3, [r7, #3]
 800aa44:	f003 010f 	and.w	r1, r3, #15
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	00db      	lsls	r3, r3, #3
 800aa4e:	440b      	add	r3, r1
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4403      	add	r3, r0
 800aa54:	3348      	adds	r3, #72	; 0x48
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa5c:	fb01 f303 	mul.w	r3, r1, r3
 800aa60:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d112      	bne.n	800aa8c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800aa66:	78fb      	ldrb	r3, [r7, #3]
 800aa68:	f003 020f 	and.w	r2, r3, #15
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	440b      	add	r3, r1
 800aa78:	3318      	adds	r3, #24
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aa7e:	78f9      	ldrb	r1, [r7, #3]
 800aa80:	2300      	movs	r3, #0
 800aa82:	2200      	movs	r2, #0
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f002 f924 	bl	800ccd2 <USBD_LL_Transmit>
 800aa8a:	e01f      	b.n	800aacc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	33b0      	adds	r3, #176	; 0xb0
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	4413      	add	r3, r2
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d010      	beq.n	800aacc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	33b0      	adds	r3, #176	; 0xb0
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	4413      	add	r3, r2
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800aac8:	78fa      	ldrb	r2, [r7, #3]
 800aaca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b084      	sub	sp, #16
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	460b      	mov	r3, r1
 800aae0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	32b0      	adds	r2, #176	; 0xb0
 800aaec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	32b0      	adds	r2, #176	; 0xb0
 800aafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ab04:	2303      	movs	r3, #3
 800ab06:	e01a      	b.n	800ab3e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ab08:	78fb      	ldrb	r3, [r7, #3]
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f002 f922 	bl	800cd56 <USBD_LL_GetRxDataSize>
 800ab12:	4602      	mov	r2, r0
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	33b0      	adds	r3, #176	; 0xb0
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ab38:	4611      	mov	r1, r2
 800ab3a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b084      	sub	sp, #16
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	32b0      	adds	r2, #176	; 0xb0
 800ab58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ab64:	2303      	movs	r3, #3
 800ab66:	e025      	b.n	800abb4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	33b0      	adds	r3, #176	; 0xb0
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d01a      	beq.n	800abb2 <USBD_CDC_EP0_RxReady+0x6c>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ab82:	2bff      	cmp	r3, #255	; 0xff
 800ab84:	d015      	beq.n	800abb2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	33b0      	adds	r3, #176	; 0xb0
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4413      	add	r3, r2
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ab9e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aba6:	b292      	uxth	r2, r2
 800aba8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	22ff      	movs	r2, #255	; 0xff
 800abae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3710      	adds	r7, #16
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800abc4:	2182      	movs	r1, #130	; 0x82
 800abc6:	4818      	ldr	r0, [pc, #96]	; (800ac28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800abc8:	f000 fd09 	bl	800b5de <USBD_GetEpDesc>
 800abcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800abce:	2101      	movs	r1, #1
 800abd0:	4815      	ldr	r0, [pc, #84]	; (800ac28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800abd2:	f000 fd04 	bl	800b5de <USBD_GetEpDesc>
 800abd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800abd8:	2181      	movs	r1, #129	; 0x81
 800abda:	4813      	ldr	r0, [pc, #76]	; (800ac28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800abdc:	f000 fcff 	bl	800b5de <USBD_GetEpDesc>
 800abe0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	2210      	movs	r2, #16
 800abec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d006      	beq.n	800ac02 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abfc:	711a      	strb	r2, [r3, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d006      	beq.n	800ac16 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac10:	711a      	strb	r2, [r3, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2243      	movs	r2, #67	; 0x43
 800ac1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac1c:	4b02      	ldr	r3, [pc, #8]	; (800ac28 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3718      	adds	r7, #24
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	20000074 	.word	0x20000074

0800ac2c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac34:	2182      	movs	r1, #130	; 0x82
 800ac36:	4818      	ldr	r0, [pc, #96]	; (800ac98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac38:	f000 fcd1 	bl	800b5de <USBD_GetEpDesc>
 800ac3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac3e:	2101      	movs	r1, #1
 800ac40:	4815      	ldr	r0, [pc, #84]	; (800ac98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac42:	f000 fccc 	bl	800b5de <USBD_GetEpDesc>
 800ac46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac48:	2181      	movs	r1, #129	; 0x81
 800ac4a:	4813      	ldr	r0, [pc, #76]	; (800ac98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac4c:	f000 fcc7 	bl	800b5de <USBD_GetEpDesc>
 800ac50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d002      	beq.n	800ac5e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	2210      	movs	r2, #16
 800ac5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d006      	beq.n	800ac72 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	2200      	movs	r2, #0
 800ac68:	711a      	strb	r2, [r3, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f042 0202 	orr.w	r2, r2, #2
 800ac70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d006      	beq.n	800ac86 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	711a      	strb	r2, [r3, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f042 0202 	orr.w	r2, r2, #2
 800ac84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2243      	movs	r2, #67	; 0x43
 800ac8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac8c:	4b02      	ldr	r3, [pc, #8]	; (800ac98 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3718      	adds	r7, #24
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	20000074 	.word	0x20000074

0800ac9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b086      	sub	sp, #24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aca4:	2182      	movs	r1, #130	; 0x82
 800aca6:	4818      	ldr	r0, [pc, #96]	; (800ad08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aca8:	f000 fc99 	bl	800b5de <USBD_GetEpDesc>
 800acac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800acae:	2101      	movs	r1, #1
 800acb0:	4815      	ldr	r0, [pc, #84]	; (800ad08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800acb2:	f000 fc94 	bl	800b5de <USBD_GetEpDesc>
 800acb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800acb8:	2181      	movs	r1, #129	; 0x81
 800acba:	4813      	ldr	r0, [pc, #76]	; (800ad08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800acbc:	f000 fc8f 	bl	800b5de <USBD_GetEpDesc>
 800acc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d002      	beq.n	800acce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	2210      	movs	r2, #16
 800accc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d006      	beq.n	800ace2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acdc:	711a      	strb	r2, [r3, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d006      	beq.n	800acf6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2200      	movs	r2, #0
 800acec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acf0:	711a      	strb	r2, [r3, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2243      	movs	r2, #67	; 0x43
 800acfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800acfc:	4b02      	ldr	r3, [pc, #8]	; (800ad08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	20000074 	.word	0x20000074

0800ad0c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	220a      	movs	r2, #10
 800ad18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ad1a:	4b03      	ldr	r3, [pc, #12]	; (800ad28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr
 800ad28:	20000030 	.word	0x20000030

0800ad2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d101      	bne.n	800ad40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e009      	b.n	800ad54 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	33b0      	adds	r3, #176	; 0xb0
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	4413      	add	r3, r2
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b087      	sub	sp, #28
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	32b0      	adds	r2, #176	; 0xb0
 800ad76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad7a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d101      	bne.n	800ad86 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ad82:	2303      	movs	r3, #3
 800ad84:	e008      	b.n	800ad98 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	371c      	adds	r7, #28
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	32b0      	adds	r2, #176	; 0xb0
 800adb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adbc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d101      	bne.n	800adc8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800adc4:	2303      	movs	r3, #3
 800adc6:	e004      	b.n	800add2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800add0:	2300      	movs	r3, #0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3714      	adds	r7, #20
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
	...

0800ade0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	32b0      	adds	r2, #176	; 0xb0
 800adf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adf6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	32b0      	adds	r2, #176	; 0xb0
 800ae02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d101      	bne.n	800ae0e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ae0a:	2303      	movs	r3, #3
 800ae0c:	e018      	b.n	800ae40 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	7c1b      	ldrb	r3, [r3, #16]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10a      	bne.n	800ae2c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae16:	4b0c      	ldr	r3, [pc, #48]	; (800ae48 <USBD_CDC_ReceivePacket+0x68>)
 800ae18:	7819      	ldrb	r1, [r3, #0]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f001 ff75 	bl	800cd14 <USBD_LL_PrepareReceive>
 800ae2a:	e008      	b.n	800ae3e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae2c:	4b06      	ldr	r3, [pc, #24]	; (800ae48 <USBD_CDC_ReceivePacket+0x68>)
 800ae2e:	7819      	ldrb	r1, [r3, #0]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae36:	2340      	movs	r3, #64	; 0x40
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f001 ff6b 	bl	800cd14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	200000b8 	.word	0x200000b8

0800ae4c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	4613      	mov	r3, r2
 800ae58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d101      	bne.n	800ae64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ae60:	2303      	movs	r3, #3
 800ae62:	e01f      	b.n	800aea4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d003      	beq.n	800ae8a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	79fa      	ldrb	r2, [r7, #7]
 800ae96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f001 fde5 	bl	800ca68 <USBD_LL_Init>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aea2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d101      	bne.n	800aec4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aec0:	2303      	movs	r3, #3
 800aec2:	e025      	b.n	800af10 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	32ae      	adds	r2, #174	; 0xae
 800aed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00f      	beq.n	800af00 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	32ae      	adds	r2, #174	; 0xae
 800aeea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef0:	f107 020e 	add.w	r2, r7, #14
 800aef4:	4610      	mov	r0, r2
 800aef6:	4798      	blx	r3
 800aef8:	4602      	mov	r2, r0
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800af06:	1c5a      	adds	r2, r3, #1
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f001 fded 	bl	800cb00 <USBD_LL_Start>
 800af26:	4603      	mov	r3, r0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af38:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b084      	sub	sp, #16
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
 800af4e:	460b      	mov	r3, r1
 800af50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800af52:	2300      	movs	r3, #0
 800af54:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d009      	beq.n	800af74 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	78fa      	ldrb	r2, [r7, #3]
 800af6a:	4611      	mov	r1, r2
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	4798      	blx	r3
 800af70:	4603      	mov	r3, r0
 800af72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af74:	7bfb      	ldrb	r3, [r7, #15]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b084      	sub	sp, #16
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	460b      	mov	r3, r1
 800af88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	78fa      	ldrb	r2, [r7, #3]
 800af98:	4611      	mov	r1, r2
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	4798      	blx	r3
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d001      	beq.n	800afa8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800afa4:	2303      	movs	r3, #3
 800afa6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800afa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b084      	sub	sp, #16
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
 800afba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800afc2:	6839      	ldr	r1, [r7, #0]
 800afc4:	4618      	mov	r0, r3
 800afc6:	f001 f908 	bl	800c1da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2201      	movs	r2, #1
 800afce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800afd8:	461a      	mov	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800afe6:	f003 031f 	and.w	r3, r3, #31
 800afea:	2b02      	cmp	r3, #2
 800afec:	d01a      	beq.n	800b024 <USBD_LL_SetupStage+0x72>
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d822      	bhi.n	800b038 <USBD_LL_SetupStage+0x86>
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d002      	beq.n	800affc <USBD_LL_SetupStage+0x4a>
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d00a      	beq.n	800b010 <USBD_LL_SetupStage+0x5e>
 800affa:	e01d      	b.n	800b038 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b002:	4619      	mov	r1, r3
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 fb5f 	bl	800b6c8 <USBD_StdDevReq>
 800b00a:	4603      	mov	r3, r0
 800b00c:	73fb      	strb	r3, [r7, #15]
      break;
 800b00e:	e020      	b.n	800b052 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b016:	4619      	mov	r1, r3
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 fbc7 	bl	800b7ac <USBD_StdItfReq>
 800b01e:	4603      	mov	r3, r0
 800b020:	73fb      	strb	r3, [r7, #15]
      break;
 800b022:	e016      	b.n	800b052 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b02a:	4619      	mov	r1, r3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fc29 	bl	800b884 <USBD_StdEPReq>
 800b032:	4603      	mov	r3, r0
 800b034:	73fb      	strb	r3, [r7, #15]
      break;
 800b036:	e00c      	b.n	800b052 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b03e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b042:	b2db      	uxtb	r3, r3
 800b044:	4619      	mov	r1, r3
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f001 fdba 	bl	800cbc0 <USBD_LL_StallEP>
 800b04c:	4603      	mov	r3, r0
 800b04e:	73fb      	strb	r3, [r7, #15]
      break;
 800b050:	bf00      	nop
  }

  return ret;
 800b052:	7bfb      	ldrb	r3, [r7, #15]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	460b      	mov	r3, r1
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b06e:	7afb      	ldrb	r3, [r7, #11]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d16e      	bne.n	800b152 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b07a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b082:	2b03      	cmp	r3, #3
 800b084:	f040 8098 	bne.w	800b1b8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	689a      	ldr	r2, [r3, #8]
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	429a      	cmp	r2, r3
 800b092:	d913      	bls.n	800b0bc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	689a      	ldr	r2, [r3, #8]
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	1ad2      	subs	r2, r2, r3
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	68da      	ldr	r2, [r3, #12]
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	bf28      	it	cs
 800b0ae:	4613      	movcs	r3, r2
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	6879      	ldr	r1, [r7, #4]
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f001 f984 	bl	800c3c2 <USBD_CtlContinueRx>
 800b0ba:	e07d      	b.n	800b1b8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b0c2:	f003 031f 	and.w	r3, r3, #31
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d014      	beq.n	800b0f4 <USBD_LL_DataOutStage+0x98>
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	d81d      	bhi.n	800b10a <USBD_LL_DataOutStage+0xae>
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d002      	beq.n	800b0d8 <USBD_LL_DataOutStage+0x7c>
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d003      	beq.n	800b0de <USBD_LL_DataOutStage+0x82>
 800b0d6:	e018      	b.n	800b10a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	75bb      	strb	r3, [r7, #22]
            break;
 800b0dc:	e018      	b.n	800b110 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f000 fa5e 	bl	800b5aa <USBD_CoreFindIF>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	75bb      	strb	r3, [r7, #22]
            break;
 800b0f2:	e00d      	b.n	800b110 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f000 fa60 	bl	800b5c4 <USBD_CoreFindEP>
 800b104:	4603      	mov	r3, r0
 800b106:	75bb      	strb	r3, [r7, #22]
            break;
 800b108:	e002      	b.n	800b110 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b10a:	2300      	movs	r3, #0
 800b10c:	75bb      	strb	r3, [r7, #22]
            break;
 800b10e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b110:	7dbb      	ldrb	r3, [r7, #22]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d119      	bne.n	800b14a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	2b03      	cmp	r3, #3
 800b120:	d113      	bne.n	800b14a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b122:	7dba      	ldrb	r2, [r7, #22]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	32ae      	adds	r2, #174	; 0xae
 800b128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00b      	beq.n	800b14a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b132:	7dba      	ldrb	r2, [r7, #22]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b13a:	7dba      	ldrb	r2, [r7, #22]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	32ae      	adds	r2, #174	; 0xae
 800b140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f001 f94a 	bl	800c3e4 <USBD_CtlSendStatus>
 800b150:	e032      	b.n	800b1b8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b152:	7afb      	ldrb	r3, [r7, #11]
 800b154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	4619      	mov	r1, r3
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f000 fa31 	bl	800b5c4 <USBD_CoreFindEP>
 800b162:	4603      	mov	r3, r0
 800b164:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b166:	7dbb      	ldrb	r3, [r7, #22]
 800b168:	2bff      	cmp	r3, #255	; 0xff
 800b16a:	d025      	beq.n	800b1b8 <USBD_LL_DataOutStage+0x15c>
 800b16c:	7dbb      	ldrb	r3, [r7, #22]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d122      	bne.n	800b1b8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	2b03      	cmp	r3, #3
 800b17c:	d117      	bne.n	800b1ae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b17e:	7dba      	ldrb	r2, [r7, #22]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	32ae      	adds	r2, #174	; 0xae
 800b184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b188:	699b      	ldr	r3, [r3, #24]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00f      	beq.n	800b1ae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b18e:	7dba      	ldrb	r2, [r7, #22]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b196:	7dba      	ldrb	r2, [r7, #22]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	32ae      	adds	r2, #174	; 0xae
 800b19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	7afa      	ldrb	r2, [r7, #11]
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	4798      	blx	r3
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b1ae:	7dfb      	ldrb	r3, [r7, #23]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d001      	beq.n	800b1b8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b1b4:	7dfb      	ldrb	r3, [r7, #23]
 800b1b6:	e000      	b.n	800b1ba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3718      	adds	r7, #24
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b086      	sub	sp, #24
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	60f8      	str	r0, [r7, #12]
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	607a      	str	r2, [r7, #4]
 800b1ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b1d0:	7afb      	ldrb	r3, [r7, #11]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d16f      	bne.n	800b2b6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	3314      	adds	r3, #20
 800b1da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	d15a      	bne.n	800b29c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	689a      	ldr	r2, [r3, #8]
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d914      	bls.n	800b21c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	689a      	ldr	r2, [r3, #8]
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	1ad2      	subs	r2, r2, r3
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	461a      	mov	r2, r3
 800b206:	6879      	ldr	r1, [r7, #4]
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f001 f8ac 	bl	800c366 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b20e:	2300      	movs	r3, #0
 800b210:	2200      	movs	r2, #0
 800b212:	2100      	movs	r1, #0
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f001 fd7d 	bl	800cd14 <USBD_LL_PrepareReceive>
 800b21a:	e03f      	b.n	800b29c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	68da      	ldr	r2, [r3, #12]
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	429a      	cmp	r2, r3
 800b226:	d11c      	bne.n	800b262 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b230:	429a      	cmp	r2, r3
 800b232:	d316      	bcc.n	800b262 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	685a      	ldr	r2, [r3, #4]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b23e:	429a      	cmp	r2, r3
 800b240:	d20f      	bcs.n	800b262 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b242:	2200      	movs	r2, #0
 800b244:	2100      	movs	r1, #0
 800b246:	68f8      	ldr	r0, [r7, #12]
 800b248:	f001 f88d 	bl	800c366 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2200      	movs	r2, #0
 800b250:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b254:	2300      	movs	r3, #0
 800b256:	2200      	movs	r2, #0
 800b258:	2100      	movs	r1, #0
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f001 fd5a 	bl	800cd14 <USBD_LL_PrepareReceive>
 800b260:	e01c      	b.n	800b29c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	2b03      	cmp	r3, #3
 800b26c:	d10f      	bne.n	800b28e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d009      	beq.n	800b28e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b28e:	2180      	movs	r1, #128	; 0x80
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f001 fc95 	bl	800cbc0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f001 f8b7 	bl	800c40a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d03a      	beq.n	800b31c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b2a6:	68f8      	ldr	r0, [r7, #12]
 800b2a8:	f7ff fe42 	bl	800af30 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b2b4:	e032      	b.n	800b31c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b2b6:	7afb      	ldrb	r3, [r7, #11]
 800b2b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	4619      	mov	r1, r3
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f000 f97f 	bl	800b5c4 <USBD_CoreFindEP>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2ca:	7dfb      	ldrb	r3, [r7, #23]
 800b2cc:	2bff      	cmp	r3, #255	; 0xff
 800b2ce:	d025      	beq.n	800b31c <USBD_LL_DataInStage+0x15a>
 800b2d0:	7dfb      	ldrb	r3, [r7, #23]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d122      	bne.n	800b31c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b03      	cmp	r3, #3
 800b2e0:	d11c      	bne.n	800b31c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b2e2:	7dfa      	ldrb	r2, [r7, #23]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	32ae      	adds	r2, #174	; 0xae
 800b2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ec:	695b      	ldr	r3, [r3, #20]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d014      	beq.n	800b31c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b2f2:	7dfa      	ldrb	r2, [r7, #23]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b2fa:	7dfa      	ldrb	r2, [r7, #23]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	32ae      	adds	r2, #174	; 0xae
 800b300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	7afa      	ldrb	r2, [r7, #11]
 800b308:	4611      	mov	r1, r2
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	4798      	blx	r3
 800b30e:	4603      	mov	r3, r0
 800b310:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b312:	7dbb      	ldrb	r3, [r7, #22]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d001      	beq.n	800b31c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b318:	7dbb      	ldrb	r3, [r7, #22]
 800b31a:	e000      	b.n	800b31e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3718      	adds	r7, #24
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b084      	sub	sp, #16
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b32e:	2300      	movs	r3, #0
 800b330:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2201      	movs	r2, #1
 800b336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d014      	beq.n	800b38c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00e      	beq.n	800b38c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	6852      	ldr	r2, [r2, #4]
 800b37a:	b2d2      	uxtb	r2, r2
 800b37c:	4611      	mov	r1, r2
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	4798      	blx	r3
 800b382:	4603      	mov	r3, r0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d001      	beq.n	800b38c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b388:	2303      	movs	r3, #3
 800b38a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b38c:	2340      	movs	r3, #64	; 0x40
 800b38e:	2200      	movs	r2, #0
 800b390:	2100      	movs	r1, #0
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f001 fbcf 	bl	800cb36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2240      	movs	r2, #64	; 0x40
 800b3a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3a8:	2340      	movs	r3, #64	; 0x40
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2180      	movs	r1, #128	; 0x80
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f001 fbc1 	bl	800cb36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2240      	movs	r2, #64	; 0x40
 800b3be:	621a      	str	r2, [r3, #32]

  return ret;
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b083      	sub	sp, #12
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	78fa      	ldrb	r2, [r7, #3]
 800b3da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b083      	sub	sp, #12
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3f8:	b2da      	uxtb	r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2204      	movs	r2, #4
 800b404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	370c      	adds	r7, #12
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b416:	b480      	push	{r7}
 800b418:	b083      	sub	sp, #12
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b04      	cmp	r3, #4
 800b428:	d106      	bne.n	800b438 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b430:	b2da      	uxtb	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b438:	2300      	movs	r3, #0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	370c      	adds	r7, #12
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr

0800b446 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b082      	sub	sp, #8
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b454:	b2db      	uxtb	r3, r3
 800b456:	2b03      	cmp	r3, #3
 800b458:	d110      	bne.n	800b47c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00b      	beq.n	800b47c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b46a:	69db      	ldr	r3, [r3, #28]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d005      	beq.n	800b47c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b476:	69db      	ldr	r3, [r3, #28]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b47c:	2300      	movs	r3, #0
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b082      	sub	sp, #8
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
 800b48e:	460b      	mov	r3, r1
 800b490:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	32ae      	adds	r2, #174	; 0xae
 800b49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d101      	bne.n	800b4a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	e01c      	b.n	800b4e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	2b03      	cmp	r3, #3
 800b4b2:	d115      	bne.n	800b4e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	32ae      	adds	r2, #174	; 0xae
 800b4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c2:	6a1b      	ldr	r3, [r3, #32]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00b      	beq.n	800b4e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	32ae      	adds	r2, #174	; 0xae
 800b4d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d6:	6a1b      	ldr	r3, [r3, #32]
 800b4d8:	78fa      	ldrb	r2, [r7, #3]
 800b4da:	4611      	mov	r1, r2
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b082      	sub	sp, #8
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	32ae      	adds	r2, #174	; 0xae
 800b500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d101      	bne.n	800b50c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b508:	2303      	movs	r3, #3
 800b50a:	e01c      	b.n	800b546 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b512:	b2db      	uxtb	r3, r3
 800b514:	2b03      	cmp	r3, #3
 800b516:	d115      	bne.n	800b544 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	32ae      	adds	r2, #174	; 0xae
 800b522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00b      	beq.n	800b544 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	32ae      	adds	r2, #174	; 0xae
 800b536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53c:	78fa      	ldrb	r2, [r7, #3]
 800b53e:	4611      	mov	r1, r2
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3708      	adds	r7, #8
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b54e:	b480      	push	{r7}
 800b550:	b083      	sub	sp, #12
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	370c      	adds	r7, #12
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00e      	beq.n	800b5a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	6852      	ldr	r2, [r2, #4]
 800b58e:	b2d2      	uxtb	r2, r2
 800b590:	4611      	mov	r1, r2
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	4798      	blx	r3
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d001      	beq.n	800b5a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b59c:	2303      	movs	r3, #3
 800b59e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b5aa:	b480      	push	{r7}
 800b5ac:	b083      	sub	sp, #12
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b5b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b5d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	370c      	adds	r7, #12
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr

0800b5de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b086      	sub	sp, #24
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	885b      	ldrh	r3, [r3, #2]
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	b29b      	uxth	r3, r3
 800b602:	429a      	cmp	r2, r3
 800b604:	d920      	bls.n	800b648 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b60e:	e013      	b.n	800b638 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b610:	f107 030a 	add.w	r3, r7, #10
 800b614:	4619      	mov	r1, r3
 800b616:	6978      	ldr	r0, [r7, #20]
 800b618:	f000 f81b 	bl	800b652 <USBD_GetNextDesc>
 800b61c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	785b      	ldrb	r3, [r3, #1]
 800b622:	2b05      	cmp	r3, #5
 800b624:	d108      	bne.n	800b638 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	789b      	ldrb	r3, [r3, #2]
 800b62e:	78fa      	ldrb	r2, [r7, #3]
 800b630:	429a      	cmp	r2, r3
 800b632:	d008      	beq.n	800b646 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b634:	2300      	movs	r3, #0
 800b636:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	885b      	ldrh	r3, [r3, #2]
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	897b      	ldrh	r3, [r7, #10]
 800b640:	429a      	cmp	r2, r3
 800b642:	d8e5      	bhi.n	800b610 <USBD_GetEpDesc+0x32>
 800b644:	e000      	b.n	800b648 <USBD_GetEpDesc+0x6a>
          break;
 800b646:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b648:	693b      	ldr	r3, [r7, #16]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3718      	adds	r7, #24
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b652:	b480      	push	{r7}
 800b654:	b085      	sub	sp, #20
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	881a      	ldrh	r2, [r3, #0]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	b29b      	uxth	r3, r3
 800b66a:	4413      	add	r3, r2
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	461a      	mov	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4413      	add	r3, r2
 800b67c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b67e:	68fb      	ldr	r3, [r7, #12]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3714      	adds	r7, #20
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b087      	sub	sp, #28
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b6aa:	8a3b      	ldrh	r3, [r7, #16]
 800b6ac:	021b      	lsls	r3, r3, #8
 800b6ae:	b21a      	sxth	r2, r3
 800b6b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	b21b      	sxth	r3, r3
 800b6b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b6ba:	89fb      	ldrh	r3, [r7, #14]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	371c      	adds	r7, #28
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6de:	2b40      	cmp	r3, #64	; 0x40
 800b6e0:	d005      	beq.n	800b6ee <USBD_StdDevReq+0x26>
 800b6e2:	2b40      	cmp	r3, #64	; 0x40
 800b6e4:	d857      	bhi.n	800b796 <USBD_StdDevReq+0xce>
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00f      	beq.n	800b70a <USBD_StdDevReq+0x42>
 800b6ea:	2b20      	cmp	r3, #32
 800b6ec:	d153      	bne.n	800b796 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	32ae      	adds	r2, #174	; 0xae
 800b6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	4798      	blx	r3
 800b704:	4603      	mov	r3, r0
 800b706:	73fb      	strb	r3, [r7, #15]
      break;
 800b708:	e04a      	b.n	800b7a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	785b      	ldrb	r3, [r3, #1]
 800b70e:	2b09      	cmp	r3, #9
 800b710:	d83b      	bhi.n	800b78a <USBD_StdDevReq+0xc2>
 800b712:	a201      	add	r2, pc, #4	; (adr r2, 800b718 <USBD_StdDevReq+0x50>)
 800b714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b718:	0800b76d 	.word	0x0800b76d
 800b71c:	0800b781 	.word	0x0800b781
 800b720:	0800b78b 	.word	0x0800b78b
 800b724:	0800b777 	.word	0x0800b777
 800b728:	0800b78b 	.word	0x0800b78b
 800b72c:	0800b74b 	.word	0x0800b74b
 800b730:	0800b741 	.word	0x0800b741
 800b734:	0800b78b 	.word	0x0800b78b
 800b738:	0800b763 	.word	0x0800b763
 800b73c:	0800b755 	.word	0x0800b755
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b740:	6839      	ldr	r1, [r7, #0]
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 fa3c 	bl	800bbc0 <USBD_GetDescriptor>
          break;
 800b748:	e024      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b74a:	6839      	ldr	r1, [r7, #0]
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fba1 	bl	800be94 <USBD_SetAddress>
          break;
 800b752:	e01f      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fbe0 	bl	800bf1c <USBD_SetConfig>
 800b75c:	4603      	mov	r3, r0
 800b75e:	73fb      	strb	r3, [r7, #15]
          break;
 800b760:	e018      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b762:	6839      	ldr	r1, [r7, #0]
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 fc83 	bl	800c070 <USBD_GetConfig>
          break;
 800b76a:	e013      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fcb4 	bl	800c0dc <USBD_GetStatus>
          break;
 800b774:	e00e      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fce3 	bl	800c144 <USBD_SetFeature>
          break;
 800b77e:	e009      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fd07 	bl	800c196 <USBD_ClrFeature>
          break;
 800b788:	e004      	b.n	800b794 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b78a:	6839      	ldr	r1, [r7, #0]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fd5e 	bl	800c24e <USBD_CtlError>
          break;
 800b792:	bf00      	nop
      }
      break;
 800b794:	e004      	b.n	800b7a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fd58 	bl	800c24e <USBD_CtlError>
      break;
 800b79e:	bf00      	nop
  }

  return ret;
 800b7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop

0800b7ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7c2:	2b40      	cmp	r3, #64	; 0x40
 800b7c4:	d005      	beq.n	800b7d2 <USBD_StdItfReq+0x26>
 800b7c6:	2b40      	cmp	r3, #64	; 0x40
 800b7c8:	d852      	bhi.n	800b870 <USBD_StdItfReq+0xc4>
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d001      	beq.n	800b7d2 <USBD_StdItfReq+0x26>
 800b7ce:	2b20      	cmp	r3, #32
 800b7d0:	d14e      	bne.n	800b870 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	d840      	bhi.n	800b862 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	889b      	ldrh	r3, [r3, #4]
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d836      	bhi.n	800b858 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	889b      	ldrh	r3, [r3, #4]
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7ff fed9 	bl	800b5aa <USBD_CoreFindIF>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7fc:	7bbb      	ldrb	r3, [r7, #14]
 800b7fe:	2bff      	cmp	r3, #255	; 0xff
 800b800:	d01d      	beq.n	800b83e <USBD_StdItfReq+0x92>
 800b802:	7bbb      	ldrb	r3, [r7, #14]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d11a      	bne.n	800b83e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b808:	7bba      	ldrb	r2, [r7, #14]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	32ae      	adds	r2, #174	; 0xae
 800b80e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00f      	beq.n	800b838 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b818:	7bba      	ldrb	r2, [r7, #14]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b820:	7bba      	ldrb	r2, [r7, #14]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	32ae      	adds	r2, #174	; 0xae
 800b826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	4798      	blx	r3
 800b832:	4603      	mov	r3, r0
 800b834:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b836:	e004      	b.n	800b842 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b838:	2303      	movs	r3, #3
 800b83a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b83c:	e001      	b.n	800b842 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b83e:	2303      	movs	r3, #3
 800b840:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	88db      	ldrh	r3, [r3, #6]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d110      	bne.n	800b86c <USBD_StdItfReq+0xc0>
 800b84a:	7bfb      	ldrb	r3, [r7, #15]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10d      	bne.n	800b86c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 fdc7 	bl	800c3e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b856:	e009      	b.n	800b86c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fcf7 	bl	800c24e <USBD_CtlError>
          break;
 800b860:	e004      	b.n	800b86c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b862:	6839      	ldr	r1, [r7, #0]
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fcf2 	bl	800c24e <USBD_CtlError>
          break;
 800b86a:	e000      	b.n	800b86e <USBD_StdItfReq+0xc2>
          break;
 800b86c:	bf00      	nop
      }
      break;
 800b86e:	e004      	b.n	800b87a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b870:	6839      	ldr	r1, [r7, #0]
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 fceb 	bl	800c24e <USBD_CtlError>
      break;
 800b878:	bf00      	nop
  }

  return ret;
 800b87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b88e:	2300      	movs	r3, #0
 800b890:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	889b      	ldrh	r3, [r3, #4]
 800b896:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8a0:	2b40      	cmp	r3, #64	; 0x40
 800b8a2:	d007      	beq.n	800b8b4 <USBD_StdEPReq+0x30>
 800b8a4:	2b40      	cmp	r3, #64	; 0x40
 800b8a6:	f200 817f 	bhi.w	800bba8 <USBD_StdEPReq+0x324>
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d02a      	beq.n	800b904 <USBD_StdEPReq+0x80>
 800b8ae:	2b20      	cmp	r3, #32
 800b8b0:	f040 817a 	bne.w	800bba8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b8b4:	7bbb      	ldrb	r3, [r7, #14]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f7ff fe83 	bl	800b5c4 <USBD_CoreFindEP>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8c2:	7b7b      	ldrb	r3, [r7, #13]
 800b8c4:	2bff      	cmp	r3, #255	; 0xff
 800b8c6:	f000 8174 	beq.w	800bbb2 <USBD_StdEPReq+0x32e>
 800b8ca:	7b7b      	ldrb	r3, [r7, #13]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f040 8170 	bne.w	800bbb2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b8d2:	7b7a      	ldrb	r2, [r7, #13]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b8da:	7b7a      	ldrb	r2, [r7, #13]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	32ae      	adds	r2, #174	; 0xae
 800b8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	f000 8163 	beq.w	800bbb2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b8ec:	7b7a      	ldrb	r2, [r7, #13]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	32ae      	adds	r2, #174	; 0xae
 800b8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	6839      	ldr	r1, [r7, #0]
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	4798      	blx	r3
 800b8fe:	4603      	mov	r3, r0
 800b900:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b902:	e156      	b.n	800bbb2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	785b      	ldrb	r3, [r3, #1]
 800b908:	2b03      	cmp	r3, #3
 800b90a:	d008      	beq.n	800b91e <USBD_StdEPReq+0x9a>
 800b90c:	2b03      	cmp	r3, #3
 800b90e:	f300 8145 	bgt.w	800bb9c <USBD_StdEPReq+0x318>
 800b912:	2b00      	cmp	r3, #0
 800b914:	f000 809b 	beq.w	800ba4e <USBD_StdEPReq+0x1ca>
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d03c      	beq.n	800b996 <USBD_StdEPReq+0x112>
 800b91c:	e13e      	b.n	800bb9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b02      	cmp	r3, #2
 800b928:	d002      	beq.n	800b930 <USBD_StdEPReq+0xac>
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d016      	beq.n	800b95c <USBD_StdEPReq+0xd8>
 800b92e:	e02c      	b.n	800b98a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b930:	7bbb      	ldrb	r3, [r7, #14]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00d      	beq.n	800b952 <USBD_StdEPReq+0xce>
 800b936:	7bbb      	ldrb	r3, [r7, #14]
 800b938:	2b80      	cmp	r3, #128	; 0x80
 800b93a:	d00a      	beq.n	800b952 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b93c:	7bbb      	ldrb	r3, [r7, #14]
 800b93e:	4619      	mov	r1, r3
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f001 f93d 	bl	800cbc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b946:	2180      	movs	r1, #128	; 0x80
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f001 f939 	bl	800cbc0 <USBD_LL_StallEP>
 800b94e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b950:	e020      	b.n	800b994 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b952:	6839      	ldr	r1, [r7, #0]
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 fc7a 	bl	800c24e <USBD_CtlError>
              break;
 800b95a:	e01b      	b.n	800b994 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	885b      	ldrh	r3, [r3, #2]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10e      	bne.n	800b982 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b964:	7bbb      	ldrb	r3, [r7, #14]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00b      	beq.n	800b982 <USBD_StdEPReq+0xfe>
 800b96a:	7bbb      	ldrb	r3, [r7, #14]
 800b96c:	2b80      	cmp	r3, #128	; 0x80
 800b96e:	d008      	beq.n	800b982 <USBD_StdEPReq+0xfe>
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	88db      	ldrh	r3, [r3, #6]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d104      	bne.n	800b982 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b978:	7bbb      	ldrb	r3, [r7, #14]
 800b97a:	4619      	mov	r1, r3
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f001 f91f 	bl	800cbc0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fd2e 	bl	800c3e4 <USBD_CtlSendStatus>

              break;
 800b988:	e004      	b.n	800b994 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b98a:	6839      	ldr	r1, [r7, #0]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 fc5e 	bl	800c24e <USBD_CtlError>
              break;
 800b992:	bf00      	nop
          }
          break;
 800b994:	e107      	b.n	800bba6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d002      	beq.n	800b9a8 <USBD_StdEPReq+0x124>
 800b9a2:	2b03      	cmp	r3, #3
 800b9a4:	d016      	beq.n	800b9d4 <USBD_StdEPReq+0x150>
 800b9a6:	e04b      	b.n	800ba40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9a8:	7bbb      	ldrb	r3, [r7, #14]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00d      	beq.n	800b9ca <USBD_StdEPReq+0x146>
 800b9ae:	7bbb      	ldrb	r3, [r7, #14]
 800b9b0:	2b80      	cmp	r3, #128	; 0x80
 800b9b2:	d00a      	beq.n	800b9ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9b4:	7bbb      	ldrb	r3, [r7, #14]
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f001 f901 	bl	800cbc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9be:	2180      	movs	r1, #128	; 0x80
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f001 f8fd 	bl	800cbc0 <USBD_LL_StallEP>
 800b9c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9c8:	e040      	b.n	800ba4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b9ca:	6839      	ldr	r1, [r7, #0]
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 fc3e 	bl	800c24e <USBD_CtlError>
              break;
 800b9d2:	e03b      	b.n	800ba4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	885b      	ldrh	r3, [r3, #2]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d136      	bne.n	800ba4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d004      	beq.n	800b9f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b9e6:	7bbb      	ldrb	r3, [r7, #14]
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f001 f907 	bl	800cbfe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 fcf7 	bl	800c3e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b9f6:	7bbb      	ldrb	r3, [r7, #14]
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f7ff fde2 	bl	800b5c4 <USBD_CoreFindEP>
 800ba00:	4603      	mov	r3, r0
 800ba02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba04:	7b7b      	ldrb	r3, [r7, #13]
 800ba06:	2bff      	cmp	r3, #255	; 0xff
 800ba08:	d01f      	beq.n	800ba4a <USBD_StdEPReq+0x1c6>
 800ba0a:	7b7b      	ldrb	r3, [r7, #13]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d11c      	bne.n	800ba4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ba10:	7b7a      	ldrb	r2, [r7, #13]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ba18:	7b7a      	ldrb	r2, [r7, #13]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	32ae      	adds	r2, #174	; 0xae
 800ba1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d010      	beq.n	800ba4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ba28:	7b7a      	ldrb	r2, [r7, #13]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	32ae      	adds	r2, #174	; 0xae
 800ba2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	6839      	ldr	r1, [r7, #0]
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	4798      	blx	r3
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ba3e:	e004      	b.n	800ba4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 fc03 	bl	800c24e <USBD_CtlError>
              break;
 800ba48:	e000      	b.n	800ba4c <USBD_StdEPReq+0x1c8>
              break;
 800ba4a:	bf00      	nop
          }
          break;
 800ba4c:	e0ab      	b.n	800bba6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	d002      	beq.n	800ba60 <USBD_StdEPReq+0x1dc>
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d032      	beq.n	800bac4 <USBD_StdEPReq+0x240>
 800ba5e:	e097      	b.n	800bb90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba60:	7bbb      	ldrb	r3, [r7, #14]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d007      	beq.n	800ba76 <USBD_StdEPReq+0x1f2>
 800ba66:	7bbb      	ldrb	r3, [r7, #14]
 800ba68:	2b80      	cmp	r3, #128	; 0x80
 800ba6a:	d004      	beq.n	800ba76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ba6c:	6839      	ldr	r1, [r7, #0]
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 fbed 	bl	800c24e <USBD_CtlError>
                break;
 800ba74:	e091      	b.n	800bb9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	da0b      	bge.n	800ba96 <USBD_StdEPReq+0x212>
 800ba7e:	7bbb      	ldrb	r3, [r7, #14]
 800ba80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba84:	4613      	mov	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	3310      	adds	r3, #16
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	4413      	add	r3, r2
 800ba92:	3304      	adds	r3, #4
 800ba94:	e00b      	b.n	800baae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba96:	7bbb      	ldrb	r3, [r7, #14]
 800ba98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	4413      	add	r3, r2
 800baac:	3304      	adds	r3, #4
 800baae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	2200      	movs	r2, #0
 800bab4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	2202      	movs	r2, #2
 800baba:	4619      	mov	r1, r3
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 fc37 	bl	800c330 <USBD_CtlSendData>
              break;
 800bac2:	e06a      	b.n	800bb9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	da11      	bge.n	800baf0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bacc:	7bbb      	ldrb	r3, [r7, #14]
 800bace:	f003 020f 	and.w	r2, r3, #15
 800bad2:	6879      	ldr	r1, [r7, #4]
 800bad4:	4613      	mov	r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	4413      	add	r3, r2
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	440b      	add	r3, r1
 800bade:	3324      	adds	r3, #36	; 0x24
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d117      	bne.n	800bb16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bae6:	6839      	ldr	r1, [r7, #0]
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 fbb0 	bl	800c24e <USBD_CtlError>
                  break;
 800baee:	e054      	b.n	800bb9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800baf0:	7bbb      	ldrb	r3, [r7, #14]
 800baf2:	f003 020f 	and.w	r2, r3, #15
 800baf6:	6879      	ldr	r1, [r7, #4]
 800baf8:	4613      	mov	r3, r2
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	4413      	add	r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	440b      	add	r3, r1
 800bb02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bb06:	881b      	ldrh	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d104      	bne.n	800bb16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 fb9d 	bl	800c24e <USBD_CtlError>
                  break;
 800bb14:	e041      	b.n	800bb9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	da0b      	bge.n	800bb36 <USBD_StdEPReq+0x2b2>
 800bb1e:	7bbb      	ldrb	r3, [r7, #14]
 800bb20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb24:	4613      	mov	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	4413      	add	r3, r2
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	3310      	adds	r3, #16
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	4413      	add	r3, r2
 800bb32:	3304      	adds	r3, #4
 800bb34:	e00b      	b.n	800bb4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb36:	7bbb      	ldrb	r3, [r7, #14]
 800bb38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4413      	add	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	3304      	adds	r3, #4
 800bb4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bb50:	7bbb      	ldrb	r3, [r7, #14]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d002      	beq.n	800bb5c <USBD_StdEPReq+0x2d8>
 800bb56:	7bbb      	ldrb	r3, [r7, #14]
 800bb58:	2b80      	cmp	r3, #128	; 0x80
 800bb5a:	d103      	bne.n	800bb64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	601a      	str	r2, [r3, #0]
 800bb62:	e00e      	b.n	800bb82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bb64:	7bbb      	ldrb	r3, [r7, #14]
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f001 f867 	bl	800cc3c <USBD_LL_IsStallEP>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d003      	beq.n	800bb7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	2201      	movs	r2, #1
 800bb78:	601a      	str	r2, [r3, #0]
 800bb7a:	e002      	b.n	800bb82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	2202      	movs	r2, #2
 800bb86:	4619      	mov	r1, r3
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 fbd1 	bl	800c330 <USBD_CtlSendData>
              break;
 800bb8e:	e004      	b.n	800bb9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bb90:	6839      	ldr	r1, [r7, #0]
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 fb5b 	bl	800c24e <USBD_CtlError>
              break;
 800bb98:	bf00      	nop
          }
          break;
 800bb9a:	e004      	b.n	800bba6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bb9c:	6839      	ldr	r1, [r7, #0]
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fb55 	bl	800c24e <USBD_CtlError>
          break;
 800bba4:	bf00      	nop
      }
      break;
 800bba6:	e005      	b.n	800bbb4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bba8:	6839      	ldr	r1, [r7, #0]
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fb4f 	bl	800c24e <USBD_CtlError>
      break;
 800bbb0:	e000      	b.n	800bbb4 <USBD_StdEPReq+0x330>
      break;
 800bbb2:	bf00      	nop
  }

  return ret;
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
	...

0800bbc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	885b      	ldrh	r3, [r3, #2]
 800bbda:	0a1b      	lsrs	r3, r3, #8
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	2b06      	cmp	r3, #6
 800bbe2:	f200 8128 	bhi.w	800be36 <USBD_GetDescriptor+0x276>
 800bbe6:	a201      	add	r2, pc, #4	; (adr r2, 800bbec <USBD_GetDescriptor+0x2c>)
 800bbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbec:	0800bc09 	.word	0x0800bc09
 800bbf0:	0800bc21 	.word	0x0800bc21
 800bbf4:	0800bc61 	.word	0x0800bc61
 800bbf8:	0800be37 	.word	0x0800be37
 800bbfc:	0800be37 	.word	0x0800be37
 800bc00:	0800bdd7 	.word	0x0800bdd7
 800bc04:	0800be03 	.word	0x0800be03
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	7c12      	ldrb	r2, [r2, #16]
 800bc14:	f107 0108 	add.w	r1, r7, #8
 800bc18:	4610      	mov	r0, r2
 800bc1a:	4798      	blx	r3
 800bc1c:	60f8      	str	r0, [r7, #12]
      break;
 800bc1e:	e112      	b.n	800be46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	7c1b      	ldrb	r3, [r3, #16]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10d      	bne.n	800bc44 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc30:	f107 0208 	add.w	r2, r7, #8
 800bc34:	4610      	mov	r0, r2
 800bc36:	4798      	blx	r3
 800bc38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	2202      	movs	r2, #2
 800bc40:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bc42:	e100      	b.n	800be46 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4c:	f107 0208 	add.w	r2, r7, #8
 800bc50:	4610      	mov	r0, r2
 800bc52:	4798      	blx	r3
 800bc54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	2202      	movs	r2, #2
 800bc5c:	701a      	strb	r2, [r3, #0]
      break;
 800bc5e:	e0f2      	b.n	800be46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	885b      	ldrh	r3, [r3, #2]
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	2b05      	cmp	r3, #5
 800bc68:	f200 80ac 	bhi.w	800bdc4 <USBD_GetDescriptor+0x204>
 800bc6c:	a201      	add	r2, pc, #4	; (adr r2, 800bc74 <USBD_GetDescriptor+0xb4>)
 800bc6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc72:	bf00      	nop
 800bc74:	0800bc8d 	.word	0x0800bc8d
 800bc78:	0800bcc1 	.word	0x0800bcc1
 800bc7c:	0800bcf5 	.word	0x0800bcf5
 800bc80:	0800bd29 	.word	0x0800bd29
 800bc84:	0800bd5d 	.word	0x0800bd5d
 800bc88:	0800bd91 	.word	0x0800bd91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00b      	beq.n	800bcb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	7c12      	ldrb	r2, [r2, #16]
 800bca4:	f107 0108 	add.w	r1, r7, #8
 800bca8:	4610      	mov	r0, r2
 800bcaa:	4798      	blx	r3
 800bcac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcae:	e091      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcb0:	6839      	ldr	r1, [r7, #0]
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 facb 	bl	800c24e <USBD_CtlError>
            err++;
 800bcb8:	7afb      	ldrb	r3, [r7, #11]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	72fb      	strb	r3, [r7, #11]
          break;
 800bcbe:	e089      	b.n	800bdd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00b      	beq.n	800bce4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	7c12      	ldrb	r2, [r2, #16]
 800bcd8:	f107 0108 	add.w	r1, r7, #8
 800bcdc:	4610      	mov	r0, r2
 800bcde:	4798      	blx	r3
 800bce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bce2:	e077      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 fab1 	bl	800c24e <USBD_CtlError>
            err++;
 800bcec:	7afb      	ldrb	r3, [r7, #11]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	72fb      	strb	r3, [r7, #11]
          break;
 800bcf2:	e06f      	b.n	800bdd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00b      	beq.n	800bd18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	7c12      	ldrb	r2, [r2, #16]
 800bd0c:	f107 0108 	add.w	r1, r7, #8
 800bd10:	4610      	mov	r0, r2
 800bd12:	4798      	blx	r3
 800bd14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd16:	e05d      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fa97 	bl	800c24e <USBD_CtlError>
            err++;
 800bd20:	7afb      	ldrb	r3, [r7, #11]
 800bd22:	3301      	adds	r3, #1
 800bd24:	72fb      	strb	r3, [r7, #11]
          break;
 800bd26:	e055      	b.n	800bdd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00b      	beq.n	800bd4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	7c12      	ldrb	r2, [r2, #16]
 800bd40:	f107 0108 	add.w	r1, r7, #8
 800bd44:	4610      	mov	r0, r2
 800bd46:	4798      	blx	r3
 800bd48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd4a:	e043      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd4c:	6839      	ldr	r1, [r7, #0]
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 fa7d 	bl	800c24e <USBD_CtlError>
            err++;
 800bd54:	7afb      	ldrb	r3, [r7, #11]
 800bd56:	3301      	adds	r3, #1
 800bd58:	72fb      	strb	r3, [r7, #11]
          break;
 800bd5a:	e03b      	b.n	800bdd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd62:	695b      	ldr	r3, [r3, #20]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00b      	beq.n	800bd80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd6e:	695b      	ldr	r3, [r3, #20]
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	7c12      	ldrb	r2, [r2, #16]
 800bd74:	f107 0108 	add.w	r1, r7, #8
 800bd78:	4610      	mov	r0, r2
 800bd7a:	4798      	blx	r3
 800bd7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd7e:	e029      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd80:	6839      	ldr	r1, [r7, #0]
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 fa63 	bl	800c24e <USBD_CtlError>
            err++;
 800bd88:	7afb      	ldrb	r3, [r7, #11]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd8e:	e021      	b.n	800bdd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd96:	699b      	ldr	r3, [r3, #24]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00b      	beq.n	800bdb4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bda2:	699b      	ldr	r3, [r3, #24]
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	7c12      	ldrb	r2, [r2, #16]
 800bda8:	f107 0108 	add.w	r1, r7, #8
 800bdac:	4610      	mov	r0, r2
 800bdae:	4798      	blx	r3
 800bdb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdb2:	e00f      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdb4:	6839      	ldr	r1, [r7, #0]
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 fa49 	bl	800c24e <USBD_CtlError>
            err++;
 800bdbc:	7afb      	ldrb	r3, [r7, #11]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	72fb      	strb	r3, [r7, #11]
          break;
 800bdc2:	e007      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fa41 	bl	800c24e <USBD_CtlError>
          err++;
 800bdcc:	7afb      	ldrb	r3, [r7, #11]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bdd2:	bf00      	nop
      }
      break;
 800bdd4:	e037      	b.n	800be46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	7c1b      	ldrb	r3, [r3, #16]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d109      	bne.n	800bdf2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bde4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bde6:	f107 0208 	add.w	r2, r7, #8
 800bdea:	4610      	mov	r0, r2
 800bdec:	4798      	blx	r3
 800bdee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdf0:	e029      	b.n	800be46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bdf2:	6839      	ldr	r1, [r7, #0]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 fa2a 	bl	800c24e <USBD_CtlError>
        err++;
 800bdfa:	7afb      	ldrb	r3, [r7, #11]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	72fb      	strb	r3, [r7, #11]
      break;
 800be00:	e021      	b.n	800be46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	7c1b      	ldrb	r3, [r3, #16]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10d      	bne.n	800be26 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be12:	f107 0208 	add.w	r2, r7, #8
 800be16:	4610      	mov	r0, r2
 800be18:	4798      	blx	r3
 800be1a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	3301      	adds	r3, #1
 800be20:	2207      	movs	r2, #7
 800be22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be24:	e00f      	b.n	800be46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fa10 	bl	800c24e <USBD_CtlError>
        err++;
 800be2e:	7afb      	ldrb	r3, [r7, #11]
 800be30:	3301      	adds	r3, #1
 800be32:	72fb      	strb	r3, [r7, #11]
      break;
 800be34:	e007      	b.n	800be46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800be36:	6839      	ldr	r1, [r7, #0]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 fa08 	bl	800c24e <USBD_CtlError>
      err++;
 800be3e:	7afb      	ldrb	r3, [r7, #11]
 800be40:	3301      	adds	r3, #1
 800be42:	72fb      	strb	r3, [r7, #11]
      break;
 800be44:	bf00      	nop
  }

  if (err != 0U)
 800be46:	7afb      	ldrb	r3, [r7, #11]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d11e      	bne.n	800be8a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	88db      	ldrh	r3, [r3, #6]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d016      	beq.n	800be82 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800be54:	893b      	ldrh	r3, [r7, #8]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00e      	beq.n	800be78 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	88da      	ldrh	r2, [r3, #6]
 800be5e:	893b      	ldrh	r3, [r7, #8]
 800be60:	4293      	cmp	r3, r2
 800be62:	bf28      	it	cs
 800be64:	4613      	movcs	r3, r2
 800be66:	b29b      	uxth	r3, r3
 800be68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800be6a:	893b      	ldrh	r3, [r7, #8]
 800be6c:	461a      	mov	r2, r3
 800be6e:	68f9      	ldr	r1, [r7, #12]
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 fa5d 	bl	800c330 <USBD_CtlSendData>
 800be76:	e009      	b.n	800be8c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800be78:	6839      	ldr	r1, [r7, #0]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 f9e7 	bl	800c24e <USBD_CtlError>
 800be80:	e004      	b.n	800be8c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 faae 	bl	800c3e4 <USBD_CtlSendStatus>
 800be88:	e000      	b.n	800be8c <USBD_GetDescriptor+0x2cc>
    return;
 800be8a:	bf00      	nop
  }
}
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop

0800be94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	889b      	ldrh	r3, [r3, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d131      	bne.n	800bf0a <USBD_SetAddress+0x76>
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	88db      	ldrh	r3, [r3, #6]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d12d      	bne.n	800bf0a <USBD_SetAddress+0x76>
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	885b      	ldrh	r3, [r3, #2]
 800beb2:	2b7f      	cmp	r3, #127	; 0x7f
 800beb4:	d829      	bhi.n	800bf0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	885b      	ldrh	r3, [r3, #2]
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bec0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	2b03      	cmp	r3, #3
 800becc:	d104      	bne.n	800bed8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 f9bc 	bl	800c24e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bed6:	e01d      	b.n	800bf14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	7bfa      	ldrb	r2, [r7, #15]
 800bedc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bee0:	7bfb      	ldrb	r3, [r7, #15]
 800bee2:	4619      	mov	r1, r3
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fed5 	bl	800cc94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fa7a 	bl	800c3e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d004      	beq.n	800bf00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2202      	movs	r2, #2
 800befa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800befe:	e009      	b.n	800bf14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf08:	e004      	b.n	800bf14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf0a:	6839      	ldr	r1, [r7, #0]
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 f99e 	bl	800c24e <USBD_CtlError>
  }
}
 800bf12:	bf00      	nop
 800bf14:	bf00      	nop
 800bf16:	3710      	adds	r7, #16
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf26:	2300      	movs	r3, #0
 800bf28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	885b      	ldrh	r3, [r3, #2]
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	4b4e      	ldr	r3, [pc, #312]	; (800c06c <USBD_SetConfig+0x150>)
 800bf32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf34:	4b4d      	ldr	r3, [pc, #308]	; (800c06c <USBD_SetConfig+0x150>)
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d905      	bls.n	800bf48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 f985 	bl	800c24e <USBD_CtlError>
    return USBD_FAIL;
 800bf44:	2303      	movs	r3, #3
 800bf46:	e08c      	b.n	800c062 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	2b02      	cmp	r3, #2
 800bf52:	d002      	beq.n	800bf5a <USBD_SetConfig+0x3e>
 800bf54:	2b03      	cmp	r3, #3
 800bf56:	d029      	beq.n	800bfac <USBD_SetConfig+0x90>
 800bf58:	e075      	b.n	800c046 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bf5a:	4b44      	ldr	r3, [pc, #272]	; (800c06c <USBD_SetConfig+0x150>)
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d020      	beq.n	800bfa4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bf62:	4b42      	ldr	r3, [pc, #264]	; (800c06c <USBD_SetConfig+0x150>)
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	461a      	mov	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf6c:	4b3f      	ldr	r3, [pc, #252]	; (800c06c <USBD_SetConfig+0x150>)
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	4619      	mov	r1, r3
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7fe ffe7 	bl	800af46 <USBD_SetClassConfig>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d008      	beq.n	800bf94 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bf82:	6839      	ldr	r1, [r7, #0]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 f962 	bl	800c24e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf92:	e065      	b.n	800c060 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 fa25 	bl	800c3e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2203      	movs	r2, #3
 800bf9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bfa2:	e05d      	b.n	800c060 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fa1d 	bl	800c3e4 <USBD_CtlSendStatus>
      break;
 800bfaa:	e059      	b.n	800c060 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bfac:	4b2f      	ldr	r3, [pc, #188]	; (800c06c <USBD_SetConfig+0x150>)
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d112      	bne.n	800bfda <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2202      	movs	r2, #2
 800bfb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bfbc:	4b2b      	ldr	r3, [pc, #172]	; (800c06c <USBD_SetConfig+0x150>)
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bfc6:	4b29      	ldr	r3, [pc, #164]	; (800c06c <USBD_SetConfig+0x150>)
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	4619      	mov	r1, r3
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f7fe ffd6 	bl	800af7e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 fa06 	bl	800c3e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bfd8:	e042      	b.n	800c060 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bfda:	4b24      	ldr	r3, [pc, #144]	; (800c06c <USBD_SetConfig+0x150>)
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	461a      	mov	r2, r3
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d02a      	beq.n	800c03e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	4619      	mov	r1, r3
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7fe ffc4 	bl	800af7e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bff6:	4b1d      	ldr	r3, [pc, #116]	; (800c06c <USBD_SetConfig+0x150>)
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	461a      	mov	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c000:	4b1a      	ldr	r3, [pc, #104]	; (800c06c <USBD_SetConfig+0x150>)
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f7fe ff9d 	bl	800af46 <USBD_SetClassConfig>
 800c00c:	4603      	mov	r3, r0
 800c00e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c010:	7bfb      	ldrb	r3, [r7, #15]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00f      	beq.n	800c036 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f918 	bl	800c24e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	b2db      	uxtb	r3, r3
 800c024:	4619      	mov	r1, r3
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f7fe ffa9 	bl	800af7e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2202      	movs	r2, #2
 800c030:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c034:	e014      	b.n	800c060 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f9d4 	bl	800c3e4 <USBD_CtlSendStatus>
      break;
 800c03c:	e010      	b.n	800c060 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f9d0 	bl	800c3e4 <USBD_CtlSendStatus>
      break;
 800c044:	e00c      	b.n	800c060 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c046:	6839      	ldr	r1, [r7, #0]
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f900 	bl	800c24e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c04e:	4b07      	ldr	r3, [pc, #28]	; (800c06c <USBD_SetConfig+0x150>)
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	4619      	mov	r1, r3
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f7fe ff92 	bl	800af7e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c05a:	2303      	movs	r3, #3
 800c05c:	73fb      	strb	r3, [r7, #15]
      break;
 800c05e:	bf00      	nop
  }

  return ret;
 800c060:	7bfb      	ldrb	r3, [r7, #15]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	20000750 	.word	0x20000750

0800c070 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	88db      	ldrh	r3, [r3, #6]
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d004      	beq.n	800c08c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c082:	6839      	ldr	r1, [r7, #0]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 f8e2 	bl	800c24e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c08a:	e023      	b.n	800c0d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b02      	cmp	r3, #2
 800c096:	dc02      	bgt.n	800c09e <USBD_GetConfig+0x2e>
 800c098:	2b00      	cmp	r3, #0
 800c09a:	dc03      	bgt.n	800c0a4 <USBD_GetConfig+0x34>
 800c09c:	e015      	b.n	800c0ca <USBD_GetConfig+0x5a>
 800c09e:	2b03      	cmp	r3, #3
 800c0a0:	d00b      	beq.n	800c0ba <USBD_GetConfig+0x4a>
 800c0a2:	e012      	b.n	800c0ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	3308      	adds	r3, #8
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f93c 	bl	800c330 <USBD_CtlSendData>
        break;
 800c0b8:	e00c      	b.n	800c0d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	3304      	adds	r3, #4
 800c0be:	2201      	movs	r2, #1
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f000 f934 	bl	800c330 <USBD_CtlSendData>
        break;
 800c0c8:	e004      	b.n	800c0d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f8be 	bl	800c24e <USBD_CtlError>
        break;
 800c0d2:	bf00      	nop
}
 800c0d4:	bf00      	nop
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	3b01      	subs	r3, #1
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	d81e      	bhi.n	800c132 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	88db      	ldrh	r3, [r3, #6]
 800c0f8:	2b02      	cmp	r3, #2
 800c0fa:	d004      	beq.n	800c106 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 f8a5 	bl	800c24e <USBD_CtlError>
        break;
 800c104:	e01a      	b.n	800c13c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2201      	movs	r2, #1
 800c10a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c112:	2b00      	cmp	r3, #0
 800c114:	d005      	beq.n	800c122 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	f043 0202 	orr.w	r2, r3, #2
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	330c      	adds	r3, #12
 800c126:	2202      	movs	r2, #2
 800c128:	4619      	mov	r1, r3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 f900 	bl	800c330 <USBD_CtlSendData>
      break;
 800c130:	e004      	b.n	800c13c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c132:	6839      	ldr	r1, [r7, #0]
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 f88a 	bl	800c24e <USBD_CtlError>
      break;
 800c13a:	bf00      	nop
  }
}
 800c13c:	bf00      	nop
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	885b      	ldrh	r3, [r3, #2]
 800c152:	2b01      	cmp	r3, #1
 800c154:	d107      	bne.n	800c166 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2201      	movs	r2, #1
 800c15a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f940 	bl	800c3e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c164:	e013      	b.n	800c18e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	885b      	ldrh	r3, [r3, #2]
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d10b      	bne.n	800c186 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	889b      	ldrh	r3, [r3, #4]
 800c172:	0a1b      	lsrs	r3, r3, #8
 800c174:	b29b      	uxth	r3, r3
 800c176:	b2da      	uxtb	r2, r3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f930 	bl	800c3e4 <USBD_CtlSendStatus>
}
 800c184:	e003      	b.n	800c18e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 f860 	bl	800c24e <USBD_CtlError>
}
 800c18e:	bf00      	nop
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b082      	sub	sp, #8
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	d80b      	bhi.n	800c1c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	885b      	ldrh	r3, [r3, #2]
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d10c      	bne.n	800c1d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f910 	bl	800c3e4 <USBD_CtlSendStatus>
      }
      break;
 800c1c4:	e004      	b.n	800c1d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 f840 	bl	800c24e <USBD_CtlError>
      break;
 800c1ce:	e000      	b.n	800c1d2 <USBD_ClrFeature+0x3c>
      break;
 800c1d0:	bf00      	nop
  }
}
 800c1d2:	bf00      	nop
 800c1d4:	3708      	adds	r7, #8
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b084      	sub	sp, #16
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	781a      	ldrb	r2, [r3, #0]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	781a      	ldrb	r2, [r3, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	3301      	adds	r3, #1
 800c202:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f7ff fa41 	bl	800b68c <SWAPBYTE>
 800c20a:	4603      	mov	r3, r0
 800c20c:	461a      	mov	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	3301      	adds	r3, #1
 800c216:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	3301      	adds	r3, #1
 800c21c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	f7ff fa34 	bl	800b68c <SWAPBYTE>
 800c224:	4603      	mov	r3, r0
 800c226:	461a      	mov	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	3301      	adds	r3, #1
 800c230:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	3301      	adds	r3, #1
 800c236:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f7ff fa27 	bl	800b68c <SWAPBYTE>
 800c23e:	4603      	mov	r3, r0
 800c240:	461a      	mov	r2, r3
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	80da      	strh	r2, [r3, #6]
}
 800c246:	bf00      	nop
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b082      	sub	sp, #8
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
 800c256:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c258:	2180      	movs	r1, #128	; 0x80
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 fcb0 	bl	800cbc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c260:	2100      	movs	r1, #0
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 fcac 	bl	800cbc0 <USBD_LL_StallEP>
}
 800c268:	bf00      	nop
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c27c:	2300      	movs	r3, #0
 800c27e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d036      	beq.n	800c2f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c28a:	6938      	ldr	r0, [r7, #16]
 800c28c:	f000 f836 	bl	800c2fc <USBD_GetLen>
 800c290:	4603      	mov	r3, r0
 800c292:	3301      	adds	r3, #1
 800c294:	b29b      	uxth	r3, r3
 800c296:	005b      	lsls	r3, r3, #1
 800c298:	b29a      	uxth	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c29e:	7dfb      	ldrb	r3, [r7, #23]
 800c2a0:	68ba      	ldr	r2, [r7, #8]
 800c2a2:	4413      	add	r3, r2
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	7812      	ldrb	r2, [r2, #0]
 800c2a8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c2aa:	7dfb      	ldrb	r3, [r7, #23]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c2b0:	7dfb      	ldrb	r3, [r7, #23]
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	2203      	movs	r2, #3
 800c2b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c2ba:	7dfb      	ldrb	r3, [r7, #23]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c2c0:	e013      	b.n	800c2ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c2c2:	7dfb      	ldrb	r3, [r7, #23]
 800c2c4:	68ba      	ldr	r2, [r7, #8]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	7812      	ldrb	r2, [r2, #0]
 800c2cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	613b      	str	r3, [r7, #16]
    idx++;
 800c2d4:	7dfb      	ldrb	r3, [r7, #23]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c2da:	7dfb      	ldrb	r3, [r7, #23]
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	4413      	add	r3, r2
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	701a      	strb	r2, [r3, #0]
    idx++;
 800c2e4:	7dfb      	ldrb	r3, [r7, #23]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1e7      	bne.n	800c2c2 <USBD_GetString+0x52>
 800c2f2:	e000      	b.n	800c2f6 <USBD_GetString+0x86>
    return;
 800c2f4:	bf00      	nop
  }
}
 800c2f6:	3718      	adds	r7, #24
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c304:	2300      	movs	r3, #0
 800c306:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c30c:	e005      	b.n	800c31a <USBD_GetLen+0x1e>
  {
    len++;
 800c30e:	7bfb      	ldrb	r3, [r7, #15]
 800c310:	3301      	adds	r3, #1
 800c312:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	3301      	adds	r3, #1
 800c318:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1f5      	bne.n	800c30e <USBD_GetLen+0x12>
  }

  return len;
 800c322:	7bfb      	ldrb	r3, [r7, #15]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3714      	adds	r7, #20
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2202      	movs	r2, #2
 800c340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	2100      	movs	r1, #0
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	f000 fcbb 	bl	800ccd2 <USBD_LL_Transmit>

  return USBD_OK;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	60f8      	str	r0, [r7, #12]
 800c36e:	60b9      	str	r1, [r7, #8]
 800c370:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	68ba      	ldr	r2, [r7, #8]
 800c376:	2100      	movs	r1, #0
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f000 fcaa 	bl	800ccd2 <USBD_LL_Transmit>

  return USBD_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2203      	movs	r2, #3
 800c398:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	68ba      	ldr	r2, [r7, #8]
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f000 fcae 	bl	800cd14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b084      	sub	sp, #16
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	60f8      	str	r0, [r7, #12]
 800c3ca:	60b9      	str	r1, [r7, #8]
 800c3cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f000 fc9d 	bl	800cd14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3da:	2300      	movs	r3, #0
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2204      	movs	r2, #4
 800c3f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 fc69 	bl	800ccd2 <USBD_LL_Transmit>

  return USBD_OK;
 800c400:	2300      	movs	r3, #0
}
 800c402:	4618      	mov	r0, r3
 800c404:	3708      	adds	r7, #8
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b082      	sub	sp, #8
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2205      	movs	r2, #5
 800c416:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c41a:	2300      	movs	r3, #0
 800c41c:	2200      	movs	r2, #0
 800c41e:	2100      	movs	r1, #0
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 fc77 	bl	800cd14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c434:	2200      	movs	r2, #0
 800c436:	4912      	ldr	r1, [pc, #72]	; (800c480 <MX_USB_DEVICE_Init+0x50>)
 800c438:	4812      	ldr	r0, [pc, #72]	; (800c484 <MX_USB_DEVICE_Init+0x54>)
 800c43a:	f7fe fd07 	bl	800ae4c <USBD_Init>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d001      	beq.n	800c448 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c444:	f7f5 fade 	bl	8001a04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c448:	490f      	ldr	r1, [pc, #60]	; (800c488 <MX_USB_DEVICE_Init+0x58>)
 800c44a:	480e      	ldr	r0, [pc, #56]	; (800c484 <MX_USB_DEVICE_Init+0x54>)
 800c44c:	f7fe fd2e 	bl	800aeac <USBD_RegisterClass>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d001      	beq.n	800c45a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c456:	f7f5 fad5 	bl	8001a04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c45a:	490c      	ldr	r1, [pc, #48]	; (800c48c <MX_USB_DEVICE_Init+0x5c>)
 800c45c:	4809      	ldr	r0, [pc, #36]	; (800c484 <MX_USB_DEVICE_Init+0x54>)
 800c45e:	f7fe fc65 	bl	800ad2c <USBD_CDC_RegisterInterface>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d001      	beq.n	800c46c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c468:	f7f5 facc 	bl	8001a04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c46c:	4805      	ldr	r0, [pc, #20]	; (800c484 <MX_USB_DEVICE_Init+0x54>)
 800c46e:	f7fe fd53 	bl	800af18 <USBD_Start>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d001      	beq.n	800c47c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c478:	f7f5 fac4 	bl	8001a04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c47c:	bf00      	nop
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	200000d0 	.word	0x200000d0
 800c484:	20000754 	.word	0x20000754
 800c488:	2000003c 	.word	0x2000003c
 800c48c:	200000bc 	.word	0x200000bc

0800c490 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c494:	2200      	movs	r2, #0
 800c496:	4905      	ldr	r1, [pc, #20]	; (800c4ac <CDC_Init_FS+0x1c>)
 800c498:	4805      	ldr	r0, [pc, #20]	; (800c4b0 <CDC_Init_FS+0x20>)
 800c49a:	f7fe fc61 	bl	800ad60 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c49e:	4905      	ldr	r1, [pc, #20]	; (800c4b4 <CDC_Init_FS+0x24>)
 800c4a0:	4803      	ldr	r0, [pc, #12]	; (800c4b0 <CDC_Init_FS+0x20>)
 800c4a2:	f7fe fc7f 	bl	800ada4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c4a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	20001230 	.word	0x20001230
 800c4b0:	20000754 	.word	0x20000754
 800c4b4:	20000a30 	.word	0x20000a30

0800c4b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c4bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	6039      	str	r1, [r7, #0]
 800c4d2:	71fb      	strb	r3, [r7, #7]
 800c4d4:	4613      	mov	r3, r2
 800c4d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c4d8:	79fb      	ldrb	r3, [r7, #7]
 800c4da:	2b23      	cmp	r3, #35	; 0x23
 800c4dc:	d84a      	bhi.n	800c574 <CDC_Control_FS+0xac>
 800c4de:	a201      	add	r2, pc, #4	; (adr r2, 800c4e4 <CDC_Control_FS+0x1c>)
 800c4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e4:	0800c575 	.word	0x0800c575
 800c4e8:	0800c575 	.word	0x0800c575
 800c4ec:	0800c575 	.word	0x0800c575
 800c4f0:	0800c575 	.word	0x0800c575
 800c4f4:	0800c575 	.word	0x0800c575
 800c4f8:	0800c575 	.word	0x0800c575
 800c4fc:	0800c575 	.word	0x0800c575
 800c500:	0800c575 	.word	0x0800c575
 800c504:	0800c575 	.word	0x0800c575
 800c508:	0800c575 	.word	0x0800c575
 800c50c:	0800c575 	.word	0x0800c575
 800c510:	0800c575 	.word	0x0800c575
 800c514:	0800c575 	.word	0x0800c575
 800c518:	0800c575 	.word	0x0800c575
 800c51c:	0800c575 	.word	0x0800c575
 800c520:	0800c575 	.word	0x0800c575
 800c524:	0800c575 	.word	0x0800c575
 800c528:	0800c575 	.word	0x0800c575
 800c52c:	0800c575 	.word	0x0800c575
 800c530:	0800c575 	.word	0x0800c575
 800c534:	0800c575 	.word	0x0800c575
 800c538:	0800c575 	.word	0x0800c575
 800c53c:	0800c575 	.word	0x0800c575
 800c540:	0800c575 	.word	0x0800c575
 800c544:	0800c575 	.word	0x0800c575
 800c548:	0800c575 	.word	0x0800c575
 800c54c:	0800c575 	.word	0x0800c575
 800c550:	0800c575 	.word	0x0800c575
 800c554:	0800c575 	.word	0x0800c575
 800c558:	0800c575 	.word	0x0800c575
 800c55c:	0800c575 	.word	0x0800c575
 800c560:	0800c575 	.word	0x0800c575
 800c564:	0800c575 	.word	0x0800c575
 800c568:	0800c575 	.word	0x0800c575
 800c56c:	0800c575 	.word	0x0800c575
 800c570:	0800c575 	.word	0x0800c575
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c574:	bf00      	nop
  }

  return (USBD_OK);
 800c576:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c578:	4618      	mov	r0, r3
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c58e:	6879      	ldr	r1, [r7, #4]
 800c590:	4805      	ldr	r0, [pc, #20]	; (800c5a8 <CDC_Receive_FS+0x24>)
 800c592:	f7fe fc07 	bl	800ada4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c596:	4804      	ldr	r0, [pc, #16]	; (800c5a8 <CDC_Receive_FS+0x24>)
 800c598:	f7fe fc22 	bl	800ade0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c59c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	20000754 	.word	0x20000754

0800c5ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b087      	sub	sp, #28
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c5be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	371c      	adds	r7, #28
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
	...

0800c5d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	6039      	str	r1, [r7, #0]
 800c5da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2212      	movs	r2, #18
 800c5e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c5e2:	4b03      	ldr	r3, [pc, #12]	; (800c5f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	370c      	adds	r7, #12
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr
 800c5f0:	200000ec 	.word	0x200000ec

0800c5f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	6039      	str	r1, [r7, #0]
 800c5fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	2204      	movs	r2, #4
 800c604:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c606:	4b03      	ldr	r3, [pc, #12]	; (800c614 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c608:	4618      	mov	r0, r3
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr
 800c614:	20000100 	.word	0x20000100

0800c618 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	4603      	mov	r3, r0
 800c620:	6039      	str	r1, [r7, #0]
 800c622:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c624:	79fb      	ldrb	r3, [r7, #7]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d105      	bne.n	800c636 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c62a:	683a      	ldr	r2, [r7, #0]
 800c62c:	4907      	ldr	r1, [pc, #28]	; (800c64c <USBD_FS_ProductStrDescriptor+0x34>)
 800c62e:	4808      	ldr	r0, [pc, #32]	; (800c650 <USBD_FS_ProductStrDescriptor+0x38>)
 800c630:	f7ff fe1e 	bl	800c270 <USBD_GetString>
 800c634:	e004      	b.n	800c640 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c636:	683a      	ldr	r2, [r7, #0]
 800c638:	4904      	ldr	r1, [pc, #16]	; (800c64c <USBD_FS_ProductStrDescriptor+0x34>)
 800c63a:	4805      	ldr	r0, [pc, #20]	; (800c650 <USBD_FS_ProductStrDescriptor+0x38>)
 800c63c:	f7ff fe18 	bl	800c270 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c640:	4b02      	ldr	r3, [pc, #8]	; (800c64c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c642:	4618      	mov	r0, r3
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	20001a30 	.word	0x20001a30
 800c650:	0800f798 	.word	0x0800f798

0800c654 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	4603      	mov	r3, r0
 800c65c:	6039      	str	r1, [r7, #0]
 800c65e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c660:	683a      	ldr	r2, [r7, #0]
 800c662:	4904      	ldr	r1, [pc, #16]	; (800c674 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c664:	4804      	ldr	r0, [pc, #16]	; (800c678 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c666:	f7ff fe03 	bl	800c270 <USBD_GetString>
  return USBD_StrDesc;
 800c66a:	4b02      	ldr	r3, [pc, #8]	; (800c674 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	20001a30 	.word	0x20001a30
 800c678:	0800f7b0 	.word	0x0800f7b0

0800c67c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	4603      	mov	r3, r0
 800c684:	6039      	str	r1, [r7, #0]
 800c686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	221a      	movs	r2, #26
 800c68c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c68e:	f000 f843 	bl	800c718 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c692:	4b02      	ldr	r3, [pc, #8]	; (800c69c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c694:	4618      	mov	r0, r3
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	20000104 	.word	0x20000104

0800c6a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	6039      	str	r1, [r7, #0]
 800c6aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c6ac:	79fb      	ldrb	r3, [r7, #7]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d105      	bne.n	800c6be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6b2:	683a      	ldr	r2, [r7, #0]
 800c6b4:	4907      	ldr	r1, [pc, #28]	; (800c6d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6b6:	4808      	ldr	r0, [pc, #32]	; (800c6d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6b8:	f7ff fdda 	bl	800c270 <USBD_GetString>
 800c6bc:	e004      	b.n	800c6c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6be:	683a      	ldr	r2, [r7, #0]
 800c6c0:	4904      	ldr	r1, [pc, #16]	; (800c6d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6c2:	4805      	ldr	r0, [pc, #20]	; (800c6d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6c4:	f7ff fdd4 	bl	800c270 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6c8:	4b02      	ldr	r3, [pc, #8]	; (800c6d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	20001a30 	.word	0x20001a30
 800c6d8:	0800f7c4 	.word	0x0800f7c4

0800c6dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	6039      	str	r1, [r7, #0]
 800c6e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c6e8:	79fb      	ldrb	r3, [r7, #7]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d105      	bne.n	800c6fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c6ee:	683a      	ldr	r2, [r7, #0]
 800c6f0:	4907      	ldr	r1, [pc, #28]	; (800c710 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c6f2:	4808      	ldr	r0, [pc, #32]	; (800c714 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c6f4:	f7ff fdbc 	bl	800c270 <USBD_GetString>
 800c6f8:	e004      	b.n	800c704 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c6fa:	683a      	ldr	r2, [r7, #0]
 800c6fc:	4904      	ldr	r1, [pc, #16]	; (800c710 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c6fe:	4805      	ldr	r0, [pc, #20]	; (800c714 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c700:	f7ff fdb6 	bl	800c270 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c704:	4b02      	ldr	r3, [pc, #8]	; (800c710 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c706:	4618      	mov	r0, r3
 800c708:	3708      	adds	r7, #8
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	20001a30 	.word	0x20001a30
 800c714:	0800f7d0 	.word	0x0800f7d0

0800c718 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c71e:	4b0f      	ldr	r3, [pc, #60]	; (800c75c <Get_SerialNum+0x44>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c724:	4b0e      	ldr	r3, [pc, #56]	; (800c760 <Get_SerialNum+0x48>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c72a:	4b0e      	ldr	r3, [pc, #56]	; (800c764 <Get_SerialNum+0x4c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	4413      	add	r3, r2
 800c736:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d009      	beq.n	800c752 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c73e:	2208      	movs	r2, #8
 800c740:	4909      	ldr	r1, [pc, #36]	; (800c768 <Get_SerialNum+0x50>)
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f000 f814 	bl	800c770 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c748:	2204      	movs	r2, #4
 800c74a:	4908      	ldr	r1, [pc, #32]	; (800c76c <Get_SerialNum+0x54>)
 800c74c:	68b8      	ldr	r0, [r7, #8]
 800c74e:	f000 f80f 	bl	800c770 <IntToUnicode>
  }
}
 800c752:	bf00      	nop
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	1fff7a10 	.word	0x1fff7a10
 800c760:	1fff7a14 	.word	0x1fff7a14
 800c764:	1fff7a18 	.word	0x1fff7a18
 800c768:	20000106 	.word	0x20000106
 800c76c:	20000116 	.word	0x20000116

0800c770 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c770:	b480      	push	{r7}
 800c772:	b087      	sub	sp, #28
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	4613      	mov	r3, r2
 800c77c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c782:	2300      	movs	r3, #0
 800c784:	75fb      	strb	r3, [r7, #23]
 800c786:	e027      	b.n	800c7d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	0f1b      	lsrs	r3, r3, #28
 800c78c:	2b09      	cmp	r3, #9
 800c78e:	d80b      	bhi.n	800c7a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	0f1b      	lsrs	r3, r3, #28
 800c794:	b2da      	uxtb	r2, r3
 800c796:	7dfb      	ldrb	r3, [r7, #23]
 800c798:	005b      	lsls	r3, r3, #1
 800c79a:	4619      	mov	r1, r3
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	440b      	add	r3, r1
 800c7a0:	3230      	adds	r2, #48	; 0x30
 800c7a2:	b2d2      	uxtb	r2, r2
 800c7a4:	701a      	strb	r2, [r3, #0]
 800c7a6:	e00a      	b.n	800c7be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	0f1b      	lsrs	r3, r3, #28
 800c7ac:	b2da      	uxtb	r2, r3
 800c7ae:	7dfb      	ldrb	r3, [r7, #23]
 800c7b0:	005b      	lsls	r3, r3, #1
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	440b      	add	r3, r1
 800c7b8:	3237      	adds	r2, #55	; 0x37
 800c7ba:	b2d2      	uxtb	r2, r2
 800c7bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	011b      	lsls	r3, r3, #4
 800c7c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c7c4:	7dfb      	ldrb	r3, [r7, #23]
 800c7c6:	005b      	lsls	r3, r3, #1
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	68ba      	ldr	r2, [r7, #8]
 800c7cc:	4413      	add	r3, r2
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c7d2:	7dfb      	ldrb	r3, [r7, #23]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	75fb      	strb	r3, [r7, #23]
 800c7d8:	7dfa      	ldrb	r2, [r7, #23]
 800c7da:	79fb      	ldrb	r3, [r7, #7]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d3d3      	bcc.n	800c788 <IntToUnicode+0x18>
  }
}
 800c7e0:	bf00      	nop
 800c7e2:	bf00      	nop
 800c7e4:	371c      	adds	r7, #28
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr
	...

0800c7f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b08a      	sub	sp, #40	; 0x28
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7f8:	f107 0314 	add.w	r3, r7, #20
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	601a      	str	r2, [r3, #0]
 800c800:	605a      	str	r2, [r3, #4]
 800c802:	609a      	str	r2, [r3, #8]
 800c804:	60da      	str	r2, [r3, #12]
 800c806:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c810:	d13a      	bne.n	800c888 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c812:	2300      	movs	r3, #0
 800c814:	613b      	str	r3, [r7, #16]
 800c816:	4b1e      	ldr	r3, [pc, #120]	; (800c890 <HAL_PCD_MspInit+0xa0>)
 800c818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c81a:	4a1d      	ldr	r2, [pc, #116]	; (800c890 <HAL_PCD_MspInit+0xa0>)
 800c81c:	f043 0301 	orr.w	r3, r3, #1
 800c820:	6313      	str	r3, [r2, #48]	; 0x30
 800c822:	4b1b      	ldr	r3, [pc, #108]	; (800c890 <HAL_PCD_MspInit+0xa0>)
 800c824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c826:	f003 0301 	and.w	r3, r3, #1
 800c82a:	613b      	str	r3, [r7, #16]
 800c82c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c82e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c834:	2302      	movs	r3, #2
 800c836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c838:	2300      	movs	r3, #0
 800c83a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c83c:	2303      	movs	r3, #3
 800c83e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c840:	230a      	movs	r3, #10
 800c842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c844:	f107 0314 	add.w	r3, r7, #20
 800c848:	4619      	mov	r1, r3
 800c84a:	4812      	ldr	r0, [pc, #72]	; (800c894 <HAL_PCD_MspInit+0xa4>)
 800c84c:	f7f6 f9be 	bl	8002bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c850:	4b0f      	ldr	r3, [pc, #60]	; (800c890 <HAL_PCD_MspInit+0xa0>)
 800c852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c854:	4a0e      	ldr	r2, [pc, #56]	; (800c890 <HAL_PCD_MspInit+0xa0>)
 800c856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c85a:	6353      	str	r3, [r2, #52]	; 0x34
 800c85c:	2300      	movs	r3, #0
 800c85e:	60fb      	str	r3, [r7, #12]
 800c860:	4b0b      	ldr	r3, [pc, #44]	; (800c890 <HAL_PCD_MspInit+0xa0>)
 800c862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c864:	4a0a      	ldr	r2, [pc, #40]	; (800c890 <HAL_PCD_MspInit+0xa0>)
 800c866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c86a:	6453      	str	r3, [r2, #68]	; 0x44
 800c86c:	4b08      	ldr	r3, [pc, #32]	; (800c890 <HAL_PCD_MspInit+0xa0>)
 800c86e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c874:	60fb      	str	r3, [r7, #12]
 800c876:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c878:	2200      	movs	r2, #0
 800c87a:	2100      	movs	r1, #0
 800c87c:	2043      	movs	r0, #67	; 0x43
 800c87e:	f7f6 f93e 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c882:	2043      	movs	r0, #67	; 0x43
 800c884:	f7f6 f957 	bl	8002b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c888:	bf00      	nop
 800c88a:	3728      	adds	r7, #40	; 0x28
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	40023800 	.word	0x40023800
 800c894:	40020000 	.word	0x40020000

0800c898 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	f7fe fb7f 	bl	800afb2 <USBD_LL_SetupStage>
}
 800c8b4:	bf00      	nop
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c8ce:	78fa      	ldrb	r2, [r7, #3]
 800c8d0:	6879      	ldr	r1, [r7, #4]
 800c8d2:	4613      	mov	r3, r2
 800c8d4:	00db      	lsls	r3, r3, #3
 800c8d6:	4413      	add	r3, r2
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	440b      	add	r3, r1
 800c8dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	78fb      	ldrb	r3, [r7, #3]
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	f7fe fbb9 	bl	800b05c <USBD_LL_DataOutStage>
}
 800c8ea:	bf00      	nop
 800c8ec:	3708      	adds	r7, #8
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b082      	sub	sp, #8
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c904:	78fa      	ldrb	r2, [r7, #3]
 800c906:	6879      	ldr	r1, [r7, #4]
 800c908:	4613      	mov	r3, r2
 800c90a:	00db      	lsls	r3, r3, #3
 800c90c:	4413      	add	r3, r2
 800c90e:	009b      	lsls	r3, r3, #2
 800c910:	440b      	add	r3, r1
 800c912:	334c      	adds	r3, #76	; 0x4c
 800c914:	681a      	ldr	r2, [r3, #0]
 800c916:	78fb      	ldrb	r3, [r7, #3]
 800c918:	4619      	mov	r1, r3
 800c91a:	f7fe fc52 	bl	800b1c2 <USBD_LL_DataInStage>
}
 800c91e:	bf00      	nop
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c926:	b580      	push	{r7, lr}
 800c928:	b082      	sub	sp, #8
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c934:	4618      	mov	r0, r3
 800c936:	f7fe fd86 	bl	800b446 <USBD_LL_SOF>
}
 800c93a:	bf00      	nop
 800c93c:	3708      	adds	r7, #8
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}

0800c942 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b084      	sub	sp, #16
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c94a:	2301      	movs	r3, #1
 800c94c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	2b02      	cmp	r3, #2
 800c954:	d001      	beq.n	800c95a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c956:	f7f5 f855 	bl	8001a04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c960:	7bfa      	ldrb	r2, [r7, #15]
 800c962:	4611      	mov	r1, r2
 800c964:	4618      	mov	r0, r3
 800c966:	f7fe fd30 	bl	800b3ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c970:	4618      	mov	r0, r3
 800c972:	f7fe fcd8 	bl	800b326 <USBD_LL_Reset>
}
 800c976:	bf00      	nop
 800c978:	3710      	adds	r7, #16
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
	...

0800c980 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c98e:	4618      	mov	r0, r3
 800c990:	f7fe fd2b 	bl	800b3ea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	6812      	ldr	r2, [r2, #0]
 800c9a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c9a6:	f043 0301 	orr.w	r3, r3, #1
 800c9aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6a1b      	ldr	r3, [r3, #32]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d005      	beq.n	800c9c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9b4:	4b04      	ldr	r3, [pc, #16]	; (800c9c8 <HAL_PCD_SuspendCallback+0x48>)
 800c9b6:	691b      	ldr	r3, [r3, #16]
 800c9b8:	4a03      	ldr	r2, [pc, #12]	; (800c9c8 <HAL_PCD_SuspendCallback+0x48>)
 800c9ba:	f043 0306 	orr.w	r3, r3, #6
 800c9be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c9c0:	bf00      	nop
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	e000ed00 	.word	0xe000ed00

0800c9cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fe fd1b 	bl	800b416 <USBD_LL_Resume>
}
 800c9e0:	bf00      	nop
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c9fa:	78fa      	ldrb	r2, [r7, #3]
 800c9fc:	4611      	mov	r1, r2
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fe fd73 	bl	800b4ea <USBD_LL_IsoOUTIncomplete>
}
 800ca04:	bf00      	nop
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	460b      	mov	r3, r1
 800ca16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca1e:	78fa      	ldrb	r2, [r7, #3]
 800ca20:	4611      	mov	r1, r2
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7fe fd2f 	bl	800b486 <USBD_LL_IsoINIncomplete>
}
 800ca28:	bf00      	nop
 800ca2a:	3708      	adds	r7, #8
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fe fd85 	bl	800b54e <USBD_LL_DevConnected>
}
 800ca44:	bf00      	nop
 800ca46:	3708      	adds	r7, #8
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7fe fd82 	bl	800b564 <USBD_LL_DevDisconnected>
}
 800ca60:	bf00      	nop
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d13c      	bne.n	800caf2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ca78:	4a20      	ldr	r2, [pc, #128]	; (800cafc <USBD_LL_Init+0x94>)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4a1e      	ldr	r2, [pc, #120]	; (800cafc <USBD_LL_Init+0x94>)
 800ca84:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ca88:	4b1c      	ldr	r3, [pc, #112]	; (800cafc <USBD_LL_Init+0x94>)
 800ca8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ca8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ca90:	4b1a      	ldr	r3, [pc, #104]	; (800cafc <USBD_LL_Init+0x94>)
 800ca92:	2204      	movs	r2, #4
 800ca94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ca96:	4b19      	ldr	r3, [pc, #100]	; (800cafc <USBD_LL_Init+0x94>)
 800ca98:	2202      	movs	r2, #2
 800ca9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ca9c:	4b17      	ldr	r3, [pc, #92]	; (800cafc <USBD_LL_Init+0x94>)
 800ca9e:	2200      	movs	r2, #0
 800caa0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800caa2:	4b16      	ldr	r3, [pc, #88]	; (800cafc <USBD_LL_Init+0x94>)
 800caa4:	2202      	movs	r2, #2
 800caa6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800caa8:	4b14      	ldr	r3, [pc, #80]	; (800cafc <USBD_LL_Init+0x94>)
 800caaa:	2200      	movs	r2, #0
 800caac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800caae:	4b13      	ldr	r3, [pc, #76]	; (800cafc <USBD_LL_Init+0x94>)
 800cab0:	2200      	movs	r2, #0
 800cab2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cab4:	4b11      	ldr	r3, [pc, #68]	; (800cafc <USBD_LL_Init+0x94>)
 800cab6:	2200      	movs	r2, #0
 800cab8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800caba:	4b10      	ldr	r3, [pc, #64]	; (800cafc <USBD_LL_Init+0x94>)
 800cabc:	2200      	movs	r2, #0
 800cabe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cac0:	4b0e      	ldr	r3, [pc, #56]	; (800cafc <USBD_LL_Init+0x94>)
 800cac2:	2200      	movs	r2, #0
 800cac4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cac6:	480d      	ldr	r0, [pc, #52]	; (800cafc <USBD_LL_Init+0x94>)
 800cac8:	f7f8 f8ed 	bl	8004ca6 <HAL_PCD_Init>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d001      	beq.n	800cad6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cad2:	f7f4 ff97 	bl	8001a04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cad6:	2180      	movs	r1, #128	; 0x80
 800cad8:	4808      	ldr	r0, [pc, #32]	; (800cafc <USBD_LL_Init+0x94>)
 800cada:	f7f9 fb44 	bl	8006166 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cade:	2240      	movs	r2, #64	; 0x40
 800cae0:	2100      	movs	r1, #0
 800cae2:	4806      	ldr	r0, [pc, #24]	; (800cafc <USBD_LL_Init+0x94>)
 800cae4:	f7f9 faf8 	bl	80060d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cae8:	2280      	movs	r2, #128	; 0x80
 800caea:	2101      	movs	r1, #1
 800caec:	4803      	ldr	r0, [pc, #12]	; (800cafc <USBD_LL_Init+0x94>)
 800caee:	f7f9 faf3 	bl	80060d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800caf2:	2300      	movs	r3, #0
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3708      	adds	r7, #8
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	20001c30 	.word	0x20001c30

0800cb00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7f8 f9e2 	bl	8004ee0 <HAL_PCD_Start>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb20:	7bfb      	ldrb	r3, [r7, #15]
 800cb22:	4618      	mov	r0, r3
 800cb24:	f000 f942 	bl	800cdac <USBD_Get_USB_Status>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b084      	sub	sp, #16
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
 800cb3e:	4608      	mov	r0, r1
 800cb40:	4611      	mov	r1, r2
 800cb42:	461a      	mov	r2, r3
 800cb44:	4603      	mov	r3, r0
 800cb46:	70fb      	strb	r3, [r7, #3]
 800cb48:	460b      	mov	r3, r1
 800cb4a:	70bb      	strb	r3, [r7, #2]
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb54:	2300      	movs	r3, #0
 800cb56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cb5e:	78bb      	ldrb	r3, [r7, #2]
 800cb60:	883a      	ldrh	r2, [r7, #0]
 800cb62:	78f9      	ldrb	r1, [r7, #3]
 800cb64:	f7f8 feb3 	bl	80058ce <HAL_PCD_EP_Open>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb6c:	7bfb      	ldrb	r3, [r7, #15]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f000 f91c 	bl	800cdac <USBD_Get_USB_Status>
 800cb74:	4603      	mov	r3, r0
 800cb76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb78:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b084      	sub	sp, #16
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb92:	2300      	movs	r3, #0
 800cb94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb9c:	78fa      	ldrb	r2, [r7, #3]
 800cb9e:	4611      	mov	r1, r2
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7f8 fefc 	bl	800599e <HAL_PCD_EP_Close>
 800cba6:	4603      	mov	r3, r0
 800cba8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbaa:	7bfb      	ldrb	r3, [r7, #15]
 800cbac:	4618      	mov	r0, r3
 800cbae:	f000 f8fd 	bl	800cdac <USBD_Get_USB_Status>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3710      	adds	r7, #16
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	460b      	mov	r3, r1
 800cbca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cbda:	78fa      	ldrb	r2, [r7, #3]
 800cbdc:	4611      	mov	r1, r2
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7f8 ffd4 	bl	8005b8c <HAL_PCD_EP_SetStall>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbe8:	7bfb      	ldrb	r3, [r7, #15]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f000 f8de 	bl	800cdac <USBD_Get_USB_Status>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b084      	sub	sp, #16
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
 800cc06:	460b      	mov	r3, r1
 800cc08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc18:	78fa      	ldrb	r2, [r7, #3]
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7f9 f819 	bl	8005c54 <HAL_PCD_EP_ClrStall>
 800cc22:	4603      	mov	r3, r0
 800cc24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc26:	7bfb      	ldrb	r3, [r7, #15]
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f000 f8bf 	bl	800cdac <USBD_Get_USB_Status>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc32:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3710      	adds	r7, #16
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	460b      	mov	r3, r1
 800cc46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cc50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	da0b      	bge.n	800cc70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cc58:	78fb      	ldrb	r3, [r7, #3]
 800cc5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc5e:	68f9      	ldr	r1, [r7, #12]
 800cc60:	4613      	mov	r3, r2
 800cc62:	00db      	lsls	r3, r3, #3
 800cc64:	4413      	add	r3, r2
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	440b      	add	r3, r1
 800cc6a:	333e      	adds	r3, #62	; 0x3e
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	e00b      	b.n	800cc88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cc70:	78fb      	ldrb	r3, [r7, #3]
 800cc72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc76:	68f9      	ldr	r1, [r7, #12]
 800cc78:	4613      	mov	r3, r2
 800cc7a:	00db      	lsls	r3, r3, #3
 800cc7c:	4413      	add	r3, r2
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	440b      	add	r3, r1
 800cc82:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800cc86:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3714      	adds	r7, #20
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cca0:	2300      	movs	r3, #0
 800cca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cca4:	2300      	movs	r3, #0
 800cca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ccae:	78fa      	ldrb	r2, [r7, #3]
 800ccb0:	4611      	mov	r1, r2
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7f8 fde6 	bl	8005884 <HAL_PCD_SetAddress>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccbc:	7bfb      	ldrb	r3, [r7, #15]
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f000 f874 	bl	800cdac <USBD_Get_USB_Status>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ccd2:	b580      	push	{r7, lr}
 800ccd4:	b086      	sub	sp, #24
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	60f8      	str	r0, [r7, #12]
 800ccda:	607a      	str	r2, [r7, #4]
 800ccdc:	603b      	str	r3, [r7, #0]
 800ccde:	460b      	mov	r3, r1
 800cce0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cce2:	2300      	movs	r3, #0
 800cce4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cce6:	2300      	movs	r3, #0
 800cce8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ccf0:	7af9      	ldrb	r1, [r7, #11]
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	f7f8 feff 	bl	8005af8 <HAL_PCD_EP_Transmit>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccfe:	7dfb      	ldrb	r3, [r7, #23]
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 f853 	bl	800cdac <USBD_Get_USB_Status>
 800cd06:	4603      	mov	r3, r0
 800cd08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd0a:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3718      	adds	r7, #24
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b086      	sub	sp, #24
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	607a      	str	r2, [r7, #4]
 800cd1e:	603b      	str	r3, [r7, #0]
 800cd20:	460b      	mov	r3, r1
 800cd22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd24:	2300      	movs	r3, #0
 800cd26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cd32:	7af9      	ldrb	r1, [r7, #11]
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	f7f8 fe7b 	bl	8005a32 <HAL_PCD_EP_Receive>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd40:	7dfb      	ldrb	r3, [r7, #23]
 800cd42:	4618      	mov	r0, r3
 800cd44:	f000 f832 	bl	800cdac <USBD_Get_USB_Status>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd4c:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3718      	adds	r7, #24
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b082      	sub	sp, #8
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
 800cd5e:	460b      	mov	r3, r1
 800cd60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd68:	78fa      	ldrb	r2, [r7, #3]
 800cd6a:	4611      	mov	r1, r2
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7f8 feab 	bl	8005ac8 <HAL_PCD_EP_GetRxCount>
 800cd72:	4603      	mov	r3, r0
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3708      	adds	r7, #8
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cd84:	4b03      	ldr	r3, [pc, #12]	; (800cd94 <USBD_static_malloc+0x18>)
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	370c      	adds	r7, #12
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	2000213c 	.word	0x2000213c

0800cd98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]

}
 800cda0:	bf00      	nop
 800cda2:	370c      	adds	r7, #12
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b085      	sub	sp, #20
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cdba:	79fb      	ldrb	r3, [r7, #7]
 800cdbc:	2b03      	cmp	r3, #3
 800cdbe:	d817      	bhi.n	800cdf0 <USBD_Get_USB_Status+0x44>
 800cdc0:	a201      	add	r2, pc, #4	; (adr r2, 800cdc8 <USBD_Get_USB_Status+0x1c>)
 800cdc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc6:	bf00      	nop
 800cdc8:	0800cdd9 	.word	0x0800cdd9
 800cdcc:	0800cddf 	.word	0x0800cddf
 800cdd0:	0800cde5 	.word	0x0800cde5
 800cdd4:	0800cdeb 	.word	0x0800cdeb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	73fb      	strb	r3, [r7, #15]
    break;
 800cddc:	e00b      	b.n	800cdf6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cdde:	2303      	movs	r3, #3
 800cde0:	73fb      	strb	r3, [r7, #15]
    break;
 800cde2:	e008      	b.n	800cdf6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cde4:	2301      	movs	r3, #1
 800cde6:	73fb      	strb	r3, [r7, #15]
    break;
 800cde8:	e005      	b.n	800cdf6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdea:	2303      	movs	r3, #3
 800cdec:	73fb      	strb	r3, [r7, #15]
    break;
 800cdee:	e002      	b.n	800cdf6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cdf0:	2303      	movs	r3, #3
 800cdf2:	73fb      	strb	r3, [r7, #15]
    break;
 800cdf4:	bf00      	nop
  }
  return usb_status;
 800cdf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <__cvt>:
 800ce04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce08:	ec55 4b10 	vmov	r4, r5, d0
 800ce0c:	2d00      	cmp	r5, #0
 800ce0e:	460e      	mov	r6, r1
 800ce10:	4619      	mov	r1, r3
 800ce12:	462b      	mov	r3, r5
 800ce14:	bfbb      	ittet	lt
 800ce16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ce1a:	461d      	movlt	r5, r3
 800ce1c:	2300      	movge	r3, #0
 800ce1e:	232d      	movlt	r3, #45	; 0x2d
 800ce20:	700b      	strb	r3, [r1, #0]
 800ce22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ce28:	4691      	mov	r9, r2
 800ce2a:	f023 0820 	bic.w	r8, r3, #32
 800ce2e:	bfbc      	itt	lt
 800ce30:	4622      	movlt	r2, r4
 800ce32:	4614      	movlt	r4, r2
 800ce34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ce38:	d005      	beq.n	800ce46 <__cvt+0x42>
 800ce3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ce3e:	d100      	bne.n	800ce42 <__cvt+0x3e>
 800ce40:	3601      	adds	r6, #1
 800ce42:	2102      	movs	r1, #2
 800ce44:	e000      	b.n	800ce48 <__cvt+0x44>
 800ce46:	2103      	movs	r1, #3
 800ce48:	ab03      	add	r3, sp, #12
 800ce4a:	9301      	str	r3, [sp, #4]
 800ce4c:	ab02      	add	r3, sp, #8
 800ce4e:	9300      	str	r3, [sp, #0]
 800ce50:	ec45 4b10 	vmov	d0, r4, r5
 800ce54:	4653      	mov	r3, sl
 800ce56:	4632      	mov	r2, r6
 800ce58:	f000 fe4a 	bl	800daf0 <_dtoa_r>
 800ce5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ce60:	4607      	mov	r7, r0
 800ce62:	d102      	bne.n	800ce6a <__cvt+0x66>
 800ce64:	f019 0f01 	tst.w	r9, #1
 800ce68:	d022      	beq.n	800ceb0 <__cvt+0xac>
 800ce6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ce6e:	eb07 0906 	add.w	r9, r7, r6
 800ce72:	d110      	bne.n	800ce96 <__cvt+0x92>
 800ce74:	783b      	ldrb	r3, [r7, #0]
 800ce76:	2b30      	cmp	r3, #48	; 0x30
 800ce78:	d10a      	bne.n	800ce90 <__cvt+0x8c>
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	4620      	mov	r0, r4
 800ce80:	4629      	mov	r1, r5
 800ce82:	f7f3 fe29 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce86:	b918      	cbnz	r0, 800ce90 <__cvt+0x8c>
 800ce88:	f1c6 0601 	rsb	r6, r6, #1
 800ce8c:	f8ca 6000 	str.w	r6, [sl]
 800ce90:	f8da 3000 	ldr.w	r3, [sl]
 800ce94:	4499      	add	r9, r3
 800ce96:	2200      	movs	r2, #0
 800ce98:	2300      	movs	r3, #0
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	f7f3 fe1b 	bl	8000ad8 <__aeabi_dcmpeq>
 800cea2:	b108      	cbz	r0, 800cea8 <__cvt+0xa4>
 800cea4:	f8cd 900c 	str.w	r9, [sp, #12]
 800cea8:	2230      	movs	r2, #48	; 0x30
 800ceaa:	9b03      	ldr	r3, [sp, #12]
 800ceac:	454b      	cmp	r3, r9
 800ceae:	d307      	bcc.n	800cec0 <__cvt+0xbc>
 800ceb0:	9b03      	ldr	r3, [sp, #12]
 800ceb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ceb4:	1bdb      	subs	r3, r3, r7
 800ceb6:	4638      	mov	r0, r7
 800ceb8:	6013      	str	r3, [r2, #0]
 800ceba:	b004      	add	sp, #16
 800cebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cec0:	1c59      	adds	r1, r3, #1
 800cec2:	9103      	str	r1, [sp, #12]
 800cec4:	701a      	strb	r2, [r3, #0]
 800cec6:	e7f0      	b.n	800ceaa <__cvt+0xa6>

0800cec8 <__exponent>:
 800cec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ceca:	4603      	mov	r3, r0
 800cecc:	2900      	cmp	r1, #0
 800cece:	bfb8      	it	lt
 800ced0:	4249      	neglt	r1, r1
 800ced2:	f803 2b02 	strb.w	r2, [r3], #2
 800ced6:	bfb4      	ite	lt
 800ced8:	222d      	movlt	r2, #45	; 0x2d
 800ceda:	222b      	movge	r2, #43	; 0x2b
 800cedc:	2909      	cmp	r1, #9
 800cede:	7042      	strb	r2, [r0, #1]
 800cee0:	dd2a      	ble.n	800cf38 <__exponent+0x70>
 800cee2:	f10d 0207 	add.w	r2, sp, #7
 800cee6:	4617      	mov	r7, r2
 800cee8:	260a      	movs	r6, #10
 800ceea:	4694      	mov	ip, r2
 800ceec:	fb91 f5f6 	sdiv	r5, r1, r6
 800cef0:	fb06 1415 	mls	r4, r6, r5, r1
 800cef4:	3430      	adds	r4, #48	; 0x30
 800cef6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cefa:	460c      	mov	r4, r1
 800cefc:	2c63      	cmp	r4, #99	; 0x63
 800cefe:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800cf02:	4629      	mov	r1, r5
 800cf04:	dcf1      	bgt.n	800ceea <__exponent+0x22>
 800cf06:	3130      	adds	r1, #48	; 0x30
 800cf08:	f1ac 0402 	sub.w	r4, ip, #2
 800cf0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cf10:	1c41      	adds	r1, r0, #1
 800cf12:	4622      	mov	r2, r4
 800cf14:	42ba      	cmp	r2, r7
 800cf16:	d30a      	bcc.n	800cf2e <__exponent+0x66>
 800cf18:	f10d 0209 	add.w	r2, sp, #9
 800cf1c:	eba2 020c 	sub.w	r2, r2, ip
 800cf20:	42bc      	cmp	r4, r7
 800cf22:	bf88      	it	hi
 800cf24:	2200      	movhi	r2, #0
 800cf26:	4413      	add	r3, r2
 800cf28:	1a18      	subs	r0, r3, r0
 800cf2a:	b003      	add	sp, #12
 800cf2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf2e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cf32:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cf36:	e7ed      	b.n	800cf14 <__exponent+0x4c>
 800cf38:	2330      	movs	r3, #48	; 0x30
 800cf3a:	3130      	adds	r1, #48	; 0x30
 800cf3c:	7083      	strb	r3, [r0, #2]
 800cf3e:	70c1      	strb	r1, [r0, #3]
 800cf40:	1d03      	adds	r3, r0, #4
 800cf42:	e7f1      	b.n	800cf28 <__exponent+0x60>

0800cf44 <_printf_float>:
 800cf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf48:	ed2d 8b02 	vpush	{d8}
 800cf4c:	b08d      	sub	sp, #52	; 0x34
 800cf4e:	460c      	mov	r4, r1
 800cf50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cf54:	4616      	mov	r6, r2
 800cf56:	461f      	mov	r7, r3
 800cf58:	4605      	mov	r5, r0
 800cf5a:	f000 fcc7 	bl	800d8ec <_localeconv_r>
 800cf5e:	f8d0 a000 	ldr.w	sl, [r0]
 800cf62:	4650      	mov	r0, sl
 800cf64:	f7f3 f98c 	bl	8000280 <strlen>
 800cf68:	2300      	movs	r3, #0
 800cf6a:	930a      	str	r3, [sp, #40]	; 0x28
 800cf6c:	6823      	ldr	r3, [r4, #0]
 800cf6e:	9305      	str	r3, [sp, #20]
 800cf70:	f8d8 3000 	ldr.w	r3, [r8]
 800cf74:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cf78:	3307      	adds	r3, #7
 800cf7a:	f023 0307 	bic.w	r3, r3, #7
 800cf7e:	f103 0208 	add.w	r2, r3, #8
 800cf82:	f8c8 2000 	str.w	r2, [r8]
 800cf86:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cf8e:	9307      	str	r3, [sp, #28]
 800cf90:	f8cd 8018 	str.w	r8, [sp, #24]
 800cf94:	ee08 0a10 	vmov	s16, r0
 800cf98:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cf9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cfa0:	4b9e      	ldr	r3, [pc, #632]	; (800d21c <_printf_float+0x2d8>)
 800cfa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfa6:	f7f3 fdc9 	bl	8000b3c <__aeabi_dcmpun>
 800cfaa:	bb88      	cbnz	r0, 800d010 <_printf_float+0xcc>
 800cfac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cfb0:	4b9a      	ldr	r3, [pc, #616]	; (800d21c <_printf_float+0x2d8>)
 800cfb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfb6:	f7f3 fda3 	bl	8000b00 <__aeabi_dcmple>
 800cfba:	bb48      	cbnz	r0, 800d010 <_printf_float+0xcc>
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	4640      	mov	r0, r8
 800cfc2:	4649      	mov	r1, r9
 800cfc4:	f7f3 fd92 	bl	8000aec <__aeabi_dcmplt>
 800cfc8:	b110      	cbz	r0, 800cfd0 <_printf_float+0x8c>
 800cfca:	232d      	movs	r3, #45	; 0x2d
 800cfcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfd0:	4a93      	ldr	r2, [pc, #588]	; (800d220 <_printf_float+0x2dc>)
 800cfd2:	4b94      	ldr	r3, [pc, #592]	; (800d224 <_printf_float+0x2e0>)
 800cfd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cfd8:	bf94      	ite	ls
 800cfda:	4690      	movls	r8, r2
 800cfdc:	4698      	movhi	r8, r3
 800cfde:	2303      	movs	r3, #3
 800cfe0:	6123      	str	r3, [r4, #16]
 800cfe2:	9b05      	ldr	r3, [sp, #20]
 800cfe4:	f023 0304 	bic.w	r3, r3, #4
 800cfe8:	6023      	str	r3, [r4, #0]
 800cfea:	f04f 0900 	mov.w	r9, #0
 800cfee:	9700      	str	r7, [sp, #0]
 800cff0:	4633      	mov	r3, r6
 800cff2:	aa0b      	add	r2, sp, #44	; 0x2c
 800cff4:	4621      	mov	r1, r4
 800cff6:	4628      	mov	r0, r5
 800cff8:	f000 f9da 	bl	800d3b0 <_printf_common>
 800cffc:	3001      	adds	r0, #1
 800cffe:	f040 8090 	bne.w	800d122 <_printf_float+0x1de>
 800d002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d006:	b00d      	add	sp, #52	; 0x34
 800d008:	ecbd 8b02 	vpop	{d8}
 800d00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d010:	4642      	mov	r2, r8
 800d012:	464b      	mov	r3, r9
 800d014:	4640      	mov	r0, r8
 800d016:	4649      	mov	r1, r9
 800d018:	f7f3 fd90 	bl	8000b3c <__aeabi_dcmpun>
 800d01c:	b140      	cbz	r0, 800d030 <_printf_float+0xec>
 800d01e:	464b      	mov	r3, r9
 800d020:	2b00      	cmp	r3, #0
 800d022:	bfbc      	itt	lt
 800d024:	232d      	movlt	r3, #45	; 0x2d
 800d026:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d02a:	4a7f      	ldr	r2, [pc, #508]	; (800d228 <_printf_float+0x2e4>)
 800d02c:	4b7f      	ldr	r3, [pc, #508]	; (800d22c <_printf_float+0x2e8>)
 800d02e:	e7d1      	b.n	800cfd4 <_printf_float+0x90>
 800d030:	6863      	ldr	r3, [r4, #4]
 800d032:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d036:	9206      	str	r2, [sp, #24]
 800d038:	1c5a      	adds	r2, r3, #1
 800d03a:	d13f      	bne.n	800d0bc <_printf_float+0x178>
 800d03c:	2306      	movs	r3, #6
 800d03e:	6063      	str	r3, [r4, #4]
 800d040:	9b05      	ldr	r3, [sp, #20]
 800d042:	6861      	ldr	r1, [r4, #4]
 800d044:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d048:	2300      	movs	r3, #0
 800d04a:	9303      	str	r3, [sp, #12]
 800d04c:	ab0a      	add	r3, sp, #40	; 0x28
 800d04e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d052:	ab09      	add	r3, sp, #36	; 0x24
 800d054:	ec49 8b10 	vmov	d0, r8, r9
 800d058:	9300      	str	r3, [sp, #0]
 800d05a:	6022      	str	r2, [r4, #0]
 800d05c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d060:	4628      	mov	r0, r5
 800d062:	f7ff fecf 	bl	800ce04 <__cvt>
 800d066:	9b06      	ldr	r3, [sp, #24]
 800d068:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d06a:	2b47      	cmp	r3, #71	; 0x47
 800d06c:	4680      	mov	r8, r0
 800d06e:	d108      	bne.n	800d082 <_printf_float+0x13e>
 800d070:	1cc8      	adds	r0, r1, #3
 800d072:	db02      	blt.n	800d07a <_printf_float+0x136>
 800d074:	6863      	ldr	r3, [r4, #4]
 800d076:	4299      	cmp	r1, r3
 800d078:	dd41      	ble.n	800d0fe <_printf_float+0x1ba>
 800d07a:	f1ab 0302 	sub.w	r3, fp, #2
 800d07e:	fa5f fb83 	uxtb.w	fp, r3
 800d082:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d086:	d820      	bhi.n	800d0ca <_printf_float+0x186>
 800d088:	3901      	subs	r1, #1
 800d08a:	465a      	mov	r2, fp
 800d08c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d090:	9109      	str	r1, [sp, #36]	; 0x24
 800d092:	f7ff ff19 	bl	800cec8 <__exponent>
 800d096:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d098:	1813      	adds	r3, r2, r0
 800d09a:	2a01      	cmp	r2, #1
 800d09c:	4681      	mov	r9, r0
 800d09e:	6123      	str	r3, [r4, #16]
 800d0a0:	dc02      	bgt.n	800d0a8 <_printf_float+0x164>
 800d0a2:	6822      	ldr	r2, [r4, #0]
 800d0a4:	07d2      	lsls	r2, r2, #31
 800d0a6:	d501      	bpl.n	800d0ac <_printf_float+0x168>
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	6123      	str	r3, [r4, #16]
 800d0ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d09c      	beq.n	800cfee <_printf_float+0xaa>
 800d0b4:	232d      	movs	r3, #45	; 0x2d
 800d0b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0ba:	e798      	b.n	800cfee <_printf_float+0xaa>
 800d0bc:	9a06      	ldr	r2, [sp, #24]
 800d0be:	2a47      	cmp	r2, #71	; 0x47
 800d0c0:	d1be      	bne.n	800d040 <_printf_float+0xfc>
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1bc      	bne.n	800d040 <_printf_float+0xfc>
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	e7b9      	b.n	800d03e <_printf_float+0xfa>
 800d0ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d0ce:	d118      	bne.n	800d102 <_printf_float+0x1be>
 800d0d0:	2900      	cmp	r1, #0
 800d0d2:	6863      	ldr	r3, [r4, #4]
 800d0d4:	dd0b      	ble.n	800d0ee <_printf_float+0x1aa>
 800d0d6:	6121      	str	r1, [r4, #16]
 800d0d8:	b913      	cbnz	r3, 800d0e0 <_printf_float+0x19c>
 800d0da:	6822      	ldr	r2, [r4, #0]
 800d0dc:	07d0      	lsls	r0, r2, #31
 800d0de:	d502      	bpl.n	800d0e6 <_printf_float+0x1a2>
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	440b      	add	r3, r1
 800d0e4:	6123      	str	r3, [r4, #16]
 800d0e6:	65a1      	str	r1, [r4, #88]	; 0x58
 800d0e8:	f04f 0900 	mov.w	r9, #0
 800d0ec:	e7de      	b.n	800d0ac <_printf_float+0x168>
 800d0ee:	b913      	cbnz	r3, 800d0f6 <_printf_float+0x1b2>
 800d0f0:	6822      	ldr	r2, [r4, #0]
 800d0f2:	07d2      	lsls	r2, r2, #31
 800d0f4:	d501      	bpl.n	800d0fa <_printf_float+0x1b6>
 800d0f6:	3302      	adds	r3, #2
 800d0f8:	e7f4      	b.n	800d0e4 <_printf_float+0x1a0>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e7f2      	b.n	800d0e4 <_printf_float+0x1a0>
 800d0fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d104:	4299      	cmp	r1, r3
 800d106:	db05      	blt.n	800d114 <_printf_float+0x1d0>
 800d108:	6823      	ldr	r3, [r4, #0]
 800d10a:	6121      	str	r1, [r4, #16]
 800d10c:	07d8      	lsls	r0, r3, #31
 800d10e:	d5ea      	bpl.n	800d0e6 <_printf_float+0x1a2>
 800d110:	1c4b      	adds	r3, r1, #1
 800d112:	e7e7      	b.n	800d0e4 <_printf_float+0x1a0>
 800d114:	2900      	cmp	r1, #0
 800d116:	bfd4      	ite	le
 800d118:	f1c1 0202 	rsble	r2, r1, #2
 800d11c:	2201      	movgt	r2, #1
 800d11e:	4413      	add	r3, r2
 800d120:	e7e0      	b.n	800d0e4 <_printf_float+0x1a0>
 800d122:	6823      	ldr	r3, [r4, #0]
 800d124:	055a      	lsls	r2, r3, #21
 800d126:	d407      	bmi.n	800d138 <_printf_float+0x1f4>
 800d128:	6923      	ldr	r3, [r4, #16]
 800d12a:	4642      	mov	r2, r8
 800d12c:	4631      	mov	r1, r6
 800d12e:	4628      	mov	r0, r5
 800d130:	47b8      	blx	r7
 800d132:	3001      	adds	r0, #1
 800d134:	d12c      	bne.n	800d190 <_printf_float+0x24c>
 800d136:	e764      	b.n	800d002 <_printf_float+0xbe>
 800d138:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d13c:	f240 80e0 	bls.w	800d300 <_printf_float+0x3bc>
 800d140:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d144:	2200      	movs	r2, #0
 800d146:	2300      	movs	r3, #0
 800d148:	f7f3 fcc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800d14c:	2800      	cmp	r0, #0
 800d14e:	d034      	beq.n	800d1ba <_printf_float+0x276>
 800d150:	4a37      	ldr	r2, [pc, #220]	; (800d230 <_printf_float+0x2ec>)
 800d152:	2301      	movs	r3, #1
 800d154:	4631      	mov	r1, r6
 800d156:	4628      	mov	r0, r5
 800d158:	47b8      	blx	r7
 800d15a:	3001      	adds	r0, #1
 800d15c:	f43f af51 	beq.w	800d002 <_printf_float+0xbe>
 800d160:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d164:	429a      	cmp	r2, r3
 800d166:	db02      	blt.n	800d16e <_printf_float+0x22a>
 800d168:	6823      	ldr	r3, [r4, #0]
 800d16a:	07d8      	lsls	r0, r3, #31
 800d16c:	d510      	bpl.n	800d190 <_printf_float+0x24c>
 800d16e:	ee18 3a10 	vmov	r3, s16
 800d172:	4652      	mov	r2, sl
 800d174:	4631      	mov	r1, r6
 800d176:	4628      	mov	r0, r5
 800d178:	47b8      	blx	r7
 800d17a:	3001      	adds	r0, #1
 800d17c:	f43f af41 	beq.w	800d002 <_printf_float+0xbe>
 800d180:	f04f 0800 	mov.w	r8, #0
 800d184:	f104 091a 	add.w	r9, r4, #26
 800d188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d18a:	3b01      	subs	r3, #1
 800d18c:	4543      	cmp	r3, r8
 800d18e:	dc09      	bgt.n	800d1a4 <_printf_float+0x260>
 800d190:	6823      	ldr	r3, [r4, #0]
 800d192:	079b      	lsls	r3, r3, #30
 800d194:	f100 8107 	bmi.w	800d3a6 <_printf_float+0x462>
 800d198:	68e0      	ldr	r0, [r4, #12]
 800d19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d19c:	4298      	cmp	r0, r3
 800d19e:	bfb8      	it	lt
 800d1a0:	4618      	movlt	r0, r3
 800d1a2:	e730      	b.n	800d006 <_printf_float+0xc2>
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	464a      	mov	r2, r9
 800d1a8:	4631      	mov	r1, r6
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	47b8      	blx	r7
 800d1ae:	3001      	adds	r0, #1
 800d1b0:	f43f af27 	beq.w	800d002 <_printf_float+0xbe>
 800d1b4:	f108 0801 	add.w	r8, r8, #1
 800d1b8:	e7e6      	b.n	800d188 <_printf_float+0x244>
 800d1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	dc39      	bgt.n	800d234 <_printf_float+0x2f0>
 800d1c0:	4a1b      	ldr	r2, [pc, #108]	; (800d230 <_printf_float+0x2ec>)
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	4631      	mov	r1, r6
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	47b8      	blx	r7
 800d1ca:	3001      	adds	r0, #1
 800d1cc:	f43f af19 	beq.w	800d002 <_printf_float+0xbe>
 800d1d0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	d102      	bne.n	800d1de <_printf_float+0x29a>
 800d1d8:	6823      	ldr	r3, [r4, #0]
 800d1da:	07d9      	lsls	r1, r3, #31
 800d1dc:	d5d8      	bpl.n	800d190 <_printf_float+0x24c>
 800d1de:	ee18 3a10 	vmov	r3, s16
 800d1e2:	4652      	mov	r2, sl
 800d1e4:	4631      	mov	r1, r6
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	47b8      	blx	r7
 800d1ea:	3001      	adds	r0, #1
 800d1ec:	f43f af09 	beq.w	800d002 <_printf_float+0xbe>
 800d1f0:	f04f 0900 	mov.w	r9, #0
 800d1f4:	f104 0a1a 	add.w	sl, r4, #26
 800d1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1fa:	425b      	negs	r3, r3
 800d1fc:	454b      	cmp	r3, r9
 800d1fe:	dc01      	bgt.n	800d204 <_printf_float+0x2c0>
 800d200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d202:	e792      	b.n	800d12a <_printf_float+0x1e6>
 800d204:	2301      	movs	r3, #1
 800d206:	4652      	mov	r2, sl
 800d208:	4631      	mov	r1, r6
 800d20a:	4628      	mov	r0, r5
 800d20c:	47b8      	blx	r7
 800d20e:	3001      	adds	r0, #1
 800d210:	f43f aef7 	beq.w	800d002 <_printf_float+0xbe>
 800d214:	f109 0901 	add.w	r9, r9, #1
 800d218:	e7ee      	b.n	800d1f8 <_printf_float+0x2b4>
 800d21a:	bf00      	nop
 800d21c:	7fefffff 	.word	0x7fefffff
 800d220:	0800f7f8 	.word	0x0800f7f8
 800d224:	0800f7fc 	.word	0x0800f7fc
 800d228:	0800f800 	.word	0x0800f800
 800d22c:	0800f804 	.word	0x0800f804
 800d230:	0800f808 	.word	0x0800f808
 800d234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d236:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d238:	429a      	cmp	r2, r3
 800d23a:	bfa8      	it	ge
 800d23c:	461a      	movge	r2, r3
 800d23e:	2a00      	cmp	r2, #0
 800d240:	4691      	mov	r9, r2
 800d242:	dc37      	bgt.n	800d2b4 <_printf_float+0x370>
 800d244:	f04f 0b00 	mov.w	fp, #0
 800d248:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d24c:	f104 021a 	add.w	r2, r4, #26
 800d250:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d252:	9305      	str	r3, [sp, #20]
 800d254:	eba3 0309 	sub.w	r3, r3, r9
 800d258:	455b      	cmp	r3, fp
 800d25a:	dc33      	bgt.n	800d2c4 <_printf_float+0x380>
 800d25c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d260:	429a      	cmp	r2, r3
 800d262:	db3b      	blt.n	800d2dc <_printf_float+0x398>
 800d264:	6823      	ldr	r3, [r4, #0]
 800d266:	07da      	lsls	r2, r3, #31
 800d268:	d438      	bmi.n	800d2dc <_printf_float+0x398>
 800d26a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d26e:	eba2 0903 	sub.w	r9, r2, r3
 800d272:	9b05      	ldr	r3, [sp, #20]
 800d274:	1ad2      	subs	r2, r2, r3
 800d276:	4591      	cmp	r9, r2
 800d278:	bfa8      	it	ge
 800d27a:	4691      	movge	r9, r2
 800d27c:	f1b9 0f00 	cmp.w	r9, #0
 800d280:	dc35      	bgt.n	800d2ee <_printf_float+0x3aa>
 800d282:	f04f 0800 	mov.w	r8, #0
 800d286:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d28a:	f104 0a1a 	add.w	sl, r4, #26
 800d28e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d292:	1a9b      	subs	r3, r3, r2
 800d294:	eba3 0309 	sub.w	r3, r3, r9
 800d298:	4543      	cmp	r3, r8
 800d29a:	f77f af79 	ble.w	800d190 <_printf_float+0x24c>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	4652      	mov	r2, sl
 800d2a2:	4631      	mov	r1, r6
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	47b8      	blx	r7
 800d2a8:	3001      	adds	r0, #1
 800d2aa:	f43f aeaa 	beq.w	800d002 <_printf_float+0xbe>
 800d2ae:	f108 0801 	add.w	r8, r8, #1
 800d2b2:	e7ec      	b.n	800d28e <_printf_float+0x34a>
 800d2b4:	4613      	mov	r3, r2
 800d2b6:	4631      	mov	r1, r6
 800d2b8:	4642      	mov	r2, r8
 800d2ba:	4628      	mov	r0, r5
 800d2bc:	47b8      	blx	r7
 800d2be:	3001      	adds	r0, #1
 800d2c0:	d1c0      	bne.n	800d244 <_printf_float+0x300>
 800d2c2:	e69e      	b.n	800d002 <_printf_float+0xbe>
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	4631      	mov	r1, r6
 800d2c8:	4628      	mov	r0, r5
 800d2ca:	9205      	str	r2, [sp, #20]
 800d2cc:	47b8      	blx	r7
 800d2ce:	3001      	adds	r0, #1
 800d2d0:	f43f ae97 	beq.w	800d002 <_printf_float+0xbe>
 800d2d4:	9a05      	ldr	r2, [sp, #20]
 800d2d6:	f10b 0b01 	add.w	fp, fp, #1
 800d2da:	e7b9      	b.n	800d250 <_printf_float+0x30c>
 800d2dc:	ee18 3a10 	vmov	r3, s16
 800d2e0:	4652      	mov	r2, sl
 800d2e2:	4631      	mov	r1, r6
 800d2e4:	4628      	mov	r0, r5
 800d2e6:	47b8      	blx	r7
 800d2e8:	3001      	adds	r0, #1
 800d2ea:	d1be      	bne.n	800d26a <_printf_float+0x326>
 800d2ec:	e689      	b.n	800d002 <_printf_float+0xbe>
 800d2ee:	9a05      	ldr	r2, [sp, #20]
 800d2f0:	464b      	mov	r3, r9
 800d2f2:	4442      	add	r2, r8
 800d2f4:	4631      	mov	r1, r6
 800d2f6:	4628      	mov	r0, r5
 800d2f8:	47b8      	blx	r7
 800d2fa:	3001      	adds	r0, #1
 800d2fc:	d1c1      	bne.n	800d282 <_printf_float+0x33e>
 800d2fe:	e680      	b.n	800d002 <_printf_float+0xbe>
 800d300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d302:	2a01      	cmp	r2, #1
 800d304:	dc01      	bgt.n	800d30a <_printf_float+0x3c6>
 800d306:	07db      	lsls	r3, r3, #31
 800d308:	d53a      	bpl.n	800d380 <_printf_float+0x43c>
 800d30a:	2301      	movs	r3, #1
 800d30c:	4642      	mov	r2, r8
 800d30e:	4631      	mov	r1, r6
 800d310:	4628      	mov	r0, r5
 800d312:	47b8      	blx	r7
 800d314:	3001      	adds	r0, #1
 800d316:	f43f ae74 	beq.w	800d002 <_printf_float+0xbe>
 800d31a:	ee18 3a10 	vmov	r3, s16
 800d31e:	4652      	mov	r2, sl
 800d320:	4631      	mov	r1, r6
 800d322:	4628      	mov	r0, r5
 800d324:	47b8      	blx	r7
 800d326:	3001      	adds	r0, #1
 800d328:	f43f ae6b 	beq.w	800d002 <_printf_float+0xbe>
 800d32c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d330:	2200      	movs	r2, #0
 800d332:	2300      	movs	r3, #0
 800d334:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d338:	f7f3 fbce 	bl	8000ad8 <__aeabi_dcmpeq>
 800d33c:	b9d8      	cbnz	r0, 800d376 <_printf_float+0x432>
 800d33e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d342:	f108 0201 	add.w	r2, r8, #1
 800d346:	4631      	mov	r1, r6
 800d348:	4628      	mov	r0, r5
 800d34a:	47b8      	blx	r7
 800d34c:	3001      	adds	r0, #1
 800d34e:	d10e      	bne.n	800d36e <_printf_float+0x42a>
 800d350:	e657      	b.n	800d002 <_printf_float+0xbe>
 800d352:	2301      	movs	r3, #1
 800d354:	4652      	mov	r2, sl
 800d356:	4631      	mov	r1, r6
 800d358:	4628      	mov	r0, r5
 800d35a:	47b8      	blx	r7
 800d35c:	3001      	adds	r0, #1
 800d35e:	f43f ae50 	beq.w	800d002 <_printf_float+0xbe>
 800d362:	f108 0801 	add.w	r8, r8, #1
 800d366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d368:	3b01      	subs	r3, #1
 800d36a:	4543      	cmp	r3, r8
 800d36c:	dcf1      	bgt.n	800d352 <_printf_float+0x40e>
 800d36e:	464b      	mov	r3, r9
 800d370:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d374:	e6da      	b.n	800d12c <_printf_float+0x1e8>
 800d376:	f04f 0800 	mov.w	r8, #0
 800d37a:	f104 0a1a 	add.w	sl, r4, #26
 800d37e:	e7f2      	b.n	800d366 <_printf_float+0x422>
 800d380:	2301      	movs	r3, #1
 800d382:	4642      	mov	r2, r8
 800d384:	e7df      	b.n	800d346 <_printf_float+0x402>
 800d386:	2301      	movs	r3, #1
 800d388:	464a      	mov	r2, r9
 800d38a:	4631      	mov	r1, r6
 800d38c:	4628      	mov	r0, r5
 800d38e:	47b8      	blx	r7
 800d390:	3001      	adds	r0, #1
 800d392:	f43f ae36 	beq.w	800d002 <_printf_float+0xbe>
 800d396:	f108 0801 	add.w	r8, r8, #1
 800d39a:	68e3      	ldr	r3, [r4, #12]
 800d39c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d39e:	1a5b      	subs	r3, r3, r1
 800d3a0:	4543      	cmp	r3, r8
 800d3a2:	dcf0      	bgt.n	800d386 <_printf_float+0x442>
 800d3a4:	e6f8      	b.n	800d198 <_printf_float+0x254>
 800d3a6:	f04f 0800 	mov.w	r8, #0
 800d3aa:	f104 0919 	add.w	r9, r4, #25
 800d3ae:	e7f4      	b.n	800d39a <_printf_float+0x456>

0800d3b0 <_printf_common>:
 800d3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3b4:	4616      	mov	r6, r2
 800d3b6:	4699      	mov	r9, r3
 800d3b8:	688a      	ldr	r2, [r1, #8]
 800d3ba:	690b      	ldr	r3, [r1, #16]
 800d3bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	bfb8      	it	lt
 800d3c4:	4613      	movlt	r3, r2
 800d3c6:	6033      	str	r3, [r6, #0]
 800d3c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d3cc:	4607      	mov	r7, r0
 800d3ce:	460c      	mov	r4, r1
 800d3d0:	b10a      	cbz	r2, 800d3d6 <_printf_common+0x26>
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	6033      	str	r3, [r6, #0]
 800d3d6:	6823      	ldr	r3, [r4, #0]
 800d3d8:	0699      	lsls	r1, r3, #26
 800d3da:	bf42      	ittt	mi
 800d3dc:	6833      	ldrmi	r3, [r6, #0]
 800d3de:	3302      	addmi	r3, #2
 800d3e0:	6033      	strmi	r3, [r6, #0]
 800d3e2:	6825      	ldr	r5, [r4, #0]
 800d3e4:	f015 0506 	ands.w	r5, r5, #6
 800d3e8:	d106      	bne.n	800d3f8 <_printf_common+0x48>
 800d3ea:	f104 0a19 	add.w	sl, r4, #25
 800d3ee:	68e3      	ldr	r3, [r4, #12]
 800d3f0:	6832      	ldr	r2, [r6, #0]
 800d3f2:	1a9b      	subs	r3, r3, r2
 800d3f4:	42ab      	cmp	r3, r5
 800d3f6:	dc26      	bgt.n	800d446 <_printf_common+0x96>
 800d3f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d3fc:	1e13      	subs	r3, r2, #0
 800d3fe:	6822      	ldr	r2, [r4, #0]
 800d400:	bf18      	it	ne
 800d402:	2301      	movne	r3, #1
 800d404:	0692      	lsls	r2, r2, #26
 800d406:	d42b      	bmi.n	800d460 <_printf_common+0xb0>
 800d408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d40c:	4649      	mov	r1, r9
 800d40e:	4638      	mov	r0, r7
 800d410:	47c0      	blx	r8
 800d412:	3001      	adds	r0, #1
 800d414:	d01e      	beq.n	800d454 <_printf_common+0xa4>
 800d416:	6823      	ldr	r3, [r4, #0]
 800d418:	6922      	ldr	r2, [r4, #16]
 800d41a:	f003 0306 	and.w	r3, r3, #6
 800d41e:	2b04      	cmp	r3, #4
 800d420:	bf02      	ittt	eq
 800d422:	68e5      	ldreq	r5, [r4, #12]
 800d424:	6833      	ldreq	r3, [r6, #0]
 800d426:	1aed      	subeq	r5, r5, r3
 800d428:	68a3      	ldr	r3, [r4, #8]
 800d42a:	bf0c      	ite	eq
 800d42c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d430:	2500      	movne	r5, #0
 800d432:	4293      	cmp	r3, r2
 800d434:	bfc4      	itt	gt
 800d436:	1a9b      	subgt	r3, r3, r2
 800d438:	18ed      	addgt	r5, r5, r3
 800d43a:	2600      	movs	r6, #0
 800d43c:	341a      	adds	r4, #26
 800d43e:	42b5      	cmp	r5, r6
 800d440:	d11a      	bne.n	800d478 <_printf_common+0xc8>
 800d442:	2000      	movs	r0, #0
 800d444:	e008      	b.n	800d458 <_printf_common+0xa8>
 800d446:	2301      	movs	r3, #1
 800d448:	4652      	mov	r2, sl
 800d44a:	4649      	mov	r1, r9
 800d44c:	4638      	mov	r0, r7
 800d44e:	47c0      	blx	r8
 800d450:	3001      	adds	r0, #1
 800d452:	d103      	bne.n	800d45c <_printf_common+0xac>
 800d454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d45c:	3501      	adds	r5, #1
 800d45e:	e7c6      	b.n	800d3ee <_printf_common+0x3e>
 800d460:	18e1      	adds	r1, r4, r3
 800d462:	1c5a      	adds	r2, r3, #1
 800d464:	2030      	movs	r0, #48	; 0x30
 800d466:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d46a:	4422      	add	r2, r4
 800d46c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d474:	3302      	adds	r3, #2
 800d476:	e7c7      	b.n	800d408 <_printf_common+0x58>
 800d478:	2301      	movs	r3, #1
 800d47a:	4622      	mov	r2, r4
 800d47c:	4649      	mov	r1, r9
 800d47e:	4638      	mov	r0, r7
 800d480:	47c0      	blx	r8
 800d482:	3001      	adds	r0, #1
 800d484:	d0e6      	beq.n	800d454 <_printf_common+0xa4>
 800d486:	3601      	adds	r6, #1
 800d488:	e7d9      	b.n	800d43e <_printf_common+0x8e>
	...

0800d48c <_printf_i>:
 800d48c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d490:	7e0f      	ldrb	r7, [r1, #24]
 800d492:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d494:	2f78      	cmp	r7, #120	; 0x78
 800d496:	4691      	mov	r9, r2
 800d498:	4680      	mov	r8, r0
 800d49a:	460c      	mov	r4, r1
 800d49c:	469a      	mov	sl, r3
 800d49e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d4a2:	d807      	bhi.n	800d4b4 <_printf_i+0x28>
 800d4a4:	2f62      	cmp	r7, #98	; 0x62
 800d4a6:	d80a      	bhi.n	800d4be <_printf_i+0x32>
 800d4a8:	2f00      	cmp	r7, #0
 800d4aa:	f000 80d4 	beq.w	800d656 <_printf_i+0x1ca>
 800d4ae:	2f58      	cmp	r7, #88	; 0x58
 800d4b0:	f000 80c0 	beq.w	800d634 <_printf_i+0x1a8>
 800d4b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d4bc:	e03a      	b.n	800d534 <_printf_i+0xa8>
 800d4be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d4c2:	2b15      	cmp	r3, #21
 800d4c4:	d8f6      	bhi.n	800d4b4 <_printf_i+0x28>
 800d4c6:	a101      	add	r1, pc, #4	; (adr r1, 800d4cc <_printf_i+0x40>)
 800d4c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d4cc:	0800d525 	.word	0x0800d525
 800d4d0:	0800d539 	.word	0x0800d539
 800d4d4:	0800d4b5 	.word	0x0800d4b5
 800d4d8:	0800d4b5 	.word	0x0800d4b5
 800d4dc:	0800d4b5 	.word	0x0800d4b5
 800d4e0:	0800d4b5 	.word	0x0800d4b5
 800d4e4:	0800d539 	.word	0x0800d539
 800d4e8:	0800d4b5 	.word	0x0800d4b5
 800d4ec:	0800d4b5 	.word	0x0800d4b5
 800d4f0:	0800d4b5 	.word	0x0800d4b5
 800d4f4:	0800d4b5 	.word	0x0800d4b5
 800d4f8:	0800d63d 	.word	0x0800d63d
 800d4fc:	0800d565 	.word	0x0800d565
 800d500:	0800d5f7 	.word	0x0800d5f7
 800d504:	0800d4b5 	.word	0x0800d4b5
 800d508:	0800d4b5 	.word	0x0800d4b5
 800d50c:	0800d65f 	.word	0x0800d65f
 800d510:	0800d4b5 	.word	0x0800d4b5
 800d514:	0800d565 	.word	0x0800d565
 800d518:	0800d4b5 	.word	0x0800d4b5
 800d51c:	0800d4b5 	.word	0x0800d4b5
 800d520:	0800d5ff 	.word	0x0800d5ff
 800d524:	682b      	ldr	r3, [r5, #0]
 800d526:	1d1a      	adds	r2, r3, #4
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	602a      	str	r2, [r5, #0]
 800d52c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d534:	2301      	movs	r3, #1
 800d536:	e09f      	b.n	800d678 <_printf_i+0x1ec>
 800d538:	6820      	ldr	r0, [r4, #0]
 800d53a:	682b      	ldr	r3, [r5, #0]
 800d53c:	0607      	lsls	r7, r0, #24
 800d53e:	f103 0104 	add.w	r1, r3, #4
 800d542:	6029      	str	r1, [r5, #0]
 800d544:	d501      	bpl.n	800d54a <_printf_i+0xbe>
 800d546:	681e      	ldr	r6, [r3, #0]
 800d548:	e003      	b.n	800d552 <_printf_i+0xc6>
 800d54a:	0646      	lsls	r6, r0, #25
 800d54c:	d5fb      	bpl.n	800d546 <_printf_i+0xba>
 800d54e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d552:	2e00      	cmp	r6, #0
 800d554:	da03      	bge.n	800d55e <_printf_i+0xd2>
 800d556:	232d      	movs	r3, #45	; 0x2d
 800d558:	4276      	negs	r6, r6
 800d55a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d55e:	485a      	ldr	r0, [pc, #360]	; (800d6c8 <_printf_i+0x23c>)
 800d560:	230a      	movs	r3, #10
 800d562:	e012      	b.n	800d58a <_printf_i+0xfe>
 800d564:	682b      	ldr	r3, [r5, #0]
 800d566:	6820      	ldr	r0, [r4, #0]
 800d568:	1d19      	adds	r1, r3, #4
 800d56a:	6029      	str	r1, [r5, #0]
 800d56c:	0605      	lsls	r5, r0, #24
 800d56e:	d501      	bpl.n	800d574 <_printf_i+0xe8>
 800d570:	681e      	ldr	r6, [r3, #0]
 800d572:	e002      	b.n	800d57a <_printf_i+0xee>
 800d574:	0641      	lsls	r1, r0, #25
 800d576:	d5fb      	bpl.n	800d570 <_printf_i+0xe4>
 800d578:	881e      	ldrh	r6, [r3, #0]
 800d57a:	4853      	ldr	r0, [pc, #332]	; (800d6c8 <_printf_i+0x23c>)
 800d57c:	2f6f      	cmp	r7, #111	; 0x6f
 800d57e:	bf0c      	ite	eq
 800d580:	2308      	moveq	r3, #8
 800d582:	230a      	movne	r3, #10
 800d584:	2100      	movs	r1, #0
 800d586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d58a:	6865      	ldr	r5, [r4, #4]
 800d58c:	60a5      	str	r5, [r4, #8]
 800d58e:	2d00      	cmp	r5, #0
 800d590:	bfa2      	ittt	ge
 800d592:	6821      	ldrge	r1, [r4, #0]
 800d594:	f021 0104 	bicge.w	r1, r1, #4
 800d598:	6021      	strge	r1, [r4, #0]
 800d59a:	b90e      	cbnz	r6, 800d5a0 <_printf_i+0x114>
 800d59c:	2d00      	cmp	r5, #0
 800d59e:	d04b      	beq.n	800d638 <_printf_i+0x1ac>
 800d5a0:	4615      	mov	r5, r2
 800d5a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d5a6:	fb03 6711 	mls	r7, r3, r1, r6
 800d5aa:	5dc7      	ldrb	r7, [r0, r7]
 800d5ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d5b0:	4637      	mov	r7, r6
 800d5b2:	42bb      	cmp	r3, r7
 800d5b4:	460e      	mov	r6, r1
 800d5b6:	d9f4      	bls.n	800d5a2 <_printf_i+0x116>
 800d5b8:	2b08      	cmp	r3, #8
 800d5ba:	d10b      	bne.n	800d5d4 <_printf_i+0x148>
 800d5bc:	6823      	ldr	r3, [r4, #0]
 800d5be:	07de      	lsls	r6, r3, #31
 800d5c0:	d508      	bpl.n	800d5d4 <_printf_i+0x148>
 800d5c2:	6923      	ldr	r3, [r4, #16]
 800d5c4:	6861      	ldr	r1, [r4, #4]
 800d5c6:	4299      	cmp	r1, r3
 800d5c8:	bfde      	ittt	le
 800d5ca:	2330      	movle	r3, #48	; 0x30
 800d5cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d5d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d5d4:	1b52      	subs	r2, r2, r5
 800d5d6:	6122      	str	r2, [r4, #16]
 800d5d8:	f8cd a000 	str.w	sl, [sp]
 800d5dc:	464b      	mov	r3, r9
 800d5de:	aa03      	add	r2, sp, #12
 800d5e0:	4621      	mov	r1, r4
 800d5e2:	4640      	mov	r0, r8
 800d5e4:	f7ff fee4 	bl	800d3b0 <_printf_common>
 800d5e8:	3001      	adds	r0, #1
 800d5ea:	d14a      	bne.n	800d682 <_printf_i+0x1f6>
 800d5ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5f0:	b004      	add	sp, #16
 800d5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5f6:	6823      	ldr	r3, [r4, #0]
 800d5f8:	f043 0320 	orr.w	r3, r3, #32
 800d5fc:	6023      	str	r3, [r4, #0]
 800d5fe:	4833      	ldr	r0, [pc, #204]	; (800d6cc <_printf_i+0x240>)
 800d600:	2778      	movs	r7, #120	; 0x78
 800d602:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d606:	6823      	ldr	r3, [r4, #0]
 800d608:	6829      	ldr	r1, [r5, #0]
 800d60a:	061f      	lsls	r7, r3, #24
 800d60c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d610:	d402      	bmi.n	800d618 <_printf_i+0x18c>
 800d612:	065f      	lsls	r7, r3, #25
 800d614:	bf48      	it	mi
 800d616:	b2b6      	uxthmi	r6, r6
 800d618:	07df      	lsls	r7, r3, #31
 800d61a:	bf48      	it	mi
 800d61c:	f043 0320 	orrmi.w	r3, r3, #32
 800d620:	6029      	str	r1, [r5, #0]
 800d622:	bf48      	it	mi
 800d624:	6023      	strmi	r3, [r4, #0]
 800d626:	b91e      	cbnz	r6, 800d630 <_printf_i+0x1a4>
 800d628:	6823      	ldr	r3, [r4, #0]
 800d62a:	f023 0320 	bic.w	r3, r3, #32
 800d62e:	6023      	str	r3, [r4, #0]
 800d630:	2310      	movs	r3, #16
 800d632:	e7a7      	b.n	800d584 <_printf_i+0xf8>
 800d634:	4824      	ldr	r0, [pc, #144]	; (800d6c8 <_printf_i+0x23c>)
 800d636:	e7e4      	b.n	800d602 <_printf_i+0x176>
 800d638:	4615      	mov	r5, r2
 800d63a:	e7bd      	b.n	800d5b8 <_printf_i+0x12c>
 800d63c:	682b      	ldr	r3, [r5, #0]
 800d63e:	6826      	ldr	r6, [r4, #0]
 800d640:	6961      	ldr	r1, [r4, #20]
 800d642:	1d18      	adds	r0, r3, #4
 800d644:	6028      	str	r0, [r5, #0]
 800d646:	0635      	lsls	r5, r6, #24
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	d501      	bpl.n	800d650 <_printf_i+0x1c4>
 800d64c:	6019      	str	r1, [r3, #0]
 800d64e:	e002      	b.n	800d656 <_printf_i+0x1ca>
 800d650:	0670      	lsls	r0, r6, #25
 800d652:	d5fb      	bpl.n	800d64c <_printf_i+0x1c0>
 800d654:	8019      	strh	r1, [r3, #0]
 800d656:	2300      	movs	r3, #0
 800d658:	6123      	str	r3, [r4, #16]
 800d65a:	4615      	mov	r5, r2
 800d65c:	e7bc      	b.n	800d5d8 <_printf_i+0x14c>
 800d65e:	682b      	ldr	r3, [r5, #0]
 800d660:	1d1a      	adds	r2, r3, #4
 800d662:	602a      	str	r2, [r5, #0]
 800d664:	681d      	ldr	r5, [r3, #0]
 800d666:	6862      	ldr	r2, [r4, #4]
 800d668:	2100      	movs	r1, #0
 800d66a:	4628      	mov	r0, r5
 800d66c:	f7f2 fdb8 	bl	80001e0 <memchr>
 800d670:	b108      	cbz	r0, 800d676 <_printf_i+0x1ea>
 800d672:	1b40      	subs	r0, r0, r5
 800d674:	6060      	str	r0, [r4, #4]
 800d676:	6863      	ldr	r3, [r4, #4]
 800d678:	6123      	str	r3, [r4, #16]
 800d67a:	2300      	movs	r3, #0
 800d67c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d680:	e7aa      	b.n	800d5d8 <_printf_i+0x14c>
 800d682:	6923      	ldr	r3, [r4, #16]
 800d684:	462a      	mov	r2, r5
 800d686:	4649      	mov	r1, r9
 800d688:	4640      	mov	r0, r8
 800d68a:	47d0      	blx	sl
 800d68c:	3001      	adds	r0, #1
 800d68e:	d0ad      	beq.n	800d5ec <_printf_i+0x160>
 800d690:	6823      	ldr	r3, [r4, #0]
 800d692:	079b      	lsls	r3, r3, #30
 800d694:	d413      	bmi.n	800d6be <_printf_i+0x232>
 800d696:	68e0      	ldr	r0, [r4, #12]
 800d698:	9b03      	ldr	r3, [sp, #12]
 800d69a:	4298      	cmp	r0, r3
 800d69c:	bfb8      	it	lt
 800d69e:	4618      	movlt	r0, r3
 800d6a0:	e7a6      	b.n	800d5f0 <_printf_i+0x164>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	4632      	mov	r2, r6
 800d6a6:	4649      	mov	r1, r9
 800d6a8:	4640      	mov	r0, r8
 800d6aa:	47d0      	blx	sl
 800d6ac:	3001      	adds	r0, #1
 800d6ae:	d09d      	beq.n	800d5ec <_printf_i+0x160>
 800d6b0:	3501      	adds	r5, #1
 800d6b2:	68e3      	ldr	r3, [r4, #12]
 800d6b4:	9903      	ldr	r1, [sp, #12]
 800d6b6:	1a5b      	subs	r3, r3, r1
 800d6b8:	42ab      	cmp	r3, r5
 800d6ba:	dcf2      	bgt.n	800d6a2 <_printf_i+0x216>
 800d6bc:	e7eb      	b.n	800d696 <_printf_i+0x20a>
 800d6be:	2500      	movs	r5, #0
 800d6c0:	f104 0619 	add.w	r6, r4, #25
 800d6c4:	e7f5      	b.n	800d6b2 <_printf_i+0x226>
 800d6c6:	bf00      	nop
 800d6c8:	0800f80a 	.word	0x0800f80a
 800d6cc:	0800f81b 	.word	0x0800f81b

0800d6d0 <std>:
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	b510      	push	{r4, lr}
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	e9c0 3300 	strd	r3, r3, [r0]
 800d6da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d6de:	6083      	str	r3, [r0, #8]
 800d6e0:	8181      	strh	r1, [r0, #12]
 800d6e2:	6643      	str	r3, [r0, #100]	; 0x64
 800d6e4:	81c2      	strh	r2, [r0, #14]
 800d6e6:	6183      	str	r3, [r0, #24]
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	2208      	movs	r2, #8
 800d6ec:	305c      	adds	r0, #92	; 0x5c
 800d6ee:	f000 f8f4 	bl	800d8da <memset>
 800d6f2:	4b0d      	ldr	r3, [pc, #52]	; (800d728 <std+0x58>)
 800d6f4:	6263      	str	r3, [r4, #36]	; 0x24
 800d6f6:	4b0d      	ldr	r3, [pc, #52]	; (800d72c <std+0x5c>)
 800d6f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d6fa:	4b0d      	ldr	r3, [pc, #52]	; (800d730 <std+0x60>)
 800d6fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d6fe:	4b0d      	ldr	r3, [pc, #52]	; (800d734 <std+0x64>)
 800d700:	6323      	str	r3, [r4, #48]	; 0x30
 800d702:	4b0d      	ldr	r3, [pc, #52]	; (800d738 <std+0x68>)
 800d704:	6224      	str	r4, [r4, #32]
 800d706:	429c      	cmp	r4, r3
 800d708:	d006      	beq.n	800d718 <std+0x48>
 800d70a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d70e:	4294      	cmp	r4, r2
 800d710:	d002      	beq.n	800d718 <std+0x48>
 800d712:	33d0      	adds	r3, #208	; 0xd0
 800d714:	429c      	cmp	r4, r3
 800d716:	d105      	bne.n	800d724 <std+0x54>
 800d718:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d720:	f000 b958 	b.w	800d9d4 <__retarget_lock_init_recursive>
 800d724:	bd10      	pop	{r4, pc}
 800d726:	bf00      	nop
 800d728:	0800d855 	.word	0x0800d855
 800d72c:	0800d877 	.word	0x0800d877
 800d730:	0800d8af 	.word	0x0800d8af
 800d734:	0800d8d3 	.word	0x0800d8d3
 800d738:	2000235c 	.word	0x2000235c

0800d73c <stdio_exit_handler>:
 800d73c:	4a02      	ldr	r2, [pc, #8]	; (800d748 <stdio_exit_handler+0xc>)
 800d73e:	4903      	ldr	r1, [pc, #12]	; (800d74c <stdio_exit_handler+0x10>)
 800d740:	4803      	ldr	r0, [pc, #12]	; (800d750 <stdio_exit_handler+0x14>)
 800d742:	f000 b869 	b.w	800d818 <_fwalk_sglue>
 800d746:	bf00      	nop
 800d748:	20000120 	.word	0x20000120
 800d74c:	0800f0d9 	.word	0x0800f0d9
 800d750:	2000012c 	.word	0x2000012c

0800d754 <cleanup_stdio>:
 800d754:	6841      	ldr	r1, [r0, #4]
 800d756:	4b0c      	ldr	r3, [pc, #48]	; (800d788 <cleanup_stdio+0x34>)
 800d758:	4299      	cmp	r1, r3
 800d75a:	b510      	push	{r4, lr}
 800d75c:	4604      	mov	r4, r0
 800d75e:	d001      	beq.n	800d764 <cleanup_stdio+0x10>
 800d760:	f001 fcba 	bl	800f0d8 <_fflush_r>
 800d764:	68a1      	ldr	r1, [r4, #8]
 800d766:	4b09      	ldr	r3, [pc, #36]	; (800d78c <cleanup_stdio+0x38>)
 800d768:	4299      	cmp	r1, r3
 800d76a:	d002      	beq.n	800d772 <cleanup_stdio+0x1e>
 800d76c:	4620      	mov	r0, r4
 800d76e:	f001 fcb3 	bl	800f0d8 <_fflush_r>
 800d772:	68e1      	ldr	r1, [r4, #12]
 800d774:	4b06      	ldr	r3, [pc, #24]	; (800d790 <cleanup_stdio+0x3c>)
 800d776:	4299      	cmp	r1, r3
 800d778:	d004      	beq.n	800d784 <cleanup_stdio+0x30>
 800d77a:	4620      	mov	r0, r4
 800d77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d780:	f001 bcaa 	b.w	800f0d8 <_fflush_r>
 800d784:	bd10      	pop	{r4, pc}
 800d786:	bf00      	nop
 800d788:	2000235c 	.word	0x2000235c
 800d78c:	200023c4 	.word	0x200023c4
 800d790:	2000242c 	.word	0x2000242c

0800d794 <global_stdio_init.part.0>:
 800d794:	b510      	push	{r4, lr}
 800d796:	4b0b      	ldr	r3, [pc, #44]	; (800d7c4 <global_stdio_init.part.0+0x30>)
 800d798:	4c0b      	ldr	r4, [pc, #44]	; (800d7c8 <global_stdio_init.part.0+0x34>)
 800d79a:	4a0c      	ldr	r2, [pc, #48]	; (800d7cc <global_stdio_init.part.0+0x38>)
 800d79c:	601a      	str	r2, [r3, #0]
 800d79e:	4620      	mov	r0, r4
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	2104      	movs	r1, #4
 800d7a4:	f7ff ff94 	bl	800d6d0 <std>
 800d7a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	2109      	movs	r1, #9
 800d7b0:	f7ff ff8e 	bl	800d6d0 <std>
 800d7b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d7b8:	2202      	movs	r2, #2
 800d7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7be:	2112      	movs	r1, #18
 800d7c0:	f7ff bf86 	b.w	800d6d0 <std>
 800d7c4:	20002494 	.word	0x20002494
 800d7c8:	2000235c 	.word	0x2000235c
 800d7cc:	0800d73d 	.word	0x0800d73d

0800d7d0 <__sfp_lock_acquire>:
 800d7d0:	4801      	ldr	r0, [pc, #4]	; (800d7d8 <__sfp_lock_acquire+0x8>)
 800d7d2:	f000 b900 	b.w	800d9d6 <__retarget_lock_acquire_recursive>
 800d7d6:	bf00      	nop
 800d7d8:	2000249d 	.word	0x2000249d

0800d7dc <__sfp_lock_release>:
 800d7dc:	4801      	ldr	r0, [pc, #4]	; (800d7e4 <__sfp_lock_release+0x8>)
 800d7de:	f000 b8fb 	b.w	800d9d8 <__retarget_lock_release_recursive>
 800d7e2:	bf00      	nop
 800d7e4:	2000249d 	.word	0x2000249d

0800d7e8 <__sinit>:
 800d7e8:	b510      	push	{r4, lr}
 800d7ea:	4604      	mov	r4, r0
 800d7ec:	f7ff fff0 	bl	800d7d0 <__sfp_lock_acquire>
 800d7f0:	6a23      	ldr	r3, [r4, #32]
 800d7f2:	b11b      	cbz	r3, 800d7fc <__sinit+0x14>
 800d7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7f8:	f7ff bff0 	b.w	800d7dc <__sfp_lock_release>
 800d7fc:	4b04      	ldr	r3, [pc, #16]	; (800d810 <__sinit+0x28>)
 800d7fe:	6223      	str	r3, [r4, #32]
 800d800:	4b04      	ldr	r3, [pc, #16]	; (800d814 <__sinit+0x2c>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d1f5      	bne.n	800d7f4 <__sinit+0xc>
 800d808:	f7ff ffc4 	bl	800d794 <global_stdio_init.part.0>
 800d80c:	e7f2      	b.n	800d7f4 <__sinit+0xc>
 800d80e:	bf00      	nop
 800d810:	0800d755 	.word	0x0800d755
 800d814:	20002494 	.word	0x20002494

0800d818 <_fwalk_sglue>:
 800d818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d81c:	4607      	mov	r7, r0
 800d81e:	4688      	mov	r8, r1
 800d820:	4614      	mov	r4, r2
 800d822:	2600      	movs	r6, #0
 800d824:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d828:	f1b9 0901 	subs.w	r9, r9, #1
 800d82c:	d505      	bpl.n	800d83a <_fwalk_sglue+0x22>
 800d82e:	6824      	ldr	r4, [r4, #0]
 800d830:	2c00      	cmp	r4, #0
 800d832:	d1f7      	bne.n	800d824 <_fwalk_sglue+0xc>
 800d834:	4630      	mov	r0, r6
 800d836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d83a:	89ab      	ldrh	r3, [r5, #12]
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d907      	bls.n	800d850 <_fwalk_sglue+0x38>
 800d840:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d844:	3301      	adds	r3, #1
 800d846:	d003      	beq.n	800d850 <_fwalk_sglue+0x38>
 800d848:	4629      	mov	r1, r5
 800d84a:	4638      	mov	r0, r7
 800d84c:	47c0      	blx	r8
 800d84e:	4306      	orrs	r6, r0
 800d850:	3568      	adds	r5, #104	; 0x68
 800d852:	e7e9      	b.n	800d828 <_fwalk_sglue+0x10>

0800d854 <__sread>:
 800d854:	b510      	push	{r4, lr}
 800d856:	460c      	mov	r4, r1
 800d858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d85c:	f000 f86c 	bl	800d938 <_read_r>
 800d860:	2800      	cmp	r0, #0
 800d862:	bfab      	itete	ge
 800d864:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d866:	89a3      	ldrhlt	r3, [r4, #12]
 800d868:	181b      	addge	r3, r3, r0
 800d86a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d86e:	bfac      	ite	ge
 800d870:	6563      	strge	r3, [r4, #84]	; 0x54
 800d872:	81a3      	strhlt	r3, [r4, #12]
 800d874:	bd10      	pop	{r4, pc}

0800d876 <__swrite>:
 800d876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d87a:	461f      	mov	r7, r3
 800d87c:	898b      	ldrh	r3, [r1, #12]
 800d87e:	05db      	lsls	r3, r3, #23
 800d880:	4605      	mov	r5, r0
 800d882:	460c      	mov	r4, r1
 800d884:	4616      	mov	r6, r2
 800d886:	d505      	bpl.n	800d894 <__swrite+0x1e>
 800d888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d88c:	2302      	movs	r3, #2
 800d88e:	2200      	movs	r2, #0
 800d890:	f000 f840 	bl	800d914 <_lseek_r>
 800d894:	89a3      	ldrh	r3, [r4, #12]
 800d896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d89a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d89e:	81a3      	strh	r3, [r4, #12]
 800d8a0:	4632      	mov	r2, r6
 800d8a2:	463b      	mov	r3, r7
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8aa:	f000 b857 	b.w	800d95c <_write_r>

0800d8ae <__sseek>:
 800d8ae:	b510      	push	{r4, lr}
 800d8b0:	460c      	mov	r4, r1
 800d8b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8b6:	f000 f82d 	bl	800d914 <_lseek_r>
 800d8ba:	1c43      	adds	r3, r0, #1
 800d8bc:	89a3      	ldrh	r3, [r4, #12]
 800d8be:	bf15      	itete	ne
 800d8c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d8c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d8c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d8ca:	81a3      	strheq	r3, [r4, #12]
 800d8cc:	bf18      	it	ne
 800d8ce:	81a3      	strhne	r3, [r4, #12]
 800d8d0:	bd10      	pop	{r4, pc}

0800d8d2 <__sclose>:
 800d8d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8d6:	f000 b80d 	b.w	800d8f4 <_close_r>

0800d8da <memset>:
 800d8da:	4402      	add	r2, r0
 800d8dc:	4603      	mov	r3, r0
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d100      	bne.n	800d8e4 <memset+0xa>
 800d8e2:	4770      	bx	lr
 800d8e4:	f803 1b01 	strb.w	r1, [r3], #1
 800d8e8:	e7f9      	b.n	800d8de <memset+0x4>
	...

0800d8ec <_localeconv_r>:
 800d8ec:	4800      	ldr	r0, [pc, #0]	; (800d8f0 <_localeconv_r+0x4>)
 800d8ee:	4770      	bx	lr
 800d8f0:	2000026c 	.word	0x2000026c

0800d8f4 <_close_r>:
 800d8f4:	b538      	push	{r3, r4, r5, lr}
 800d8f6:	4d06      	ldr	r5, [pc, #24]	; (800d910 <_close_r+0x1c>)
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	4608      	mov	r0, r1
 800d8fe:	602b      	str	r3, [r5, #0]
 800d900:	f7f4 fc73 	bl	80021ea <_close>
 800d904:	1c43      	adds	r3, r0, #1
 800d906:	d102      	bne.n	800d90e <_close_r+0x1a>
 800d908:	682b      	ldr	r3, [r5, #0]
 800d90a:	b103      	cbz	r3, 800d90e <_close_r+0x1a>
 800d90c:	6023      	str	r3, [r4, #0]
 800d90e:	bd38      	pop	{r3, r4, r5, pc}
 800d910:	20002498 	.word	0x20002498

0800d914 <_lseek_r>:
 800d914:	b538      	push	{r3, r4, r5, lr}
 800d916:	4d07      	ldr	r5, [pc, #28]	; (800d934 <_lseek_r+0x20>)
 800d918:	4604      	mov	r4, r0
 800d91a:	4608      	mov	r0, r1
 800d91c:	4611      	mov	r1, r2
 800d91e:	2200      	movs	r2, #0
 800d920:	602a      	str	r2, [r5, #0]
 800d922:	461a      	mov	r2, r3
 800d924:	f7f4 fc88 	bl	8002238 <_lseek>
 800d928:	1c43      	adds	r3, r0, #1
 800d92a:	d102      	bne.n	800d932 <_lseek_r+0x1e>
 800d92c:	682b      	ldr	r3, [r5, #0]
 800d92e:	b103      	cbz	r3, 800d932 <_lseek_r+0x1e>
 800d930:	6023      	str	r3, [r4, #0]
 800d932:	bd38      	pop	{r3, r4, r5, pc}
 800d934:	20002498 	.word	0x20002498

0800d938 <_read_r>:
 800d938:	b538      	push	{r3, r4, r5, lr}
 800d93a:	4d07      	ldr	r5, [pc, #28]	; (800d958 <_read_r+0x20>)
 800d93c:	4604      	mov	r4, r0
 800d93e:	4608      	mov	r0, r1
 800d940:	4611      	mov	r1, r2
 800d942:	2200      	movs	r2, #0
 800d944:	602a      	str	r2, [r5, #0]
 800d946:	461a      	mov	r2, r3
 800d948:	f7f4 fc16 	bl	8002178 <_read>
 800d94c:	1c43      	adds	r3, r0, #1
 800d94e:	d102      	bne.n	800d956 <_read_r+0x1e>
 800d950:	682b      	ldr	r3, [r5, #0]
 800d952:	b103      	cbz	r3, 800d956 <_read_r+0x1e>
 800d954:	6023      	str	r3, [r4, #0]
 800d956:	bd38      	pop	{r3, r4, r5, pc}
 800d958:	20002498 	.word	0x20002498

0800d95c <_write_r>:
 800d95c:	b538      	push	{r3, r4, r5, lr}
 800d95e:	4d07      	ldr	r5, [pc, #28]	; (800d97c <_write_r+0x20>)
 800d960:	4604      	mov	r4, r0
 800d962:	4608      	mov	r0, r1
 800d964:	4611      	mov	r1, r2
 800d966:	2200      	movs	r2, #0
 800d968:	602a      	str	r2, [r5, #0]
 800d96a:	461a      	mov	r2, r3
 800d96c:	f7f4 fc21 	bl	80021b2 <_write>
 800d970:	1c43      	adds	r3, r0, #1
 800d972:	d102      	bne.n	800d97a <_write_r+0x1e>
 800d974:	682b      	ldr	r3, [r5, #0]
 800d976:	b103      	cbz	r3, 800d97a <_write_r+0x1e>
 800d978:	6023      	str	r3, [r4, #0]
 800d97a:	bd38      	pop	{r3, r4, r5, pc}
 800d97c:	20002498 	.word	0x20002498

0800d980 <__errno>:
 800d980:	4b01      	ldr	r3, [pc, #4]	; (800d988 <__errno+0x8>)
 800d982:	6818      	ldr	r0, [r3, #0]
 800d984:	4770      	bx	lr
 800d986:	bf00      	nop
 800d988:	20000178 	.word	0x20000178

0800d98c <__libc_init_array>:
 800d98c:	b570      	push	{r4, r5, r6, lr}
 800d98e:	4d0d      	ldr	r5, [pc, #52]	; (800d9c4 <__libc_init_array+0x38>)
 800d990:	4c0d      	ldr	r4, [pc, #52]	; (800d9c8 <__libc_init_array+0x3c>)
 800d992:	1b64      	subs	r4, r4, r5
 800d994:	10a4      	asrs	r4, r4, #2
 800d996:	2600      	movs	r6, #0
 800d998:	42a6      	cmp	r6, r4
 800d99a:	d109      	bne.n	800d9b0 <__libc_init_array+0x24>
 800d99c:	4d0b      	ldr	r5, [pc, #44]	; (800d9cc <__libc_init_array+0x40>)
 800d99e:	4c0c      	ldr	r4, [pc, #48]	; (800d9d0 <__libc_init_array+0x44>)
 800d9a0:	f001 feee 	bl	800f780 <_init>
 800d9a4:	1b64      	subs	r4, r4, r5
 800d9a6:	10a4      	asrs	r4, r4, #2
 800d9a8:	2600      	movs	r6, #0
 800d9aa:	42a6      	cmp	r6, r4
 800d9ac:	d105      	bne.n	800d9ba <__libc_init_array+0x2e>
 800d9ae:	bd70      	pop	{r4, r5, r6, pc}
 800d9b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9b4:	4798      	blx	r3
 800d9b6:	3601      	adds	r6, #1
 800d9b8:	e7ee      	b.n	800d998 <__libc_init_array+0xc>
 800d9ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9be:	4798      	blx	r3
 800d9c0:	3601      	adds	r6, #1
 800d9c2:	e7f2      	b.n	800d9aa <__libc_init_array+0x1e>
 800d9c4:	0800fb74 	.word	0x0800fb74
 800d9c8:	0800fb74 	.word	0x0800fb74
 800d9cc:	0800fb74 	.word	0x0800fb74
 800d9d0:	0800fb78 	.word	0x0800fb78

0800d9d4 <__retarget_lock_init_recursive>:
 800d9d4:	4770      	bx	lr

0800d9d6 <__retarget_lock_acquire_recursive>:
 800d9d6:	4770      	bx	lr

0800d9d8 <__retarget_lock_release_recursive>:
 800d9d8:	4770      	bx	lr

0800d9da <quorem>:
 800d9da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9de:	6903      	ldr	r3, [r0, #16]
 800d9e0:	690c      	ldr	r4, [r1, #16]
 800d9e2:	42a3      	cmp	r3, r4
 800d9e4:	4607      	mov	r7, r0
 800d9e6:	db7e      	blt.n	800dae6 <quorem+0x10c>
 800d9e8:	3c01      	subs	r4, #1
 800d9ea:	f101 0814 	add.w	r8, r1, #20
 800d9ee:	f100 0514 	add.w	r5, r0, #20
 800d9f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9f6:	9301      	str	r3, [sp, #4]
 800d9f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d9fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da00:	3301      	adds	r3, #1
 800da02:	429a      	cmp	r2, r3
 800da04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800da08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800da0c:	fbb2 f6f3 	udiv	r6, r2, r3
 800da10:	d331      	bcc.n	800da76 <quorem+0x9c>
 800da12:	f04f 0e00 	mov.w	lr, #0
 800da16:	4640      	mov	r0, r8
 800da18:	46ac      	mov	ip, r5
 800da1a:	46f2      	mov	sl, lr
 800da1c:	f850 2b04 	ldr.w	r2, [r0], #4
 800da20:	b293      	uxth	r3, r2
 800da22:	fb06 e303 	mla	r3, r6, r3, lr
 800da26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800da2a:	0c1a      	lsrs	r2, r3, #16
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	ebaa 0303 	sub.w	r3, sl, r3
 800da32:	f8dc a000 	ldr.w	sl, [ip]
 800da36:	fa13 f38a 	uxtah	r3, r3, sl
 800da3a:	fb06 220e 	mla	r2, r6, lr, r2
 800da3e:	9300      	str	r3, [sp, #0]
 800da40:	9b00      	ldr	r3, [sp, #0]
 800da42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800da46:	b292      	uxth	r2, r2
 800da48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800da4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da50:	f8bd 3000 	ldrh.w	r3, [sp]
 800da54:	4581      	cmp	r9, r0
 800da56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da5a:	f84c 3b04 	str.w	r3, [ip], #4
 800da5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800da62:	d2db      	bcs.n	800da1c <quorem+0x42>
 800da64:	f855 300b 	ldr.w	r3, [r5, fp]
 800da68:	b92b      	cbnz	r3, 800da76 <quorem+0x9c>
 800da6a:	9b01      	ldr	r3, [sp, #4]
 800da6c:	3b04      	subs	r3, #4
 800da6e:	429d      	cmp	r5, r3
 800da70:	461a      	mov	r2, r3
 800da72:	d32c      	bcc.n	800dace <quorem+0xf4>
 800da74:	613c      	str	r4, [r7, #16]
 800da76:	4638      	mov	r0, r7
 800da78:	f001 f9a8 	bl	800edcc <__mcmp>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	db22      	blt.n	800dac6 <quorem+0xec>
 800da80:	3601      	adds	r6, #1
 800da82:	4629      	mov	r1, r5
 800da84:	2000      	movs	r0, #0
 800da86:	f858 2b04 	ldr.w	r2, [r8], #4
 800da8a:	f8d1 c000 	ldr.w	ip, [r1]
 800da8e:	b293      	uxth	r3, r2
 800da90:	1ac3      	subs	r3, r0, r3
 800da92:	0c12      	lsrs	r2, r2, #16
 800da94:	fa13 f38c 	uxtah	r3, r3, ip
 800da98:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800da9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800daa6:	45c1      	cmp	r9, r8
 800daa8:	f841 3b04 	str.w	r3, [r1], #4
 800daac:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dab0:	d2e9      	bcs.n	800da86 <quorem+0xac>
 800dab2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dab6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800daba:	b922      	cbnz	r2, 800dac6 <quorem+0xec>
 800dabc:	3b04      	subs	r3, #4
 800dabe:	429d      	cmp	r5, r3
 800dac0:	461a      	mov	r2, r3
 800dac2:	d30a      	bcc.n	800dada <quorem+0x100>
 800dac4:	613c      	str	r4, [r7, #16]
 800dac6:	4630      	mov	r0, r6
 800dac8:	b003      	add	sp, #12
 800daca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dace:	6812      	ldr	r2, [r2, #0]
 800dad0:	3b04      	subs	r3, #4
 800dad2:	2a00      	cmp	r2, #0
 800dad4:	d1ce      	bne.n	800da74 <quorem+0x9a>
 800dad6:	3c01      	subs	r4, #1
 800dad8:	e7c9      	b.n	800da6e <quorem+0x94>
 800dada:	6812      	ldr	r2, [r2, #0]
 800dadc:	3b04      	subs	r3, #4
 800dade:	2a00      	cmp	r2, #0
 800dae0:	d1f0      	bne.n	800dac4 <quorem+0xea>
 800dae2:	3c01      	subs	r4, #1
 800dae4:	e7eb      	b.n	800dabe <quorem+0xe4>
 800dae6:	2000      	movs	r0, #0
 800dae8:	e7ee      	b.n	800dac8 <quorem+0xee>
 800daea:	0000      	movs	r0, r0
 800daec:	0000      	movs	r0, r0
	...

0800daf0 <_dtoa_r>:
 800daf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf4:	ed2d 8b04 	vpush	{d8-d9}
 800daf8:	69c5      	ldr	r5, [r0, #28]
 800dafa:	b093      	sub	sp, #76	; 0x4c
 800dafc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800db00:	ec57 6b10 	vmov	r6, r7, d0
 800db04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800db08:	9107      	str	r1, [sp, #28]
 800db0a:	4604      	mov	r4, r0
 800db0c:	920a      	str	r2, [sp, #40]	; 0x28
 800db0e:	930d      	str	r3, [sp, #52]	; 0x34
 800db10:	b975      	cbnz	r5, 800db30 <_dtoa_r+0x40>
 800db12:	2010      	movs	r0, #16
 800db14:	f000 fe2a 	bl	800e76c <malloc>
 800db18:	4602      	mov	r2, r0
 800db1a:	61e0      	str	r0, [r4, #28]
 800db1c:	b920      	cbnz	r0, 800db28 <_dtoa_r+0x38>
 800db1e:	4bae      	ldr	r3, [pc, #696]	; (800ddd8 <_dtoa_r+0x2e8>)
 800db20:	21ef      	movs	r1, #239	; 0xef
 800db22:	48ae      	ldr	r0, [pc, #696]	; (800dddc <_dtoa_r+0x2ec>)
 800db24:	f001 fb1e 	bl	800f164 <__assert_func>
 800db28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800db2c:	6005      	str	r5, [r0, #0]
 800db2e:	60c5      	str	r5, [r0, #12]
 800db30:	69e3      	ldr	r3, [r4, #28]
 800db32:	6819      	ldr	r1, [r3, #0]
 800db34:	b151      	cbz	r1, 800db4c <_dtoa_r+0x5c>
 800db36:	685a      	ldr	r2, [r3, #4]
 800db38:	604a      	str	r2, [r1, #4]
 800db3a:	2301      	movs	r3, #1
 800db3c:	4093      	lsls	r3, r2
 800db3e:	608b      	str	r3, [r1, #8]
 800db40:	4620      	mov	r0, r4
 800db42:	f000 ff07 	bl	800e954 <_Bfree>
 800db46:	69e3      	ldr	r3, [r4, #28]
 800db48:	2200      	movs	r2, #0
 800db4a:	601a      	str	r2, [r3, #0]
 800db4c:	1e3b      	subs	r3, r7, #0
 800db4e:	bfbb      	ittet	lt
 800db50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800db54:	9303      	strlt	r3, [sp, #12]
 800db56:	2300      	movge	r3, #0
 800db58:	2201      	movlt	r2, #1
 800db5a:	bfac      	ite	ge
 800db5c:	f8c8 3000 	strge.w	r3, [r8]
 800db60:	f8c8 2000 	strlt.w	r2, [r8]
 800db64:	4b9e      	ldr	r3, [pc, #632]	; (800dde0 <_dtoa_r+0x2f0>)
 800db66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800db6a:	ea33 0308 	bics.w	r3, r3, r8
 800db6e:	d11b      	bne.n	800dba8 <_dtoa_r+0xb8>
 800db70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db72:	f242 730f 	movw	r3, #9999	; 0x270f
 800db76:	6013      	str	r3, [r2, #0]
 800db78:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800db7c:	4333      	orrs	r3, r6
 800db7e:	f000 8593 	beq.w	800e6a8 <_dtoa_r+0xbb8>
 800db82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db84:	b963      	cbnz	r3, 800dba0 <_dtoa_r+0xb0>
 800db86:	4b97      	ldr	r3, [pc, #604]	; (800dde4 <_dtoa_r+0x2f4>)
 800db88:	e027      	b.n	800dbda <_dtoa_r+0xea>
 800db8a:	4b97      	ldr	r3, [pc, #604]	; (800dde8 <_dtoa_r+0x2f8>)
 800db8c:	9300      	str	r3, [sp, #0]
 800db8e:	3308      	adds	r3, #8
 800db90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800db92:	6013      	str	r3, [r2, #0]
 800db94:	9800      	ldr	r0, [sp, #0]
 800db96:	b013      	add	sp, #76	; 0x4c
 800db98:	ecbd 8b04 	vpop	{d8-d9}
 800db9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dba0:	4b90      	ldr	r3, [pc, #576]	; (800dde4 <_dtoa_r+0x2f4>)
 800dba2:	9300      	str	r3, [sp, #0]
 800dba4:	3303      	adds	r3, #3
 800dba6:	e7f3      	b.n	800db90 <_dtoa_r+0xa0>
 800dba8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dbac:	2200      	movs	r2, #0
 800dbae:	ec51 0b17 	vmov	r0, r1, d7
 800dbb2:	eeb0 8a47 	vmov.f32	s16, s14
 800dbb6:	eef0 8a67 	vmov.f32	s17, s15
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f7f2 ff8c 	bl	8000ad8 <__aeabi_dcmpeq>
 800dbc0:	4681      	mov	r9, r0
 800dbc2:	b160      	cbz	r0, 800dbde <_dtoa_r+0xee>
 800dbc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	6013      	str	r3, [r2, #0]
 800dbca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	f000 8568 	beq.w	800e6a2 <_dtoa_r+0xbb2>
 800dbd2:	4b86      	ldr	r3, [pc, #536]	; (800ddec <_dtoa_r+0x2fc>)
 800dbd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dbd6:	6013      	str	r3, [r2, #0]
 800dbd8:	3b01      	subs	r3, #1
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	e7da      	b.n	800db94 <_dtoa_r+0xa4>
 800dbde:	aa10      	add	r2, sp, #64	; 0x40
 800dbe0:	a911      	add	r1, sp, #68	; 0x44
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	eeb0 0a48 	vmov.f32	s0, s16
 800dbe8:	eef0 0a68 	vmov.f32	s1, s17
 800dbec:	f001 f994 	bl	800ef18 <__d2b>
 800dbf0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800dbf4:	4682      	mov	sl, r0
 800dbf6:	2d00      	cmp	r5, #0
 800dbf8:	d07f      	beq.n	800dcfa <_dtoa_r+0x20a>
 800dbfa:	ee18 3a90 	vmov	r3, s17
 800dbfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dc06:	ec51 0b18 	vmov	r0, r1, d8
 800dc0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dc0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dc12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800dc16:	4619      	mov	r1, r3
 800dc18:	2200      	movs	r2, #0
 800dc1a:	4b75      	ldr	r3, [pc, #468]	; (800ddf0 <_dtoa_r+0x300>)
 800dc1c:	f7f2 fb3c 	bl	8000298 <__aeabi_dsub>
 800dc20:	a367      	add	r3, pc, #412	; (adr r3, 800ddc0 <_dtoa_r+0x2d0>)
 800dc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc26:	f7f2 fcef 	bl	8000608 <__aeabi_dmul>
 800dc2a:	a367      	add	r3, pc, #412	; (adr r3, 800ddc8 <_dtoa_r+0x2d8>)
 800dc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc30:	f7f2 fb34 	bl	800029c <__adddf3>
 800dc34:	4606      	mov	r6, r0
 800dc36:	4628      	mov	r0, r5
 800dc38:	460f      	mov	r7, r1
 800dc3a:	f7f2 fc7b 	bl	8000534 <__aeabi_i2d>
 800dc3e:	a364      	add	r3, pc, #400	; (adr r3, 800ddd0 <_dtoa_r+0x2e0>)
 800dc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc44:	f7f2 fce0 	bl	8000608 <__aeabi_dmul>
 800dc48:	4602      	mov	r2, r0
 800dc4a:	460b      	mov	r3, r1
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	4639      	mov	r1, r7
 800dc50:	f7f2 fb24 	bl	800029c <__adddf3>
 800dc54:	4606      	mov	r6, r0
 800dc56:	460f      	mov	r7, r1
 800dc58:	f7f2 ff86 	bl	8000b68 <__aeabi_d2iz>
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	4683      	mov	fp, r0
 800dc60:	2300      	movs	r3, #0
 800dc62:	4630      	mov	r0, r6
 800dc64:	4639      	mov	r1, r7
 800dc66:	f7f2 ff41 	bl	8000aec <__aeabi_dcmplt>
 800dc6a:	b148      	cbz	r0, 800dc80 <_dtoa_r+0x190>
 800dc6c:	4658      	mov	r0, fp
 800dc6e:	f7f2 fc61 	bl	8000534 <__aeabi_i2d>
 800dc72:	4632      	mov	r2, r6
 800dc74:	463b      	mov	r3, r7
 800dc76:	f7f2 ff2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc7a:	b908      	cbnz	r0, 800dc80 <_dtoa_r+0x190>
 800dc7c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dc80:	f1bb 0f16 	cmp.w	fp, #22
 800dc84:	d857      	bhi.n	800dd36 <_dtoa_r+0x246>
 800dc86:	4b5b      	ldr	r3, [pc, #364]	; (800ddf4 <_dtoa_r+0x304>)
 800dc88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc90:	ec51 0b18 	vmov	r0, r1, d8
 800dc94:	f7f2 ff2a 	bl	8000aec <__aeabi_dcmplt>
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	d04e      	beq.n	800dd3a <_dtoa_r+0x24a>
 800dc9c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dca0:	2300      	movs	r3, #0
 800dca2:	930c      	str	r3, [sp, #48]	; 0x30
 800dca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dca6:	1b5b      	subs	r3, r3, r5
 800dca8:	1e5a      	subs	r2, r3, #1
 800dcaa:	bf45      	ittet	mi
 800dcac:	f1c3 0301 	rsbmi	r3, r3, #1
 800dcb0:	9305      	strmi	r3, [sp, #20]
 800dcb2:	2300      	movpl	r3, #0
 800dcb4:	2300      	movmi	r3, #0
 800dcb6:	9206      	str	r2, [sp, #24]
 800dcb8:	bf54      	ite	pl
 800dcba:	9305      	strpl	r3, [sp, #20]
 800dcbc:	9306      	strmi	r3, [sp, #24]
 800dcbe:	f1bb 0f00 	cmp.w	fp, #0
 800dcc2:	db3c      	blt.n	800dd3e <_dtoa_r+0x24e>
 800dcc4:	9b06      	ldr	r3, [sp, #24]
 800dcc6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800dcca:	445b      	add	r3, fp
 800dccc:	9306      	str	r3, [sp, #24]
 800dcce:	2300      	movs	r3, #0
 800dcd0:	9308      	str	r3, [sp, #32]
 800dcd2:	9b07      	ldr	r3, [sp, #28]
 800dcd4:	2b09      	cmp	r3, #9
 800dcd6:	d868      	bhi.n	800ddaa <_dtoa_r+0x2ba>
 800dcd8:	2b05      	cmp	r3, #5
 800dcda:	bfc4      	itt	gt
 800dcdc:	3b04      	subgt	r3, #4
 800dcde:	9307      	strgt	r3, [sp, #28]
 800dce0:	9b07      	ldr	r3, [sp, #28]
 800dce2:	f1a3 0302 	sub.w	r3, r3, #2
 800dce6:	bfcc      	ite	gt
 800dce8:	2500      	movgt	r5, #0
 800dcea:	2501      	movle	r5, #1
 800dcec:	2b03      	cmp	r3, #3
 800dcee:	f200 8085 	bhi.w	800ddfc <_dtoa_r+0x30c>
 800dcf2:	e8df f003 	tbb	[pc, r3]
 800dcf6:	3b2e      	.short	0x3b2e
 800dcf8:	5839      	.short	0x5839
 800dcfa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dcfe:	441d      	add	r5, r3
 800dd00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dd04:	2b20      	cmp	r3, #32
 800dd06:	bfc1      	itttt	gt
 800dd08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dd0c:	fa08 f803 	lslgt.w	r8, r8, r3
 800dd10:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800dd14:	fa26 f303 	lsrgt.w	r3, r6, r3
 800dd18:	bfd6      	itet	le
 800dd1a:	f1c3 0320 	rsble	r3, r3, #32
 800dd1e:	ea48 0003 	orrgt.w	r0, r8, r3
 800dd22:	fa06 f003 	lslle.w	r0, r6, r3
 800dd26:	f7f2 fbf5 	bl	8000514 <__aeabi_ui2d>
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800dd30:	3d01      	subs	r5, #1
 800dd32:	920e      	str	r2, [sp, #56]	; 0x38
 800dd34:	e76f      	b.n	800dc16 <_dtoa_r+0x126>
 800dd36:	2301      	movs	r3, #1
 800dd38:	e7b3      	b.n	800dca2 <_dtoa_r+0x1b2>
 800dd3a:	900c      	str	r0, [sp, #48]	; 0x30
 800dd3c:	e7b2      	b.n	800dca4 <_dtoa_r+0x1b4>
 800dd3e:	9b05      	ldr	r3, [sp, #20]
 800dd40:	eba3 030b 	sub.w	r3, r3, fp
 800dd44:	9305      	str	r3, [sp, #20]
 800dd46:	f1cb 0300 	rsb	r3, fp, #0
 800dd4a:	9308      	str	r3, [sp, #32]
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd50:	e7bf      	b.n	800dcd2 <_dtoa_r+0x1e2>
 800dd52:	2300      	movs	r3, #0
 800dd54:	9309      	str	r3, [sp, #36]	; 0x24
 800dd56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	dc52      	bgt.n	800de02 <_dtoa_r+0x312>
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	9301      	str	r3, [sp, #4]
 800dd60:	9304      	str	r3, [sp, #16]
 800dd62:	461a      	mov	r2, r3
 800dd64:	920a      	str	r2, [sp, #40]	; 0x28
 800dd66:	e00b      	b.n	800dd80 <_dtoa_r+0x290>
 800dd68:	2301      	movs	r3, #1
 800dd6a:	e7f3      	b.n	800dd54 <_dtoa_r+0x264>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd72:	445b      	add	r3, fp
 800dd74:	9301      	str	r3, [sp, #4]
 800dd76:	3301      	adds	r3, #1
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	9304      	str	r3, [sp, #16]
 800dd7c:	bfb8      	it	lt
 800dd7e:	2301      	movlt	r3, #1
 800dd80:	69e0      	ldr	r0, [r4, #28]
 800dd82:	2100      	movs	r1, #0
 800dd84:	2204      	movs	r2, #4
 800dd86:	f102 0614 	add.w	r6, r2, #20
 800dd8a:	429e      	cmp	r6, r3
 800dd8c:	d93d      	bls.n	800de0a <_dtoa_r+0x31a>
 800dd8e:	6041      	str	r1, [r0, #4]
 800dd90:	4620      	mov	r0, r4
 800dd92:	f000 fd9f 	bl	800e8d4 <_Balloc>
 800dd96:	9000      	str	r0, [sp, #0]
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	d139      	bne.n	800de10 <_dtoa_r+0x320>
 800dd9c:	4b16      	ldr	r3, [pc, #88]	; (800ddf8 <_dtoa_r+0x308>)
 800dd9e:	4602      	mov	r2, r0
 800dda0:	f240 11af 	movw	r1, #431	; 0x1af
 800dda4:	e6bd      	b.n	800db22 <_dtoa_r+0x32>
 800dda6:	2301      	movs	r3, #1
 800dda8:	e7e1      	b.n	800dd6e <_dtoa_r+0x27e>
 800ddaa:	2501      	movs	r5, #1
 800ddac:	2300      	movs	r3, #0
 800ddae:	9307      	str	r3, [sp, #28]
 800ddb0:	9509      	str	r5, [sp, #36]	; 0x24
 800ddb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ddb6:	9301      	str	r3, [sp, #4]
 800ddb8:	9304      	str	r3, [sp, #16]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	2312      	movs	r3, #18
 800ddbe:	e7d1      	b.n	800dd64 <_dtoa_r+0x274>
 800ddc0:	636f4361 	.word	0x636f4361
 800ddc4:	3fd287a7 	.word	0x3fd287a7
 800ddc8:	8b60c8b3 	.word	0x8b60c8b3
 800ddcc:	3fc68a28 	.word	0x3fc68a28
 800ddd0:	509f79fb 	.word	0x509f79fb
 800ddd4:	3fd34413 	.word	0x3fd34413
 800ddd8:	0800f839 	.word	0x0800f839
 800dddc:	0800f850 	.word	0x0800f850
 800dde0:	7ff00000 	.word	0x7ff00000
 800dde4:	0800f835 	.word	0x0800f835
 800dde8:	0800f82c 	.word	0x0800f82c
 800ddec:	0800f809 	.word	0x0800f809
 800ddf0:	3ff80000 	.word	0x3ff80000
 800ddf4:	0800f940 	.word	0x0800f940
 800ddf8:	0800f8a8 	.word	0x0800f8a8
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	9309      	str	r3, [sp, #36]	; 0x24
 800de00:	e7d7      	b.n	800ddb2 <_dtoa_r+0x2c2>
 800de02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de04:	9301      	str	r3, [sp, #4]
 800de06:	9304      	str	r3, [sp, #16]
 800de08:	e7ba      	b.n	800dd80 <_dtoa_r+0x290>
 800de0a:	3101      	adds	r1, #1
 800de0c:	0052      	lsls	r2, r2, #1
 800de0e:	e7ba      	b.n	800dd86 <_dtoa_r+0x296>
 800de10:	69e3      	ldr	r3, [r4, #28]
 800de12:	9a00      	ldr	r2, [sp, #0]
 800de14:	601a      	str	r2, [r3, #0]
 800de16:	9b04      	ldr	r3, [sp, #16]
 800de18:	2b0e      	cmp	r3, #14
 800de1a:	f200 80a8 	bhi.w	800df6e <_dtoa_r+0x47e>
 800de1e:	2d00      	cmp	r5, #0
 800de20:	f000 80a5 	beq.w	800df6e <_dtoa_r+0x47e>
 800de24:	f1bb 0f00 	cmp.w	fp, #0
 800de28:	dd38      	ble.n	800de9c <_dtoa_r+0x3ac>
 800de2a:	4bc0      	ldr	r3, [pc, #768]	; (800e12c <_dtoa_r+0x63c>)
 800de2c:	f00b 020f 	and.w	r2, fp, #15
 800de30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800de38:	e9d3 6700 	ldrd	r6, r7, [r3]
 800de3c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800de40:	d019      	beq.n	800de76 <_dtoa_r+0x386>
 800de42:	4bbb      	ldr	r3, [pc, #748]	; (800e130 <_dtoa_r+0x640>)
 800de44:	ec51 0b18 	vmov	r0, r1, d8
 800de48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800de4c:	f7f2 fd06 	bl	800085c <__aeabi_ddiv>
 800de50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de54:	f008 080f 	and.w	r8, r8, #15
 800de58:	2503      	movs	r5, #3
 800de5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e130 <_dtoa_r+0x640>
 800de5e:	f1b8 0f00 	cmp.w	r8, #0
 800de62:	d10a      	bne.n	800de7a <_dtoa_r+0x38a>
 800de64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de68:	4632      	mov	r2, r6
 800de6a:	463b      	mov	r3, r7
 800de6c:	f7f2 fcf6 	bl	800085c <__aeabi_ddiv>
 800de70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de74:	e02b      	b.n	800dece <_dtoa_r+0x3de>
 800de76:	2502      	movs	r5, #2
 800de78:	e7ef      	b.n	800de5a <_dtoa_r+0x36a>
 800de7a:	f018 0f01 	tst.w	r8, #1
 800de7e:	d008      	beq.n	800de92 <_dtoa_r+0x3a2>
 800de80:	4630      	mov	r0, r6
 800de82:	4639      	mov	r1, r7
 800de84:	e9d9 2300 	ldrd	r2, r3, [r9]
 800de88:	f7f2 fbbe 	bl	8000608 <__aeabi_dmul>
 800de8c:	3501      	adds	r5, #1
 800de8e:	4606      	mov	r6, r0
 800de90:	460f      	mov	r7, r1
 800de92:	ea4f 0868 	mov.w	r8, r8, asr #1
 800de96:	f109 0908 	add.w	r9, r9, #8
 800de9a:	e7e0      	b.n	800de5e <_dtoa_r+0x36e>
 800de9c:	f000 809f 	beq.w	800dfde <_dtoa_r+0x4ee>
 800dea0:	f1cb 0600 	rsb	r6, fp, #0
 800dea4:	4ba1      	ldr	r3, [pc, #644]	; (800e12c <_dtoa_r+0x63c>)
 800dea6:	4fa2      	ldr	r7, [pc, #648]	; (800e130 <_dtoa_r+0x640>)
 800dea8:	f006 020f 	and.w	r2, r6, #15
 800deac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800deb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb4:	ec51 0b18 	vmov	r0, r1, d8
 800deb8:	f7f2 fba6 	bl	8000608 <__aeabi_dmul>
 800debc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dec0:	1136      	asrs	r6, r6, #4
 800dec2:	2300      	movs	r3, #0
 800dec4:	2502      	movs	r5, #2
 800dec6:	2e00      	cmp	r6, #0
 800dec8:	d17e      	bne.n	800dfc8 <_dtoa_r+0x4d8>
 800deca:	2b00      	cmp	r3, #0
 800decc:	d1d0      	bne.n	800de70 <_dtoa_r+0x380>
 800dece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ded0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	f000 8084 	beq.w	800dfe2 <_dtoa_r+0x4f2>
 800deda:	4b96      	ldr	r3, [pc, #600]	; (800e134 <_dtoa_r+0x644>)
 800dedc:	2200      	movs	r2, #0
 800dede:	4640      	mov	r0, r8
 800dee0:	4649      	mov	r1, r9
 800dee2:	f7f2 fe03 	bl	8000aec <__aeabi_dcmplt>
 800dee6:	2800      	cmp	r0, #0
 800dee8:	d07b      	beq.n	800dfe2 <_dtoa_r+0x4f2>
 800deea:	9b04      	ldr	r3, [sp, #16]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d078      	beq.n	800dfe2 <_dtoa_r+0x4f2>
 800def0:	9b01      	ldr	r3, [sp, #4]
 800def2:	2b00      	cmp	r3, #0
 800def4:	dd39      	ble.n	800df6a <_dtoa_r+0x47a>
 800def6:	4b90      	ldr	r3, [pc, #576]	; (800e138 <_dtoa_r+0x648>)
 800def8:	2200      	movs	r2, #0
 800defa:	4640      	mov	r0, r8
 800defc:	4649      	mov	r1, r9
 800defe:	f7f2 fb83 	bl	8000608 <__aeabi_dmul>
 800df02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df06:	9e01      	ldr	r6, [sp, #4]
 800df08:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800df0c:	3501      	adds	r5, #1
 800df0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800df12:	4628      	mov	r0, r5
 800df14:	f7f2 fb0e 	bl	8000534 <__aeabi_i2d>
 800df18:	4642      	mov	r2, r8
 800df1a:	464b      	mov	r3, r9
 800df1c:	f7f2 fb74 	bl	8000608 <__aeabi_dmul>
 800df20:	4b86      	ldr	r3, [pc, #536]	; (800e13c <_dtoa_r+0x64c>)
 800df22:	2200      	movs	r2, #0
 800df24:	f7f2 f9ba 	bl	800029c <__adddf3>
 800df28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800df2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df30:	9303      	str	r3, [sp, #12]
 800df32:	2e00      	cmp	r6, #0
 800df34:	d158      	bne.n	800dfe8 <_dtoa_r+0x4f8>
 800df36:	4b82      	ldr	r3, [pc, #520]	; (800e140 <_dtoa_r+0x650>)
 800df38:	2200      	movs	r2, #0
 800df3a:	4640      	mov	r0, r8
 800df3c:	4649      	mov	r1, r9
 800df3e:	f7f2 f9ab 	bl	8000298 <__aeabi_dsub>
 800df42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df46:	4680      	mov	r8, r0
 800df48:	4689      	mov	r9, r1
 800df4a:	f7f2 fded 	bl	8000b28 <__aeabi_dcmpgt>
 800df4e:	2800      	cmp	r0, #0
 800df50:	f040 8296 	bne.w	800e480 <_dtoa_r+0x990>
 800df54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800df58:	4640      	mov	r0, r8
 800df5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df5e:	4649      	mov	r1, r9
 800df60:	f7f2 fdc4 	bl	8000aec <__aeabi_dcmplt>
 800df64:	2800      	cmp	r0, #0
 800df66:	f040 8289 	bne.w	800e47c <_dtoa_r+0x98c>
 800df6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800df6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800df70:	2b00      	cmp	r3, #0
 800df72:	f2c0 814e 	blt.w	800e212 <_dtoa_r+0x722>
 800df76:	f1bb 0f0e 	cmp.w	fp, #14
 800df7a:	f300 814a 	bgt.w	800e212 <_dtoa_r+0x722>
 800df7e:	4b6b      	ldr	r3, [pc, #428]	; (800e12c <_dtoa_r+0x63c>)
 800df80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800df84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800df88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	f280 80dc 	bge.w	800e148 <_dtoa_r+0x658>
 800df90:	9b04      	ldr	r3, [sp, #16]
 800df92:	2b00      	cmp	r3, #0
 800df94:	f300 80d8 	bgt.w	800e148 <_dtoa_r+0x658>
 800df98:	f040 826f 	bne.w	800e47a <_dtoa_r+0x98a>
 800df9c:	4b68      	ldr	r3, [pc, #416]	; (800e140 <_dtoa_r+0x650>)
 800df9e:	2200      	movs	r2, #0
 800dfa0:	4640      	mov	r0, r8
 800dfa2:	4649      	mov	r1, r9
 800dfa4:	f7f2 fb30 	bl	8000608 <__aeabi_dmul>
 800dfa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dfac:	f7f2 fdb2 	bl	8000b14 <__aeabi_dcmpge>
 800dfb0:	9e04      	ldr	r6, [sp, #16]
 800dfb2:	4637      	mov	r7, r6
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	f040 8245 	bne.w	800e444 <_dtoa_r+0x954>
 800dfba:	9d00      	ldr	r5, [sp, #0]
 800dfbc:	2331      	movs	r3, #49	; 0x31
 800dfbe:	f805 3b01 	strb.w	r3, [r5], #1
 800dfc2:	f10b 0b01 	add.w	fp, fp, #1
 800dfc6:	e241      	b.n	800e44c <_dtoa_r+0x95c>
 800dfc8:	07f2      	lsls	r2, r6, #31
 800dfca:	d505      	bpl.n	800dfd8 <_dtoa_r+0x4e8>
 800dfcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfd0:	f7f2 fb1a 	bl	8000608 <__aeabi_dmul>
 800dfd4:	3501      	adds	r5, #1
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	1076      	asrs	r6, r6, #1
 800dfda:	3708      	adds	r7, #8
 800dfdc:	e773      	b.n	800dec6 <_dtoa_r+0x3d6>
 800dfde:	2502      	movs	r5, #2
 800dfe0:	e775      	b.n	800dece <_dtoa_r+0x3de>
 800dfe2:	9e04      	ldr	r6, [sp, #16]
 800dfe4:	465f      	mov	r7, fp
 800dfe6:	e792      	b.n	800df0e <_dtoa_r+0x41e>
 800dfe8:	9900      	ldr	r1, [sp, #0]
 800dfea:	4b50      	ldr	r3, [pc, #320]	; (800e12c <_dtoa_r+0x63c>)
 800dfec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dff0:	4431      	add	r1, r6
 800dff2:	9102      	str	r1, [sp, #8]
 800dff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dff6:	eeb0 9a47 	vmov.f32	s18, s14
 800dffa:	eef0 9a67 	vmov.f32	s19, s15
 800dffe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e002:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e006:	2900      	cmp	r1, #0
 800e008:	d044      	beq.n	800e094 <_dtoa_r+0x5a4>
 800e00a:	494e      	ldr	r1, [pc, #312]	; (800e144 <_dtoa_r+0x654>)
 800e00c:	2000      	movs	r0, #0
 800e00e:	f7f2 fc25 	bl	800085c <__aeabi_ddiv>
 800e012:	ec53 2b19 	vmov	r2, r3, d9
 800e016:	f7f2 f93f 	bl	8000298 <__aeabi_dsub>
 800e01a:	9d00      	ldr	r5, [sp, #0]
 800e01c:	ec41 0b19 	vmov	d9, r0, r1
 800e020:	4649      	mov	r1, r9
 800e022:	4640      	mov	r0, r8
 800e024:	f7f2 fda0 	bl	8000b68 <__aeabi_d2iz>
 800e028:	4606      	mov	r6, r0
 800e02a:	f7f2 fa83 	bl	8000534 <__aeabi_i2d>
 800e02e:	4602      	mov	r2, r0
 800e030:	460b      	mov	r3, r1
 800e032:	4640      	mov	r0, r8
 800e034:	4649      	mov	r1, r9
 800e036:	f7f2 f92f 	bl	8000298 <__aeabi_dsub>
 800e03a:	3630      	adds	r6, #48	; 0x30
 800e03c:	f805 6b01 	strb.w	r6, [r5], #1
 800e040:	ec53 2b19 	vmov	r2, r3, d9
 800e044:	4680      	mov	r8, r0
 800e046:	4689      	mov	r9, r1
 800e048:	f7f2 fd50 	bl	8000aec <__aeabi_dcmplt>
 800e04c:	2800      	cmp	r0, #0
 800e04e:	d164      	bne.n	800e11a <_dtoa_r+0x62a>
 800e050:	4642      	mov	r2, r8
 800e052:	464b      	mov	r3, r9
 800e054:	4937      	ldr	r1, [pc, #220]	; (800e134 <_dtoa_r+0x644>)
 800e056:	2000      	movs	r0, #0
 800e058:	f7f2 f91e 	bl	8000298 <__aeabi_dsub>
 800e05c:	ec53 2b19 	vmov	r2, r3, d9
 800e060:	f7f2 fd44 	bl	8000aec <__aeabi_dcmplt>
 800e064:	2800      	cmp	r0, #0
 800e066:	f040 80b6 	bne.w	800e1d6 <_dtoa_r+0x6e6>
 800e06a:	9b02      	ldr	r3, [sp, #8]
 800e06c:	429d      	cmp	r5, r3
 800e06e:	f43f af7c 	beq.w	800df6a <_dtoa_r+0x47a>
 800e072:	4b31      	ldr	r3, [pc, #196]	; (800e138 <_dtoa_r+0x648>)
 800e074:	ec51 0b19 	vmov	r0, r1, d9
 800e078:	2200      	movs	r2, #0
 800e07a:	f7f2 fac5 	bl	8000608 <__aeabi_dmul>
 800e07e:	4b2e      	ldr	r3, [pc, #184]	; (800e138 <_dtoa_r+0x648>)
 800e080:	ec41 0b19 	vmov	d9, r0, r1
 800e084:	2200      	movs	r2, #0
 800e086:	4640      	mov	r0, r8
 800e088:	4649      	mov	r1, r9
 800e08a:	f7f2 fabd 	bl	8000608 <__aeabi_dmul>
 800e08e:	4680      	mov	r8, r0
 800e090:	4689      	mov	r9, r1
 800e092:	e7c5      	b.n	800e020 <_dtoa_r+0x530>
 800e094:	ec51 0b17 	vmov	r0, r1, d7
 800e098:	f7f2 fab6 	bl	8000608 <__aeabi_dmul>
 800e09c:	9b02      	ldr	r3, [sp, #8]
 800e09e:	9d00      	ldr	r5, [sp, #0]
 800e0a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0a2:	ec41 0b19 	vmov	d9, r0, r1
 800e0a6:	4649      	mov	r1, r9
 800e0a8:	4640      	mov	r0, r8
 800e0aa:	f7f2 fd5d 	bl	8000b68 <__aeabi_d2iz>
 800e0ae:	4606      	mov	r6, r0
 800e0b0:	f7f2 fa40 	bl	8000534 <__aeabi_i2d>
 800e0b4:	3630      	adds	r6, #48	; 0x30
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	460b      	mov	r3, r1
 800e0ba:	4640      	mov	r0, r8
 800e0bc:	4649      	mov	r1, r9
 800e0be:	f7f2 f8eb 	bl	8000298 <__aeabi_dsub>
 800e0c2:	f805 6b01 	strb.w	r6, [r5], #1
 800e0c6:	9b02      	ldr	r3, [sp, #8]
 800e0c8:	429d      	cmp	r5, r3
 800e0ca:	4680      	mov	r8, r0
 800e0cc:	4689      	mov	r9, r1
 800e0ce:	f04f 0200 	mov.w	r2, #0
 800e0d2:	d124      	bne.n	800e11e <_dtoa_r+0x62e>
 800e0d4:	4b1b      	ldr	r3, [pc, #108]	; (800e144 <_dtoa_r+0x654>)
 800e0d6:	ec51 0b19 	vmov	r0, r1, d9
 800e0da:	f7f2 f8df 	bl	800029c <__adddf3>
 800e0de:	4602      	mov	r2, r0
 800e0e0:	460b      	mov	r3, r1
 800e0e2:	4640      	mov	r0, r8
 800e0e4:	4649      	mov	r1, r9
 800e0e6:	f7f2 fd1f 	bl	8000b28 <__aeabi_dcmpgt>
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	d173      	bne.n	800e1d6 <_dtoa_r+0x6e6>
 800e0ee:	ec53 2b19 	vmov	r2, r3, d9
 800e0f2:	4914      	ldr	r1, [pc, #80]	; (800e144 <_dtoa_r+0x654>)
 800e0f4:	2000      	movs	r0, #0
 800e0f6:	f7f2 f8cf 	bl	8000298 <__aeabi_dsub>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	4640      	mov	r0, r8
 800e100:	4649      	mov	r1, r9
 800e102:	f7f2 fcf3 	bl	8000aec <__aeabi_dcmplt>
 800e106:	2800      	cmp	r0, #0
 800e108:	f43f af2f 	beq.w	800df6a <_dtoa_r+0x47a>
 800e10c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e10e:	1e6b      	subs	r3, r5, #1
 800e110:	930f      	str	r3, [sp, #60]	; 0x3c
 800e112:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e116:	2b30      	cmp	r3, #48	; 0x30
 800e118:	d0f8      	beq.n	800e10c <_dtoa_r+0x61c>
 800e11a:	46bb      	mov	fp, r7
 800e11c:	e04a      	b.n	800e1b4 <_dtoa_r+0x6c4>
 800e11e:	4b06      	ldr	r3, [pc, #24]	; (800e138 <_dtoa_r+0x648>)
 800e120:	f7f2 fa72 	bl	8000608 <__aeabi_dmul>
 800e124:	4680      	mov	r8, r0
 800e126:	4689      	mov	r9, r1
 800e128:	e7bd      	b.n	800e0a6 <_dtoa_r+0x5b6>
 800e12a:	bf00      	nop
 800e12c:	0800f940 	.word	0x0800f940
 800e130:	0800f918 	.word	0x0800f918
 800e134:	3ff00000 	.word	0x3ff00000
 800e138:	40240000 	.word	0x40240000
 800e13c:	401c0000 	.word	0x401c0000
 800e140:	40140000 	.word	0x40140000
 800e144:	3fe00000 	.word	0x3fe00000
 800e148:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e14c:	9d00      	ldr	r5, [sp, #0]
 800e14e:	4642      	mov	r2, r8
 800e150:	464b      	mov	r3, r9
 800e152:	4630      	mov	r0, r6
 800e154:	4639      	mov	r1, r7
 800e156:	f7f2 fb81 	bl	800085c <__aeabi_ddiv>
 800e15a:	f7f2 fd05 	bl	8000b68 <__aeabi_d2iz>
 800e15e:	9001      	str	r0, [sp, #4]
 800e160:	f7f2 f9e8 	bl	8000534 <__aeabi_i2d>
 800e164:	4642      	mov	r2, r8
 800e166:	464b      	mov	r3, r9
 800e168:	f7f2 fa4e 	bl	8000608 <__aeabi_dmul>
 800e16c:	4602      	mov	r2, r0
 800e16e:	460b      	mov	r3, r1
 800e170:	4630      	mov	r0, r6
 800e172:	4639      	mov	r1, r7
 800e174:	f7f2 f890 	bl	8000298 <__aeabi_dsub>
 800e178:	9e01      	ldr	r6, [sp, #4]
 800e17a:	9f04      	ldr	r7, [sp, #16]
 800e17c:	3630      	adds	r6, #48	; 0x30
 800e17e:	f805 6b01 	strb.w	r6, [r5], #1
 800e182:	9e00      	ldr	r6, [sp, #0]
 800e184:	1bae      	subs	r6, r5, r6
 800e186:	42b7      	cmp	r7, r6
 800e188:	4602      	mov	r2, r0
 800e18a:	460b      	mov	r3, r1
 800e18c:	d134      	bne.n	800e1f8 <_dtoa_r+0x708>
 800e18e:	f7f2 f885 	bl	800029c <__adddf3>
 800e192:	4642      	mov	r2, r8
 800e194:	464b      	mov	r3, r9
 800e196:	4606      	mov	r6, r0
 800e198:	460f      	mov	r7, r1
 800e19a:	f7f2 fcc5 	bl	8000b28 <__aeabi_dcmpgt>
 800e19e:	b9c8      	cbnz	r0, 800e1d4 <_dtoa_r+0x6e4>
 800e1a0:	4642      	mov	r2, r8
 800e1a2:	464b      	mov	r3, r9
 800e1a4:	4630      	mov	r0, r6
 800e1a6:	4639      	mov	r1, r7
 800e1a8:	f7f2 fc96 	bl	8000ad8 <__aeabi_dcmpeq>
 800e1ac:	b110      	cbz	r0, 800e1b4 <_dtoa_r+0x6c4>
 800e1ae:	9b01      	ldr	r3, [sp, #4]
 800e1b0:	07db      	lsls	r3, r3, #31
 800e1b2:	d40f      	bmi.n	800e1d4 <_dtoa_r+0x6e4>
 800e1b4:	4651      	mov	r1, sl
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	f000 fbcc 	bl	800e954 <_Bfree>
 800e1bc:	2300      	movs	r3, #0
 800e1be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e1c0:	702b      	strb	r3, [r5, #0]
 800e1c2:	f10b 0301 	add.w	r3, fp, #1
 800e1c6:	6013      	str	r3, [r2, #0]
 800e1c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	f43f ace2 	beq.w	800db94 <_dtoa_r+0xa4>
 800e1d0:	601d      	str	r5, [r3, #0]
 800e1d2:	e4df      	b.n	800db94 <_dtoa_r+0xa4>
 800e1d4:	465f      	mov	r7, fp
 800e1d6:	462b      	mov	r3, r5
 800e1d8:	461d      	mov	r5, r3
 800e1da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e1de:	2a39      	cmp	r2, #57	; 0x39
 800e1e0:	d106      	bne.n	800e1f0 <_dtoa_r+0x700>
 800e1e2:	9a00      	ldr	r2, [sp, #0]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d1f7      	bne.n	800e1d8 <_dtoa_r+0x6e8>
 800e1e8:	9900      	ldr	r1, [sp, #0]
 800e1ea:	2230      	movs	r2, #48	; 0x30
 800e1ec:	3701      	adds	r7, #1
 800e1ee:	700a      	strb	r2, [r1, #0]
 800e1f0:	781a      	ldrb	r2, [r3, #0]
 800e1f2:	3201      	adds	r2, #1
 800e1f4:	701a      	strb	r2, [r3, #0]
 800e1f6:	e790      	b.n	800e11a <_dtoa_r+0x62a>
 800e1f8:	4ba3      	ldr	r3, [pc, #652]	; (800e488 <_dtoa_r+0x998>)
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	f7f2 fa04 	bl	8000608 <__aeabi_dmul>
 800e200:	2200      	movs	r2, #0
 800e202:	2300      	movs	r3, #0
 800e204:	4606      	mov	r6, r0
 800e206:	460f      	mov	r7, r1
 800e208:	f7f2 fc66 	bl	8000ad8 <__aeabi_dcmpeq>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d09e      	beq.n	800e14e <_dtoa_r+0x65e>
 800e210:	e7d0      	b.n	800e1b4 <_dtoa_r+0x6c4>
 800e212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e214:	2a00      	cmp	r2, #0
 800e216:	f000 80ca 	beq.w	800e3ae <_dtoa_r+0x8be>
 800e21a:	9a07      	ldr	r2, [sp, #28]
 800e21c:	2a01      	cmp	r2, #1
 800e21e:	f300 80ad 	bgt.w	800e37c <_dtoa_r+0x88c>
 800e222:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e224:	2a00      	cmp	r2, #0
 800e226:	f000 80a5 	beq.w	800e374 <_dtoa_r+0x884>
 800e22a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e22e:	9e08      	ldr	r6, [sp, #32]
 800e230:	9d05      	ldr	r5, [sp, #20]
 800e232:	9a05      	ldr	r2, [sp, #20]
 800e234:	441a      	add	r2, r3
 800e236:	9205      	str	r2, [sp, #20]
 800e238:	9a06      	ldr	r2, [sp, #24]
 800e23a:	2101      	movs	r1, #1
 800e23c:	441a      	add	r2, r3
 800e23e:	4620      	mov	r0, r4
 800e240:	9206      	str	r2, [sp, #24]
 800e242:	f000 fc3d 	bl	800eac0 <__i2b>
 800e246:	4607      	mov	r7, r0
 800e248:	b165      	cbz	r5, 800e264 <_dtoa_r+0x774>
 800e24a:	9b06      	ldr	r3, [sp, #24]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	dd09      	ble.n	800e264 <_dtoa_r+0x774>
 800e250:	42ab      	cmp	r3, r5
 800e252:	9a05      	ldr	r2, [sp, #20]
 800e254:	bfa8      	it	ge
 800e256:	462b      	movge	r3, r5
 800e258:	1ad2      	subs	r2, r2, r3
 800e25a:	9205      	str	r2, [sp, #20]
 800e25c:	9a06      	ldr	r2, [sp, #24]
 800e25e:	1aed      	subs	r5, r5, r3
 800e260:	1ad3      	subs	r3, r2, r3
 800e262:	9306      	str	r3, [sp, #24]
 800e264:	9b08      	ldr	r3, [sp, #32]
 800e266:	b1f3      	cbz	r3, 800e2a6 <_dtoa_r+0x7b6>
 800e268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	f000 80a3 	beq.w	800e3b6 <_dtoa_r+0x8c6>
 800e270:	2e00      	cmp	r6, #0
 800e272:	dd10      	ble.n	800e296 <_dtoa_r+0x7a6>
 800e274:	4639      	mov	r1, r7
 800e276:	4632      	mov	r2, r6
 800e278:	4620      	mov	r0, r4
 800e27a:	f000 fce1 	bl	800ec40 <__pow5mult>
 800e27e:	4652      	mov	r2, sl
 800e280:	4601      	mov	r1, r0
 800e282:	4607      	mov	r7, r0
 800e284:	4620      	mov	r0, r4
 800e286:	f000 fc31 	bl	800eaec <__multiply>
 800e28a:	4651      	mov	r1, sl
 800e28c:	4680      	mov	r8, r0
 800e28e:	4620      	mov	r0, r4
 800e290:	f000 fb60 	bl	800e954 <_Bfree>
 800e294:	46c2      	mov	sl, r8
 800e296:	9b08      	ldr	r3, [sp, #32]
 800e298:	1b9a      	subs	r2, r3, r6
 800e29a:	d004      	beq.n	800e2a6 <_dtoa_r+0x7b6>
 800e29c:	4651      	mov	r1, sl
 800e29e:	4620      	mov	r0, r4
 800e2a0:	f000 fcce 	bl	800ec40 <__pow5mult>
 800e2a4:	4682      	mov	sl, r0
 800e2a6:	2101      	movs	r1, #1
 800e2a8:	4620      	mov	r0, r4
 800e2aa:	f000 fc09 	bl	800eac0 <__i2b>
 800e2ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	4606      	mov	r6, r0
 800e2b4:	f340 8081 	ble.w	800e3ba <_dtoa_r+0x8ca>
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	4601      	mov	r1, r0
 800e2bc:	4620      	mov	r0, r4
 800e2be:	f000 fcbf 	bl	800ec40 <__pow5mult>
 800e2c2:	9b07      	ldr	r3, [sp, #28]
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	4606      	mov	r6, r0
 800e2c8:	dd7a      	ble.n	800e3c0 <_dtoa_r+0x8d0>
 800e2ca:	f04f 0800 	mov.w	r8, #0
 800e2ce:	6933      	ldr	r3, [r6, #16]
 800e2d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e2d4:	6918      	ldr	r0, [r3, #16]
 800e2d6:	f000 fba5 	bl	800ea24 <__hi0bits>
 800e2da:	f1c0 0020 	rsb	r0, r0, #32
 800e2de:	9b06      	ldr	r3, [sp, #24]
 800e2e0:	4418      	add	r0, r3
 800e2e2:	f010 001f 	ands.w	r0, r0, #31
 800e2e6:	f000 8094 	beq.w	800e412 <_dtoa_r+0x922>
 800e2ea:	f1c0 0320 	rsb	r3, r0, #32
 800e2ee:	2b04      	cmp	r3, #4
 800e2f0:	f340 8085 	ble.w	800e3fe <_dtoa_r+0x90e>
 800e2f4:	9b05      	ldr	r3, [sp, #20]
 800e2f6:	f1c0 001c 	rsb	r0, r0, #28
 800e2fa:	4403      	add	r3, r0
 800e2fc:	9305      	str	r3, [sp, #20]
 800e2fe:	9b06      	ldr	r3, [sp, #24]
 800e300:	4403      	add	r3, r0
 800e302:	4405      	add	r5, r0
 800e304:	9306      	str	r3, [sp, #24]
 800e306:	9b05      	ldr	r3, [sp, #20]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	dd05      	ble.n	800e318 <_dtoa_r+0x828>
 800e30c:	4651      	mov	r1, sl
 800e30e:	461a      	mov	r2, r3
 800e310:	4620      	mov	r0, r4
 800e312:	f000 fcef 	bl	800ecf4 <__lshift>
 800e316:	4682      	mov	sl, r0
 800e318:	9b06      	ldr	r3, [sp, #24]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	dd05      	ble.n	800e32a <_dtoa_r+0x83a>
 800e31e:	4631      	mov	r1, r6
 800e320:	461a      	mov	r2, r3
 800e322:	4620      	mov	r0, r4
 800e324:	f000 fce6 	bl	800ecf4 <__lshift>
 800e328:	4606      	mov	r6, r0
 800e32a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d072      	beq.n	800e416 <_dtoa_r+0x926>
 800e330:	4631      	mov	r1, r6
 800e332:	4650      	mov	r0, sl
 800e334:	f000 fd4a 	bl	800edcc <__mcmp>
 800e338:	2800      	cmp	r0, #0
 800e33a:	da6c      	bge.n	800e416 <_dtoa_r+0x926>
 800e33c:	2300      	movs	r3, #0
 800e33e:	4651      	mov	r1, sl
 800e340:	220a      	movs	r2, #10
 800e342:	4620      	mov	r0, r4
 800e344:	f000 fb28 	bl	800e998 <__multadd>
 800e348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e34a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e34e:	4682      	mov	sl, r0
 800e350:	2b00      	cmp	r3, #0
 800e352:	f000 81b0 	beq.w	800e6b6 <_dtoa_r+0xbc6>
 800e356:	2300      	movs	r3, #0
 800e358:	4639      	mov	r1, r7
 800e35a:	220a      	movs	r2, #10
 800e35c:	4620      	mov	r0, r4
 800e35e:	f000 fb1b 	bl	800e998 <__multadd>
 800e362:	9b01      	ldr	r3, [sp, #4]
 800e364:	2b00      	cmp	r3, #0
 800e366:	4607      	mov	r7, r0
 800e368:	f300 8096 	bgt.w	800e498 <_dtoa_r+0x9a8>
 800e36c:	9b07      	ldr	r3, [sp, #28]
 800e36e:	2b02      	cmp	r3, #2
 800e370:	dc59      	bgt.n	800e426 <_dtoa_r+0x936>
 800e372:	e091      	b.n	800e498 <_dtoa_r+0x9a8>
 800e374:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e376:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e37a:	e758      	b.n	800e22e <_dtoa_r+0x73e>
 800e37c:	9b04      	ldr	r3, [sp, #16]
 800e37e:	1e5e      	subs	r6, r3, #1
 800e380:	9b08      	ldr	r3, [sp, #32]
 800e382:	42b3      	cmp	r3, r6
 800e384:	bfbf      	itttt	lt
 800e386:	9b08      	ldrlt	r3, [sp, #32]
 800e388:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e38a:	9608      	strlt	r6, [sp, #32]
 800e38c:	1af3      	sublt	r3, r6, r3
 800e38e:	bfb4      	ite	lt
 800e390:	18d2      	addlt	r2, r2, r3
 800e392:	1b9e      	subge	r6, r3, r6
 800e394:	9b04      	ldr	r3, [sp, #16]
 800e396:	bfbc      	itt	lt
 800e398:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e39a:	2600      	movlt	r6, #0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	bfb7      	itett	lt
 800e3a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e3a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e3a8:	1a9d      	sublt	r5, r3, r2
 800e3aa:	2300      	movlt	r3, #0
 800e3ac:	e741      	b.n	800e232 <_dtoa_r+0x742>
 800e3ae:	9e08      	ldr	r6, [sp, #32]
 800e3b0:	9d05      	ldr	r5, [sp, #20]
 800e3b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e3b4:	e748      	b.n	800e248 <_dtoa_r+0x758>
 800e3b6:	9a08      	ldr	r2, [sp, #32]
 800e3b8:	e770      	b.n	800e29c <_dtoa_r+0x7ac>
 800e3ba:	9b07      	ldr	r3, [sp, #28]
 800e3bc:	2b01      	cmp	r3, #1
 800e3be:	dc19      	bgt.n	800e3f4 <_dtoa_r+0x904>
 800e3c0:	9b02      	ldr	r3, [sp, #8]
 800e3c2:	b9bb      	cbnz	r3, 800e3f4 <_dtoa_r+0x904>
 800e3c4:	9b03      	ldr	r3, [sp, #12]
 800e3c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3ca:	b99b      	cbnz	r3, 800e3f4 <_dtoa_r+0x904>
 800e3cc:	9b03      	ldr	r3, [sp, #12]
 800e3ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e3d2:	0d1b      	lsrs	r3, r3, #20
 800e3d4:	051b      	lsls	r3, r3, #20
 800e3d6:	b183      	cbz	r3, 800e3fa <_dtoa_r+0x90a>
 800e3d8:	9b05      	ldr	r3, [sp, #20]
 800e3da:	3301      	adds	r3, #1
 800e3dc:	9305      	str	r3, [sp, #20]
 800e3de:	9b06      	ldr	r3, [sp, #24]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	9306      	str	r3, [sp, #24]
 800e3e4:	f04f 0801 	mov.w	r8, #1
 800e3e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	f47f af6f 	bne.w	800e2ce <_dtoa_r+0x7de>
 800e3f0:	2001      	movs	r0, #1
 800e3f2:	e774      	b.n	800e2de <_dtoa_r+0x7ee>
 800e3f4:	f04f 0800 	mov.w	r8, #0
 800e3f8:	e7f6      	b.n	800e3e8 <_dtoa_r+0x8f8>
 800e3fa:	4698      	mov	r8, r3
 800e3fc:	e7f4      	b.n	800e3e8 <_dtoa_r+0x8f8>
 800e3fe:	d082      	beq.n	800e306 <_dtoa_r+0x816>
 800e400:	9a05      	ldr	r2, [sp, #20]
 800e402:	331c      	adds	r3, #28
 800e404:	441a      	add	r2, r3
 800e406:	9205      	str	r2, [sp, #20]
 800e408:	9a06      	ldr	r2, [sp, #24]
 800e40a:	441a      	add	r2, r3
 800e40c:	441d      	add	r5, r3
 800e40e:	9206      	str	r2, [sp, #24]
 800e410:	e779      	b.n	800e306 <_dtoa_r+0x816>
 800e412:	4603      	mov	r3, r0
 800e414:	e7f4      	b.n	800e400 <_dtoa_r+0x910>
 800e416:	9b04      	ldr	r3, [sp, #16]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	dc37      	bgt.n	800e48c <_dtoa_r+0x99c>
 800e41c:	9b07      	ldr	r3, [sp, #28]
 800e41e:	2b02      	cmp	r3, #2
 800e420:	dd34      	ble.n	800e48c <_dtoa_r+0x99c>
 800e422:	9b04      	ldr	r3, [sp, #16]
 800e424:	9301      	str	r3, [sp, #4]
 800e426:	9b01      	ldr	r3, [sp, #4]
 800e428:	b963      	cbnz	r3, 800e444 <_dtoa_r+0x954>
 800e42a:	4631      	mov	r1, r6
 800e42c:	2205      	movs	r2, #5
 800e42e:	4620      	mov	r0, r4
 800e430:	f000 fab2 	bl	800e998 <__multadd>
 800e434:	4601      	mov	r1, r0
 800e436:	4606      	mov	r6, r0
 800e438:	4650      	mov	r0, sl
 800e43a:	f000 fcc7 	bl	800edcc <__mcmp>
 800e43e:	2800      	cmp	r0, #0
 800e440:	f73f adbb 	bgt.w	800dfba <_dtoa_r+0x4ca>
 800e444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e446:	9d00      	ldr	r5, [sp, #0]
 800e448:	ea6f 0b03 	mvn.w	fp, r3
 800e44c:	f04f 0800 	mov.w	r8, #0
 800e450:	4631      	mov	r1, r6
 800e452:	4620      	mov	r0, r4
 800e454:	f000 fa7e 	bl	800e954 <_Bfree>
 800e458:	2f00      	cmp	r7, #0
 800e45a:	f43f aeab 	beq.w	800e1b4 <_dtoa_r+0x6c4>
 800e45e:	f1b8 0f00 	cmp.w	r8, #0
 800e462:	d005      	beq.n	800e470 <_dtoa_r+0x980>
 800e464:	45b8      	cmp	r8, r7
 800e466:	d003      	beq.n	800e470 <_dtoa_r+0x980>
 800e468:	4641      	mov	r1, r8
 800e46a:	4620      	mov	r0, r4
 800e46c:	f000 fa72 	bl	800e954 <_Bfree>
 800e470:	4639      	mov	r1, r7
 800e472:	4620      	mov	r0, r4
 800e474:	f000 fa6e 	bl	800e954 <_Bfree>
 800e478:	e69c      	b.n	800e1b4 <_dtoa_r+0x6c4>
 800e47a:	2600      	movs	r6, #0
 800e47c:	4637      	mov	r7, r6
 800e47e:	e7e1      	b.n	800e444 <_dtoa_r+0x954>
 800e480:	46bb      	mov	fp, r7
 800e482:	4637      	mov	r7, r6
 800e484:	e599      	b.n	800dfba <_dtoa_r+0x4ca>
 800e486:	bf00      	nop
 800e488:	40240000 	.word	0x40240000
 800e48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e48e:	2b00      	cmp	r3, #0
 800e490:	f000 80c8 	beq.w	800e624 <_dtoa_r+0xb34>
 800e494:	9b04      	ldr	r3, [sp, #16]
 800e496:	9301      	str	r3, [sp, #4]
 800e498:	2d00      	cmp	r5, #0
 800e49a:	dd05      	ble.n	800e4a8 <_dtoa_r+0x9b8>
 800e49c:	4639      	mov	r1, r7
 800e49e:	462a      	mov	r2, r5
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	f000 fc27 	bl	800ecf4 <__lshift>
 800e4a6:	4607      	mov	r7, r0
 800e4a8:	f1b8 0f00 	cmp.w	r8, #0
 800e4ac:	d05b      	beq.n	800e566 <_dtoa_r+0xa76>
 800e4ae:	6879      	ldr	r1, [r7, #4]
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	f000 fa0f 	bl	800e8d4 <_Balloc>
 800e4b6:	4605      	mov	r5, r0
 800e4b8:	b928      	cbnz	r0, 800e4c6 <_dtoa_r+0x9d6>
 800e4ba:	4b83      	ldr	r3, [pc, #524]	; (800e6c8 <_dtoa_r+0xbd8>)
 800e4bc:	4602      	mov	r2, r0
 800e4be:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e4c2:	f7ff bb2e 	b.w	800db22 <_dtoa_r+0x32>
 800e4c6:	693a      	ldr	r2, [r7, #16]
 800e4c8:	3202      	adds	r2, #2
 800e4ca:	0092      	lsls	r2, r2, #2
 800e4cc:	f107 010c 	add.w	r1, r7, #12
 800e4d0:	300c      	adds	r0, #12
 800e4d2:	f000 fe39 	bl	800f148 <memcpy>
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	4629      	mov	r1, r5
 800e4da:	4620      	mov	r0, r4
 800e4dc:	f000 fc0a 	bl	800ecf4 <__lshift>
 800e4e0:	9b00      	ldr	r3, [sp, #0]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	9304      	str	r3, [sp, #16]
 800e4e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4ea:	4413      	add	r3, r2
 800e4ec:	9308      	str	r3, [sp, #32]
 800e4ee:	9b02      	ldr	r3, [sp, #8]
 800e4f0:	f003 0301 	and.w	r3, r3, #1
 800e4f4:	46b8      	mov	r8, r7
 800e4f6:	9306      	str	r3, [sp, #24]
 800e4f8:	4607      	mov	r7, r0
 800e4fa:	9b04      	ldr	r3, [sp, #16]
 800e4fc:	4631      	mov	r1, r6
 800e4fe:	3b01      	subs	r3, #1
 800e500:	4650      	mov	r0, sl
 800e502:	9301      	str	r3, [sp, #4]
 800e504:	f7ff fa69 	bl	800d9da <quorem>
 800e508:	4641      	mov	r1, r8
 800e50a:	9002      	str	r0, [sp, #8]
 800e50c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e510:	4650      	mov	r0, sl
 800e512:	f000 fc5b 	bl	800edcc <__mcmp>
 800e516:	463a      	mov	r2, r7
 800e518:	9005      	str	r0, [sp, #20]
 800e51a:	4631      	mov	r1, r6
 800e51c:	4620      	mov	r0, r4
 800e51e:	f000 fc71 	bl	800ee04 <__mdiff>
 800e522:	68c2      	ldr	r2, [r0, #12]
 800e524:	4605      	mov	r5, r0
 800e526:	bb02      	cbnz	r2, 800e56a <_dtoa_r+0xa7a>
 800e528:	4601      	mov	r1, r0
 800e52a:	4650      	mov	r0, sl
 800e52c:	f000 fc4e 	bl	800edcc <__mcmp>
 800e530:	4602      	mov	r2, r0
 800e532:	4629      	mov	r1, r5
 800e534:	4620      	mov	r0, r4
 800e536:	9209      	str	r2, [sp, #36]	; 0x24
 800e538:	f000 fa0c 	bl	800e954 <_Bfree>
 800e53c:	9b07      	ldr	r3, [sp, #28]
 800e53e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e540:	9d04      	ldr	r5, [sp, #16]
 800e542:	ea43 0102 	orr.w	r1, r3, r2
 800e546:	9b06      	ldr	r3, [sp, #24]
 800e548:	4319      	orrs	r1, r3
 800e54a:	d110      	bne.n	800e56e <_dtoa_r+0xa7e>
 800e54c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e550:	d029      	beq.n	800e5a6 <_dtoa_r+0xab6>
 800e552:	9b05      	ldr	r3, [sp, #20]
 800e554:	2b00      	cmp	r3, #0
 800e556:	dd02      	ble.n	800e55e <_dtoa_r+0xa6e>
 800e558:	9b02      	ldr	r3, [sp, #8]
 800e55a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e55e:	9b01      	ldr	r3, [sp, #4]
 800e560:	f883 9000 	strb.w	r9, [r3]
 800e564:	e774      	b.n	800e450 <_dtoa_r+0x960>
 800e566:	4638      	mov	r0, r7
 800e568:	e7ba      	b.n	800e4e0 <_dtoa_r+0x9f0>
 800e56a:	2201      	movs	r2, #1
 800e56c:	e7e1      	b.n	800e532 <_dtoa_r+0xa42>
 800e56e:	9b05      	ldr	r3, [sp, #20]
 800e570:	2b00      	cmp	r3, #0
 800e572:	db04      	blt.n	800e57e <_dtoa_r+0xa8e>
 800e574:	9907      	ldr	r1, [sp, #28]
 800e576:	430b      	orrs	r3, r1
 800e578:	9906      	ldr	r1, [sp, #24]
 800e57a:	430b      	orrs	r3, r1
 800e57c:	d120      	bne.n	800e5c0 <_dtoa_r+0xad0>
 800e57e:	2a00      	cmp	r2, #0
 800e580:	dded      	ble.n	800e55e <_dtoa_r+0xa6e>
 800e582:	4651      	mov	r1, sl
 800e584:	2201      	movs	r2, #1
 800e586:	4620      	mov	r0, r4
 800e588:	f000 fbb4 	bl	800ecf4 <__lshift>
 800e58c:	4631      	mov	r1, r6
 800e58e:	4682      	mov	sl, r0
 800e590:	f000 fc1c 	bl	800edcc <__mcmp>
 800e594:	2800      	cmp	r0, #0
 800e596:	dc03      	bgt.n	800e5a0 <_dtoa_r+0xab0>
 800e598:	d1e1      	bne.n	800e55e <_dtoa_r+0xa6e>
 800e59a:	f019 0f01 	tst.w	r9, #1
 800e59e:	d0de      	beq.n	800e55e <_dtoa_r+0xa6e>
 800e5a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e5a4:	d1d8      	bne.n	800e558 <_dtoa_r+0xa68>
 800e5a6:	9a01      	ldr	r2, [sp, #4]
 800e5a8:	2339      	movs	r3, #57	; 0x39
 800e5aa:	7013      	strb	r3, [r2, #0]
 800e5ac:	462b      	mov	r3, r5
 800e5ae:	461d      	mov	r5, r3
 800e5b0:	3b01      	subs	r3, #1
 800e5b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e5b6:	2a39      	cmp	r2, #57	; 0x39
 800e5b8:	d06c      	beq.n	800e694 <_dtoa_r+0xba4>
 800e5ba:	3201      	adds	r2, #1
 800e5bc:	701a      	strb	r2, [r3, #0]
 800e5be:	e747      	b.n	800e450 <_dtoa_r+0x960>
 800e5c0:	2a00      	cmp	r2, #0
 800e5c2:	dd07      	ble.n	800e5d4 <_dtoa_r+0xae4>
 800e5c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e5c8:	d0ed      	beq.n	800e5a6 <_dtoa_r+0xab6>
 800e5ca:	9a01      	ldr	r2, [sp, #4]
 800e5cc:	f109 0301 	add.w	r3, r9, #1
 800e5d0:	7013      	strb	r3, [r2, #0]
 800e5d2:	e73d      	b.n	800e450 <_dtoa_r+0x960>
 800e5d4:	9b04      	ldr	r3, [sp, #16]
 800e5d6:	9a08      	ldr	r2, [sp, #32]
 800e5d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d043      	beq.n	800e668 <_dtoa_r+0xb78>
 800e5e0:	4651      	mov	r1, sl
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	220a      	movs	r2, #10
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	f000 f9d6 	bl	800e998 <__multadd>
 800e5ec:	45b8      	cmp	r8, r7
 800e5ee:	4682      	mov	sl, r0
 800e5f0:	f04f 0300 	mov.w	r3, #0
 800e5f4:	f04f 020a 	mov.w	r2, #10
 800e5f8:	4641      	mov	r1, r8
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	d107      	bne.n	800e60e <_dtoa_r+0xb1e>
 800e5fe:	f000 f9cb 	bl	800e998 <__multadd>
 800e602:	4680      	mov	r8, r0
 800e604:	4607      	mov	r7, r0
 800e606:	9b04      	ldr	r3, [sp, #16]
 800e608:	3301      	adds	r3, #1
 800e60a:	9304      	str	r3, [sp, #16]
 800e60c:	e775      	b.n	800e4fa <_dtoa_r+0xa0a>
 800e60e:	f000 f9c3 	bl	800e998 <__multadd>
 800e612:	4639      	mov	r1, r7
 800e614:	4680      	mov	r8, r0
 800e616:	2300      	movs	r3, #0
 800e618:	220a      	movs	r2, #10
 800e61a:	4620      	mov	r0, r4
 800e61c:	f000 f9bc 	bl	800e998 <__multadd>
 800e620:	4607      	mov	r7, r0
 800e622:	e7f0      	b.n	800e606 <_dtoa_r+0xb16>
 800e624:	9b04      	ldr	r3, [sp, #16]
 800e626:	9301      	str	r3, [sp, #4]
 800e628:	9d00      	ldr	r5, [sp, #0]
 800e62a:	4631      	mov	r1, r6
 800e62c:	4650      	mov	r0, sl
 800e62e:	f7ff f9d4 	bl	800d9da <quorem>
 800e632:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e636:	9b00      	ldr	r3, [sp, #0]
 800e638:	f805 9b01 	strb.w	r9, [r5], #1
 800e63c:	1aea      	subs	r2, r5, r3
 800e63e:	9b01      	ldr	r3, [sp, #4]
 800e640:	4293      	cmp	r3, r2
 800e642:	dd07      	ble.n	800e654 <_dtoa_r+0xb64>
 800e644:	4651      	mov	r1, sl
 800e646:	2300      	movs	r3, #0
 800e648:	220a      	movs	r2, #10
 800e64a:	4620      	mov	r0, r4
 800e64c:	f000 f9a4 	bl	800e998 <__multadd>
 800e650:	4682      	mov	sl, r0
 800e652:	e7ea      	b.n	800e62a <_dtoa_r+0xb3a>
 800e654:	9b01      	ldr	r3, [sp, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	bfc8      	it	gt
 800e65a:	461d      	movgt	r5, r3
 800e65c:	9b00      	ldr	r3, [sp, #0]
 800e65e:	bfd8      	it	le
 800e660:	2501      	movle	r5, #1
 800e662:	441d      	add	r5, r3
 800e664:	f04f 0800 	mov.w	r8, #0
 800e668:	4651      	mov	r1, sl
 800e66a:	2201      	movs	r2, #1
 800e66c:	4620      	mov	r0, r4
 800e66e:	f000 fb41 	bl	800ecf4 <__lshift>
 800e672:	4631      	mov	r1, r6
 800e674:	4682      	mov	sl, r0
 800e676:	f000 fba9 	bl	800edcc <__mcmp>
 800e67a:	2800      	cmp	r0, #0
 800e67c:	dc96      	bgt.n	800e5ac <_dtoa_r+0xabc>
 800e67e:	d102      	bne.n	800e686 <_dtoa_r+0xb96>
 800e680:	f019 0f01 	tst.w	r9, #1
 800e684:	d192      	bne.n	800e5ac <_dtoa_r+0xabc>
 800e686:	462b      	mov	r3, r5
 800e688:	461d      	mov	r5, r3
 800e68a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e68e:	2a30      	cmp	r2, #48	; 0x30
 800e690:	d0fa      	beq.n	800e688 <_dtoa_r+0xb98>
 800e692:	e6dd      	b.n	800e450 <_dtoa_r+0x960>
 800e694:	9a00      	ldr	r2, [sp, #0]
 800e696:	429a      	cmp	r2, r3
 800e698:	d189      	bne.n	800e5ae <_dtoa_r+0xabe>
 800e69a:	f10b 0b01 	add.w	fp, fp, #1
 800e69e:	2331      	movs	r3, #49	; 0x31
 800e6a0:	e796      	b.n	800e5d0 <_dtoa_r+0xae0>
 800e6a2:	4b0a      	ldr	r3, [pc, #40]	; (800e6cc <_dtoa_r+0xbdc>)
 800e6a4:	f7ff ba99 	b.w	800dbda <_dtoa_r+0xea>
 800e6a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	f47f aa6d 	bne.w	800db8a <_dtoa_r+0x9a>
 800e6b0:	4b07      	ldr	r3, [pc, #28]	; (800e6d0 <_dtoa_r+0xbe0>)
 800e6b2:	f7ff ba92 	b.w	800dbda <_dtoa_r+0xea>
 800e6b6:	9b01      	ldr	r3, [sp, #4]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	dcb5      	bgt.n	800e628 <_dtoa_r+0xb38>
 800e6bc:	9b07      	ldr	r3, [sp, #28]
 800e6be:	2b02      	cmp	r3, #2
 800e6c0:	f73f aeb1 	bgt.w	800e426 <_dtoa_r+0x936>
 800e6c4:	e7b0      	b.n	800e628 <_dtoa_r+0xb38>
 800e6c6:	bf00      	nop
 800e6c8:	0800f8a8 	.word	0x0800f8a8
 800e6cc:	0800f808 	.word	0x0800f808
 800e6d0:	0800f82c 	.word	0x0800f82c

0800e6d4 <_free_r>:
 800e6d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6d6:	2900      	cmp	r1, #0
 800e6d8:	d044      	beq.n	800e764 <_free_r+0x90>
 800e6da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6de:	9001      	str	r0, [sp, #4]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	f1a1 0404 	sub.w	r4, r1, #4
 800e6e6:	bfb8      	it	lt
 800e6e8:	18e4      	addlt	r4, r4, r3
 800e6ea:	f000 f8e7 	bl	800e8bc <__malloc_lock>
 800e6ee:	4a1e      	ldr	r2, [pc, #120]	; (800e768 <_free_r+0x94>)
 800e6f0:	9801      	ldr	r0, [sp, #4]
 800e6f2:	6813      	ldr	r3, [r2, #0]
 800e6f4:	b933      	cbnz	r3, 800e704 <_free_r+0x30>
 800e6f6:	6063      	str	r3, [r4, #4]
 800e6f8:	6014      	str	r4, [r2, #0]
 800e6fa:	b003      	add	sp, #12
 800e6fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e700:	f000 b8e2 	b.w	800e8c8 <__malloc_unlock>
 800e704:	42a3      	cmp	r3, r4
 800e706:	d908      	bls.n	800e71a <_free_r+0x46>
 800e708:	6825      	ldr	r5, [r4, #0]
 800e70a:	1961      	adds	r1, r4, r5
 800e70c:	428b      	cmp	r3, r1
 800e70e:	bf01      	itttt	eq
 800e710:	6819      	ldreq	r1, [r3, #0]
 800e712:	685b      	ldreq	r3, [r3, #4]
 800e714:	1949      	addeq	r1, r1, r5
 800e716:	6021      	streq	r1, [r4, #0]
 800e718:	e7ed      	b.n	800e6f6 <_free_r+0x22>
 800e71a:	461a      	mov	r2, r3
 800e71c:	685b      	ldr	r3, [r3, #4]
 800e71e:	b10b      	cbz	r3, 800e724 <_free_r+0x50>
 800e720:	42a3      	cmp	r3, r4
 800e722:	d9fa      	bls.n	800e71a <_free_r+0x46>
 800e724:	6811      	ldr	r1, [r2, #0]
 800e726:	1855      	adds	r5, r2, r1
 800e728:	42a5      	cmp	r5, r4
 800e72a:	d10b      	bne.n	800e744 <_free_r+0x70>
 800e72c:	6824      	ldr	r4, [r4, #0]
 800e72e:	4421      	add	r1, r4
 800e730:	1854      	adds	r4, r2, r1
 800e732:	42a3      	cmp	r3, r4
 800e734:	6011      	str	r1, [r2, #0]
 800e736:	d1e0      	bne.n	800e6fa <_free_r+0x26>
 800e738:	681c      	ldr	r4, [r3, #0]
 800e73a:	685b      	ldr	r3, [r3, #4]
 800e73c:	6053      	str	r3, [r2, #4]
 800e73e:	440c      	add	r4, r1
 800e740:	6014      	str	r4, [r2, #0]
 800e742:	e7da      	b.n	800e6fa <_free_r+0x26>
 800e744:	d902      	bls.n	800e74c <_free_r+0x78>
 800e746:	230c      	movs	r3, #12
 800e748:	6003      	str	r3, [r0, #0]
 800e74a:	e7d6      	b.n	800e6fa <_free_r+0x26>
 800e74c:	6825      	ldr	r5, [r4, #0]
 800e74e:	1961      	adds	r1, r4, r5
 800e750:	428b      	cmp	r3, r1
 800e752:	bf04      	itt	eq
 800e754:	6819      	ldreq	r1, [r3, #0]
 800e756:	685b      	ldreq	r3, [r3, #4]
 800e758:	6063      	str	r3, [r4, #4]
 800e75a:	bf04      	itt	eq
 800e75c:	1949      	addeq	r1, r1, r5
 800e75e:	6021      	streq	r1, [r4, #0]
 800e760:	6054      	str	r4, [r2, #4]
 800e762:	e7ca      	b.n	800e6fa <_free_r+0x26>
 800e764:	b003      	add	sp, #12
 800e766:	bd30      	pop	{r4, r5, pc}
 800e768:	200024a0 	.word	0x200024a0

0800e76c <malloc>:
 800e76c:	4b02      	ldr	r3, [pc, #8]	; (800e778 <malloc+0xc>)
 800e76e:	4601      	mov	r1, r0
 800e770:	6818      	ldr	r0, [r3, #0]
 800e772:	f000 b823 	b.w	800e7bc <_malloc_r>
 800e776:	bf00      	nop
 800e778:	20000178 	.word	0x20000178

0800e77c <sbrk_aligned>:
 800e77c:	b570      	push	{r4, r5, r6, lr}
 800e77e:	4e0e      	ldr	r6, [pc, #56]	; (800e7b8 <sbrk_aligned+0x3c>)
 800e780:	460c      	mov	r4, r1
 800e782:	6831      	ldr	r1, [r6, #0]
 800e784:	4605      	mov	r5, r0
 800e786:	b911      	cbnz	r1, 800e78e <sbrk_aligned+0x12>
 800e788:	f000 fcce 	bl	800f128 <_sbrk_r>
 800e78c:	6030      	str	r0, [r6, #0]
 800e78e:	4621      	mov	r1, r4
 800e790:	4628      	mov	r0, r5
 800e792:	f000 fcc9 	bl	800f128 <_sbrk_r>
 800e796:	1c43      	adds	r3, r0, #1
 800e798:	d00a      	beq.n	800e7b0 <sbrk_aligned+0x34>
 800e79a:	1cc4      	adds	r4, r0, #3
 800e79c:	f024 0403 	bic.w	r4, r4, #3
 800e7a0:	42a0      	cmp	r0, r4
 800e7a2:	d007      	beq.n	800e7b4 <sbrk_aligned+0x38>
 800e7a4:	1a21      	subs	r1, r4, r0
 800e7a6:	4628      	mov	r0, r5
 800e7a8:	f000 fcbe 	bl	800f128 <_sbrk_r>
 800e7ac:	3001      	adds	r0, #1
 800e7ae:	d101      	bne.n	800e7b4 <sbrk_aligned+0x38>
 800e7b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	bd70      	pop	{r4, r5, r6, pc}
 800e7b8:	200024a4 	.word	0x200024a4

0800e7bc <_malloc_r>:
 800e7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7c0:	1ccd      	adds	r5, r1, #3
 800e7c2:	f025 0503 	bic.w	r5, r5, #3
 800e7c6:	3508      	adds	r5, #8
 800e7c8:	2d0c      	cmp	r5, #12
 800e7ca:	bf38      	it	cc
 800e7cc:	250c      	movcc	r5, #12
 800e7ce:	2d00      	cmp	r5, #0
 800e7d0:	4607      	mov	r7, r0
 800e7d2:	db01      	blt.n	800e7d8 <_malloc_r+0x1c>
 800e7d4:	42a9      	cmp	r1, r5
 800e7d6:	d905      	bls.n	800e7e4 <_malloc_r+0x28>
 800e7d8:	230c      	movs	r3, #12
 800e7da:	603b      	str	r3, [r7, #0]
 800e7dc:	2600      	movs	r6, #0
 800e7de:	4630      	mov	r0, r6
 800e7e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e8b8 <_malloc_r+0xfc>
 800e7e8:	f000 f868 	bl	800e8bc <__malloc_lock>
 800e7ec:	f8d8 3000 	ldr.w	r3, [r8]
 800e7f0:	461c      	mov	r4, r3
 800e7f2:	bb5c      	cbnz	r4, 800e84c <_malloc_r+0x90>
 800e7f4:	4629      	mov	r1, r5
 800e7f6:	4638      	mov	r0, r7
 800e7f8:	f7ff ffc0 	bl	800e77c <sbrk_aligned>
 800e7fc:	1c43      	adds	r3, r0, #1
 800e7fe:	4604      	mov	r4, r0
 800e800:	d155      	bne.n	800e8ae <_malloc_r+0xf2>
 800e802:	f8d8 4000 	ldr.w	r4, [r8]
 800e806:	4626      	mov	r6, r4
 800e808:	2e00      	cmp	r6, #0
 800e80a:	d145      	bne.n	800e898 <_malloc_r+0xdc>
 800e80c:	2c00      	cmp	r4, #0
 800e80e:	d048      	beq.n	800e8a2 <_malloc_r+0xe6>
 800e810:	6823      	ldr	r3, [r4, #0]
 800e812:	4631      	mov	r1, r6
 800e814:	4638      	mov	r0, r7
 800e816:	eb04 0903 	add.w	r9, r4, r3
 800e81a:	f000 fc85 	bl	800f128 <_sbrk_r>
 800e81e:	4581      	cmp	r9, r0
 800e820:	d13f      	bne.n	800e8a2 <_malloc_r+0xe6>
 800e822:	6821      	ldr	r1, [r4, #0]
 800e824:	1a6d      	subs	r5, r5, r1
 800e826:	4629      	mov	r1, r5
 800e828:	4638      	mov	r0, r7
 800e82a:	f7ff ffa7 	bl	800e77c <sbrk_aligned>
 800e82e:	3001      	adds	r0, #1
 800e830:	d037      	beq.n	800e8a2 <_malloc_r+0xe6>
 800e832:	6823      	ldr	r3, [r4, #0]
 800e834:	442b      	add	r3, r5
 800e836:	6023      	str	r3, [r4, #0]
 800e838:	f8d8 3000 	ldr.w	r3, [r8]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d038      	beq.n	800e8b2 <_malloc_r+0xf6>
 800e840:	685a      	ldr	r2, [r3, #4]
 800e842:	42a2      	cmp	r2, r4
 800e844:	d12b      	bne.n	800e89e <_malloc_r+0xe2>
 800e846:	2200      	movs	r2, #0
 800e848:	605a      	str	r2, [r3, #4]
 800e84a:	e00f      	b.n	800e86c <_malloc_r+0xb0>
 800e84c:	6822      	ldr	r2, [r4, #0]
 800e84e:	1b52      	subs	r2, r2, r5
 800e850:	d41f      	bmi.n	800e892 <_malloc_r+0xd6>
 800e852:	2a0b      	cmp	r2, #11
 800e854:	d917      	bls.n	800e886 <_malloc_r+0xca>
 800e856:	1961      	adds	r1, r4, r5
 800e858:	42a3      	cmp	r3, r4
 800e85a:	6025      	str	r5, [r4, #0]
 800e85c:	bf18      	it	ne
 800e85e:	6059      	strne	r1, [r3, #4]
 800e860:	6863      	ldr	r3, [r4, #4]
 800e862:	bf08      	it	eq
 800e864:	f8c8 1000 	streq.w	r1, [r8]
 800e868:	5162      	str	r2, [r4, r5]
 800e86a:	604b      	str	r3, [r1, #4]
 800e86c:	4638      	mov	r0, r7
 800e86e:	f104 060b 	add.w	r6, r4, #11
 800e872:	f000 f829 	bl	800e8c8 <__malloc_unlock>
 800e876:	f026 0607 	bic.w	r6, r6, #7
 800e87a:	1d23      	adds	r3, r4, #4
 800e87c:	1af2      	subs	r2, r6, r3
 800e87e:	d0ae      	beq.n	800e7de <_malloc_r+0x22>
 800e880:	1b9b      	subs	r3, r3, r6
 800e882:	50a3      	str	r3, [r4, r2]
 800e884:	e7ab      	b.n	800e7de <_malloc_r+0x22>
 800e886:	42a3      	cmp	r3, r4
 800e888:	6862      	ldr	r2, [r4, #4]
 800e88a:	d1dd      	bne.n	800e848 <_malloc_r+0x8c>
 800e88c:	f8c8 2000 	str.w	r2, [r8]
 800e890:	e7ec      	b.n	800e86c <_malloc_r+0xb0>
 800e892:	4623      	mov	r3, r4
 800e894:	6864      	ldr	r4, [r4, #4]
 800e896:	e7ac      	b.n	800e7f2 <_malloc_r+0x36>
 800e898:	4634      	mov	r4, r6
 800e89a:	6876      	ldr	r6, [r6, #4]
 800e89c:	e7b4      	b.n	800e808 <_malloc_r+0x4c>
 800e89e:	4613      	mov	r3, r2
 800e8a0:	e7cc      	b.n	800e83c <_malloc_r+0x80>
 800e8a2:	230c      	movs	r3, #12
 800e8a4:	603b      	str	r3, [r7, #0]
 800e8a6:	4638      	mov	r0, r7
 800e8a8:	f000 f80e 	bl	800e8c8 <__malloc_unlock>
 800e8ac:	e797      	b.n	800e7de <_malloc_r+0x22>
 800e8ae:	6025      	str	r5, [r4, #0]
 800e8b0:	e7dc      	b.n	800e86c <_malloc_r+0xb0>
 800e8b2:	605b      	str	r3, [r3, #4]
 800e8b4:	deff      	udf	#255	; 0xff
 800e8b6:	bf00      	nop
 800e8b8:	200024a0 	.word	0x200024a0

0800e8bc <__malloc_lock>:
 800e8bc:	4801      	ldr	r0, [pc, #4]	; (800e8c4 <__malloc_lock+0x8>)
 800e8be:	f7ff b88a 	b.w	800d9d6 <__retarget_lock_acquire_recursive>
 800e8c2:	bf00      	nop
 800e8c4:	2000249c 	.word	0x2000249c

0800e8c8 <__malloc_unlock>:
 800e8c8:	4801      	ldr	r0, [pc, #4]	; (800e8d0 <__malloc_unlock+0x8>)
 800e8ca:	f7ff b885 	b.w	800d9d8 <__retarget_lock_release_recursive>
 800e8ce:	bf00      	nop
 800e8d0:	2000249c 	.word	0x2000249c

0800e8d4 <_Balloc>:
 800e8d4:	b570      	push	{r4, r5, r6, lr}
 800e8d6:	69c6      	ldr	r6, [r0, #28]
 800e8d8:	4604      	mov	r4, r0
 800e8da:	460d      	mov	r5, r1
 800e8dc:	b976      	cbnz	r6, 800e8fc <_Balloc+0x28>
 800e8de:	2010      	movs	r0, #16
 800e8e0:	f7ff ff44 	bl	800e76c <malloc>
 800e8e4:	4602      	mov	r2, r0
 800e8e6:	61e0      	str	r0, [r4, #28]
 800e8e8:	b920      	cbnz	r0, 800e8f4 <_Balloc+0x20>
 800e8ea:	4b18      	ldr	r3, [pc, #96]	; (800e94c <_Balloc+0x78>)
 800e8ec:	4818      	ldr	r0, [pc, #96]	; (800e950 <_Balloc+0x7c>)
 800e8ee:	216b      	movs	r1, #107	; 0x6b
 800e8f0:	f000 fc38 	bl	800f164 <__assert_func>
 800e8f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8f8:	6006      	str	r6, [r0, #0]
 800e8fa:	60c6      	str	r6, [r0, #12]
 800e8fc:	69e6      	ldr	r6, [r4, #28]
 800e8fe:	68f3      	ldr	r3, [r6, #12]
 800e900:	b183      	cbz	r3, 800e924 <_Balloc+0x50>
 800e902:	69e3      	ldr	r3, [r4, #28]
 800e904:	68db      	ldr	r3, [r3, #12]
 800e906:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e90a:	b9b8      	cbnz	r0, 800e93c <_Balloc+0x68>
 800e90c:	2101      	movs	r1, #1
 800e90e:	fa01 f605 	lsl.w	r6, r1, r5
 800e912:	1d72      	adds	r2, r6, #5
 800e914:	0092      	lsls	r2, r2, #2
 800e916:	4620      	mov	r0, r4
 800e918:	f000 fc42 	bl	800f1a0 <_calloc_r>
 800e91c:	b160      	cbz	r0, 800e938 <_Balloc+0x64>
 800e91e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e922:	e00e      	b.n	800e942 <_Balloc+0x6e>
 800e924:	2221      	movs	r2, #33	; 0x21
 800e926:	2104      	movs	r1, #4
 800e928:	4620      	mov	r0, r4
 800e92a:	f000 fc39 	bl	800f1a0 <_calloc_r>
 800e92e:	69e3      	ldr	r3, [r4, #28]
 800e930:	60f0      	str	r0, [r6, #12]
 800e932:	68db      	ldr	r3, [r3, #12]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d1e4      	bne.n	800e902 <_Balloc+0x2e>
 800e938:	2000      	movs	r0, #0
 800e93a:	bd70      	pop	{r4, r5, r6, pc}
 800e93c:	6802      	ldr	r2, [r0, #0]
 800e93e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e942:	2300      	movs	r3, #0
 800e944:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e948:	e7f7      	b.n	800e93a <_Balloc+0x66>
 800e94a:	bf00      	nop
 800e94c:	0800f839 	.word	0x0800f839
 800e950:	0800f8b9 	.word	0x0800f8b9

0800e954 <_Bfree>:
 800e954:	b570      	push	{r4, r5, r6, lr}
 800e956:	69c6      	ldr	r6, [r0, #28]
 800e958:	4605      	mov	r5, r0
 800e95a:	460c      	mov	r4, r1
 800e95c:	b976      	cbnz	r6, 800e97c <_Bfree+0x28>
 800e95e:	2010      	movs	r0, #16
 800e960:	f7ff ff04 	bl	800e76c <malloc>
 800e964:	4602      	mov	r2, r0
 800e966:	61e8      	str	r0, [r5, #28]
 800e968:	b920      	cbnz	r0, 800e974 <_Bfree+0x20>
 800e96a:	4b09      	ldr	r3, [pc, #36]	; (800e990 <_Bfree+0x3c>)
 800e96c:	4809      	ldr	r0, [pc, #36]	; (800e994 <_Bfree+0x40>)
 800e96e:	218f      	movs	r1, #143	; 0x8f
 800e970:	f000 fbf8 	bl	800f164 <__assert_func>
 800e974:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e978:	6006      	str	r6, [r0, #0]
 800e97a:	60c6      	str	r6, [r0, #12]
 800e97c:	b13c      	cbz	r4, 800e98e <_Bfree+0x3a>
 800e97e:	69eb      	ldr	r3, [r5, #28]
 800e980:	6862      	ldr	r2, [r4, #4]
 800e982:	68db      	ldr	r3, [r3, #12]
 800e984:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e988:	6021      	str	r1, [r4, #0]
 800e98a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e98e:	bd70      	pop	{r4, r5, r6, pc}
 800e990:	0800f839 	.word	0x0800f839
 800e994:	0800f8b9 	.word	0x0800f8b9

0800e998 <__multadd>:
 800e998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e99c:	690d      	ldr	r5, [r1, #16]
 800e99e:	4607      	mov	r7, r0
 800e9a0:	460c      	mov	r4, r1
 800e9a2:	461e      	mov	r6, r3
 800e9a4:	f101 0c14 	add.w	ip, r1, #20
 800e9a8:	2000      	movs	r0, #0
 800e9aa:	f8dc 3000 	ldr.w	r3, [ip]
 800e9ae:	b299      	uxth	r1, r3
 800e9b0:	fb02 6101 	mla	r1, r2, r1, r6
 800e9b4:	0c1e      	lsrs	r6, r3, #16
 800e9b6:	0c0b      	lsrs	r3, r1, #16
 800e9b8:	fb02 3306 	mla	r3, r2, r6, r3
 800e9bc:	b289      	uxth	r1, r1
 800e9be:	3001      	adds	r0, #1
 800e9c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e9c4:	4285      	cmp	r5, r0
 800e9c6:	f84c 1b04 	str.w	r1, [ip], #4
 800e9ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e9ce:	dcec      	bgt.n	800e9aa <__multadd+0x12>
 800e9d0:	b30e      	cbz	r6, 800ea16 <__multadd+0x7e>
 800e9d2:	68a3      	ldr	r3, [r4, #8]
 800e9d4:	42ab      	cmp	r3, r5
 800e9d6:	dc19      	bgt.n	800ea0c <__multadd+0x74>
 800e9d8:	6861      	ldr	r1, [r4, #4]
 800e9da:	4638      	mov	r0, r7
 800e9dc:	3101      	adds	r1, #1
 800e9de:	f7ff ff79 	bl	800e8d4 <_Balloc>
 800e9e2:	4680      	mov	r8, r0
 800e9e4:	b928      	cbnz	r0, 800e9f2 <__multadd+0x5a>
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	4b0c      	ldr	r3, [pc, #48]	; (800ea1c <__multadd+0x84>)
 800e9ea:	480d      	ldr	r0, [pc, #52]	; (800ea20 <__multadd+0x88>)
 800e9ec:	21ba      	movs	r1, #186	; 0xba
 800e9ee:	f000 fbb9 	bl	800f164 <__assert_func>
 800e9f2:	6922      	ldr	r2, [r4, #16]
 800e9f4:	3202      	adds	r2, #2
 800e9f6:	f104 010c 	add.w	r1, r4, #12
 800e9fa:	0092      	lsls	r2, r2, #2
 800e9fc:	300c      	adds	r0, #12
 800e9fe:	f000 fba3 	bl	800f148 <memcpy>
 800ea02:	4621      	mov	r1, r4
 800ea04:	4638      	mov	r0, r7
 800ea06:	f7ff ffa5 	bl	800e954 <_Bfree>
 800ea0a:	4644      	mov	r4, r8
 800ea0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ea10:	3501      	adds	r5, #1
 800ea12:	615e      	str	r6, [r3, #20]
 800ea14:	6125      	str	r5, [r4, #16]
 800ea16:	4620      	mov	r0, r4
 800ea18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea1c:	0800f8a8 	.word	0x0800f8a8
 800ea20:	0800f8b9 	.word	0x0800f8b9

0800ea24 <__hi0bits>:
 800ea24:	0c03      	lsrs	r3, r0, #16
 800ea26:	041b      	lsls	r3, r3, #16
 800ea28:	b9d3      	cbnz	r3, 800ea60 <__hi0bits+0x3c>
 800ea2a:	0400      	lsls	r0, r0, #16
 800ea2c:	2310      	movs	r3, #16
 800ea2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ea32:	bf04      	itt	eq
 800ea34:	0200      	lsleq	r0, r0, #8
 800ea36:	3308      	addeq	r3, #8
 800ea38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ea3c:	bf04      	itt	eq
 800ea3e:	0100      	lsleq	r0, r0, #4
 800ea40:	3304      	addeq	r3, #4
 800ea42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ea46:	bf04      	itt	eq
 800ea48:	0080      	lsleq	r0, r0, #2
 800ea4a:	3302      	addeq	r3, #2
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	db05      	blt.n	800ea5c <__hi0bits+0x38>
 800ea50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ea54:	f103 0301 	add.w	r3, r3, #1
 800ea58:	bf08      	it	eq
 800ea5a:	2320      	moveq	r3, #32
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	4770      	bx	lr
 800ea60:	2300      	movs	r3, #0
 800ea62:	e7e4      	b.n	800ea2e <__hi0bits+0xa>

0800ea64 <__lo0bits>:
 800ea64:	6803      	ldr	r3, [r0, #0]
 800ea66:	f013 0207 	ands.w	r2, r3, #7
 800ea6a:	d00c      	beq.n	800ea86 <__lo0bits+0x22>
 800ea6c:	07d9      	lsls	r1, r3, #31
 800ea6e:	d422      	bmi.n	800eab6 <__lo0bits+0x52>
 800ea70:	079a      	lsls	r2, r3, #30
 800ea72:	bf49      	itett	mi
 800ea74:	085b      	lsrmi	r3, r3, #1
 800ea76:	089b      	lsrpl	r3, r3, #2
 800ea78:	6003      	strmi	r3, [r0, #0]
 800ea7a:	2201      	movmi	r2, #1
 800ea7c:	bf5c      	itt	pl
 800ea7e:	6003      	strpl	r3, [r0, #0]
 800ea80:	2202      	movpl	r2, #2
 800ea82:	4610      	mov	r0, r2
 800ea84:	4770      	bx	lr
 800ea86:	b299      	uxth	r1, r3
 800ea88:	b909      	cbnz	r1, 800ea8e <__lo0bits+0x2a>
 800ea8a:	0c1b      	lsrs	r3, r3, #16
 800ea8c:	2210      	movs	r2, #16
 800ea8e:	b2d9      	uxtb	r1, r3
 800ea90:	b909      	cbnz	r1, 800ea96 <__lo0bits+0x32>
 800ea92:	3208      	adds	r2, #8
 800ea94:	0a1b      	lsrs	r3, r3, #8
 800ea96:	0719      	lsls	r1, r3, #28
 800ea98:	bf04      	itt	eq
 800ea9a:	091b      	lsreq	r3, r3, #4
 800ea9c:	3204      	addeq	r2, #4
 800ea9e:	0799      	lsls	r1, r3, #30
 800eaa0:	bf04      	itt	eq
 800eaa2:	089b      	lsreq	r3, r3, #2
 800eaa4:	3202      	addeq	r2, #2
 800eaa6:	07d9      	lsls	r1, r3, #31
 800eaa8:	d403      	bmi.n	800eab2 <__lo0bits+0x4e>
 800eaaa:	085b      	lsrs	r3, r3, #1
 800eaac:	f102 0201 	add.w	r2, r2, #1
 800eab0:	d003      	beq.n	800eaba <__lo0bits+0x56>
 800eab2:	6003      	str	r3, [r0, #0]
 800eab4:	e7e5      	b.n	800ea82 <__lo0bits+0x1e>
 800eab6:	2200      	movs	r2, #0
 800eab8:	e7e3      	b.n	800ea82 <__lo0bits+0x1e>
 800eaba:	2220      	movs	r2, #32
 800eabc:	e7e1      	b.n	800ea82 <__lo0bits+0x1e>
	...

0800eac0 <__i2b>:
 800eac0:	b510      	push	{r4, lr}
 800eac2:	460c      	mov	r4, r1
 800eac4:	2101      	movs	r1, #1
 800eac6:	f7ff ff05 	bl	800e8d4 <_Balloc>
 800eaca:	4602      	mov	r2, r0
 800eacc:	b928      	cbnz	r0, 800eada <__i2b+0x1a>
 800eace:	4b05      	ldr	r3, [pc, #20]	; (800eae4 <__i2b+0x24>)
 800ead0:	4805      	ldr	r0, [pc, #20]	; (800eae8 <__i2b+0x28>)
 800ead2:	f240 1145 	movw	r1, #325	; 0x145
 800ead6:	f000 fb45 	bl	800f164 <__assert_func>
 800eada:	2301      	movs	r3, #1
 800eadc:	6144      	str	r4, [r0, #20]
 800eade:	6103      	str	r3, [r0, #16]
 800eae0:	bd10      	pop	{r4, pc}
 800eae2:	bf00      	nop
 800eae4:	0800f8a8 	.word	0x0800f8a8
 800eae8:	0800f8b9 	.word	0x0800f8b9

0800eaec <__multiply>:
 800eaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf0:	4691      	mov	r9, r2
 800eaf2:	690a      	ldr	r2, [r1, #16]
 800eaf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	bfb8      	it	lt
 800eafc:	460b      	movlt	r3, r1
 800eafe:	460c      	mov	r4, r1
 800eb00:	bfbc      	itt	lt
 800eb02:	464c      	movlt	r4, r9
 800eb04:	4699      	movlt	r9, r3
 800eb06:	6927      	ldr	r7, [r4, #16]
 800eb08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eb0c:	68a3      	ldr	r3, [r4, #8]
 800eb0e:	6861      	ldr	r1, [r4, #4]
 800eb10:	eb07 060a 	add.w	r6, r7, sl
 800eb14:	42b3      	cmp	r3, r6
 800eb16:	b085      	sub	sp, #20
 800eb18:	bfb8      	it	lt
 800eb1a:	3101      	addlt	r1, #1
 800eb1c:	f7ff feda 	bl	800e8d4 <_Balloc>
 800eb20:	b930      	cbnz	r0, 800eb30 <__multiply+0x44>
 800eb22:	4602      	mov	r2, r0
 800eb24:	4b44      	ldr	r3, [pc, #272]	; (800ec38 <__multiply+0x14c>)
 800eb26:	4845      	ldr	r0, [pc, #276]	; (800ec3c <__multiply+0x150>)
 800eb28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800eb2c:	f000 fb1a 	bl	800f164 <__assert_func>
 800eb30:	f100 0514 	add.w	r5, r0, #20
 800eb34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eb38:	462b      	mov	r3, r5
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	4543      	cmp	r3, r8
 800eb3e:	d321      	bcc.n	800eb84 <__multiply+0x98>
 800eb40:	f104 0314 	add.w	r3, r4, #20
 800eb44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800eb48:	f109 0314 	add.w	r3, r9, #20
 800eb4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800eb50:	9202      	str	r2, [sp, #8]
 800eb52:	1b3a      	subs	r2, r7, r4
 800eb54:	3a15      	subs	r2, #21
 800eb56:	f022 0203 	bic.w	r2, r2, #3
 800eb5a:	3204      	adds	r2, #4
 800eb5c:	f104 0115 	add.w	r1, r4, #21
 800eb60:	428f      	cmp	r7, r1
 800eb62:	bf38      	it	cc
 800eb64:	2204      	movcc	r2, #4
 800eb66:	9201      	str	r2, [sp, #4]
 800eb68:	9a02      	ldr	r2, [sp, #8]
 800eb6a:	9303      	str	r3, [sp, #12]
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d80c      	bhi.n	800eb8a <__multiply+0x9e>
 800eb70:	2e00      	cmp	r6, #0
 800eb72:	dd03      	ble.n	800eb7c <__multiply+0x90>
 800eb74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d05b      	beq.n	800ec34 <__multiply+0x148>
 800eb7c:	6106      	str	r6, [r0, #16]
 800eb7e:	b005      	add	sp, #20
 800eb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb84:	f843 2b04 	str.w	r2, [r3], #4
 800eb88:	e7d8      	b.n	800eb3c <__multiply+0x50>
 800eb8a:	f8b3 a000 	ldrh.w	sl, [r3]
 800eb8e:	f1ba 0f00 	cmp.w	sl, #0
 800eb92:	d024      	beq.n	800ebde <__multiply+0xf2>
 800eb94:	f104 0e14 	add.w	lr, r4, #20
 800eb98:	46a9      	mov	r9, r5
 800eb9a:	f04f 0c00 	mov.w	ip, #0
 800eb9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eba2:	f8d9 1000 	ldr.w	r1, [r9]
 800eba6:	fa1f fb82 	uxth.w	fp, r2
 800ebaa:	b289      	uxth	r1, r1
 800ebac:	fb0a 110b 	mla	r1, sl, fp, r1
 800ebb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ebb4:	f8d9 2000 	ldr.w	r2, [r9]
 800ebb8:	4461      	add	r1, ip
 800ebba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ebbe:	fb0a c20b 	mla	r2, sl, fp, ip
 800ebc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ebc6:	b289      	uxth	r1, r1
 800ebc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ebcc:	4577      	cmp	r7, lr
 800ebce:	f849 1b04 	str.w	r1, [r9], #4
 800ebd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ebd6:	d8e2      	bhi.n	800eb9e <__multiply+0xb2>
 800ebd8:	9a01      	ldr	r2, [sp, #4]
 800ebda:	f845 c002 	str.w	ip, [r5, r2]
 800ebde:	9a03      	ldr	r2, [sp, #12]
 800ebe0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ebe4:	3304      	adds	r3, #4
 800ebe6:	f1b9 0f00 	cmp.w	r9, #0
 800ebea:	d021      	beq.n	800ec30 <__multiply+0x144>
 800ebec:	6829      	ldr	r1, [r5, #0]
 800ebee:	f104 0c14 	add.w	ip, r4, #20
 800ebf2:	46ae      	mov	lr, r5
 800ebf4:	f04f 0a00 	mov.w	sl, #0
 800ebf8:	f8bc b000 	ldrh.w	fp, [ip]
 800ebfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ec00:	fb09 220b 	mla	r2, r9, fp, r2
 800ec04:	4452      	add	r2, sl
 800ec06:	b289      	uxth	r1, r1
 800ec08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ec0c:	f84e 1b04 	str.w	r1, [lr], #4
 800ec10:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ec14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ec18:	f8be 1000 	ldrh.w	r1, [lr]
 800ec1c:	fb09 110a 	mla	r1, r9, sl, r1
 800ec20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ec24:	4567      	cmp	r7, ip
 800ec26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ec2a:	d8e5      	bhi.n	800ebf8 <__multiply+0x10c>
 800ec2c:	9a01      	ldr	r2, [sp, #4]
 800ec2e:	50a9      	str	r1, [r5, r2]
 800ec30:	3504      	adds	r5, #4
 800ec32:	e799      	b.n	800eb68 <__multiply+0x7c>
 800ec34:	3e01      	subs	r6, #1
 800ec36:	e79b      	b.n	800eb70 <__multiply+0x84>
 800ec38:	0800f8a8 	.word	0x0800f8a8
 800ec3c:	0800f8b9 	.word	0x0800f8b9

0800ec40 <__pow5mult>:
 800ec40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec44:	4615      	mov	r5, r2
 800ec46:	f012 0203 	ands.w	r2, r2, #3
 800ec4a:	4606      	mov	r6, r0
 800ec4c:	460f      	mov	r7, r1
 800ec4e:	d007      	beq.n	800ec60 <__pow5mult+0x20>
 800ec50:	4c25      	ldr	r4, [pc, #148]	; (800ece8 <__pow5mult+0xa8>)
 800ec52:	3a01      	subs	r2, #1
 800ec54:	2300      	movs	r3, #0
 800ec56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ec5a:	f7ff fe9d 	bl	800e998 <__multadd>
 800ec5e:	4607      	mov	r7, r0
 800ec60:	10ad      	asrs	r5, r5, #2
 800ec62:	d03d      	beq.n	800ece0 <__pow5mult+0xa0>
 800ec64:	69f4      	ldr	r4, [r6, #28]
 800ec66:	b97c      	cbnz	r4, 800ec88 <__pow5mult+0x48>
 800ec68:	2010      	movs	r0, #16
 800ec6a:	f7ff fd7f 	bl	800e76c <malloc>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	61f0      	str	r0, [r6, #28]
 800ec72:	b928      	cbnz	r0, 800ec80 <__pow5mult+0x40>
 800ec74:	4b1d      	ldr	r3, [pc, #116]	; (800ecec <__pow5mult+0xac>)
 800ec76:	481e      	ldr	r0, [pc, #120]	; (800ecf0 <__pow5mult+0xb0>)
 800ec78:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ec7c:	f000 fa72 	bl	800f164 <__assert_func>
 800ec80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec84:	6004      	str	r4, [r0, #0]
 800ec86:	60c4      	str	r4, [r0, #12]
 800ec88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ec8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec90:	b94c      	cbnz	r4, 800eca6 <__pow5mult+0x66>
 800ec92:	f240 2171 	movw	r1, #625	; 0x271
 800ec96:	4630      	mov	r0, r6
 800ec98:	f7ff ff12 	bl	800eac0 <__i2b>
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800eca2:	4604      	mov	r4, r0
 800eca4:	6003      	str	r3, [r0, #0]
 800eca6:	f04f 0900 	mov.w	r9, #0
 800ecaa:	07eb      	lsls	r3, r5, #31
 800ecac:	d50a      	bpl.n	800ecc4 <__pow5mult+0x84>
 800ecae:	4639      	mov	r1, r7
 800ecb0:	4622      	mov	r2, r4
 800ecb2:	4630      	mov	r0, r6
 800ecb4:	f7ff ff1a 	bl	800eaec <__multiply>
 800ecb8:	4639      	mov	r1, r7
 800ecba:	4680      	mov	r8, r0
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	f7ff fe49 	bl	800e954 <_Bfree>
 800ecc2:	4647      	mov	r7, r8
 800ecc4:	106d      	asrs	r5, r5, #1
 800ecc6:	d00b      	beq.n	800ece0 <__pow5mult+0xa0>
 800ecc8:	6820      	ldr	r0, [r4, #0]
 800ecca:	b938      	cbnz	r0, 800ecdc <__pow5mult+0x9c>
 800eccc:	4622      	mov	r2, r4
 800ecce:	4621      	mov	r1, r4
 800ecd0:	4630      	mov	r0, r6
 800ecd2:	f7ff ff0b 	bl	800eaec <__multiply>
 800ecd6:	6020      	str	r0, [r4, #0]
 800ecd8:	f8c0 9000 	str.w	r9, [r0]
 800ecdc:	4604      	mov	r4, r0
 800ecde:	e7e4      	b.n	800ecaa <__pow5mult+0x6a>
 800ece0:	4638      	mov	r0, r7
 800ece2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ece6:	bf00      	nop
 800ece8:	0800fa08 	.word	0x0800fa08
 800ecec:	0800f839 	.word	0x0800f839
 800ecf0:	0800f8b9 	.word	0x0800f8b9

0800ecf4 <__lshift>:
 800ecf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecf8:	460c      	mov	r4, r1
 800ecfa:	6849      	ldr	r1, [r1, #4]
 800ecfc:	6923      	ldr	r3, [r4, #16]
 800ecfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ed02:	68a3      	ldr	r3, [r4, #8]
 800ed04:	4607      	mov	r7, r0
 800ed06:	4691      	mov	r9, r2
 800ed08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ed0c:	f108 0601 	add.w	r6, r8, #1
 800ed10:	42b3      	cmp	r3, r6
 800ed12:	db0b      	blt.n	800ed2c <__lshift+0x38>
 800ed14:	4638      	mov	r0, r7
 800ed16:	f7ff fddd 	bl	800e8d4 <_Balloc>
 800ed1a:	4605      	mov	r5, r0
 800ed1c:	b948      	cbnz	r0, 800ed32 <__lshift+0x3e>
 800ed1e:	4602      	mov	r2, r0
 800ed20:	4b28      	ldr	r3, [pc, #160]	; (800edc4 <__lshift+0xd0>)
 800ed22:	4829      	ldr	r0, [pc, #164]	; (800edc8 <__lshift+0xd4>)
 800ed24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ed28:	f000 fa1c 	bl	800f164 <__assert_func>
 800ed2c:	3101      	adds	r1, #1
 800ed2e:	005b      	lsls	r3, r3, #1
 800ed30:	e7ee      	b.n	800ed10 <__lshift+0x1c>
 800ed32:	2300      	movs	r3, #0
 800ed34:	f100 0114 	add.w	r1, r0, #20
 800ed38:	f100 0210 	add.w	r2, r0, #16
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	4553      	cmp	r3, sl
 800ed40:	db33      	blt.n	800edaa <__lshift+0xb6>
 800ed42:	6920      	ldr	r0, [r4, #16]
 800ed44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ed48:	f104 0314 	add.w	r3, r4, #20
 800ed4c:	f019 091f 	ands.w	r9, r9, #31
 800ed50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ed54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ed58:	d02b      	beq.n	800edb2 <__lshift+0xbe>
 800ed5a:	f1c9 0e20 	rsb	lr, r9, #32
 800ed5e:	468a      	mov	sl, r1
 800ed60:	2200      	movs	r2, #0
 800ed62:	6818      	ldr	r0, [r3, #0]
 800ed64:	fa00 f009 	lsl.w	r0, r0, r9
 800ed68:	4310      	orrs	r0, r2
 800ed6a:	f84a 0b04 	str.w	r0, [sl], #4
 800ed6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed72:	459c      	cmp	ip, r3
 800ed74:	fa22 f20e 	lsr.w	r2, r2, lr
 800ed78:	d8f3      	bhi.n	800ed62 <__lshift+0x6e>
 800ed7a:	ebac 0304 	sub.w	r3, ip, r4
 800ed7e:	3b15      	subs	r3, #21
 800ed80:	f023 0303 	bic.w	r3, r3, #3
 800ed84:	3304      	adds	r3, #4
 800ed86:	f104 0015 	add.w	r0, r4, #21
 800ed8a:	4584      	cmp	ip, r0
 800ed8c:	bf38      	it	cc
 800ed8e:	2304      	movcc	r3, #4
 800ed90:	50ca      	str	r2, [r1, r3]
 800ed92:	b10a      	cbz	r2, 800ed98 <__lshift+0xa4>
 800ed94:	f108 0602 	add.w	r6, r8, #2
 800ed98:	3e01      	subs	r6, #1
 800ed9a:	4638      	mov	r0, r7
 800ed9c:	612e      	str	r6, [r5, #16]
 800ed9e:	4621      	mov	r1, r4
 800eda0:	f7ff fdd8 	bl	800e954 <_Bfree>
 800eda4:	4628      	mov	r0, r5
 800eda6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800edae:	3301      	adds	r3, #1
 800edb0:	e7c5      	b.n	800ed3e <__lshift+0x4a>
 800edb2:	3904      	subs	r1, #4
 800edb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800edb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800edbc:	459c      	cmp	ip, r3
 800edbe:	d8f9      	bhi.n	800edb4 <__lshift+0xc0>
 800edc0:	e7ea      	b.n	800ed98 <__lshift+0xa4>
 800edc2:	bf00      	nop
 800edc4:	0800f8a8 	.word	0x0800f8a8
 800edc8:	0800f8b9 	.word	0x0800f8b9

0800edcc <__mcmp>:
 800edcc:	b530      	push	{r4, r5, lr}
 800edce:	6902      	ldr	r2, [r0, #16]
 800edd0:	690c      	ldr	r4, [r1, #16]
 800edd2:	1b12      	subs	r2, r2, r4
 800edd4:	d10e      	bne.n	800edf4 <__mcmp+0x28>
 800edd6:	f100 0314 	add.w	r3, r0, #20
 800edda:	3114      	adds	r1, #20
 800eddc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ede0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ede4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ede8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800edec:	42a5      	cmp	r5, r4
 800edee:	d003      	beq.n	800edf8 <__mcmp+0x2c>
 800edf0:	d305      	bcc.n	800edfe <__mcmp+0x32>
 800edf2:	2201      	movs	r2, #1
 800edf4:	4610      	mov	r0, r2
 800edf6:	bd30      	pop	{r4, r5, pc}
 800edf8:	4283      	cmp	r3, r0
 800edfa:	d3f3      	bcc.n	800ede4 <__mcmp+0x18>
 800edfc:	e7fa      	b.n	800edf4 <__mcmp+0x28>
 800edfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee02:	e7f7      	b.n	800edf4 <__mcmp+0x28>

0800ee04 <__mdiff>:
 800ee04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee08:	460c      	mov	r4, r1
 800ee0a:	4606      	mov	r6, r0
 800ee0c:	4611      	mov	r1, r2
 800ee0e:	4620      	mov	r0, r4
 800ee10:	4690      	mov	r8, r2
 800ee12:	f7ff ffdb 	bl	800edcc <__mcmp>
 800ee16:	1e05      	subs	r5, r0, #0
 800ee18:	d110      	bne.n	800ee3c <__mdiff+0x38>
 800ee1a:	4629      	mov	r1, r5
 800ee1c:	4630      	mov	r0, r6
 800ee1e:	f7ff fd59 	bl	800e8d4 <_Balloc>
 800ee22:	b930      	cbnz	r0, 800ee32 <__mdiff+0x2e>
 800ee24:	4b3a      	ldr	r3, [pc, #232]	; (800ef10 <__mdiff+0x10c>)
 800ee26:	4602      	mov	r2, r0
 800ee28:	f240 2137 	movw	r1, #567	; 0x237
 800ee2c:	4839      	ldr	r0, [pc, #228]	; (800ef14 <__mdiff+0x110>)
 800ee2e:	f000 f999 	bl	800f164 <__assert_func>
 800ee32:	2301      	movs	r3, #1
 800ee34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ee38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee3c:	bfa4      	itt	ge
 800ee3e:	4643      	movge	r3, r8
 800ee40:	46a0      	movge	r8, r4
 800ee42:	4630      	mov	r0, r6
 800ee44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ee48:	bfa6      	itte	ge
 800ee4a:	461c      	movge	r4, r3
 800ee4c:	2500      	movge	r5, #0
 800ee4e:	2501      	movlt	r5, #1
 800ee50:	f7ff fd40 	bl	800e8d4 <_Balloc>
 800ee54:	b920      	cbnz	r0, 800ee60 <__mdiff+0x5c>
 800ee56:	4b2e      	ldr	r3, [pc, #184]	; (800ef10 <__mdiff+0x10c>)
 800ee58:	4602      	mov	r2, r0
 800ee5a:	f240 2145 	movw	r1, #581	; 0x245
 800ee5e:	e7e5      	b.n	800ee2c <__mdiff+0x28>
 800ee60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ee64:	6926      	ldr	r6, [r4, #16]
 800ee66:	60c5      	str	r5, [r0, #12]
 800ee68:	f104 0914 	add.w	r9, r4, #20
 800ee6c:	f108 0514 	add.w	r5, r8, #20
 800ee70:	f100 0e14 	add.w	lr, r0, #20
 800ee74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ee78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ee7c:	f108 0210 	add.w	r2, r8, #16
 800ee80:	46f2      	mov	sl, lr
 800ee82:	2100      	movs	r1, #0
 800ee84:	f859 3b04 	ldr.w	r3, [r9], #4
 800ee88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ee8c:	fa11 f88b 	uxtah	r8, r1, fp
 800ee90:	b299      	uxth	r1, r3
 800ee92:	0c1b      	lsrs	r3, r3, #16
 800ee94:	eba8 0801 	sub.w	r8, r8, r1
 800ee98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ee9c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eea0:	fa1f f888 	uxth.w	r8, r8
 800eea4:	1419      	asrs	r1, r3, #16
 800eea6:	454e      	cmp	r6, r9
 800eea8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eeac:	f84a 3b04 	str.w	r3, [sl], #4
 800eeb0:	d8e8      	bhi.n	800ee84 <__mdiff+0x80>
 800eeb2:	1b33      	subs	r3, r6, r4
 800eeb4:	3b15      	subs	r3, #21
 800eeb6:	f023 0303 	bic.w	r3, r3, #3
 800eeba:	3304      	adds	r3, #4
 800eebc:	3415      	adds	r4, #21
 800eebe:	42a6      	cmp	r6, r4
 800eec0:	bf38      	it	cc
 800eec2:	2304      	movcc	r3, #4
 800eec4:	441d      	add	r5, r3
 800eec6:	4473      	add	r3, lr
 800eec8:	469e      	mov	lr, r3
 800eeca:	462e      	mov	r6, r5
 800eecc:	4566      	cmp	r6, ip
 800eece:	d30e      	bcc.n	800eeee <__mdiff+0xea>
 800eed0:	f10c 0203 	add.w	r2, ip, #3
 800eed4:	1b52      	subs	r2, r2, r5
 800eed6:	f022 0203 	bic.w	r2, r2, #3
 800eeda:	3d03      	subs	r5, #3
 800eedc:	45ac      	cmp	ip, r5
 800eede:	bf38      	it	cc
 800eee0:	2200      	movcc	r2, #0
 800eee2:	4413      	add	r3, r2
 800eee4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800eee8:	b17a      	cbz	r2, 800ef0a <__mdiff+0x106>
 800eeea:	6107      	str	r7, [r0, #16]
 800eeec:	e7a4      	b.n	800ee38 <__mdiff+0x34>
 800eeee:	f856 8b04 	ldr.w	r8, [r6], #4
 800eef2:	fa11 f288 	uxtah	r2, r1, r8
 800eef6:	1414      	asrs	r4, r2, #16
 800eef8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eefc:	b292      	uxth	r2, r2
 800eefe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ef02:	f84e 2b04 	str.w	r2, [lr], #4
 800ef06:	1421      	asrs	r1, r4, #16
 800ef08:	e7e0      	b.n	800eecc <__mdiff+0xc8>
 800ef0a:	3f01      	subs	r7, #1
 800ef0c:	e7ea      	b.n	800eee4 <__mdiff+0xe0>
 800ef0e:	bf00      	nop
 800ef10:	0800f8a8 	.word	0x0800f8a8
 800ef14:	0800f8b9 	.word	0x0800f8b9

0800ef18 <__d2b>:
 800ef18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ef1c:	460f      	mov	r7, r1
 800ef1e:	2101      	movs	r1, #1
 800ef20:	ec59 8b10 	vmov	r8, r9, d0
 800ef24:	4616      	mov	r6, r2
 800ef26:	f7ff fcd5 	bl	800e8d4 <_Balloc>
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	b930      	cbnz	r0, 800ef3c <__d2b+0x24>
 800ef2e:	4602      	mov	r2, r0
 800ef30:	4b24      	ldr	r3, [pc, #144]	; (800efc4 <__d2b+0xac>)
 800ef32:	4825      	ldr	r0, [pc, #148]	; (800efc8 <__d2b+0xb0>)
 800ef34:	f240 310f 	movw	r1, #783	; 0x30f
 800ef38:	f000 f914 	bl	800f164 <__assert_func>
 800ef3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ef40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ef44:	bb2d      	cbnz	r5, 800ef92 <__d2b+0x7a>
 800ef46:	9301      	str	r3, [sp, #4]
 800ef48:	f1b8 0300 	subs.w	r3, r8, #0
 800ef4c:	d026      	beq.n	800ef9c <__d2b+0x84>
 800ef4e:	4668      	mov	r0, sp
 800ef50:	9300      	str	r3, [sp, #0]
 800ef52:	f7ff fd87 	bl	800ea64 <__lo0bits>
 800ef56:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ef5a:	b1e8      	cbz	r0, 800ef98 <__d2b+0x80>
 800ef5c:	f1c0 0320 	rsb	r3, r0, #32
 800ef60:	fa02 f303 	lsl.w	r3, r2, r3
 800ef64:	430b      	orrs	r3, r1
 800ef66:	40c2      	lsrs	r2, r0
 800ef68:	6163      	str	r3, [r4, #20]
 800ef6a:	9201      	str	r2, [sp, #4]
 800ef6c:	9b01      	ldr	r3, [sp, #4]
 800ef6e:	61a3      	str	r3, [r4, #24]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	bf14      	ite	ne
 800ef74:	2202      	movne	r2, #2
 800ef76:	2201      	moveq	r2, #1
 800ef78:	6122      	str	r2, [r4, #16]
 800ef7a:	b1bd      	cbz	r5, 800efac <__d2b+0x94>
 800ef7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ef80:	4405      	add	r5, r0
 800ef82:	603d      	str	r5, [r7, #0]
 800ef84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ef88:	6030      	str	r0, [r6, #0]
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	b003      	add	sp, #12
 800ef8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ef96:	e7d6      	b.n	800ef46 <__d2b+0x2e>
 800ef98:	6161      	str	r1, [r4, #20]
 800ef9a:	e7e7      	b.n	800ef6c <__d2b+0x54>
 800ef9c:	a801      	add	r0, sp, #4
 800ef9e:	f7ff fd61 	bl	800ea64 <__lo0bits>
 800efa2:	9b01      	ldr	r3, [sp, #4]
 800efa4:	6163      	str	r3, [r4, #20]
 800efa6:	3020      	adds	r0, #32
 800efa8:	2201      	movs	r2, #1
 800efaa:	e7e5      	b.n	800ef78 <__d2b+0x60>
 800efac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800efb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800efb4:	6038      	str	r0, [r7, #0]
 800efb6:	6918      	ldr	r0, [r3, #16]
 800efb8:	f7ff fd34 	bl	800ea24 <__hi0bits>
 800efbc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800efc0:	e7e2      	b.n	800ef88 <__d2b+0x70>
 800efc2:	bf00      	nop
 800efc4:	0800f8a8 	.word	0x0800f8a8
 800efc8:	0800f8b9 	.word	0x0800f8b9

0800efcc <__sflush_r>:
 800efcc:	898a      	ldrh	r2, [r1, #12]
 800efce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efd2:	4605      	mov	r5, r0
 800efd4:	0710      	lsls	r0, r2, #28
 800efd6:	460c      	mov	r4, r1
 800efd8:	d458      	bmi.n	800f08c <__sflush_r+0xc0>
 800efda:	684b      	ldr	r3, [r1, #4]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	dc05      	bgt.n	800efec <__sflush_r+0x20>
 800efe0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	dc02      	bgt.n	800efec <__sflush_r+0x20>
 800efe6:	2000      	movs	r0, #0
 800efe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efee:	2e00      	cmp	r6, #0
 800eff0:	d0f9      	beq.n	800efe6 <__sflush_r+0x1a>
 800eff2:	2300      	movs	r3, #0
 800eff4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eff8:	682f      	ldr	r7, [r5, #0]
 800effa:	6a21      	ldr	r1, [r4, #32]
 800effc:	602b      	str	r3, [r5, #0]
 800effe:	d032      	beq.n	800f066 <__sflush_r+0x9a>
 800f000:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f002:	89a3      	ldrh	r3, [r4, #12]
 800f004:	075a      	lsls	r2, r3, #29
 800f006:	d505      	bpl.n	800f014 <__sflush_r+0x48>
 800f008:	6863      	ldr	r3, [r4, #4]
 800f00a:	1ac0      	subs	r0, r0, r3
 800f00c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f00e:	b10b      	cbz	r3, 800f014 <__sflush_r+0x48>
 800f010:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f012:	1ac0      	subs	r0, r0, r3
 800f014:	2300      	movs	r3, #0
 800f016:	4602      	mov	r2, r0
 800f018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f01a:	6a21      	ldr	r1, [r4, #32]
 800f01c:	4628      	mov	r0, r5
 800f01e:	47b0      	blx	r6
 800f020:	1c43      	adds	r3, r0, #1
 800f022:	89a3      	ldrh	r3, [r4, #12]
 800f024:	d106      	bne.n	800f034 <__sflush_r+0x68>
 800f026:	6829      	ldr	r1, [r5, #0]
 800f028:	291d      	cmp	r1, #29
 800f02a:	d82b      	bhi.n	800f084 <__sflush_r+0xb8>
 800f02c:	4a29      	ldr	r2, [pc, #164]	; (800f0d4 <__sflush_r+0x108>)
 800f02e:	410a      	asrs	r2, r1
 800f030:	07d6      	lsls	r6, r2, #31
 800f032:	d427      	bmi.n	800f084 <__sflush_r+0xb8>
 800f034:	2200      	movs	r2, #0
 800f036:	6062      	str	r2, [r4, #4]
 800f038:	04d9      	lsls	r1, r3, #19
 800f03a:	6922      	ldr	r2, [r4, #16]
 800f03c:	6022      	str	r2, [r4, #0]
 800f03e:	d504      	bpl.n	800f04a <__sflush_r+0x7e>
 800f040:	1c42      	adds	r2, r0, #1
 800f042:	d101      	bne.n	800f048 <__sflush_r+0x7c>
 800f044:	682b      	ldr	r3, [r5, #0]
 800f046:	b903      	cbnz	r3, 800f04a <__sflush_r+0x7e>
 800f048:	6560      	str	r0, [r4, #84]	; 0x54
 800f04a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f04c:	602f      	str	r7, [r5, #0]
 800f04e:	2900      	cmp	r1, #0
 800f050:	d0c9      	beq.n	800efe6 <__sflush_r+0x1a>
 800f052:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f056:	4299      	cmp	r1, r3
 800f058:	d002      	beq.n	800f060 <__sflush_r+0x94>
 800f05a:	4628      	mov	r0, r5
 800f05c:	f7ff fb3a 	bl	800e6d4 <_free_r>
 800f060:	2000      	movs	r0, #0
 800f062:	6360      	str	r0, [r4, #52]	; 0x34
 800f064:	e7c0      	b.n	800efe8 <__sflush_r+0x1c>
 800f066:	2301      	movs	r3, #1
 800f068:	4628      	mov	r0, r5
 800f06a:	47b0      	blx	r6
 800f06c:	1c41      	adds	r1, r0, #1
 800f06e:	d1c8      	bne.n	800f002 <__sflush_r+0x36>
 800f070:	682b      	ldr	r3, [r5, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d0c5      	beq.n	800f002 <__sflush_r+0x36>
 800f076:	2b1d      	cmp	r3, #29
 800f078:	d001      	beq.n	800f07e <__sflush_r+0xb2>
 800f07a:	2b16      	cmp	r3, #22
 800f07c:	d101      	bne.n	800f082 <__sflush_r+0xb6>
 800f07e:	602f      	str	r7, [r5, #0]
 800f080:	e7b1      	b.n	800efe6 <__sflush_r+0x1a>
 800f082:	89a3      	ldrh	r3, [r4, #12]
 800f084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f088:	81a3      	strh	r3, [r4, #12]
 800f08a:	e7ad      	b.n	800efe8 <__sflush_r+0x1c>
 800f08c:	690f      	ldr	r7, [r1, #16]
 800f08e:	2f00      	cmp	r7, #0
 800f090:	d0a9      	beq.n	800efe6 <__sflush_r+0x1a>
 800f092:	0793      	lsls	r3, r2, #30
 800f094:	680e      	ldr	r6, [r1, #0]
 800f096:	bf08      	it	eq
 800f098:	694b      	ldreq	r3, [r1, #20]
 800f09a:	600f      	str	r7, [r1, #0]
 800f09c:	bf18      	it	ne
 800f09e:	2300      	movne	r3, #0
 800f0a0:	eba6 0807 	sub.w	r8, r6, r7
 800f0a4:	608b      	str	r3, [r1, #8]
 800f0a6:	f1b8 0f00 	cmp.w	r8, #0
 800f0aa:	dd9c      	ble.n	800efe6 <__sflush_r+0x1a>
 800f0ac:	6a21      	ldr	r1, [r4, #32]
 800f0ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f0b0:	4643      	mov	r3, r8
 800f0b2:	463a      	mov	r2, r7
 800f0b4:	4628      	mov	r0, r5
 800f0b6:	47b0      	blx	r6
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	dc06      	bgt.n	800f0ca <__sflush_r+0xfe>
 800f0bc:	89a3      	ldrh	r3, [r4, #12]
 800f0be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0c2:	81a3      	strh	r3, [r4, #12]
 800f0c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0c8:	e78e      	b.n	800efe8 <__sflush_r+0x1c>
 800f0ca:	4407      	add	r7, r0
 800f0cc:	eba8 0800 	sub.w	r8, r8, r0
 800f0d0:	e7e9      	b.n	800f0a6 <__sflush_r+0xda>
 800f0d2:	bf00      	nop
 800f0d4:	dfbffffe 	.word	0xdfbffffe

0800f0d8 <_fflush_r>:
 800f0d8:	b538      	push	{r3, r4, r5, lr}
 800f0da:	690b      	ldr	r3, [r1, #16]
 800f0dc:	4605      	mov	r5, r0
 800f0de:	460c      	mov	r4, r1
 800f0e0:	b913      	cbnz	r3, 800f0e8 <_fflush_r+0x10>
 800f0e2:	2500      	movs	r5, #0
 800f0e4:	4628      	mov	r0, r5
 800f0e6:	bd38      	pop	{r3, r4, r5, pc}
 800f0e8:	b118      	cbz	r0, 800f0f2 <_fflush_r+0x1a>
 800f0ea:	6a03      	ldr	r3, [r0, #32]
 800f0ec:	b90b      	cbnz	r3, 800f0f2 <_fflush_r+0x1a>
 800f0ee:	f7fe fb7b 	bl	800d7e8 <__sinit>
 800f0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d0f3      	beq.n	800f0e2 <_fflush_r+0xa>
 800f0fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f0fc:	07d0      	lsls	r0, r2, #31
 800f0fe:	d404      	bmi.n	800f10a <_fflush_r+0x32>
 800f100:	0599      	lsls	r1, r3, #22
 800f102:	d402      	bmi.n	800f10a <_fflush_r+0x32>
 800f104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f106:	f7fe fc66 	bl	800d9d6 <__retarget_lock_acquire_recursive>
 800f10a:	4628      	mov	r0, r5
 800f10c:	4621      	mov	r1, r4
 800f10e:	f7ff ff5d 	bl	800efcc <__sflush_r>
 800f112:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f114:	07da      	lsls	r2, r3, #31
 800f116:	4605      	mov	r5, r0
 800f118:	d4e4      	bmi.n	800f0e4 <_fflush_r+0xc>
 800f11a:	89a3      	ldrh	r3, [r4, #12]
 800f11c:	059b      	lsls	r3, r3, #22
 800f11e:	d4e1      	bmi.n	800f0e4 <_fflush_r+0xc>
 800f120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f122:	f7fe fc59 	bl	800d9d8 <__retarget_lock_release_recursive>
 800f126:	e7dd      	b.n	800f0e4 <_fflush_r+0xc>

0800f128 <_sbrk_r>:
 800f128:	b538      	push	{r3, r4, r5, lr}
 800f12a:	4d06      	ldr	r5, [pc, #24]	; (800f144 <_sbrk_r+0x1c>)
 800f12c:	2300      	movs	r3, #0
 800f12e:	4604      	mov	r4, r0
 800f130:	4608      	mov	r0, r1
 800f132:	602b      	str	r3, [r5, #0]
 800f134:	f7f3 f88e 	bl	8002254 <_sbrk>
 800f138:	1c43      	adds	r3, r0, #1
 800f13a:	d102      	bne.n	800f142 <_sbrk_r+0x1a>
 800f13c:	682b      	ldr	r3, [r5, #0]
 800f13e:	b103      	cbz	r3, 800f142 <_sbrk_r+0x1a>
 800f140:	6023      	str	r3, [r4, #0]
 800f142:	bd38      	pop	{r3, r4, r5, pc}
 800f144:	20002498 	.word	0x20002498

0800f148 <memcpy>:
 800f148:	440a      	add	r2, r1
 800f14a:	4291      	cmp	r1, r2
 800f14c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f150:	d100      	bne.n	800f154 <memcpy+0xc>
 800f152:	4770      	bx	lr
 800f154:	b510      	push	{r4, lr}
 800f156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f15a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f15e:	4291      	cmp	r1, r2
 800f160:	d1f9      	bne.n	800f156 <memcpy+0xe>
 800f162:	bd10      	pop	{r4, pc}

0800f164 <__assert_func>:
 800f164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f166:	4614      	mov	r4, r2
 800f168:	461a      	mov	r2, r3
 800f16a:	4b09      	ldr	r3, [pc, #36]	; (800f190 <__assert_func+0x2c>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	4605      	mov	r5, r0
 800f170:	68d8      	ldr	r0, [r3, #12]
 800f172:	b14c      	cbz	r4, 800f188 <__assert_func+0x24>
 800f174:	4b07      	ldr	r3, [pc, #28]	; (800f194 <__assert_func+0x30>)
 800f176:	9100      	str	r1, [sp, #0]
 800f178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f17c:	4906      	ldr	r1, [pc, #24]	; (800f198 <__assert_func+0x34>)
 800f17e:	462b      	mov	r3, r5
 800f180:	f000 f844 	bl	800f20c <fiprintf>
 800f184:	f000 f854 	bl	800f230 <abort>
 800f188:	4b04      	ldr	r3, [pc, #16]	; (800f19c <__assert_func+0x38>)
 800f18a:	461c      	mov	r4, r3
 800f18c:	e7f3      	b.n	800f176 <__assert_func+0x12>
 800f18e:	bf00      	nop
 800f190:	20000178 	.word	0x20000178
 800f194:	0800fa1e 	.word	0x0800fa1e
 800f198:	0800fa2b 	.word	0x0800fa2b
 800f19c:	0800fa59 	.word	0x0800fa59

0800f1a0 <_calloc_r>:
 800f1a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1a2:	fba1 2402 	umull	r2, r4, r1, r2
 800f1a6:	b94c      	cbnz	r4, 800f1bc <_calloc_r+0x1c>
 800f1a8:	4611      	mov	r1, r2
 800f1aa:	9201      	str	r2, [sp, #4]
 800f1ac:	f7ff fb06 	bl	800e7bc <_malloc_r>
 800f1b0:	9a01      	ldr	r2, [sp, #4]
 800f1b2:	4605      	mov	r5, r0
 800f1b4:	b930      	cbnz	r0, 800f1c4 <_calloc_r+0x24>
 800f1b6:	4628      	mov	r0, r5
 800f1b8:	b003      	add	sp, #12
 800f1ba:	bd30      	pop	{r4, r5, pc}
 800f1bc:	220c      	movs	r2, #12
 800f1be:	6002      	str	r2, [r0, #0]
 800f1c0:	2500      	movs	r5, #0
 800f1c2:	e7f8      	b.n	800f1b6 <_calloc_r+0x16>
 800f1c4:	4621      	mov	r1, r4
 800f1c6:	f7fe fb88 	bl	800d8da <memset>
 800f1ca:	e7f4      	b.n	800f1b6 <_calloc_r+0x16>

0800f1cc <__ascii_mbtowc>:
 800f1cc:	b082      	sub	sp, #8
 800f1ce:	b901      	cbnz	r1, 800f1d2 <__ascii_mbtowc+0x6>
 800f1d0:	a901      	add	r1, sp, #4
 800f1d2:	b142      	cbz	r2, 800f1e6 <__ascii_mbtowc+0x1a>
 800f1d4:	b14b      	cbz	r3, 800f1ea <__ascii_mbtowc+0x1e>
 800f1d6:	7813      	ldrb	r3, [r2, #0]
 800f1d8:	600b      	str	r3, [r1, #0]
 800f1da:	7812      	ldrb	r2, [r2, #0]
 800f1dc:	1e10      	subs	r0, r2, #0
 800f1de:	bf18      	it	ne
 800f1e0:	2001      	movne	r0, #1
 800f1e2:	b002      	add	sp, #8
 800f1e4:	4770      	bx	lr
 800f1e6:	4610      	mov	r0, r2
 800f1e8:	e7fb      	b.n	800f1e2 <__ascii_mbtowc+0x16>
 800f1ea:	f06f 0001 	mvn.w	r0, #1
 800f1ee:	e7f8      	b.n	800f1e2 <__ascii_mbtowc+0x16>

0800f1f0 <__ascii_wctomb>:
 800f1f0:	b149      	cbz	r1, 800f206 <__ascii_wctomb+0x16>
 800f1f2:	2aff      	cmp	r2, #255	; 0xff
 800f1f4:	bf85      	ittet	hi
 800f1f6:	238a      	movhi	r3, #138	; 0x8a
 800f1f8:	6003      	strhi	r3, [r0, #0]
 800f1fa:	700a      	strbls	r2, [r1, #0]
 800f1fc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f200:	bf98      	it	ls
 800f202:	2001      	movls	r0, #1
 800f204:	4770      	bx	lr
 800f206:	4608      	mov	r0, r1
 800f208:	4770      	bx	lr
	...

0800f20c <fiprintf>:
 800f20c:	b40e      	push	{r1, r2, r3}
 800f20e:	b503      	push	{r0, r1, lr}
 800f210:	4601      	mov	r1, r0
 800f212:	ab03      	add	r3, sp, #12
 800f214:	4805      	ldr	r0, [pc, #20]	; (800f22c <fiprintf+0x20>)
 800f216:	f853 2b04 	ldr.w	r2, [r3], #4
 800f21a:	6800      	ldr	r0, [r0, #0]
 800f21c:	9301      	str	r3, [sp, #4]
 800f21e:	f000 f837 	bl	800f290 <_vfiprintf_r>
 800f222:	b002      	add	sp, #8
 800f224:	f85d eb04 	ldr.w	lr, [sp], #4
 800f228:	b003      	add	sp, #12
 800f22a:	4770      	bx	lr
 800f22c:	20000178 	.word	0x20000178

0800f230 <abort>:
 800f230:	b508      	push	{r3, lr}
 800f232:	2006      	movs	r0, #6
 800f234:	f000 fa04 	bl	800f640 <raise>
 800f238:	2001      	movs	r0, #1
 800f23a:	f7f2 ff93 	bl	8002164 <_exit>

0800f23e <__sfputc_r>:
 800f23e:	6893      	ldr	r3, [r2, #8]
 800f240:	3b01      	subs	r3, #1
 800f242:	2b00      	cmp	r3, #0
 800f244:	b410      	push	{r4}
 800f246:	6093      	str	r3, [r2, #8]
 800f248:	da08      	bge.n	800f25c <__sfputc_r+0x1e>
 800f24a:	6994      	ldr	r4, [r2, #24]
 800f24c:	42a3      	cmp	r3, r4
 800f24e:	db01      	blt.n	800f254 <__sfputc_r+0x16>
 800f250:	290a      	cmp	r1, #10
 800f252:	d103      	bne.n	800f25c <__sfputc_r+0x1e>
 800f254:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f258:	f000 b934 	b.w	800f4c4 <__swbuf_r>
 800f25c:	6813      	ldr	r3, [r2, #0]
 800f25e:	1c58      	adds	r0, r3, #1
 800f260:	6010      	str	r0, [r2, #0]
 800f262:	7019      	strb	r1, [r3, #0]
 800f264:	4608      	mov	r0, r1
 800f266:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f26a:	4770      	bx	lr

0800f26c <__sfputs_r>:
 800f26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f26e:	4606      	mov	r6, r0
 800f270:	460f      	mov	r7, r1
 800f272:	4614      	mov	r4, r2
 800f274:	18d5      	adds	r5, r2, r3
 800f276:	42ac      	cmp	r4, r5
 800f278:	d101      	bne.n	800f27e <__sfputs_r+0x12>
 800f27a:	2000      	movs	r0, #0
 800f27c:	e007      	b.n	800f28e <__sfputs_r+0x22>
 800f27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f282:	463a      	mov	r2, r7
 800f284:	4630      	mov	r0, r6
 800f286:	f7ff ffda 	bl	800f23e <__sfputc_r>
 800f28a:	1c43      	adds	r3, r0, #1
 800f28c:	d1f3      	bne.n	800f276 <__sfputs_r+0xa>
 800f28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f290 <_vfiprintf_r>:
 800f290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f294:	460d      	mov	r5, r1
 800f296:	b09d      	sub	sp, #116	; 0x74
 800f298:	4614      	mov	r4, r2
 800f29a:	4698      	mov	r8, r3
 800f29c:	4606      	mov	r6, r0
 800f29e:	b118      	cbz	r0, 800f2a8 <_vfiprintf_r+0x18>
 800f2a0:	6a03      	ldr	r3, [r0, #32]
 800f2a2:	b90b      	cbnz	r3, 800f2a8 <_vfiprintf_r+0x18>
 800f2a4:	f7fe faa0 	bl	800d7e8 <__sinit>
 800f2a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2aa:	07d9      	lsls	r1, r3, #31
 800f2ac:	d405      	bmi.n	800f2ba <_vfiprintf_r+0x2a>
 800f2ae:	89ab      	ldrh	r3, [r5, #12]
 800f2b0:	059a      	lsls	r2, r3, #22
 800f2b2:	d402      	bmi.n	800f2ba <_vfiprintf_r+0x2a>
 800f2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2b6:	f7fe fb8e 	bl	800d9d6 <__retarget_lock_acquire_recursive>
 800f2ba:	89ab      	ldrh	r3, [r5, #12]
 800f2bc:	071b      	lsls	r3, r3, #28
 800f2be:	d501      	bpl.n	800f2c4 <_vfiprintf_r+0x34>
 800f2c0:	692b      	ldr	r3, [r5, #16]
 800f2c2:	b99b      	cbnz	r3, 800f2ec <_vfiprintf_r+0x5c>
 800f2c4:	4629      	mov	r1, r5
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	f000 f93a 	bl	800f540 <__swsetup_r>
 800f2cc:	b170      	cbz	r0, 800f2ec <_vfiprintf_r+0x5c>
 800f2ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2d0:	07dc      	lsls	r4, r3, #31
 800f2d2:	d504      	bpl.n	800f2de <_vfiprintf_r+0x4e>
 800f2d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2d8:	b01d      	add	sp, #116	; 0x74
 800f2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2de:	89ab      	ldrh	r3, [r5, #12]
 800f2e0:	0598      	lsls	r0, r3, #22
 800f2e2:	d4f7      	bmi.n	800f2d4 <_vfiprintf_r+0x44>
 800f2e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2e6:	f7fe fb77 	bl	800d9d8 <__retarget_lock_release_recursive>
 800f2ea:	e7f3      	b.n	800f2d4 <_vfiprintf_r+0x44>
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	9309      	str	r3, [sp, #36]	; 0x24
 800f2f0:	2320      	movs	r3, #32
 800f2f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2fa:	2330      	movs	r3, #48	; 0x30
 800f2fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f4b0 <_vfiprintf_r+0x220>
 800f300:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f304:	f04f 0901 	mov.w	r9, #1
 800f308:	4623      	mov	r3, r4
 800f30a:	469a      	mov	sl, r3
 800f30c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f310:	b10a      	cbz	r2, 800f316 <_vfiprintf_r+0x86>
 800f312:	2a25      	cmp	r2, #37	; 0x25
 800f314:	d1f9      	bne.n	800f30a <_vfiprintf_r+0x7a>
 800f316:	ebba 0b04 	subs.w	fp, sl, r4
 800f31a:	d00b      	beq.n	800f334 <_vfiprintf_r+0xa4>
 800f31c:	465b      	mov	r3, fp
 800f31e:	4622      	mov	r2, r4
 800f320:	4629      	mov	r1, r5
 800f322:	4630      	mov	r0, r6
 800f324:	f7ff ffa2 	bl	800f26c <__sfputs_r>
 800f328:	3001      	adds	r0, #1
 800f32a:	f000 80a9 	beq.w	800f480 <_vfiprintf_r+0x1f0>
 800f32e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f330:	445a      	add	r2, fp
 800f332:	9209      	str	r2, [sp, #36]	; 0x24
 800f334:	f89a 3000 	ldrb.w	r3, [sl]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	f000 80a1 	beq.w	800f480 <_vfiprintf_r+0x1f0>
 800f33e:	2300      	movs	r3, #0
 800f340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f348:	f10a 0a01 	add.w	sl, sl, #1
 800f34c:	9304      	str	r3, [sp, #16]
 800f34e:	9307      	str	r3, [sp, #28]
 800f350:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f354:	931a      	str	r3, [sp, #104]	; 0x68
 800f356:	4654      	mov	r4, sl
 800f358:	2205      	movs	r2, #5
 800f35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f35e:	4854      	ldr	r0, [pc, #336]	; (800f4b0 <_vfiprintf_r+0x220>)
 800f360:	f7f0 ff3e 	bl	80001e0 <memchr>
 800f364:	9a04      	ldr	r2, [sp, #16]
 800f366:	b9d8      	cbnz	r0, 800f3a0 <_vfiprintf_r+0x110>
 800f368:	06d1      	lsls	r1, r2, #27
 800f36a:	bf44      	itt	mi
 800f36c:	2320      	movmi	r3, #32
 800f36e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f372:	0713      	lsls	r3, r2, #28
 800f374:	bf44      	itt	mi
 800f376:	232b      	movmi	r3, #43	; 0x2b
 800f378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f37c:	f89a 3000 	ldrb.w	r3, [sl]
 800f380:	2b2a      	cmp	r3, #42	; 0x2a
 800f382:	d015      	beq.n	800f3b0 <_vfiprintf_r+0x120>
 800f384:	9a07      	ldr	r2, [sp, #28]
 800f386:	4654      	mov	r4, sl
 800f388:	2000      	movs	r0, #0
 800f38a:	f04f 0c0a 	mov.w	ip, #10
 800f38e:	4621      	mov	r1, r4
 800f390:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f394:	3b30      	subs	r3, #48	; 0x30
 800f396:	2b09      	cmp	r3, #9
 800f398:	d94d      	bls.n	800f436 <_vfiprintf_r+0x1a6>
 800f39a:	b1b0      	cbz	r0, 800f3ca <_vfiprintf_r+0x13a>
 800f39c:	9207      	str	r2, [sp, #28]
 800f39e:	e014      	b.n	800f3ca <_vfiprintf_r+0x13a>
 800f3a0:	eba0 0308 	sub.w	r3, r0, r8
 800f3a4:	fa09 f303 	lsl.w	r3, r9, r3
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	9304      	str	r3, [sp, #16]
 800f3ac:	46a2      	mov	sl, r4
 800f3ae:	e7d2      	b.n	800f356 <_vfiprintf_r+0xc6>
 800f3b0:	9b03      	ldr	r3, [sp, #12]
 800f3b2:	1d19      	adds	r1, r3, #4
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	9103      	str	r1, [sp, #12]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	bfbb      	ittet	lt
 800f3bc:	425b      	neglt	r3, r3
 800f3be:	f042 0202 	orrlt.w	r2, r2, #2
 800f3c2:	9307      	strge	r3, [sp, #28]
 800f3c4:	9307      	strlt	r3, [sp, #28]
 800f3c6:	bfb8      	it	lt
 800f3c8:	9204      	strlt	r2, [sp, #16]
 800f3ca:	7823      	ldrb	r3, [r4, #0]
 800f3cc:	2b2e      	cmp	r3, #46	; 0x2e
 800f3ce:	d10c      	bne.n	800f3ea <_vfiprintf_r+0x15a>
 800f3d0:	7863      	ldrb	r3, [r4, #1]
 800f3d2:	2b2a      	cmp	r3, #42	; 0x2a
 800f3d4:	d134      	bne.n	800f440 <_vfiprintf_r+0x1b0>
 800f3d6:	9b03      	ldr	r3, [sp, #12]
 800f3d8:	1d1a      	adds	r2, r3, #4
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	9203      	str	r2, [sp, #12]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	bfb8      	it	lt
 800f3e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f3e6:	3402      	adds	r4, #2
 800f3e8:	9305      	str	r3, [sp, #20]
 800f3ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f4c0 <_vfiprintf_r+0x230>
 800f3ee:	7821      	ldrb	r1, [r4, #0]
 800f3f0:	2203      	movs	r2, #3
 800f3f2:	4650      	mov	r0, sl
 800f3f4:	f7f0 fef4 	bl	80001e0 <memchr>
 800f3f8:	b138      	cbz	r0, 800f40a <_vfiprintf_r+0x17a>
 800f3fa:	9b04      	ldr	r3, [sp, #16]
 800f3fc:	eba0 000a 	sub.w	r0, r0, sl
 800f400:	2240      	movs	r2, #64	; 0x40
 800f402:	4082      	lsls	r2, r0
 800f404:	4313      	orrs	r3, r2
 800f406:	3401      	adds	r4, #1
 800f408:	9304      	str	r3, [sp, #16]
 800f40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f40e:	4829      	ldr	r0, [pc, #164]	; (800f4b4 <_vfiprintf_r+0x224>)
 800f410:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f414:	2206      	movs	r2, #6
 800f416:	f7f0 fee3 	bl	80001e0 <memchr>
 800f41a:	2800      	cmp	r0, #0
 800f41c:	d03f      	beq.n	800f49e <_vfiprintf_r+0x20e>
 800f41e:	4b26      	ldr	r3, [pc, #152]	; (800f4b8 <_vfiprintf_r+0x228>)
 800f420:	bb1b      	cbnz	r3, 800f46a <_vfiprintf_r+0x1da>
 800f422:	9b03      	ldr	r3, [sp, #12]
 800f424:	3307      	adds	r3, #7
 800f426:	f023 0307 	bic.w	r3, r3, #7
 800f42a:	3308      	adds	r3, #8
 800f42c:	9303      	str	r3, [sp, #12]
 800f42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f430:	443b      	add	r3, r7
 800f432:	9309      	str	r3, [sp, #36]	; 0x24
 800f434:	e768      	b.n	800f308 <_vfiprintf_r+0x78>
 800f436:	fb0c 3202 	mla	r2, ip, r2, r3
 800f43a:	460c      	mov	r4, r1
 800f43c:	2001      	movs	r0, #1
 800f43e:	e7a6      	b.n	800f38e <_vfiprintf_r+0xfe>
 800f440:	2300      	movs	r3, #0
 800f442:	3401      	adds	r4, #1
 800f444:	9305      	str	r3, [sp, #20]
 800f446:	4619      	mov	r1, r3
 800f448:	f04f 0c0a 	mov.w	ip, #10
 800f44c:	4620      	mov	r0, r4
 800f44e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f452:	3a30      	subs	r2, #48	; 0x30
 800f454:	2a09      	cmp	r2, #9
 800f456:	d903      	bls.n	800f460 <_vfiprintf_r+0x1d0>
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d0c6      	beq.n	800f3ea <_vfiprintf_r+0x15a>
 800f45c:	9105      	str	r1, [sp, #20]
 800f45e:	e7c4      	b.n	800f3ea <_vfiprintf_r+0x15a>
 800f460:	fb0c 2101 	mla	r1, ip, r1, r2
 800f464:	4604      	mov	r4, r0
 800f466:	2301      	movs	r3, #1
 800f468:	e7f0      	b.n	800f44c <_vfiprintf_r+0x1bc>
 800f46a:	ab03      	add	r3, sp, #12
 800f46c:	9300      	str	r3, [sp, #0]
 800f46e:	462a      	mov	r2, r5
 800f470:	4b12      	ldr	r3, [pc, #72]	; (800f4bc <_vfiprintf_r+0x22c>)
 800f472:	a904      	add	r1, sp, #16
 800f474:	4630      	mov	r0, r6
 800f476:	f7fd fd65 	bl	800cf44 <_printf_float>
 800f47a:	4607      	mov	r7, r0
 800f47c:	1c78      	adds	r0, r7, #1
 800f47e:	d1d6      	bne.n	800f42e <_vfiprintf_r+0x19e>
 800f480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f482:	07d9      	lsls	r1, r3, #31
 800f484:	d405      	bmi.n	800f492 <_vfiprintf_r+0x202>
 800f486:	89ab      	ldrh	r3, [r5, #12]
 800f488:	059a      	lsls	r2, r3, #22
 800f48a:	d402      	bmi.n	800f492 <_vfiprintf_r+0x202>
 800f48c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f48e:	f7fe faa3 	bl	800d9d8 <__retarget_lock_release_recursive>
 800f492:	89ab      	ldrh	r3, [r5, #12]
 800f494:	065b      	lsls	r3, r3, #25
 800f496:	f53f af1d 	bmi.w	800f2d4 <_vfiprintf_r+0x44>
 800f49a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f49c:	e71c      	b.n	800f2d8 <_vfiprintf_r+0x48>
 800f49e:	ab03      	add	r3, sp, #12
 800f4a0:	9300      	str	r3, [sp, #0]
 800f4a2:	462a      	mov	r2, r5
 800f4a4:	4b05      	ldr	r3, [pc, #20]	; (800f4bc <_vfiprintf_r+0x22c>)
 800f4a6:	a904      	add	r1, sp, #16
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	f7fd ffef 	bl	800d48c <_printf_i>
 800f4ae:	e7e4      	b.n	800f47a <_vfiprintf_r+0x1ea>
 800f4b0:	0800fb5b 	.word	0x0800fb5b
 800f4b4:	0800fb65 	.word	0x0800fb65
 800f4b8:	0800cf45 	.word	0x0800cf45
 800f4bc:	0800f26d 	.word	0x0800f26d
 800f4c0:	0800fb61 	.word	0x0800fb61

0800f4c4 <__swbuf_r>:
 800f4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c6:	460e      	mov	r6, r1
 800f4c8:	4614      	mov	r4, r2
 800f4ca:	4605      	mov	r5, r0
 800f4cc:	b118      	cbz	r0, 800f4d6 <__swbuf_r+0x12>
 800f4ce:	6a03      	ldr	r3, [r0, #32]
 800f4d0:	b90b      	cbnz	r3, 800f4d6 <__swbuf_r+0x12>
 800f4d2:	f7fe f989 	bl	800d7e8 <__sinit>
 800f4d6:	69a3      	ldr	r3, [r4, #24]
 800f4d8:	60a3      	str	r3, [r4, #8]
 800f4da:	89a3      	ldrh	r3, [r4, #12]
 800f4dc:	071a      	lsls	r2, r3, #28
 800f4de:	d525      	bpl.n	800f52c <__swbuf_r+0x68>
 800f4e0:	6923      	ldr	r3, [r4, #16]
 800f4e2:	b31b      	cbz	r3, 800f52c <__swbuf_r+0x68>
 800f4e4:	6823      	ldr	r3, [r4, #0]
 800f4e6:	6922      	ldr	r2, [r4, #16]
 800f4e8:	1a98      	subs	r0, r3, r2
 800f4ea:	6963      	ldr	r3, [r4, #20]
 800f4ec:	b2f6      	uxtb	r6, r6
 800f4ee:	4283      	cmp	r3, r0
 800f4f0:	4637      	mov	r7, r6
 800f4f2:	dc04      	bgt.n	800f4fe <__swbuf_r+0x3a>
 800f4f4:	4621      	mov	r1, r4
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	f7ff fdee 	bl	800f0d8 <_fflush_r>
 800f4fc:	b9e0      	cbnz	r0, 800f538 <__swbuf_r+0x74>
 800f4fe:	68a3      	ldr	r3, [r4, #8]
 800f500:	3b01      	subs	r3, #1
 800f502:	60a3      	str	r3, [r4, #8]
 800f504:	6823      	ldr	r3, [r4, #0]
 800f506:	1c5a      	adds	r2, r3, #1
 800f508:	6022      	str	r2, [r4, #0]
 800f50a:	701e      	strb	r6, [r3, #0]
 800f50c:	6962      	ldr	r2, [r4, #20]
 800f50e:	1c43      	adds	r3, r0, #1
 800f510:	429a      	cmp	r2, r3
 800f512:	d004      	beq.n	800f51e <__swbuf_r+0x5a>
 800f514:	89a3      	ldrh	r3, [r4, #12]
 800f516:	07db      	lsls	r3, r3, #31
 800f518:	d506      	bpl.n	800f528 <__swbuf_r+0x64>
 800f51a:	2e0a      	cmp	r6, #10
 800f51c:	d104      	bne.n	800f528 <__swbuf_r+0x64>
 800f51e:	4621      	mov	r1, r4
 800f520:	4628      	mov	r0, r5
 800f522:	f7ff fdd9 	bl	800f0d8 <_fflush_r>
 800f526:	b938      	cbnz	r0, 800f538 <__swbuf_r+0x74>
 800f528:	4638      	mov	r0, r7
 800f52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f52c:	4621      	mov	r1, r4
 800f52e:	4628      	mov	r0, r5
 800f530:	f000 f806 	bl	800f540 <__swsetup_r>
 800f534:	2800      	cmp	r0, #0
 800f536:	d0d5      	beq.n	800f4e4 <__swbuf_r+0x20>
 800f538:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f53c:	e7f4      	b.n	800f528 <__swbuf_r+0x64>
	...

0800f540 <__swsetup_r>:
 800f540:	b538      	push	{r3, r4, r5, lr}
 800f542:	4b2a      	ldr	r3, [pc, #168]	; (800f5ec <__swsetup_r+0xac>)
 800f544:	4605      	mov	r5, r0
 800f546:	6818      	ldr	r0, [r3, #0]
 800f548:	460c      	mov	r4, r1
 800f54a:	b118      	cbz	r0, 800f554 <__swsetup_r+0x14>
 800f54c:	6a03      	ldr	r3, [r0, #32]
 800f54e:	b90b      	cbnz	r3, 800f554 <__swsetup_r+0x14>
 800f550:	f7fe f94a 	bl	800d7e8 <__sinit>
 800f554:	89a3      	ldrh	r3, [r4, #12]
 800f556:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f55a:	0718      	lsls	r0, r3, #28
 800f55c:	d422      	bmi.n	800f5a4 <__swsetup_r+0x64>
 800f55e:	06d9      	lsls	r1, r3, #27
 800f560:	d407      	bmi.n	800f572 <__swsetup_r+0x32>
 800f562:	2309      	movs	r3, #9
 800f564:	602b      	str	r3, [r5, #0]
 800f566:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f56a:	81a3      	strh	r3, [r4, #12]
 800f56c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f570:	e034      	b.n	800f5dc <__swsetup_r+0x9c>
 800f572:	0758      	lsls	r0, r3, #29
 800f574:	d512      	bpl.n	800f59c <__swsetup_r+0x5c>
 800f576:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f578:	b141      	cbz	r1, 800f58c <__swsetup_r+0x4c>
 800f57a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f57e:	4299      	cmp	r1, r3
 800f580:	d002      	beq.n	800f588 <__swsetup_r+0x48>
 800f582:	4628      	mov	r0, r5
 800f584:	f7ff f8a6 	bl	800e6d4 <_free_r>
 800f588:	2300      	movs	r3, #0
 800f58a:	6363      	str	r3, [r4, #52]	; 0x34
 800f58c:	89a3      	ldrh	r3, [r4, #12]
 800f58e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f592:	81a3      	strh	r3, [r4, #12]
 800f594:	2300      	movs	r3, #0
 800f596:	6063      	str	r3, [r4, #4]
 800f598:	6923      	ldr	r3, [r4, #16]
 800f59a:	6023      	str	r3, [r4, #0]
 800f59c:	89a3      	ldrh	r3, [r4, #12]
 800f59e:	f043 0308 	orr.w	r3, r3, #8
 800f5a2:	81a3      	strh	r3, [r4, #12]
 800f5a4:	6923      	ldr	r3, [r4, #16]
 800f5a6:	b94b      	cbnz	r3, 800f5bc <__swsetup_r+0x7c>
 800f5a8:	89a3      	ldrh	r3, [r4, #12]
 800f5aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f5ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5b2:	d003      	beq.n	800f5bc <__swsetup_r+0x7c>
 800f5b4:	4621      	mov	r1, r4
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	f000 f884 	bl	800f6c4 <__smakebuf_r>
 800f5bc:	89a0      	ldrh	r0, [r4, #12]
 800f5be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f5c2:	f010 0301 	ands.w	r3, r0, #1
 800f5c6:	d00a      	beq.n	800f5de <__swsetup_r+0x9e>
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	60a3      	str	r3, [r4, #8]
 800f5cc:	6963      	ldr	r3, [r4, #20]
 800f5ce:	425b      	negs	r3, r3
 800f5d0:	61a3      	str	r3, [r4, #24]
 800f5d2:	6923      	ldr	r3, [r4, #16]
 800f5d4:	b943      	cbnz	r3, 800f5e8 <__swsetup_r+0xa8>
 800f5d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f5da:	d1c4      	bne.n	800f566 <__swsetup_r+0x26>
 800f5dc:	bd38      	pop	{r3, r4, r5, pc}
 800f5de:	0781      	lsls	r1, r0, #30
 800f5e0:	bf58      	it	pl
 800f5e2:	6963      	ldrpl	r3, [r4, #20]
 800f5e4:	60a3      	str	r3, [r4, #8]
 800f5e6:	e7f4      	b.n	800f5d2 <__swsetup_r+0x92>
 800f5e8:	2000      	movs	r0, #0
 800f5ea:	e7f7      	b.n	800f5dc <__swsetup_r+0x9c>
 800f5ec:	20000178 	.word	0x20000178

0800f5f0 <_raise_r>:
 800f5f0:	291f      	cmp	r1, #31
 800f5f2:	b538      	push	{r3, r4, r5, lr}
 800f5f4:	4604      	mov	r4, r0
 800f5f6:	460d      	mov	r5, r1
 800f5f8:	d904      	bls.n	800f604 <_raise_r+0x14>
 800f5fa:	2316      	movs	r3, #22
 800f5fc:	6003      	str	r3, [r0, #0]
 800f5fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f602:	bd38      	pop	{r3, r4, r5, pc}
 800f604:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f606:	b112      	cbz	r2, 800f60e <_raise_r+0x1e>
 800f608:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f60c:	b94b      	cbnz	r3, 800f622 <_raise_r+0x32>
 800f60e:	4620      	mov	r0, r4
 800f610:	f000 f830 	bl	800f674 <_getpid_r>
 800f614:	462a      	mov	r2, r5
 800f616:	4601      	mov	r1, r0
 800f618:	4620      	mov	r0, r4
 800f61a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f61e:	f000 b817 	b.w	800f650 <_kill_r>
 800f622:	2b01      	cmp	r3, #1
 800f624:	d00a      	beq.n	800f63c <_raise_r+0x4c>
 800f626:	1c59      	adds	r1, r3, #1
 800f628:	d103      	bne.n	800f632 <_raise_r+0x42>
 800f62a:	2316      	movs	r3, #22
 800f62c:	6003      	str	r3, [r0, #0]
 800f62e:	2001      	movs	r0, #1
 800f630:	e7e7      	b.n	800f602 <_raise_r+0x12>
 800f632:	2400      	movs	r4, #0
 800f634:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f638:	4628      	mov	r0, r5
 800f63a:	4798      	blx	r3
 800f63c:	2000      	movs	r0, #0
 800f63e:	e7e0      	b.n	800f602 <_raise_r+0x12>

0800f640 <raise>:
 800f640:	4b02      	ldr	r3, [pc, #8]	; (800f64c <raise+0xc>)
 800f642:	4601      	mov	r1, r0
 800f644:	6818      	ldr	r0, [r3, #0]
 800f646:	f7ff bfd3 	b.w	800f5f0 <_raise_r>
 800f64a:	bf00      	nop
 800f64c:	20000178 	.word	0x20000178

0800f650 <_kill_r>:
 800f650:	b538      	push	{r3, r4, r5, lr}
 800f652:	4d07      	ldr	r5, [pc, #28]	; (800f670 <_kill_r+0x20>)
 800f654:	2300      	movs	r3, #0
 800f656:	4604      	mov	r4, r0
 800f658:	4608      	mov	r0, r1
 800f65a:	4611      	mov	r1, r2
 800f65c:	602b      	str	r3, [r5, #0]
 800f65e:	f7f2 fd71 	bl	8002144 <_kill>
 800f662:	1c43      	adds	r3, r0, #1
 800f664:	d102      	bne.n	800f66c <_kill_r+0x1c>
 800f666:	682b      	ldr	r3, [r5, #0]
 800f668:	b103      	cbz	r3, 800f66c <_kill_r+0x1c>
 800f66a:	6023      	str	r3, [r4, #0]
 800f66c:	bd38      	pop	{r3, r4, r5, pc}
 800f66e:	bf00      	nop
 800f670:	20002498 	.word	0x20002498

0800f674 <_getpid_r>:
 800f674:	f7f2 bd5e 	b.w	8002134 <_getpid>

0800f678 <__swhatbuf_r>:
 800f678:	b570      	push	{r4, r5, r6, lr}
 800f67a:	460c      	mov	r4, r1
 800f67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f680:	2900      	cmp	r1, #0
 800f682:	b096      	sub	sp, #88	; 0x58
 800f684:	4615      	mov	r5, r2
 800f686:	461e      	mov	r6, r3
 800f688:	da0d      	bge.n	800f6a6 <__swhatbuf_r+0x2e>
 800f68a:	89a3      	ldrh	r3, [r4, #12]
 800f68c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f690:	f04f 0100 	mov.w	r1, #0
 800f694:	bf0c      	ite	eq
 800f696:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f69a:	2340      	movne	r3, #64	; 0x40
 800f69c:	2000      	movs	r0, #0
 800f69e:	6031      	str	r1, [r6, #0]
 800f6a0:	602b      	str	r3, [r5, #0]
 800f6a2:	b016      	add	sp, #88	; 0x58
 800f6a4:	bd70      	pop	{r4, r5, r6, pc}
 800f6a6:	466a      	mov	r2, sp
 800f6a8:	f000 f848 	bl	800f73c <_fstat_r>
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	dbec      	blt.n	800f68a <__swhatbuf_r+0x12>
 800f6b0:	9901      	ldr	r1, [sp, #4]
 800f6b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f6b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f6ba:	4259      	negs	r1, r3
 800f6bc:	4159      	adcs	r1, r3
 800f6be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6c2:	e7eb      	b.n	800f69c <__swhatbuf_r+0x24>

0800f6c4 <__smakebuf_r>:
 800f6c4:	898b      	ldrh	r3, [r1, #12]
 800f6c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f6c8:	079d      	lsls	r5, r3, #30
 800f6ca:	4606      	mov	r6, r0
 800f6cc:	460c      	mov	r4, r1
 800f6ce:	d507      	bpl.n	800f6e0 <__smakebuf_r+0x1c>
 800f6d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f6d4:	6023      	str	r3, [r4, #0]
 800f6d6:	6123      	str	r3, [r4, #16]
 800f6d8:	2301      	movs	r3, #1
 800f6da:	6163      	str	r3, [r4, #20]
 800f6dc:	b002      	add	sp, #8
 800f6de:	bd70      	pop	{r4, r5, r6, pc}
 800f6e0:	ab01      	add	r3, sp, #4
 800f6e2:	466a      	mov	r2, sp
 800f6e4:	f7ff ffc8 	bl	800f678 <__swhatbuf_r>
 800f6e8:	9900      	ldr	r1, [sp, #0]
 800f6ea:	4605      	mov	r5, r0
 800f6ec:	4630      	mov	r0, r6
 800f6ee:	f7ff f865 	bl	800e7bc <_malloc_r>
 800f6f2:	b948      	cbnz	r0, 800f708 <__smakebuf_r+0x44>
 800f6f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6f8:	059a      	lsls	r2, r3, #22
 800f6fa:	d4ef      	bmi.n	800f6dc <__smakebuf_r+0x18>
 800f6fc:	f023 0303 	bic.w	r3, r3, #3
 800f700:	f043 0302 	orr.w	r3, r3, #2
 800f704:	81a3      	strh	r3, [r4, #12]
 800f706:	e7e3      	b.n	800f6d0 <__smakebuf_r+0xc>
 800f708:	89a3      	ldrh	r3, [r4, #12]
 800f70a:	6020      	str	r0, [r4, #0]
 800f70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f710:	81a3      	strh	r3, [r4, #12]
 800f712:	9b00      	ldr	r3, [sp, #0]
 800f714:	6163      	str	r3, [r4, #20]
 800f716:	9b01      	ldr	r3, [sp, #4]
 800f718:	6120      	str	r0, [r4, #16]
 800f71a:	b15b      	cbz	r3, 800f734 <__smakebuf_r+0x70>
 800f71c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f720:	4630      	mov	r0, r6
 800f722:	f000 f81d 	bl	800f760 <_isatty_r>
 800f726:	b128      	cbz	r0, 800f734 <__smakebuf_r+0x70>
 800f728:	89a3      	ldrh	r3, [r4, #12]
 800f72a:	f023 0303 	bic.w	r3, r3, #3
 800f72e:	f043 0301 	orr.w	r3, r3, #1
 800f732:	81a3      	strh	r3, [r4, #12]
 800f734:	89a3      	ldrh	r3, [r4, #12]
 800f736:	431d      	orrs	r5, r3
 800f738:	81a5      	strh	r5, [r4, #12]
 800f73a:	e7cf      	b.n	800f6dc <__smakebuf_r+0x18>

0800f73c <_fstat_r>:
 800f73c:	b538      	push	{r3, r4, r5, lr}
 800f73e:	4d07      	ldr	r5, [pc, #28]	; (800f75c <_fstat_r+0x20>)
 800f740:	2300      	movs	r3, #0
 800f742:	4604      	mov	r4, r0
 800f744:	4608      	mov	r0, r1
 800f746:	4611      	mov	r1, r2
 800f748:	602b      	str	r3, [r5, #0]
 800f74a:	f7f2 fd5a 	bl	8002202 <_fstat>
 800f74e:	1c43      	adds	r3, r0, #1
 800f750:	d102      	bne.n	800f758 <_fstat_r+0x1c>
 800f752:	682b      	ldr	r3, [r5, #0]
 800f754:	b103      	cbz	r3, 800f758 <_fstat_r+0x1c>
 800f756:	6023      	str	r3, [r4, #0]
 800f758:	bd38      	pop	{r3, r4, r5, pc}
 800f75a:	bf00      	nop
 800f75c:	20002498 	.word	0x20002498

0800f760 <_isatty_r>:
 800f760:	b538      	push	{r3, r4, r5, lr}
 800f762:	4d06      	ldr	r5, [pc, #24]	; (800f77c <_isatty_r+0x1c>)
 800f764:	2300      	movs	r3, #0
 800f766:	4604      	mov	r4, r0
 800f768:	4608      	mov	r0, r1
 800f76a:	602b      	str	r3, [r5, #0]
 800f76c:	f7f2 fd59 	bl	8002222 <_isatty>
 800f770:	1c43      	adds	r3, r0, #1
 800f772:	d102      	bne.n	800f77a <_isatty_r+0x1a>
 800f774:	682b      	ldr	r3, [r5, #0]
 800f776:	b103      	cbz	r3, 800f77a <_isatty_r+0x1a>
 800f778:	6023      	str	r3, [r4, #0]
 800f77a:	bd38      	pop	{r3, r4, r5, pc}
 800f77c:	20002498 	.word	0x20002498

0800f780 <_init>:
 800f780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f782:	bf00      	nop
 800f784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f786:	bc08      	pop	{r3}
 800f788:	469e      	mov	lr, r3
 800f78a:	4770      	bx	lr

0800f78c <_fini>:
 800f78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f78e:	bf00      	nop
 800f790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f792:	bc08      	pop	{r3}
 800f794:	469e      	mov	lr, r3
 800f796:	4770      	bx	lr
