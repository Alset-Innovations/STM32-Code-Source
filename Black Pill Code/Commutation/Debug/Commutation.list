
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ade8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0800af88  0800af88  0001af88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b314  0800b314  0002026c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b314  0800b314  0001b314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b31c  0800b31c  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b31c  0800b31c  0001b31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b320  0800b320  0001b320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  0800b324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010550  2000026c  0800b590  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200107bc  0800b590  000207bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010fbe  00000000  00000000  000202df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cb5  00000000  00000000  0003129d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  00033f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb3  00000000  00000000  00034fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001998e  00000000  00000000  00035c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015281  00000000  00000000  0004f5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009be12  00000000  00000000  00064872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005404  00000000  00000000  00100684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00105a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000026c 	.word	0x2000026c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800af70 	.word	0x0800af70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000270 	.word	0x20000270
 80001dc:	0800af70 	.word	0x0800af70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <PrepareCommutation>:
uint8_t StopSequence(void);
uint8_t ChangePWM (void);

/* Private function ----------------------------------------------------------*/

uint8_t PrepareCommutation (char Direction) {
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]

	// Read IDR for Hall Sensor status
	uint16_t Hall = (GPIOA->IDR & 0b111) - 1 + 6 * Direction;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <PrepareCommutation+0x7c>)
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	4619      	mov	r1, r3
 8000fb0:	0049      	lsls	r1, r1, #1
 8000fb2:	440b      	add	r3, r1
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4413      	add	r3, r2
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	81fb      	strh	r3, [r7, #14]

	// Set Registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8000fc0:	89fa      	ldrh	r2, [r7, #14]
 8000fc2:	4914      	ldr	r1, [pc, #80]	; (8001014 <PrepareCommutation+0x80>)
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	440b      	add	r3, r1
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <PrepareCommutation+0x84>)
 8000fd2:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 8000fd4:	89fa      	ldrh	r2, [r7, #14]
 8000fd6:	490f      	ldr	r1, [pc, #60]	; (8001014 <PrepareCommutation+0x80>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	881a      	ldrh	r2, [r3, #0]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <PrepareCommutation+0x84>)
 8000fe8:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 8000fea:	89fa      	ldrh	r2, [r7, #14]
 8000fec:	4909      	ldr	r1, [pc, #36]	; (8001014 <PrepareCommutation+0x80>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	881a      	ldrh	r2, [r3, #0]
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <PrepareCommutation+0x84>)
 8000ffe:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 8001000:	2300      	movs	r3, #0

}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40020000 	.word	0x40020000
 8001014:	20000000 	.word	0x20000000
 8001018:	40010000 	.word	0x40010000
 800101c:	00000000 	.word	0x00000000

08001020 <StartupSequence>:

uint8_t StartupSequence (char Direction) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]

	// Initialize some variables
	Fapb1tclk = HAL_RCC_GetPCLK1Freq() * 2;
 800102a:	f005 fcef 	bl	8006a0c <HAL_RCC_GetPCLK1Freq>
 800102e:	4603      	mov	r3, r0
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4a73      	ldr	r2, [pc, #460]	; (8001200 <StartupSequence+0x1e0>)
 8001034:	6013      	str	r3, [r2, #0]
	Fapb2tclk = HAL_RCC_GetPCLK2Freq() * 2;
 8001036:	f005 fcfd 	bl	8006a34 <HAL_RCC_GetPCLK2Freq>
 800103a:	4603      	mov	r3, r0
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4a71      	ldr	r2, [pc, #452]	; (8001204 <StartupSequence+0x1e4>)
 8001040:	6013      	str	r3, [r2, #0]
	RPMConst = (Fapb2tclk / (TIM9->PSC + 1)) * 1.35;
 8001042:	4b70      	ldr	r3, [pc, #448]	; (8001204 <StartupSequence+0x1e4>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b70      	ldr	r3, [pc, #448]	; (8001208 <StartupSequence+0x1e8>)
 8001048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104a:	3301      	adds	r3, #1
 800104c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa5f 	bl	8000514 <__aeabi_ui2d>
 8001056:	a368      	add	r3, pc, #416	; (adr r3, 80011f8 <StartupSequence+0x1d8>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff fad4 	bl	8000608 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fda6 	bl	8000bb8 <__aeabi_d2uiz>
 800106c:	4603      	mov	r3, r0
 800106e:	4a67      	ldr	r2, [pc, #412]	; (800120c <StartupSequence+0x1ec>)
 8001070:	6013      	str	r3, [r2, #0]

	ChangePWM();
 8001072:	f000 f93b 	bl	80012ec <ChangePWM>
		return HAL_ERROR;
	}
	*/

	// Read IDR for Hall Sensor status
	uint16_t Hall = (GPIOA->IDR & 0b111) + 6 * Direction;
 8001076:	4b66      	ldr	r3, [pc, #408]	; (8001210 <StartupSequence+0x1f0>)
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	b29b      	uxth	r3, r3
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	b29a      	uxth	r2, r3
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	b29b      	uxth	r3, r3
 8001086:	4619      	mov	r1, r3
 8001088:	0049      	lsls	r1, r1, #1
 800108a:	440b      	add	r3, r1
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	b29b      	uxth	r3, r3
 8001090:	4413      	add	r3, r2
 8001092:	81fb      	strh	r3, [r7, #14]

	// Set Registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8001094:	89fa      	ldrh	r2, [r7, #14]
 8001096:	495f      	ldr	r1, [pc, #380]	; (8001214 <StartupSequence+0x1f4>)
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	440b      	add	r3, r1
 80010a2:	881a      	ldrh	r2, [r3, #0]
 80010a4:	4b5c      	ldr	r3, [pc, #368]	; (8001218 <StartupSequence+0x1f8>)
 80010a6:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 80010a8:	89fa      	ldrh	r2, [r7, #14]
 80010aa:	495a      	ldr	r1, [pc, #360]	; (8001214 <StartupSequence+0x1f4>)
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	440b      	add	r3, r1
 80010b6:	3304      	adds	r3, #4
 80010b8:	881a      	ldrh	r2, [r3, #0]
 80010ba:	4b57      	ldr	r3, [pc, #348]	; (8001218 <StartupSequence+0x1f8>)
 80010bc:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 80010be:	89fa      	ldrh	r2, [r7, #14]
 80010c0:	4954      	ldr	r1, [pc, #336]	; (8001214 <StartupSequence+0x1f4>)
 80010c2:	4613      	mov	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	440b      	add	r3, r1
 80010cc:	3302      	adds	r3, #2
 80010ce:	881a      	ldrh	r2, [r3, #0]
 80010d0:	4b51      	ldr	r3, [pc, #324]	; (8001218 <StartupSequence+0x1f8>)
 80010d2:	61da      	str	r2, [r3, #28]

	// Start HallSensor timer
	HAL_TIMEx_HallSensor_Start (&htim2);
 80010d4:	4851      	ldr	r0, [pc, #324]	; (800121c <StartupSequence+0x1fc>)
 80010d6:	f007 f901 	bl	80082dc <HAL_TIMEx_HallSensor_Start>

	// Start all PWM signals on TIM1
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 80010da:	2100      	movs	r1, #0
 80010dc:	4850      	ldr	r0, [pc, #320]	; (8001220 <StartupSequence+0x200>)
 80010de:	f005 fded 	bl	8006cbc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 80010e2:	2104      	movs	r1, #4
 80010e4:	484e      	ldr	r0, [pc, #312]	; (8001220 <StartupSequence+0x200>)
 80010e6:	f005 fde9 	bl	8006cbc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 80010ea:	2108      	movs	r1, #8
 80010ec:	484c      	ldr	r0, [pc, #304]	; (8001220 <StartupSequence+0x200>)
 80010ee:	f005 fde5 	bl	8006cbc <HAL_TIM_PWM_Start>

	// Start Temp timer
	// HAL_TIM_PWM_Start (&htim5, TIM_CHANNEL_1);

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 80010f2:	4b49      	ldr	r3, [pc, #292]	; (8001218 <StartupSequence+0x1f8>)
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	4a48      	ldr	r2, [pc, #288]	; (8001218 <StartupSequence+0x1f8>)
 80010f8:	f023 0320 	bic.w	r3, r3, #32
 80010fc:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 80010fe:	4b46      	ldr	r3, [pc, #280]	; (8001218 <StartupSequence+0x1f8>)
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	4a45      	ldr	r2, [pc, #276]	; (8001218 <StartupSequence+0x1f8>)
 8001104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001108:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 800110a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001118:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 800111a:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <StartupSequence+0x1e8>)
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	4a3a      	ldr	r2, [pc, #232]	; (8001208 <StartupSequence+0x1e8>)
 8001120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001124:	60d3      	str	r3, [r2, #12]

	// Start Interrupts
	HAL_TIM_Base_Start_IT (&htim1);
 8001126:	483e      	ldr	r0, [pc, #248]	; (8001220 <StartupSequence+0x200>)
 8001128:	f005 fce8 	bl	8006afc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim2);
 800112c:	483b      	ldr	r0, [pc, #236]	; (800121c <StartupSequence+0x1fc>)
 800112e:	f005 fce5 	bl	8006afc <HAL_TIM_Base_Start_IT>
	// HAL_TIM_Base_Start_IT (&htim5);
	HAL_TIM_Base_Start_IT (&htim9);
 8001132:	483c      	ldr	r0, [pc, #240]	; (8001224 <StartupSequence+0x204>)
 8001134:	f005 fce2 	bl	8006afc <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT (&htim9, TIM_CHANNEL_2);
 8001138:	2104      	movs	r1, #4
 800113a:	483a      	ldr	r0, [pc, #232]	; (8001224 <StartupSequence+0x204>)
 800113c:	f005 ff22 	bl	8006f84 <HAL_TIM_IC_Start_IT>
	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	// HAL_ADC_Start_IT(&hadc1);
	// HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);

	// Clear all interrupt triggers
	TIM1->SR &= ~TIM_SR_COMIF;		// Clear Commutation interrupt flag
 8001140:	4b35      	ldr	r3, [pc, #212]	; (8001218 <StartupSequence+0x1f8>)
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	4a34      	ldr	r2, [pc, #208]	; (8001218 <StartupSequence+0x1f8>)
 8001146:	f023 0320 	bic.w	r3, r3, #32
 800114a:	6113      	str	r3, [r2, #16]
	TIM1->SR &= ~TIM_SR_BIF;		// Clear Break interrupt flag
 800114c:	4b32      	ldr	r3, [pc, #200]	; (8001218 <StartupSequence+0x1f8>)
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	4a31      	ldr	r2, [pc, #196]	; (8001218 <StartupSequence+0x1f8>)
 8001152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001156:	6113      	str	r3, [r2, #16]
	TIM2->SR &= ~TIM_SR_TIF;		// Clear timer 2 interrupt flag
 8001158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001166:	6113      	str	r3, [r2, #16]
	TIM9->SR &= ~TIM_SR_TIF;		// Clear timer 9 interrupt flag
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <StartupSequence+0x1e8>)
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	4a26      	ldr	r2, [pc, #152]	; (8001208 <StartupSequence+0x1e8>)
 800116e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001172:	6113      	str	r3, [r2, #16]

	// Enable interrupts
	TIM1->DIER |= TIM_DIER_COMIE;	// Enable Commutation events in DIER register
 8001174:	4b28      	ldr	r3, [pc, #160]	; (8001218 <StartupSequence+0x1f8>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	4a27      	ldr	r2, [pc, #156]	; (8001218 <StartupSequence+0x1f8>)
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	60d3      	str	r3, [r2, #12]
	TIM2->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 2
 8001180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800118e:	60d3      	str	r3, [r2, #12]
	TIM9->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 9
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <StartupSequence+0x1e8>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	4a1c      	ldr	r2, [pc, #112]	; (8001208 <StartupSequence+0x1e8>)
 8001196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800119a:	60d3      	str	r3, [r2, #12]

	// Write some registers
	ADC1->CR1  |= ADC_CR1_EOCIE;	// Enable ADC interrupts
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <StartupSequence+0x208>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	4a21      	ldr	r2, [pc, #132]	; (8001228 <StartupSequence+0x208>)
 80011a2:	f043 0320 	orr.w	r3, r3, #32
 80011a6:	6053      	str	r3, [r2, #4]
	TIM1->CR2  |= TIM_CR2_CCPC; 	// Set CCPC in CR2 to preload CCxE, CCxNE and OCxM bits
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <StartupSequence+0x1f8>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4a1a      	ldr	r2, [pc, #104]	; (8001218 <StartupSequence+0x1f8>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6053      	str	r3, [r2, #4]
	TIM1->BDTR &= ~TIM_BDTR_DTG;	// Reset DTG bits
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <StartupSequence+0x1f8>)
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	4a17      	ldr	r2, [pc, #92]	; (8001218 <StartupSequence+0x1f8>)
 80011ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011be:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR |= 0x800F;			// Set dead-time to 100ns and make sure to enable MOE bit
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <StartupSequence+0x1f8>)
 80011c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c4:	4a14      	ldr	r2, [pc, #80]	; (8001218 <StartupSequence+0x1f8>)
 80011c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ca:	f043 030f 	orr.w	r3, r3, #15
 80011ce:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->EGR  |= TIM_EGR_COMG; 	// Set COMG bit in EGR for first commutation
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <StartupSequence+0x1f8>)
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	4a10      	ldr	r2, [pc, #64]	; (8001218 <StartupSequence+0x1f8>)
 80011d6:	f043 0320 	orr.w	r3, r3, #32
 80011da:	6153      	str	r3, [r2, #20]
	TIM1->DIER |= TIM_DIER_COMIE; 	// Enable commutation events in DIER register
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <StartupSequence+0x1f8>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <StartupSequence+0x1f8>)
 80011e2:	f043 0320 	orr.w	r3, r3, #32
 80011e6:	60d3      	str	r3, [r2, #12]

	return HAL_OK;
 80011e8:	2300      	movs	r3, #0

}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	f3af 8000 	nop.w
 80011f8:	9999999a 	.word	0x9999999a
 80011fc:	3ff59999 	.word	0x3ff59999
 8001200:	20000288 	.word	0x20000288
 8001204:	2000028c 	.word	0x2000028c
 8001208:	40014000 	.word	0x40014000
 800120c:	20000290 	.word	0x20000290
 8001210:	40020000 	.word	0x40020000
 8001214:	20000000 	.word	0x20000000
 8001218:	40010000 	.word	0x40010000
 800121c:	20010504 	.word	0x20010504
 8001220:	200104bc 	.word	0x200104bc
 8001224:	20010624 	.word	0x20010624
 8001228:	40012000 	.word	0x40012000

0800122c <StopSequence>:

uint8_t StopSequence(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

	// Stop HallSensor timer
	HAL_TIMEx_HallSensor_Stop (&htim2);
 8001230:	4828      	ldr	r0, [pc, #160]	; (80012d4 <StopSequence+0xa8>)
 8001232:	f007 f8d3 	bl	80083dc <HAL_TIMEx_HallSensor_Stop>

	// Disable all output channels
	TIM1->CCER  = 0x0000;
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <StopSequence+0xac>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = 0x0000;
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <StopSequence+0xac>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = 0x0000;
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <StopSequence+0xac>)
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]

	// Perform one last commutation event if not already disabled
	if ( (TIM1->DIER & TIM_DIER_COMIE) >= 1 ) { 		// If COMIE bit in DIER is set commutation events are still enabled
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <StopSequence+0xac>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f003 0320 	and.w	r3, r3, #32
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <StopSequence+0x34>

		TIM1->EGR |= TIM_EGR_COMG; 						// Trigger commutation event
 8001254:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <StopSequence+0xac>)
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	4a1f      	ldr	r2, [pc, #124]	; (80012d8 <StopSequence+0xac>)
 800125a:	f043 0320 	orr.w	r3, r3, #32
 800125e:	6153      	str	r3, [r2, #20]
		// while ( (TIM1->SR & TIM_SR_COMIF) >= 1 ); 	// Wait until commutation event has happened

	}

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <StopSequence+0xac>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <StopSequence+0xac>)
 8001266:	f023 0320 	bic.w	r3, r3, #32
 800126a:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <StopSequence+0xac>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <StopSequence+0xac>)
 8001272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001276:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 8001278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001286:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <StopSequence+0xb0>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	4a13      	ldr	r2, [pc, #76]	; (80012dc <StopSequence+0xb0>)
 800128e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001292:	60d3      	str	r3, [r2, #12]

	// Stop interrupts
	HAL_TIM_Base_Stop_IT (&htim1);
 8001294:	4812      	ldr	r0, [pc, #72]	; (80012e0 <StopSequence+0xb4>)
 8001296:	f005 fc93 	bl	8006bc0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim2);
 800129a:	480e      	ldr	r0, [pc, #56]	; (80012d4 <StopSequence+0xa8>)
 800129c:	f005 fc90 	bl	8006bc0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim9);
 80012a0:	4810      	ldr	r0, [pc, #64]	; (80012e4 <StopSequence+0xb8>)
 80012a2:	f005 fc8d 	bl	8006bc0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Stop_IT (&htim9, TIM_CHANNEL_2);
 80012a6:	2104      	movs	r1, #4
 80012a8:	480e      	ldr	r0, [pc, #56]	; (80012e4 <StopSequence+0xb8>)
 80012aa:	f005 ff85 	bl	80071b8 <HAL_TIM_IC_Stop_IT>

	// Stop PWM Timers
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_1);
 80012ae:	2100      	movs	r1, #0
 80012b0:	480b      	ldr	r0, [pc, #44]	; (80012e0 <StopSequence+0xb4>)
 80012b2:	f005 fdb3 	bl	8006e1c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_2);
 80012b6:	2104      	movs	r1, #4
 80012b8:	4809      	ldr	r0, [pc, #36]	; (80012e0 <StopSequence+0xb4>)
 80012ba:	f005 fdaf 	bl	8006e1c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_3);
 80012be:	2108      	movs	r1, #8
 80012c0:	4807      	ldr	r0, [pc, #28]	; (80012e0 <StopSequence+0xb4>)
 80012c2:	f005 fdab 	bl	8006e1c <HAL_TIM_PWM_Stop>

	Registers[RPMReg] = 0;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <StopSequence+0xbc>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	80da      	strh	r2, [r3, #6]

	return HAL_OK;
 80012cc:	2300      	movs	r3, #0

}
 80012ce:	4618      	mov	r0, r3
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20010504 	.word	0x20010504
 80012d8:	40010000 	.word	0x40010000
 80012dc:	40014000 	.word	0x40014000
 80012e0:	200104bc 	.word	0x200104bc
 80012e4:	20010624 	.word	0x20010624
 80012e8:	20000090 	.word	0x20000090

080012ec <ChangePWM>:

uint8_t ChangePWM (void) {
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0

	uint32_t PWM = (Registers[PWMReg] * TIM1->ARR) / 100; // Calculate required CCRx value
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <ChangePWM+0x6c>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b18      	ldr	r3, [pc, #96]	; (800135c <ChangePWM+0x70>)
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
 8001300:	4a17      	ldr	r2, [pc, #92]	; (8001360 <ChangePWM+0x74>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	607b      	str	r3, [r7, #4]

	if (PWM >= TIM1->ARR - 60) {
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <ChangePWM+0x70>)
 800130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130e:	3b3c      	subs	r3, #60	; 0x3c
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	429a      	cmp	r2, r3
 8001314:	d303      	bcc.n	800131e <ChangePWM+0x32>
		PWM = TIM1->ARR - 60;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <ChangePWM+0x70>)
 8001318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131a:	3b3c      	subs	r3, #60	; 0x3c
 800131c:	607b      	str	r3, [r7, #4]
	}

	TIM1->CR1 |= TIM_CR1_UDIS; 	// Disable Update Events
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <ChangePWM+0x70>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <ChangePWM+0x70>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	6013      	str	r3, [r2, #0]
	TIM1->CCR1 = PWM;	  		// Set new PWM for channel 1
 800132a:	4a0c      	ldr	r2, [pc, #48]	; (800135c <ChangePWM+0x70>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = PWM;	  		// Set new PWM for channel 2
 8001330:	4a0a      	ldr	r2, [pc, #40]	; (800135c <ChangePWM+0x70>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = PWM;	  		// Set new PWM for channel 3
 8001336:	4a09      	ldr	r2, [pc, #36]	; (800135c <ChangePWM+0x70>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_UDIS; // Enable Update Events
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <ChangePWM+0x70>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a06      	ldr	r2, [pc, #24]	; (800135c <ChangePWM+0x70>)
 8001342:	f023 0302 	bic.w	r3, r3, #2
 8001346:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 8001348:	2300      	movs	r3, #0

}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000090 	.word	0x20000090
 800135c:	40010000 	.word	0x40010000
 8001360:	51eb851f 	.word	0x51eb851f

08001364 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800136a:	463b      	mov	r3, r7
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <MX_ADC1_Init+0x9c>)
 8001378:	4a22      	ldr	r2, [pc, #136]	; (8001404 <MX_ADC1_Init+0xa0>)
 800137a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <MX_ADC1_Init+0x9c>)
 800137e:	2200      	movs	r2, #0
 8001380:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <MX_ADC1_Init+0x9c>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <MX_ADC1_Init+0x9c>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <MX_ADC1_Init+0x9c>)
 8001390:	2200      	movs	r2, #0
 8001392:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001394:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <MX_ADC1_Init+0x9c>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_ADC1_Init+0x9c>)
 800139e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <MX_ADC1_Init+0x9c>)
 80013a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_ADC1_Init+0x9c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <MX_ADC1_Init+0x9c>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_ADC1_Init+0x9c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_ADC1_Init+0x9c>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <MX_ADC1_Init+0x9c>)
 80013c8:	f001 fb06 	bl	80029d8 <HAL_ADC_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80013d2:	f000 fc41 	bl	8001c58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013d6:	2309      	movs	r3, #9
 80013d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80013de:	2301      	movs	r3, #1
 80013e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e2:	463b      	mov	r3, r7
 80013e4:	4619      	mov	r1, r3
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <MX_ADC1_Init+0x9c>)
 80013e8:	f001 fc6a 	bl	8002cc0 <HAL_ADC_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80013f2:	f000 fc31 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200102a0 	.word	0x200102a0
 8001404:	40012000 	.word	0x40012000

08001408 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <HAL_ADC_MspInit+0x8c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d12f      	bne.n	800148a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <HAL_ADC_MspInit+0x90>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a19      	ldr	r2, [pc, #100]	; (8001498 <HAL_ADC_MspInit+0x90>)
 8001434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_ADC_MspInit+0x90>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <HAL_ADC_MspInit+0x90>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <HAL_ADC_MspInit+0x90>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_ADC_MspInit+0x90>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001462:	2302      	movs	r3, #2
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001466:	2303      	movs	r3, #3
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <HAL_ADC_MspInit+0x94>)
 8001476:	f001 ff9d 	bl	80033b4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	2012      	movs	r0, #18
 8001480:	f001 ff31 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001484:	2012      	movs	r0, #18
 8001486:	f001 ff4a 	bl	800331e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40012000 	.word	0x40012000
 8001498:	40023800 	.word	0x40023800
 800149c:	40020400 	.word	0x40020400

080014a0 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

	TotalCurrent -= Current[Ci];
 80014a8:	4b39      	ldr	r3, [pc, #228]	; (8001590 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a39      	ldr	r2, [pc, #228]	; (8001594 <HAL_ADC_ConvCpltCallback+0xf4>)
 80014ae:	8812      	ldrh	r2, [r2, #0]
 80014b0:	4611      	mov	r1, r2
 80014b2:	4a39      	ldr	r2, [pc, #228]	; (8001598 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014b4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	4a35      	ldr	r2, [pc, #212]	; (8001590 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014bc:	6013      	str	r3, [r2, #0]
	Current[Ci] = HAL_ADC_GetValue(&hadc1);
 80014be:	4837      	ldr	r0, [pc, #220]	; (800159c <HAL_ADC_ConvCpltCallback+0xfc>)
 80014c0:	f001 fbdd 	bl	8002c7e <HAL_ADC_GetValue>
 80014c4:	4601      	mov	r1, r0
 80014c6:	4b33      	ldr	r3, [pc, #204]	; (8001594 <HAL_ADC_ConvCpltCallback+0xf4>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	b289      	uxth	r1, r1
 80014ce:	4b32      	ldr	r3, [pc, #200]	; (8001598 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	TotalCurrent += Current[Ci];
 80014d4:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <HAL_ADC_ConvCpltCallback+0xf4>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a29      	ldr	r2, [pc, #164]	; (8001590 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014ea:	6013      	str	r3, [r2, #0]

	Ci++;
 80014ec:	4b29      	ldr	r3, [pc, #164]	; (8001594 <HAL_ADC_ConvCpltCallback+0xf4>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <HAL_ADC_ConvCpltCallback+0xf4>)
 80014f6:	801a      	strh	r2, [r3, #0]

	if ( Ci >= AvgSizeCur - 1 ) {
 80014f8:	4b26      	ldr	r3, [pc, #152]	; (8001594 <HAL_ADC_ConvCpltCallback+0xf4>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8001500:	4293      	cmp	r3, r2
 8001502:	d902      	bls.n	800150a <HAL_ADC_ConvCpltCallback+0x6a>
		Ci = 0;
 8001504:	4b23      	ldr	r3, [pc, #140]	; (8001594 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001506:	2200      	movs	r2, #0
 8001508:	801a      	strh	r2, [r3, #0]
	}

	float current = (3.3 * (TotalCurrent / AvgSizeCur)) / 40960 / 0.015;
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <HAL_ADC_ConvCpltCallback+0xf0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	0bdb      	lsrs	r3, r3, #15
 8001510:	4618      	mov	r0, r3
 8001512:	f7fe ffff 	bl	8000514 <__aeabi_ui2d>
 8001516:	a31a      	add	r3, pc, #104	; (adr r3, 8001580 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f874 	bl	8000608 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_ADC_ConvCpltCallback+0x100>)
 800152e:	f7ff f995 	bl	800085c <__aeabi_ddiv>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	a313      	add	r3, pc, #76	; (adr r3, 8001588 <HAL_ADC_ConvCpltCallback+0xe8>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7ff f98c 	bl	800085c <__aeabi_ddiv>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f7ff fb54 	bl	8000bf8 <__aeabi_d2f>
 8001550:	4603      	mov	r3, r0
 8001552:	60fb      	str	r3, [r7, #12]
	Registers[CurReg] = current * 1000;
 8001554:	edd7 7a03 	vldr	s15, [r7, #12]
 8001558:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80015a4 <HAL_ADC_ConvCpltCallback+0x104>
 800155c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001564:	ee17 3a90 	vmov	r3, s15
 8001568:	b29a      	uxth	r2, r3
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x108>)
 800156c:	809a      	strh	r2, [r3, #4]

	Counter++;
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_ADC_ConvCpltCallback+0x10c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <HAL_ADC_ConvCpltCallback+0x10c>)
 8001576:	6013      	str	r3, [r2, #0]

}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	66666666 	.word	0x66666666
 8001584:	400a6666 	.word	0x400a6666
 8001588:	eb851eb8 	.word	0xeb851eb8
 800158c:	3f8eb851 	.word	0x3f8eb851
 8001590:	20000294 	.word	0x20000294
 8001594:	2000029c 	.word	0x2000029c
 8001598:	200002a0 	.word	0x200002a0
 800159c:	200102a0 	.word	0x200102a0
 80015a0:	40e40000 	.word	0x40e40000
 80015a4:	447a0000 	.word	0x447a0000
 80015a8:	20000090 	.word	0x20000090
 80015ac:	20000298 	.word	0x20000298

080015b0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b50      	ldr	r3, [pc, #320]	; (800170c <MX_GPIO_Init+0x15c>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a4f      	ldr	r2, [pc, #316]	; (800170c <MX_GPIO_Init+0x15c>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b4d      	ldr	r3, [pc, #308]	; (800170c <MX_GPIO_Init+0x15c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b49      	ldr	r3, [pc, #292]	; (800170c <MX_GPIO_Init+0x15c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a48      	ldr	r2, [pc, #288]	; (800170c <MX_GPIO_Init+0x15c>)
 80015ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b46      	ldr	r3, [pc, #280]	; (800170c <MX_GPIO_Init+0x15c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b42      	ldr	r3, [pc, #264]	; (800170c <MX_GPIO_Init+0x15c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a41      	ldr	r2, [pc, #260]	; (800170c <MX_GPIO_Init+0x15c>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b3f      	ldr	r3, [pc, #252]	; (800170c <MX_GPIO_Init+0x15c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b3b      	ldr	r3, [pc, #236]	; (800170c <MX_GPIO_Init+0x15c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a3a      	ldr	r2, [pc, #232]	; (800170c <MX_GPIO_Init+0x15c>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b38      	ldr	r3, [pc, #224]	; (800170c <MX_GPIO_Init+0x15c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800163c:	4834      	ldr	r0, [pc, #208]	; (8001710 <MX_GPIO_Init+0x160>)
 800163e:	f002 f83d 	bl	80036bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001648:	4832      	ldr	r0, [pc, #200]	; (8001714 <MX_GPIO_Init+0x164>)
 800164a:	f002 f837 	bl	80036bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800164e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	482a      	ldr	r0, [pc, #168]	; (8001710 <MX_GPIO_Init+0x160>)
 8001668:	f001 fea4 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800166c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001672:	2303      	movs	r3, #3
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	4823      	ldr	r0, [pc, #140]	; (8001710 <MX_GPIO_Init+0x160>)
 8001682:	f001 fe97 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001686:	f649 03f0 	movw	r3, #39152	; 0x98f0
 800168a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800168c:	2303      	movs	r3, #3
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	481f      	ldr	r0, [pc, #124]	; (8001718 <MX_GPIO_Init+0x168>)
 800169c:	f001 fe8a 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_9;
 80016a0:	f240 2325 	movw	r3, #549	; 0x225
 80016a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a6:	2303      	movs	r3, #3
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	4817      	ldr	r0, [pc, #92]	; (8001714 <MX_GPIO_Init+0x164>)
 80016b6:	f001 fe7d 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	4810      	ldr	r0, [pc, #64]	; (8001714 <MX_GPIO_Init+0x164>)
 80016d4:	f001 fe6e 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016d8:	2310      	movs	r3, #16
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	4809      	ldr	r0, [pc, #36]	; (8001714 <MX_GPIO_Init+0x164>)
 80016ee:	f001 fe61 	bl	80033b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	200a      	movs	r0, #10
 80016f8:	f001 fdf5 	bl	80032e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80016fc:	200a      	movs	r0, #10
 80016fe:	f001 fe0e 	bl	800331e <HAL_NVIC_EnableIRQ>

}
 8001702:	bf00      	nop
 8001704:	3728      	adds	r7, #40	; 0x28
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40020800 	.word	0x40020800
 8001714:	40020400 	.word	0x40020400
 8001718:	40020000 	.word	0x40020000

0800171c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_I2C1_Init+0x50>)
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <MX_I2C1_Init+0x54>)
 8001724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_I2C1_Init+0x50>)
 8001728:	4a12      	ldr	r2, [pc, #72]	; (8001774 <MX_I2C1_Init+0x58>)
 800172a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_I2C1_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_I2C1_Init+0x50>)
 8001734:	2220      	movs	r2, #32
 8001736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_I2C1_Init+0x50>)
 800173a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800173e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <MX_I2C1_Init+0x50>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_I2C1_Init+0x50>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <MX_I2C1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_I2C1_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <MX_I2C1_Init+0x50>)
 800175a:	f001 ffed 	bl	8003738 <HAL_I2C_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001764:	f000 fa78 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20010300 	.word	0x20010300
 8001770:	40005400 	.word	0x40005400
 8001774:	000186a0 	.word	0x000186a0

08001778 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_I2C2_Init+0x50>)
 800177e:	4a13      	ldr	r2, [pc, #76]	; (80017cc <MX_I2C2_Init+0x54>)
 8001780:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_I2C2_Init+0x50>)
 8001784:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <MX_I2C2_Init+0x58>)
 8001786:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_I2C2_Init+0x50>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_I2C2_Init+0x50>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_I2C2_Init+0x50>)
 8001796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <MX_I2C2_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_I2C2_Init+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <MX_I2C2_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_I2C2_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_I2C2_Init+0x50>)
 80017b6:	f001 ffbf 	bl	8003738 <HAL_I2C_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017c0:	f000 fa4a 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20010354 	.word	0x20010354
 80017cc:	40005800 	.word	0x40005800
 80017d0:	000186a0 	.word	0x000186a0

080017d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a42      	ldr	r2, [pc, #264]	; (80018fc <HAL_I2C_MspInit+0x128>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d13c      	bne.n	8001870 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	4b41      	ldr	r3, [pc, #260]	; (8001900 <HAL_I2C_MspInit+0x12c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a40      	ldr	r2, [pc, #256]	; (8001900 <HAL_I2C_MspInit+0x12c>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b3e      	ldr	r3, [pc, #248]	; (8001900 <HAL_I2C_MspInit+0x12c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001812:	23c0      	movs	r3, #192	; 0xc0
 8001814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001816:	2312      	movs	r3, #18
 8001818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800181a:	2301      	movs	r3, #1
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001822:	2304      	movs	r3, #4
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001826:	f107 031c 	add.w	r3, r7, #28
 800182a:	4619      	mov	r1, r3
 800182c:	4835      	ldr	r0, [pc, #212]	; (8001904 <HAL_I2C_MspInit+0x130>)
 800182e:	f001 fdc1 	bl	80033b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	4b32      	ldr	r3, [pc, #200]	; (8001900 <HAL_I2C_MspInit+0x12c>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a31      	ldr	r2, [pc, #196]	; (8001900 <HAL_I2C_MspInit+0x12c>)
 800183c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <HAL_I2C_MspInit+0x12c>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	201f      	movs	r0, #31
 8001854:	f001 fd47 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001858:	201f      	movs	r0, #31
 800185a:	f001 fd60 	bl	800331e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	2020      	movs	r0, #32
 8001864:	f001 fd3f 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001868:	2020      	movs	r0, #32
 800186a:	f001 fd58 	bl	800331e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800186e:	e041      	b.n	80018f4 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a24      	ldr	r2, [pc, #144]	; (8001908 <HAL_I2C_MspInit+0x134>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d13c      	bne.n	80018f4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <HAL_I2C_MspInit+0x12c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <HAL_I2C_MspInit+0x12c>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_I2C_MspInit+0x12c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189c:	2312      	movs	r3, #18
 800189e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018a8:	2304      	movs	r3, #4
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4619      	mov	r1, r3
 80018b2:	4814      	ldr	r0, [pc, #80]	; (8001904 <HAL_I2C_MspInit+0x130>)
 80018b4:	f001 fd7e 	bl	80033b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018b8:	2308      	movs	r3, #8
 80018ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018bc:	2312      	movs	r3, #18
 80018be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80018c8:	2309      	movs	r3, #9
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	480c      	ldr	r0, [pc, #48]	; (8001904 <HAL_I2C_MspInit+0x130>)
 80018d4:	f001 fd6e 	bl	80033b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <HAL_I2C_MspInit+0x12c>)
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	4a07      	ldr	r2, [pc, #28]	; (8001900 <HAL_I2C_MspInit+0x12c>)
 80018e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018e6:	6413      	str	r3, [r2, #64]	; 0x40
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_I2C_MspInit+0x12c>)
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3730      	adds	r7, #48	; 0x30
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40005400 	.word	0x40005400
 8001900:	40023800 	.word	0x40023800
 8001904:	40020400 	.word	0x40020400
 8001908:	40005800 	.word	0x40005800

0800190c <HAL_I2C_ListenCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

extern void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef* i2cHandle) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

	if (i2cHandle->Instance == I2C1) {
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_I2C_ListenCpltCallback+0x20>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d102      	bne.n	8001924 <HAL_I2C_ListenCpltCallback+0x18>
		HAL_I2C_EnableListen_IT (i2cHandle);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f002 fc58 	bl	80041d4 <HAL_I2C_EnableListen_IT>
	}

}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40005400 	.word	0x40005400

08001930 <HAL_I2C_AddrCallback>:

extern void HAL_I2C_AddrCallback (I2C_HandleTypeDef* i2cHandle, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
 800193c:	4613      	mov	r3, r2
 800193e:	803b      	strh	r3, [r7, #0]

	if (i2cHandle->Instance == I2C1) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a14      	ldr	r2, [pc, #80]	; (8001998 <HAL_I2C_AddrCallback+0x68>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d122      	bne.n	8001990 <HAL_I2C_AddrCallback+0x60>
		if ( TransferDirection == I2C_DIRECTION_TRANSMIT ) { // If the master wants to transmit the data
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d10d      	bne.n	800196c <HAL_I2C_AddrCallback+0x3c>

			RxCount = 0;
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_I2C_AddrCallback+0x6c>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_FIRST_FRAME);
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_I2C_AddrCallback+0x6c>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_I2C_AddrCallback+0x70>)
 800195e:	18d1      	adds	r1, r2, r3
 8001960:	2301      	movs	r3, #1
 8001962:	2201      	movs	r2, #1
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f002 fbc2 	bl	80040ee <HAL_I2C_Slave_Seq_Receive_IT>

		}

	}

}
 800196a:	e011      	b.n	8001990 <HAL_I2C_AddrCallback+0x60>
			TxCount = 0;
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <HAL_I2C_AddrCallback+0x74>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
			StartReg = RxData[0];
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_I2C_AddrCallback+0x70>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_I2C_AddrCallback+0x78>)
 800197a:	601a      	str	r2, [r3, #0]
			ret = HAL_I2C_Slave_Seq_Transmit_IT(i2cHandle, (uint8_t *) Registers, RegSize * 2, I2C_FIRST_FRAME);
 800197c:	2301      	movs	r3, #1
 800197e:	2208      	movs	r2, #8
 8001980:	490a      	ldr	r1, [pc, #40]	; (80019ac <HAL_I2C_AddrCallback+0x7c>)
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f002 fb40 	bl	8004008 <HAL_I2C_Slave_Seq_Transmit_IT>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <HAL_I2C_AddrCallback+0x80>)
 800198e:	701a      	strb	r2, [r3, #0]
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40005400 	.word	0x40005400
 800199c:	200102e9 	.word	0x200102e9
 80019a0:	200102ec 	.word	0x200102ec
 80019a4:	200102e8 	.word	0x200102e8
 80019a8:	200102f4 	.word	0x200102f4
 80019ac:	20000090 	.word	0x20000090
 80019b0:	200103ac 	.word	0x200103ac

080019b4 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback (I2C_HandleTypeDef* i2cHandle) {
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
		// HAL_I2C_Slave_Seq_Transmit_IT (i2cHandle, (uint8_t *) (Registers[TxCount + StartReg] >> 8), 1, I2C_NEXT_FRAME);
		// HAL_I2C_Slave_Seq_Transmit_IT (i2cHandle, (uint8_t *) (Registers[TxCount + StartReg] & 0xFF), 1, I2C_NEXT_FRAME);

	}

}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback (I2C_HandleTypeDef* i2cHandle) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

	if (i2cHandle->Instance == I2C1) {
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d128      	bne.n	8001a2c <HAL_I2C_SlaveRxCpltCallback+0x64>

		RxCount++;
 80019da:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	3301      	adds	r3, #1
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 80019e4:	701a      	strb	r2, [r3, #0]

		if ( RxCount < RxSize ) {
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b05      	cmp	r3, #5
 80019ec:	d818      	bhi.n	8001a20 <HAL_I2C_SlaveRxCpltCallback+0x58>

			if (RxCount == RxSize - 1) {
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d10a      	bne.n	8001a0c <HAL_I2C_SlaveRxCpltCallback+0x44>
				HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_LAST_FRAME);
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_I2C_SlaveRxCpltCallback+0x74>)
 80019fe:	18d1      	adds	r1, r2, r3
 8001a00:	2320      	movs	r3, #32
 8001a02:	2201      	movs	r2, #1
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f002 fb72 	bl	80040ee <HAL_I2C_Slave_Seq_Receive_IT>
 8001a0a:	e009      	b.n	8001a20 <HAL_I2C_SlaveRxCpltCallback+0x58>
			} else {
				HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_NEXT_FRAME);
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8001a14:	18d1      	adds	r1, r2, r3
 8001a16:	2304      	movs	r3, #4
 8001a18:	2201      	movs	r2, #1
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f002 fb67 	bl	80040ee <HAL_I2C_Slave_Seq_Receive_IT>
			}
		}

		if ( RxCount == RxSize) {
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b06      	cmp	r3, #6
 8001a26:	d101      	bne.n	8001a2c <HAL_I2C_SlaveRxCpltCallback+0x64>
			ProcessData();
 8001a28:	f000 f836 	bl	8001a98 <ProcessData>
		}

	}

}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40005400 	.word	0x40005400
 8001a38:	200102e9 	.word	0x200102e9
 8001a3c:	200102ec 	.word	0x200102ec

08001a40 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback (I2C_HandleTypeDef* i2cHandle) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

	if (i2cHandle->Instance == I2C1) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <HAL_I2C_ErrorCallback+0x50>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d11a      	bne.n	8001a88 <HAL_I2C_ErrorCallback+0x48>

		if ( HAL_I2C_GetError (i2cHandle) == 4) {
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f002 fe18 	bl	8004688 <HAL_I2C_GetError>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d111      	bne.n	8001a82 <HAL_I2C_ErrorCallback+0x42>

			__HAL_I2C_CLEAR_FLAG (i2cHandle, I2C_FLAG_AF); 	// Clear AF flag
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a66:	615a      	str	r2, [r3, #20]

			if ( TxCount == 0) { 						// Error while recieving
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_I2C_ErrorCallback+0x54>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <HAL_I2C_ErrorCallback+0x36>
				ProcessData();
 8001a70:	f000 f812 	bl	8001a98 <ProcessData>
 8001a74:	e005      	b.n	8001a82 <HAL_I2C_ErrorCallback+0x42>
			} else { 									// Error while transmitting
				TxCount--;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <HAL_I2C_ErrorCallback+0x54>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_I2C_ErrorCallback+0x54>)
 8001a80:	701a      	strb	r2, [r3, #0]
			}

		}

	HAL_I2C_EnableListen_IT(i2cHandle);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f002 fba6 	bl	80041d4 <HAL_I2C_EnableListen_IT>

	}

}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40005400 	.word	0x40005400
 8001a94:	200102e8 	.word	0x200102e8

08001a98 <ProcessData>:

void ProcessData (void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0

	StartReg = RxData[0]; 			// Start address of registers to be written
 8001a9e:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <ProcessData+0x90>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <ProcessData+0x94>)
 8001aa6:	601a      	str	r2, [r3, #0]
	NumReg = RxCount - 1; 			// Number of registers to be written
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <ProcessData+0x98>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <ProcessData+0x9c>)
 8001ab0:	6013      	str	r3, [r2, #0]
	EndReg = StartReg + NumReg - 1; // Last register to be written
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <ProcessData+0x94>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <ProcessData+0x9c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	3b01      	subs	r3, #1
 8001abe:	4a1e      	ldr	r2, [pc, #120]	; (8001b38 <ProcessData+0xa0>)
 8001ac0:	6013      	str	r3, [r2, #0]
	if (EndReg > RxSize) {
		//Error_Handler();
	}

	// Write data into the register using a for loop
	for (int i = 2; i < NumReg + 1; i++) {
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	e00f      	b.n	8001ae8 <ProcessData+0x50>
		Registers[StartReg++] = RxData[i];
 8001ac8:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <ProcessData+0x90>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	7818      	ldrb	r0, [r3, #0]
 8001ad0:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <ProcessData+0x94>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	4915      	ldr	r1, [pc, #84]	; (8001b2c <ProcessData+0x94>)
 8001ad8:	600a      	str	r2, [r1, #0]
 8001ada:	b281      	uxth	r1, r0
 8001adc:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <ProcessData+0xa4>)
 8001ade:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 2; i < NumReg + 1; i++) {
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <ProcessData+0x9c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	ddea      	ble.n	8001ac8 <ProcessData+0x30>
	}

	// If the PWM is higher than 0 but the motor is not turning then startup
	if ( Registers[PWMReg] > 0 && Registers[RPMReg] == 0) {
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <ProcessData+0xa4>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d009      	beq.n	8001b0e <ProcessData+0x76>
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <ProcessData+0xa4>)
 8001afc:	88db      	ldrh	r3, [r3, #6]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d105      	bne.n	8001b0e <ProcessData+0x76>
		StartupSequence(Registers[DirReg]);
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <ProcessData+0xa4>)
 8001b04:	885b      	ldrh	r3, [r3, #2]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fa89 	bl	8001020 <StartupSequence>
	}

	// If the PWM is 0 but the motor is still turning shutdown
	if ( Registers[PWMReg] == 0 && Registers[RPMReg] > 0 ) {
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <ProcessData+0xa4>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
		//StopSequence();
	}

	// Call some functions
	ChangePWM(); 				// Update PWM values
 8001b14:	f7ff fbea 	bl	80012ec <ChangePWM>
	//memset(RxData, 0, RxSize); 	// Empty the RxData array

	Buzzer = 1;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <ProcessData+0xa8>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200102ec 	.word	0x200102ec
 8001b2c:	200102f4 	.word	0x200102f4
 8001b30:	200102e9 	.word	0x200102e9
 8001b34:	200102f8 	.word	0x200102f8
 8001b38:	200102fc 	.word	0x200102fc
 8001b3c:	20000090 	.word	0x20000090
 8001b40:	200103a8 	.word	0x200103a8

08001b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b48:	f000 fed4 	bl	80028f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b4c:	f000 f81a 	bl	8001b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b50:	f7ff fd2e 	bl	80015b0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001b54:	f000 fac0 	bl	80020d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b58:	f000 fb78 	bl	800224c <MX_TIM2_Init>
  MX_TIM9_Init();
 8001b5c:	f000 fcc2 	bl	80024e4 <MX_TIM9_Init>
  MX_I2C1_Init();
 8001b60:	f7ff fddc 	bl	800171c <MX_I2C1_Init>
  MX_ADC1_Init();
 8001b64:	f7ff fbfe 	bl	8001364 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001b68:	f7ff fe06 	bl	8001778 <MX_I2C2_Init>
  MX_TIM4_Init();
 8001b6c:	f000 fc0e 	bl	800238c <MX_TIM4_Init>
  MX_TIM3_Init();
 8001b70:	f000 fbb6 	bl	80022e0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001b74:	f000 fc5e 	bl	8002434 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	HAL_I2C_EnableListen_IT (&hi2c1);
 8001b78:	4801      	ldr	r0, [pc, #4]	; (8001b80 <main+0x3c>)
 8001b7a:	f002 fb2b 	bl	80041d4 <HAL_I2C_EnableListen_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <main+0x3a>
 8001b80:	20010300 	.word	0x20010300

08001b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b094      	sub	sp, #80	; 0x50
 8001b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b8a:	f107 0320 	add.w	r3, r7, #32
 8001b8e:	2230      	movs	r2, #48	; 0x30
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f007 fa99 	bl	80090ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	4a27      	ldr	r2, [pc, #156]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb8:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <SystemClock_Config+0xd0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <SystemClock_Config+0xd0>)
 8001bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <SystemClock_Config+0xd0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001be0:	2301      	movs	r3, #1
 8001be2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001be4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bea:	2302      	movs	r3, #2
 8001bec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001bf4:	2319      	movs	r3, #25
 8001bf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001bf8:	23c0      	movs	r3, #192	; 0xc0
 8001bfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c00:	2304      	movs	r3, #4
 8001c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c04:	f107 0320 	add.w	r3, r7, #32
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f004 facf 	bl	80061ac <HAL_RCC_OscConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c14:	f000 f820 	bl	8001c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c18:	230f      	movs	r3, #15
 8001c1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2103      	movs	r1, #3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f004 fd30 	bl	800669c <HAL_RCC_ClockConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c42:	f000 f809 	bl	8001c58 <Error_Handler>
  }
}
 8001c46:	bf00      	nop
 8001c48:	3750      	adds	r7, #80	; 0x50
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000

08001c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c5c:	b672      	cpsid	i
}
 8001c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <Error_Handler+0x8>
	...

08001c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <NMI_Handler+0x4>

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <BusFault_Handler+0x4>

08001ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <UsageFault_Handler+0x4>

08001cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d00:	f000 fe4a 	bl	8002998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

	Buzzer = 1;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <EXTI4_IRQHandler+0x14>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001d12:	2010      	movs	r0, #16
 8001d14:	f001 fcec 	bl	80036f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	200103a8 	.word	0x200103a8

08001d20 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <ADC_IRQHandler+0x10>)
 8001d26:	f000 fe9a 	bl	8002a5e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200102a0 	.word	0x200102a0

08001d34 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	if ( (TIM9->SR & TIM_SR_CC2IF) >= 1) { // If the CC2IF is set it means a input capture has happened
 8001d38:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03f      	beq.n	8001dc4 <TIM1_BRK_TIM9_IRQHandler+0x90>

		Total -= RPM[i];
 8001d44:	4b2a      	ldr	r3, [pc, #168]	; (8001df0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a2a      	ldr	r2, [pc, #168]	; (8001df4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001d4a:	8812      	ldrh	r2, [r2, #0]
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4a2a      	ldr	r2, [pc, #168]	; (8001df8 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001d50:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001d58:	6013      	str	r3, [r2, #0]
		RPM[i] = RPMConst / (TIM9->CCR2);
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <TIM1_BRK_TIM9_IRQHandler+0xc8>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4b23      	ldr	r3, [pc, #140]	; (8001dec <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d62:	fbb2 f1f3 	udiv	r1, r2, r3
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	b289      	uxth	r1, r1
 8001d6e:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001d70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		Total += RPM[i];
 8001d74:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001d7c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4413      	add	r3, r2
 8001d88:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001d8a:	6013      	str	r3, [r2, #0]

		i++;
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001d96:	801a      	strh	r2, [r3, #0]

		if ( i >= AvgSize - 1 ) {
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	2b7e      	cmp	r3, #126	; 0x7e
 8001d9e:	d902      	bls.n	8001da6 <TIM1_BRK_TIM9_IRQHandler+0x72>
			i = 0;
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	801a      	strh	r2, [r3, #0]
		}

		Registers[RPMReg] = Total / AvgSize;
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	09db      	lsrs	r3, r3, #7
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001db0:	80da      	strh	r2, [r3, #6]

		// If maximum RPM is exceeded -> shutdown
		if ( Registers[RPMReg] > MaximumRPM ) {
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001db4:	88db      	ldrh	r3, [r3, #6]
 8001db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d90e      	bls.n	8001ddc <TIM1_BRK_TIM9_IRQHandler+0xa8>
			StopSequence();
 8001dbe:	f7ff fa35 	bl	800122c <StopSequence>
 8001dc2:	e00b      	b.n	8001ddc <TIM1_BRK_TIM9_IRQHandler+0xa8>
		}
	} else {
		Registers[RPMReg] = 0; // If the CC2IF was not set it means the timer has overflowed and the motor is thus stationary
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	80da      	strh	r2, [r3, #6]
		Total = 0;
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
		memset(RPM, 0, AvgSize * 2);
 8001dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4808      	ldr	r0, [pc, #32]	; (8001df8 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001dd8:	f007 f977 	bl	80090ca <memset>
	}


  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ddc:	4809      	ldr	r0, [pc, #36]	; (8001e04 <TIM1_BRK_TIM9_IRQHandler+0xd0>)
 8001dde:	f005 fa99 	bl	8007314 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001de2:	4809      	ldr	r0, [pc, #36]	; (8001e08 <TIM1_BRK_TIM9_IRQHandler+0xd4>)
 8001de4:	f005 fa96 	bl	8007314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40014000 	.word	0x40014000
 8001df0:	200103b0 	.word	0x200103b0
 8001df4:	200104b4 	.word	0x200104b4
 8001df8:	200103b4 	.word	0x200103b4
 8001dfc:	20000290 	.word	0x20000290
 8001e00:	20000090 	.word	0x20000090
 8001e04:	200104bc 	.word	0x200104bc
 8001e08:	20010624 	.word	0x20010624

08001e0c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	PrepareCommutation (Registers[DirReg]); // Set next Commutation states
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 8001e12:	885b      	ldrh	r3, [r3, #2]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff f8bc 	bl	8000f94 <PrepareCommutation>

	TIM1->SR &= ~TIM_SR_COMIF; 				// Reset COMIF in SR register
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8001e22:	f023 0320 	bic.w	r3, r3, #32
 8001e26:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e28:	4804      	ldr	r0, [pc, #16]	; (8001e3c <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 8001e2a:	f005 fa73 	bl	8007314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000090 	.word	0x20000090
 8001e38:	40010000 	.word	0x40010000
 8001e3c:	200104bc 	.word	0x200104bc

08001e40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	// Reset Timer 9 counter.
	TIM9->CNT = 0x0;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <TIM2_IRQHandler+0x20>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24

	// Set COMG bit in EGR
	TIM1->EGR |= TIM_EGR_COMG;
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <TIM2_IRQHandler+0x24>)
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <TIM2_IRQHandler+0x24>)
 8001e50:	f043 0320 	orr.w	r3, r3, #32
 8001e54:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e56:	4804      	ldr	r0, [pc, #16]	; (8001e68 <TIM2_IRQHandler+0x28>)
 8001e58:	f005 fa5c 	bl	8007314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40014000 	.word	0x40014000
 8001e64:	40010000 	.word	0x40010000
 8001e68:	20010504 	.word	0x20010504

08001e6c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <I2C1_EV_IRQHandler+0x10>)
 8001e72:	f002 f9e5 	bl	8004240 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20010300 	.word	0x20010300

08001e80 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <I2C1_ER_IRQHandler+0x10>)
 8001e86:	f002 fb2e 	bl	80044e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20010300 	.word	0x20010300

08001e94 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM5_IRQn 0 */

	uint8_t buff[2];
	float Temp = 0;
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	607b      	str	r3, [r7, #4]

	buff[0] = 0x05;
 8001ea0:	2305      	movs	r3, #5
 8001ea2:	703b      	strb	r3, [r7, #0]
	buff[1] = 0x00;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	707b      	strb	r3, [r7, #1]

	ret = HAL_I2C_Master_Transmit(&hi2c2, MCP9808_ADDR << 1, buff, 1, HAL_MAX_DELAY);
 8001ea8:	463a      	mov	r2, r7
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	2130      	movs	r1, #48	; 0x30
 8001eb4:	4818      	ldr	r0, [pc, #96]	; (8001f18 <TIM5_IRQHandler+0x84>)
 8001eb6:	f001 fd83 	bl	80039c0 <HAL_I2C_Master_Transmit>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <TIM5_IRQHandler+0x88>)
 8001ec0:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Receive(&hi2c2, MCP9808_ADDR << 1, buff, 2, HAL_MAX_DELAY);
 8001ec2:	463a      	mov	r2, r7
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2302      	movs	r3, #2
 8001ecc:	2130      	movs	r1, #48	; 0x30
 8001ece:	4812      	ldr	r0, [pc, #72]	; (8001f18 <TIM5_IRQHandler+0x84>)
 8001ed0:	f001 fe74 	bl	8003bbc <HAL_I2C_Master_Receive>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <TIM5_IRQHandler+0x88>)
 8001eda:	701a      	strb	r2, [r3, #0]

	Temp = ((((int16_t)buff[0] << 11) + ((int16_t)buff[1] << 3)) >> 3) / 1600.0;
 8001edc:	783b      	ldrb	r3, [r7, #0]
 8001ede:	02da      	lsls	r2, r3, #11
 8001ee0:	787b      	ldrb	r3, [r7, #1]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	10db      	asrs	r3, r3, #3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fb23 	bl	8000534 <__aeabi_i2d>
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <TIM5_IRQHandler+0x8c>)
 8001ef4:	f7fe fcb2 	bl	800085c <__aeabi_ddiv>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	f7fe fe7a 	bl	8000bf8 <__aeabi_d2f>
 8001f04:	4603      	mov	r3, r0
 8001f06:	607b      	str	r3, [r7, #4]

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f08:	4806      	ldr	r0, [pc, #24]	; (8001f24 <TIM5_IRQHandler+0x90>)
 8001f0a:	f005 fa03 	bl	8007314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20010354 	.word	0x20010354
 8001f1c:	200103ac 	.word	0x200103ac
 8001f20:	40990000 	.word	0x40990000
 8001f24:	200105dc 	.word	0x200105dc

08001f28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return 1;
 8001f2c:	2301      	movs	r3, #1
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <_kill>:

int _kill(int pid, int sig)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f42:	f007 f915 	bl	8009170 <__errno>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2216      	movs	r2, #22
 8001f4a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_exit>:

void _exit (int status)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ffe7 	bl	8001f38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f6a:	e7fe      	b.n	8001f6a <_exit+0x12>

08001f6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	e00a      	b.n	8001f94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f7e:	f3af 8000 	nop.w
 8001f82:	4601      	mov	r1, r0
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	60ba      	str	r2, [r7, #8]
 8001f8a:	b2ca      	uxtb	r2, r1
 8001f8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	dbf0      	blt.n	8001f7e <_read+0x12>
  }

  return len;
 8001f9c:	687b      	ldr	r3, [r7, #4]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e009      	b.n	8001fcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	60ba      	str	r2, [r7, #8]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	dbf1      	blt.n	8001fb8 <_write+0x12>
  }
  return len;
 8001fd4:	687b      	ldr	r3, [r7, #4]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <_close>:

int _close(int file)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002006:	605a      	str	r2, [r3, #4]
  return 0;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <_isatty>:

int _isatty(int file)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <_sbrk+0x5c>)
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <_sbrk+0x60>)
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800205c:	4b13      	ldr	r3, [pc, #76]	; (80020ac <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <_sbrk+0x64>)
 8002066:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <_sbrk+0x68>)
 8002068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <_sbrk+0x64>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	429a      	cmp	r2, r3
 8002076:	d207      	bcs.n	8002088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002078:	f007 f87a 	bl	8009170 <__errno>
 800207c:	4603      	mov	r3, r0
 800207e:	220c      	movs	r2, #12
 8002080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
 8002086:	e009      	b.n	800209c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	4a05      	ldr	r2, [pc, #20]	; (80020ac <_sbrk+0x64>)
 8002098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20020000 	.word	0x20020000
 80020a8:	00000400 	.word	0x00000400
 80020ac:	200104b8 	.word	0x200104b8
 80020b0:	200107c0 	.word	0x200107c0

080020b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <SystemInit+0x20>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <SystemInit+0x20>)
 80020c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b096      	sub	sp, #88	; 0x58
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80020de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
 80020ec:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f8:	f107 0320 	add.w	r3, r7, #32
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
 8002108:	615a      	str	r2, [r3, #20]
 800210a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800210c:	463b      	mov	r3, r7
 800210e:	2220      	movs	r2, #32
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f006 ffd9 	bl	80090ca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002118:	4b4a      	ldr	r3, [pc, #296]	; (8002244 <MX_TIM1_Init+0x16c>)
 800211a:	4a4b      	ldr	r2, [pc, #300]	; (8002248 <MX_TIM1_Init+0x170>)
 800211c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800211e:	4b49      	ldr	r3, [pc, #292]	; (8002244 <MX_TIM1_Init+0x16c>)
 8002120:	2200      	movs	r2, #0
 8002122:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002124:	4b47      	ldr	r3, [pc, #284]	; (8002244 <MX_TIM1_Init+0x16c>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 800212a:	4b46      	ldr	r3, [pc, #280]	; (8002244 <MX_TIM1_Init+0x16c>)
 800212c:	f240 727f 	movw	r2, #1919	; 0x77f
 8002130:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002132:	4b44      	ldr	r3, [pc, #272]	; (8002244 <MX_TIM1_Init+0x16c>)
 8002134:	2200      	movs	r2, #0
 8002136:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002138:	4b42      	ldr	r3, [pc, #264]	; (8002244 <MX_TIM1_Init+0x16c>)
 800213a:	2200      	movs	r2, #0
 800213c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213e:	4b41      	ldr	r3, [pc, #260]	; (8002244 <MX_TIM1_Init+0x16c>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002144:	483f      	ldr	r0, [pc, #252]	; (8002244 <MX_TIM1_Init+0x16c>)
 8002146:	f004 fc89 	bl	8006a5c <HAL_TIM_Base_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002150:	f7ff fd82 	bl	8001c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002154:	483b      	ldr	r0, [pc, #236]	; (8002244 <MX_TIM1_Init+0x16c>)
 8002156:	f004 fd62 	bl	8006c1e <HAL_TIM_PWM_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8002160:	f7ff fd7a 	bl	8001c58 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002164:	2304      	movs	r3, #4
 8002166:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002168:	2300      	movs	r3, #0
 800216a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800216c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002170:	4619      	mov	r1, r3
 8002172:	4834      	ldr	r0, [pc, #208]	; (8002244 <MX_TIM1_Init+0x16c>)
 8002174:	f005 fb34 	bl	80077e0 <HAL_TIM_SlaveConfigSynchro>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800217e:	f7ff fd6b 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800218a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800218e:	4619      	mov	r1, r3
 8002190:	482c      	ldr	r0, [pc, #176]	; (8002244 <MX_TIM1_Init+0x16c>)
 8002192:	f006 f95b 	bl	800844c <HAL_TIMEx_MasterConfigSynchronization>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800219c:	f7ff fd5c 	bl	8001c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021a0:	2360      	movs	r3, #96	; 0x60
 80021a2:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021b4:	2300      	movs	r3, #0
 80021b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021b8:	2300      	movs	r3, #0
 80021ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021bc:	f107 0320 	add.w	r3, r7, #32
 80021c0:	2200      	movs	r2, #0
 80021c2:	4619      	mov	r1, r3
 80021c4:	481f      	ldr	r0, [pc, #124]	; (8002244 <MX_TIM1_Init+0x16c>)
 80021c6:	f005 fa49 	bl	800765c <HAL_TIM_PWM_ConfigChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80021d0:	f7ff fd42 	bl	8001c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021d4:	f107 0320 	add.w	r3, r7, #32
 80021d8:	2204      	movs	r2, #4
 80021da:	4619      	mov	r1, r3
 80021dc:	4819      	ldr	r0, [pc, #100]	; (8002244 <MX_TIM1_Init+0x16c>)
 80021de:	f005 fa3d 	bl	800765c <HAL_TIM_PWM_ConfigChannel>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80021e8:	f7ff fd36 	bl	8001c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021ec:	f107 0320 	add.w	r3, r7, #32
 80021f0:	2208      	movs	r2, #8
 80021f2:	4619      	mov	r1, r3
 80021f4:	4813      	ldr	r0, [pc, #76]	; (8002244 <MX_TIM1_Init+0x16c>)
 80021f6:	f005 fa31 	bl	800765c <HAL_TIM_PWM_ConfigChannel>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002200:	f7ff fd2a 	bl	8001c58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800221c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002222:	463b      	mov	r3, r7
 8002224:	4619      	mov	r1, r3
 8002226:	4807      	ldr	r0, [pc, #28]	; (8002244 <MX_TIM1_Init+0x16c>)
 8002228:	f006 f97e 	bl	8008528 <HAL_TIMEx_ConfigBreakDeadTime>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8002232:	f7ff fd11 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002236:	4803      	ldr	r0, [pc, #12]	; (8002244 <MX_TIM1_Init+0x16c>)
 8002238:	f000 fad6 	bl	80027e8 <HAL_TIM_MspPostInit>

}
 800223c:	bf00      	nop
 800223e:	3758      	adds	r7, #88	; 0x58
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200104bc 	.word	0x200104bc
 8002248:	40010000 	.word	0x40010000

0800224c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8002252:	f107 0308 	add.w	r3, r7, #8
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002260:	463b      	mov	r3, r7
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <MX_TIM2_Init+0x90>)
 800226a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800226e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002270:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <MX_TIM2_Init+0x90>)
 8002272:	2200      	movs	r2, #0
 8002274:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002276:	4b19      	ldr	r3, [pc, #100]	; (80022dc <MX_TIM2_Init+0x90>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800227c:	4b17      	ldr	r3, [pc, #92]	; (80022dc <MX_TIM2_Init+0x90>)
 800227e:	f04f 32ff 	mov.w	r2, #4294967295
 8002282:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <MX_TIM2_Init+0x90>)
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228a:	4b14      	ldr	r3, [pc, #80]	; (80022dc <MX_TIM2_Init+0x90>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 80022a0:	f107 0308 	add.w	r3, r7, #8
 80022a4:	4619      	mov	r1, r3
 80022a6:	480d      	ldr	r0, [pc, #52]	; (80022dc <MX_TIM2_Init+0x90>)
 80022a8:	f005 ff6e 	bl	8008188 <HAL_TIMEx_HallSensor_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80022b2:	f7ff fcd1 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80022b6:	2350      	movs	r3, #80	; 0x50
 80022b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022be:	463b      	mov	r3, r7
 80022c0:	4619      	mov	r1, r3
 80022c2:	4806      	ldr	r0, [pc, #24]	; (80022dc <MX_TIM2_Init+0x90>)
 80022c4:	f006 f8c2 	bl	800844c <HAL_TIMEx_MasterConfigSynchronization>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80022ce:	f7ff fcc3 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20010504 	.word	0x20010504

080022e0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e6:	f107 0320 	add.w	r3, r7, #32
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]
 80022fc:	611a      	str	r2, [r3, #16]
 80022fe:	615a      	str	r2, [r3, #20]
 8002300:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002302:	4b20      	ldr	r3, [pc, #128]	; (8002384 <MX_TIM3_Init+0xa4>)
 8002304:	4a20      	ldr	r2, [pc, #128]	; (8002388 <MX_TIM3_Init+0xa8>)
 8002306:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002308:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <MX_TIM3_Init+0xa4>)
 800230a:	2200      	movs	r2, #0
 800230c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230e:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <MX_TIM3_Init+0xa4>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 959;
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <MX_TIM3_Init+0xa4>)
 8002316:	f240 32bf 	movw	r2, #959	; 0x3bf
 800231a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <MX_TIM3_Init+0xa4>)
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <MX_TIM3_Init+0xa4>)
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002328:	4816      	ldr	r0, [pc, #88]	; (8002384 <MX_TIM3_Init+0xa4>)
 800232a:	f004 fc78 	bl	8006c1e <HAL_TIM_PWM_Init>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002334:	f7ff fc90 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002338:	2320      	movs	r3, #32
 800233a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002340:	f107 0320 	add.w	r3, r7, #32
 8002344:	4619      	mov	r1, r3
 8002346:	480f      	ldr	r0, [pc, #60]	; (8002384 <MX_TIM3_Init+0xa4>)
 8002348:	f006 f880 	bl	800844c <HAL_TIMEx_MasterConfigSynchronization>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002352:	f7ff fc81 	bl	8001c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002356:	2360      	movs	r3, #96	; 0x60
 8002358:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	2200      	movs	r2, #0
 800236a:	4619      	mov	r1, r3
 800236c:	4805      	ldr	r0, [pc, #20]	; (8002384 <MX_TIM3_Init+0xa4>)
 800236e:	f005 f975 	bl	800765c <HAL_TIM_PWM_ConfigChannel>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002378:	f7ff fc6e 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800237c:	bf00      	nop
 800237e:	3728      	adds	r7, #40	; 0x28
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	2001054c 	.word	0x2001054c
 8002388:	40000400 	.word	0x40000400

0800238c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002392:	f107 0310 	add.w	r3, r7, #16
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800239c:	463b      	mov	r3, r7
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023a8:	4b20      	ldr	r3, [pc, #128]	; (800242c <MX_TIM4_Init+0xa0>)
 80023aa:	4a21      	ldr	r2, [pc, #132]	; (8002430 <MX_TIM4_Init+0xa4>)
 80023ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023ae:	4b1f      	ldr	r3, [pc, #124]	; (800242c <MX_TIM4_Init+0xa0>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <MX_TIM4_Init+0xa0>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80023ba:	4b1c      	ldr	r3, [pc, #112]	; (800242c <MX_TIM4_Init+0xa0>)
 80023bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <MX_TIM4_Init+0xa0>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c8:	4b18      	ldr	r3, [pc, #96]	; (800242c <MX_TIM4_Init+0xa0>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80023ce:	4817      	ldr	r0, [pc, #92]	; (800242c <MX_TIM4_Init+0xa0>)
 80023d0:	f004 fd88 	bl	8006ee4 <HAL_TIM_IC_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80023da:	f7ff fc3d 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023e6:	f107 0310 	add.w	r3, r7, #16
 80023ea:	4619      	mov	r1, r3
 80023ec:	480f      	ldr	r0, [pc, #60]	; (800242c <MX_TIM4_Init+0xa0>)
 80023ee:	f006 f82d 	bl	800844c <HAL_TIMEx_MasterConfigSynchronization>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80023f8:	f7ff fc2e 	bl	8001c58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023fc:	2300      	movs	r3, #0
 80023fe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002400:	2301      	movs	r3, #1
 8002402:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800240c:	463b      	mov	r3, r7
 800240e:	2208      	movs	r2, #8
 8002410:	4619      	mov	r1, r3
 8002412:	4806      	ldr	r0, [pc, #24]	; (800242c <MX_TIM4_Init+0xa0>)
 8002414:	f005 f886 	bl	8007524 <HAL_TIM_IC_ConfigChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800241e:	f7ff fc1b 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20010594 	.word	0x20010594
 8002430:	40000800 	.word	0x40000800

08002434 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08a      	sub	sp, #40	; 0x28
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800243a:	f107 0320 	add.w	r3, r7, #32
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	609a      	str	r2, [r3, #8]
 800244e:	60da      	str	r2, [r3, #12]
 8002450:	611a      	str	r2, [r3, #16]
 8002452:	615a      	str	r2, [r3, #20]
 8002454:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <MX_TIM5_Init+0xa4>)
 8002458:	4a20      	ldr	r2, [pc, #128]	; (80024dc <MX_TIM5_Init+0xa8>)
 800245a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100;
 800245c:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <MX_TIM5_Init+0xa4>)
 800245e:	2264      	movs	r2, #100	; 0x64
 8002460:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <MX_TIM5_Init+0xa4>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 960000;
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <MX_TIM5_Init+0xa4>)
 800246a:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <MX_TIM5_Init+0xac>)
 800246c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246e:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <MX_TIM5_Init+0xa4>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002474:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <MX_TIM5_Init+0xa4>)
 8002476:	2200      	movs	r2, #0
 8002478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800247a:	4817      	ldr	r0, [pc, #92]	; (80024d8 <MX_TIM5_Init+0xa4>)
 800247c:	f004 fbcf 	bl	8006c1e <HAL_TIM_PWM_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8002486:	f7ff fbe7 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002492:	f107 0320 	add.w	r3, r7, #32
 8002496:	4619      	mov	r1, r3
 8002498:	480f      	ldr	r0, [pc, #60]	; (80024d8 <MX_TIM5_Init+0xa4>)
 800249a:	f005 ffd7 	bl	800844c <HAL_TIMEx_MasterConfigSynchronization>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80024a4:	f7ff fbd8 	bl	8001c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a8:	2360      	movs	r3, #96	; 0x60
 80024aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	2200      	movs	r2, #0
 80024bc:	4619      	mov	r1, r3
 80024be:	4806      	ldr	r0, [pc, #24]	; (80024d8 <MX_TIM5_Init+0xa4>)
 80024c0:	f005 f8cc 	bl	800765c <HAL_TIM_PWM_ConfigChannel>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80024ca:	f7ff fbc5 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80024ce:	bf00      	nop
 80024d0:	3728      	adds	r7, #40	; 0x28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200105dc 	.word	0x200105dc
 80024dc:	40000c00 	.word	0x40000c00
 80024e0:	000ea600 	.word	0x000ea600

080024e4 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80024ea:	463b      	mov	r3, r7
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <MX_TIM9_Init+0x78>)
 80024f8:	4a19      	ldr	r2, [pc, #100]	; (8002560 <MX_TIM9_Init+0x7c>)
 80024fa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1499;
 80024fc:	4b17      	ldr	r3, [pc, #92]	; (800255c <MX_TIM9_Init+0x78>)
 80024fe:	f240 52db 	movw	r2, #1499	; 0x5db
 8002502:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <MX_TIM9_Init+0x78>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 63999;
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <MX_TIM9_Init+0x78>)
 800250c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002510:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002512:	4b12      	ldr	r3, [pc, #72]	; (800255c <MX_TIM9_Init+0x78>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002518:	4b10      	ldr	r3, [pc, #64]	; (800255c <MX_TIM9_Init+0x78>)
 800251a:	2200      	movs	r2, #0
 800251c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 800251e:	480f      	ldr	r0, [pc, #60]	; (800255c <MX_TIM9_Init+0x78>)
 8002520:	f004 fce0 	bl	8006ee4 <HAL_TIM_IC_Init>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800252a:	f7ff fb95 	bl	8001c58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800252e:	2300      	movs	r3, #0
 8002530:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002532:	2301      	movs	r3, #1
 8002534:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 800253a:	2302      	movs	r3, #2
 800253c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800253e:	463b      	mov	r3, r7
 8002540:	2204      	movs	r2, #4
 8002542:	4619      	mov	r1, r3
 8002544:	4805      	ldr	r0, [pc, #20]	; (800255c <MX_TIM9_Init+0x78>)
 8002546:	f004 ffed 	bl	8007524 <HAL_TIM_IC_ConfigChannel>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM9_Init+0x70>
  {
    Error_Handler();
 8002550:	f7ff fb82 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20010624 	.word	0x20010624
 8002560:	40014000 	.word	0x40014000

08002564 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a12      	ldr	r2, [pc, #72]	; (80025bc <HAL_TIM_Base_MspInit+0x58>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d11d      	bne.n	80025b2 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_TIM_Base_MspInit+0x5c>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	4a10      	ldr	r2, [pc, #64]	; (80025c0 <HAL_TIM_Base_MspInit+0x5c>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6453      	str	r3, [r2, #68]	; 0x44
 8002586:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_TIM_Base_MspInit+0x5c>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	2018      	movs	r0, #24
 8002598:	f000 fea5 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800259c:	2018      	movs	r0, #24
 800259e:	f000 febe 	bl	800331e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	201a      	movs	r0, #26
 80025a8:	f000 fe9d 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80025ac:	201a      	movs	r0, #26
 80025ae:	f000 feb6 	bl	800331e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40010000 	.word	0x40010000
 80025c0:	40023800 	.word	0x40023800

080025c4 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	; 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e4:	d133      	bne.n	800264e <HAL_TIMEx_HallSensor_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	4a1a      	ldr	r2, [pc, #104]	; (8002658 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6413      	str	r3, [r2, #64]	; 0x40
 80025f6:	4b18      	ldr	r3, [pc, #96]	; (8002658 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b14      	ldr	r3, [pc, #80]	; (8002658 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a13      	ldr	r2, [pc, #76]	; (8002658 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b11      	ldr	r3, [pc, #68]	; (8002658 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800261e:	2307      	movs	r3, #7
 8002620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002626:	2301      	movs	r3, #1
 8002628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262a:	2300      	movs	r3, #0
 800262c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800262e:	2301      	movs	r3, #1
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	4808      	ldr	r0, [pc, #32]	; (800265c <HAL_TIMEx_HallSensor_MspInit+0x98>)
 800263a:	f000 febb 	bl	80033b4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800263e:	2200      	movs	r2, #0
 8002640:	2100      	movs	r1, #0
 8002642:	201c      	movs	r0, #28
 8002644:	f000 fe4f 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002648:	201c      	movs	r0, #28
 800264a:	f000 fe68 	bl	800331e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800264e:	bf00      	nop
 8002650:	3728      	adds	r7, #40	; 0x28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	40020000 	.word	0x40020000

08002660 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a18      	ldr	r2, [pc, #96]	; (80026d0 <HAL_TIM_PWM_MspInit+0x70>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d10e      	bne.n	8002690 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <HAL_TIM_PWM_MspInit+0x74>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <HAL_TIM_PWM_MspInit+0x74>)
 800267c:	f043 0302 	orr.w	r3, r3, #2
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <HAL_TIM_PWM_MspInit+0x74>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800268e:	e01a      	b.n	80026c6 <HAL_TIM_PWM_MspInit+0x66>
  else if(tim_pwmHandle->Instance==TIM5)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a10      	ldr	r2, [pc, #64]	; (80026d8 <HAL_TIM_PWM_MspInit+0x78>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d115      	bne.n	80026c6 <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <HAL_TIM_PWM_MspInit+0x74>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <HAL_TIM_PWM_MspInit+0x74>)
 80026a4:	f043 0308 	orr.w	r3, r3, #8
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_TIM_PWM_MspInit+0x74>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	2032      	movs	r0, #50	; 0x32
 80026bc:	f000 fe13 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80026c0:	2032      	movs	r0, #50	; 0x32
 80026c2:	f000 fe2c 	bl	800331e <HAL_NVIC_EnableIRQ>
}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40000400 	.word	0x40000400
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40000c00 	.word	0x40000c00

080026dc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08c      	sub	sp, #48	; 0x30
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 031c 	add.w	r3, r7, #28
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM4)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a36      	ldr	r2, [pc, #216]	; (80027d4 <HAL_TIM_IC_MspInit+0xf8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d12d      	bne.n	800275a <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	4b35      	ldr	r3, [pc, #212]	; (80027d8 <HAL_TIM_IC_MspInit+0xfc>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	4a34      	ldr	r2, [pc, #208]	; (80027d8 <HAL_TIM_IC_MspInit+0xfc>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	6413      	str	r3, [r2, #64]	; 0x40
 800270e:	4b32      	ldr	r3, [pc, #200]	; (80027d8 <HAL_TIM_IC_MspInit+0xfc>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	61bb      	str	r3, [r7, #24]
 8002718:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	4b2e      	ldr	r3, [pc, #184]	; (80027d8 <HAL_TIM_IC_MspInit+0xfc>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a2d      	ldr	r2, [pc, #180]	; (80027d8 <HAL_TIM_IC_MspInit+0xfc>)
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <HAL_TIM_IC_MspInit+0xfc>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800273a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	2302      	movs	r3, #2
 800273e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002744:	2300      	movs	r3, #0
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002748:	2302      	movs	r3, #2
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274c:	f107 031c 	add.w	r3, r7, #28
 8002750:	4619      	mov	r1, r3
 8002752:	4822      	ldr	r0, [pc, #136]	; (80027dc <HAL_TIM_IC_MspInit+0x100>)
 8002754:	f000 fe2e 	bl	80033b4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002758:	e038      	b.n	80027cc <HAL_TIM_IC_MspInit+0xf0>
  else if(tim_icHandle->Instance==TIM9)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a20      	ldr	r2, [pc, #128]	; (80027e0 <HAL_TIM_IC_MspInit+0x104>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d133      	bne.n	80027cc <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002764:	2300      	movs	r3, #0
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_TIM_IC_MspInit+0xfc>)
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <HAL_TIM_IC_MspInit+0xfc>)
 800276e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002772:	6453      	str	r3, [r2, #68]	; 0x44
 8002774:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <HAL_TIM_IC_MspInit+0xfc>)
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <HAL_TIM_IC_MspInit+0xfc>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	4a13      	ldr	r2, [pc, #76]	; (80027d8 <HAL_TIM_IC_MspInit+0xfc>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6313      	str	r3, [r2, #48]	; 0x30
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_TIM_IC_MspInit+0xfc>)
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800279c:	2308      	movs	r3, #8
 800279e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027a4:	2301      	movs	r3, #1
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80027ac:	2303      	movs	r3, #3
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	4619      	mov	r1, r3
 80027b6:	480b      	ldr	r0, [pc, #44]	; (80027e4 <HAL_TIM_IC_MspInit+0x108>)
 80027b8:	f000 fdfc 	bl	80033b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80027bc:	2200      	movs	r2, #0
 80027be:	2100      	movs	r1, #0
 80027c0:	2018      	movs	r0, #24
 80027c2:	f000 fd90 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80027c6:	2018      	movs	r0, #24
 80027c8:	f000 fda9 	bl	800331e <HAL_NVIC_EnableIRQ>
}
 80027cc:	bf00      	nop
 80027ce:	3730      	adds	r7, #48	; 0x30
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40000800 	.word	0x40000800
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40020400 	.word	0x40020400
 80027e0:	40014000 	.word	0x40014000
 80027e4:	40020000 	.word	0x40020000

080027e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	; 0x28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a22      	ldr	r2, [pc, #136]	; (8002890 <HAL_TIM_MspPostInit+0xa8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d13d      	bne.n	8002886 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	4b21      	ldr	r3, [pc, #132]	; (8002894 <HAL_TIM_MspPostInit+0xac>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	4a20      	ldr	r2, [pc, #128]	; (8002894 <HAL_TIM_MspPostInit+0xac>)
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	6313      	str	r3, [r2, #48]	; 0x30
 800281a:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <HAL_TIM_MspPostInit+0xac>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <HAL_TIM_MspPostInit+0xac>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a19      	ldr	r2, [pc, #100]	; (8002894 <HAL_TIM_MspPostInit+0xac>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b17      	ldr	r3, [pc, #92]	; (8002894 <HAL_TIM_MspPostInit+0xac>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002842:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	2300      	movs	r3, #0
 8002852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002854:	2301      	movs	r3, #1
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	4619      	mov	r1, r3
 800285e:	480e      	ldr	r0, [pc, #56]	; (8002898 <HAL_TIM_MspPostInit+0xb0>)
 8002860:	f000 fda8 	bl	80033b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002864:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002872:	2300      	movs	r3, #0
 8002874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002876:	2301      	movs	r3, #1
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287a:	f107 0314 	add.w	r3, r7, #20
 800287e:	4619      	mov	r1, r3
 8002880:	4806      	ldr	r0, [pc, #24]	; (800289c <HAL_TIM_MspPostInit+0xb4>)
 8002882:	f000 fd97 	bl	80033b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002886:	bf00      	nop
 8002888:	3728      	adds	r7, #40	; 0x28
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40010000 	.word	0x40010000
 8002894:	40023800 	.word	0x40023800
 8002898:	40020400 	.word	0x40020400
 800289c:	40020000 	.word	0x40020000

080028a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80028a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028a4:	480d      	ldr	r0, [pc, #52]	; (80028dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028a6:	490e      	ldr	r1, [pc, #56]	; (80028e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028a8:	4a0e      	ldr	r2, [pc, #56]	; (80028e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ac:	e002      	b.n	80028b4 <LoopCopyDataInit>

080028ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028b2:	3304      	adds	r3, #4

080028b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028b8:	d3f9      	bcc.n	80028ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ba:	4a0b      	ldr	r2, [pc, #44]	; (80028e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028bc:	4c0b      	ldr	r4, [pc, #44]	; (80028ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80028be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c0:	e001      	b.n	80028c6 <LoopFillZerobss>

080028c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028c4:	3204      	adds	r2, #4

080028c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028c8:	d3fb      	bcc.n	80028c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028ca:	f7ff fbf3 	bl	80020b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ce:	f006 fc55 	bl	800917c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028d2:	f7ff f937 	bl	8001b44 <main>
  bx  lr    
 80028d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e0:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 80028e4:	0800b324 	.word	0x0800b324
  ldr r2, =_sbss
 80028e8:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 80028ec:	200107bc 	.word	0x200107bc

080028f0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028f0:	e7fe      	b.n	80028f0 <DMA1_Stream0_IRQHandler>
	...

080028f4 <HAL_Init>:
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <HAL_Init+0x40>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0d      	ldr	r2, [pc, #52]	; (8002934 <HAL_Init+0x40>)
 80028fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_Init+0x40>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <HAL_Init+0x40>)
 800290a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <HAL_Init+0x40>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a07      	ldr	r2, [pc, #28]	; (8002934 <HAL_Init+0x40>)
 8002916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	2003      	movs	r0, #3
 800291e:	f000 fcd7 	bl	80032d0 <HAL_NVIC_SetPriorityGrouping>
 8002922:	200f      	movs	r0, #15
 8002924:	f000 f808 	bl	8002938 <HAL_InitTick>
 8002928:	f7ff f99c 	bl	8001c64 <HAL_MspInit>
 800292c:	2300      	movs	r3, #0
 800292e:	4618      	mov	r0, r3
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40023c00 	.word	0x40023c00

08002938 <HAL_InitTick>:
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_InitTick+0x54>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_InitTick+0x58>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	4619      	mov	r1, r3
 800294a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800294e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002952:	fbb2 f3f3 	udiv	r3, r2, r3
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fcef 	bl	800333a <HAL_SYSTICK_Config>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_InitTick+0x2e>
 8002962:	2301      	movs	r3, #1
 8002964:	e00e      	b.n	8002984 <HAL_InitTick+0x4c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b0f      	cmp	r3, #15
 800296a:	d80a      	bhi.n	8002982 <HAL_InitTick+0x4a>
 800296c:	2200      	movs	r2, #0
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	f000 fcb7 	bl	80032e6 <HAL_NVIC_SetPriority>
 8002978:	4a06      	ldr	r2, [pc, #24]	; (8002994 <HAL_InitTick+0x5c>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	2300      	movs	r3, #0
 8002980:	e000      	b.n	8002984 <HAL_InitTick+0x4c>
 8002982:	2301      	movs	r3, #1
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000098 	.word	0x20000098
 8002990:	200000a0 	.word	0x200000a0
 8002994:	2000009c 	.word	0x2000009c

08002998 <HAL_IncTick>:
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_IncTick+0x20>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_IncTick+0x24>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <HAL_IncTick+0x24>)
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	200000a0 	.word	0x200000a0
 80029bc:	2001066c 	.word	0x2001066c

080029c0 <HAL_GetTick>:
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <HAL_GetTick+0x14>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	2001066c 	.word	0x2001066c

080029d8 <HAL_ADC_Init>:
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_ADC_Init+0x16>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e033      	b.n	8002a56 <HAL_ADC_Init+0x7e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <HAL_ADC_Init+0x32>
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe fd06 	bl	8001408 <HAL_ADC_MspInit>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d118      	bne.n	8002a48 <HAL_ADC_Init+0x70>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a1e:	f023 0302 	bic.w	r3, r3, #2
 8002a22:	f043 0202 	orr.w	r2, r3, #2
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fa7a 	bl	8002f24 <ADC_Init>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f023 0303 	bic.w	r3, r3, #3
 8002a3e:	f043 0201 	orr.w	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
 8002a46:	e001      	b.n	8002a4c <HAL_ADC_Init+0x74>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_ADC_IRQHandler>:
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d049      	beq.n	8002b28 <HAL_ADC_IRQHandler+0xca>
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d046      	beq.n	8002b28 <HAL_ADC_IRQHandler+0xca>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d105      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x54>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d12b      	bne.n	8002b18 <HAL_ADC_IRQHandler+0xba>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	7e1b      	ldrb	r3, [r3, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d127      	bne.n	8002b18 <HAL_ADC_IRQHandler+0xba>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d006      	beq.n	8002ae4 <HAL_ADC_IRQHandler+0x86>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d119      	bne.n	8002b18 <HAL_ADC_IRQHandler+0xba>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0220 	bic.w	r2, r2, #32
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d105      	bne.n	8002b18 <HAL_ADC_IRQHandler+0xba>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	f043 0201 	orr.w	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7fe fcc1 	bl	80014a0 <HAL_ADC_ConvCpltCallback>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f06f 0212 	mvn.w	r2, #18
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d057      	beq.n	8002bee <HAL_ADC_IRQHandler+0x190>
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d054      	beq.n	8002bee <HAL_ADC_IRQHandler+0x190>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d105      	bne.n	8002b5c <HAL_ADC_IRQHandler+0xfe>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d139      	bne.n	8002bde <HAL_ADC_IRQHandler+0x180>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b70:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <HAL_ADC_IRQHandler+0x128>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d12b      	bne.n	8002bde <HAL_ADC_IRQHandler+0x180>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d124      	bne.n	8002bde <HAL_ADC_IRQHandler+0x180>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d11d      	bne.n	8002bde <HAL_ADC_IRQHandler+0x180>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	7e1b      	ldrb	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d119      	bne.n	8002bde <HAL_ADC_IRQHandler+0x180>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_ADC_IRQHandler+0x180>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f043 0201 	orr.w	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fa9c 	bl	800311c <HAL_ADCEx_InjectedConvCpltCallback>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 020c 	mvn.w	r2, #12
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d017      	beq.n	8002c34 <HAL_ADC_IRQHandler+0x1d6>
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d014      	beq.n	8002c34 <HAL_ADC_IRQHandler+0x1d6>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d10d      	bne.n	8002c34 <HAL_ADC_IRQHandler+0x1d6>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f837 	bl	8002c98 <HAL_ADC_LevelOutOfWindowCallback>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f06f 0201 	mvn.w	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d015      	beq.n	8002c76 <HAL_ADC_IRQHandler+0x218>
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d012      	beq.n	8002c76 <HAL_ADC_IRQHandler+0x218>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	f043 0202 	orr.w	r2, r3, #2
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	645a      	str	r2, [r3, #68]	; 0x44
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0220 	mvn.w	r2, #32
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f820 	bl	8002cac <HAL_ADC_ErrorCallback>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0220 	mvn.w	r2, #32
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	bf00      	nop
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_ADC_GetValue>:
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_ADC_LevelOutOfWindowCallback>:
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_ADC_ErrorCallback>:
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_ADC_ConfigChannel>:
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x1c>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e113      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x244>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b09      	cmp	r3, #9
 8002cea:	d925      	bls.n	8002d38 <HAL_ADC_ConfigChannel+0x78>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68d9      	ldr	r1, [r3, #12]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	3b1e      	subs	r3, #30
 8002d02:	2207      	movs	r2, #7
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	400a      	ands	r2, r1
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68d9      	ldr	r1, [r3, #12]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	4618      	mov	r0, r3
 8002d24:	4603      	mov	r3, r0
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4403      	add	r3, r0
 8002d2a:	3b1e      	subs	r3, #30
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	e022      	b.n	8002d7e <HAL_ADC_ConfigChannel+0xbe>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6919      	ldr	r1, [r3, #16]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	4613      	mov	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43da      	mvns	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	400a      	ands	r2, r1
 8002d5a:	611a      	str	r2, [r3, #16]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6919      	ldr	r1, [r3, #16]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	4603      	mov	r3, r0
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4403      	add	r3, r0
 8002d74:	409a      	lsls	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	611a      	str	r2, [r3, #16]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d824      	bhi.n	8002dd0 <HAL_ADC_ConfigChannel+0x110>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	3b05      	subs	r3, #5
 8002d98:	221f      	movs	r2, #31
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	400a      	ands	r2, r1
 8002da6:	635a      	str	r2, [r3, #52]	; 0x34
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	4618      	mov	r0, r3
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3b05      	subs	r3, #5
 8002dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8002dce:	e04c      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x1aa>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b0c      	cmp	r3, #12
 8002dd6:	d824      	bhi.n	8002e22 <HAL_ADC_ConfigChannel+0x162>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	3b23      	subs	r3, #35	; 0x23
 8002dea:	221f      	movs	r2, #31
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43da      	mvns	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	400a      	ands	r2, r1
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	4618      	mov	r0, r3
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	3b23      	subs	r3, #35	; 0x23
 8002e14:	fa00 f203 	lsl.w	r2, r0, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e20:	e023      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x1aa>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	3b41      	subs	r3, #65	; 0x41
 8002e34:	221f      	movs	r2, #31
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	400a      	ands	r2, r1
 8002e42:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	4618      	mov	r0, r3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3b41      	subs	r3, #65	; 0x41
 8002e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e6a:	4b29      	ldr	r3, [pc, #164]	; (8002f10 <HAL_ADC_ConfigChannel+0x250>)
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a28      	ldr	r2, [pc, #160]	; (8002f14 <HAL_ADC_ConfigChannel+0x254>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d10f      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x1d8>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b12      	cmp	r3, #18
 8002e7e:	d10b      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x1d8>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	605a      	str	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <HAL_ADC_ConfigChannel+0x254>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d12b      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x23a>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <HAL_ADC_ConfigChannel+0x258>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d003      	beq.n	8002eb4 <HAL_ADC_ConfigChannel+0x1f4>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b11      	cmp	r3, #17
 8002eb2:	d122      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x23a>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a11      	ldr	r2, [pc, #68]	; (8002f18 <HAL_ADC_ConfigChannel+0x258>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d111      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x23a>
 8002ed6:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <HAL_ADC_ConfigChannel+0x25c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a11      	ldr	r2, [pc, #68]	; (8002f20 <HAL_ADC_ConfigChannel+0x260>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	0c9a      	lsrs	r2, r3, #18
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	e002      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x234>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f9      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x22e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f02:	2300      	movs	r3, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	40012300 	.word	0x40012300
 8002f14:	40012000 	.word	0x40012000
 8002f18:	10000012 	.word	0x10000012
 8002f1c:	20000098 	.word	0x20000098
 8002f20:	431bde83 	.word	0x431bde83

08002f24 <ADC_Init>:
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	4b79      	ldr	r3, [pc, #484]	; (8003114 <ADC_Init+0x1f0>)
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	605a      	str	r2, [r3, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	431a      	orrs	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	021a      	lsls	r2, r3, #8
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6859      	ldr	r1, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6899      	ldr	r1, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	609a      	str	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	4a58      	ldr	r2, [pc, #352]	; (8003118 <ADC_Init+0x1f4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d022      	beq.n	8003002 <ADC_Init+0xde>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6899      	ldr	r1, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	609a      	str	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fec:	609a      	str	r2, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6899      	ldr	r1, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	e00f      	b.n	8003022 <ADC_Init+0xfe>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003020:	609a      	str	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0202 	bic.w	r2, r2, #2
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6899      	ldr	r1, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7e1b      	ldrb	r3, [r3, #24]
 800303c:	005a      	lsls	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01b      	beq.n	8003088 <ADC_Init+0x164>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800305e:	605a      	str	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800306e:	605a      	str	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6859      	ldr	r1, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	3b01      	subs	r3, #1
 800307c:	035a      	lsls	r2, r3, #13
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	e007      	b.n	8003098 <ADC_Init+0x174>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	051a      	lsls	r2, r3, #20
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030cc:	609a      	str	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6899      	ldr	r1, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030da:	025a      	lsls	r2, r3, #9
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6899      	ldr	r1, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	029a      	lsls	r2, r3, #10
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	40012300 	.word	0x40012300
 8003118:	0f000001 	.word	0x0f000001

0800311c <HAL_ADCEx_InjectedConvCpltCallback>:
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <__NVIC_SetPriorityGrouping>:
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800314c:	4013      	ands	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	021a      	lsls	r2, r3, #8
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4313      	orrs	r3, r2
 8003158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800315c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	4a04      	ldr	r2, [pc, #16]	; (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	60d3      	str	r3, [r2, #12]
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_GetPriorityGrouping>:
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <__NVIC_GetPriorityGrouping+0x18>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	4618      	mov	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_EnableIRQ>:
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db0b      	blt.n	80031be <__NVIC_EnableIRQ+0x2a>
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	4907      	ldr	r1, [pc, #28]	; (80031cc <__NVIC_EnableIRQ+0x38>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2001      	movs	r0, #1
 80031b6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000e100 	.word	0xe000e100

080031d0 <__NVIC_SetPriority>:
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	6039      	str	r1, [r7, #0]
 80031da:	71fb      	strb	r3, [r7, #7]
 80031dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	db0a      	blt.n	80031fa <__NVIC_SetPriority+0x2a>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	490c      	ldr	r1, [pc, #48]	; (800321c <__NVIC_SetPriority+0x4c>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	0112      	lsls	r2, r2, #4
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	440b      	add	r3, r1
 80031f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80031f8:	e00a      	b.n	8003210 <__NVIC_SetPriority+0x40>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4908      	ldr	r1, [pc, #32]	; (8003220 <__NVIC_SetPriority+0x50>)
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	3b04      	subs	r3, #4
 8003208:	0112      	lsls	r2, r2, #4
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	440b      	add	r3, r1
 800320e:	761a      	strb	r2, [r3, #24]
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000e100 	.word	0xe000e100
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <NVIC_EncodePriority>:
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	; 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f1c3 0307 	rsb	r3, r3, #7
 800323e:	2b04      	cmp	r3, #4
 8003240:	bf28      	it	cs
 8003242:	2304      	movcs	r3, #4
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3304      	adds	r3, #4
 800324a:	2b06      	cmp	r3, #6
 800324c:	d902      	bls.n	8003254 <NVIC_EncodePriority+0x30>
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3b03      	subs	r3, #3
 8003252:	e000      	b.n	8003256 <NVIC_EncodePriority+0x32>
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	f04f 32ff 	mov.w	r2, #4294967295
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43da      	mvns	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	401a      	ands	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	409a      	lsls	r2, r3
 800326c:	f04f 31ff 	mov.w	r1, #4294967295
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	43d9      	mvns	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	400b      	ands	r3, r1
 800327c:	4313      	orrs	r3, r2
 800327e:	4618      	mov	r0, r3
 8003280:	3724      	adds	r7, #36	; 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <SysTick_Config>:
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3b01      	subs	r3, #1
 8003298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800329c:	d301      	bcc.n	80032a2 <SysTick_Config+0x16>
 800329e:	2301      	movs	r3, #1
 80032a0:	e00f      	b.n	80032c2 <SysTick_Config+0x36>
 80032a2:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <SysTick_Config+0x40>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	6053      	str	r3, [r2, #4]
 80032aa:	210f      	movs	r1, #15
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	f7ff ff8e 	bl	80031d0 <__NVIC_SetPriority>
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <SysTick_Config+0x40>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
 80032ba:	4b04      	ldr	r3, [pc, #16]	; (80032cc <SysTick_Config+0x40>)
 80032bc:	2207      	movs	r2, #7
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	2300      	movs	r3, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	e000e010 	.word	0xe000e010

080032d0 <HAL_NVIC_SetPriorityGrouping>:
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff ff29 	bl	8003130 <__NVIC_SetPriorityGrouping>
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_NVIC_SetPriority>:
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	73fb      	strb	r3, [r7, #15]
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	f7ff ff3e 	bl	8003178 <__NVIC_GetPriorityGrouping>
 80032fc:	6178      	str	r0, [r7, #20]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f7ff ff8e 	bl	8003224 <NVIC_EncodePriority>
 8003308:	4602      	mov	r2, r0
 800330a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ff5d 	bl	80031d0 <__NVIC_SetPriority>
 8003316:	bf00      	nop
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_NVIC_EnableIRQ>:
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	4603      	mov	r3, r0
 8003326:	71fb      	strb	r3, [r7, #7]
 8003328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff ff31 	bl	8003194 <__NVIC_EnableIRQ>
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_SYSTICK_Config>:
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ffa2 	bl	800328c <SysTick_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_DMA_Abort_IT>:
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d004      	beq.n	8003370 <HAL_DMA_Abort_IT+0x1e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2280      	movs	r2, #128	; 0x80
 800336a:	655a      	str	r2, [r3, #84]	; 0x54
 800336c:	2301      	movs	r3, #1
 800336e:	e00c      	b.n	800338a <HAL_DMA_Abort_IT+0x38>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2205      	movs	r2, #5
 8003374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	2300      	movs	r3, #0
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_DMA_GetState>:
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	4618      	mov	r0, r3
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_GPIO_Init>:
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	; 0x24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	e159      	b.n	8003684 <HAL_GPIO_Init+0x2d0>
 80033d0:	2201      	movs	r2, #1
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4013      	ands	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	f040 8148 	bne.w	800367e <HAL_GPIO_Init+0x2ca>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d005      	beq.n	8003406 <HAL_GPIO_Init+0x52>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d130      	bne.n	8003468 <HAL_GPIO_Init+0xb4>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	61bb      	str	r3, [r7, #24]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	2203      	movs	r2, #3
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	609a      	str	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	2201      	movs	r2, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	f003 0201 	and.w	r2, r3, #1
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b03      	cmp	r3, #3
 8003472:	d017      	beq.n	80034a4 <HAL_GPIO_Init+0xf0>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	2203      	movs	r2, #3
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	60da      	str	r2, [r3, #12]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d123      	bne.n	80034f8 <HAL_GPIO_Init+0x144>
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	08da      	lsrs	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3208      	adds	r2, #8
 80034b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034bc:	61bb      	str	r3, [r7, #24]
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	220f      	movs	r2, #15
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	08da      	lsrs	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3208      	adds	r2, #8
 80034f2:	69b9      	ldr	r1, [r7, #24]
 80034f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	2203      	movs	r2, #3
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0203 	and.w	r2, r3, #3
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80a2 	beq.w	800367e <HAL_GPIO_Init+0x2ca>
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	4b57      	ldr	r3, [pc, #348]	; (800369c <HAL_GPIO_Init+0x2e8>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	4a56      	ldr	r2, [pc, #344]	; (800369c <HAL_GPIO_Init+0x2e8>)
 8003544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003548:	6453      	str	r3, [r2, #68]	; 0x44
 800354a:	4b54      	ldr	r3, [pc, #336]	; (800369c <HAL_GPIO_Init+0x2e8>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a52      	ldr	r2, [pc, #328]	; (80036a0 <HAL_GPIO_Init+0x2ec>)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	3302      	adds	r3, #2
 800355e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	220f      	movs	r2, #15
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a49      	ldr	r2, [pc, #292]	; (80036a4 <HAL_GPIO_Init+0x2f0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d019      	beq.n	80035b6 <HAL_GPIO_Init+0x202>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a48      	ldr	r2, [pc, #288]	; (80036a8 <HAL_GPIO_Init+0x2f4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d013      	beq.n	80035b2 <HAL_GPIO_Init+0x1fe>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a47      	ldr	r2, [pc, #284]	; (80036ac <HAL_GPIO_Init+0x2f8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00d      	beq.n	80035ae <HAL_GPIO_Init+0x1fa>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a46      	ldr	r2, [pc, #280]	; (80036b0 <HAL_GPIO_Init+0x2fc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d007      	beq.n	80035aa <HAL_GPIO_Init+0x1f6>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a45      	ldr	r2, [pc, #276]	; (80036b4 <HAL_GPIO_Init+0x300>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_GPIO_Init+0x1f2>
 80035a2:	2304      	movs	r3, #4
 80035a4:	e008      	b.n	80035b8 <HAL_GPIO_Init+0x204>
 80035a6:	2307      	movs	r3, #7
 80035a8:	e006      	b.n	80035b8 <HAL_GPIO_Init+0x204>
 80035aa:	2303      	movs	r3, #3
 80035ac:	e004      	b.n	80035b8 <HAL_GPIO_Init+0x204>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e002      	b.n	80035b8 <HAL_GPIO_Init+0x204>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_GPIO_Init+0x204>
 80035b6:	2300      	movs	r3, #0
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	f002 0203 	and.w	r2, r2, #3
 80035be:	0092      	lsls	r2, r2, #2
 80035c0:	4093      	lsls	r3, r2
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
 80035c8:	4935      	ldr	r1, [pc, #212]	; (80036a0 <HAL_GPIO_Init+0x2ec>)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	089b      	lsrs	r3, r3, #2
 80035ce:	3302      	adds	r3, #2
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80035d6:	4b38      	ldr	r3, [pc, #224]	; (80036b8 <HAL_GPIO_Init+0x304>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x246>
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	4a2f      	ldr	r2, [pc, #188]	; (80036b8 <HAL_GPIO_Init+0x304>)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	6093      	str	r3, [r2, #8]
 8003600:	4b2d      	ldr	r3, [pc, #180]	; (80036b8 <HAL_GPIO_Init+0x304>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0x270>
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	4a24      	ldr	r2, [pc, #144]	; (80036b8 <HAL_GPIO_Init+0x304>)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	60d3      	str	r3, [r2, #12]
 800362a:	4b23      	ldr	r3, [pc, #140]	; (80036b8 <HAL_GPIO_Init+0x304>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	61bb      	str	r3, [r7, #24]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x29a>
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	4a1a      	ldr	r2, [pc, #104]	; (80036b8 <HAL_GPIO_Init+0x304>)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	6053      	str	r3, [r2, #4]
 8003654:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <HAL_GPIO_Init+0x304>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x2c4>
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
 8003678:	4a0f      	ldr	r2, [pc, #60]	; (80036b8 <HAL_GPIO_Init+0x304>)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3301      	adds	r3, #1
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b0f      	cmp	r3, #15
 8003688:	f67f aea2 	bls.w	80033d0 <HAL_GPIO_Init+0x1c>
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	3724      	adds	r7, #36	; 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800
 80036a0:	40013800 	.word	0x40013800
 80036a4:	40020000 	.word	0x40020000
 80036a8:	40020400 	.word	0x40020400
 80036ac:	40020800 	.word	0x40020800
 80036b0:	40020c00 	.word	0x40020c00
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40013c00 	.word	0x40013c00

080036bc <HAL_GPIO_WritePin>:
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	807b      	strh	r3, [r7, #2]
 80036c8:	4613      	mov	r3, r2
 80036ca:	707b      	strb	r3, [r7, #1]
 80036cc:	787b      	ldrb	r3, [r7, #1]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_GPIO_WritePin+0x1e>
 80036d2:	887a      	ldrh	r2, [r7, #2]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	619a      	str	r2, [r3, #24]
 80036d8:	e003      	b.n	80036e2 <HAL_GPIO_WritePin+0x26>
 80036da:	887b      	ldrh	r3, [r7, #2]
 80036dc:	041a      	lsls	r2, r3, #16
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	619a      	str	r2, [r3, #24]
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <HAL_GPIO_EXTI_IRQHandler>:
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	80fb      	strh	r3, [r7, #6]
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	4013      	ands	r3, r2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d006      	beq.n	8003714 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8003706:	4a05      	ldr	r2, [pc, #20]	; (800371c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	6153      	str	r3, [r2, #20]
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f806 	bl	8003720 <HAL_GPIO_EXTI_Callback>
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40013c00 	.word	0x40013c00

08003720 <HAL_GPIO_EXTI_Callback>:
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	80fb      	strh	r3, [r7, #6]
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
	...

08003738 <HAL_I2C_Init>:
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_I2C_Init+0x12>
 8003746:	2301      	movs	r3, #1
 8003748:	e12b      	b.n	80039a2 <HAL_I2C_Init+0x26a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_I2C_Init+0x2c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fe f838 	bl	80017d4 <HAL_I2C_MspInit>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2224      	movs	r2, #36	; 0x24
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0201 	bic.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	f003 f936 	bl	8006a0c <HAL_RCC_GetPCLK1Freq>
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4a81      	ldr	r2, [pc, #516]	; (80039ac <HAL_I2C_Init+0x274>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d807      	bhi.n	80037bc <HAL_I2C_Init+0x84>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a80      	ldr	r2, [pc, #512]	; (80039b0 <HAL_I2C_Init+0x278>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	bf94      	ite	ls
 80037b4:	2301      	movls	r3, #1
 80037b6:	2300      	movhi	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	e006      	b.n	80037ca <HAL_I2C_Init+0x92>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a7d      	ldr	r2, [pc, #500]	; (80039b4 <HAL_I2C_Init+0x27c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	bf94      	ite	ls
 80037c4:	2301      	movls	r3, #1
 80037c6:	2300      	movhi	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_I2C_Init+0x9a>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e0e7      	b.n	80039a2 <HAL_I2C_Init+0x26a>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4a78      	ldr	r2, [pc, #480]	; (80039b8 <HAL_I2C_Init+0x280>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	0c9b      	lsrs	r3, r3, #18
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4a6a      	ldr	r2, [pc, #424]	; (80039ac <HAL_I2C_Init+0x274>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d802      	bhi.n	800380c <HAL_I2C_Init+0xd4>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	3301      	adds	r3, #1
 800380a:	e009      	b.n	8003820 <HAL_I2C_Init+0xe8>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	4a69      	ldr	r2, [pc, #420]	; (80039bc <HAL_I2C_Init+0x284>)
 8003818:	fba2 2303 	umull	r2, r3, r2, r3
 800381c:	099b      	lsrs	r3, r3, #6
 800381e:	3301      	adds	r3, #1
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	430b      	orrs	r3, r1
 8003826:	6213      	str	r3, [r2, #32]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003832:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	495c      	ldr	r1, [pc, #368]	; (80039ac <HAL_I2C_Init+0x274>)
 800383c:	428b      	cmp	r3, r1
 800383e:	d819      	bhi.n	8003874 <HAL_I2C_Init+0x13c>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1e59      	subs	r1, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	fbb1 f3f3 	udiv	r3, r1, r3
 800384e:	1c59      	adds	r1, r3, #1
 8003850:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003854:	400b      	ands	r3, r1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <HAL_I2C_Init+0x138>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1e59      	subs	r1, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	fbb1 f3f3 	udiv	r3, r1, r3
 8003868:	3301      	adds	r3, #1
 800386a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386e:	e051      	b.n	8003914 <HAL_I2C_Init+0x1dc>
 8003870:	2304      	movs	r3, #4
 8003872:	e04f      	b.n	8003914 <HAL_I2C_Init+0x1dc>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d111      	bne.n	80038a0 <HAL_I2C_Init+0x168>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e58      	subs	r0, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	440b      	add	r3, r1
 800388a:	fbb0 f3f3 	udiv	r3, r0, r3
 800388e:	3301      	adds	r3, #1
 8003890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	e012      	b.n	80038c6 <HAL_I2C_Init+0x18e>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1e58      	subs	r0, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6859      	ldr	r1, [r3, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	0099      	lsls	r1, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b6:	3301      	adds	r3, #1
 80038b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf0c      	ite	eq
 80038c0:	2301      	moveq	r3, #1
 80038c2:	2300      	movne	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_Init+0x196>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e022      	b.n	8003914 <HAL_I2C_Init+0x1dc>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10e      	bne.n	80038f4 <HAL_I2C_Init+0x1bc>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1e58      	subs	r0, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6859      	ldr	r1, [r3, #4]
 80038de:	460b      	mov	r3, r1
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	440b      	add	r3, r1
 80038e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e8:	3301      	adds	r3, #1
 80038ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038f2:	e00f      	b.n	8003914 <HAL_I2C_Init+0x1dc>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e58      	subs	r0, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	0099      	lsls	r1, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	fbb0 f3f3 	udiv	r3, r0, r3
 800390a:	3301      	adds	r3, #1
 800390c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	6809      	ldr	r1, [r1, #0]
 8003918:	4313      	orrs	r3, r2
 800391a:	61cb      	str	r3, [r1, #28]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003942:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6911      	ldr	r1, [r2, #16]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68d2      	ldr	r2, [r2, #12]
 800394e:	4311      	orrs	r1, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	430b      	orrs	r3, r1
 8003956:	6093      	str	r3, [r2, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	60da      	str	r2, [r3, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a0:	2300      	movs	r3, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	000186a0 	.word	0x000186a0
 80039b0:	001e847f 	.word	0x001e847f
 80039b4:	003d08ff 	.word	0x003d08ff
 80039b8:	431bde83 	.word	0x431bde83
 80039bc:	10624dd3 	.word	0x10624dd3

080039c0 <HAL_I2C_Master_Transmit>:
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	461a      	mov	r2, r3
 80039cc:	460b      	mov	r3, r1
 80039ce:	817b      	strh	r3, [r7, #10]
 80039d0:	4613      	mov	r3, r2
 80039d2:	813b      	strh	r3, [r7, #8]
 80039d4:	f7fe fff4 	bl	80029c0 <HAL_GetTick>
 80039d8:	6178      	str	r0, [r7, #20]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	f040 80e0 	bne.w	8003ba8 <HAL_I2C_Master_Transmit+0x1e8>
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	2319      	movs	r3, #25
 80039ee:	2201      	movs	r2, #1
 80039f0:	4970      	ldr	r1, [pc, #448]	; (8003bb4 <HAL_I2C_Master_Transmit+0x1f4>)
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f002 f9b0 	bl	8005d58 <I2C_WaitOnFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_I2C_Master_Transmit+0x42>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e0d3      	b.n	8003baa <HAL_I2C_Master_Transmit+0x1ea>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_I2C_Master_Transmit+0x50>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e0cc      	b.n	8003baa <HAL_I2C_Master_Transmit+0x1ea>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d007      	beq.n	8003a36 <HAL_I2C_Master_Transmit+0x76>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0201 	orr.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2221      	movs	r2, #33	; 0x21
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2210      	movs	r2, #16
 8003a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	893a      	ldrh	r2, [r7, #8]
 8003a66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	851a      	strh	r2, [r3, #40]	; 0x28
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4a50      	ldr	r2, [pc, #320]	; (8003bb8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a78:	8979      	ldrh	r1, [r7, #10]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	6a3a      	ldr	r2, [r7, #32]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f001 ff72 	bl	8005968 <I2C_MasterRequestWrite>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_I2C_Master_Transmit+0xce>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e08d      	b.n	8003baa <HAL_I2C_Master_Transmit+0x1ea>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	e066      	b.n	8003b74 <HAL_I2C_Master_Transmit+0x1b4>
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	6a39      	ldr	r1, [r7, #32]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f002 fa2a 	bl	8005f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00d      	beq.n	8003ad2 <HAL_I2C_Master_Transmit+0x112>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d107      	bne.n	8003ace <HAL_I2C_Master_Transmit+0x10e>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e06b      	b.n	8003baa <HAL_I2C_Master_Transmit+0x1ea>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	781a      	ldrb	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	611a      	str	r2, [r3, #16]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	625a      	str	r2, [r3, #36]	; 0x24
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	851a      	strh	r2, [r3, #40]	; 0x28
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d11b      	bne.n	8003b48 <HAL_I2C_Master_Transmit+0x188>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d017      	beq.n	8003b48 <HAL_I2C_Master_Transmit+0x188>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	781a      	ldrb	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	611a      	str	r2, [r3, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	851a      	strh	r2, [r3, #40]	; 0x28
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	6a39      	ldr	r1, [r7, #32]
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f002 fa1a 	bl	8005f86 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <HAL_I2C_Master_Transmit+0x1b4>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d107      	bne.n	8003b70 <HAL_I2C_Master_Transmit+0x1b0>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	2301      	movs	r3, #1
 8003b72:	e01a      	b.n	8003baa <HAL_I2C_Master_Transmit+0x1ea>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d194      	bne.n	8003aa6 <HAL_I2C_Master_Transmit+0xe6>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e000      	b.n	8003baa <HAL_I2C_Master_Transmit+0x1ea>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	00100002 	.word	0x00100002
 8003bb8:	ffff0000 	.word	0xffff0000

08003bbc <HAL_I2C_Master_Receive>:
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08c      	sub	sp, #48	; 0x30
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	460b      	mov	r3, r1
 8003bca:	817b      	strh	r3, [r7, #10]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	813b      	strh	r3, [r7, #8]
 8003bd0:	f7fe fef6 	bl	80029c0 <HAL_GetTick>
 8003bd4:	6278      	str	r0, [r7, #36]	; 0x24
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	f040 820b 	bne.w	8003ffa <HAL_I2C_Master_Receive+0x43e>
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2319      	movs	r3, #25
 8003bea:	2201      	movs	r2, #1
 8003bec:	497c      	ldr	r1, [pc, #496]	; (8003de0 <HAL_I2C_Master_Receive+0x224>)
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f002 f8b2 	bl	8005d58 <I2C_WaitOnFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_I2C_Master_Receive+0x42>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e1fe      	b.n	8003ffc <HAL_I2C_Master_Receive+0x440>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_I2C_Master_Receive+0x50>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e1f7      	b.n	8003ffc <HAL_I2C_Master_Receive+0x440>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d007      	beq.n	8003c32 <HAL_I2C_Master_Receive+0x76>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0201 	orr.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2222      	movs	r2, #34	; 0x22
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2210      	movs	r2, #16
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	893a      	ldrh	r2, [r7, #8]
 8003c62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	851a      	strh	r2, [r3, #40]	; 0x28
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a5c      	ldr	r2, [pc, #368]	; (8003de4 <HAL_I2C_Master_Receive+0x228>)
 8003c72:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c74:	8979      	ldrh	r1, [r7, #10]
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f001 fef6 	bl	8005a6c <I2C_MasterRequestRead>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Master_Receive+0xce>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e1b8      	b.n	8003ffc <HAL_I2C_Master_Receive+0x440>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d113      	bne.n	8003cba <HAL_I2C_Master_Receive+0xfe>
 8003c92:	2300      	movs	r3, #0
 8003c94:	623b      	str	r3, [r7, #32]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	623b      	str	r3, [r7, #32]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	623b      	str	r3, [r7, #32]
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	e18c      	b.n	8003fd4 <HAL_I2C_Master_Receive+0x418>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d11b      	bne.n	8003cfa <HAL_I2C_Master_Receive+0x13e>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e16c      	b.n	8003fd4 <HAL_I2C_Master_Receive+0x418>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d11b      	bne.n	8003d3a <HAL_I2C_Master_Receive+0x17e>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	2300      	movs	r3, #0
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	e14c      	b.n	8003fd4 <HAL_I2C_Master_Receive+0x418>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	e138      	b.n	8003fd4 <HAL_I2C_Master_Receive+0x418>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	f200 80f1 	bhi.w	8003f4e <HAL_I2C_Master_Receive+0x392>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d123      	bne.n	8003dbc <HAL_I2C_Master_Receive+0x200>
 8003d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f002 f977 	bl	800606c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_I2C_Master_Receive+0x1cc>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e139      	b.n	8003ffc <HAL_I2C_Master_Receive+0x440>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	625a      	str	r2, [r3, #36]	; 0x24
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	851a      	strh	r2, [r3, #40]	; 0x28
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dba:	e10b      	b.n	8003fd4 <HAL_I2C_Master_Receive+0x418>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d14e      	bne.n	8003e62 <HAL_I2C_Master_Receive+0x2a6>
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dca:	2200      	movs	r2, #0
 8003dcc:	4906      	ldr	r1, [pc, #24]	; (8003de8 <HAL_I2C_Master_Receive+0x22c>)
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f001 ffc2 	bl	8005d58 <I2C_WaitOnFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d008      	beq.n	8003dec <HAL_I2C_Master_Receive+0x230>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e10e      	b.n	8003ffc <HAL_I2C_Master_Receive+0x440>
 8003dde:	bf00      	nop
 8003de0:	00100002 	.word	0x00100002
 8003de4:	ffff0000 	.word	0xffff0000
 8003de8:	00010004 	.word	0x00010004
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691a      	ldr	r2, [r3, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	625a      	str	r2, [r3, #36]	; 0x24
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	851a      	strh	r2, [r3, #40]	; 0x28
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	701a      	strb	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	625a      	str	r2, [r3, #36]	; 0x24
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	851a      	strh	r2, [r3, #40]	; 0x28
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e60:	e0b8      	b.n	8003fd4 <HAL_I2C_Master_Receive+0x418>
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	2200      	movs	r2, #0
 8003e6a:	4966      	ldr	r1, [pc, #408]	; (8004004 <HAL_I2C_Master_Receive+0x448>)
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f001 ff73 	bl	8005d58 <I2C_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_I2C_Master_Receive+0x2c0>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0bf      	b.n	8003ffc <HAL_I2C_Master_Receive+0x440>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	851a      	strh	r2, [r3, #40]	; 0x28
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	494f      	ldr	r1, [pc, #316]	; (8004004 <HAL_I2C_Master_Receive+0x448>)
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f001 ff45 	bl	8005d58 <I2C_WaitOnFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <HAL_I2C_Master_Receive+0x31c>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e091      	b.n	8003ffc <HAL_I2C_Master_Receive+0x440>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691a      	ldr	r2, [r3, #16]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	851a      	strh	r2, [r3, #40]	; 0x28
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	701a      	strb	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	851a      	strh	r2, [r3, #40]	; 0x28
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f4c:	e042      	b.n	8003fd4 <HAL_I2C_Master_Receive+0x418>
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f002 f88a 	bl	800606c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_I2C_Master_Receive+0x3a6>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e04c      	b.n	8003ffc <HAL_I2C_Master_Receive+0x440>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	701a      	strb	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	851a      	strh	r2, [r3, #40]	; 0x28
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d118      	bne.n	8003fd4 <HAL_I2C_Master_Receive+0x418>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	701a      	strb	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	851a      	strh	r2, [r3, #40]	; 0x28
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f47f aec2 	bne.w	8003d62 <HAL_I2C_Master_Receive+0x1a6>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e000      	b.n	8003ffc <HAL_I2C_Master_Receive+0x440>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3728      	adds	r7, #40	; 0x28
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	00010004 	.word	0x00010004

08004008 <HAL_I2C_Slave_Seq_Transmit_IT>:
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	4613      	mov	r3, r2
 8004016:	80fb      	strh	r3, [r7, #6]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004024:	2b28      	cmp	r3, #40	; 0x28
 8004026:	d15b      	bne.n	80040e0 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
 8004034:	2301      	movs	r3, #1
 8004036:	e054      	b.n	80040e2 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8004042:	2302      	movs	r3, #2
 8004044:	e04d      	b.n	80040e2 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b01      	cmp	r3, #1
 800405a:	d007      	beq.n	800406c <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2229      	movs	r2, #41	; 0x29
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	641a      	str	r2, [r3, #64]	; 0x40
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	625a      	str	r2, [r3, #36]	; 0x24
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	88fa      	ldrh	r2, [r7, #6]
 800409c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	851a      	strh	r2, [r3, #40]	; 0x28
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80040da:	605a      	str	r2, [r3, #4]
 80040dc:	2300      	movs	r3, #0
 80040de:	e000      	b.n	80040e2 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 80040e0:	2302      	movs	r3, #2
 80040e2:	4618      	mov	r0, r3
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <HAL_I2C_Slave_Seq_Receive_IT>:
 80040ee:	b480      	push	{r7}
 80040f0:	b087      	sub	sp, #28
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	603b      	str	r3, [r7, #0]
 80040fa:	4613      	mov	r3, r2
 80040fc:	80fb      	strh	r3, [r7, #6]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800410a:	2b28      	cmp	r3, #40	; 0x28
 800410c:	d15b      	bne.n	80041c6 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_I2C_Slave_Seq_Receive_IT+0x30>
 800411a:	2301      	movs	r3, #1
 800411c:	e054      	b.n	80041c8 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8004128:	2302      	movs	r3, #2
 800412a:	e04d      	b.n	80041c8 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b01      	cmp	r3, #1
 8004140:	d007      	beq.n	8004152 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0201 	orr.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	222a      	movs	r2, #42	; 0x2a
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	641a      	str	r2, [r3, #64]	; 0x40
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	625a      	str	r2, [r3, #36]	; 0x24
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	88fa      	ldrh	r2, [r7, #6]
 8004182:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	851a      	strh	r2, [r3, #40]	; 0x28
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	62da      	str	r2, [r3, #44]	; 0x2c
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80041c0:	605a      	str	r2, [r3, #4]
 80041c2:	2300      	movs	r3, #0
 80041c4:	e000      	b.n	80041c8 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80041c6:	2302      	movs	r3, #2
 80041c8:	4618      	mov	r0, r3
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_I2C_EnableListen_IT>:
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d124      	bne.n	8004232 <HAL_I2C_EnableListen_IT+0x5e>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2228      	movs	r2, #40	; 0x28
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d007      	beq.n	800420e <HAL_I2C_EnableListen_IT+0x3a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0201 	orr.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800422c:	605a      	str	r2, [r3, #4]
 800422e:	2300      	movs	r3, #0
 8004230:	e000      	b.n	8004234 <HAL_I2C_EnableListen_IT+0x60>
 8004232:	2302      	movs	r3, #2
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_I2C_EV_IRQHandler>:
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	2300      	movs	r3, #0
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004260:	73fb      	strb	r3, [r7, #15]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	73bb      	strb	r3, [r7, #14]
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	2b10      	cmp	r3, #16
 800426e:	d003      	beq.n	8004278 <HAL_I2C_EV_IRQHandler+0x38>
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	2b40      	cmp	r3, #64	; 0x40
 8004274:	f040 80b1 	bne.w	80043da <HAL_I2C_EV_IRQHandler+0x19a>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	61bb      	str	r3, [r7, #24]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10d      	bne.n	80042ae <HAL_I2C_EV_IRQHandler+0x6e>
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004298:	d003      	beq.n	80042a2 <HAL_I2C_EV_IRQHandler+0x62>
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80042a0:	d101      	bne.n	80042a6 <HAL_I2C_EV_IRQHandler+0x66>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <HAL_I2C_EV_IRQHandler+0x68>
 80042a6:	2300      	movs	r3, #0
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	f000 8114 	beq.w	80044d6 <HAL_I2C_EV_IRQHandler+0x296>
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00b      	beq.n	80042d0 <HAL_I2C_EV_IRQHandler+0x90>
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d006      	beq.n	80042d0 <HAL_I2C_EV_IRQHandler+0x90>
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f001 ff57 	bl	8006176 <I2C_ConvertOtherXferOptions>
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fd34 	bl	8004d36 <I2C_Master_SB>
 80042ce:	e083      	b.n	80043d8 <HAL_I2C_EV_IRQHandler+0x198>
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_I2C_EV_IRQHandler+0xac>
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_I2C_EV_IRQHandler+0xac>
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fdac 	bl	8004e42 <I2C_Master_ADD10>
 80042ea:	e075      	b.n	80043d8 <HAL_I2C_EV_IRQHandler+0x198>
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d008      	beq.n	8004308 <HAL_I2C_EV_IRQHandler+0xc8>
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_I2C_EV_IRQHandler+0xc8>
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fdc8 	bl	8004e96 <I2C_Master_ADDR>
 8004306:	e067      	b.n	80043d8 <HAL_I2C_EV_IRQHandler+0x198>
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	d036      	beq.n	8004380 <HAL_I2C_EV_IRQHandler+0x140>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004320:	f000 80db 	beq.w	80044da <HAL_I2C_EV_IRQHandler+0x29a>
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00d      	beq.n	800434a <HAL_I2C_EV_IRQHandler+0x10a>
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_I2C_EV_IRQHandler+0x10a>
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <HAL_I2C_EV_IRQHandler+0x10a>
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f9ac 	bl	80046a0 <I2C_MasterTransmit_TXE>
 8004348:	e046      	b.n	80043d8 <HAL_I2C_EV_IRQHandler+0x198>
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80c2 	beq.w	80044da <HAL_I2C_EV_IRQHandler+0x29a>
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80bc 	beq.w	80044da <HAL_I2C_EV_IRQHandler+0x29a>
 8004362:	7bbb      	ldrb	r3, [r7, #14]
 8004364:	2b21      	cmp	r3, #33	; 0x21
 8004366:	d103      	bne.n	8004370 <HAL_I2C_EV_IRQHandler+0x130>
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fa35 	bl	80047d8 <I2C_MasterTransmit_BTF>
 800436e:	e0b4      	b.n	80044da <HAL_I2C_EV_IRQHandler+0x29a>
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	f040 80b1 	bne.w	80044da <HAL_I2C_EV_IRQHandler+0x29a>
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 faa3 	bl	80048c4 <I2C_MemoryTransmit_TXE_BTF>
 800437e:	e0ac      	b.n	80044da <HAL_I2C_EV_IRQHandler+0x29a>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800438a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800438e:	f000 80a4 	beq.w	80044da <HAL_I2C_EV_IRQHandler+0x29a>
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00d      	beq.n	80043b8 <HAL_I2C_EV_IRQHandler+0x178>
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d008      	beq.n	80043b8 <HAL_I2C_EV_IRQHandler+0x178>
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d103      	bne.n	80043b8 <HAL_I2C_EV_IRQHandler+0x178>
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fb1b 	bl	80049ec <I2C_MasterReceive_RXNE>
 80043b6:	e00f      	b.n	80043d8 <HAL_I2C_EV_IRQHandler+0x198>
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 808b 	beq.w	80044da <HAL_I2C_EV_IRQHandler+0x29a>
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8085 	beq.w	80044da <HAL_I2C_EV_IRQHandler+0x29a>
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fbc6 	bl	8004b62 <I2C_MasterReceive_BTF>
 80043d6:	e080      	b.n	80044da <HAL_I2C_EV_IRQHandler+0x29a>
 80043d8:	e07f      	b.n	80044da <HAL_I2C_EV_IRQHandler+0x29a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d004      	beq.n	80043ec <HAL_I2C_EV_IRQHandler+0x1ac>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	61fb      	str	r3, [r7, #28]
 80043ea:	e007      	b.n	80043fc <HAL_I2C_EV_IRQHandler+0x1bc>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	61bb      	str	r3, [r7, #24]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d011      	beq.n	800442a <HAL_I2C_EV_IRQHandler+0x1ea>
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00c      	beq.n	800442a <HAL_I2C_EV_IRQHandler+0x1ea>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_I2C_EV_IRQHandler+0x1e0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	69b9      	ldr	r1, [r7, #24]
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 ff86 	bl	8005334 <I2C_Slave_ADDR>
 8004428:	e05a      	b.n	80044e0 <HAL_I2C_EV_IRQHandler+0x2a0>
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b00      	cmp	r3, #0
 8004432:	d008      	beq.n	8004446 <HAL_I2C_EV_IRQHandler+0x206>
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_I2C_EV_IRQHandler+0x206>
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 ffc0 	bl	80053c4 <I2C_Slave_STOPF>
 8004444:	e04c      	b.n	80044e0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8004446:	7bbb      	ldrb	r3, [r7, #14]
 8004448:	2b21      	cmp	r3, #33	; 0x21
 800444a:	d002      	beq.n	8004452 <HAL_I2C_EV_IRQHandler+0x212>
 800444c:	7bbb      	ldrb	r3, [r7, #14]
 800444e:	2b29      	cmp	r3, #41	; 0x29
 8004450:	d120      	bne.n	8004494 <HAL_I2C_EV_IRQHandler+0x254>
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00d      	beq.n	8004478 <HAL_I2C_EV_IRQHandler+0x238>
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004462:	2b00      	cmp	r3, #0
 8004464:	d008      	beq.n	8004478 <HAL_I2C_EV_IRQHandler+0x238>
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	d103      	bne.n	8004478 <HAL_I2C_EV_IRQHandler+0x238>
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fea1 	bl	80051b8 <I2C_SlaveTransmit_TXE>
 8004476:	e032      	b.n	80044de <HAL_I2C_EV_IRQHandler+0x29e>
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b00      	cmp	r3, #0
 8004480:	d02d      	beq.n	80044de <HAL_I2C_EV_IRQHandler+0x29e>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004488:	2b00      	cmp	r3, #0
 800448a:	d028      	beq.n	80044de <HAL_I2C_EV_IRQHandler+0x29e>
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fed0 	bl	8005232 <I2C_SlaveTransmit_BTF>
 8004492:	e024      	b.n	80044de <HAL_I2C_EV_IRQHandler+0x29e>
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00d      	beq.n	80044ba <HAL_I2C_EV_IRQHandler+0x27a>
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <HAL_I2C_EV_IRQHandler+0x27a>
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <HAL_I2C_EV_IRQHandler+0x27a>
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fede 	bl	8005274 <I2C_SlaveReceive_RXNE>
 80044b8:	e012      	b.n	80044e0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00d      	beq.n	80044e0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 ff0e 	bl	80052f0 <I2C_SlaveReceive_BTF>
 80044d4:	e004      	b.n	80044e0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80044d6:	bf00      	nop
 80044d8:	e002      	b.n	80044e0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80044da:	bf00      	nop
 80044dc:	e000      	b.n	80044e0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80044de:	bf00      	nop
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_I2C_ER_IRQHandler>:
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b08a      	sub	sp, #40	; 0x28
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	623b      	str	r3, [r7, #32]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	61fb      	str	r3, [r7, #28]
 80044fe:	2300      	movs	r3, #0
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004508:	76fb      	strb	r3, [r7, #27]
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00d      	beq.n	8004530 <HAL_I2C_ER_IRQHandler+0x4a>
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d008      	beq.n	8004530 <HAL_I2C_ER_IRQHandler+0x4a>
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800452e:	615a      	str	r2, [r3, #20]
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00d      	beq.n	8004556 <HAL_I2C_ER_IRQHandler+0x70>
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <HAL_I2C_ER_IRQHandler+0x70>
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	f043 0302 	orr.w	r3, r3, #2
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004554:	615a      	str	r2, [r3, #20]
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455c:	2b00      	cmp	r3, #0
 800455e:	d03e      	beq.n	80045de <HAL_I2C_ER_IRQHandler+0xf8>
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d039      	beq.n	80045de <HAL_I2C_ER_IRQHandler+0xf8>
 800456a:	7efb      	ldrb	r3, [r7, #27]
 800456c:	76bb      	strb	r3, [r7, #26]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457c:	74fb      	strb	r3, [r7, #19]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	7ebb      	ldrb	r3, [r7, #26]
 8004586:	2b20      	cmp	r3, #32
 8004588:	d112      	bne.n	80045b0 <HAL_I2C_ER_IRQHandler+0xca>
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10f      	bne.n	80045b0 <HAL_I2C_ER_IRQHandler+0xca>
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	2b21      	cmp	r3, #33	; 0x21
 8004594:	d008      	beq.n	80045a8 <HAL_I2C_ER_IRQHandler+0xc2>
 8004596:	7cfb      	ldrb	r3, [r7, #19]
 8004598:	2b29      	cmp	r3, #41	; 0x29
 800459a:	d005      	beq.n	80045a8 <HAL_I2C_ER_IRQHandler+0xc2>
 800459c:	7cfb      	ldrb	r3, [r7, #19]
 800459e:	2b28      	cmp	r3, #40	; 0x28
 80045a0:	d106      	bne.n	80045b0 <HAL_I2C_ER_IRQHandler+0xca>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b21      	cmp	r3, #33	; 0x21
 80045a6:	d103      	bne.n	80045b0 <HAL_I2C_ER_IRQHandler+0xca>
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f001 f83b 	bl	8005624 <I2C_Slave_AF>
 80045ae:	e016      	b.n	80045de <HAL_I2C_ER_IRQHandler+0xf8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045b8:	615a      	str	r2, [r3, #20]
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	f043 0304 	orr.w	r3, r3, #4
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
 80045c2:	7efb      	ldrb	r3, [r7, #27]
 80045c4:	2b10      	cmp	r3, #16
 80045c6:	d002      	beq.n	80045ce <HAL_I2C_ER_IRQHandler+0xe8>
 80045c8:	7efb      	ldrb	r3, [r7, #27]
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d107      	bne.n	80045de <HAL_I2C_ER_IRQHandler+0xf8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00d      	beq.n	8004604 <HAL_I2C_ER_IRQHandler+0x11e>
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d008      	beq.n	8004604 <HAL_I2C_ER_IRQHandler+0x11e>
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	f043 0308 	orr.w	r3, r3, #8
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004602:	615a      	str	r2, [r3, #20]
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	2b00      	cmp	r3, #0
 8004608:	d008      	beq.n	800461c <HAL_I2C_ER_IRQHandler+0x136>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	641a      	str	r2, [r3, #64]	; 0x40
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f001 f874 	bl	8005704 <I2C_ITError>
 800461c:	bf00      	nop
 800461e:	3728      	adds	r7, #40	; 0x28
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_I2C_MasterTxCpltCallback>:
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_I2C_MasterRxCpltCallback>:
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_I2C_MemTxCpltCallback>:
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_I2C_MemRxCpltCallback>:
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_I2C_AbortCpltCallback>:
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_I2C_GetError>:
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	4618      	mov	r0, r3
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <I2C_MasterTransmit_TXE>:
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ae:	73fb      	strb	r3, [r7, #15]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b6:	73bb      	strb	r3, [r7, #14]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d150      	bne.n	8004768 <I2C_MasterTransmit_TXE+0xc8>
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	2b21      	cmp	r3, #33	; 0x21
 80046ca:	d14d      	bne.n	8004768 <I2C_MasterTransmit_TXE+0xc8>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d01d      	beq.n	800470e <I2C_MasterTransmit_TXE+0x6e>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d01a      	beq.n	800470e <I2C_MasterTransmit_TXE+0x6e>
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046de:	d016      	beq.n	800470e <I2C_MasterTransmit_TXE+0x6e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046ee:	605a      	str	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2211      	movs	r2, #17
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff ff8c 	bl	8004624 <HAL_I2C_MasterTxCpltCallback>
 800470c:	e060      	b.n	80047d0 <I2C_MasterTransmit_TXE+0x130>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800471c:	605a      	str	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b40      	cmp	r3, #64	; 0x40
 8004746:	d107      	bne.n	8004758 <I2C_MasterTransmit_TXE+0xb8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ff7b 	bl	800464c <HAL_I2C_MemTxCpltCallback>
 8004756:	e03b      	b.n	80047d0 <I2C_MasterTransmit_TXE+0x130>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff ff5f 	bl	8004624 <HAL_I2C_MasterTxCpltCallback>
 8004766:	e033      	b.n	80047d0 <I2C_MasterTransmit_TXE+0x130>
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	2b21      	cmp	r3, #33	; 0x21
 800476c:	d005      	beq.n	800477a <I2C_MasterTransmit_TXE+0xda>
 800476e:	7bbb      	ldrb	r3, [r7, #14]
 8004770:	2b40      	cmp	r3, #64	; 0x40
 8004772:	d12d      	bne.n	80047d0 <I2C_MasterTransmit_TXE+0x130>
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b22      	cmp	r3, #34	; 0x22
 8004778:	d12a      	bne.n	80047d0 <I2C_MasterTransmit_TXE+0x130>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d108      	bne.n	8004796 <I2C_MasterTransmit_TXE+0xf6>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004792:	605a      	str	r2, [r3, #4]
 8004794:	e01c      	b.n	80047d0 <I2C_MasterTransmit_TXE+0x130>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b40      	cmp	r3, #64	; 0x40
 80047a0:	d103      	bne.n	80047aa <I2C_MasterTransmit_TXE+0x10a>
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f88e 	bl	80048c4 <I2C_MemoryTransmit_TXE_BTF>
 80047a8:	e012      	b.n	80047d0 <I2C_MasterTransmit_TXE+0x130>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	781a      	ldrb	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	611a      	str	r2, [r3, #16]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	625a      	str	r2, [r3, #36]	; 0x24
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047ce:	e7ff      	b.n	80047d0 <I2C_MasterTransmit_TXE+0x130>
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <I2C_MasterTransmit_BTF>:
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b21      	cmp	r3, #33	; 0x21
 80047f0:	d164      	bne.n	80048bc <I2C_MasterTransmit_BTF+0xe4>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d012      	beq.n	8004822 <I2C_MasterTransmit_BTF+0x4a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	781a      	ldrb	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	611a      	str	r2, [r3, #16]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	625a      	str	r2, [r3, #36]	; 0x24
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004820:	e04c      	b.n	80048bc <I2C_MasterTransmit_BTF+0xe4>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b08      	cmp	r3, #8
 8004826:	d01d      	beq.n	8004864 <I2C_MasterTransmit_BTF+0x8c>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b20      	cmp	r3, #32
 800482c:	d01a      	beq.n	8004864 <I2C_MasterTransmit_BTF+0x8c>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004834:	d016      	beq.n	8004864 <I2C_MasterTransmit_BTF+0x8c>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004844:	605a      	str	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2211      	movs	r2, #17
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff fee1 	bl	8004624 <HAL_I2C_MasterTxCpltCallback>
 8004862:	e02b      	b.n	80048bc <I2C_MasterTransmit_BTF+0xe4>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004872:	605a      	str	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	631a      	str	r2, [r3, #48]	; 0x30
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b40      	cmp	r3, #64	; 0x40
 800489c:	d107      	bne.n	80048ae <I2C_MasterTransmit_BTF+0xd6>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff fed0 	bl	800464c <HAL_I2C_MemTxCpltCallback>
 80048ac:	e006      	b.n	80048bc <I2C_MasterTransmit_BTF+0xe4>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff feb4 	bl	8004624 <HAL_I2C_MasterTxCpltCallback>
 80048bc:	bf00      	nop
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <I2C_MemoryTransmit_TXE_BTF>:
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d2:	73fb      	strb	r3, [r7, #15]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d11d      	bne.n	8004918 <I2C_MemoryTransmit_TXE_BTF+0x54>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d10b      	bne.n	80048fc <I2C_MemoryTransmit_TXE_BTF+0x38>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	611a      	str	r2, [r3, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f4:	1c9a      	adds	r2, r3, #2
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	651a      	str	r2, [r3, #80]	; 0x50
 80048fa:	e073      	b.n	80049e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004900:	b29b      	uxth	r3, r3
 8004902:	121b      	asrs	r3, r3, #8
 8004904:	b2da      	uxtb	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	611a      	str	r2, [r3, #16]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	651a      	str	r2, [r3, #80]	; 0x50
 8004916:	e065      	b.n	80049e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800491c:	2b01      	cmp	r3, #1
 800491e:	d10b      	bne.n	8004938 <I2C_MemoryTransmit_TXE_BTF+0x74>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004924:	b2da      	uxtb	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	611a      	str	r2, [r3, #16]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	651a      	str	r2, [r3, #80]	; 0x50
 8004936:	e055      	b.n	80049e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493c:	2b02      	cmp	r3, #2
 800493e:	d151      	bne.n	80049e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	2b22      	cmp	r3, #34	; 0x22
 8004944:	d10d      	bne.n	8004962 <I2C_MemoryTransmit_TXE_BTF+0x9e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	651a      	str	r2, [r3, #80]	; 0x50
 8004960:	e040      	b.n	80049e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004966:	b29b      	uxth	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d015      	beq.n	8004998 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	2b21      	cmp	r3, #33	; 0x21
 8004970:	d112      	bne.n	8004998 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	781a      	ldrb	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	611a      	str	r2, [r3, #16]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	625a      	str	r2, [r3, #36]	; 0x24
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004996:	e025      	b.n	80049e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d120      	bne.n	80049e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	2b21      	cmp	r3, #33	; 0x21
 80049a6:	d11d      	bne.n	80049e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049b6:	605a      	str	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff fe34 	bl	800464c <HAL_I2C_MemTxCpltCallback>
 80049e4:	bf00      	nop
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <I2C_MasterReceive_RXNE>:
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b22      	cmp	r3, #34	; 0x22
 80049fe:	f040 80ac 	bne.w	8004b5a <I2C_MasterReceive_RXNE+0x16e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d921      	bls.n	8004a54 <I2C_MasterReceive_RXNE+0x68>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	625a      	str	r2, [r3, #36]	; 0x24
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	f040 808c 	bne.w	8004b5a <I2C_MasterReceive_RXNE+0x16e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a50:	605a      	str	r2, [r3, #4]
 8004a52:	e082      	b.n	8004b5a <I2C_MasterReceive_RXNE+0x16e>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d075      	beq.n	8004b48 <I2C_MasterReceive_RXNE+0x15c>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d002      	beq.n	8004a68 <I2C_MasterReceive_RXNE+0x7c>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d16f      	bne.n	8004b48 <I2C_MasterReceive_RXNE+0x15c>
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f001 facd 	bl	8006008 <I2C_WaitOnSTOPRequestThroughIT>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d142      	bne.n	8004afa <I2C_MasterReceive_RXNE+0x10e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a92:	605a      	str	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	625a      	str	r2, [r3, #36]	; 0x24
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d10a      	bne.n	8004ae4 <I2C_MasterReceive_RXNE+0xf8>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff fdbf 	bl	8004660 <HAL_I2C_MemRxCpltCallback>
 8004ae2:	e03a      	b.n	8004b5a <I2C_MasterReceive_RXNE+0x16e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2212      	movs	r2, #18
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff fda0 	bl	8004638 <HAL_I2C_MasterRxCpltCallback>
 8004af8:	e02f      	b.n	8004b5a <I2C_MasterReceive_RXNE+0x16e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b08:	605a      	str	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	625a      	str	r2, [r3, #36]	; 0x24
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7fc ff7d 	bl	8001a40 <HAL_I2C_ErrorCallback>
 8004b46:	e008      	b.n	8004b5a <I2C_MasterReceive_RXNE+0x16e>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b56:	605a      	str	r2, [r3, #4]
 8004b58:	e7ff      	b.n	8004b5a <I2C_MasterReceive_RXNE+0x16e>
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <I2C_MasterReceive_BTF>:
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d11b      	bne.n	8004bb2 <I2C_MasterReceive_BTF+0x50>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bb0:	e0bd      	b.n	8004d2e <I2C_MasterReceive_BTF+0x1cc>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d129      	bne.n	8004c10 <I2C_MasterReceive_BTF+0xae>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bca:	605a      	str	r2, [r3, #4]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d00a      	beq.n	8004be8 <I2C_MasterReceive_BTF+0x86>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d007      	beq.n	8004be8 <I2C_MasterReceive_BTF+0x86>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	625a      	str	r2, [r3, #36]	; 0x24
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c0e:	e08e      	b.n	8004d2e <I2C_MasterReceive_BTF+0x1cc>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d176      	bne.n	8004d08 <I2C_MasterReceive_BTF+0x1a6>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d002      	beq.n	8004c26 <I2C_MasterReceive_BTF+0xc4>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b10      	cmp	r3, #16
 8004c24:	d108      	bne.n	8004c38 <I2C_MasterReceive_BTF+0xd6>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	e019      	b.n	8004c6c <I2C_MasterReceive_BTF+0x10a>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d002      	beq.n	8004c44 <I2C_MasterReceive_BTF+0xe2>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d108      	bne.n	8004c56 <I2C_MasterReceive_BTF+0xf4>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	e00a      	b.n	8004c6c <I2C_MasterReceive_BTF+0x10a>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d007      	beq.n	8004c6c <I2C_MasterReceive_BTF+0x10a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	625a      	str	r2, [r3, #36]	; 0x24
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	625a      	str	r2, [r3, #36]	; 0x24
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004cc6:	605a      	str	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b40      	cmp	r3, #64	; 0x40
 8004cda:	d10a      	bne.n	8004cf2 <I2C_MasterReceive_BTF+0x190>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff fcb8 	bl	8004660 <HAL_I2C_MemRxCpltCallback>
 8004cf0:	e01d      	b.n	8004d2e <I2C_MasterReceive_BTF+0x1cc>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2212      	movs	r2, #18
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff fc99 	bl	8004638 <HAL_I2C_MasterRxCpltCallback>
 8004d06:	e012      	b.n	8004d2e <I2C_MasterReceive_BTF+0x1cc>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691a      	ldr	r2, [r3, #16]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	625a      	str	r2, [r3, #36]	; 0x24
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <I2C_Master_SB>:
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b40      	cmp	r3, #64	; 0x40
 8004d48:	d117      	bne.n	8004d7a <I2C_Master_SB+0x44>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <I2C_Master_SB+0x30>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d62:	611a      	str	r2, [r3, #16]
 8004d64:	e067      	b.n	8004e36 <I2C_Master_SB+0x100>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	611a      	str	r2, [r3, #16]
 8004d78:	e05d      	b.n	8004e36 <I2C_Master_SB+0x100>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d82:	d133      	bne.n	8004dec <I2C_Master_SB+0xb6>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b21      	cmp	r3, #33	; 0x21
 8004d8e:	d109      	bne.n	8004da4 <I2C_Master_SB+0x6e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004da0:	611a      	str	r2, [r3, #16]
 8004da2:	e008      	b.n	8004db6 <I2C_Master_SB+0x80>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	f043 0301 	orr.w	r3, r3, #1
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	611a      	str	r2, [r3, #16]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d004      	beq.n	8004dc8 <I2C_Master_SB+0x92>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d108      	bne.n	8004dda <I2C_Master_SB+0xa4>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d032      	beq.n	8004e36 <I2C_Master_SB+0x100>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d02d      	beq.n	8004e36 <I2C_Master_SB+0x100>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de8:	605a      	str	r2, [r3, #4]
 8004dea:	e024      	b.n	8004e36 <I2C_Master_SB+0x100>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10e      	bne.n	8004e12 <I2C_Master_SB+0xdc>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	11db      	asrs	r3, r3, #7
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	f003 0306 	and.w	r3, r3, #6
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	f063 030f 	orn	r3, r3, #15
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	611a      	str	r2, [r3, #16]
 8004e10:	e011      	b.n	8004e36 <I2C_Master_SB+0x100>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d10d      	bne.n	8004e36 <I2C_Master_SB+0x100>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	11db      	asrs	r3, r3, #7
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f003 0306 	and.w	r3, r3, #6
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f063 030e 	orn	r3, r3, #14
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	611a      	str	r2, [r3, #16]
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <I2C_Master_ADD10>:
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	611a      	str	r2, [r3, #16]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d004      	beq.n	8004e68 <I2C_Master_ADD10+0x26>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d108      	bne.n	8004e7a <I2C_Master_ADD10+0x38>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00c      	beq.n	8004e8a <I2C_Master_ADD10+0x48>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <I2C_Master_ADD10+0x48>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e88:	605a      	str	r2, [r3, #4]
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <I2C_Master_ADDR>:
 8004e96:	b480      	push	{r7}
 8004e98:	b091      	sub	sp, #68	; 0x44
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ea4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b22      	cmp	r3, #34	; 0x22
 8004ebe:	f040 8169 	bne.w	8005194 <I2C_Master_ADDR+0x2fe>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10f      	bne.n	8004eea <I2C_Master_ADDR+0x54>
 8004eca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004ece:	2b40      	cmp	r3, #64	; 0x40
 8004ed0:	d10b      	bne.n	8004eea <I2C_Master_ADDR+0x54>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	633b      	str	r3, [r7, #48]	; 0x30
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	e160      	b.n	80051ac <I2C_Master_ADDR+0x316>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d11d      	bne.n	8004f2e <I2C_Master_ADDR+0x98>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004efa:	d118      	bne.n	8004f2e <I2C_Master_ADDR+0x98>
 8004efc:	2300      	movs	r3, #0
 8004efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	651a      	str	r2, [r3, #80]	; 0x50
 8004f2c:	e13e      	b.n	80051ac <I2C_Master_ADDR+0x316>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d113      	bne.n	8004f60 <I2C_Master_ADDR+0xca>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	e115      	b.n	800518c <I2C_Master_ADDR+0x2f6>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	f040 808a 	bne.w	8005080 <I2C_Master_ADDR+0x1ea>
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f72:	d137      	bne.n	8004fe4 <I2C_Master_ADDR+0x14e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f92:	d113      	bne.n	8004fbc <I2C_Master_ADDR+0x126>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	e0e7      	b.n	800518c <I2C_Master_ADDR+0x2f6>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	623b      	str	r3, [r7, #32]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	623b      	str	r3, [r7, #32]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	623b      	str	r3, [r7, #32]
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	e0d3      	b.n	800518c <I2C_Master_ADDR+0x2f6>
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d02e      	beq.n	8005048 <I2C_Master_ADDR+0x1b2>
 8004fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	d02b      	beq.n	8005048 <I2C_Master_ADDR+0x1b2>
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff2:	2b12      	cmp	r3, #18
 8004ff4:	d102      	bne.n	8004ffc <I2C_Master_ADDR+0x166>
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d125      	bne.n	8005048 <I2C_Master_ADDR+0x1b2>
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d00e      	beq.n	8005020 <I2C_Master_ADDR+0x18a>
 8005002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005004:	2b02      	cmp	r3, #2
 8005006:	d00b      	beq.n	8005020 <I2C_Master_ADDR+0x18a>
 8005008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500a:	2b10      	cmp	r3, #16
 800500c:	d008      	beq.n	8005020 <I2C_Master_ADDR+0x18a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e007      	b.n	8005030 <I2C_Master_ADDR+0x19a>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	61fb      	str	r3, [r7, #28]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	e0a1      	b.n	800518c <I2C_Master_ADDR+0x2f6>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	2300      	movs	r3, #0
 800505a:	61bb      	str	r3, [r7, #24]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	e085      	b.n	800518c <I2C_Master_ADDR+0x2f6>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d14d      	bne.n	8005126 <I2C_Master_ADDR+0x290>
 800508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508c:	2b04      	cmp	r3, #4
 800508e:	d016      	beq.n	80050be <I2C_Master_ADDR+0x228>
 8005090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005092:	2b02      	cmp	r3, #2
 8005094:	d013      	beq.n	80050be <I2C_Master_ADDR+0x228>
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005098:	2b10      	cmp	r3, #16
 800509a:	d010      	beq.n	80050be <I2C_Master_ADDR+0x228>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	e007      	b.n	80050ce <I2C_Master_ADDR+0x238>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050dc:	d117      	bne.n	800510e <I2C_Master_ADDR+0x278>
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050e4:	d00b      	beq.n	80050fe <I2C_Master_ADDR+0x268>
 80050e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d008      	beq.n	80050fe <I2C_Master_ADDR+0x268>
 80050ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d005      	beq.n	80050fe <I2C_Master_ADDR+0x268>
 80050f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f4:	2b10      	cmp	r3, #16
 80050f6:	d002      	beq.n	80050fe <I2C_Master_ADDR+0x268>
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	2b20      	cmp	r3, #32
 80050fc:	d107      	bne.n	800510e <I2C_Master_ADDR+0x278>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800510c:	605a      	str	r2, [r3, #4]
 800510e:	2300      	movs	r3, #0
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	e032      	b.n	800518c <I2C_Master_ADDR+0x2f6>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005144:	d117      	bne.n	8005176 <I2C_Master_ADDR+0x2e0>
 8005146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005148:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800514c:	d00b      	beq.n	8005166 <I2C_Master_ADDR+0x2d0>
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	2b01      	cmp	r3, #1
 8005152:	d008      	beq.n	8005166 <I2C_Master_ADDR+0x2d0>
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	2b08      	cmp	r3, #8
 8005158:	d005      	beq.n	8005166 <I2C_Master_ADDR+0x2d0>
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	2b10      	cmp	r3, #16
 800515e:	d002      	beq.n	8005166 <I2C_Master_ADDR+0x2d0>
 8005160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005162:	2b20      	cmp	r3, #32
 8005164:	d107      	bne.n	8005176 <I2C_Master_ADDR+0x2e0>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	613b      	str	r3, [r7, #16]
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	651a      	str	r2, [r3, #80]	; 0x50
 8005192:	e00b      	b.n	80051ac <I2C_Master_ADDR+0x316>
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	e7ff      	b.n	80051ac <I2C_Master_ADDR+0x316>
 80051ac:	bf00      	nop
 80051ae:	3744      	adds	r7, #68	; 0x44
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <I2C_SlaveTransmit_TXE>:
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c6:	73fb      	strb	r3, [r7, #15]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d02b      	beq.n	800522a <I2C_SlaveTransmit_TXE+0x72>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	781a      	ldrb	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	611a      	str	r2, [r3, #16]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	625a      	str	r2, [r3, #36]	; 0x24
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d114      	bne.n	800522a <I2C_SlaveTransmit_TXE+0x72>
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	2b29      	cmp	r3, #41	; 0x29
 8005204:	d111      	bne.n	800522a <I2C_SlaveTransmit_TXE+0x72>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005214:	605a      	str	r2, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2221      	movs	r2, #33	; 0x21
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2228      	movs	r2, #40	; 0x28
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7fc fbc5 	bl	80019b4 <HAL_I2C_SlaveTxCpltCallback>
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <I2C_SlaveTransmit_BTF>:
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d011      	beq.n	8005268 <I2C_SlaveTransmit_BTF+0x36>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	781a      	ldrb	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	611a      	str	r2, [r3, #16]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	625a      	str	r2, [r3, #36]	; 0x24
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <I2C_SlaveReceive_RXNE>:
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005282:	73fb      	strb	r3, [r7, #15]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d02c      	beq.n	80052e8 <I2C_SlaveReceive_RXNE+0x74>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d114      	bne.n	80052e8 <I2C_SlaveReceive_RXNE+0x74>
 80052be:	7bfb      	ldrb	r3, [r7, #15]
 80052c0:	2b2a      	cmp	r3, #42	; 0x2a
 80052c2:	d111      	bne.n	80052e8 <I2C_SlaveReceive_RXNE+0x74>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d2:	605a      	str	r2, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2222      	movs	r2, #34	; 0x22
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2228      	movs	r2, #40	; 0x28
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fc fb70 	bl	80019c8 <HAL_I2C_SlaveRxCpltCallback>
 80052e8:	bf00      	nop
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <I2C_SlaveReceive_BTF>:
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d012      	beq.n	8005328 <I2C_SlaveReceive_BTF+0x38>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	701a      	strb	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	625a      	str	r2, [r3, #36]	; 0x24
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <I2C_Slave_ADDR>:
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
 800533e:	2300      	movs	r3, #0
 8005340:	73fb      	strb	r3, [r7, #15]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800534e:	2b28      	cmp	r3, #40	; 0x28
 8005350:	d125      	bne.n	800539e <I2C_Slave_ADDR+0x6a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <I2C_Slave_ADDR+0x3c>
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005376:	2b00      	cmp	r3, #0
 8005378:	d103      	bne.n	8005382 <I2C_Slave_ADDR+0x4e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	81bb      	strh	r3, [r7, #12]
 8005380:	e002      	b.n	8005388 <I2C_Slave_ADDR+0x54>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	81bb      	strh	r3, [r7, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005390:	89ba      	ldrh	r2, [r7, #12]
 8005392:	7bfb      	ldrb	r3, [r7, #15]
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fc faca 	bl	8001930 <HAL_I2C_AddrCallback>
 800539c:	e00e      	b.n	80053bc <I2C_Slave_ADDR+0x88>
 800539e:	2300      	movs	r3, #0
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	60bb      	str	r3, [r7, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053bc:	bf00      	nop
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <I2C_Slave_STOPF>:
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d2:	73fb      	strb	r3, [r7, #15]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053e2:	605a      	str	r2, [r3, #4]
 80053e4:	2300      	movs	r3, #0
 80053e6:	60bb      	str	r3, [r7, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	60bb      	str	r3, [r7, #8]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800541c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005420:	d172      	bne.n	8005508 <I2C_Slave_STOPF+0x144>
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	2b22      	cmp	r3, #34	; 0x22
 8005426:	d002      	beq.n	800542e <I2C_Slave_STOPF+0x6a>
 8005428:	7bfb      	ldrb	r3, [r7, #15]
 800542a:	2b2a      	cmp	r3, #42	; 0x2a
 800542c:	d135      	bne.n	800549a <I2C_Slave_STOPF+0xd6>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	b29a      	uxth	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <I2C_Slave_STOPF+0x8e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f043 0204 	orr.w	r2, r3, #4
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	641a      	str	r2, [r3, #64]	; 0x40
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005460:	605a      	str	r2, [r3, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	4618      	mov	r0, r3
 8005468:	f7fd ff95 	bl	8003396 <HAL_DMA_GetState>
 800546c:	4603      	mov	r3, r0
 800546e:	2b01      	cmp	r3, #1
 8005470:	d049      	beq.n	8005506 <I2C_Slave_STOPF+0x142>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	4a69      	ldr	r2, [pc, #420]	; (800561c <I2C_Slave_STOPF+0x258>)
 8005478:	651a      	str	r2, [r3, #80]	; 0x50
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	4618      	mov	r0, r3
 8005480:	f7fd ff67 	bl	8003352 <HAL_DMA_Abort_IT>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d03d      	beq.n	8005506 <I2C_Slave_STOPF+0x142>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005494:	4610      	mov	r0, r2
 8005496:	4798      	blx	r3
 8005498:	e035      	b.n	8005506 <I2C_Slave_STOPF+0x142>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <I2C_Slave_STOPF+0xfa>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	f043 0204 	orr.w	r2, r3, #4
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	641a      	str	r2, [r3, #64]	; 0x40
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054cc:	605a      	str	r2, [r3, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fd ff5f 	bl	8003396 <HAL_DMA_GetState>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d014      	beq.n	8005508 <I2C_Slave_STOPF+0x144>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e2:	4a4e      	ldr	r2, [pc, #312]	; (800561c <I2C_Slave_STOPF+0x258>)
 80054e4:	651a      	str	r2, [r3, #80]	; 0x50
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fd ff31 	bl	8003352 <HAL_DMA_Abort_IT>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d008      	beq.n	8005508 <I2C_Slave_STOPF+0x144>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005500:	4610      	mov	r0, r2
 8005502:	4798      	blx	r3
 8005504:	e000      	b.n	8005508 <I2C_Slave_STOPF+0x144>
 8005506:	bf00      	nop
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d03e      	beq.n	8005590 <I2C_Slave_STOPF+0x1cc>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b04      	cmp	r3, #4
 800551e:	d112      	bne.n	8005546 <I2C_Slave_STOPF+0x182>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	701a      	strb	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	625a      	str	r2, [r3, #36]	; 0x24
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553c:	b29b      	uxth	r3, r3
 800553e:	3b01      	subs	r3, #1
 8005540:	b29a      	uxth	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005550:	2b40      	cmp	r3, #64	; 0x40
 8005552:	d112      	bne.n	800557a <I2C_Slave_STOPF+0x1b6>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	691a      	ldr	r2, [r3, #16]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	625a      	str	r2, [r3, #36]	; 0x24
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	855a      	strh	r2, [r3, #42]	; 0x2a
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d005      	beq.n	8005590 <I2C_Slave_STOPF+0x1cc>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	f043 0204 	orr.w	r2, r3, #4
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	641a      	str	r2, [r3, #64]	; 0x40
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <I2C_Slave_STOPF+0x1dc>
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f8b3 	bl	8005704 <I2C_ITError>
 800559e:	e039      	b.n	8005614 <I2C_Slave_STOPF+0x250>
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	2b2a      	cmp	r3, #42	; 0x2a
 80055a4:	d109      	bne.n	80055ba <I2C_Slave_STOPF+0x1f6>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	631a      	str	r2, [r3, #48]	; 0x30
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2228      	movs	r2, #40	; 0x28
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7fc fa07 	bl	80019c8 <HAL_I2C_SlaveRxCpltCallback>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b28      	cmp	r3, #40	; 0x28
 80055c4:	d111      	bne.n	80055ea <I2C_Slave_STOPF+0x226>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a15      	ldr	r2, [pc, #84]	; (8005620 <I2C_Slave_STOPF+0x25c>)
 80055ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	631a      	str	r2, [r3, #48]	; 0x30
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fc f992 	bl	800190c <HAL_I2C_ListenCpltCallback>
 80055e8:	e014      	b.n	8005614 <I2C_Slave_STOPF+0x250>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	2b22      	cmp	r3, #34	; 0x22
 80055f0:	d002      	beq.n	80055f8 <I2C_Slave_STOPF+0x234>
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	2b22      	cmp	r3, #34	; 0x22
 80055f6:	d10d      	bne.n	8005614 <I2C_Slave_STOPF+0x250>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	631a      	str	r2, [r3, #48]	; 0x30
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fc f9da 	bl	80019c8 <HAL_I2C_SlaveRxCpltCallback>
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	08005c09 	.word	0x08005c09
 8005620:	ffff0000 	.word	0xffff0000

08005624 <I2C_Slave_AF>:
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005632:	73fb      	strb	r3, [r7, #15]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	60bb      	str	r3, [r7, #8]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b08      	cmp	r3, #8
 800563e:	d002      	beq.n	8005646 <I2C_Slave_AF+0x22>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b20      	cmp	r3, #32
 8005644:	d129      	bne.n	800569a <I2C_Slave_AF+0x76>
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	2b28      	cmp	r3, #40	; 0x28
 800564a:	d126      	bne.n	800569a <I2C_Slave_AF+0x76>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a2c      	ldr	r2, [pc, #176]	; (8005700 <I2C_Slave_AF+0xdc>)
 8005650:	62da      	str	r2, [r3, #44]	; 0x2c
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005660:	605a      	str	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800566a:	615a      	str	r2, [r3, #20]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	631a      	str	r2, [r3, #48]	; 0x30
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fc f93a 	bl	800190c <HAL_I2C_ListenCpltCallback>
 8005698:	e02e      	b.n	80056f8 <I2C_Slave_AF+0xd4>
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	2b21      	cmp	r3, #33	; 0x21
 800569e:	d126      	bne.n	80056ee <I2C_Slave_AF+0xca>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a17      	ldr	r2, [pc, #92]	; (8005700 <I2C_Slave_AF+0xdc>)
 80056a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2221      	movs	r2, #33	; 0x21
 80056aa:	631a      	str	r2, [r3, #48]	; 0x30
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056ca:	605a      	str	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056d4:	615a      	str	r2, [r3, #20]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fc f964 	bl	80019b4 <HAL_I2C_SlaveTxCpltCallback>
 80056ec:	e004      	b.n	80056f8 <I2C_Slave_AF+0xd4>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056f6:	615a      	str	r2, [r3, #20]
 80056f8:	bf00      	nop
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	ffff0000 	.word	0xffff0000

08005704 <I2C_ITError>:
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005712:	73fb      	strb	r3, [r7, #15]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800571a:	73bb      	strb	r3, [r7, #14]
 800571c:	7bbb      	ldrb	r3, [r7, #14]
 800571e:	2b10      	cmp	r3, #16
 8005720:	d002      	beq.n	8005728 <I2C_ITError+0x24>
 8005722:	7bbb      	ldrb	r3, [r7, #14]
 8005724:	2b40      	cmp	r3, #64	; 0x40
 8005726:	d10a      	bne.n	800573e <I2C_ITError+0x3a>
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	2b22      	cmp	r3, #34	; 0x22
 800572c:	d107      	bne.n	800573e <I2C_ITError+0x3a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005744:	2b28      	cmp	r3, #40	; 0x28
 8005746:	d107      	bne.n	8005758 <I2C_ITError+0x54>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	631a      	str	r2, [r3, #48]	; 0x30
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2228      	movs	r2, #40	; 0x28
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005756:	e015      	b.n	8005784 <I2C_ITError+0x80>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005766:	d00a      	beq.n	800577e <I2C_ITError+0x7a>
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	2b60      	cmp	r3, #96	; 0x60
 800576c:	d007      	beq.n	800577e <I2C_ITError+0x7a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	631a      	str	r2, [r3, #48]	; 0x30
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800578e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005792:	d162      	bne.n	800585a <I2C_ITError+0x156>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057a2:	605a      	str	r2, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d020      	beq.n	80057f4 <I2C_ITError+0xf0>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b6:	4a6a      	ldr	r2, [pc, #424]	; (8005960 <I2C_ITError+0x25c>)
 80057b8:	651a      	str	r2, [r3, #80]	; 0x50
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fd fdc7 	bl	8003352 <HAL_DMA_Abort_IT>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 8089 	beq.w	80058de <I2C_ITError+0x1da>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0201 	bic.w	r2, r2, #1
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057ee:	4610      	mov	r0, r2
 80057f0:	4798      	blx	r3
 80057f2:	e074      	b.n	80058de <I2C_ITError+0x1da>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	4a59      	ldr	r2, [pc, #356]	; (8005960 <I2C_ITError+0x25c>)
 80057fa:	651a      	str	r2, [r3, #80]	; 0x50
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005800:	4618      	mov	r0, r3
 8005802:	f7fd fda6 	bl	8003352 <HAL_DMA_Abort_IT>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d068      	beq.n	80058de <I2C_ITError+0x1da>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005816:	2b40      	cmp	r3, #64	; 0x40
 8005818:	d10b      	bne.n	8005832 <I2C_ITError+0x12e>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	625a      	str	r2, [r3, #36]	; 0x24
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0201 	bic.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005854:	4610      	mov	r0, r2
 8005856:	4798      	blx	r3
 8005858:	e041      	b.n	80058de <I2C_ITError+0x1da>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b60      	cmp	r3, #96	; 0x60
 8005864:	d125      	bne.n	80058b2 <I2C_ITError+0x1ae>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	641a      	str	r2, [r3, #64]	; 0x40
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587e:	2b40      	cmp	r3, #64	; 0x40
 8005880:	d10b      	bne.n	800589a <I2C_ITError+0x196>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	701a      	strb	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	625a      	str	r2, [r3, #36]	; 0x24
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0201 	bic.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fe fee2 	bl	8004674 <HAL_I2C_AbortCpltCallback>
 80058b0:	e015      	b.n	80058de <I2C_ITError+0x1da>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058bc:	2b40      	cmp	r3, #64	; 0x40
 80058be:	d10b      	bne.n	80058d8 <I2C_ITError+0x1d4>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	701a      	strb	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	625a      	str	r2, [r3, #36]	; 0x24
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7fc f8b1 	bl	8001a40 <HAL_I2C_ErrorCallback>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	60bb      	str	r3, [r7, #8]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10e      	bne.n	800590c <I2C_ITError+0x208>
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <I2C_ITError+0x208>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d104      	bne.n	800590c <I2C_ITError+0x208>
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f003 0308 	and.w	r3, r3, #8
 8005908:	2b00      	cmp	r3, #0
 800590a:	d007      	beq.n	800591c <I2C_ITError+0x218>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800591a:	605a      	str	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005922:	73fb      	strb	r3, [r7, #15]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b04      	cmp	r3, #4
 800592e:	d113      	bne.n	8005958 <I2C_ITError+0x254>
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	2b28      	cmp	r3, #40	; 0x28
 8005934:	d110      	bne.n	8005958 <I2C_ITError+0x254>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a0a      	ldr	r2, [pc, #40]	; (8005964 <I2C_ITError+0x260>)
 800593a:	62da      	str	r2, [r3, #44]	; 0x2c
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	631a      	str	r2, [r3, #48]	; 0x30
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fb ffda 	bl	800190c <HAL_I2C_ListenCpltCallback>
 8005958:	bf00      	nop
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	08005c09 	.word	0x08005c09
 8005964:	ffff0000 	.word	0xffff0000

08005968 <I2C_MasterRequestWrite>:
 8005968:	b580      	push	{r7, lr}
 800596a:	b088      	sub	sp, #32
 800596c:	af02      	add	r7, sp, #8
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	607a      	str	r2, [r7, #4]
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	460b      	mov	r3, r1
 8005976:	817b      	strh	r3, [r7, #10]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2b08      	cmp	r3, #8
 8005982:	d006      	beq.n	8005992 <I2C_MasterRequestWrite+0x2a>
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d003      	beq.n	8005992 <I2C_MasterRequestWrite+0x2a>
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005990:	d108      	bne.n	80059a4 <I2C_MasterRequestWrite+0x3c>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	e00b      	b.n	80059bc <I2C_MasterRequestWrite+0x54>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	2b12      	cmp	r3, #18
 80059aa:	d107      	bne.n	80059bc <I2C_MasterRequestWrite+0x54>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f9c5 	bl	8005d58 <I2C_WaitOnFlagUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00d      	beq.n	80059f0 <I2C_MasterRequestWrite+0x88>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059e2:	d103      	bne.n	80059ec <I2C_MasterRequestWrite+0x84>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ea:	641a      	str	r2, [r3, #64]	; 0x40
 80059ec:	2303      	movs	r3, #3
 80059ee:	e035      	b.n	8005a5c <I2C_MasterRequestWrite+0xf4>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059f8:	d108      	bne.n	8005a0c <I2C_MasterRequestWrite+0xa4>
 80059fa:	897b      	ldrh	r3, [r7, #10]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a08:	611a      	str	r2, [r3, #16]
 8005a0a:	e01b      	b.n	8005a44 <I2C_MasterRequestWrite+0xdc>
 8005a0c:	897b      	ldrh	r3, [r7, #10]
 8005a0e:	11db      	asrs	r3, r3, #7
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	f003 0306 	and.w	r3, r3, #6
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f063 030f 	orn	r3, r3, #15
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	611a      	str	r2, [r3, #16]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	490e      	ldr	r1, [pc, #56]	; (8005a64 <I2C_MasterRequestWrite+0xfc>)
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f9eb 	bl	8005e06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <I2C_MasterRequestWrite+0xd2>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e010      	b.n	8005a5c <I2C_MasterRequestWrite+0xf4>
 8005a3a:	897b      	ldrh	r3, [r7, #10]
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	611a      	str	r2, [r3, #16]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	4907      	ldr	r1, [pc, #28]	; (8005a68 <I2C_MasterRequestWrite+0x100>)
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 f9db 	bl	8005e06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <I2C_MasterRequestWrite+0xf2>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <I2C_MasterRequestWrite+0xf4>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	00010008 	.word	0x00010008
 8005a68:	00010002 	.word	0x00010002

08005a6c <I2C_MasterRequestRead>:
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	607a      	str	r2, [r7, #4]
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	817b      	strh	r3, [r7, #10]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d006      	beq.n	8005aa6 <I2C_MasterRequestRead+0x3a>
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d003      	beq.n	8005aa6 <I2C_MasterRequestRead+0x3a>
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005aa4:	d108      	bne.n	8005ab8 <I2C_MasterRequestRead+0x4c>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	e00b      	b.n	8005ad0 <I2C_MasterRequestRead+0x64>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	2b11      	cmp	r3, #17
 8005abe:	d107      	bne.n	8005ad0 <I2C_MasterRequestRead+0x64>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f93b 	bl	8005d58 <I2C_WaitOnFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00d      	beq.n	8005b04 <I2C_MasterRequestRead+0x98>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af6:	d103      	bne.n	8005b00 <I2C_MasterRequestRead+0x94>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005afe:	641a      	str	r2, [r3, #64]	; 0x40
 8005b00:	2303      	movs	r3, #3
 8005b02:	e079      	b.n	8005bf8 <I2C_MasterRequestRead+0x18c>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b0c:	d108      	bne.n	8005b20 <I2C_MasterRequestRead+0xb4>
 8005b0e:	897b      	ldrh	r3, [r7, #10]
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	611a      	str	r2, [r3, #16]
 8005b1e:	e05f      	b.n	8005be0 <I2C_MasterRequestRead+0x174>
 8005b20:	897b      	ldrh	r3, [r7, #10]
 8005b22:	11db      	asrs	r3, r3, #7
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	f003 0306 	and.w	r3, r3, #6
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	f063 030f 	orn	r3, r3, #15
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	611a      	str	r2, [r3, #16]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	4930      	ldr	r1, [pc, #192]	; (8005c00 <I2C_MasterRequestRead+0x194>)
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 f961 	bl	8005e06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <I2C_MasterRequestRead+0xe2>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e054      	b.n	8005bf8 <I2C_MasterRequestRead+0x18c>
 8005b4e:	897b      	ldrh	r3, [r7, #10]
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	611a      	str	r2, [r3, #16]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	4929      	ldr	r1, [pc, #164]	; (8005c04 <I2C_MasterRequestRead+0x198>)
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 f951 	bl	8005e06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <I2C_MasterRequestRead+0x102>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e044      	b.n	8005bf8 <I2C_MasterRequestRead+0x18c>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	613b      	str	r3, [r7, #16]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f8d9 	bl	8005d58 <I2C_WaitOnFlagUntilTimeout>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00d      	beq.n	8005bc8 <I2C_MasterRequestRead+0x15c>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bba:	d103      	bne.n	8005bc4 <I2C_MasterRequestRead+0x158>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e017      	b.n	8005bf8 <I2C_MasterRequestRead+0x18c>
 8005bc8:	897b      	ldrh	r3, [r7, #10]
 8005bca:	11db      	asrs	r3, r3, #7
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	f003 0306 	and.w	r3, r3, #6
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	f063 030e 	orn	r3, r3, #14
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	611a      	str	r2, [r3, #16]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	4907      	ldr	r1, [pc, #28]	; (8005c04 <I2C_MasterRequestRead+0x198>)
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 f90d 	bl	8005e06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <I2C_MasterRequestRead+0x18a>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <I2C_MasterRequestRead+0x18c>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3718      	adds	r7, #24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	00010008 	.word	0x00010008
 8005c04:	00010002 	.word	0x00010002

08005c08 <I2C_DMAAbort>:
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	2300      	movs	r3, #0
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c20:	74fb      	strb	r3, [r7, #19]
 8005c22:	4b4b      	ldr	r3, [pc, #300]	; (8005d50 <I2C_DMAAbort+0x148>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	08db      	lsrs	r3, r3, #3
 8005c28:	4a4a      	ldr	r2, [pc, #296]	; (8005d54 <I2C_DMAAbort+0x14c>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	0a1a      	lsrs	r2, r3, #8
 8005c30:	4613      	mov	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	00da      	lsls	r2, r3, #3
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <I2C_DMAAbort+0x48>
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	f043 0220 	orr.w	r2, r3, #32
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	641a      	str	r2, [r3, #64]	; 0x40
 8005c4e:	e00a      	b.n	8005c66 <I2C_DMAAbort+0x5e>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c64:	d0ea      	beq.n	8005c3c <I2C_DMAAbort+0x34>
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <I2C_DMAAbort+0x6e>
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c72:	2200      	movs	r2, #0
 8005c74:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <I2C_DMAAbort+0x7e>
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	2200      	movs	r2, #0
 8005c84:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <I2C_DMAAbort+0xa4>
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca8:	2200      	movs	r2, #0
 8005caa:	651a      	str	r2, [r3, #80]	; 0x50
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <I2C_DMAAbort+0xb4>
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	2200      	movs	r2, #0
 8005cba:	651a      	str	r2, [r3, #80]	; 0x50
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0201 	bic.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b60      	cmp	r3, #96	; 0x60
 8005cd6:	d10e      	bne.n	8005cf6 <I2C_DMAAbort+0xee>
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2200      	movs	r2, #0
 8005cec:	641a      	str	r2, [r3, #64]	; 0x40
 8005cee:	6978      	ldr	r0, [r7, #20]
 8005cf0:	f7fe fcc0 	bl	8004674 <HAL_I2C_AbortCpltCallback>
 8005cf4:	e027      	b.n	8005d46 <I2C_DMAAbort+0x13e>
 8005cf6:	7cfb      	ldrb	r3, [r7, #19]
 8005cf8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cfc:	2b28      	cmp	r3, #40	; 0x28
 8005cfe:	d117      	bne.n	8005d30 <I2C_DMAAbort+0x128>
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2200      	movs	r2, #0
 8005d24:	631a      	str	r2, [r3, #48]	; 0x30
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2228      	movs	r2, #40	; 0x28
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d2e:	e007      	b.n	8005d40 <I2C_DMAAbort+0x138>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d40:	6978      	ldr	r0, [r7, #20]
 8005d42:	f7fb fe7d 	bl	8001a40 <HAL_I2C_ErrorCallback>
 8005d46:	bf00      	nop
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000098 	.word	0x20000098
 8005d54:	14f8b589 	.word	0x14f8b589

08005d58 <I2C_WaitOnFlagUntilTimeout>:
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	603b      	str	r3, [r7, #0]
 8005d64:	4613      	mov	r3, r2
 8005d66:	71fb      	strb	r3, [r7, #7]
 8005d68:	e025      	b.n	8005db6 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d70:	d021      	beq.n	8005db6 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005d72:	f7fc fe25 	bl	80029c0 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d302      	bcc.n	8005d88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d116      	bne.n	8005db6 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	f043 0220 	orr.w	r2, r3, #32
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	641a      	str	r2, [r3, #64]	; 0x40
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005db2:	2301      	movs	r3, #1
 8005db4:	e023      	b.n	8005dfe <I2C_WaitOnFlagUntilTimeout+0xa6>
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	0c1b      	lsrs	r3, r3, #16
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d10d      	bne.n	8005ddc <I2C_WaitOnFlagUntilTimeout+0x84>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	43da      	mvns	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	bf0c      	ite	eq
 8005dd2:	2301      	moveq	r3, #1
 8005dd4:	2300      	movne	r3, #0
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	e00c      	b.n	8005df6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	43da      	mvns	r2, r3
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	4013      	ands	r3, r2
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	bf0c      	ite	eq
 8005dee:	2301      	moveq	r3, #1
 8005df0:	2300      	movne	r3, #0
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	461a      	mov	r2, r3
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d0b6      	beq.n	8005d6a <I2C_WaitOnFlagUntilTimeout+0x12>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	e051      	b.n	8005eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e24:	d123      	bne.n	8005e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e3e:	615a      	str	r2, [r3, #20]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	631a      	str	r2, [r3, #48]	; 0x30
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	f043 0204 	orr.w	r2, r3, #4
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	641a      	str	r2, [r3, #64]	; 0x40
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e046      	b.n	8005efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e74:	d021      	beq.n	8005eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8005e76:	f7fc fda3 	bl	80029c0 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d302      	bcc.n	8005e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d116      	bne.n	8005eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	631a      	str	r2, [r3, #48]	; 0x30
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	f043 0220 	orr.w	r2, r3, #32
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	641a      	str	r2, [r3, #64]	; 0x40
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e020      	b.n	8005efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	0c1b      	lsrs	r3, r3, #16
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d10c      	bne.n	8005ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	43da      	mvns	r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	bf14      	ite	ne
 8005ed6:	2301      	movne	r3, #1
 8005ed8:	2300      	moveq	r3, #0
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	e00b      	b.n	8005ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	43da      	mvns	r2, r3
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bf14      	ite	ne
 8005ef0:	2301      	movne	r3, #1
 8005ef2:	2300      	moveq	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d18d      	bne.n	8005e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8005efa:	2300      	movs	r3, #0
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <I2C_WaitOnTXEFlagUntilTimeout>:
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	e02d      	b.n	8005f6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 f900 	bl	8006118 <I2C_IsAcknowledgeFailed>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e02d      	b.n	8005f7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d021      	beq.n	8005f6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8005f2a:	f7fc fd49 	bl	80029c0 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d302      	bcc.n	8005f40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d116      	bne.n	8005f6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	631a      	str	r2, [r3, #48]	; 0x30
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	f043 0220 	orr.w	r2, r3, #32
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	641a      	str	r2, [r3, #64]	; 0x40
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e007      	b.n	8005f7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f78:	2b80      	cmp	r3, #128	; 0x80
 8005f7a:	d1ca      	bne.n	8005f12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <I2C_WaitOnBTFFlagUntilTimeout>:
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b084      	sub	sp, #16
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	607a      	str	r2, [r7, #4]
 8005f92:	e02d      	b.n	8005ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 f8bf 	bl	8006118 <I2C_IsAcknowledgeFailed>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e02d      	b.n	8006000 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005faa:	d021      	beq.n	8005ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8005fac:	f7fc fd08 	bl	80029c0 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d302      	bcc.n	8005fc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d116      	bne.n	8005ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	631a      	str	r2, [r3, #48]	; 0x30
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	f043 0220 	orr.w	r2, r3, #32
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	641a      	str	r2, [r3, #64]	; 0x40
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005fec:	2301      	movs	r3, #1
 8005fee:	e007      	b.n	8006000 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d1ca      	bne.n	8005f94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8005ffe:	2300      	movs	r3, #0
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <I2C_WaitOnSTOPRequestThroughIT>:
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	4b13      	ldr	r3, [pc, #76]	; (8006064 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	08db      	lsrs	r3, r3, #3
 800601a:	4a13      	ldr	r2, [pc, #76]	; (8006068 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800601c:	fba2 2303 	umull	r2, r3, r2, r3
 8006020:	0a1a      	lsrs	r2, r3, #8
 8006022:	4613      	mov	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3b01      	subs	r3, #1
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d107      	bne.n	8006046 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	f043 0220 	orr.w	r2, r3, #32
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	641a      	str	r2, [r3, #64]	; 0x40
 8006042:	2301      	movs	r3, #1
 8006044:	e008      	b.n	8006058 <I2C_WaitOnSTOPRequestThroughIT+0x50>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006054:	d0e9      	beq.n	800602a <I2C_WaitOnSTOPRequestThroughIT+0x22>
 8006056:	2300      	movs	r3, #0
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	20000098 	.word	0x20000098
 8006068:	14f8b589 	.word	0x14f8b589

0800606c <I2C_WaitOnRXNEFlagUntilTimeout>:
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	e042      	b.n	8006100 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	f003 0310 	and.w	r3, r3, #16
 8006084:	2b10      	cmp	r3, #16
 8006086:	d119      	bne.n	80060bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f06f 0210 	mvn.w	r2, #16
 8006090:	615a      	str	r2, [r3, #20]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	631a      	str	r2, [r3, #48]	; 0x30
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2220      	movs	r2, #32
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	641a      	str	r2, [r3, #64]	; 0x40
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060b8:	2301      	movs	r3, #1
 80060ba:	e029      	b.n	8006110 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 80060bc:	f7fc fc80 	bl	80029c0 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d302      	bcc.n	80060d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d116      	bne.n	8006100 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2220      	movs	r2, #32
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	f043 0220 	orr.w	r2, r3, #32
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	641a      	str	r2, [r3, #64]	; 0x40
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060fc:	2301      	movs	r3, #1
 80060fe:	e007      	b.n	8006110 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610a:	2b40      	cmp	r3, #64	; 0x40
 800610c:	d1b5      	bne.n	800607a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 800610e:	2300      	movs	r3, #0
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <I2C_IsAcknowledgeFailed>:
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800612a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800612e:	d11b      	bne.n	8006168 <I2C_IsAcknowledgeFailed+0x50>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006138:	615a      	str	r2, [r3, #20]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	631a      	str	r2, [r3, #48]	; 0x30
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	f043 0204 	orr.w	r2, r3, #4
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	641a      	str	r2, [r3, #64]	; 0x40
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006164:	2301      	movs	r3, #1
 8006166:	e000      	b.n	800616a <I2C_IsAcknowledgeFailed+0x52>
 8006168:	2300      	movs	r3, #0
 800616a:	4618      	mov	r0, r3
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <I2C_ConvertOtherXferOptions>:
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006182:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006186:	d103      	bne.n	8006190 <I2C_ConvertOtherXferOptions+0x1a>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	62da      	str	r2, [r3, #44]	; 0x2c
 800618e:	e007      	b.n	80061a0 <I2C_ConvertOtherXferOptions+0x2a>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006198:	d102      	bne.n	80061a0 <I2C_ConvertOtherXferOptions+0x2a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2208      	movs	r2, #8
 800619e:	62da      	str	r2, [r3, #44]	; 0x2c
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_RCC_OscConfig>:
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_RCC_OscConfig+0x12>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e267      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d075      	beq.n	80062b6 <HAL_RCC_OscConfig+0x10a>
 80061ca:	4b88      	ldr	r3, [pc, #544]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 030c 	and.w	r3, r3, #12
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d00c      	beq.n	80061f0 <HAL_RCC_OscConfig+0x44>
 80061d6:	4b85      	ldr	r3, [pc, #532]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 030c 	and.w	r3, r3, #12
 80061de:	2b08      	cmp	r3, #8
 80061e0:	d112      	bne.n	8006208 <HAL_RCC_OscConfig+0x5c>
 80061e2:	4b82      	ldr	r3, [pc, #520]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ee:	d10b      	bne.n	8006208 <HAL_RCC_OscConfig+0x5c>
 80061f0:	4b7e      	ldr	r3, [pc, #504]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d05b      	beq.n	80062b4 <HAL_RCC_OscConfig+0x108>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d157      	bne.n	80062b4 <HAL_RCC_OscConfig+0x108>
 8006204:	2301      	movs	r3, #1
 8006206:	e242      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006210:	d106      	bne.n	8006220 <HAL_RCC_OscConfig+0x74>
 8006212:	4b76      	ldr	r3, [pc, #472]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a75      	ldr	r2, [pc, #468]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	e01d      	b.n	800625c <HAL_RCC_OscConfig+0xb0>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006228:	d10c      	bne.n	8006244 <HAL_RCC_OscConfig+0x98>
 800622a:	4b70      	ldr	r3, [pc, #448]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a6f      	ldr	r2, [pc, #444]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	4b6d      	ldr	r3, [pc, #436]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a6c      	ldr	r2, [pc, #432]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 800623c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	e00b      	b.n	800625c <HAL_RCC_OscConfig+0xb0>
 8006244:	4b69      	ldr	r3, [pc, #420]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a68      	ldr	r2, [pc, #416]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 800624a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	4b66      	ldr	r3, [pc, #408]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a65      	ldr	r2, [pc, #404]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d013      	beq.n	800628c <HAL_RCC_OscConfig+0xe0>
 8006264:	f7fc fbac 	bl	80029c0 <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0xd2>
 800626c:	f7fc fba8 	bl	80029c0 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b64      	cmp	r3, #100	; 0x64
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0xd2>
 800627a:	2303      	movs	r3, #3
 800627c:	e207      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 800627e:	4b5b      	ldr	r3, [pc, #364]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f0      	beq.n	800626c <HAL_RCC_OscConfig+0xc0>
 800628a:	e014      	b.n	80062b6 <HAL_RCC_OscConfig+0x10a>
 800628c:	f7fc fb98 	bl	80029c0 <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0xfa>
 8006294:	f7fc fb94 	bl	80029c0 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b64      	cmp	r3, #100	; 0x64
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0xfa>
 80062a2:	2303      	movs	r3, #3
 80062a4:	e1f3      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 80062a6:	4b51      	ldr	r3, [pc, #324]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f0      	bne.n	8006294 <HAL_RCC_OscConfig+0xe8>
 80062b2:	e000      	b.n	80062b6 <HAL_RCC_OscConfig+0x10a>
 80062b4:	bf00      	nop
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d063      	beq.n	800638a <HAL_RCC_OscConfig+0x1de>
 80062c2:	4b4a      	ldr	r3, [pc, #296]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 030c 	and.w	r3, r3, #12
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00b      	beq.n	80062e6 <HAL_RCC_OscConfig+0x13a>
 80062ce:	4b47      	ldr	r3, [pc, #284]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 030c 	and.w	r3, r3, #12
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	d11c      	bne.n	8006314 <HAL_RCC_OscConfig+0x168>
 80062da:	4b44      	ldr	r3, [pc, #272]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d116      	bne.n	8006314 <HAL_RCC_OscConfig+0x168>
 80062e6:	4b41      	ldr	r3, [pc, #260]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d005      	beq.n	80062fe <HAL_RCC_OscConfig+0x152>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d001      	beq.n	80062fe <HAL_RCC_OscConfig+0x152>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e1c7      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 80062fe:	4b3b      	ldr	r3, [pc, #236]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	4937      	ldr	r1, [pc, #220]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 800630e:	4313      	orrs	r3, r2
 8006310:	600b      	str	r3, [r1, #0]
 8006312:	e03a      	b.n	800638a <HAL_RCC_OscConfig+0x1de>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d020      	beq.n	800635e <HAL_RCC_OscConfig+0x1b2>
 800631c:	4b34      	ldr	r3, [pc, #208]	; (80063f0 <HAL_RCC_OscConfig+0x244>)
 800631e:	2201      	movs	r2, #1
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	f7fc fb4d 	bl	80029c0 <HAL_GetTick>
 8006326:	6138      	str	r0, [r7, #16]
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x190>
 800632a:	f7fc fb49 	bl	80029c0 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x190>
 8006338:	2303      	movs	r3, #3
 800633a:	e1a8      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 800633c:	4b2b      	ldr	r3, [pc, #172]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0f0      	beq.n	800632a <HAL_RCC_OscConfig+0x17e>
 8006348:	4b28      	ldr	r3, [pc, #160]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	4925      	ldr	r1, [pc, #148]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006358:	4313      	orrs	r3, r2
 800635a:	600b      	str	r3, [r1, #0]
 800635c:	e015      	b.n	800638a <HAL_RCC_OscConfig+0x1de>
 800635e:	4b24      	ldr	r3, [pc, #144]	; (80063f0 <HAL_RCC_OscConfig+0x244>)
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	f7fc fb2c 	bl	80029c0 <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x1d2>
 800636c:	f7fc fb28 	bl	80029c0 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x1d2>
 800637a:	2303      	movs	r3, #3
 800637c:	e187      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 800637e:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f0      	bne.n	800636c <HAL_RCC_OscConfig+0x1c0>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d036      	beq.n	8006404 <HAL_RCC_OscConfig+0x258>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d016      	beq.n	80063cc <HAL_RCC_OscConfig+0x220>
 800639e:	4b15      	ldr	r3, [pc, #84]	; (80063f4 <HAL_RCC_OscConfig+0x248>)
 80063a0:	2201      	movs	r2, #1
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	f7fc fb0c 	bl	80029c0 <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x212>
 80063ac:	f7fc fb08 	bl	80029c0 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x212>
 80063ba:	2303      	movs	r3, #3
 80063bc:	e167      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 80063be:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80063c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0f0      	beq.n	80063ac <HAL_RCC_OscConfig+0x200>
 80063ca:	e01b      	b.n	8006404 <HAL_RCC_OscConfig+0x258>
 80063cc:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <HAL_RCC_OscConfig+0x248>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	f7fc faf5 	bl	80029c0 <HAL_GetTick>
 80063d6:	6138      	str	r0, [r7, #16]
 80063d8:	e00e      	b.n	80063f8 <HAL_RCC_OscConfig+0x24c>
 80063da:	f7fc faf1 	bl	80029c0 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d907      	bls.n	80063f8 <HAL_RCC_OscConfig+0x24c>
 80063e8:	2303      	movs	r3, #3
 80063ea:	e150      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 80063ec:	40023800 	.word	0x40023800
 80063f0:	42470000 	.word	0x42470000
 80063f4:	42470e80 	.word	0x42470e80
 80063f8:	4b88      	ldr	r3, [pc, #544]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80063fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1ea      	bne.n	80063da <HAL_RCC_OscConfig+0x22e>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 8097 	beq.w	8006540 <HAL_RCC_OscConfig+0x394>
 8006412:	2300      	movs	r3, #0
 8006414:	75fb      	strb	r3, [r7, #23]
 8006416:	4b81      	ldr	r3, [pc, #516]	; (800661c <HAL_RCC_OscConfig+0x470>)
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10f      	bne.n	8006442 <HAL_RCC_OscConfig+0x296>
 8006422:	2300      	movs	r3, #0
 8006424:	60bb      	str	r3, [r7, #8]
 8006426:	4b7d      	ldr	r3, [pc, #500]	; (800661c <HAL_RCC_OscConfig+0x470>)
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	4a7c      	ldr	r2, [pc, #496]	; (800661c <HAL_RCC_OscConfig+0x470>)
 800642c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006430:	6413      	str	r3, [r2, #64]	; 0x40
 8006432:	4b7a      	ldr	r3, [pc, #488]	; (800661c <HAL_RCC_OscConfig+0x470>)
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800643a:	60bb      	str	r3, [r7, #8]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2301      	movs	r3, #1
 8006440:	75fb      	strb	r3, [r7, #23]
 8006442:	4b77      	ldr	r3, [pc, #476]	; (8006620 <HAL_RCC_OscConfig+0x474>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644a:	2b00      	cmp	r3, #0
 800644c:	d118      	bne.n	8006480 <HAL_RCC_OscConfig+0x2d4>
 800644e:	4b74      	ldr	r3, [pc, #464]	; (8006620 <HAL_RCC_OscConfig+0x474>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a73      	ldr	r2, [pc, #460]	; (8006620 <HAL_RCC_OscConfig+0x474>)
 8006454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006458:	6013      	str	r3, [r2, #0]
 800645a:	f7fc fab1 	bl	80029c0 <HAL_GetTick>
 800645e:	6138      	str	r0, [r7, #16]
 8006460:	e008      	b.n	8006474 <HAL_RCC_OscConfig+0x2c8>
 8006462:	f7fc faad 	bl	80029c0 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d901      	bls.n	8006474 <HAL_RCC_OscConfig+0x2c8>
 8006470:	2303      	movs	r3, #3
 8006472:	e10c      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 8006474:	4b6a      	ldr	r3, [pc, #424]	; (8006620 <HAL_RCC_OscConfig+0x474>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0f0      	beq.n	8006462 <HAL_RCC_OscConfig+0x2b6>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d106      	bne.n	8006496 <HAL_RCC_OscConfig+0x2ea>
 8006488:	4b64      	ldr	r3, [pc, #400]	; (800661c <HAL_RCC_OscConfig+0x470>)
 800648a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648c:	4a63      	ldr	r2, [pc, #396]	; (800661c <HAL_RCC_OscConfig+0x470>)
 800648e:	f043 0301 	orr.w	r3, r3, #1
 8006492:	6713      	str	r3, [r2, #112]	; 0x70
 8006494:	e01c      	b.n	80064d0 <HAL_RCC_OscConfig+0x324>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	2b05      	cmp	r3, #5
 800649c:	d10c      	bne.n	80064b8 <HAL_RCC_OscConfig+0x30c>
 800649e:	4b5f      	ldr	r3, [pc, #380]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a2:	4a5e      	ldr	r2, [pc, #376]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064a4:	f043 0304 	orr.w	r3, r3, #4
 80064a8:	6713      	str	r3, [r2, #112]	; 0x70
 80064aa:	4b5c      	ldr	r3, [pc, #368]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ae:	4a5b      	ldr	r2, [pc, #364]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064b0:	f043 0301 	orr.w	r3, r3, #1
 80064b4:	6713      	str	r3, [r2, #112]	; 0x70
 80064b6:	e00b      	b.n	80064d0 <HAL_RCC_OscConfig+0x324>
 80064b8:	4b58      	ldr	r3, [pc, #352]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064bc:	4a57      	ldr	r2, [pc, #348]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064be:	f023 0301 	bic.w	r3, r3, #1
 80064c2:	6713      	str	r3, [r2, #112]	; 0x70
 80064c4:	4b55      	ldr	r3, [pc, #340]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c8:	4a54      	ldr	r2, [pc, #336]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064ca:	f023 0304 	bic.w	r3, r3, #4
 80064ce:	6713      	str	r3, [r2, #112]	; 0x70
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d015      	beq.n	8006504 <HAL_RCC_OscConfig+0x358>
 80064d8:	f7fc fa72 	bl	80029c0 <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]
 80064de:	e00a      	b.n	80064f6 <HAL_RCC_OscConfig+0x34a>
 80064e0:	f7fc fa6e 	bl	80029c0 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x34a>
 80064f2:	2303      	movs	r3, #3
 80064f4:	e0cb      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 80064f6:	4b49      	ldr	r3, [pc, #292]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0ee      	beq.n	80064e0 <HAL_RCC_OscConfig+0x334>
 8006502:	e014      	b.n	800652e <HAL_RCC_OscConfig+0x382>
 8006504:	f7fc fa5c 	bl	80029c0 <HAL_GetTick>
 8006508:	6138      	str	r0, [r7, #16]
 800650a:	e00a      	b.n	8006522 <HAL_RCC_OscConfig+0x376>
 800650c:	f7fc fa58 	bl	80029c0 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	f241 3288 	movw	r2, #5000	; 0x1388
 800651a:	4293      	cmp	r3, r2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x376>
 800651e:	2303      	movs	r3, #3
 8006520:	e0b5      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 8006522:	4b3e      	ldr	r3, [pc, #248]	; (800661c <HAL_RCC_OscConfig+0x470>)
 8006524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1ee      	bne.n	800650c <HAL_RCC_OscConfig+0x360>
 800652e:	7dfb      	ldrb	r3, [r7, #23]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d105      	bne.n	8006540 <HAL_RCC_OscConfig+0x394>
 8006534:	4b39      	ldr	r3, [pc, #228]	; (800661c <HAL_RCC_OscConfig+0x470>)
 8006536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006538:	4a38      	ldr	r2, [pc, #224]	; (800661c <HAL_RCC_OscConfig+0x470>)
 800653a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800653e:	6413      	str	r3, [r2, #64]	; 0x40
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 80a1 	beq.w	800668c <HAL_RCC_OscConfig+0x4e0>
 800654a:	4b34      	ldr	r3, [pc, #208]	; (800661c <HAL_RCC_OscConfig+0x470>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 030c 	and.w	r3, r3, #12
 8006552:	2b08      	cmp	r3, #8
 8006554:	d05c      	beq.n	8006610 <HAL_RCC_OscConfig+0x464>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d141      	bne.n	80065e2 <HAL_RCC_OscConfig+0x436>
 800655e:	4b31      	ldr	r3, [pc, #196]	; (8006624 <HAL_RCC_OscConfig+0x478>)
 8006560:	2200      	movs	r2, #0
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	f7fc fa2c 	bl	80029c0 <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0x3d2>
 800656c:	f7fc fa28 	bl	80029c0 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x3d2>
 800657a:	2303      	movs	r3, #3
 800657c:	e087      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 800657e:	4b27      	ldr	r3, [pc, #156]	; (800661c <HAL_RCC_OscConfig+0x470>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1f0      	bne.n	800656c <HAL_RCC_OscConfig+0x3c0>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69da      	ldr	r2, [r3, #28]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	019b      	lsls	r3, r3, #6
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	3b01      	subs	r3, #1
 80065a4:	041b      	lsls	r3, r3, #16
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	061b      	lsls	r3, r3, #24
 80065ae:	491b      	ldr	r1, [pc, #108]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	604b      	str	r3, [r1, #4]
 80065b4:	4b1b      	ldr	r3, [pc, #108]	; (8006624 <HAL_RCC_OscConfig+0x478>)
 80065b6:	2201      	movs	r2, #1
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	f7fc fa01 	bl	80029c0 <HAL_GetTick>
 80065be:	6138      	str	r0, [r7, #16]
 80065c0:	e008      	b.n	80065d4 <HAL_RCC_OscConfig+0x428>
 80065c2:	f7fc f9fd 	bl	80029c0 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d901      	bls.n	80065d4 <HAL_RCC_OscConfig+0x428>
 80065d0:	2303      	movs	r3, #3
 80065d2:	e05c      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 80065d4:	4b11      	ldr	r3, [pc, #68]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0f0      	beq.n	80065c2 <HAL_RCC_OscConfig+0x416>
 80065e0:	e054      	b.n	800668c <HAL_RCC_OscConfig+0x4e0>
 80065e2:	4b10      	ldr	r3, [pc, #64]	; (8006624 <HAL_RCC_OscConfig+0x478>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	f7fc f9ea 	bl	80029c0 <HAL_GetTick>
 80065ec:	6138      	str	r0, [r7, #16]
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0x456>
 80065f0:	f7fc f9e6 	bl	80029c0 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x456>
 80065fe:	2303      	movs	r3, #3
 8006600:	e045      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 8006602:	4b06      	ldr	r3, [pc, #24]	; (800661c <HAL_RCC_OscConfig+0x470>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1f0      	bne.n	80065f0 <HAL_RCC_OscConfig+0x444>
 800660e:	e03d      	b.n	800668c <HAL_RCC_OscConfig+0x4e0>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d107      	bne.n	8006628 <HAL_RCC_OscConfig+0x47c>
 8006618:	2301      	movs	r3, #1
 800661a:	e038      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 800661c:	40023800 	.word	0x40023800
 8006620:	40007000 	.word	0x40007000
 8006624:	42470060 	.word	0x42470060
 8006628:	4b1b      	ldr	r3, [pc, #108]	; (8006698 <HAL_RCC_OscConfig+0x4ec>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	60fb      	str	r3, [r7, #12]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d028      	beq.n	8006688 <HAL_RCC_OscConfig+0x4dc>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	429a      	cmp	r2, r3
 8006642:	d121      	bne.n	8006688 <HAL_RCC_OscConfig+0x4dc>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	429a      	cmp	r2, r3
 8006650:	d11a      	bne.n	8006688 <HAL_RCC_OscConfig+0x4dc>
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006658:	4013      	ands	r3, r2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800665e:	0192      	lsls	r2, r2, #6
 8006660:	4293      	cmp	r3, r2
 8006662:	d111      	bne.n	8006688 <HAL_RCC_OscConfig+0x4dc>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666e:	085b      	lsrs	r3, r3, #1
 8006670:	3b01      	subs	r3, #1
 8006672:	041b      	lsls	r3, r3, #16
 8006674:	429a      	cmp	r2, r3
 8006676:	d107      	bne.n	8006688 <HAL_RCC_OscConfig+0x4dc>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006682:	061b      	lsls	r3, r3, #24
 8006684:	429a      	cmp	r2, r3
 8006686:	d001      	beq.n	800668c <HAL_RCC_OscConfig+0x4e0>
 8006688:	2301      	movs	r3, #1
 800668a:	e000      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 800668c:	2300      	movs	r3, #0
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	40023800 	.word	0x40023800

0800669c <HAL_RCC_ClockConfig>:
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <HAL_RCC_ClockConfig+0x14>
 80066ac:	2301      	movs	r3, #1
 80066ae:	e0cc      	b.n	800684a <HAL_RCC_ClockConfig+0x1ae>
 80066b0:	4b68      	ldr	r3, [pc, #416]	; (8006854 <HAL_RCC_ClockConfig+0x1b8>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0307 	and.w	r3, r3, #7
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d90c      	bls.n	80066d8 <HAL_RCC_ClockConfig+0x3c>
 80066be:	4b65      	ldr	r3, [pc, #404]	; (8006854 <HAL_RCC_ClockConfig+0x1b8>)
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	4b63      	ldr	r3, [pc, #396]	; (8006854 <HAL_RCC_ClockConfig+0x1b8>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d001      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x3c>
 80066d4:	2301      	movs	r3, #1
 80066d6:	e0b8      	b.n	800684a <HAL_RCC_ClockConfig+0x1ae>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d020      	beq.n	8006726 <HAL_RCC_ClockConfig+0x8a>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <HAL_RCC_ClockConfig+0x60>
 80066f0:	4b59      	ldr	r3, [pc, #356]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	4a58      	ldr	r2, [pc, #352]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 80066f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066fa:	6093      	str	r3, [r2, #8]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <HAL_RCC_ClockConfig+0x78>
 8006708:	4b53      	ldr	r3, [pc, #332]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	4a52      	ldr	r2, [pc, #328]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 800670e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006712:	6093      	str	r3, [r2, #8]
 8006714:	4b50      	ldr	r3, [pc, #320]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	494d      	ldr	r1, [pc, #308]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 8006722:	4313      	orrs	r3, r2
 8006724:	608b      	str	r3, [r1, #8]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d044      	beq.n	80067bc <HAL_RCC_ClockConfig+0x120>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d107      	bne.n	800674a <HAL_RCC_ClockConfig+0xae>
 800673a:	4b47      	ldr	r3, [pc, #284]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d119      	bne.n	800677a <HAL_RCC_ClockConfig+0xde>
 8006746:	2301      	movs	r3, #1
 8006748:	e07f      	b.n	800684a <HAL_RCC_ClockConfig+0x1ae>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d003      	beq.n	800675a <HAL_RCC_ClockConfig+0xbe>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2b03      	cmp	r3, #3
 8006758:	d107      	bne.n	800676a <HAL_RCC_ClockConfig+0xce>
 800675a:	4b3f      	ldr	r3, [pc, #252]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d109      	bne.n	800677a <HAL_RCC_ClockConfig+0xde>
 8006766:	2301      	movs	r3, #1
 8006768:	e06f      	b.n	800684a <HAL_RCC_ClockConfig+0x1ae>
 800676a:	4b3b      	ldr	r3, [pc, #236]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_RCC_ClockConfig+0xde>
 8006776:	2301      	movs	r3, #1
 8006778:	e067      	b.n	800684a <HAL_RCC_ClockConfig+0x1ae>
 800677a:	4b37      	ldr	r3, [pc, #220]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f023 0203 	bic.w	r2, r3, #3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	4934      	ldr	r1, [pc, #208]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 8006788:	4313      	orrs	r3, r2
 800678a:	608b      	str	r3, [r1, #8]
 800678c:	f7fc f918 	bl	80029c0 <HAL_GetTick>
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	e00a      	b.n	80067aa <HAL_RCC_ClockConfig+0x10e>
 8006794:	f7fc f914 	bl	80029c0 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_ClockConfig+0x10e>
 80067a6:	2303      	movs	r3, #3
 80067a8:	e04f      	b.n	800684a <HAL_RCC_ClockConfig+0x1ae>
 80067aa:	4b2b      	ldr	r3, [pc, #172]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 020c 	and.w	r2, r3, #12
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d1eb      	bne.n	8006794 <HAL_RCC_ClockConfig+0xf8>
 80067bc:	4b25      	ldr	r3, [pc, #148]	; (8006854 <HAL_RCC_ClockConfig+0x1b8>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0307 	and.w	r3, r3, #7
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d20c      	bcs.n	80067e4 <HAL_RCC_ClockConfig+0x148>
 80067ca:	4b22      	ldr	r3, [pc, #136]	; (8006854 <HAL_RCC_ClockConfig+0x1b8>)
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	4b20      	ldr	r3, [pc, #128]	; (8006854 <HAL_RCC_ClockConfig+0x1b8>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d001      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x148>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e032      	b.n	800684a <HAL_RCC_ClockConfig+0x1ae>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d008      	beq.n	8006802 <HAL_RCC_ClockConfig+0x166>
 80067f0:	4b19      	ldr	r3, [pc, #100]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	4916      	ldr	r1, [pc, #88]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	608b      	str	r3, [r1, #8]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0308 	and.w	r3, r3, #8
 800680a:	2b00      	cmp	r3, #0
 800680c:	d009      	beq.n	8006822 <HAL_RCC_ClockConfig+0x186>
 800680e:	4b12      	ldr	r3, [pc, #72]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	490e      	ldr	r1, [pc, #56]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 800681e:	4313      	orrs	r3, r2
 8006820:	608b      	str	r3, [r1, #8]
 8006822:	f000 f821 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8006826:	4602      	mov	r2, r0
 8006828:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	091b      	lsrs	r3, r3, #4
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	490a      	ldr	r1, [pc, #40]	; (800685c <HAL_RCC_ClockConfig+0x1c0>)
 8006834:	5ccb      	ldrb	r3, [r1, r3]
 8006836:	fa22 f303 	lsr.w	r3, r2, r3
 800683a:	4a09      	ldr	r2, [pc, #36]	; (8006860 <HAL_RCC_ClockConfig+0x1c4>)
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	4b09      	ldr	r3, [pc, #36]	; (8006864 <HAL_RCC_ClockConfig+0x1c8>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f7fc f878 	bl	8002938 <HAL_InitTick>
 8006848:	2300      	movs	r3, #0
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	40023c00 	.word	0x40023c00
 8006858:	40023800 	.word	0x40023800
 800685c:	0800af88 	.word	0x0800af88
 8006860:	20000098 	.word	0x20000098
 8006864:	2000009c 	.word	0x2000009c

08006868 <HAL_RCC_GetSysClockFreq>:
 8006868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800686c:	b090      	sub	sp, #64	; 0x40
 800686e:	af00      	add	r7, sp, #0
 8006870:	2300      	movs	r3, #0
 8006872:	637b      	str	r3, [r7, #52]	; 0x34
 8006874:	2300      	movs	r3, #0
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006878:	2300      	movs	r3, #0
 800687a:	633b      	str	r3, [r7, #48]	; 0x30
 800687c:	2300      	movs	r3, #0
 800687e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006880:	4b59      	ldr	r3, [pc, #356]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 030c 	and.w	r3, r3, #12
 8006888:	2b08      	cmp	r3, #8
 800688a:	d00d      	beq.n	80068a8 <HAL_RCC_GetSysClockFreq+0x40>
 800688c:	2b08      	cmp	r3, #8
 800688e:	f200 80a1 	bhi.w	80069d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <HAL_RCC_GetSysClockFreq+0x34>
 8006896:	2b04      	cmp	r3, #4
 8006898:	d003      	beq.n	80068a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800689a:	e09b      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0x16c>
 800689c:	4b53      	ldr	r3, [pc, #332]	; (80069ec <HAL_RCC_GetSysClockFreq+0x184>)
 800689e:	63bb      	str	r3, [r7, #56]	; 0x38
 80068a0:	e09b      	b.n	80069da <HAL_RCC_GetSysClockFreq+0x172>
 80068a2:	4b53      	ldr	r3, [pc, #332]	; (80069f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80068a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80068a6:	e098      	b.n	80069da <HAL_RCC_GetSysClockFreq+0x172>
 80068a8:	4b4f      	ldr	r3, [pc, #316]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068b0:	637b      	str	r3, [r7, #52]	; 0x34
 80068b2:	4b4d      	ldr	r3, [pc, #308]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d028      	beq.n	8006910 <HAL_RCC_GetSysClockFreq+0xa8>
 80068be:	4b4a      	ldr	r3, [pc, #296]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	099b      	lsrs	r3, r3, #6
 80068c4:	2200      	movs	r2, #0
 80068c6:	623b      	str	r3, [r7, #32]
 80068c8:	627a      	str	r2, [r7, #36]	; 0x24
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80068d0:	2100      	movs	r1, #0
 80068d2:	4b47      	ldr	r3, [pc, #284]	; (80069f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80068d4:	fb03 f201 	mul.w	r2, r3, r1
 80068d8:	2300      	movs	r3, #0
 80068da:	fb00 f303 	mul.w	r3, r0, r3
 80068de:	4413      	add	r3, r2
 80068e0:	4a43      	ldr	r2, [pc, #268]	; (80069f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80068e2:	fba0 1202 	umull	r1, r2, r0, r2
 80068e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068e8:	460a      	mov	r2, r1
 80068ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80068ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ee:	4413      	add	r3, r2
 80068f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f4:	2200      	movs	r2, #0
 80068f6:	61bb      	str	r3, [r7, #24]
 80068f8:	61fa      	str	r2, [r7, #28]
 80068fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006902:	f7fa f9c9 	bl	8000c98 <__aeabi_uldivmod>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4613      	mov	r3, r2
 800690c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800690e:	e053      	b.n	80069b8 <HAL_RCC_GetSysClockFreq+0x150>
 8006910:	4b35      	ldr	r3, [pc, #212]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	099b      	lsrs	r3, r3, #6
 8006916:	2200      	movs	r2, #0
 8006918:	613b      	str	r3, [r7, #16]
 800691a:	617a      	str	r2, [r7, #20]
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006922:	f04f 0b00 	mov.w	fp, #0
 8006926:	4652      	mov	r2, sl
 8006928:	465b      	mov	r3, fp
 800692a:	f04f 0000 	mov.w	r0, #0
 800692e:	f04f 0100 	mov.w	r1, #0
 8006932:	0159      	lsls	r1, r3, #5
 8006934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006938:	0150      	lsls	r0, r2, #5
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	ebb2 080a 	subs.w	r8, r2, sl
 8006942:	eb63 090b 	sbc.w	r9, r3, fp
 8006946:	f04f 0200 	mov.w	r2, #0
 800694a:	f04f 0300 	mov.w	r3, #0
 800694e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006952:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006956:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800695a:	ebb2 0408 	subs.w	r4, r2, r8
 800695e:	eb63 0509 	sbc.w	r5, r3, r9
 8006962:	f04f 0200 	mov.w	r2, #0
 8006966:	f04f 0300 	mov.w	r3, #0
 800696a:	00eb      	lsls	r3, r5, #3
 800696c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006970:	00e2      	lsls	r2, r4, #3
 8006972:	4614      	mov	r4, r2
 8006974:	461d      	mov	r5, r3
 8006976:	eb14 030a 	adds.w	r3, r4, sl
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	eb45 030b 	adc.w	r3, r5, fp
 8006980:	607b      	str	r3, [r7, #4]
 8006982:	f04f 0200 	mov.w	r2, #0
 8006986:	f04f 0300 	mov.w	r3, #0
 800698a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800698e:	4629      	mov	r1, r5
 8006990:	028b      	lsls	r3, r1, #10
 8006992:	4621      	mov	r1, r4
 8006994:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006998:	4621      	mov	r1, r4
 800699a:	028a      	lsls	r2, r1, #10
 800699c:	4610      	mov	r0, r2
 800699e:	4619      	mov	r1, r3
 80069a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a2:	2200      	movs	r2, #0
 80069a4:	60bb      	str	r3, [r7, #8]
 80069a6:	60fa      	str	r2, [r7, #12]
 80069a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069ac:	f7fa f974 	bl	8000c98 <__aeabi_uldivmod>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	4613      	mov	r3, r2
 80069b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b8:	4b0b      	ldr	r3, [pc, #44]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	0c1b      	lsrs	r3, r3, #16
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	3301      	adds	r3, #1
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	633b      	str	r3, [r7, #48]	; 0x30
 80069c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80069d2:	e002      	b.n	80069da <HAL_RCC_GetSysClockFreq+0x172>
 80069d4:	4b05      	ldr	r3, [pc, #20]	; (80069ec <HAL_RCC_GetSysClockFreq+0x184>)
 80069d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80069d8:	bf00      	nop
 80069da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069dc:	4618      	mov	r0, r3
 80069de:	3740      	adds	r7, #64	; 0x40
 80069e0:	46bd      	mov	sp, r7
 80069e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069e6:	bf00      	nop
 80069e8:	40023800 	.word	0x40023800
 80069ec:	00f42400 	.word	0x00f42400
 80069f0:	017d7840 	.word	0x017d7840

080069f4 <HAL_RCC_GetHCLKFreq>:
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	4b03      	ldr	r3, [pc, #12]	; (8006a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4618      	mov	r0, r3
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	20000098 	.word	0x20000098

08006a0c <HAL_RCC_GetPCLK1Freq>:
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	f7ff fff0 	bl	80069f4 <HAL_RCC_GetHCLKFreq>
 8006a14:	4602      	mov	r2, r0
 8006a16:	4b05      	ldr	r3, [pc, #20]	; (8006a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	0a9b      	lsrs	r3, r3, #10
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	4903      	ldr	r1, [pc, #12]	; (8006a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a22:	5ccb      	ldrb	r3, [r1, r3]
 8006a24:	fa22 f303 	lsr.w	r3, r2, r3
 8006a28:	4618      	mov	r0, r3
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	40023800 	.word	0x40023800
 8006a30:	0800af98 	.word	0x0800af98

08006a34 <HAL_RCC_GetPCLK2Freq>:
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	f7ff ffdc 	bl	80069f4 <HAL_RCC_GetHCLKFreq>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	0b5b      	lsrs	r3, r3, #13
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	4903      	ldr	r1, [pc, #12]	; (8006a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a4a:	5ccb      	ldrb	r3, [r1, r3]
 8006a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a50:	4618      	mov	r0, r3
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	40023800 	.word	0x40023800
 8006a58:	0800af98 	.word	0x0800af98

08006a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e041      	b.n	8006af2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d106      	bne.n	8006a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7fb fd6e 	bl	8002564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3304      	adds	r3, #4
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	f000 ff14 	bl	80078c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
	...

08006afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d001      	beq.n	8006b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e044      	b.n	8006b9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a1e      	ldr	r2, [pc, #120]	; (8006bac <HAL_TIM_Base_Start_IT+0xb0>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d018      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0x6c>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3e:	d013      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0x6c>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a1a      	ldr	r2, [pc, #104]	; (8006bb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00e      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0x6c>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a19      	ldr	r2, [pc, #100]	; (8006bb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d009      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0x6c>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a17      	ldr	r2, [pc, #92]	; (8006bb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d004      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0x6c>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a16      	ldr	r2, [pc, #88]	; (8006bbc <HAL_TIM_Base_Start_IT+0xc0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d111      	bne.n	8006b8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b06      	cmp	r3, #6
 8006b78:	d010      	beq.n	8006b9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0201 	orr.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b8a:	e007      	b.n	8006b9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0201 	orr.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	40010000 	.word	0x40010000
 8006bb0:	40000400 	.word	0x40000400
 8006bb4:	40000800 	.word	0x40000800
 8006bb8:	40000c00 	.word	0x40000c00
 8006bbc:	40014000 	.word	0x40014000

08006bc0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68da      	ldr	r2, [r3, #12]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0201 	bic.w	r2, r2, #1
 8006bd6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6a1a      	ldr	r2, [r3, #32]
 8006bde:	f241 1311 	movw	r3, #4369	; 0x1111
 8006be2:	4013      	ands	r3, r2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10f      	bne.n	8006c08 <HAL_TIM_Base_Stop_IT+0x48>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6a1a      	ldr	r2, [r3, #32]
 8006bee:	f240 4344 	movw	r3, #1092	; 0x444
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d107      	bne.n	8006c08 <HAL_TIM_Base_Stop_IT+0x48>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0201 	bic.w	r2, r2, #1
 8006c06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b082      	sub	sp, #8
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e041      	b.n	8006cb4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d106      	bne.n	8006c4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7fb fd0b 	bl	8002660 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3304      	adds	r3, #4
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	f000 fe33 	bl	80078c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d109      	bne.n	8006ce0 <HAL_TIM_PWM_Start+0x24>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	bf14      	ite	ne
 8006cd8:	2301      	movne	r3, #1
 8006cda:	2300      	moveq	r3, #0
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	e022      	b.n	8006d26 <HAL_TIM_PWM_Start+0x6a>
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	d109      	bne.n	8006cfa <HAL_TIM_PWM_Start+0x3e>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	bf14      	ite	ne
 8006cf2:	2301      	movne	r3, #1
 8006cf4:	2300      	moveq	r3, #0
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	e015      	b.n	8006d26 <HAL_TIM_PWM_Start+0x6a>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d109      	bne.n	8006d14 <HAL_TIM_PWM_Start+0x58>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	bf14      	ite	ne
 8006d0c:	2301      	movne	r3, #1
 8006d0e:	2300      	moveq	r3, #0
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	e008      	b.n	8006d26 <HAL_TIM_PWM_Start+0x6a>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	bf14      	ite	ne
 8006d20:	2301      	movne	r3, #1
 8006d22:	2300      	moveq	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e068      	b.n	8006e00 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <HAL_TIM_PWM_Start+0x82>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d3c:	e013      	b.n	8006d66 <HAL_TIM_PWM_Start+0xaa>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d104      	bne.n	8006d4e <HAL_TIM_PWM_Start+0x92>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d4c:	e00b      	b.n	8006d66 <HAL_TIM_PWM_Start+0xaa>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d104      	bne.n	8006d5e <HAL_TIM_PWM_Start+0xa2>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d5c:	e003      	b.n	8006d66 <HAL_TIM_PWM_Start+0xaa>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2202      	movs	r2, #2
 8006d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f001 f9e5 	bl	800813e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a23      	ldr	r2, [pc, #140]	; (8006e08 <HAL_TIM_PWM_Start+0x14c>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d107      	bne.n	8006d8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1d      	ldr	r2, [pc, #116]	; (8006e08 <HAL_TIM_PWM_Start+0x14c>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d018      	beq.n	8006dca <HAL_TIM_PWM_Start+0x10e>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da0:	d013      	beq.n	8006dca <HAL_TIM_PWM_Start+0x10e>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a19      	ldr	r2, [pc, #100]	; (8006e0c <HAL_TIM_PWM_Start+0x150>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00e      	beq.n	8006dca <HAL_TIM_PWM_Start+0x10e>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a17      	ldr	r2, [pc, #92]	; (8006e10 <HAL_TIM_PWM_Start+0x154>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d009      	beq.n	8006dca <HAL_TIM_PWM_Start+0x10e>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a16      	ldr	r2, [pc, #88]	; (8006e14 <HAL_TIM_PWM_Start+0x158>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d004      	beq.n	8006dca <HAL_TIM_PWM_Start+0x10e>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a14      	ldr	r2, [pc, #80]	; (8006e18 <HAL_TIM_PWM_Start+0x15c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d111      	bne.n	8006dee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f003 0307 	and.w	r3, r3, #7
 8006dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2b06      	cmp	r3, #6
 8006dda:	d010      	beq.n	8006dfe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0201 	orr.w	r2, r2, #1
 8006dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dec:	e007      	b.n	8006dfe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f042 0201 	orr.w	r2, r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	40010000 	.word	0x40010000
 8006e0c:	40000400 	.word	0x40000400
 8006e10:	40000800 	.word	0x40000800
 8006e14:	40000c00 	.word	0x40000c00
 8006e18:	40014000 	.word	0x40014000

08006e1c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f001 f985 	bl	800813e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a29      	ldr	r2, [pc, #164]	; (8006ee0 <HAL_TIM_PWM_Stop+0xc4>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d117      	bne.n	8006e6e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6a1a      	ldr	r2, [r3, #32]
 8006e44:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e48:	4013      	ands	r3, r2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10f      	bne.n	8006e6e <HAL_TIM_PWM_Stop+0x52>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6a1a      	ldr	r2, [r3, #32]
 8006e54:	f240 4344 	movw	r3, #1092	; 0x444
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d107      	bne.n	8006e6e <HAL_TIM_PWM_Stop+0x52>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6a1a      	ldr	r2, [r3, #32]
 8006e74:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e78:	4013      	ands	r3, r2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10f      	bne.n	8006e9e <HAL_TIM_PWM_Stop+0x82>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6a1a      	ldr	r2, [r3, #32]
 8006e84:	f240 4344 	movw	r3, #1092	; 0x444
 8006e88:	4013      	ands	r3, r2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d107      	bne.n	8006e9e <HAL_TIM_PWM_Stop+0x82>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0201 	bic.w	r2, r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <HAL_TIM_PWM_Stop+0x92>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eac:	e013      	b.n	8006ed6 <HAL_TIM_PWM_Stop+0xba>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d104      	bne.n	8006ebe <HAL_TIM_PWM_Stop+0xa2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ebc:	e00b      	b.n	8006ed6 <HAL_TIM_PWM_Stop+0xba>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d104      	bne.n	8006ece <HAL_TIM_PWM_Stop+0xb2>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ecc:	e003      	b.n	8006ed6 <HAL_TIM_PWM_Stop+0xba>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40010000 	.word	0x40010000

08006ee4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e041      	b.n	8006f7a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d106      	bne.n	8006f10 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7fb fbe6 	bl	80026dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	4619      	mov	r1, r3
 8006f22:	4610      	mov	r0, r2
 8006f24:	f000 fcd0 	bl	80078c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d104      	bne.n	8006fa2 <HAL_TIM_IC_Start_IT+0x1e>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	e013      	b.n	8006fca <HAL_TIM_IC_Start_IT+0x46>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d104      	bne.n	8006fb2 <HAL_TIM_IC_Start_IT+0x2e>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	e00b      	b.n	8006fca <HAL_TIM_IC_Start_IT+0x46>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b08      	cmp	r3, #8
 8006fb6:	d104      	bne.n	8006fc2 <HAL_TIM_IC_Start_IT+0x3e>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	e003      	b.n	8006fca <HAL_TIM_IC_Start_IT+0x46>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d104      	bne.n	8006fdc <HAL_TIM_IC_Start_IT+0x58>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	e013      	b.n	8007004 <HAL_TIM_IC_Start_IT+0x80>
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d104      	bne.n	8006fec <HAL_TIM_IC_Start_IT+0x68>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	e00b      	b.n	8007004 <HAL_TIM_IC_Start_IT+0x80>
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	2b08      	cmp	r3, #8
 8006ff0:	d104      	bne.n	8006ffc <HAL_TIM_IC_Start_IT+0x78>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	e003      	b.n	8007004 <HAL_TIM_IC_Start_IT+0x80>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007002:	b2db      	uxtb	r3, r3
 8007004:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d102      	bne.n	8007012 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800700c:	7b7b      	ldrb	r3, [r7, #13]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d001      	beq.n	8007016 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e0c2      	b.n	800719c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d104      	bne.n	8007026 <HAL_TIM_IC_Start_IT+0xa2>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007024:	e013      	b.n	800704e <HAL_TIM_IC_Start_IT+0xca>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b04      	cmp	r3, #4
 800702a:	d104      	bne.n	8007036 <HAL_TIM_IC_Start_IT+0xb2>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007034:	e00b      	b.n	800704e <HAL_TIM_IC_Start_IT+0xca>
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b08      	cmp	r3, #8
 800703a:	d104      	bne.n	8007046 <HAL_TIM_IC_Start_IT+0xc2>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007044:	e003      	b.n	800704e <HAL_TIM_IC_Start_IT+0xca>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2202      	movs	r2, #2
 800704a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d104      	bne.n	800705e <HAL_TIM_IC_Start_IT+0xda>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800705c:	e013      	b.n	8007086 <HAL_TIM_IC_Start_IT+0x102>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b04      	cmp	r3, #4
 8007062:	d104      	bne.n	800706e <HAL_TIM_IC_Start_IT+0xea>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800706c:	e00b      	b.n	8007086 <HAL_TIM_IC_Start_IT+0x102>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b08      	cmp	r3, #8
 8007072:	d104      	bne.n	800707e <HAL_TIM_IC_Start_IT+0xfa>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800707c:	e003      	b.n	8007086 <HAL_TIM_IC_Start_IT+0x102>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2202      	movs	r2, #2
 8007082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b0c      	cmp	r3, #12
 800708a:	d841      	bhi.n	8007110 <HAL_TIM_IC_Start_IT+0x18c>
 800708c:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <HAL_TIM_IC_Start_IT+0x110>)
 800708e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007092:	bf00      	nop
 8007094:	080070c9 	.word	0x080070c9
 8007098:	08007111 	.word	0x08007111
 800709c:	08007111 	.word	0x08007111
 80070a0:	08007111 	.word	0x08007111
 80070a4:	080070db 	.word	0x080070db
 80070a8:	08007111 	.word	0x08007111
 80070ac:	08007111 	.word	0x08007111
 80070b0:	08007111 	.word	0x08007111
 80070b4:	080070ed 	.word	0x080070ed
 80070b8:	08007111 	.word	0x08007111
 80070bc:	08007111 	.word	0x08007111
 80070c0:	08007111 	.word	0x08007111
 80070c4:	080070ff 	.word	0x080070ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f042 0202 	orr.w	r2, r2, #2
 80070d6:	60da      	str	r2, [r3, #12]
      break;
 80070d8:	e01d      	b.n	8007116 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f042 0204 	orr.w	r2, r2, #4
 80070e8:	60da      	str	r2, [r3, #12]
      break;
 80070ea:	e014      	b.n	8007116 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0208 	orr.w	r2, r2, #8
 80070fa:	60da      	str	r2, [r3, #12]
      break;
 80070fc:	e00b      	b.n	8007116 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68da      	ldr	r2, [r3, #12]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f042 0210 	orr.w	r2, r2, #16
 800710c:	60da      	str	r2, [r3, #12]
      break;
 800710e:	e002      	b.n	8007116 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	73fb      	strb	r3, [r7, #15]
      break;
 8007114:	bf00      	nop
  }

  if (status == HAL_OK)
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d13e      	bne.n	800719a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2201      	movs	r2, #1
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	4618      	mov	r0, r3
 8007126:	f001 f80a 	bl	800813e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a1d      	ldr	r2, [pc, #116]	; (80071a4 <HAL_TIM_IC_Start_IT+0x220>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d018      	beq.n	8007166 <HAL_TIM_IC_Start_IT+0x1e2>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800713c:	d013      	beq.n	8007166 <HAL_TIM_IC_Start_IT+0x1e2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a19      	ldr	r2, [pc, #100]	; (80071a8 <HAL_TIM_IC_Start_IT+0x224>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d00e      	beq.n	8007166 <HAL_TIM_IC_Start_IT+0x1e2>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a17      	ldr	r2, [pc, #92]	; (80071ac <HAL_TIM_IC_Start_IT+0x228>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d009      	beq.n	8007166 <HAL_TIM_IC_Start_IT+0x1e2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a16      	ldr	r2, [pc, #88]	; (80071b0 <HAL_TIM_IC_Start_IT+0x22c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d004      	beq.n	8007166 <HAL_TIM_IC_Start_IT+0x1e2>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a14      	ldr	r2, [pc, #80]	; (80071b4 <HAL_TIM_IC_Start_IT+0x230>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d111      	bne.n	800718a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f003 0307 	and.w	r3, r3, #7
 8007170:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2b06      	cmp	r3, #6
 8007176:	d010      	beq.n	800719a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f042 0201 	orr.w	r2, r2, #1
 8007186:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007188:	e007      	b.n	800719a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f042 0201 	orr.w	r2, r2, #1
 8007198:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800719a:	7bfb      	ldrb	r3, [r7, #15]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	40010000 	.word	0x40010000
 80071a8:	40000400 	.word	0x40000400
 80071ac:	40000800 	.word	0x40000800
 80071b0:	40000c00 	.word	0x40000c00
 80071b4:	40014000 	.word	0x40014000

080071b8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b0c      	cmp	r3, #12
 80071ca:	d841      	bhi.n	8007250 <HAL_TIM_IC_Stop_IT+0x98>
 80071cc:	a201      	add	r2, pc, #4	; (adr r2, 80071d4 <HAL_TIM_IC_Stop_IT+0x1c>)
 80071ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d2:	bf00      	nop
 80071d4:	08007209 	.word	0x08007209
 80071d8:	08007251 	.word	0x08007251
 80071dc:	08007251 	.word	0x08007251
 80071e0:	08007251 	.word	0x08007251
 80071e4:	0800721b 	.word	0x0800721b
 80071e8:	08007251 	.word	0x08007251
 80071ec:	08007251 	.word	0x08007251
 80071f0:	08007251 	.word	0x08007251
 80071f4:	0800722d 	.word	0x0800722d
 80071f8:	08007251 	.word	0x08007251
 80071fc:	08007251 	.word	0x08007251
 8007200:	08007251 	.word	0x08007251
 8007204:	0800723f 	.word	0x0800723f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0202 	bic.w	r2, r2, #2
 8007216:	60da      	str	r2, [r3, #12]
      break;
 8007218:	e01d      	b.n	8007256 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68da      	ldr	r2, [r3, #12]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0204 	bic.w	r2, r2, #4
 8007228:	60da      	str	r2, [r3, #12]
      break;
 800722a:	e014      	b.n	8007256 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0208 	bic.w	r2, r2, #8
 800723a:	60da      	str	r2, [r3, #12]
      break;
 800723c:	e00b      	b.n	8007256 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 0210 	bic.w	r2, r2, #16
 800724c:	60da      	str	r2, [r3, #12]
      break;
 800724e:	e002      	b.n	8007256 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	73fb      	strb	r3, [r7, #15]
      break;
 8007254:	bf00      	nop
  }

  if (status == HAL_OK)
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d156      	bne.n	800730a <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2200      	movs	r2, #0
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	4618      	mov	r0, r3
 8007266:	f000 ff6a 	bl	800813e <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6a1a      	ldr	r2, [r3, #32]
 8007270:	f241 1311 	movw	r3, #4369	; 0x1111
 8007274:	4013      	ands	r3, r2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10f      	bne.n	800729a <HAL_TIM_IC_Stop_IT+0xe2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6a1a      	ldr	r2, [r3, #32]
 8007280:	f240 4344 	movw	r3, #1092	; 0x444
 8007284:	4013      	ands	r3, r2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d107      	bne.n	800729a <HAL_TIM_IC_Stop_IT+0xe2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0201 	bic.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d104      	bne.n	80072aa <HAL_TIM_IC_Stop_IT+0xf2>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072a8:	e013      	b.n	80072d2 <HAL_TIM_IC_Stop_IT+0x11a>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d104      	bne.n	80072ba <HAL_TIM_IC_Stop_IT+0x102>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072b8:	e00b      	b.n	80072d2 <HAL_TIM_IC_Stop_IT+0x11a>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d104      	bne.n	80072ca <HAL_TIM_IC_Stop_IT+0x112>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072c8:	e003      	b.n	80072d2 <HAL_TIM_IC_Stop_IT+0x11a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d104      	bne.n	80072e2 <HAL_TIM_IC_Stop_IT+0x12a>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072e0:	e013      	b.n	800730a <HAL_TIM_IC_Stop_IT+0x152>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d104      	bne.n	80072f2 <HAL_TIM_IC_Stop_IT+0x13a>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072f0:	e00b      	b.n	800730a <HAL_TIM_IC_Stop_IT+0x152>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d104      	bne.n	8007302 <HAL_TIM_IC_Stop_IT+0x14a>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007300:	e003      	b.n	800730a <HAL_TIM_IC_Stop_IT+0x152>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 800730a:	7bfb      	ldrb	r3, [r7, #15]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b02      	cmp	r3, #2
 8007328:	d122      	bne.n	8007370 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b02      	cmp	r3, #2
 8007336:	d11b      	bne.n	8007370 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f06f 0202 	mvn.w	r2, #2
 8007340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	f003 0303 	and.w	r3, r3, #3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fa98 	bl	800788c <HAL_TIM_IC_CaptureCallback>
 800735c:	e005      	b.n	800736a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fa8a 	bl	8007878 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fa9b 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	2b04      	cmp	r3, #4
 800737c:	d122      	bne.n	80073c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b04      	cmp	r3, #4
 800738a:	d11b      	bne.n	80073c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f06f 0204 	mvn.w	r2, #4
 8007394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2202      	movs	r2, #2
 800739a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fa6e 	bl	800788c <HAL_TIM_IC_CaptureCallback>
 80073b0:	e005      	b.n	80073be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fa60 	bl	8007878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fa71 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	f003 0308 	and.w	r3, r3, #8
 80073ce:	2b08      	cmp	r3, #8
 80073d0:	d122      	bne.n	8007418 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f003 0308 	and.w	r3, r3, #8
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d11b      	bne.n	8007418 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f06f 0208 	mvn.w	r2, #8
 80073e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2204      	movs	r2, #4
 80073ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fa44 	bl	800788c <HAL_TIM_IC_CaptureCallback>
 8007404:	e005      	b.n	8007412 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fa36 	bl	8007878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fa47 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	f003 0310 	and.w	r3, r3, #16
 8007422:	2b10      	cmp	r3, #16
 8007424:	d122      	bne.n	800746c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f003 0310 	and.w	r3, r3, #16
 8007430:	2b10      	cmp	r3, #16
 8007432:	d11b      	bne.n	800746c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f06f 0210 	mvn.w	r2, #16
 800743c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2208      	movs	r2, #8
 8007442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fa1a 	bl	800788c <HAL_TIM_IC_CaptureCallback>
 8007458:	e005      	b.n	8007466 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fa0c 	bl	8007878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fa1d 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b01      	cmp	r3, #1
 8007478:	d10e      	bne.n	8007498 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	2b01      	cmp	r3, #1
 8007486:	d107      	bne.n	8007498 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f06f 0201 	mvn.w	r2, #1
 8007490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f9e6 	bl	8007864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a2:	2b80      	cmp	r3, #128	; 0x80
 80074a4:	d10e      	bne.n	80074c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b0:	2b80      	cmp	r3, #128	; 0x80
 80074b2:	d107      	bne.n	80074c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f001 f88e 	bl	80085e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ce:	2b40      	cmp	r3, #64	; 0x40
 80074d0:	d10e      	bne.n	80074f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074dc:	2b40      	cmp	r3, #64	; 0x40
 80074de:	d107      	bne.n	80074f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f9e2 	bl	80078b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	f003 0320 	and.w	r3, r3, #32
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	d10e      	bne.n	800751c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f003 0320 	and.w	r3, r3, #32
 8007508:	2b20      	cmp	r3, #32
 800750a:	d107      	bne.n	800751c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f06f 0220 	mvn.w	r2, #32
 8007514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f001 f858 	bl	80085cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800751c:	bf00      	nop
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007530:	2300      	movs	r3, #0
 8007532:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800753a:	2b01      	cmp	r3, #1
 800753c:	d101      	bne.n	8007542 <HAL_TIM_IC_ConfigChannel+0x1e>
 800753e:	2302      	movs	r3, #2
 8007540:	e088      	b.n	8007654 <HAL_TIM_IC_ConfigChannel+0x130>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d11b      	bne.n	8007588 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6818      	ldr	r0, [r3, #0]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	6819      	ldr	r1, [r3, #0]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f000 fc50 	bl	8007e04 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	699a      	ldr	r2, [r3, #24]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 020c 	bic.w	r2, r2, #12
 8007572:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6999      	ldr	r1, [r3, #24]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	689a      	ldr	r2, [r3, #8]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	619a      	str	r2, [r3, #24]
 8007586:	e060      	b.n	800764a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b04      	cmp	r3, #4
 800758c:	d11c      	bne.n	80075c8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6818      	ldr	r0, [r3, #0]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	6819      	ldr	r1, [r3, #0]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	f000 fcc8 	bl	8007f32 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	699a      	ldr	r2, [r3, #24]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80075b0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6999      	ldr	r1, [r3, #24]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	021a      	lsls	r2, r3, #8
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	619a      	str	r2, [r3, #24]
 80075c6:	e040      	b.n	800764a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b08      	cmp	r3, #8
 80075cc:	d11b      	bne.n	8007606 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	6819      	ldr	r1, [r3, #0]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	f000 fd15 	bl	800800c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	69da      	ldr	r2, [r3, #28]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f022 020c 	bic.w	r2, r2, #12
 80075f0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	69d9      	ldr	r1, [r3, #28]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	61da      	str	r2, [r3, #28]
 8007604:	e021      	b.n	800764a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b0c      	cmp	r3, #12
 800760a:	d11c      	bne.n	8007646 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6818      	ldr	r0, [r3, #0]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	6819      	ldr	r1, [r3, #0]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f000 fd32 	bl	8008084 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	69da      	ldr	r2, [r3, #28]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800762e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	69d9      	ldr	r1, [r3, #28]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	021a      	lsls	r2, r3, #8
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	61da      	str	r2, [r3, #28]
 8007644:	e001      	b.n	800764a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007652:	7dfb      	ldrb	r3, [r7, #23]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007672:	2b01      	cmp	r3, #1
 8007674:	d101      	bne.n	800767a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007676:	2302      	movs	r3, #2
 8007678:	e0ae      	b.n	80077d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2b0c      	cmp	r3, #12
 8007686:	f200 809f 	bhi.w	80077c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800768a:	a201      	add	r2, pc, #4	; (adr r2, 8007690 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	080076c5 	.word	0x080076c5
 8007694:	080077c9 	.word	0x080077c9
 8007698:	080077c9 	.word	0x080077c9
 800769c:	080077c9 	.word	0x080077c9
 80076a0:	08007705 	.word	0x08007705
 80076a4:	080077c9 	.word	0x080077c9
 80076a8:	080077c9 	.word	0x080077c9
 80076ac:	080077c9 	.word	0x080077c9
 80076b0:	08007747 	.word	0x08007747
 80076b4:	080077c9 	.word	0x080077c9
 80076b8:	080077c9 	.word	0x080077c9
 80076bc:	080077c9 	.word	0x080077c9
 80076c0:	08007787 	.word	0x08007787
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68b9      	ldr	r1, [r7, #8]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 f97c 	bl	80079c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	699a      	ldr	r2, [r3, #24]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f042 0208 	orr.w	r2, r2, #8
 80076de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699a      	ldr	r2, [r3, #24]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0204 	bic.w	r2, r2, #4
 80076ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6999      	ldr	r1, [r3, #24]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	691a      	ldr	r2, [r3, #16]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	619a      	str	r2, [r3, #24]
      break;
 8007702:	e064      	b.n	80077ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68b9      	ldr	r1, [r7, #8]
 800770a:	4618      	mov	r0, r3
 800770c:	f000 f9c2 	bl	8007a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699a      	ldr	r2, [r3, #24]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800771e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699a      	ldr	r2, [r3, #24]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800772e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6999      	ldr	r1, [r3, #24]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	021a      	lsls	r2, r3, #8
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	619a      	str	r2, [r3, #24]
      break;
 8007744:	e043      	b.n	80077ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68b9      	ldr	r1, [r7, #8]
 800774c:	4618      	mov	r0, r3
 800774e:	f000 fa0d 	bl	8007b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69da      	ldr	r2, [r3, #28]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f042 0208 	orr.w	r2, r2, #8
 8007760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	69da      	ldr	r2, [r3, #28]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f022 0204 	bic.w	r2, r2, #4
 8007770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	69d9      	ldr	r1, [r3, #28]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	430a      	orrs	r2, r1
 8007782:	61da      	str	r2, [r3, #28]
      break;
 8007784:	e023      	b.n	80077ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68b9      	ldr	r1, [r7, #8]
 800778c:	4618      	mov	r0, r3
 800778e:	f000 fa57 	bl	8007c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	69da      	ldr	r2, [r3, #28]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	69da      	ldr	r2, [r3, #28]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	69d9      	ldr	r1, [r3, #28]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	021a      	lsls	r2, r3, #8
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	61da      	str	r2, [r3, #28]
      break;
 80077c6:	e002      	b.n	80077ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	75fb      	strb	r3, [r7, #23]
      break;
 80077cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d101      	bne.n	80077f8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80077f4:	2302      	movs	r3, #2
 80077f6:	e031      	b.n	800785c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fa68 	bl	8007ce0 <TIM_SlaveTimer_SetConfig>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d009      	beq.n	800782a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e018      	b.n	800785c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007838:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68da      	ldr	r2, [r3, #12]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007848:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a34      	ldr	r2, [pc, #208]	; (80079ac <TIM_Base_SetConfig+0xe4>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d00f      	beq.n	8007900 <TIM_Base_SetConfig+0x38>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e6:	d00b      	beq.n	8007900 <TIM_Base_SetConfig+0x38>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a31      	ldr	r2, [pc, #196]	; (80079b0 <TIM_Base_SetConfig+0xe8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d007      	beq.n	8007900 <TIM_Base_SetConfig+0x38>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a30      	ldr	r2, [pc, #192]	; (80079b4 <TIM_Base_SetConfig+0xec>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d003      	beq.n	8007900 <TIM_Base_SetConfig+0x38>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a2f      	ldr	r2, [pc, #188]	; (80079b8 <TIM_Base_SetConfig+0xf0>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d108      	bne.n	8007912 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a25      	ldr	r2, [pc, #148]	; (80079ac <TIM_Base_SetConfig+0xe4>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d01b      	beq.n	8007952 <TIM_Base_SetConfig+0x8a>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007920:	d017      	beq.n	8007952 <TIM_Base_SetConfig+0x8a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a22      	ldr	r2, [pc, #136]	; (80079b0 <TIM_Base_SetConfig+0xe8>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d013      	beq.n	8007952 <TIM_Base_SetConfig+0x8a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a21      	ldr	r2, [pc, #132]	; (80079b4 <TIM_Base_SetConfig+0xec>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d00f      	beq.n	8007952 <TIM_Base_SetConfig+0x8a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a20      	ldr	r2, [pc, #128]	; (80079b8 <TIM_Base_SetConfig+0xf0>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00b      	beq.n	8007952 <TIM_Base_SetConfig+0x8a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a1f      	ldr	r2, [pc, #124]	; (80079bc <TIM_Base_SetConfig+0xf4>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d007      	beq.n	8007952 <TIM_Base_SetConfig+0x8a>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a1e      	ldr	r2, [pc, #120]	; (80079c0 <TIM_Base_SetConfig+0xf8>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d003      	beq.n	8007952 <TIM_Base_SetConfig+0x8a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a1d      	ldr	r2, [pc, #116]	; (80079c4 <TIM_Base_SetConfig+0xfc>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d108      	bne.n	8007964 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a08      	ldr	r2, [pc, #32]	; (80079ac <TIM_Base_SetConfig+0xe4>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d103      	bne.n	8007998 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	691a      	ldr	r2, [r3, #16]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	615a      	str	r2, [r3, #20]
}
 800799e:	bf00      	nop
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	40010000 	.word	0x40010000
 80079b0:	40000400 	.word	0x40000400
 80079b4:	40000800 	.word	0x40000800
 80079b8:	40000c00 	.word	0x40000c00
 80079bc:	40014000 	.word	0x40014000
 80079c0:	40014400 	.word	0x40014400
 80079c4:	40014800 	.word	0x40014800

080079c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	f023 0201 	bic.w	r2, r3, #1
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 0303 	bic.w	r3, r3, #3
 80079fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f023 0302 	bic.w	r3, r3, #2
 8007a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a1c      	ldr	r2, [pc, #112]	; (8007a90 <TIM_OC1_SetConfig+0xc8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d10c      	bne.n	8007a3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f023 0308 	bic.w	r3, r3, #8
 8007a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f023 0304 	bic.w	r3, r3, #4
 8007a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a13      	ldr	r2, [pc, #76]	; (8007a90 <TIM_OC1_SetConfig+0xc8>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d111      	bne.n	8007a6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	621a      	str	r2, [r3, #32]
}
 8007a84:	bf00      	nop
 8007a86:	371c      	adds	r7, #28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	40010000 	.word	0x40010000

08007a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	f023 0210 	bic.w	r2, r3, #16
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	021b      	lsls	r3, r3, #8
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f023 0320 	bic.w	r3, r3, #32
 8007ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a1e      	ldr	r2, [pc, #120]	; (8007b68 <TIM_OC2_SetConfig+0xd4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d10d      	bne.n	8007b10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	011b      	lsls	r3, r3, #4
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a15      	ldr	r2, [pc, #84]	; (8007b68 <TIM_OC2_SetConfig+0xd4>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d113      	bne.n	8007b40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	621a      	str	r2, [r3, #32]
}
 8007b5a:	bf00      	nop
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	40010000 	.word	0x40010000

08007b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0303 	bic.w	r3, r3, #3
 8007ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	021b      	lsls	r3, r3, #8
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a1d      	ldr	r2, [pc, #116]	; (8007c3c <TIM_OC3_SetConfig+0xd0>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d10d      	bne.n	8007be6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a14      	ldr	r2, [pc, #80]	; (8007c3c <TIM_OC3_SetConfig+0xd0>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d113      	bne.n	8007c16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	621a      	str	r2, [r3, #32]
}
 8007c30:	bf00      	nop
 8007c32:	371c      	adds	r7, #28
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	40010000 	.word	0x40010000

08007c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b087      	sub	sp, #28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	021b      	lsls	r3, r3, #8
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	031b      	lsls	r3, r3, #12
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a10      	ldr	r2, [pc, #64]	; (8007cdc <TIM_OC4_SetConfig+0x9c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d109      	bne.n	8007cb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	019b      	lsls	r3, r3, #6
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	621a      	str	r2, [r3, #32]
}
 8007cce:	bf00      	nop
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	40010000 	.word	0x40010000

08007ce0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cfc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f023 0307 	bic.w	r3, r3, #7
 8007d0e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	2b70      	cmp	r3, #112	; 0x70
 8007d28:	d01a      	beq.n	8007d60 <TIM_SlaveTimer_SetConfig+0x80>
 8007d2a:	2b70      	cmp	r3, #112	; 0x70
 8007d2c:	d860      	bhi.n	8007df0 <TIM_SlaveTimer_SetConfig+0x110>
 8007d2e:	2b60      	cmp	r3, #96	; 0x60
 8007d30:	d054      	beq.n	8007ddc <TIM_SlaveTimer_SetConfig+0xfc>
 8007d32:	2b60      	cmp	r3, #96	; 0x60
 8007d34:	d85c      	bhi.n	8007df0 <TIM_SlaveTimer_SetConfig+0x110>
 8007d36:	2b50      	cmp	r3, #80	; 0x50
 8007d38:	d046      	beq.n	8007dc8 <TIM_SlaveTimer_SetConfig+0xe8>
 8007d3a:	2b50      	cmp	r3, #80	; 0x50
 8007d3c:	d858      	bhi.n	8007df0 <TIM_SlaveTimer_SetConfig+0x110>
 8007d3e:	2b40      	cmp	r3, #64	; 0x40
 8007d40:	d019      	beq.n	8007d76 <TIM_SlaveTimer_SetConfig+0x96>
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d854      	bhi.n	8007df0 <TIM_SlaveTimer_SetConfig+0x110>
 8007d46:	2b30      	cmp	r3, #48	; 0x30
 8007d48:	d055      	beq.n	8007df6 <TIM_SlaveTimer_SetConfig+0x116>
 8007d4a:	2b30      	cmp	r3, #48	; 0x30
 8007d4c:	d850      	bhi.n	8007df0 <TIM_SlaveTimer_SetConfig+0x110>
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	d051      	beq.n	8007df6 <TIM_SlaveTimer_SetConfig+0x116>
 8007d52:	2b20      	cmp	r3, #32
 8007d54:	d84c      	bhi.n	8007df0 <TIM_SlaveTimer_SetConfig+0x110>
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d04d      	beq.n	8007df6 <TIM_SlaveTimer_SetConfig+0x116>
 8007d5a:	2b10      	cmp	r3, #16
 8007d5c:	d04b      	beq.n	8007df6 <TIM_SlaveTimer_SetConfig+0x116>
 8007d5e:	e047      	b.n	8007df0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6818      	ldr	r0, [r3, #0]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	68d9      	ldr	r1, [r3, #12]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	689a      	ldr	r2, [r3, #8]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	f000 f9c5 	bl	80080fe <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007d74:	e040      	b.n	8007df8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	d101      	bne.n	8007d82 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e03b      	b.n	8007dfa <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	6a1a      	ldr	r2, [r3, #32]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f022 0201 	bic.w	r2, r2, #1
 8007d98:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007da8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	621a      	str	r2, [r3, #32]
      break;
 8007dc6:	e017      	b.n	8007df8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6818      	ldr	r0, [r3, #0]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	6899      	ldr	r1, [r3, #8]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	f000 f87d 	bl	8007ed4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007dda:	e00d      	b.n	8007df8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6818      	ldr	r0, [r3, #0]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	6899      	ldr	r1, [r3, #8]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	461a      	mov	r2, r3
 8007dea:	f000 f8df 	bl	8007fac <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007dee:	e003      	b.n	8007df8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	75fb      	strb	r3, [r7, #23]
      break;
 8007df4:	e000      	b.n	8007df8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007df6:	bf00      	nop
  }

  return status;
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	f023 0201 	bic.w	r2, r3, #1
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4a24      	ldr	r2, [pc, #144]	; (8007ec0 <TIM_TI1_SetConfig+0xbc>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d013      	beq.n	8007e5a <TIM_TI1_SetConfig+0x56>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e38:	d00f      	beq.n	8007e5a <TIM_TI1_SetConfig+0x56>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4a21      	ldr	r2, [pc, #132]	; (8007ec4 <TIM_TI1_SetConfig+0xc0>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00b      	beq.n	8007e5a <TIM_TI1_SetConfig+0x56>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4a20      	ldr	r2, [pc, #128]	; (8007ec8 <TIM_TI1_SetConfig+0xc4>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d007      	beq.n	8007e5a <TIM_TI1_SetConfig+0x56>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4a1f      	ldr	r2, [pc, #124]	; (8007ecc <TIM_TI1_SetConfig+0xc8>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d003      	beq.n	8007e5a <TIM_TI1_SetConfig+0x56>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4a1e      	ldr	r2, [pc, #120]	; (8007ed0 <TIM_TI1_SetConfig+0xcc>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d101      	bne.n	8007e5e <TIM_TI1_SetConfig+0x5a>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e000      	b.n	8007e60 <TIM_TI1_SetConfig+0x5c>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d008      	beq.n	8007e76 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f023 0303 	bic.w	r3, r3, #3
 8007e6a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	e003      	b.n	8007e7e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f043 0301 	orr.w	r3, r3, #1
 8007e7c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	011b      	lsls	r3, r3, #4
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	f023 030a 	bic.w	r3, r3, #10
 8007e98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f003 030a 	and.w	r3, r3, #10
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	621a      	str	r2, [r3, #32]
}
 8007eb2:	bf00      	nop
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	40010000 	.word	0x40010000
 8007ec4:	40000400 	.word	0x40000400
 8007ec8:	40000800 	.word	0x40000800
 8007ecc:	40000c00 	.word	0x40000c00
 8007ed0:	40014000 	.word	0x40014000

08007ed4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	f023 0201 	bic.w	r2, r3, #1
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f023 030a 	bic.w	r3, r3, #10
 8007f10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	621a      	str	r2, [r3, #32]
}
 8007f26:	bf00      	nop
 8007f28:	371c      	adds	r7, #28
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b087      	sub	sp, #28
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	607a      	str	r2, [r7, #4]
 8007f3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	f023 0210 	bic.w	r2, r3, #16
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	021b      	lsls	r3, r3, #8
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	031b      	lsls	r3, r3, #12
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	011b      	lsls	r3, r3, #4
 8007f8a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	621a      	str	r2, [r3, #32]
}
 8007fa0:	bf00      	nop
 8007fa2:	371c      	adds	r7, #28
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6a1b      	ldr	r3, [r3, #32]
 8007fbc:	f023 0210 	bic.w	r2, r3, #16
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	031b      	lsls	r3, r3, #12
 8007fdc:	697a      	ldr	r2, [r7, #20]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fe8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	011b      	lsls	r3, r3, #4
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	621a      	str	r2, [r3, #32]
}
 8008000:	bf00      	nop
 8008002:	371c      	adds	r7, #28
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800800c:	b480      	push	{r7}
 800800e:	b087      	sub	sp, #28
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
 8008018:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a1b      	ldr	r3, [r3, #32]
 8008030:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f023 0303 	bic.w	r3, r3, #3
 8008038:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4313      	orrs	r3, r2
 8008040:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008048:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	011b      	lsls	r3, r3, #4
 800804e:	b2db      	uxtb	r3, r3
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	4313      	orrs	r3, r2
 8008054:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800805c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	021b      	lsls	r3, r3, #8
 8008062:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	4313      	orrs	r3, r2
 800806a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	621a      	str	r2, [r3, #32]
}
 8008078:	bf00      	nop
 800807a:	371c      	adds	r7, #28
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008084:	b480      	push	{r7}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
 8008090:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6a1b      	ldr	r3, [r3, #32]
 80080a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	021b      	lsls	r3, r3, #8
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	031b      	lsls	r3, r3, #12
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80080d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	031b      	lsls	r3, r3, #12
 80080dc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	621a      	str	r2, [r3, #32]
}
 80080f2:	bf00      	nop
 80080f4:	371c      	adds	r7, #28
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080fe:	b480      	push	{r7}
 8008100:	b087      	sub	sp, #28
 8008102:	af00      	add	r7, sp, #0
 8008104:	60f8      	str	r0, [r7, #12]
 8008106:	60b9      	str	r1, [r7, #8]
 8008108:	607a      	str	r2, [r7, #4]
 800810a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008118:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	021a      	lsls	r2, r3, #8
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	431a      	orrs	r2, r3
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	4313      	orrs	r3, r2
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	4313      	orrs	r3, r2
 800812a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	609a      	str	r2, [r3, #8]
}
 8008132:	bf00      	nop
 8008134:	371c      	adds	r7, #28
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800813e:	b480      	push	{r7}
 8008140:	b087      	sub	sp, #28
 8008142:	af00      	add	r7, sp, #0
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	f003 031f 	and.w	r3, r3, #31
 8008150:	2201      	movs	r2, #1
 8008152:	fa02 f303 	lsl.w	r3, r2, r3
 8008156:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6a1a      	ldr	r2, [r3, #32]
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	43db      	mvns	r3, r3
 8008160:	401a      	ands	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6a1a      	ldr	r2, [r3, #32]
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	f003 031f 	and.w	r3, r3, #31
 8008170:	6879      	ldr	r1, [r7, #4]
 8008172:	fa01 f303 	lsl.w	r3, r1, r3
 8008176:	431a      	orrs	r2, r3
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	621a      	str	r2, [r3, #32]
}
 800817c:	bf00      	nop
 800817e:	371c      	adds	r7, #28
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b08a      	sub	sp, #40	; 0x28
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e09a      	b.n	80082d2 <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d106      	bne.n	80081b6 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7fa fa07 	bl	80025c4 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2202      	movs	r2, #2
 80081ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	3304      	adds	r3, #4
 80081c6:	4619      	mov	r1, r3
 80081c8:	4610      	mov	r0, r2
 80081ca:	f7ff fb7d 	bl	80078c8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	6819      	ldr	r1, [r3, #0]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	2203      	movs	r2, #3
 80081dc:	f7ff fe12 	bl	8007e04 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	699a      	ldr	r2, [r3, #24]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f022 020c 	bic.w	r2, r2, #12
 80081ee:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6999      	ldr	r1, [r3, #24]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008210:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689a      	ldr	r2, [r3, #8]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008220:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008230:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	689a      	ldr	r2, [r3, #8]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0207 	bic.w	r2, r2, #7
 8008240:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f042 0204 	orr.w	r2, r2, #4
 8008250:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8008252:	2300      	movs	r3, #0
 8008254:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008256:	2300      	movs	r3, #0
 8008258:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800825a:	2370      	movs	r3, #112	; 0x70
 800825c:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800825e:	2300      	movs	r3, #0
 8008260:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008262:	2300      	movs	r3, #0
 8008264:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008266:	2300      	movs	r3, #0
 8008268:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f107 020c 	add.w	r2, r7, #12
 8008278:	4611      	mov	r1, r2
 800827a:	4618      	mov	r0, r3
 800827c:	f7ff fc0a 	bl	8007a94 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800828e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	685a      	ldr	r2, [r3, #4]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800829e:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3728      	adds	r7, #40	; 0x28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082ea:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80082f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082fa:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008302:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d108      	bne.n	800831c <HAL_TIMEx_HallSensor_Start+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d105      	bne.n	800831c <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008310:	7b7b      	ldrb	r3, [r7, #13]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d102      	bne.n	800831c <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008316:	7b3b      	ldrb	r3, [r7, #12]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d001      	beq.n	8008320 <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e04f      	b.n	80083c0 <HAL_TIMEx_HallSensor_Start+0xe4>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2202      	movs	r2, #2
 8008324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2201      	movs	r2, #1
 8008346:	2100      	movs	r1, #0
 8008348:	4618      	mov	r0, r3
 800834a:	f7ff fef8 	bl	800813e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a1d      	ldr	r2, [pc, #116]	; (80083c8 <HAL_TIMEx_HallSensor_Start+0xec>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d018      	beq.n	800838a <HAL_TIMEx_HallSensor_Start+0xae>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008360:	d013      	beq.n	800838a <HAL_TIMEx_HallSensor_Start+0xae>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a19      	ldr	r2, [pc, #100]	; (80083cc <HAL_TIMEx_HallSensor_Start+0xf0>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d00e      	beq.n	800838a <HAL_TIMEx_HallSensor_Start+0xae>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a17      	ldr	r2, [pc, #92]	; (80083d0 <HAL_TIMEx_HallSensor_Start+0xf4>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d009      	beq.n	800838a <HAL_TIMEx_HallSensor_Start+0xae>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a16      	ldr	r2, [pc, #88]	; (80083d4 <HAL_TIMEx_HallSensor_Start+0xf8>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d004      	beq.n	800838a <HAL_TIMEx_HallSensor_Start+0xae>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a14      	ldr	r2, [pc, #80]	; (80083d8 <HAL_TIMEx_HallSensor_Start+0xfc>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d111      	bne.n	80083ae <HAL_TIMEx_HallSensor_Start+0xd2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f003 0307 	and.w	r3, r3, #7
 8008394:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b06      	cmp	r3, #6
 800839a:	d010      	beq.n	80083be <HAL_TIMEx_HallSensor_Start+0xe2>
    {
      __HAL_TIM_ENABLE(htim);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0201 	orr.w	r2, r2, #1
 80083aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ac:	e007      	b.n	80083be <HAL_TIMEx_HallSensor_Start+0xe2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f042 0201 	orr.w	r2, r2, #1
 80083bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	40010000 	.word	0x40010000
 80083cc:	40000400 	.word	0x40000400
 80083d0:	40000800 	.word	0x40000800
 80083d4:	40000c00 	.word	0x40000c00
 80083d8:	40014000 	.word	0x40014000

080083dc <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2200      	movs	r2, #0
 80083ea:	2100      	movs	r1, #0
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7ff fea6 	bl	800813e <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6a1a      	ldr	r2, [r3, #32]
 80083f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80083fc:	4013      	ands	r3, r2
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10f      	bne.n	8008422 <HAL_TIMEx_HallSensor_Stop+0x46>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6a1a      	ldr	r2, [r3, #32]
 8008408:	f240 4344 	movw	r3, #1092	; 0x444
 800840c:	4013      	ands	r3, r2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d107      	bne.n	8008422 <HAL_TIMEx_HallSensor_Stop+0x46>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 0201 	bic.w	r2, r2, #1
 8008420:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800845c:	2b01      	cmp	r3, #1
 800845e:	d101      	bne.n	8008464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008460:	2302      	movs	r3, #2
 8008462:	e050      	b.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800848a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	4313      	orrs	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a1c      	ldr	r2, [pc, #112]	; (8008514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d018      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084b0:	d013      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a18      	ldr	r2, [pc, #96]	; (8008518 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d00e      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a16      	ldr	r2, [pc, #88]	; (800851c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d009      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a15      	ldr	r2, [pc, #84]	; (8008520 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d004      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a13      	ldr	r2, [pc, #76]	; (8008524 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d10c      	bne.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	40010000 	.word	0x40010000
 8008518:	40000400 	.word	0x40000400
 800851c:	40000800 	.word	0x40000800
 8008520:	40000c00 	.word	0x40000c00
 8008524:	40014000 	.word	0x40014000

08008528 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800853c:	2b01      	cmp	r3, #1
 800853e:	d101      	bne.n	8008544 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008540:	2302      	movs	r3, #2
 8008542:	e03d      	b.n	80085c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	4313      	orrs	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	4313      	orrs	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	4313      	orrs	r3, r2
 8008574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4313      	orrs	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	4313      	orrs	r3, r2
 8008590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	4313      	orrs	r3, r2
 800859e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <__cvt>:
 80085f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085f8:	ec55 4b10 	vmov	r4, r5, d0
 80085fc:	2d00      	cmp	r5, #0
 80085fe:	460e      	mov	r6, r1
 8008600:	4619      	mov	r1, r3
 8008602:	462b      	mov	r3, r5
 8008604:	bfbb      	ittet	lt
 8008606:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800860a:	461d      	movlt	r5, r3
 800860c:	2300      	movge	r3, #0
 800860e:	232d      	movlt	r3, #45	; 0x2d
 8008610:	700b      	strb	r3, [r1, #0]
 8008612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008614:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008618:	4691      	mov	r9, r2
 800861a:	f023 0820 	bic.w	r8, r3, #32
 800861e:	bfbc      	itt	lt
 8008620:	4622      	movlt	r2, r4
 8008622:	4614      	movlt	r4, r2
 8008624:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008628:	d005      	beq.n	8008636 <__cvt+0x42>
 800862a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800862e:	d100      	bne.n	8008632 <__cvt+0x3e>
 8008630:	3601      	adds	r6, #1
 8008632:	2102      	movs	r1, #2
 8008634:	e000      	b.n	8008638 <__cvt+0x44>
 8008636:	2103      	movs	r1, #3
 8008638:	ab03      	add	r3, sp, #12
 800863a:	9301      	str	r3, [sp, #4]
 800863c:	ab02      	add	r3, sp, #8
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	ec45 4b10 	vmov	d0, r4, r5
 8008644:	4653      	mov	r3, sl
 8008646:	4632      	mov	r2, r6
 8008648:	f000 fe4a 	bl	80092e0 <_dtoa_r>
 800864c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008650:	4607      	mov	r7, r0
 8008652:	d102      	bne.n	800865a <__cvt+0x66>
 8008654:	f019 0f01 	tst.w	r9, #1
 8008658:	d022      	beq.n	80086a0 <__cvt+0xac>
 800865a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800865e:	eb07 0906 	add.w	r9, r7, r6
 8008662:	d110      	bne.n	8008686 <__cvt+0x92>
 8008664:	783b      	ldrb	r3, [r7, #0]
 8008666:	2b30      	cmp	r3, #48	; 0x30
 8008668:	d10a      	bne.n	8008680 <__cvt+0x8c>
 800866a:	2200      	movs	r2, #0
 800866c:	2300      	movs	r3, #0
 800866e:	4620      	mov	r0, r4
 8008670:	4629      	mov	r1, r5
 8008672:	f7f8 fa31 	bl	8000ad8 <__aeabi_dcmpeq>
 8008676:	b918      	cbnz	r0, 8008680 <__cvt+0x8c>
 8008678:	f1c6 0601 	rsb	r6, r6, #1
 800867c:	f8ca 6000 	str.w	r6, [sl]
 8008680:	f8da 3000 	ldr.w	r3, [sl]
 8008684:	4499      	add	r9, r3
 8008686:	2200      	movs	r2, #0
 8008688:	2300      	movs	r3, #0
 800868a:	4620      	mov	r0, r4
 800868c:	4629      	mov	r1, r5
 800868e:	f7f8 fa23 	bl	8000ad8 <__aeabi_dcmpeq>
 8008692:	b108      	cbz	r0, 8008698 <__cvt+0xa4>
 8008694:	f8cd 900c 	str.w	r9, [sp, #12]
 8008698:	2230      	movs	r2, #48	; 0x30
 800869a:	9b03      	ldr	r3, [sp, #12]
 800869c:	454b      	cmp	r3, r9
 800869e:	d307      	bcc.n	80086b0 <__cvt+0xbc>
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086a4:	1bdb      	subs	r3, r3, r7
 80086a6:	4638      	mov	r0, r7
 80086a8:	6013      	str	r3, [r2, #0]
 80086aa:	b004      	add	sp, #16
 80086ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b0:	1c59      	adds	r1, r3, #1
 80086b2:	9103      	str	r1, [sp, #12]
 80086b4:	701a      	strb	r2, [r3, #0]
 80086b6:	e7f0      	b.n	800869a <__cvt+0xa6>

080086b8 <__exponent>:
 80086b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086ba:	4603      	mov	r3, r0
 80086bc:	2900      	cmp	r1, #0
 80086be:	bfb8      	it	lt
 80086c0:	4249      	neglt	r1, r1
 80086c2:	f803 2b02 	strb.w	r2, [r3], #2
 80086c6:	bfb4      	ite	lt
 80086c8:	222d      	movlt	r2, #45	; 0x2d
 80086ca:	222b      	movge	r2, #43	; 0x2b
 80086cc:	2909      	cmp	r1, #9
 80086ce:	7042      	strb	r2, [r0, #1]
 80086d0:	dd2a      	ble.n	8008728 <__exponent+0x70>
 80086d2:	f10d 0207 	add.w	r2, sp, #7
 80086d6:	4617      	mov	r7, r2
 80086d8:	260a      	movs	r6, #10
 80086da:	4694      	mov	ip, r2
 80086dc:	fb91 f5f6 	sdiv	r5, r1, r6
 80086e0:	fb06 1415 	mls	r4, r6, r5, r1
 80086e4:	3430      	adds	r4, #48	; 0x30
 80086e6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80086ea:	460c      	mov	r4, r1
 80086ec:	2c63      	cmp	r4, #99	; 0x63
 80086ee:	f102 32ff 	add.w	r2, r2, #4294967295
 80086f2:	4629      	mov	r1, r5
 80086f4:	dcf1      	bgt.n	80086da <__exponent+0x22>
 80086f6:	3130      	adds	r1, #48	; 0x30
 80086f8:	f1ac 0402 	sub.w	r4, ip, #2
 80086fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008700:	1c41      	adds	r1, r0, #1
 8008702:	4622      	mov	r2, r4
 8008704:	42ba      	cmp	r2, r7
 8008706:	d30a      	bcc.n	800871e <__exponent+0x66>
 8008708:	f10d 0209 	add.w	r2, sp, #9
 800870c:	eba2 020c 	sub.w	r2, r2, ip
 8008710:	42bc      	cmp	r4, r7
 8008712:	bf88      	it	hi
 8008714:	2200      	movhi	r2, #0
 8008716:	4413      	add	r3, r2
 8008718:	1a18      	subs	r0, r3, r0
 800871a:	b003      	add	sp, #12
 800871c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800871e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008722:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008726:	e7ed      	b.n	8008704 <__exponent+0x4c>
 8008728:	2330      	movs	r3, #48	; 0x30
 800872a:	3130      	adds	r1, #48	; 0x30
 800872c:	7083      	strb	r3, [r0, #2]
 800872e:	70c1      	strb	r1, [r0, #3]
 8008730:	1d03      	adds	r3, r0, #4
 8008732:	e7f1      	b.n	8008718 <__exponent+0x60>

08008734 <_printf_float>:
 8008734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008738:	ed2d 8b02 	vpush	{d8}
 800873c:	b08d      	sub	sp, #52	; 0x34
 800873e:	460c      	mov	r4, r1
 8008740:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008744:	4616      	mov	r6, r2
 8008746:	461f      	mov	r7, r3
 8008748:	4605      	mov	r5, r0
 800874a:	f000 fcc7 	bl	80090dc <_localeconv_r>
 800874e:	f8d0 a000 	ldr.w	sl, [r0]
 8008752:	4650      	mov	r0, sl
 8008754:	f7f7 fd94 	bl	8000280 <strlen>
 8008758:	2300      	movs	r3, #0
 800875a:	930a      	str	r3, [sp, #40]	; 0x28
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	9305      	str	r3, [sp, #20]
 8008760:	f8d8 3000 	ldr.w	r3, [r8]
 8008764:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008768:	3307      	adds	r3, #7
 800876a:	f023 0307 	bic.w	r3, r3, #7
 800876e:	f103 0208 	add.w	r2, r3, #8
 8008772:	f8c8 2000 	str.w	r2, [r8]
 8008776:	e9d3 8900 	ldrd	r8, r9, [r3]
 800877a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800877e:	9307      	str	r3, [sp, #28]
 8008780:	f8cd 8018 	str.w	r8, [sp, #24]
 8008784:	ee08 0a10 	vmov	s16, r0
 8008788:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800878c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008790:	4b9e      	ldr	r3, [pc, #632]	; (8008a0c <_printf_float+0x2d8>)
 8008792:	f04f 32ff 	mov.w	r2, #4294967295
 8008796:	f7f8 f9d1 	bl	8000b3c <__aeabi_dcmpun>
 800879a:	bb88      	cbnz	r0, 8008800 <_printf_float+0xcc>
 800879c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087a0:	4b9a      	ldr	r3, [pc, #616]	; (8008a0c <_printf_float+0x2d8>)
 80087a2:	f04f 32ff 	mov.w	r2, #4294967295
 80087a6:	f7f8 f9ab 	bl	8000b00 <__aeabi_dcmple>
 80087aa:	bb48      	cbnz	r0, 8008800 <_printf_float+0xcc>
 80087ac:	2200      	movs	r2, #0
 80087ae:	2300      	movs	r3, #0
 80087b0:	4640      	mov	r0, r8
 80087b2:	4649      	mov	r1, r9
 80087b4:	f7f8 f99a 	bl	8000aec <__aeabi_dcmplt>
 80087b8:	b110      	cbz	r0, 80087c0 <_printf_float+0x8c>
 80087ba:	232d      	movs	r3, #45	; 0x2d
 80087bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087c0:	4a93      	ldr	r2, [pc, #588]	; (8008a10 <_printf_float+0x2dc>)
 80087c2:	4b94      	ldr	r3, [pc, #592]	; (8008a14 <_printf_float+0x2e0>)
 80087c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80087c8:	bf94      	ite	ls
 80087ca:	4690      	movls	r8, r2
 80087cc:	4698      	movhi	r8, r3
 80087ce:	2303      	movs	r3, #3
 80087d0:	6123      	str	r3, [r4, #16]
 80087d2:	9b05      	ldr	r3, [sp, #20]
 80087d4:	f023 0304 	bic.w	r3, r3, #4
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	f04f 0900 	mov.w	r9, #0
 80087de:	9700      	str	r7, [sp, #0]
 80087e0:	4633      	mov	r3, r6
 80087e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80087e4:	4621      	mov	r1, r4
 80087e6:	4628      	mov	r0, r5
 80087e8:	f000 f9da 	bl	8008ba0 <_printf_common>
 80087ec:	3001      	adds	r0, #1
 80087ee:	f040 8090 	bne.w	8008912 <_printf_float+0x1de>
 80087f2:	f04f 30ff 	mov.w	r0, #4294967295
 80087f6:	b00d      	add	sp, #52	; 0x34
 80087f8:	ecbd 8b02 	vpop	{d8}
 80087fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008800:	4642      	mov	r2, r8
 8008802:	464b      	mov	r3, r9
 8008804:	4640      	mov	r0, r8
 8008806:	4649      	mov	r1, r9
 8008808:	f7f8 f998 	bl	8000b3c <__aeabi_dcmpun>
 800880c:	b140      	cbz	r0, 8008820 <_printf_float+0xec>
 800880e:	464b      	mov	r3, r9
 8008810:	2b00      	cmp	r3, #0
 8008812:	bfbc      	itt	lt
 8008814:	232d      	movlt	r3, #45	; 0x2d
 8008816:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800881a:	4a7f      	ldr	r2, [pc, #508]	; (8008a18 <_printf_float+0x2e4>)
 800881c:	4b7f      	ldr	r3, [pc, #508]	; (8008a1c <_printf_float+0x2e8>)
 800881e:	e7d1      	b.n	80087c4 <_printf_float+0x90>
 8008820:	6863      	ldr	r3, [r4, #4]
 8008822:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008826:	9206      	str	r2, [sp, #24]
 8008828:	1c5a      	adds	r2, r3, #1
 800882a:	d13f      	bne.n	80088ac <_printf_float+0x178>
 800882c:	2306      	movs	r3, #6
 800882e:	6063      	str	r3, [r4, #4]
 8008830:	9b05      	ldr	r3, [sp, #20]
 8008832:	6861      	ldr	r1, [r4, #4]
 8008834:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008838:	2300      	movs	r3, #0
 800883a:	9303      	str	r3, [sp, #12]
 800883c:	ab0a      	add	r3, sp, #40	; 0x28
 800883e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008842:	ab09      	add	r3, sp, #36	; 0x24
 8008844:	ec49 8b10 	vmov	d0, r8, r9
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	6022      	str	r2, [r4, #0]
 800884c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008850:	4628      	mov	r0, r5
 8008852:	f7ff fecf 	bl	80085f4 <__cvt>
 8008856:	9b06      	ldr	r3, [sp, #24]
 8008858:	9909      	ldr	r1, [sp, #36]	; 0x24
 800885a:	2b47      	cmp	r3, #71	; 0x47
 800885c:	4680      	mov	r8, r0
 800885e:	d108      	bne.n	8008872 <_printf_float+0x13e>
 8008860:	1cc8      	adds	r0, r1, #3
 8008862:	db02      	blt.n	800886a <_printf_float+0x136>
 8008864:	6863      	ldr	r3, [r4, #4]
 8008866:	4299      	cmp	r1, r3
 8008868:	dd41      	ble.n	80088ee <_printf_float+0x1ba>
 800886a:	f1ab 0302 	sub.w	r3, fp, #2
 800886e:	fa5f fb83 	uxtb.w	fp, r3
 8008872:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008876:	d820      	bhi.n	80088ba <_printf_float+0x186>
 8008878:	3901      	subs	r1, #1
 800887a:	465a      	mov	r2, fp
 800887c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008880:	9109      	str	r1, [sp, #36]	; 0x24
 8008882:	f7ff ff19 	bl	80086b8 <__exponent>
 8008886:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008888:	1813      	adds	r3, r2, r0
 800888a:	2a01      	cmp	r2, #1
 800888c:	4681      	mov	r9, r0
 800888e:	6123      	str	r3, [r4, #16]
 8008890:	dc02      	bgt.n	8008898 <_printf_float+0x164>
 8008892:	6822      	ldr	r2, [r4, #0]
 8008894:	07d2      	lsls	r2, r2, #31
 8008896:	d501      	bpl.n	800889c <_printf_float+0x168>
 8008898:	3301      	adds	r3, #1
 800889a:	6123      	str	r3, [r4, #16]
 800889c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d09c      	beq.n	80087de <_printf_float+0xaa>
 80088a4:	232d      	movs	r3, #45	; 0x2d
 80088a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088aa:	e798      	b.n	80087de <_printf_float+0xaa>
 80088ac:	9a06      	ldr	r2, [sp, #24]
 80088ae:	2a47      	cmp	r2, #71	; 0x47
 80088b0:	d1be      	bne.n	8008830 <_printf_float+0xfc>
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1bc      	bne.n	8008830 <_printf_float+0xfc>
 80088b6:	2301      	movs	r3, #1
 80088b8:	e7b9      	b.n	800882e <_printf_float+0xfa>
 80088ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80088be:	d118      	bne.n	80088f2 <_printf_float+0x1be>
 80088c0:	2900      	cmp	r1, #0
 80088c2:	6863      	ldr	r3, [r4, #4]
 80088c4:	dd0b      	ble.n	80088de <_printf_float+0x1aa>
 80088c6:	6121      	str	r1, [r4, #16]
 80088c8:	b913      	cbnz	r3, 80088d0 <_printf_float+0x19c>
 80088ca:	6822      	ldr	r2, [r4, #0]
 80088cc:	07d0      	lsls	r0, r2, #31
 80088ce:	d502      	bpl.n	80088d6 <_printf_float+0x1a2>
 80088d0:	3301      	adds	r3, #1
 80088d2:	440b      	add	r3, r1
 80088d4:	6123      	str	r3, [r4, #16]
 80088d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80088d8:	f04f 0900 	mov.w	r9, #0
 80088dc:	e7de      	b.n	800889c <_printf_float+0x168>
 80088de:	b913      	cbnz	r3, 80088e6 <_printf_float+0x1b2>
 80088e0:	6822      	ldr	r2, [r4, #0]
 80088e2:	07d2      	lsls	r2, r2, #31
 80088e4:	d501      	bpl.n	80088ea <_printf_float+0x1b6>
 80088e6:	3302      	adds	r3, #2
 80088e8:	e7f4      	b.n	80088d4 <_printf_float+0x1a0>
 80088ea:	2301      	movs	r3, #1
 80088ec:	e7f2      	b.n	80088d4 <_printf_float+0x1a0>
 80088ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80088f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f4:	4299      	cmp	r1, r3
 80088f6:	db05      	blt.n	8008904 <_printf_float+0x1d0>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	6121      	str	r1, [r4, #16]
 80088fc:	07d8      	lsls	r0, r3, #31
 80088fe:	d5ea      	bpl.n	80088d6 <_printf_float+0x1a2>
 8008900:	1c4b      	adds	r3, r1, #1
 8008902:	e7e7      	b.n	80088d4 <_printf_float+0x1a0>
 8008904:	2900      	cmp	r1, #0
 8008906:	bfd4      	ite	le
 8008908:	f1c1 0202 	rsble	r2, r1, #2
 800890c:	2201      	movgt	r2, #1
 800890e:	4413      	add	r3, r2
 8008910:	e7e0      	b.n	80088d4 <_printf_float+0x1a0>
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	055a      	lsls	r2, r3, #21
 8008916:	d407      	bmi.n	8008928 <_printf_float+0x1f4>
 8008918:	6923      	ldr	r3, [r4, #16]
 800891a:	4642      	mov	r2, r8
 800891c:	4631      	mov	r1, r6
 800891e:	4628      	mov	r0, r5
 8008920:	47b8      	blx	r7
 8008922:	3001      	adds	r0, #1
 8008924:	d12c      	bne.n	8008980 <_printf_float+0x24c>
 8008926:	e764      	b.n	80087f2 <_printf_float+0xbe>
 8008928:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800892c:	f240 80e0 	bls.w	8008af0 <_printf_float+0x3bc>
 8008930:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008934:	2200      	movs	r2, #0
 8008936:	2300      	movs	r3, #0
 8008938:	f7f8 f8ce 	bl	8000ad8 <__aeabi_dcmpeq>
 800893c:	2800      	cmp	r0, #0
 800893e:	d034      	beq.n	80089aa <_printf_float+0x276>
 8008940:	4a37      	ldr	r2, [pc, #220]	; (8008a20 <_printf_float+0x2ec>)
 8008942:	2301      	movs	r3, #1
 8008944:	4631      	mov	r1, r6
 8008946:	4628      	mov	r0, r5
 8008948:	47b8      	blx	r7
 800894a:	3001      	adds	r0, #1
 800894c:	f43f af51 	beq.w	80087f2 <_printf_float+0xbe>
 8008950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008954:	429a      	cmp	r2, r3
 8008956:	db02      	blt.n	800895e <_printf_float+0x22a>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	07d8      	lsls	r0, r3, #31
 800895c:	d510      	bpl.n	8008980 <_printf_float+0x24c>
 800895e:	ee18 3a10 	vmov	r3, s16
 8008962:	4652      	mov	r2, sl
 8008964:	4631      	mov	r1, r6
 8008966:	4628      	mov	r0, r5
 8008968:	47b8      	blx	r7
 800896a:	3001      	adds	r0, #1
 800896c:	f43f af41 	beq.w	80087f2 <_printf_float+0xbe>
 8008970:	f04f 0800 	mov.w	r8, #0
 8008974:	f104 091a 	add.w	r9, r4, #26
 8008978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800897a:	3b01      	subs	r3, #1
 800897c:	4543      	cmp	r3, r8
 800897e:	dc09      	bgt.n	8008994 <_printf_float+0x260>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	079b      	lsls	r3, r3, #30
 8008984:	f100 8107 	bmi.w	8008b96 <_printf_float+0x462>
 8008988:	68e0      	ldr	r0, [r4, #12]
 800898a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800898c:	4298      	cmp	r0, r3
 800898e:	bfb8      	it	lt
 8008990:	4618      	movlt	r0, r3
 8008992:	e730      	b.n	80087f6 <_printf_float+0xc2>
 8008994:	2301      	movs	r3, #1
 8008996:	464a      	mov	r2, r9
 8008998:	4631      	mov	r1, r6
 800899a:	4628      	mov	r0, r5
 800899c:	47b8      	blx	r7
 800899e:	3001      	adds	r0, #1
 80089a0:	f43f af27 	beq.w	80087f2 <_printf_float+0xbe>
 80089a4:	f108 0801 	add.w	r8, r8, #1
 80089a8:	e7e6      	b.n	8008978 <_printf_float+0x244>
 80089aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	dc39      	bgt.n	8008a24 <_printf_float+0x2f0>
 80089b0:	4a1b      	ldr	r2, [pc, #108]	; (8008a20 <_printf_float+0x2ec>)
 80089b2:	2301      	movs	r3, #1
 80089b4:	4631      	mov	r1, r6
 80089b6:	4628      	mov	r0, r5
 80089b8:	47b8      	blx	r7
 80089ba:	3001      	adds	r0, #1
 80089bc:	f43f af19 	beq.w	80087f2 <_printf_float+0xbe>
 80089c0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80089c4:	4313      	orrs	r3, r2
 80089c6:	d102      	bne.n	80089ce <_printf_float+0x29a>
 80089c8:	6823      	ldr	r3, [r4, #0]
 80089ca:	07d9      	lsls	r1, r3, #31
 80089cc:	d5d8      	bpl.n	8008980 <_printf_float+0x24c>
 80089ce:	ee18 3a10 	vmov	r3, s16
 80089d2:	4652      	mov	r2, sl
 80089d4:	4631      	mov	r1, r6
 80089d6:	4628      	mov	r0, r5
 80089d8:	47b8      	blx	r7
 80089da:	3001      	adds	r0, #1
 80089dc:	f43f af09 	beq.w	80087f2 <_printf_float+0xbe>
 80089e0:	f04f 0900 	mov.w	r9, #0
 80089e4:	f104 0a1a 	add.w	sl, r4, #26
 80089e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ea:	425b      	negs	r3, r3
 80089ec:	454b      	cmp	r3, r9
 80089ee:	dc01      	bgt.n	80089f4 <_printf_float+0x2c0>
 80089f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f2:	e792      	b.n	800891a <_printf_float+0x1e6>
 80089f4:	2301      	movs	r3, #1
 80089f6:	4652      	mov	r2, sl
 80089f8:	4631      	mov	r1, r6
 80089fa:	4628      	mov	r0, r5
 80089fc:	47b8      	blx	r7
 80089fe:	3001      	adds	r0, #1
 8008a00:	f43f aef7 	beq.w	80087f2 <_printf_float+0xbe>
 8008a04:	f109 0901 	add.w	r9, r9, #1
 8008a08:	e7ee      	b.n	80089e8 <_printf_float+0x2b4>
 8008a0a:	bf00      	nop
 8008a0c:	7fefffff 	.word	0x7fefffff
 8008a10:	0800afa0 	.word	0x0800afa0
 8008a14:	0800afa4 	.word	0x0800afa4
 8008a18:	0800afa8 	.word	0x0800afa8
 8008a1c:	0800afac 	.word	0x0800afac
 8008a20:	0800afb0 	.word	0x0800afb0
 8008a24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	bfa8      	it	ge
 8008a2c:	461a      	movge	r2, r3
 8008a2e:	2a00      	cmp	r2, #0
 8008a30:	4691      	mov	r9, r2
 8008a32:	dc37      	bgt.n	8008aa4 <_printf_float+0x370>
 8008a34:	f04f 0b00 	mov.w	fp, #0
 8008a38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a3c:	f104 021a 	add.w	r2, r4, #26
 8008a40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a42:	9305      	str	r3, [sp, #20]
 8008a44:	eba3 0309 	sub.w	r3, r3, r9
 8008a48:	455b      	cmp	r3, fp
 8008a4a:	dc33      	bgt.n	8008ab4 <_printf_float+0x380>
 8008a4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a50:	429a      	cmp	r2, r3
 8008a52:	db3b      	blt.n	8008acc <_printf_float+0x398>
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	07da      	lsls	r2, r3, #31
 8008a58:	d438      	bmi.n	8008acc <_printf_float+0x398>
 8008a5a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008a5e:	eba2 0903 	sub.w	r9, r2, r3
 8008a62:	9b05      	ldr	r3, [sp, #20]
 8008a64:	1ad2      	subs	r2, r2, r3
 8008a66:	4591      	cmp	r9, r2
 8008a68:	bfa8      	it	ge
 8008a6a:	4691      	movge	r9, r2
 8008a6c:	f1b9 0f00 	cmp.w	r9, #0
 8008a70:	dc35      	bgt.n	8008ade <_printf_float+0x3aa>
 8008a72:	f04f 0800 	mov.w	r8, #0
 8008a76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a7a:	f104 0a1a 	add.w	sl, r4, #26
 8008a7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a82:	1a9b      	subs	r3, r3, r2
 8008a84:	eba3 0309 	sub.w	r3, r3, r9
 8008a88:	4543      	cmp	r3, r8
 8008a8a:	f77f af79 	ble.w	8008980 <_printf_float+0x24c>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	4652      	mov	r2, sl
 8008a92:	4631      	mov	r1, r6
 8008a94:	4628      	mov	r0, r5
 8008a96:	47b8      	blx	r7
 8008a98:	3001      	adds	r0, #1
 8008a9a:	f43f aeaa 	beq.w	80087f2 <_printf_float+0xbe>
 8008a9e:	f108 0801 	add.w	r8, r8, #1
 8008aa2:	e7ec      	b.n	8008a7e <_printf_float+0x34a>
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	4642      	mov	r2, r8
 8008aaa:	4628      	mov	r0, r5
 8008aac:	47b8      	blx	r7
 8008aae:	3001      	adds	r0, #1
 8008ab0:	d1c0      	bne.n	8008a34 <_printf_float+0x300>
 8008ab2:	e69e      	b.n	80087f2 <_printf_float+0xbe>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	4628      	mov	r0, r5
 8008aba:	9205      	str	r2, [sp, #20]
 8008abc:	47b8      	blx	r7
 8008abe:	3001      	adds	r0, #1
 8008ac0:	f43f ae97 	beq.w	80087f2 <_printf_float+0xbe>
 8008ac4:	9a05      	ldr	r2, [sp, #20]
 8008ac6:	f10b 0b01 	add.w	fp, fp, #1
 8008aca:	e7b9      	b.n	8008a40 <_printf_float+0x30c>
 8008acc:	ee18 3a10 	vmov	r3, s16
 8008ad0:	4652      	mov	r2, sl
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b8      	blx	r7
 8008ad8:	3001      	adds	r0, #1
 8008ada:	d1be      	bne.n	8008a5a <_printf_float+0x326>
 8008adc:	e689      	b.n	80087f2 <_printf_float+0xbe>
 8008ade:	9a05      	ldr	r2, [sp, #20]
 8008ae0:	464b      	mov	r3, r9
 8008ae2:	4442      	add	r2, r8
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b8      	blx	r7
 8008aea:	3001      	adds	r0, #1
 8008aec:	d1c1      	bne.n	8008a72 <_printf_float+0x33e>
 8008aee:	e680      	b.n	80087f2 <_printf_float+0xbe>
 8008af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008af2:	2a01      	cmp	r2, #1
 8008af4:	dc01      	bgt.n	8008afa <_printf_float+0x3c6>
 8008af6:	07db      	lsls	r3, r3, #31
 8008af8:	d53a      	bpl.n	8008b70 <_printf_float+0x43c>
 8008afa:	2301      	movs	r3, #1
 8008afc:	4642      	mov	r2, r8
 8008afe:	4631      	mov	r1, r6
 8008b00:	4628      	mov	r0, r5
 8008b02:	47b8      	blx	r7
 8008b04:	3001      	adds	r0, #1
 8008b06:	f43f ae74 	beq.w	80087f2 <_printf_float+0xbe>
 8008b0a:	ee18 3a10 	vmov	r3, s16
 8008b0e:	4652      	mov	r2, sl
 8008b10:	4631      	mov	r1, r6
 8008b12:	4628      	mov	r0, r5
 8008b14:	47b8      	blx	r7
 8008b16:	3001      	adds	r0, #1
 8008b18:	f43f ae6b 	beq.w	80087f2 <_printf_float+0xbe>
 8008b1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b20:	2200      	movs	r2, #0
 8008b22:	2300      	movs	r3, #0
 8008b24:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008b28:	f7f7 ffd6 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b2c:	b9d8      	cbnz	r0, 8008b66 <_printf_float+0x432>
 8008b2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008b32:	f108 0201 	add.w	r2, r8, #1
 8008b36:	4631      	mov	r1, r6
 8008b38:	4628      	mov	r0, r5
 8008b3a:	47b8      	blx	r7
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	d10e      	bne.n	8008b5e <_printf_float+0x42a>
 8008b40:	e657      	b.n	80087f2 <_printf_float+0xbe>
 8008b42:	2301      	movs	r3, #1
 8008b44:	4652      	mov	r2, sl
 8008b46:	4631      	mov	r1, r6
 8008b48:	4628      	mov	r0, r5
 8008b4a:	47b8      	blx	r7
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	f43f ae50 	beq.w	80087f2 <_printf_float+0xbe>
 8008b52:	f108 0801 	add.w	r8, r8, #1
 8008b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	4543      	cmp	r3, r8
 8008b5c:	dcf1      	bgt.n	8008b42 <_printf_float+0x40e>
 8008b5e:	464b      	mov	r3, r9
 8008b60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b64:	e6da      	b.n	800891c <_printf_float+0x1e8>
 8008b66:	f04f 0800 	mov.w	r8, #0
 8008b6a:	f104 0a1a 	add.w	sl, r4, #26
 8008b6e:	e7f2      	b.n	8008b56 <_printf_float+0x422>
 8008b70:	2301      	movs	r3, #1
 8008b72:	4642      	mov	r2, r8
 8008b74:	e7df      	b.n	8008b36 <_printf_float+0x402>
 8008b76:	2301      	movs	r3, #1
 8008b78:	464a      	mov	r2, r9
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	47b8      	blx	r7
 8008b80:	3001      	adds	r0, #1
 8008b82:	f43f ae36 	beq.w	80087f2 <_printf_float+0xbe>
 8008b86:	f108 0801 	add.w	r8, r8, #1
 8008b8a:	68e3      	ldr	r3, [r4, #12]
 8008b8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b8e:	1a5b      	subs	r3, r3, r1
 8008b90:	4543      	cmp	r3, r8
 8008b92:	dcf0      	bgt.n	8008b76 <_printf_float+0x442>
 8008b94:	e6f8      	b.n	8008988 <_printf_float+0x254>
 8008b96:	f04f 0800 	mov.w	r8, #0
 8008b9a:	f104 0919 	add.w	r9, r4, #25
 8008b9e:	e7f4      	b.n	8008b8a <_printf_float+0x456>

08008ba0 <_printf_common>:
 8008ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba4:	4616      	mov	r6, r2
 8008ba6:	4699      	mov	r9, r3
 8008ba8:	688a      	ldr	r2, [r1, #8]
 8008baa:	690b      	ldr	r3, [r1, #16]
 8008bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	bfb8      	it	lt
 8008bb4:	4613      	movlt	r3, r2
 8008bb6:	6033      	str	r3, [r6, #0]
 8008bb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bbc:	4607      	mov	r7, r0
 8008bbe:	460c      	mov	r4, r1
 8008bc0:	b10a      	cbz	r2, 8008bc6 <_printf_common+0x26>
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	6033      	str	r3, [r6, #0]
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	0699      	lsls	r1, r3, #26
 8008bca:	bf42      	ittt	mi
 8008bcc:	6833      	ldrmi	r3, [r6, #0]
 8008bce:	3302      	addmi	r3, #2
 8008bd0:	6033      	strmi	r3, [r6, #0]
 8008bd2:	6825      	ldr	r5, [r4, #0]
 8008bd4:	f015 0506 	ands.w	r5, r5, #6
 8008bd8:	d106      	bne.n	8008be8 <_printf_common+0x48>
 8008bda:	f104 0a19 	add.w	sl, r4, #25
 8008bde:	68e3      	ldr	r3, [r4, #12]
 8008be0:	6832      	ldr	r2, [r6, #0]
 8008be2:	1a9b      	subs	r3, r3, r2
 8008be4:	42ab      	cmp	r3, r5
 8008be6:	dc26      	bgt.n	8008c36 <_printf_common+0x96>
 8008be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bec:	1e13      	subs	r3, r2, #0
 8008bee:	6822      	ldr	r2, [r4, #0]
 8008bf0:	bf18      	it	ne
 8008bf2:	2301      	movne	r3, #1
 8008bf4:	0692      	lsls	r2, r2, #26
 8008bf6:	d42b      	bmi.n	8008c50 <_printf_common+0xb0>
 8008bf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bfc:	4649      	mov	r1, r9
 8008bfe:	4638      	mov	r0, r7
 8008c00:	47c0      	blx	r8
 8008c02:	3001      	adds	r0, #1
 8008c04:	d01e      	beq.n	8008c44 <_printf_common+0xa4>
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	6922      	ldr	r2, [r4, #16]
 8008c0a:	f003 0306 	and.w	r3, r3, #6
 8008c0e:	2b04      	cmp	r3, #4
 8008c10:	bf02      	ittt	eq
 8008c12:	68e5      	ldreq	r5, [r4, #12]
 8008c14:	6833      	ldreq	r3, [r6, #0]
 8008c16:	1aed      	subeq	r5, r5, r3
 8008c18:	68a3      	ldr	r3, [r4, #8]
 8008c1a:	bf0c      	ite	eq
 8008c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c20:	2500      	movne	r5, #0
 8008c22:	4293      	cmp	r3, r2
 8008c24:	bfc4      	itt	gt
 8008c26:	1a9b      	subgt	r3, r3, r2
 8008c28:	18ed      	addgt	r5, r5, r3
 8008c2a:	2600      	movs	r6, #0
 8008c2c:	341a      	adds	r4, #26
 8008c2e:	42b5      	cmp	r5, r6
 8008c30:	d11a      	bne.n	8008c68 <_printf_common+0xc8>
 8008c32:	2000      	movs	r0, #0
 8008c34:	e008      	b.n	8008c48 <_printf_common+0xa8>
 8008c36:	2301      	movs	r3, #1
 8008c38:	4652      	mov	r2, sl
 8008c3a:	4649      	mov	r1, r9
 8008c3c:	4638      	mov	r0, r7
 8008c3e:	47c0      	blx	r8
 8008c40:	3001      	adds	r0, #1
 8008c42:	d103      	bne.n	8008c4c <_printf_common+0xac>
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295
 8008c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c4c:	3501      	adds	r5, #1
 8008c4e:	e7c6      	b.n	8008bde <_printf_common+0x3e>
 8008c50:	18e1      	adds	r1, r4, r3
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	2030      	movs	r0, #48	; 0x30
 8008c56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c5a:	4422      	add	r2, r4
 8008c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c64:	3302      	adds	r3, #2
 8008c66:	e7c7      	b.n	8008bf8 <_printf_common+0x58>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	4622      	mov	r2, r4
 8008c6c:	4649      	mov	r1, r9
 8008c6e:	4638      	mov	r0, r7
 8008c70:	47c0      	blx	r8
 8008c72:	3001      	adds	r0, #1
 8008c74:	d0e6      	beq.n	8008c44 <_printf_common+0xa4>
 8008c76:	3601      	adds	r6, #1
 8008c78:	e7d9      	b.n	8008c2e <_printf_common+0x8e>
	...

08008c7c <_printf_i>:
 8008c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c80:	7e0f      	ldrb	r7, [r1, #24]
 8008c82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c84:	2f78      	cmp	r7, #120	; 0x78
 8008c86:	4691      	mov	r9, r2
 8008c88:	4680      	mov	r8, r0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	469a      	mov	sl, r3
 8008c8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c92:	d807      	bhi.n	8008ca4 <_printf_i+0x28>
 8008c94:	2f62      	cmp	r7, #98	; 0x62
 8008c96:	d80a      	bhi.n	8008cae <_printf_i+0x32>
 8008c98:	2f00      	cmp	r7, #0
 8008c9a:	f000 80d4 	beq.w	8008e46 <_printf_i+0x1ca>
 8008c9e:	2f58      	cmp	r7, #88	; 0x58
 8008ca0:	f000 80c0 	beq.w	8008e24 <_printf_i+0x1a8>
 8008ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cac:	e03a      	b.n	8008d24 <_printf_i+0xa8>
 8008cae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cb2:	2b15      	cmp	r3, #21
 8008cb4:	d8f6      	bhi.n	8008ca4 <_printf_i+0x28>
 8008cb6:	a101      	add	r1, pc, #4	; (adr r1, 8008cbc <_printf_i+0x40>)
 8008cb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cbc:	08008d15 	.word	0x08008d15
 8008cc0:	08008d29 	.word	0x08008d29
 8008cc4:	08008ca5 	.word	0x08008ca5
 8008cc8:	08008ca5 	.word	0x08008ca5
 8008ccc:	08008ca5 	.word	0x08008ca5
 8008cd0:	08008ca5 	.word	0x08008ca5
 8008cd4:	08008d29 	.word	0x08008d29
 8008cd8:	08008ca5 	.word	0x08008ca5
 8008cdc:	08008ca5 	.word	0x08008ca5
 8008ce0:	08008ca5 	.word	0x08008ca5
 8008ce4:	08008ca5 	.word	0x08008ca5
 8008ce8:	08008e2d 	.word	0x08008e2d
 8008cec:	08008d55 	.word	0x08008d55
 8008cf0:	08008de7 	.word	0x08008de7
 8008cf4:	08008ca5 	.word	0x08008ca5
 8008cf8:	08008ca5 	.word	0x08008ca5
 8008cfc:	08008e4f 	.word	0x08008e4f
 8008d00:	08008ca5 	.word	0x08008ca5
 8008d04:	08008d55 	.word	0x08008d55
 8008d08:	08008ca5 	.word	0x08008ca5
 8008d0c:	08008ca5 	.word	0x08008ca5
 8008d10:	08008def 	.word	0x08008def
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	1d1a      	adds	r2, r3, #4
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	602a      	str	r2, [r5, #0]
 8008d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d24:	2301      	movs	r3, #1
 8008d26:	e09f      	b.n	8008e68 <_printf_i+0x1ec>
 8008d28:	6820      	ldr	r0, [r4, #0]
 8008d2a:	682b      	ldr	r3, [r5, #0]
 8008d2c:	0607      	lsls	r7, r0, #24
 8008d2e:	f103 0104 	add.w	r1, r3, #4
 8008d32:	6029      	str	r1, [r5, #0]
 8008d34:	d501      	bpl.n	8008d3a <_printf_i+0xbe>
 8008d36:	681e      	ldr	r6, [r3, #0]
 8008d38:	e003      	b.n	8008d42 <_printf_i+0xc6>
 8008d3a:	0646      	lsls	r6, r0, #25
 8008d3c:	d5fb      	bpl.n	8008d36 <_printf_i+0xba>
 8008d3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d42:	2e00      	cmp	r6, #0
 8008d44:	da03      	bge.n	8008d4e <_printf_i+0xd2>
 8008d46:	232d      	movs	r3, #45	; 0x2d
 8008d48:	4276      	negs	r6, r6
 8008d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d4e:	485a      	ldr	r0, [pc, #360]	; (8008eb8 <_printf_i+0x23c>)
 8008d50:	230a      	movs	r3, #10
 8008d52:	e012      	b.n	8008d7a <_printf_i+0xfe>
 8008d54:	682b      	ldr	r3, [r5, #0]
 8008d56:	6820      	ldr	r0, [r4, #0]
 8008d58:	1d19      	adds	r1, r3, #4
 8008d5a:	6029      	str	r1, [r5, #0]
 8008d5c:	0605      	lsls	r5, r0, #24
 8008d5e:	d501      	bpl.n	8008d64 <_printf_i+0xe8>
 8008d60:	681e      	ldr	r6, [r3, #0]
 8008d62:	e002      	b.n	8008d6a <_printf_i+0xee>
 8008d64:	0641      	lsls	r1, r0, #25
 8008d66:	d5fb      	bpl.n	8008d60 <_printf_i+0xe4>
 8008d68:	881e      	ldrh	r6, [r3, #0]
 8008d6a:	4853      	ldr	r0, [pc, #332]	; (8008eb8 <_printf_i+0x23c>)
 8008d6c:	2f6f      	cmp	r7, #111	; 0x6f
 8008d6e:	bf0c      	ite	eq
 8008d70:	2308      	moveq	r3, #8
 8008d72:	230a      	movne	r3, #10
 8008d74:	2100      	movs	r1, #0
 8008d76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d7a:	6865      	ldr	r5, [r4, #4]
 8008d7c:	60a5      	str	r5, [r4, #8]
 8008d7e:	2d00      	cmp	r5, #0
 8008d80:	bfa2      	ittt	ge
 8008d82:	6821      	ldrge	r1, [r4, #0]
 8008d84:	f021 0104 	bicge.w	r1, r1, #4
 8008d88:	6021      	strge	r1, [r4, #0]
 8008d8a:	b90e      	cbnz	r6, 8008d90 <_printf_i+0x114>
 8008d8c:	2d00      	cmp	r5, #0
 8008d8e:	d04b      	beq.n	8008e28 <_printf_i+0x1ac>
 8008d90:	4615      	mov	r5, r2
 8008d92:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d96:	fb03 6711 	mls	r7, r3, r1, r6
 8008d9a:	5dc7      	ldrb	r7, [r0, r7]
 8008d9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008da0:	4637      	mov	r7, r6
 8008da2:	42bb      	cmp	r3, r7
 8008da4:	460e      	mov	r6, r1
 8008da6:	d9f4      	bls.n	8008d92 <_printf_i+0x116>
 8008da8:	2b08      	cmp	r3, #8
 8008daa:	d10b      	bne.n	8008dc4 <_printf_i+0x148>
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	07de      	lsls	r6, r3, #31
 8008db0:	d508      	bpl.n	8008dc4 <_printf_i+0x148>
 8008db2:	6923      	ldr	r3, [r4, #16]
 8008db4:	6861      	ldr	r1, [r4, #4]
 8008db6:	4299      	cmp	r1, r3
 8008db8:	bfde      	ittt	le
 8008dba:	2330      	movle	r3, #48	; 0x30
 8008dbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dc4:	1b52      	subs	r2, r2, r5
 8008dc6:	6122      	str	r2, [r4, #16]
 8008dc8:	f8cd a000 	str.w	sl, [sp]
 8008dcc:	464b      	mov	r3, r9
 8008dce:	aa03      	add	r2, sp, #12
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	4640      	mov	r0, r8
 8008dd4:	f7ff fee4 	bl	8008ba0 <_printf_common>
 8008dd8:	3001      	adds	r0, #1
 8008dda:	d14a      	bne.n	8008e72 <_printf_i+0x1f6>
 8008ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8008de0:	b004      	add	sp, #16
 8008de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	f043 0320 	orr.w	r3, r3, #32
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	4833      	ldr	r0, [pc, #204]	; (8008ebc <_printf_i+0x240>)
 8008df0:	2778      	movs	r7, #120	; 0x78
 8008df2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008df6:	6823      	ldr	r3, [r4, #0]
 8008df8:	6829      	ldr	r1, [r5, #0]
 8008dfa:	061f      	lsls	r7, r3, #24
 8008dfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e00:	d402      	bmi.n	8008e08 <_printf_i+0x18c>
 8008e02:	065f      	lsls	r7, r3, #25
 8008e04:	bf48      	it	mi
 8008e06:	b2b6      	uxthmi	r6, r6
 8008e08:	07df      	lsls	r7, r3, #31
 8008e0a:	bf48      	it	mi
 8008e0c:	f043 0320 	orrmi.w	r3, r3, #32
 8008e10:	6029      	str	r1, [r5, #0]
 8008e12:	bf48      	it	mi
 8008e14:	6023      	strmi	r3, [r4, #0]
 8008e16:	b91e      	cbnz	r6, 8008e20 <_printf_i+0x1a4>
 8008e18:	6823      	ldr	r3, [r4, #0]
 8008e1a:	f023 0320 	bic.w	r3, r3, #32
 8008e1e:	6023      	str	r3, [r4, #0]
 8008e20:	2310      	movs	r3, #16
 8008e22:	e7a7      	b.n	8008d74 <_printf_i+0xf8>
 8008e24:	4824      	ldr	r0, [pc, #144]	; (8008eb8 <_printf_i+0x23c>)
 8008e26:	e7e4      	b.n	8008df2 <_printf_i+0x176>
 8008e28:	4615      	mov	r5, r2
 8008e2a:	e7bd      	b.n	8008da8 <_printf_i+0x12c>
 8008e2c:	682b      	ldr	r3, [r5, #0]
 8008e2e:	6826      	ldr	r6, [r4, #0]
 8008e30:	6961      	ldr	r1, [r4, #20]
 8008e32:	1d18      	adds	r0, r3, #4
 8008e34:	6028      	str	r0, [r5, #0]
 8008e36:	0635      	lsls	r5, r6, #24
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	d501      	bpl.n	8008e40 <_printf_i+0x1c4>
 8008e3c:	6019      	str	r1, [r3, #0]
 8008e3e:	e002      	b.n	8008e46 <_printf_i+0x1ca>
 8008e40:	0670      	lsls	r0, r6, #25
 8008e42:	d5fb      	bpl.n	8008e3c <_printf_i+0x1c0>
 8008e44:	8019      	strh	r1, [r3, #0]
 8008e46:	2300      	movs	r3, #0
 8008e48:	6123      	str	r3, [r4, #16]
 8008e4a:	4615      	mov	r5, r2
 8008e4c:	e7bc      	b.n	8008dc8 <_printf_i+0x14c>
 8008e4e:	682b      	ldr	r3, [r5, #0]
 8008e50:	1d1a      	adds	r2, r3, #4
 8008e52:	602a      	str	r2, [r5, #0]
 8008e54:	681d      	ldr	r5, [r3, #0]
 8008e56:	6862      	ldr	r2, [r4, #4]
 8008e58:	2100      	movs	r1, #0
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f7f7 f9c0 	bl	80001e0 <memchr>
 8008e60:	b108      	cbz	r0, 8008e66 <_printf_i+0x1ea>
 8008e62:	1b40      	subs	r0, r0, r5
 8008e64:	6060      	str	r0, [r4, #4]
 8008e66:	6863      	ldr	r3, [r4, #4]
 8008e68:	6123      	str	r3, [r4, #16]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e70:	e7aa      	b.n	8008dc8 <_printf_i+0x14c>
 8008e72:	6923      	ldr	r3, [r4, #16]
 8008e74:	462a      	mov	r2, r5
 8008e76:	4649      	mov	r1, r9
 8008e78:	4640      	mov	r0, r8
 8008e7a:	47d0      	blx	sl
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	d0ad      	beq.n	8008ddc <_printf_i+0x160>
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	079b      	lsls	r3, r3, #30
 8008e84:	d413      	bmi.n	8008eae <_printf_i+0x232>
 8008e86:	68e0      	ldr	r0, [r4, #12]
 8008e88:	9b03      	ldr	r3, [sp, #12]
 8008e8a:	4298      	cmp	r0, r3
 8008e8c:	bfb8      	it	lt
 8008e8e:	4618      	movlt	r0, r3
 8008e90:	e7a6      	b.n	8008de0 <_printf_i+0x164>
 8008e92:	2301      	movs	r3, #1
 8008e94:	4632      	mov	r2, r6
 8008e96:	4649      	mov	r1, r9
 8008e98:	4640      	mov	r0, r8
 8008e9a:	47d0      	blx	sl
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	d09d      	beq.n	8008ddc <_printf_i+0x160>
 8008ea0:	3501      	adds	r5, #1
 8008ea2:	68e3      	ldr	r3, [r4, #12]
 8008ea4:	9903      	ldr	r1, [sp, #12]
 8008ea6:	1a5b      	subs	r3, r3, r1
 8008ea8:	42ab      	cmp	r3, r5
 8008eaa:	dcf2      	bgt.n	8008e92 <_printf_i+0x216>
 8008eac:	e7eb      	b.n	8008e86 <_printf_i+0x20a>
 8008eae:	2500      	movs	r5, #0
 8008eb0:	f104 0619 	add.w	r6, r4, #25
 8008eb4:	e7f5      	b.n	8008ea2 <_printf_i+0x226>
 8008eb6:	bf00      	nop
 8008eb8:	0800afb2 	.word	0x0800afb2
 8008ebc:	0800afc3 	.word	0x0800afc3

08008ec0 <std>:
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	b510      	push	{r4, lr}
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8008eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ece:	6083      	str	r3, [r0, #8]
 8008ed0:	8181      	strh	r1, [r0, #12]
 8008ed2:	6643      	str	r3, [r0, #100]	; 0x64
 8008ed4:	81c2      	strh	r2, [r0, #14]
 8008ed6:	6183      	str	r3, [r0, #24]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	2208      	movs	r2, #8
 8008edc:	305c      	adds	r0, #92	; 0x5c
 8008ede:	f000 f8f4 	bl	80090ca <memset>
 8008ee2:	4b0d      	ldr	r3, [pc, #52]	; (8008f18 <std+0x58>)
 8008ee4:	6263      	str	r3, [r4, #36]	; 0x24
 8008ee6:	4b0d      	ldr	r3, [pc, #52]	; (8008f1c <std+0x5c>)
 8008ee8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008eea:	4b0d      	ldr	r3, [pc, #52]	; (8008f20 <std+0x60>)
 8008eec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008eee:	4b0d      	ldr	r3, [pc, #52]	; (8008f24 <std+0x64>)
 8008ef0:	6323      	str	r3, [r4, #48]	; 0x30
 8008ef2:	4b0d      	ldr	r3, [pc, #52]	; (8008f28 <std+0x68>)
 8008ef4:	6224      	str	r4, [r4, #32]
 8008ef6:	429c      	cmp	r4, r3
 8008ef8:	d006      	beq.n	8008f08 <std+0x48>
 8008efa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008efe:	4294      	cmp	r4, r2
 8008f00:	d002      	beq.n	8008f08 <std+0x48>
 8008f02:	33d0      	adds	r3, #208	; 0xd0
 8008f04:	429c      	cmp	r4, r3
 8008f06:	d105      	bne.n	8008f14 <std+0x54>
 8008f08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f10:	f000 b958 	b.w	80091c4 <__retarget_lock_init_recursive>
 8008f14:	bd10      	pop	{r4, pc}
 8008f16:	bf00      	nop
 8008f18:	08009045 	.word	0x08009045
 8008f1c:	08009067 	.word	0x08009067
 8008f20:	0800909f 	.word	0x0800909f
 8008f24:	080090c3 	.word	0x080090c3
 8008f28:	20010670 	.word	0x20010670

08008f2c <stdio_exit_handler>:
 8008f2c:	4a02      	ldr	r2, [pc, #8]	; (8008f38 <stdio_exit_handler+0xc>)
 8008f2e:	4903      	ldr	r1, [pc, #12]	; (8008f3c <stdio_exit_handler+0x10>)
 8008f30:	4803      	ldr	r0, [pc, #12]	; (8008f40 <stdio_exit_handler+0x14>)
 8008f32:	f000 b869 	b.w	8009008 <_fwalk_sglue>
 8008f36:	bf00      	nop
 8008f38:	200000a4 	.word	0x200000a4
 8008f3c:	0800a8c9 	.word	0x0800a8c9
 8008f40:	200000b0 	.word	0x200000b0

08008f44 <cleanup_stdio>:
 8008f44:	6841      	ldr	r1, [r0, #4]
 8008f46:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <cleanup_stdio+0x34>)
 8008f48:	4299      	cmp	r1, r3
 8008f4a:	b510      	push	{r4, lr}
 8008f4c:	4604      	mov	r4, r0
 8008f4e:	d001      	beq.n	8008f54 <cleanup_stdio+0x10>
 8008f50:	f001 fcba 	bl	800a8c8 <_fflush_r>
 8008f54:	68a1      	ldr	r1, [r4, #8]
 8008f56:	4b09      	ldr	r3, [pc, #36]	; (8008f7c <cleanup_stdio+0x38>)
 8008f58:	4299      	cmp	r1, r3
 8008f5a:	d002      	beq.n	8008f62 <cleanup_stdio+0x1e>
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f001 fcb3 	bl	800a8c8 <_fflush_r>
 8008f62:	68e1      	ldr	r1, [r4, #12]
 8008f64:	4b06      	ldr	r3, [pc, #24]	; (8008f80 <cleanup_stdio+0x3c>)
 8008f66:	4299      	cmp	r1, r3
 8008f68:	d004      	beq.n	8008f74 <cleanup_stdio+0x30>
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f70:	f001 bcaa 	b.w	800a8c8 <_fflush_r>
 8008f74:	bd10      	pop	{r4, pc}
 8008f76:	bf00      	nop
 8008f78:	20010670 	.word	0x20010670
 8008f7c:	200106d8 	.word	0x200106d8
 8008f80:	20010740 	.word	0x20010740

08008f84 <global_stdio_init.part.0>:
 8008f84:	b510      	push	{r4, lr}
 8008f86:	4b0b      	ldr	r3, [pc, #44]	; (8008fb4 <global_stdio_init.part.0+0x30>)
 8008f88:	4c0b      	ldr	r4, [pc, #44]	; (8008fb8 <global_stdio_init.part.0+0x34>)
 8008f8a:	4a0c      	ldr	r2, [pc, #48]	; (8008fbc <global_stdio_init.part.0+0x38>)
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	4620      	mov	r0, r4
 8008f90:	2200      	movs	r2, #0
 8008f92:	2104      	movs	r1, #4
 8008f94:	f7ff ff94 	bl	8008ec0 <std>
 8008f98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	2109      	movs	r1, #9
 8008fa0:	f7ff ff8e 	bl	8008ec0 <std>
 8008fa4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008fa8:	2202      	movs	r2, #2
 8008faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fae:	2112      	movs	r1, #18
 8008fb0:	f7ff bf86 	b.w	8008ec0 <std>
 8008fb4:	200107a8 	.word	0x200107a8
 8008fb8:	20010670 	.word	0x20010670
 8008fbc:	08008f2d 	.word	0x08008f2d

08008fc0 <__sfp_lock_acquire>:
 8008fc0:	4801      	ldr	r0, [pc, #4]	; (8008fc8 <__sfp_lock_acquire+0x8>)
 8008fc2:	f000 b900 	b.w	80091c6 <__retarget_lock_acquire_recursive>
 8008fc6:	bf00      	nop
 8008fc8:	200107b1 	.word	0x200107b1

08008fcc <__sfp_lock_release>:
 8008fcc:	4801      	ldr	r0, [pc, #4]	; (8008fd4 <__sfp_lock_release+0x8>)
 8008fce:	f000 b8fb 	b.w	80091c8 <__retarget_lock_release_recursive>
 8008fd2:	bf00      	nop
 8008fd4:	200107b1 	.word	0x200107b1

08008fd8 <__sinit>:
 8008fd8:	b510      	push	{r4, lr}
 8008fda:	4604      	mov	r4, r0
 8008fdc:	f7ff fff0 	bl	8008fc0 <__sfp_lock_acquire>
 8008fe0:	6a23      	ldr	r3, [r4, #32]
 8008fe2:	b11b      	cbz	r3, 8008fec <__sinit+0x14>
 8008fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fe8:	f7ff bff0 	b.w	8008fcc <__sfp_lock_release>
 8008fec:	4b04      	ldr	r3, [pc, #16]	; (8009000 <__sinit+0x28>)
 8008fee:	6223      	str	r3, [r4, #32]
 8008ff0:	4b04      	ldr	r3, [pc, #16]	; (8009004 <__sinit+0x2c>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1f5      	bne.n	8008fe4 <__sinit+0xc>
 8008ff8:	f7ff ffc4 	bl	8008f84 <global_stdio_init.part.0>
 8008ffc:	e7f2      	b.n	8008fe4 <__sinit+0xc>
 8008ffe:	bf00      	nop
 8009000:	08008f45 	.word	0x08008f45
 8009004:	200107a8 	.word	0x200107a8

08009008 <_fwalk_sglue>:
 8009008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800900c:	4607      	mov	r7, r0
 800900e:	4688      	mov	r8, r1
 8009010:	4614      	mov	r4, r2
 8009012:	2600      	movs	r6, #0
 8009014:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009018:	f1b9 0901 	subs.w	r9, r9, #1
 800901c:	d505      	bpl.n	800902a <_fwalk_sglue+0x22>
 800901e:	6824      	ldr	r4, [r4, #0]
 8009020:	2c00      	cmp	r4, #0
 8009022:	d1f7      	bne.n	8009014 <_fwalk_sglue+0xc>
 8009024:	4630      	mov	r0, r6
 8009026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800902a:	89ab      	ldrh	r3, [r5, #12]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d907      	bls.n	8009040 <_fwalk_sglue+0x38>
 8009030:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009034:	3301      	adds	r3, #1
 8009036:	d003      	beq.n	8009040 <_fwalk_sglue+0x38>
 8009038:	4629      	mov	r1, r5
 800903a:	4638      	mov	r0, r7
 800903c:	47c0      	blx	r8
 800903e:	4306      	orrs	r6, r0
 8009040:	3568      	adds	r5, #104	; 0x68
 8009042:	e7e9      	b.n	8009018 <_fwalk_sglue+0x10>

08009044 <__sread>:
 8009044:	b510      	push	{r4, lr}
 8009046:	460c      	mov	r4, r1
 8009048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800904c:	f000 f86c 	bl	8009128 <_read_r>
 8009050:	2800      	cmp	r0, #0
 8009052:	bfab      	itete	ge
 8009054:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009056:	89a3      	ldrhlt	r3, [r4, #12]
 8009058:	181b      	addge	r3, r3, r0
 800905a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800905e:	bfac      	ite	ge
 8009060:	6563      	strge	r3, [r4, #84]	; 0x54
 8009062:	81a3      	strhlt	r3, [r4, #12]
 8009064:	bd10      	pop	{r4, pc}

08009066 <__swrite>:
 8009066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906a:	461f      	mov	r7, r3
 800906c:	898b      	ldrh	r3, [r1, #12]
 800906e:	05db      	lsls	r3, r3, #23
 8009070:	4605      	mov	r5, r0
 8009072:	460c      	mov	r4, r1
 8009074:	4616      	mov	r6, r2
 8009076:	d505      	bpl.n	8009084 <__swrite+0x1e>
 8009078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800907c:	2302      	movs	r3, #2
 800907e:	2200      	movs	r2, #0
 8009080:	f000 f840 	bl	8009104 <_lseek_r>
 8009084:	89a3      	ldrh	r3, [r4, #12]
 8009086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800908a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800908e:	81a3      	strh	r3, [r4, #12]
 8009090:	4632      	mov	r2, r6
 8009092:	463b      	mov	r3, r7
 8009094:	4628      	mov	r0, r5
 8009096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800909a:	f000 b857 	b.w	800914c <_write_r>

0800909e <__sseek>:
 800909e:	b510      	push	{r4, lr}
 80090a0:	460c      	mov	r4, r1
 80090a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a6:	f000 f82d 	bl	8009104 <_lseek_r>
 80090aa:	1c43      	adds	r3, r0, #1
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	bf15      	itete	ne
 80090b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80090b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090ba:	81a3      	strheq	r3, [r4, #12]
 80090bc:	bf18      	it	ne
 80090be:	81a3      	strhne	r3, [r4, #12]
 80090c0:	bd10      	pop	{r4, pc}

080090c2 <__sclose>:
 80090c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c6:	f000 b80d 	b.w	80090e4 <_close_r>

080090ca <memset>:
 80090ca:	4402      	add	r2, r0
 80090cc:	4603      	mov	r3, r0
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d100      	bne.n	80090d4 <memset+0xa>
 80090d2:	4770      	bx	lr
 80090d4:	f803 1b01 	strb.w	r1, [r3], #1
 80090d8:	e7f9      	b.n	80090ce <memset+0x4>
	...

080090dc <_localeconv_r>:
 80090dc:	4800      	ldr	r0, [pc, #0]	; (80090e0 <_localeconv_r+0x4>)
 80090de:	4770      	bx	lr
 80090e0:	200001f0 	.word	0x200001f0

080090e4 <_close_r>:
 80090e4:	b538      	push	{r3, r4, r5, lr}
 80090e6:	4d06      	ldr	r5, [pc, #24]	; (8009100 <_close_r+0x1c>)
 80090e8:	2300      	movs	r3, #0
 80090ea:	4604      	mov	r4, r0
 80090ec:	4608      	mov	r0, r1
 80090ee:	602b      	str	r3, [r5, #0]
 80090f0:	f7f8 ff75 	bl	8001fde <_close>
 80090f4:	1c43      	adds	r3, r0, #1
 80090f6:	d102      	bne.n	80090fe <_close_r+0x1a>
 80090f8:	682b      	ldr	r3, [r5, #0]
 80090fa:	b103      	cbz	r3, 80090fe <_close_r+0x1a>
 80090fc:	6023      	str	r3, [r4, #0]
 80090fe:	bd38      	pop	{r3, r4, r5, pc}
 8009100:	200107ac 	.word	0x200107ac

08009104 <_lseek_r>:
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	4d07      	ldr	r5, [pc, #28]	; (8009124 <_lseek_r+0x20>)
 8009108:	4604      	mov	r4, r0
 800910a:	4608      	mov	r0, r1
 800910c:	4611      	mov	r1, r2
 800910e:	2200      	movs	r2, #0
 8009110:	602a      	str	r2, [r5, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	f7f8 ff8a 	bl	800202c <_lseek>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d102      	bne.n	8009122 <_lseek_r+0x1e>
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	b103      	cbz	r3, 8009122 <_lseek_r+0x1e>
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	bd38      	pop	{r3, r4, r5, pc}
 8009124:	200107ac 	.word	0x200107ac

08009128 <_read_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	4d07      	ldr	r5, [pc, #28]	; (8009148 <_read_r+0x20>)
 800912c:	4604      	mov	r4, r0
 800912e:	4608      	mov	r0, r1
 8009130:	4611      	mov	r1, r2
 8009132:	2200      	movs	r2, #0
 8009134:	602a      	str	r2, [r5, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	f7f8 ff18 	bl	8001f6c <_read>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d102      	bne.n	8009146 <_read_r+0x1e>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	b103      	cbz	r3, 8009146 <_read_r+0x1e>
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	bd38      	pop	{r3, r4, r5, pc}
 8009148:	200107ac 	.word	0x200107ac

0800914c <_write_r>:
 800914c:	b538      	push	{r3, r4, r5, lr}
 800914e:	4d07      	ldr	r5, [pc, #28]	; (800916c <_write_r+0x20>)
 8009150:	4604      	mov	r4, r0
 8009152:	4608      	mov	r0, r1
 8009154:	4611      	mov	r1, r2
 8009156:	2200      	movs	r2, #0
 8009158:	602a      	str	r2, [r5, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	f7f8 ff23 	bl	8001fa6 <_write>
 8009160:	1c43      	adds	r3, r0, #1
 8009162:	d102      	bne.n	800916a <_write_r+0x1e>
 8009164:	682b      	ldr	r3, [r5, #0]
 8009166:	b103      	cbz	r3, 800916a <_write_r+0x1e>
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	bd38      	pop	{r3, r4, r5, pc}
 800916c:	200107ac 	.word	0x200107ac

08009170 <__errno>:
 8009170:	4b01      	ldr	r3, [pc, #4]	; (8009178 <__errno+0x8>)
 8009172:	6818      	ldr	r0, [r3, #0]
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	200000fc 	.word	0x200000fc

0800917c <__libc_init_array>:
 800917c:	b570      	push	{r4, r5, r6, lr}
 800917e:	4d0d      	ldr	r5, [pc, #52]	; (80091b4 <__libc_init_array+0x38>)
 8009180:	4c0d      	ldr	r4, [pc, #52]	; (80091b8 <__libc_init_array+0x3c>)
 8009182:	1b64      	subs	r4, r4, r5
 8009184:	10a4      	asrs	r4, r4, #2
 8009186:	2600      	movs	r6, #0
 8009188:	42a6      	cmp	r6, r4
 800918a:	d109      	bne.n	80091a0 <__libc_init_array+0x24>
 800918c:	4d0b      	ldr	r5, [pc, #44]	; (80091bc <__libc_init_array+0x40>)
 800918e:	4c0c      	ldr	r4, [pc, #48]	; (80091c0 <__libc_init_array+0x44>)
 8009190:	f001 feee 	bl	800af70 <_init>
 8009194:	1b64      	subs	r4, r4, r5
 8009196:	10a4      	asrs	r4, r4, #2
 8009198:	2600      	movs	r6, #0
 800919a:	42a6      	cmp	r6, r4
 800919c:	d105      	bne.n	80091aa <__libc_init_array+0x2e>
 800919e:	bd70      	pop	{r4, r5, r6, pc}
 80091a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80091a4:	4798      	blx	r3
 80091a6:	3601      	adds	r6, #1
 80091a8:	e7ee      	b.n	8009188 <__libc_init_array+0xc>
 80091aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ae:	4798      	blx	r3
 80091b0:	3601      	adds	r6, #1
 80091b2:	e7f2      	b.n	800919a <__libc_init_array+0x1e>
 80091b4:	0800b31c 	.word	0x0800b31c
 80091b8:	0800b31c 	.word	0x0800b31c
 80091bc:	0800b31c 	.word	0x0800b31c
 80091c0:	0800b320 	.word	0x0800b320

080091c4 <__retarget_lock_init_recursive>:
 80091c4:	4770      	bx	lr

080091c6 <__retarget_lock_acquire_recursive>:
 80091c6:	4770      	bx	lr

080091c8 <__retarget_lock_release_recursive>:
 80091c8:	4770      	bx	lr

080091ca <quorem>:
 80091ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ce:	6903      	ldr	r3, [r0, #16]
 80091d0:	690c      	ldr	r4, [r1, #16]
 80091d2:	42a3      	cmp	r3, r4
 80091d4:	4607      	mov	r7, r0
 80091d6:	db7e      	blt.n	80092d6 <quorem+0x10c>
 80091d8:	3c01      	subs	r4, #1
 80091da:	f101 0814 	add.w	r8, r1, #20
 80091de:	f100 0514 	add.w	r5, r0, #20
 80091e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091e6:	9301      	str	r3, [sp, #4]
 80091e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80091ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091f0:	3301      	adds	r3, #1
 80091f2:	429a      	cmp	r2, r3
 80091f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80091f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80091fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009200:	d331      	bcc.n	8009266 <quorem+0x9c>
 8009202:	f04f 0e00 	mov.w	lr, #0
 8009206:	4640      	mov	r0, r8
 8009208:	46ac      	mov	ip, r5
 800920a:	46f2      	mov	sl, lr
 800920c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009210:	b293      	uxth	r3, r2
 8009212:	fb06 e303 	mla	r3, r6, r3, lr
 8009216:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800921a:	0c1a      	lsrs	r2, r3, #16
 800921c:	b29b      	uxth	r3, r3
 800921e:	ebaa 0303 	sub.w	r3, sl, r3
 8009222:	f8dc a000 	ldr.w	sl, [ip]
 8009226:	fa13 f38a 	uxtah	r3, r3, sl
 800922a:	fb06 220e 	mla	r2, r6, lr, r2
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	9b00      	ldr	r3, [sp, #0]
 8009232:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009236:	b292      	uxth	r2, r2
 8009238:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800923c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009240:	f8bd 3000 	ldrh.w	r3, [sp]
 8009244:	4581      	cmp	r9, r0
 8009246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800924a:	f84c 3b04 	str.w	r3, [ip], #4
 800924e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009252:	d2db      	bcs.n	800920c <quorem+0x42>
 8009254:	f855 300b 	ldr.w	r3, [r5, fp]
 8009258:	b92b      	cbnz	r3, 8009266 <quorem+0x9c>
 800925a:	9b01      	ldr	r3, [sp, #4]
 800925c:	3b04      	subs	r3, #4
 800925e:	429d      	cmp	r5, r3
 8009260:	461a      	mov	r2, r3
 8009262:	d32c      	bcc.n	80092be <quorem+0xf4>
 8009264:	613c      	str	r4, [r7, #16]
 8009266:	4638      	mov	r0, r7
 8009268:	f001 f9a8 	bl	800a5bc <__mcmp>
 800926c:	2800      	cmp	r0, #0
 800926e:	db22      	blt.n	80092b6 <quorem+0xec>
 8009270:	3601      	adds	r6, #1
 8009272:	4629      	mov	r1, r5
 8009274:	2000      	movs	r0, #0
 8009276:	f858 2b04 	ldr.w	r2, [r8], #4
 800927a:	f8d1 c000 	ldr.w	ip, [r1]
 800927e:	b293      	uxth	r3, r2
 8009280:	1ac3      	subs	r3, r0, r3
 8009282:	0c12      	lsrs	r2, r2, #16
 8009284:	fa13 f38c 	uxtah	r3, r3, ip
 8009288:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800928c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009290:	b29b      	uxth	r3, r3
 8009292:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009296:	45c1      	cmp	r9, r8
 8009298:	f841 3b04 	str.w	r3, [r1], #4
 800929c:	ea4f 4022 	mov.w	r0, r2, asr #16
 80092a0:	d2e9      	bcs.n	8009276 <quorem+0xac>
 80092a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092aa:	b922      	cbnz	r2, 80092b6 <quorem+0xec>
 80092ac:	3b04      	subs	r3, #4
 80092ae:	429d      	cmp	r5, r3
 80092b0:	461a      	mov	r2, r3
 80092b2:	d30a      	bcc.n	80092ca <quorem+0x100>
 80092b4:	613c      	str	r4, [r7, #16]
 80092b6:	4630      	mov	r0, r6
 80092b8:	b003      	add	sp, #12
 80092ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092be:	6812      	ldr	r2, [r2, #0]
 80092c0:	3b04      	subs	r3, #4
 80092c2:	2a00      	cmp	r2, #0
 80092c4:	d1ce      	bne.n	8009264 <quorem+0x9a>
 80092c6:	3c01      	subs	r4, #1
 80092c8:	e7c9      	b.n	800925e <quorem+0x94>
 80092ca:	6812      	ldr	r2, [r2, #0]
 80092cc:	3b04      	subs	r3, #4
 80092ce:	2a00      	cmp	r2, #0
 80092d0:	d1f0      	bne.n	80092b4 <quorem+0xea>
 80092d2:	3c01      	subs	r4, #1
 80092d4:	e7eb      	b.n	80092ae <quorem+0xe4>
 80092d6:	2000      	movs	r0, #0
 80092d8:	e7ee      	b.n	80092b8 <quorem+0xee>
 80092da:	0000      	movs	r0, r0
 80092dc:	0000      	movs	r0, r0
	...

080092e0 <_dtoa_r>:
 80092e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e4:	ed2d 8b04 	vpush	{d8-d9}
 80092e8:	69c5      	ldr	r5, [r0, #28]
 80092ea:	b093      	sub	sp, #76	; 0x4c
 80092ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80092f0:	ec57 6b10 	vmov	r6, r7, d0
 80092f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80092f8:	9107      	str	r1, [sp, #28]
 80092fa:	4604      	mov	r4, r0
 80092fc:	920a      	str	r2, [sp, #40]	; 0x28
 80092fe:	930d      	str	r3, [sp, #52]	; 0x34
 8009300:	b975      	cbnz	r5, 8009320 <_dtoa_r+0x40>
 8009302:	2010      	movs	r0, #16
 8009304:	f000 fe2a 	bl	8009f5c <malloc>
 8009308:	4602      	mov	r2, r0
 800930a:	61e0      	str	r0, [r4, #28]
 800930c:	b920      	cbnz	r0, 8009318 <_dtoa_r+0x38>
 800930e:	4bae      	ldr	r3, [pc, #696]	; (80095c8 <_dtoa_r+0x2e8>)
 8009310:	21ef      	movs	r1, #239	; 0xef
 8009312:	48ae      	ldr	r0, [pc, #696]	; (80095cc <_dtoa_r+0x2ec>)
 8009314:	f001 fb1e 	bl	800a954 <__assert_func>
 8009318:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800931c:	6005      	str	r5, [r0, #0]
 800931e:	60c5      	str	r5, [r0, #12]
 8009320:	69e3      	ldr	r3, [r4, #28]
 8009322:	6819      	ldr	r1, [r3, #0]
 8009324:	b151      	cbz	r1, 800933c <_dtoa_r+0x5c>
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	604a      	str	r2, [r1, #4]
 800932a:	2301      	movs	r3, #1
 800932c:	4093      	lsls	r3, r2
 800932e:	608b      	str	r3, [r1, #8]
 8009330:	4620      	mov	r0, r4
 8009332:	f000 ff07 	bl	800a144 <_Bfree>
 8009336:	69e3      	ldr	r3, [r4, #28]
 8009338:	2200      	movs	r2, #0
 800933a:	601a      	str	r2, [r3, #0]
 800933c:	1e3b      	subs	r3, r7, #0
 800933e:	bfbb      	ittet	lt
 8009340:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009344:	9303      	strlt	r3, [sp, #12]
 8009346:	2300      	movge	r3, #0
 8009348:	2201      	movlt	r2, #1
 800934a:	bfac      	ite	ge
 800934c:	f8c8 3000 	strge.w	r3, [r8]
 8009350:	f8c8 2000 	strlt.w	r2, [r8]
 8009354:	4b9e      	ldr	r3, [pc, #632]	; (80095d0 <_dtoa_r+0x2f0>)
 8009356:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800935a:	ea33 0308 	bics.w	r3, r3, r8
 800935e:	d11b      	bne.n	8009398 <_dtoa_r+0xb8>
 8009360:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009362:	f242 730f 	movw	r3, #9999	; 0x270f
 8009366:	6013      	str	r3, [r2, #0]
 8009368:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800936c:	4333      	orrs	r3, r6
 800936e:	f000 8593 	beq.w	8009e98 <_dtoa_r+0xbb8>
 8009372:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009374:	b963      	cbnz	r3, 8009390 <_dtoa_r+0xb0>
 8009376:	4b97      	ldr	r3, [pc, #604]	; (80095d4 <_dtoa_r+0x2f4>)
 8009378:	e027      	b.n	80093ca <_dtoa_r+0xea>
 800937a:	4b97      	ldr	r3, [pc, #604]	; (80095d8 <_dtoa_r+0x2f8>)
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	3308      	adds	r3, #8
 8009380:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009382:	6013      	str	r3, [r2, #0]
 8009384:	9800      	ldr	r0, [sp, #0]
 8009386:	b013      	add	sp, #76	; 0x4c
 8009388:	ecbd 8b04 	vpop	{d8-d9}
 800938c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009390:	4b90      	ldr	r3, [pc, #576]	; (80095d4 <_dtoa_r+0x2f4>)
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	3303      	adds	r3, #3
 8009396:	e7f3      	b.n	8009380 <_dtoa_r+0xa0>
 8009398:	ed9d 7b02 	vldr	d7, [sp, #8]
 800939c:	2200      	movs	r2, #0
 800939e:	ec51 0b17 	vmov	r0, r1, d7
 80093a2:	eeb0 8a47 	vmov.f32	s16, s14
 80093a6:	eef0 8a67 	vmov.f32	s17, s15
 80093aa:	2300      	movs	r3, #0
 80093ac:	f7f7 fb94 	bl	8000ad8 <__aeabi_dcmpeq>
 80093b0:	4681      	mov	r9, r0
 80093b2:	b160      	cbz	r0, 80093ce <_dtoa_r+0xee>
 80093b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093b6:	2301      	movs	r3, #1
 80093b8:	6013      	str	r3, [r2, #0]
 80093ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 8568 	beq.w	8009e92 <_dtoa_r+0xbb2>
 80093c2:	4b86      	ldr	r3, [pc, #536]	; (80095dc <_dtoa_r+0x2fc>)
 80093c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	3b01      	subs	r3, #1
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	e7da      	b.n	8009384 <_dtoa_r+0xa4>
 80093ce:	aa10      	add	r2, sp, #64	; 0x40
 80093d0:	a911      	add	r1, sp, #68	; 0x44
 80093d2:	4620      	mov	r0, r4
 80093d4:	eeb0 0a48 	vmov.f32	s0, s16
 80093d8:	eef0 0a68 	vmov.f32	s1, s17
 80093dc:	f001 f994 	bl	800a708 <__d2b>
 80093e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80093e4:	4682      	mov	sl, r0
 80093e6:	2d00      	cmp	r5, #0
 80093e8:	d07f      	beq.n	80094ea <_dtoa_r+0x20a>
 80093ea:	ee18 3a90 	vmov	r3, s17
 80093ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80093f6:	ec51 0b18 	vmov	r0, r1, d8
 80093fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80093fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009402:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009406:	4619      	mov	r1, r3
 8009408:	2200      	movs	r2, #0
 800940a:	4b75      	ldr	r3, [pc, #468]	; (80095e0 <_dtoa_r+0x300>)
 800940c:	f7f6 ff44 	bl	8000298 <__aeabi_dsub>
 8009410:	a367      	add	r3, pc, #412	; (adr r3, 80095b0 <_dtoa_r+0x2d0>)
 8009412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009416:	f7f7 f8f7 	bl	8000608 <__aeabi_dmul>
 800941a:	a367      	add	r3, pc, #412	; (adr r3, 80095b8 <_dtoa_r+0x2d8>)
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	f7f6 ff3c 	bl	800029c <__adddf3>
 8009424:	4606      	mov	r6, r0
 8009426:	4628      	mov	r0, r5
 8009428:	460f      	mov	r7, r1
 800942a:	f7f7 f883 	bl	8000534 <__aeabi_i2d>
 800942e:	a364      	add	r3, pc, #400	; (adr r3, 80095c0 <_dtoa_r+0x2e0>)
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	f7f7 f8e8 	bl	8000608 <__aeabi_dmul>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4630      	mov	r0, r6
 800943e:	4639      	mov	r1, r7
 8009440:	f7f6 ff2c 	bl	800029c <__adddf3>
 8009444:	4606      	mov	r6, r0
 8009446:	460f      	mov	r7, r1
 8009448:	f7f7 fb8e 	bl	8000b68 <__aeabi_d2iz>
 800944c:	2200      	movs	r2, #0
 800944e:	4683      	mov	fp, r0
 8009450:	2300      	movs	r3, #0
 8009452:	4630      	mov	r0, r6
 8009454:	4639      	mov	r1, r7
 8009456:	f7f7 fb49 	bl	8000aec <__aeabi_dcmplt>
 800945a:	b148      	cbz	r0, 8009470 <_dtoa_r+0x190>
 800945c:	4658      	mov	r0, fp
 800945e:	f7f7 f869 	bl	8000534 <__aeabi_i2d>
 8009462:	4632      	mov	r2, r6
 8009464:	463b      	mov	r3, r7
 8009466:	f7f7 fb37 	bl	8000ad8 <__aeabi_dcmpeq>
 800946a:	b908      	cbnz	r0, 8009470 <_dtoa_r+0x190>
 800946c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009470:	f1bb 0f16 	cmp.w	fp, #22
 8009474:	d857      	bhi.n	8009526 <_dtoa_r+0x246>
 8009476:	4b5b      	ldr	r3, [pc, #364]	; (80095e4 <_dtoa_r+0x304>)
 8009478:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800947c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009480:	ec51 0b18 	vmov	r0, r1, d8
 8009484:	f7f7 fb32 	bl	8000aec <__aeabi_dcmplt>
 8009488:	2800      	cmp	r0, #0
 800948a:	d04e      	beq.n	800952a <_dtoa_r+0x24a>
 800948c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009490:	2300      	movs	r3, #0
 8009492:	930c      	str	r3, [sp, #48]	; 0x30
 8009494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009496:	1b5b      	subs	r3, r3, r5
 8009498:	1e5a      	subs	r2, r3, #1
 800949a:	bf45      	ittet	mi
 800949c:	f1c3 0301 	rsbmi	r3, r3, #1
 80094a0:	9305      	strmi	r3, [sp, #20]
 80094a2:	2300      	movpl	r3, #0
 80094a4:	2300      	movmi	r3, #0
 80094a6:	9206      	str	r2, [sp, #24]
 80094a8:	bf54      	ite	pl
 80094aa:	9305      	strpl	r3, [sp, #20]
 80094ac:	9306      	strmi	r3, [sp, #24]
 80094ae:	f1bb 0f00 	cmp.w	fp, #0
 80094b2:	db3c      	blt.n	800952e <_dtoa_r+0x24e>
 80094b4:	9b06      	ldr	r3, [sp, #24]
 80094b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80094ba:	445b      	add	r3, fp
 80094bc:	9306      	str	r3, [sp, #24]
 80094be:	2300      	movs	r3, #0
 80094c0:	9308      	str	r3, [sp, #32]
 80094c2:	9b07      	ldr	r3, [sp, #28]
 80094c4:	2b09      	cmp	r3, #9
 80094c6:	d868      	bhi.n	800959a <_dtoa_r+0x2ba>
 80094c8:	2b05      	cmp	r3, #5
 80094ca:	bfc4      	itt	gt
 80094cc:	3b04      	subgt	r3, #4
 80094ce:	9307      	strgt	r3, [sp, #28]
 80094d0:	9b07      	ldr	r3, [sp, #28]
 80094d2:	f1a3 0302 	sub.w	r3, r3, #2
 80094d6:	bfcc      	ite	gt
 80094d8:	2500      	movgt	r5, #0
 80094da:	2501      	movle	r5, #1
 80094dc:	2b03      	cmp	r3, #3
 80094de:	f200 8085 	bhi.w	80095ec <_dtoa_r+0x30c>
 80094e2:	e8df f003 	tbb	[pc, r3]
 80094e6:	3b2e      	.short	0x3b2e
 80094e8:	5839      	.short	0x5839
 80094ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80094ee:	441d      	add	r5, r3
 80094f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80094f4:	2b20      	cmp	r3, #32
 80094f6:	bfc1      	itttt	gt
 80094f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80094fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8009500:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009504:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009508:	bfd6      	itet	le
 800950a:	f1c3 0320 	rsble	r3, r3, #32
 800950e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009512:	fa06 f003 	lslle.w	r0, r6, r3
 8009516:	f7f6 fffd 	bl	8000514 <__aeabi_ui2d>
 800951a:	2201      	movs	r2, #1
 800951c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009520:	3d01      	subs	r5, #1
 8009522:	920e      	str	r2, [sp, #56]	; 0x38
 8009524:	e76f      	b.n	8009406 <_dtoa_r+0x126>
 8009526:	2301      	movs	r3, #1
 8009528:	e7b3      	b.n	8009492 <_dtoa_r+0x1b2>
 800952a:	900c      	str	r0, [sp, #48]	; 0x30
 800952c:	e7b2      	b.n	8009494 <_dtoa_r+0x1b4>
 800952e:	9b05      	ldr	r3, [sp, #20]
 8009530:	eba3 030b 	sub.w	r3, r3, fp
 8009534:	9305      	str	r3, [sp, #20]
 8009536:	f1cb 0300 	rsb	r3, fp, #0
 800953a:	9308      	str	r3, [sp, #32]
 800953c:	2300      	movs	r3, #0
 800953e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009540:	e7bf      	b.n	80094c2 <_dtoa_r+0x1e2>
 8009542:	2300      	movs	r3, #0
 8009544:	9309      	str	r3, [sp, #36]	; 0x24
 8009546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009548:	2b00      	cmp	r3, #0
 800954a:	dc52      	bgt.n	80095f2 <_dtoa_r+0x312>
 800954c:	2301      	movs	r3, #1
 800954e:	9301      	str	r3, [sp, #4]
 8009550:	9304      	str	r3, [sp, #16]
 8009552:	461a      	mov	r2, r3
 8009554:	920a      	str	r2, [sp, #40]	; 0x28
 8009556:	e00b      	b.n	8009570 <_dtoa_r+0x290>
 8009558:	2301      	movs	r3, #1
 800955a:	e7f3      	b.n	8009544 <_dtoa_r+0x264>
 800955c:	2300      	movs	r3, #0
 800955e:	9309      	str	r3, [sp, #36]	; 0x24
 8009560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009562:	445b      	add	r3, fp
 8009564:	9301      	str	r3, [sp, #4]
 8009566:	3301      	adds	r3, #1
 8009568:	2b01      	cmp	r3, #1
 800956a:	9304      	str	r3, [sp, #16]
 800956c:	bfb8      	it	lt
 800956e:	2301      	movlt	r3, #1
 8009570:	69e0      	ldr	r0, [r4, #28]
 8009572:	2100      	movs	r1, #0
 8009574:	2204      	movs	r2, #4
 8009576:	f102 0614 	add.w	r6, r2, #20
 800957a:	429e      	cmp	r6, r3
 800957c:	d93d      	bls.n	80095fa <_dtoa_r+0x31a>
 800957e:	6041      	str	r1, [r0, #4]
 8009580:	4620      	mov	r0, r4
 8009582:	f000 fd9f 	bl	800a0c4 <_Balloc>
 8009586:	9000      	str	r0, [sp, #0]
 8009588:	2800      	cmp	r0, #0
 800958a:	d139      	bne.n	8009600 <_dtoa_r+0x320>
 800958c:	4b16      	ldr	r3, [pc, #88]	; (80095e8 <_dtoa_r+0x308>)
 800958e:	4602      	mov	r2, r0
 8009590:	f240 11af 	movw	r1, #431	; 0x1af
 8009594:	e6bd      	b.n	8009312 <_dtoa_r+0x32>
 8009596:	2301      	movs	r3, #1
 8009598:	e7e1      	b.n	800955e <_dtoa_r+0x27e>
 800959a:	2501      	movs	r5, #1
 800959c:	2300      	movs	r3, #0
 800959e:	9307      	str	r3, [sp, #28]
 80095a0:	9509      	str	r5, [sp, #36]	; 0x24
 80095a2:	f04f 33ff 	mov.w	r3, #4294967295
 80095a6:	9301      	str	r3, [sp, #4]
 80095a8:	9304      	str	r3, [sp, #16]
 80095aa:	2200      	movs	r2, #0
 80095ac:	2312      	movs	r3, #18
 80095ae:	e7d1      	b.n	8009554 <_dtoa_r+0x274>
 80095b0:	636f4361 	.word	0x636f4361
 80095b4:	3fd287a7 	.word	0x3fd287a7
 80095b8:	8b60c8b3 	.word	0x8b60c8b3
 80095bc:	3fc68a28 	.word	0x3fc68a28
 80095c0:	509f79fb 	.word	0x509f79fb
 80095c4:	3fd34413 	.word	0x3fd34413
 80095c8:	0800afe1 	.word	0x0800afe1
 80095cc:	0800aff8 	.word	0x0800aff8
 80095d0:	7ff00000 	.word	0x7ff00000
 80095d4:	0800afdd 	.word	0x0800afdd
 80095d8:	0800afd4 	.word	0x0800afd4
 80095dc:	0800afb1 	.word	0x0800afb1
 80095e0:	3ff80000 	.word	0x3ff80000
 80095e4:	0800b0e8 	.word	0x0800b0e8
 80095e8:	0800b050 	.word	0x0800b050
 80095ec:	2301      	movs	r3, #1
 80095ee:	9309      	str	r3, [sp, #36]	; 0x24
 80095f0:	e7d7      	b.n	80095a2 <_dtoa_r+0x2c2>
 80095f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095f4:	9301      	str	r3, [sp, #4]
 80095f6:	9304      	str	r3, [sp, #16]
 80095f8:	e7ba      	b.n	8009570 <_dtoa_r+0x290>
 80095fa:	3101      	adds	r1, #1
 80095fc:	0052      	lsls	r2, r2, #1
 80095fe:	e7ba      	b.n	8009576 <_dtoa_r+0x296>
 8009600:	69e3      	ldr	r3, [r4, #28]
 8009602:	9a00      	ldr	r2, [sp, #0]
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	9b04      	ldr	r3, [sp, #16]
 8009608:	2b0e      	cmp	r3, #14
 800960a:	f200 80a8 	bhi.w	800975e <_dtoa_r+0x47e>
 800960e:	2d00      	cmp	r5, #0
 8009610:	f000 80a5 	beq.w	800975e <_dtoa_r+0x47e>
 8009614:	f1bb 0f00 	cmp.w	fp, #0
 8009618:	dd38      	ble.n	800968c <_dtoa_r+0x3ac>
 800961a:	4bc0      	ldr	r3, [pc, #768]	; (800991c <_dtoa_r+0x63c>)
 800961c:	f00b 020f 	and.w	r2, fp, #15
 8009620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009624:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009628:	e9d3 6700 	ldrd	r6, r7, [r3]
 800962c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009630:	d019      	beq.n	8009666 <_dtoa_r+0x386>
 8009632:	4bbb      	ldr	r3, [pc, #748]	; (8009920 <_dtoa_r+0x640>)
 8009634:	ec51 0b18 	vmov	r0, r1, d8
 8009638:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800963c:	f7f7 f90e 	bl	800085c <__aeabi_ddiv>
 8009640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009644:	f008 080f 	and.w	r8, r8, #15
 8009648:	2503      	movs	r5, #3
 800964a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009920 <_dtoa_r+0x640>
 800964e:	f1b8 0f00 	cmp.w	r8, #0
 8009652:	d10a      	bne.n	800966a <_dtoa_r+0x38a>
 8009654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009658:	4632      	mov	r2, r6
 800965a:	463b      	mov	r3, r7
 800965c:	f7f7 f8fe 	bl	800085c <__aeabi_ddiv>
 8009660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009664:	e02b      	b.n	80096be <_dtoa_r+0x3de>
 8009666:	2502      	movs	r5, #2
 8009668:	e7ef      	b.n	800964a <_dtoa_r+0x36a>
 800966a:	f018 0f01 	tst.w	r8, #1
 800966e:	d008      	beq.n	8009682 <_dtoa_r+0x3a2>
 8009670:	4630      	mov	r0, r6
 8009672:	4639      	mov	r1, r7
 8009674:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009678:	f7f6 ffc6 	bl	8000608 <__aeabi_dmul>
 800967c:	3501      	adds	r5, #1
 800967e:	4606      	mov	r6, r0
 8009680:	460f      	mov	r7, r1
 8009682:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009686:	f109 0908 	add.w	r9, r9, #8
 800968a:	e7e0      	b.n	800964e <_dtoa_r+0x36e>
 800968c:	f000 809f 	beq.w	80097ce <_dtoa_r+0x4ee>
 8009690:	f1cb 0600 	rsb	r6, fp, #0
 8009694:	4ba1      	ldr	r3, [pc, #644]	; (800991c <_dtoa_r+0x63c>)
 8009696:	4fa2      	ldr	r7, [pc, #648]	; (8009920 <_dtoa_r+0x640>)
 8009698:	f006 020f 	and.w	r2, r6, #15
 800969c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a4:	ec51 0b18 	vmov	r0, r1, d8
 80096a8:	f7f6 ffae 	bl	8000608 <__aeabi_dmul>
 80096ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096b0:	1136      	asrs	r6, r6, #4
 80096b2:	2300      	movs	r3, #0
 80096b4:	2502      	movs	r5, #2
 80096b6:	2e00      	cmp	r6, #0
 80096b8:	d17e      	bne.n	80097b8 <_dtoa_r+0x4d8>
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1d0      	bne.n	8009660 <_dtoa_r+0x380>
 80096be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f000 8084 	beq.w	80097d2 <_dtoa_r+0x4f2>
 80096ca:	4b96      	ldr	r3, [pc, #600]	; (8009924 <_dtoa_r+0x644>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	4640      	mov	r0, r8
 80096d0:	4649      	mov	r1, r9
 80096d2:	f7f7 fa0b 	bl	8000aec <__aeabi_dcmplt>
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d07b      	beq.n	80097d2 <_dtoa_r+0x4f2>
 80096da:	9b04      	ldr	r3, [sp, #16]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d078      	beq.n	80097d2 <_dtoa_r+0x4f2>
 80096e0:	9b01      	ldr	r3, [sp, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	dd39      	ble.n	800975a <_dtoa_r+0x47a>
 80096e6:	4b90      	ldr	r3, [pc, #576]	; (8009928 <_dtoa_r+0x648>)
 80096e8:	2200      	movs	r2, #0
 80096ea:	4640      	mov	r0, r8
 80096ec:	4649      	mov	r1, r9
 80096ee:	f7f6 ff8b 	bl	8000608 <__aeabi_dmul>
 80096f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096f6:	9e01      	ldr	r6, [sp, #4]
 80096f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80096fc:	3501      	adds	r5, #1
 80096fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009702:	4628      	mov	r0, r5
 8009704:	f7f6 ff16 	bl	8000534 <__aeabi_i2d>
 8009708:	4642      	mov	r2, r8
 800970a:	464b      	mov	r3, r9
 800970c:	f7f6 ff7c 	bl	8000608 <__aeabi_dmul>
 8009710:	4b86      	ldr	r3, [pc, #536]	; (800992c <_dtoa_r+0x64c>)
 8009712:	2200      	movs	r2, #0
 8009714:	f7f6 fdc2 	bl	800029c <__adddf3>
 8009718:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800971c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009720:	9303      	str	r3, [sp, #12]
 8009722:	2e00      	cmp	r6, #0
 8009724:	d158      	bne.n	80097d8 <_dtoa_r+0x4f8>
 8009726:	4b82      	ldr	r3, [pc, #520]	; (8009930 <_dtoa_r+0x650>)
 8009728:	2200      	movs	r2, #0
 800972a:	4640      	mov	r0, r8
 800972c:	4649      	mov	r1, r9
 800972e:	f7f6 fdb3 	bl	8000298 <__aeabi_dsub>
 8009732:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009736:	4680      	mov	r8, r0
 8009738:	4689      	mov	r9, r1
 800973a:	f7f7 f9f5 	bl	8000b28 <__aeabi_dcmpgt>
 800973e:	2800      	cmp	r0, #0
 8009740:	f040 8296 	bne.w	8009c70 <_dtoa_r+0x990>
 8009744:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009748:	4640      	mov	r0, r8
 800974a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800974e:	4649      	mov	r1, r9
 8009750:	f7f7 f9cc 	bl	8000aec <__aeabi_dcmplt>
 8009754:	2800      	cmp	r0, #0
 8009756:	f040 8289 	bne.w	8009c6c <_dtoa_r+0x98c>
 800975a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800975e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009760:	2b00      	cmp	r3, #0
 8009762:	f2c0 814e 	blt.w	8009a02 <_dtoa_r+0x722>
 8009766:	f1bb 0f0e 	cmp.w	fp, #14
 800976a:	f300 814a 	bgt.w	8009a02 <_dtoa_r+0x722>
 800976e:	4b6b      	ldr	r3, [pc, #428]	; (800991c <_dtoa_r+0x63c>)
 8009770:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009774:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800977a:	2b00      	cmp	r3, #0
 800977c:	f280 80dc 	bge.w	8009938 <_dtoa_r+0x658>
 8009780:	9b04      	ldr	r3, [sp, #16]
 8009782:	2b00      	cmp	r3, #0
 8009784:	f300 80d8 	bgt.w	8009938 <_dtoa_r+0x658>
 8009788:	f040 826f 	bne.w	8009c6a <_dtoa_r+0x98a>
 800978c:	4b68      	ldr	r3, [pc, #416]	; (8009930 <_dtoa_r+0x650>)
 800978e:	2200      	movs	r2, #0
 8009790:	4640      	mov	r0, r8
 8009792:	4649      	mov	r1, r9
 8009794:	f7f6 ff38 	bl	8000608 <__aeabi_dmul>
 8009798:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800979c:	f7f7 f9ba 	bl	8000b14 <__aeabi_dcmpge>
 80097a0:	9e04      	ldr	r6, [sp, #16]
 80097a2:	4637      	mov	r7, r6
 80097a4:	2800      	cmp	r0, #0
 80097a6:	f040 8245 	bne.w	8009c34 <_dtoa_r+0x954>
 80097aa:	9d00      	ldr	r5, [sp, #0]
 80097ac:	2331      	movs	r3, #49	; 0x31
 80097ae:	f805 3b01 	strb.w	r3, [r5], #1
 80097b2:	f10b 0b01 	add.w	fp, fp, #1
 80097b6:	e241      	b.n	8009c3c <_dtoa_r+0x95c>
 80097b8:	07f2      	lsls	r2, r6, #31
 80097ba:	d505      	bpl.n	80097c8 <_dtoa_r+0x4e8>
 80097bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097c0:	f7f6 ff22 	bl	8000608 <__aeabi_dmul>
 80097c4:	3501      	adds	r5, #1
 80097c6:	2301      	movs	r3, #1
 80097c8:	1076      	asrs	r6, r6, #1
 80097ca:	3708      	adds	r7, #8
 80097cc:	e773      	b.n	80096b6 <_dtoa_r+0x3d6>
 80097ce:	2502      	movs	r5, #2
 80097d0:	e775      	b.n	80096be <_dtoa_r+0x3de>
 80097d2:	9e04      	ldr	r6, [sp, #16]
 80097d4:	465f      	mov	r7, fp
 80097d6:	e792      	b.n	80096fe <_dtoa_r+0x41e>
 80097d8:	9900      	ldr	r1, [sp, #0]
 80097da:	4b50      	ldr	r3, [pc, #320]	; (800991c <_dtoa_r+0x63c>)
 80097dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097e0:	4431      	add	r1, r6
 80097e2:	9102      	str	r1, [sp, #8]
 80097e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097e6:	eeb0 9a47 	vmov.f32	s18, s14
 80097ea:	eef0 9a67 	vmov.f32	s19, s15
 80097ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80097f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80097f6:	2900      	cmp	r1, #0
 80097f8:	d044      	beq.n	8009884 <_dtoa_r+0x5a4>
 80097fa:	494e      	ldr	r1, [pc, #312]	; (8009934 <_dtoa_r+0x654>)
 80097fc:	2000      	movs	r0, #0
 80097fe:	f7f7 f82d 	bl	800085c <__aeabi_ddiv>
 8009802:	ec53 2b19 	vmov	r2, r3, d9
 8009806:	f7f6 fd47 	bl	8000298 <__aeabi_dsub>
 800980a:	9d00      	ldr	r5, [sp, #0]
 800980c:	ec41 0b19 	vmov	d9, r0, r1
 8009810:	4649      	mov	r1, r9
 8009812:	4640      	mov	r0, r8
 8009814:	f7f7 f9a8 	bl	8000b68 <__aeabi_d2iz>
 8009818:	4606      	mov	r6, r0
 800981a:	f7f6 fe8b 	bl	8000534 <__aeabi_i2d>
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	4640      	mov	r0, r8
 8009824:	4649      	mov	r1, r9
 8009826:	f7f6 fd37 	bl	8000298 <__aeabi_dsub>
 800982a:	3630      	adds	r6, #48	; 0x30
 800982c:	f805 6b01 	strb.w	r6, [r5], #1
 8009830:	ec53 2b19 	vmov	r2, r3, d9
 8009834:	4680      	mov	r8, r0
 8009836:	4689      	mov	r9, r1
 8009838:	f7f7 f958 	bl	8000aec <__aeabi_dcmplt>
 800983c:	2800      	cmp	r0, #0
 800983e:	d164      	bne.n	800990a <_dtoa_r+0x62a>
 8009840:	4642      	mov	r2, r8
 8009842:	464b      	mov	r3, r9
 8009844:	4937      	ldr	r1, [pc, #220]	; (8009924 <_dtoa_r+0x644>)
 8009846:	2000      	movs	r0, #0
 8009848:	f7f6 fd26 	bl	8000298 <__aeabi_dsub>
 800984c:	ec53 2b19 	vmov	r2, r3, d9
 8009850:	f7f7 f94c 	bl	8000aec <__aeabi_dcmplt>
 8009854:	2800      	cmp	r0, #0
 8009856:	f040 80b6 	bne.w	80099c6 <_dtoa_r+0x6e6>
 800985a:	9b02      	ldr	r3, [sp, #8]
 800985c:	429d      	cmp	r5, r3
 800985e:	f43f af7c 	beq.w	800975a <_dtoa_r+0x47a>
 8009862:	4b31      	ldr	r3, [pc, #196]	; (8009928 <_dtoa_r+0x648>)
 8009864:	ec51 0b19 	vmov	r0, r1, d9
 8009868:	2200      	movs	r2, #0
 800986a:	f7f6 fecd 	bl	8000608 <__aeabi_dmul>
 800986e:	4b2e      	ldr	r3, [pc, #184]	; (8009928 <_dtoa_r+0x648>)
 8009870:	ec41 0b19 	vmov	d9, r0, r1
 8009874:	2200      	movs	r2, #0
 8009876:	4640      	mov	r0, r8
 8009878:	4649      	mov	r1, r9
 800987a:	f7f6 fec5 	bl	8000608 <__aeabi_dmul>
 800987e:	4680      	mov	r8, r0
 8009880:	4689      	mov	r9, r1
 8009882:	e7c5      	b.n	8009810 <_dtoa_r+0x530>
 8009884:	ec51 0b17 	vmov	r0, r1, d7
 8009888:	f7f6 febe 	bl	8000608 <__aeabi_dmul>
 800988c:	9b02      	ldr	r3, [sp, #8]
 800988e:	9d00      	ldr	r5, [sp, #0]
 8009890:	930f      	str	r3, [sp, #60]	; 0x3c
 8009892:	ec41 0b19 	vmov	d9, r0, r1
 8009896:	4649      	mov	r1, r9
 8009898:	4640      	mov	r0, r8
 800989a:	f7f7 f965 	bl	8000b68 <__aeabi_d2iz>
 800989e:	4606      	mov	r6, r0
 80098a0:	f7f6 fe48 	bl	8000534 <__aeabi_i2d>
 80098a4:	3630      	adds	r6, #48	; 0x30
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4640      	mov	r0, r8
 80098ac:	4649      	mov	r1, r9
 80098ae:	f7f6 fcf3 	bl	8000298 <__aeabi_dsub>
 80098b2:	f805 6b01 	strb.w	r6, [r5], #1
 80098b6:	9b02      	ldr	r3, [sp, #8]
 80098b8:	429d      	cmp	r5, r3
 80098ba:	4680      	mov	r8, r0
 80098bc:	4689      	mov	r9, r1
 80098be:	f04f 0200 	mov.w	r2, #0
 80098c2:	d124      	bne.n	800990e <_dtoa_r+0x62e>
 80098c4:	4b1b      	ldr	r3, [pc, #108]	; (8009934 <_dtoa_r+0x654>)
 80098c6:	ec51 0b19 	vmov	r0, r1, d9
 80098ca:	f7f6 fce7 	bl	800029c <__adddf3>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	4640      	mov	r0, r8
 80098d4:	4649      	mov	r1, r9
 80098d6:	f7f7 f927 	bl	8000b28 <__aeabi_dcmpgt>
 80098da:	2800      	cmp	r0, #0
 80098dc:	d173      	bne.n	80099c6 <_dtoa_r+0x6e6>
 80098de:	ec53 2b19 	vmov	r2, r3, d9
 80098e2:	4914      	ldr	r1, [pc, #80]	; (8009934 <_dtoa_r+0x654>)
 80098e4:	2000      	movs	r0, #0
 80098e6:	f7f6 fcd7 	bl	8000298 <__aeabi_dsub>
 80098ea:	4602      	mov	r2, r0
 80098ec:	460b      	mov	r3, r1
 80098ee:	4640      	mov	r0, r8
 80098f0:	4649      	mov	r1, r9
 80098f2:	f7f7 f8fb 	bl	8000aec <__aeabi_dcmplt>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	f43f af2f 	beq.w	800975a <_dtoa_r+0x47a>
 80098fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80098fe:	1e6b      	subs	r3, r5, #1
 8009900:	930f      	str	r3, [sp, #60]	; 0x3c
 8009902:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009906:	2b30      	cmp	r3, #48	; 0x30
 8009908:	d0f8      	beq.n	80098fc <_dtoa_r+0x61c>
 800990a:	46bb      	mov	fp, r7
 800990c:	e04a      	b.n	80099a4 <_dtoa_r+0x6c4>
 800990e:	4b06      	ldr	r3, [pc, #24]	; (8009928 <_dtoa_r+0x648>)
 8009910:	f7f6 fe7a 	bl	8000608 <__aeabi_dmul>
 8009914:	4680      	mov	r8, r0
 8009916:	4689      	mov	r9, r1
 8009918:	e7bd      	b.n	8009896 <_dtoa_r+0x5b6>
 800991a:	bf00      	nop
 800991c:	0800b0e8 	.word	0x0800b0e8
 8009920:	0800b0c0 	.word	0x0800b0c0
 8009924:	3ff00000 	.word	0x3ff00000
 8009928:	40240000 	.word	0x40240000
 800992c:	401c0000 	.word	0x401c0000
 8009930:	40140000 	.word	0x40140000
 8009934:	3fe00000 	.word	0x3fe00000
 8009938:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800993c:	9d00      	ldr	r5, [sp, #0]
 800993e:	4642      	mov	r2, r8
 8009940:	464b      	mov	r3, r9
 8009942:	4630      	mov	r0, r6
 8009944:	4639      	mov	r1, r7
 8009946:	f7f6 ff89 	bl	800085c <__aeabi_ddiv>
 800994a:	f7f7 f90d 	bl	8000b68 <__aeabi_d2iz>
 800994e:	9001      	str	r0, [sp, #4]
 8009950:	f7f6 fdf0 	bl	8000534 <__aeabi_i2d>
 8009954:	4642      	mov	r2, r8
 8009956:	464b      	mov	r3, r9
 8009958:	f7f6 fe56 	bl	8000608 <__aeabi_dmul>
 800995c:	4602      	mov	r2, r0
 800995e:	460b      	mov	r3, r1
 8009960:	4630      	mov	r0, r6
 8009962:	4639      	mov	r1, r7
 8009964:	f7f6 fc98 	bl	8000298 <__aeabi_dsub>
 8009968:	9e01      	ldr	r6, [sp, #4]
 800996a:	9f04      	ldr	r7, [sp, #16]
 800996c:	3630      	adds	r6, #48	; 0x30
 800996e:	f805 6b01 	strb.w	r6, [r5], #1
 8009972:	9e00      	ldr	r6, [sp, #0]
 8009974:	1bae      	subs	r6, r5, r6
 8009976:	42b7      	cmp	r7, r6
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	d134      	bne.n	80099e8 <_dtoa_r+0x708>
 800997e:	f7f6 fc8d 	bl	800029c <__adddf3>
 8009982:	4642      	mov	r2, r8
 8009984:	464b      	mov	r3, r9
 8009986:	4606      	mov	r6, r0
 8009988:	460f      	mov	r7, r1
 800998a:	f7f7 f8cd 	bl	8000b28 <__aeabi_dcmpgt>
 800998e:	b9c8      	cbnz	r0, 80099c4 <_dtoa_r+0x6e4>
 8009990:	4642      	mov	r2, r8
 8009992:	464b      	mov	r3, r9
 8009994:	4630      	mov	r0, r6
 8009996:	4639      	mov	r1, r7
 8009998:	f7f7 f89e 	bl	8000ad8 <__aeabi_dcmpeq>
 800999c:	b110      	cbz	r0, 80099a4 <_dtoa_r+0x6c4>
 800999e:	9b01      	ldr	r3, [sp, #4]
 80099a0:	07db      	lsls	r3, r3, #31
 80099a2:	d40f      	bmi.n	80099c4 <_dtoa_r+0x6e4>
 80099a4:	4651      	mov	r1, sl
 80099a6:	4620      	mov	r0, r4
 80099a8:	f000 fbcc 	bl	800a144 <_Bfree>
 80099ac:	2300      	movs	r3, #0
 80099ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099b0:	702b      	strb	r3, [r5, #0]
 80099b2:	f10b 0301 	add.w	r3, fp, #1
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f43f ace2 	beq.w	8009384 <_dtoa_r+0xa4>
 80099c0:	601d      	str	r5, [r3, #0]
 80099c2:	e4df      	b.n	8009384 <_dtoa_r+0xa4>
 80099c4:	465f      	mov	r7, fp
 80099c6:	462b      	mov	r3, r5
 80099c8:	461d      	mov	r5, r3
 80099ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099ce:	2a39      	cmp	r2, #57	; 0x39
 80099d0:	d106      	bne.n	80099e0 <_dtoa_r+0x700>
 80099d2:	9a00      	ldr	r2, [sp, #0]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d1f7      	bne.n	80099c8 <_dtoa_r+0x6e8>
 80099d8:	9900      	ldr	r1, [sp, #0]
 80099da:	2230      	movs	r2, #48	; 0x30
 80099dc:	3701      	adds	r7, #1
 80099de:	700a      	strb	r2, [r1, #0]
 80099e0:	781a      	ldrb	r2, [r3, #0]
 80099e2:	3201      	adds	r2, #1
 80099e4:	701a      	strb	r2, [r3, #0]
 80099e6:	e790      	b.n	800990a <_dtoa_r+0x62a>
 80099e8:	4ba3      	ldr	r3, [pc, #652]	; (8009c78 <_dtoa_r+0x998>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	f7f6 fe0c 	bl	8000608 <__aeabi_dmul>
 80099f0:	2200      	movs	r2, #0
 80099f2:	2300      	movs	r3, #0
 80099f4:	4606      	mov	r6, r0
 80099f6:	460f      	mov	r7, r1
 80099f8:	f7f7 f86e 	bl	8000ad8 <__aeabi_dcmpeq>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d09e      	beq.n	800993e <_dtoa_r+0x65e>
 8009a00:	e7d0      	b.n	80099a4 <_dtoa_r+0x6c4>
 8009a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a04:	2a00      	cmp	r2, #0
 8009a06:	f000 80ca 	beq.w	8009b9e <_dtoa_r+0x8be>
 8009a0a:	9a07      	ldr	r2, [sp, #28]
 8009a0c:	2a01      	cmp	r2, #1
 8009a0e:	f300 80ad 	bgt.w	8009b6c <_dtoa_r+0x88c>
 8009a12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a14:	2a00      	cmp	r2, #0
 8009a16:	f000 80a5 	beq.w	8009b64 <_dtoa_r+0x884>
 8009a1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a1e:	9e08      	ldr	r6, [sp, #32]
 8009a20:	9d05      	ldr	r5, [sp, #20]
 8009a22:	9a05      	ldr	r2, [sp, #20]
 8009a24:	441a      	add	r2, r3
 8009a26:	9205      	str	r2, [sp, #20]
 8009a28:	9a06      	ldr	r2, [sp, #24]
 8009a2a:	2101      	movs	r1, #1
 8009a2c:	441a      	add	r2, r3
 8009a2e:	4620      	mov	r0, r4
 8009a30:	9206      	str	r2, [sp, #24]
 8009a32:	f000 fc3d 	bl	800a2b0 <__i2b>
 8009a36:	4607      	mov	r7, r0
 8009a38:	b165      	cbz	r5, 8009a54 <_dtoa_r+0x774>
 8009a3a:	9b06      	ldr	r3, [sp, #24]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	dd09      	ble.n	8009a54 <_dtoa_r+0x774>
 8009a40:	42ab      	cmp	r3, r5
 8009a42:	9a05      	ldr	r2, [sp, #20]
 8009a44:	bfa8      	it	ge
 8009a46:	462b      	movge	r3, r5
 8009a48:	1ad2      	subs	r2, r2, r3
 8009a4a:	9205      	str	r2, [sp, #20]
 8009a4c:	9a06      	ldr	r2, [sp, #24]
 8009a4e:	1aed      	subs	r5, r5, r3
 8009a50:	1ad3      	subs	r3, r2, r3
 8009a52:	9306      	str	r3, [sp, #24]
 8009a54:	9b08      	ldr	r3, [sp, #32]
 8009a56:	b1f3      	cbz	r3, 8009a96 <_dtoa_r+0x7b6>
 8009a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f000 80a3 	beq.w	8009ba6 <_dtoa_r+0x8c6>
 8009a60:	2e00      	cmp	r6, #0
 8009a62:	dd10      	ble.n	8009a86 <_dtoa_r+0x7a6>
 8009a64:	4639      	mov	r1, r7
 8009a66:	4632      	mov	r2, r6
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f000 fce1 	bl	800a430 <__pow5mult>
 8009a6e:	4652      	mov	r2, sl
 8009a70:	4601      	mov	r1, r0
 8009a72:	4607      	mov	r7, r0
 8009a74:	4620      	mov	r0, r4
 8009a76:	f000 fc31 	bl	800a2dc <__multiply>
 8009a7a:	4651      	mov	r1, sl
 8009a7c:	4680      	mov	r8, r0
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f000 fb60 	bl	800a144 <_Bfree>
 8009a84:	46c2      	mov	sl, r8
 8009a86:	9b08      	ldr	r3, [sp, #32]
 8009a88:	1b9a      	subs	r2, r3, r6
 8009a8a:	d004      	beq.n	8009a96 <_dtoa_r+0x7b6>
 8009a8c:	4651      	mov	r1, sl
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f000 fcce 	bl	800a430 <__pow5mult>
 8009a94:	4682      	mov	sl, r0
 8009a96:	2101      	movs	r1, #1
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f000 fc09 	bl	800a2b0 <__i2b>
 8009a9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	f340 8081 	ble.w	8009baa <_dtoa_r+0x8ca>
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4601      	mov	r1, r0
 8009aac:	4620      	mov	r0, r4
 8009aae:	f000 fcbf 	bl	800a430 <__pow5mult>
 8009ab2:	9b07      	ldr	r3, [sp, #28]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	dd7a      	ble.n	8009bb0 <_dtoa_r+0x8d0>
 8009aba:	f04f 0800 	mov.w	r8, #0
 8009abe:	6933      	ldr	r3, [r6, #16]
 8009ac0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ac4:	6918      	ldr	r0, [r3, #16]
 8009ac6:	f000 fba5 	bl	800a214 <__hi0bits>
 8009aca:	f1c0 0020 	rsb	r0, r0, #32
 8009ace:	9b06      	ldr	r3, [sp, #24]
 8009ad0:	4418      	add	r0, r3
 8009ad2:	f010 001f 	ands.w	r0, r0, #31
 8009ad6:	f000 8094 	beq.w	8009c02 <_dtoa_r+0x922>
 8009ada:	f1c0 0320 	rsb	r3, r0, #32
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	f340 8085 	ble.w	8009bee <_dtoa_r+0x90e>
 8009ae4:	9b05      	ldr	r3, [sp, #20]
 8009ae6:	f1c0 001c 	rsb	r0, r0, #28
 8009aea:	4403      	add	r3, r0
 8009aec:	9305      	str	r3, [sp, #20]
 8009aee:	9b06      	ldr	r3, [sp, #24]
 8009af0:	4403      	add	r3, r0
 8009af2:	4405      	add	r5, r0
 8009af4:	9306      	str	r3, [sp, #24]
 8009af6:	9b05      	ldr	r3, [sp, #20]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	dd05      	ble.n	8009b08 <_dtoa_r+0x828>
 8009afc:	4651      	mov	r1, sl
 8009afe:	461a      	mov	r2, r3
 8009b00:	4620      	mov	r0, r4
 8009b02:	f000 fcef 	bl	800a4e4 <__lshift>
 8009b06:	4682      	mov	sl, r0
 8009b08:	9b06      	ldr	r3, [sp, #24]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	dd05      	ble.n	8009b1a <_dtoa_r+0x83a>
 8009b0e:	4631      	mov	r1, r6
 8009b10:	461a      	mov	r2, r3
 8009b12:	4620      	mov	r0, r4
 8009b14:	f000 fce6 	bl	800a4e4 <__lshift>
 8009b18:	4606      	mov	r6, r0
 8009b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d072      	beq.n	8009c06 <_dtoa_r+0x926>
 8009b20:	4631      	mov	r1, r6
 8009b22:	4650      	mov	r0, sl
 8009b24:	f000 fd4a 	bl	800a5bc <__mcmp>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	da6c      	bge.n	8009c06 <_dtoa_r+0x926>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	4651      	mov	r1, sl
 8009b30:	220a      	movs	r2, #10
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 fb28 	bl	800a188 <__multadd>
 8009b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b3e:	4682      	mov	sl, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 81b0 	beq.w	8009ea6 <_dtoa_r+0xbc6>
 8009b46:	2300      	movs	r3, #0
 8009b48:	4639      	mov	r1, r7
 8009b4a:	220a      	movs	r2, #10
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f000 fb1b 	bl	800a188 <__multadd>
 8009b52:	9b01      	ldr	r3, [sp, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	4607      	mov	r7, r0
 8009b58:	f300 8096 	bgt.w	8009c88 <_dtoa_r+0x9a8>
 8009b5c:	9b07      	ldr	r3, [sp, #28]
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	dc59      	bgt.n	8009c16 <_dtoa_r+0x936>
 8009b62:	e091      	b.n	8009c88 <_dtoa_r+0x9a8>
 8009b64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b6a:	e758      	b.n	8009a1e <_dtoa_r+0x73e>
 8009b6c:	9b04      	ldr	r3, [sp, #16]
 8009b6e:	1e5e      	subs	r6, r3, #1
 8009b70:	9b08      	ldr	r3, [sp, #32]
 8009b72:	42b3      	cmp	r3, r6
 8009b74:	bfbf      	itttt	lt
 8009b76:	9b08      	ldrlt	r3, [sp, #32]
 8009b78:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009b7a:	9608      	strlt	r6, [sp, #32]
 8009b7c:	1af3      	sublt	r3, r6, r3
 8009b7e:	bfb4      	ite	lt
 8009b80:	18d2      	addlt	r2, r2, r3
 8009b82:	1b9e      	subge	r6, r3, r6
 8009b84:	9b04      	ldr	r3, [sp, #16]
 8009b86:	bfbc      	itt	lt
 8009b88:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009b8a:	2600      	movlt	r6, #0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	bfb7      	itett	lt
 8009b90:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009b94:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009b98:	1a9d      	sublt	r5, r3, r2
 8009b9a:	2300      	movlt	r3, #0
 8009b9c:	e741      	b.n	8009a22 <_dtoa_r+0x742>
 8009b9e:	9e08      	ldr	r6, [sp, #32]
 8009ba0:	9d05      	ldr	r5, [sp, #20]
 8009ba2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009ba4:	e748      	b.n	8009a38 <_dtoa_r+0x758>
 8009ba6:	9a08      	ldr	r2, [sp, #32]
 8009ba8:	e770      	b.n	8009a8c <_dtoa_r+0x7ac>
 8009baa:	9b07      	ldr	r3, [sp, #28]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	dc19      	bgt.n	8009be4 <_dtoa_r+0x904>
 8009bb0:	9b02      	ldr	r3, [sp, #8]
 8009bb2:	b9bb      	cbnz	r3, 8009be4 <_dtoa_r+0x904>
 8009bb4:	9b03      	ldr	r3, [sp, #12]
 8009bb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bba:	b99b      	cbnz	r3, 8009be4 <_dtoa_r+0x904>
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bc2:	0d1b      	lsrs	r3, r3, #20
 8009bc4:	051b      	lsls	r3, r3, #20
 8009bc6:	b183      	cbz	r3, 8009bea <_dtoa_r+0x90a>
 8009bc8:	9b05      	ldr	r3, [sp, #20]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	9305      	str	r3, [sp, #20]
 8009bce:	9b06      	ldr	r3, [sp, #24]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	9306      	str	r3, [sp, #24]
 8009bd4:	f04f 0801 	mov.w	r8, #1
 8009bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f47f af6f 	bne.w	8009abe <_dtoa_r+0x7de>
 8009be0:	2001      	movs	r0, #1
 8009be2:	e774      	b.n	8009ace <_dtoa_r+0x7ee>
 8009be4:	f04f 0800 	mov.w	r8, #0
 8009be8:	e7f6      	b.n	8009bd8 <_dtoa_r+0x8f8>
 8009bea:	4698      	mov	r8, r3
 8009bec:	e7f4      	b.n	8009bd8 <_dtoa_r+0x8f8>
 8009bee:	d082      	beq.n	8009af6 <_dtoa_r+0x816>
 8009bf0:	9a05      	ldr	r2, [sp, #20]
 8009bf2:	331c      	adds	r3, #28
 8009bf4:	441a      	add	r2, r3
 8009bf6:	9205      	str	r2, [sp, #20]
 8009bf8:	9a06      	ldr	r2, [sp, #24]
 8009bfa:	441a      	add	r2, r3
 8009bfc:	441d      	add	r5, r3
 8009bfe:	9206      	str	r2, [sp, #24]
 8009c00:	e779      	b.n	8009af6 <_dtoa_r+0x816>
 8009c02:	4603      	mov	r3, r0
 8009c04:	e7f4      	b.n	8009bf0 <_dtoa_r+0x910>
 8009c06:	9b04      	ldr	r3, [sp, #16]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	dc37      	bgt.n	8009c7c <_dtoa_r+0x99c>
 8009c0c:	9b07      	ldr	r3, [sp, #28]
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	dd34      	ble.n	8009c7c <_dtoa_r+0x99c>
 8009c12:	9b04      	ldr	r3, [sp, #16]
 8009c14:	9301      	str	r3, [sp, #4]
 8009c16:	9b01      	ldr	r3, [sp, #4]
 8009c18:	b963      	cbnz	r3, 8009c34 <_dtoa_r+0x954>
 8009c1a:	4631      	mov	r1, r6
 8009c1c:	2205      	movs	r2, #5
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f000 fab2 	bl	800a188 <__multadd>
 8009c24:	4601      	mov	r1, r0
 8009c26:	4606      	mov	r6, r0
 8009c28:	4650      	mov	r0, sl
 8009c2a:	f000 fcc7 	bl	800a5bc <__mcmp>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	f73f adbb 	bgt.w	80097aa <_dtoa_r+0x4ca>
 8009c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c36:	9d00      	ldr	r5, [sp, #0]
 8009c38:	ea6f 0b03 	mvn.w	fp, r3
 8009c3c:	f04f 0800 	mov.w	r8, #0
 8009c40:	4631      	mov	r1, r6
 8009c42:	4620      	mov	r0, r4
 8009c44:	f000 fa7e 	bl	800a144 <_Bfree>
 8009c48:	2f00      	cmp	r7, #0
 8009c4a:	f43f aeab 	beq.w	80099a4 <_dtoa_r+0x6c4>
 8009c4e:	f1b8 0f00 	cmp.w	r8, #0
 8009c52:	d005      	beq.n	8009c60 <_dtoa_r+0x980>
 8009c54:	45b8      	cmp	r8, r7
 8009c56:	d003      	beq.n	8009c60 <_dtoa_r+0x980>
 8009c58:	4641      	mov	r1, r8
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f000 fa72 	bl	800a144 <_Bfree>
 8009c60:	4639      	mov	r1, r7
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 fa6e 	bl	800a144 <_Bfree>
 8009c68:	e69c      	b.n	80099a4 <_dtoa_r+0x6c4>
 8009c6a:	2600      	movs	r6, #0
 8009c6c:	4637      	mov	r7, r6
 8009c6e:	e7e1      	b.n	8009c34 <_dtoa_r+0x954>
 8009c70:	46bb      	mov	fp, r7
 8009c72:	4637      	mov	r7, r6
 8009c74:	e599      	b.n	80097aa <_dtoa_r+0x4ca>
 8009c76:	bf00      	nop
 8009c78:	40240000 	.word	0x40240000
 8009c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 80c8 	beq.w	8009e14 <_dtoa_r+0xb34>
 8009c84:	9b04      	ldr	r3, [sp, #16]
 8009c86:	9301      	str	r3, [sp, #4]
 8009c88:	2d00      	cmp	r5, #0
 8009c8a:	dd05      	ble.n	8009c98 <_dtoa_r+0x9b8>
 8009c8c:	4639      	mov	r1, r7
 8009c8e:	462a      	mov	r2, r5
 8009c90:	4620      	mov	r0, r4
 8009c92:	f000 fc27 	bl	800a4e4 <__lshift>
 8009c96:	4607      	mov	r7, r0
 8009c98:	f1b8 0f00 	cmp.w	r8, #0
 8009c9c:	d05b      	beq.n	8009d56 <_dtoa_r+0xa76>
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f000 fa0f 	bl	800a0c4 <_Balloc>
 8009ca6:	4605      	mov	r5, r0
 8009ca8:	b928      	cbnz	r0, 8009cb6 <_dtoa_r+0x9d6>
 8009caa:	4b83      	ldr	r3, [pc, #524]	; (8009eb8 <_dtoa_r+0xbd8>)
 8009cac:	4602      	mov	r2, r0
 8009cae:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009cb2:	f7ff bb2e 	b.w	8009312 <_dtoa_r+0x32>
 8009cb6:	693a      	ldr	r2, [r7, #16]
 8009cb8:	3202      	adds	r2, #2
 8009cba:	0092      	lsls	r2, r2, #2
 8009cbc:	f107 010c 	add.w	r1, r7, #12
 8009cc0:	300c      	adds	r0, #12
 8009cc2:	f000 fe39 	bl	800a938 <memcpy>
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	4629      	mov	r1, r5
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f000 fc0a 	bl	800a4e4 <__lshift>
 8009cd0:	9b00      	ldr	r3, [sp, #0]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	9304      	str	r3, [sp, #16]
 8009cd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cda:	4413      	add	r3, r2
 8009cdc:	9308      	str	r3, [sp, #32]
 8009cde:	9b02      	ldr	r3, [sp, #8]
 8009ce0:	f003 0301 	and.w	r3, r3, #1
 8009ce4:	46b8      	mov	r8, r7
 8009ce6:	9306      	str	r3, [sp, #24]
 8009ce8:	4607      	mov	r7, r0
 8009cea:	9b04      	ldr	r3, [sp, #16]
 8009cec:	4631      	mov	r1, r6
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	4650      	mov	r0, sl
 8009cf2:	9301      	str	r3, [sp, #4]
 8009cf4:	f7ff fa69 	bl	80091ca <quorem>
 8009cf8:	4641      	mov	r1, r8
 8009cfa:	9002      	str	r0, [sp, #8]
 8009cfc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009d00:	4650      	mov	r0, sl
 8009d02:	f000 fc5b 	bl	800a5bc <__mcmp>
 8009d06:	463a      	mov	r2, r7
 8009d08:	9005      	str	r0, [sp, #20]
 8009d0a:	4631      	mov	r1, r6
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f000 fc71 	bl	800a5f4 <__mdiff>
 8009d12:	68c2      	ldr	r2, [r0, #12]
 8009d14:	4605      	mov	r5, r0
 8009d16:	bb02      	cbnz	r2, 8009d5a <_dtoa_r+0xa7a>
 8009d18:	4601      	mov	r1, r0
 8009d1a:	4650      	mov	r0, sl
 8009d1c:	f000 fc4e 	bl	800a5bc <__mcmp>
 8009d20:	4602      	mov	r2, r0
 8009d22:	4629      	mov	r1, r5
 8009d24:	4620      	mov	r0, r4
 8009d26:	9209      	str	r2, [sp, #36]	; 0x24
 8009d28:	f000 fa0c 	bl	800a144 <_Bfree>
 8009d2c:	9b07      	ldr	r3, [sp, #28]
 8009d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d30:	9d04      	ldr	r5, [sp, #16]
 8009d32:	ea43 0102 	orr.w	r1, r3, r2
 8009d36:	9b06      	ldr	r3, [sp, #24]
 8009d38:	4319      	orrs	r1, r3
 8009d3a:	d110      	bne.n	8009d5e <_dtoa_r+0xa7e>
 8009d3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009d40:	d029      	beq.n	8009d96 <_dtoa_r+0xab6>
 8009d42:	9b05      	ldr	r3, [sp, #20]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	dd02      	ble.n	8009d4e <_dtoa_r+0xa6e>
 8009d48:	9b02      	ldr	r3, [sp, #8]
 8009d4a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009d4e:	9b01      	ldr	r3, [sp, #4]
 8009d50:	f883 9000 	strb.w	r9, [r3]
 8009d54:	e774      	b.n	8009c40 <_dtoa_r+0x960>
 8009d56:	4638      	mov	r0, r7
 8009d58:	e7ba      	b.n	8009cd0 <_dtoa_r+0x9f0>
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	e7e1      	b.n	8009d22 <_dtoa_r+0xa42>
 8009d5e:	9b05      	ldr	r3, [sp, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	db04      	blt.n	8009d6e <_dtoa_r+0xa8e>
 8009d64:	9907      	ldr	r1, [sp, #28]
 8009d66:	430b      	orrs	r3, r1
 8009d68:	9906      	ldr	r1, [sp, #24]
 8009d6a:	430b      	orrs	r3, r1
 8009d6c:	d120      	bne.n	8009db0 <_dtoa_r+0xad0>
 8009d6e:	2a00      	cmp	r2, #0
 8009d70:	dded      	ble.n	8009d4e <_dtoa_r+0xa6e>
 8009d72:	4651      	mov	r1, sl
 8009d74:	2201      	movs	r2, #1
 8009d76:	4620      	mov	r0, r4
 8009d78:	f000 fbb4 	bl	800a4e4 <__lshift>
 8009d7c:	4631      	mov	r1, r6
 8009d7e:	4682      	mov	sl, r0
 8009d80:	f000 fc1c 	bl	800a5bc <__mcmp>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	dc03      	bgt.n	8009d90 <_dtoa_r+0xab0>
 8009d88:	d1e1      	bne.n	8009d4e <_dtoa_r+0xa6e>
 8009d8a:	f019 0f01 	tst.w	r9, #1
 8009d8e:	d0de      	beq.n	8009d4e <_dtoa_r+0xa6e>
 8009d90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009d94:	d1d8      	bne.n	8009d48 <_dtoa_r+0xa68>
 8009d96:	9a01      	ldr	r2, [sp, #4]
 8009d98:	2339      	movs	r3, #57	; 0x39
 8009d9a:	7013      	strb	r3, [r2, #0]
 8009d9c:	462b      	mov	r3, r5
 8009d9e:	461d      	mov	r5, r3
 8009da0:	3b01      	subs	r3, #1
 8009da2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009da6:	2a39      	cmp	r2, #57	; 0x39
 8009da8:	d06c      	beq.n	8009e84 <_dtoa_r+0xba4>
 8009daa:	3201      	adds	r2, #1
 8009dac:	701a      	strb	r2, [r3, #0]
 8009dae:	e747      	b.n	8009c40 <_dtoa_r+0x960>
 8009db0:	2a00      	cmp	r2, #0
 8009db2:	dd07      	ble.n	8009dc4 <_dtoa_r+0xae4>
 8009db4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009db8:	d0ed      	beq.n	8009d96 <_dtoa_r+0xab6>
 8009dba:	9a01      	ldr	r2, [sp, #4]
 8009dbc:	f109 0301 	add.w	r3, r9, #1
 8009dc0:	7013      	strb	r3, [r2, #0]
 8009dc2:	e73d      	b.n	8009c40 <_dtoa_r+0x960>
 8009dc4:	9b04      	ldr	r3, [sp, #16]
 8009dc6:	9a08      	ldr	r2, [sp, #32]
 8009dc8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d043      	beq.n	8009e58 <_dtoa_r+0xb78>
 8009dd0:	4651      	mov	r1, sl
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	220a      	movs	r2, #10
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f000 f9d6 	bl	800a188 <__multadd>
 8009ddc:	45b8      	cmp	r8, r7
 8009dde:	4682      	mov	sl, r0
 8009de0:	f04f 0300 	mov.w	r3, #0
 8009de4:	f04f 020a 	mov.w	r2, #10
 8009de8:	4641      	mov	r1, r8
 8009dea:	4620      	mov	r0, r4
 8009dec:	d107      	bne.n	8009dfe <_dtoa_r+0xb1e>
 8009dee:	f000 f9cb 	bl	800a188 <__multadd>
 8009df2:	4680      	mov	r8, r0
 8009df4:	4607      	mov	r7, r0
 8009df6:	9b04      	ldr	r3, [sp, #16]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	9304      	str	r3, [sp, #16]
 8009dfc:	e775      	b.n	8009cea <_dtoa_r+0xa0a>
 8009dfe:	f000 f9c3 	bl	800a188 <__multadd>
 8009e02:	4639      	mov	r1, r7
 8009e04:	4680      	mov	r8, r0
 8009e06:	2300      	movs	r3, #0
 8009e08:	220a      	movs	r2, #10
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f000 f9bc 	bl	800a188 <__multadd>
 8009e10:	4607      	mov	r7, r0
 8009e12:	e7f0      	b.n	8009df6 <_dtoa_r+0xb16>
 8009e14:	9b04      	ldr	r3, [sp, #16]
 8009e16:	9301      	str	r3, [sp, #4]
 8009e18:	9d00      	ldr	r5, [sp, #0]
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	4650      	mov	r0, sl
 8009e1e:	f7ff f9d4 	bl	80091ca <quorem>
 8009e22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009e26:	9b00      	ldr	r3, [sp, #0]
 8009e28:	f805 9b01 	strb.w	r9, [r5], #1
 8009e2c:	1aea      	subs	r2, r5, r3
 8009e2e:	9b01      	ldr	r3, [sp, #4]
 8009e30:	4293      	cmp	r3, r2
 8009e32:	dd07      	ble.n	8009e44 <_dtoa_r+0xb64>
 8009e34:	4651      	mov	r1, sl
 8009e36:	2300      	movs	r3, #0
 8009e38:	220a      	movs	r2, #10
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f000 f9a4 	bl	800a188 <__multadd>
 8009e40:	4682      	mov	sl, r0
 8009e42:	e7ea      	b.n	8009e1a <_dtoa_r+0xb3a>
 8009e44:	9b01      	ldr	r3, [sp, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	bfc8      	it	gt
 8009e4a:	461d      	movgt	r5, r3
 8009e4c:	9b00      	ldr	r3, [sp, #0]
 8009e4e:	bfd8      	it	le
 8009e50:	2501      	movle	r5, #1
 8009e52:	441d      	add	r5, r3
 8009e54:	f04f 0800 	mov.w	r8, #0
 8009e58:	4651      	mov	r1, sl
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f000 fb41 	bl	800a4e4 <__lshift>
 8009e62:	4631      	mov	r1, r6
 8009e64:	4682      	mov	sl, r0
 8009e66:	f000 fba9 	bl	800a5bc <__mcmp>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	dc96      	bgt.n	8009d9c <_dtoa_r+0xabc>
 8009e6e:	d102      	bne.n	8009e76 <_dtoa_r+0xb96>
 8009e70:	f019 0f01 	tst.w	r9, #1
 8009e74:	d192      	bne.n	8009d9c <_dtoa_r+0xabc>
 8009e76:	462b      	mov	r3, r5
 8009e78:	461d      	mov	r5, r3
 8009e7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e7e:	2a30      	cmp	r2, #48	; 0x30
 8009e80:	d0fa      	beq.n	8009e78 <_dtoa_r+0xb98>
 8009e82:	e6dd      	b.n	8009c40 <_dtoa_r+0x960>
 8009e84:	9a00      	ldr	r2, [sp, #0]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d189      	bne.n	8009d9e <_dtoa_r+0xabe>
 8009e8a:	f10b 0b01 	add.w	fp, fp, #1
 8009e8e:	2331      	movs	r3, #49	; 0x31
 8009e90:	e796      	b.n	8009dc0 <_dtoa_r+0xae0>
 8009e92:	4b0a      	ldr	r3, [pc, #40]	; (8009ebc <_dtoa_r+0xbdc>)
 8009e94:	f7ff ba99 	b.w	80093ca <_dtoa_r+0xea>
 8009e98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f47f aa6d 	bne.w	800937a <_dtoa_r+0x9a>
 8009ea0:	4b07      	ldr	r3, [pc, #28]	; (8009ec0 <_dtoa_r+0xbe0>)
 8009ea2:	f7ff ba92 	b.w	80093ca <_dtoa_r+0xea>
 8009ea6:	9b01      	ldr	r3, [sp, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	dcb5      	bgt.n	8009e18 <_dtoa_r+0xb38>
 8009eac:	9b07      	ldr	r3, [sp, #28]
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	f73f aeb1 	bgt.w	8009c16 <_dtoa_r+0x936>
 8009eb4:	e7b0      	b.n	8009e18 <_dtoa_r+0xb38>
 8009eb6:	bf00      	nop
 8009eb8:	0800b050 	.word	0x0800b050
 8009ebc:	0800afb0 	.word	0x0800afb0
 8009ec0:	0800afd4 	.word	0x0800afd4

08009ec4 <_free_r>:
 8009ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ec6:	2900      	cmp	r1, #0
 8009ec8:	d044      	beq.n	8009f54 <_free_r+0x90>
 8009eca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ece:	9001      	str	r0, [sp, #4]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f1a1 0404 	sub.w	r4, r1, #4
 8009ed6:	bfb8      	it	lt
 8009ed8:	18e4      	addlt	r4, r4, r3
 8009eda:	f000 f8e7 	bl	800a0ac <__malloc_lock>
 8009ede:	4a1e      	ldr	r2, [pc, #120]	; (8009f58 <_free_r+0x94>)
 8009ee0:	9801      	ldr	r0, [sp, #4]
 8009ee2:	6813      	ldr	r3, [r2, #0]
 8009ee4:	b933      	cbnz	r3, 8009ef4 <_free_r+0x30>
 8009ee6:	6063      	str	r3, [r4, #4]
 8009ee8:	6014      	str	r4, [r2, #0]
 8009eea:	b003      	add	sp, #12
 8009eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ef0:	f000 b8e2 	b.w	800a0b8 <__malloc_unlock>
 8009ef4:	42a3      	cmp	r3, r4
 8009ef6:	d908      	bls.n	8009f0a <_free_r+0x46>
 8009ef8:	6825      	ldr	r5, [r4, #0]
 8009efa:	1961      	adds	r1, r4, r5
 8009efc:	428b      	cmp	r3, r1
 8009efe:	bf01      	itttt	eq
 8009f00:	6819      	ldreq	r1, [r3, #0]
 8009f02:	685b      	ldreq	r3, [r3, #4]
 8009f04:	1949      	addeq	r1, r1, r5
 8009f06:	6021      	streq	r1, [r4, #0]
 8009f08:	e7ed      	b.n	8009ee6 <_free_r+0x22>
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	b10b      	cbz	r3, 8009f14 <_free_r+0x50>
 8009f10:	42a3      	cmp	r3, r4
 8009f12:	d9fa      	bls.n	8009f0a <_free_r+0x46>
 8009f14:	6811      	ldr	r1, [r2, #0]
 8009f16:	1855      	adds	r5, r2, r1
 8009f18:	42a5      	cmp	r5, r4
 8009f1a:	d10b      	bne.n	8009f34 <_free_r+0x70>
 8009f1c:	6824      	ldr	r4, [r4, #0]
 8009f1e:	4421      	add	r1, r4
 8009f20:	1854      	adds	r4, r2, r1
 8009f22:	42a3      	cmp	r3, r4
 8009f24:	6011      	str	r1, [r2, #0]
 8009f26:	d1e0      	bne.n	8009eea <_free_r+0x26>
 8009f28:	681c      	ldr	r4, [r3, #0]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	6053      	str	r3, [r2, #4]
 8009f2e:	440c      	add	r4, r1
 8009f30:	6014      	str	r4, [r2, #0]
 8009f32:	e7da      	b.n	8009eea <_free_r+0x26>
 8009f34:	d902      	bls.n	8009f3c <_free_r+0x78>
 8009f36:	230c      	movs	r3, #12
 8009f38:	6003      	str	r3, [r0, #0]
 8009f3a:	e7d6      	b.n	8009eea <_free_r+0x26>
 8009f3c:	6825      	ldr	r5, [r4, #0]
 8009f3e:	1961      	adds	r1, r4, r5
 8009f40:	428b      	cmp	r3, r1
 8009f42:	bf04      	itt	eq
 8009f44:	6819      	ldreq	r1, [r3, #0]
 8009f46:	685b      	ldreq	r3, [r3, #4]
 8009f48:	6063      	str	r3, [r4, #4]
 8009f4a:	bf04      	itt	eq
 8009f4c:	1949      	addeq	r1, r1, r5
 8009f4e:	6021      	streq	r1, [r4, #0]
 8009f50:	6054      	str	r4, [r2, #4]
 8009f52:	e7ca      	b.n	8009eea <_free_r+0x26>
 8009f54:	b003      	add	sp, #12
 8009f56:	bd30      	pop	{r4, r5, pc}
 8009f58:	200107b4 	.word	0x200107b4

08009f5c <malloc>:
 8009f5c:	4b02      	ldr	r3, [pc, #8]	; (8009f68 <malloc+0xc>)
 8009f5e:	4601      	mov	r1, r0
 8009f60:	6818      	ldr	r0, [r3, #0]
 8009f62:	f000 b823 	b.w	8009fac <_malloc_r>
 8009f66:	bf00      	nop
 8009f68:	200000fc 	.word	0x200000fc

08009f6c <sbrk_aligned>:
 8009f6c:	b570      	push	{r4, r5, r6, lr}
 8009f6e:	4e0e      	ldr	r6, [pc, #56]	; (8009fa8 <sbrk_aligned+0x3c>)
 8009f70:	460c      	mov	r4, r1
 8009f72:	6831      	ldr	r1, [r6, #0]
 8009f74:	4605      	mov	r5, r0
 8009f76:	b911      	cbnz	r1, 8009f7e <sbrk_aligned+0x12>
 8009f78:	f000 fcce 	bl	800a918 <_sbrk_r>
 8009f7c:	6030      	str	r0, [r6, #0]
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4628      	mov	r0, r5
 8009f82:	f000 fcc9 	bl	800a918 <_sbrk_r>
 8009f86:	1c43      	adds	r3, r0, #1
 8009f88:	d00a      	beq.n	8009fa0 <sbrk_aligned+0x34>
 8009f8a:	1cc4      	adds	r4, r0, #3
 8009f8c:	f024 0403 	bic.w	r4, r4, #3
 8009f90:	42a0      	cmp	r0, r4
 8009f92:	d007      	beq.n	8009fa4 <sbrk_aligned+0x38>
 8009f94:	1a21      	subs	r1, r4, r0
 8009f96:	4628      	mov	r0, r5
 8009f98:	f000 fcbe 	bl	800a918 <_sbrk_r>
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	d101      	bne.n	8009fa4 <sbrk_aligned+0x38>
 8009fa0:	f04f 34ff 	mov.w	r4, #4294967295
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	bd70      	pop	{r4, r5, r6, pc}
 8009fa8:	200107b8 	.word	0x200107b8

08009fac <_malloc_r>:
 8009fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb0:	1ccd      	adds	r5, r1, #3
 8009fb2:	f025 0503 	bic.w	r5, r5, #3
 8009fb6:	3508      	adds	r5, #8
 8009fb8:	2d0c      	cmp	r5, #12
 8009fba:	bf38      	it	cc
 8009fbc:	250c      	movcc	r5, #12
 8009fbe:	2d00      	cmp	r5, #0
 8009fc0:	4607      	mov	r7, r0
 8009fc2:	db01      	blt.n	8009fc8 <_malloc_r+0x1c>
 8009fc4:	42a9      	cmp	r1, r5
 8009fc6:	d905      	bls.n	8009fd4 <_malloc_r+0x28>
 8009fc8:	230c      	movs	r3, #12
 8009fca:	603b      	str	r3, [r7, #0]
 8009fcc:	2600      	movs	r6, #0
 8009fce:	4630      	mov	r0, r6
 8009fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a0a8 <_malloc_r+0xfc>
 8009fd8:	f000 f868 	bl	800a0ac <__malloc_lock>
 8009fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe0:	461c      	mov	r4, r3
 8009fe2:	bb5c      	cbnz	r4, 800a03c <_malloc_r+0x90>
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	f7ff ffc0 	bl	8009f6c <sbrk_aligned>
 8009fec:	1c43      	adds	r3, r0, #1
 8009fee:	4604      	mov	r4, r0
 8009ff0:	d155      	bne.n	800a09e <_malloc_r+0xf2>
 8009ff2:	f8d8 4000 	ldr.w	r4, [r8]
 8009ff6:	4626      	mov	r6, r4
 8009ff8:	2e00      	cmp	r6, #0
 8009ffa:	d145      	bne.n	800a088 <_malloc_r+0xdc>
 8009ffc:	2c00      	cmp	r4, #0
 8009ffe:	d048      	beq.n	800a092 <_malloc_r+0xe6>
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	4631      	mov	r1, r6
 800a004:	4638      	mov	r0, r7
 800a006:	eb04 0903 	add.w	r9, r4, r3
 800a00a:	f000 fc85 	bl	800a918 <_sbrk_r>
 800a00e:	4581      	cmp	r9, r0
 800a010:	d13f      	bne.n	800a092 <_malloc_r+0xe6>
 800a012:	6821      	ldr	r1, [r4, #0]
 800a014:	1a6d      	subs	r5, r5, r1
 800a016:	4629      	mov	r1, r5
 800a018:	4638      	mov	r0, r7
 800a01a:	f7ff ffa7 	bl	8009f6c <sbrk_aligned>
 800a01e:	3001      	adds	r0, #1
 800a020:	d037      	beq.n	800a092 <_malloc_r+0xe6>
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	442b      	add	r3, r5
 800a026:	6023      	str	r3, [r4, #0]
 800a028:	f8d8 3000 	ldr.w	r3, [r8]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d038      	beq.n	800a0a2 <_malloc_r+0xf6>
 800a030:	685a      	ldr	r2, [r3, #4]
 800a032:	42a2      	cmp	r2, r4
 800a034:	d12b      	bne.n	800a08e <_malloc_r+0xe2>
 800a036:	2200      	movs	r2, #0
 800a038:	605a      	str	r2, [r3, #4]
 800a03a:	e00f      	b.n	800a05c <_malloc_r+0xb0>
 800a03c:	6822      	ldr	r2, [r4, #0]
 800a03e:	1b52      	subs	r2, r2, r5
 800a040:	d41f      	bmi.n	800a082 <_malloc_r+0xd6>
 800a042:	2a0b      	cmp	r2, #11
 800a044:	d917      	bls.n	800a076 <_malloc_r+0xca>
 800a046:	1961      	adds	r1, r4, r5
 800a048:	42a3      	cmp	r3, r4
 800a04a:	6025      	str	r5, [r4, #0]
 800a04c:	bf18      	it	ne
 800a04e:	6059      	strne	r1, [r3, #4]
 800a050:	6863      	ldr	r3, [r4, #4]
 800a052:	bf08      	it	eq
 800a054:	f8c8 1000 	streq.w	r1, [r8]
 800a058:	5162      	str	r2, [r4, r5]
 800a05a:	604b      	str	r3, [r1, #4]
 800a05c:	4638      	mov	r0, r7
 800a05e:	f104 060b 	add.w	r6, r4, #11
 800a062:	f000 f829 	bl	800a0b8 <__malloc_unlock>
 800a066:	f026 0607 	bic.w	r6, r6, #7
 800a06a:	1d23      	adds	r3, r4, #4
 800a06c:	1af2      	subs	r2, r6, r3
 800a06e:	d0ae      	beq.n	8009fce <_malloc_r+0x22>
 800a070:	1b9b      	subs	r3, r3, r6
 800a072:	50a3      	str	r3, [r4, r2]
 800a074:	e7ab      	b.n	8009fce <_malloc_r+0x22>
 800a076:	42a3      	cmp	r3, r4
 800a078:	6862      	ldr	r2, [r4, #4]
 800a07a:	d1dd      	bne.n	800a038 <_malloc_r+0x8c>
 800a07c:	f8c8 2000 	str.w	r2, [r8]
 800a080:	e7ec      	b.n	800a05c <_malloc_r+0xb0>
 800a082:	4623      	mov	r3, r4
 800a084:	6864      	ldr	r4, [r4, #4]
 800a086:	e7ac      	b.n	8009fe2 <_malloc_r+0x36>
 800a088:	4634      	mov	r4, r6
 800a08a:	6876      	ldr	r6, [r6, #4]
 800a08c:	e7b4      	b.n	8009ff8 <_malloc_r+0x4c>
 800a08e:	4613      	mov	r3, r2
 800a090:	e7cc      	b.n	800a02c <_malloc_r+0x80>
 800a092:	230c      	movs	r3, #12
 800a094:	603b      	str	r3, [r7, #0]
 800a096:	4638      	mov	r0, r7
 800a098:	f000 f80e 	bl	800a0b8 <__malloc_unlock>
 800a09c:	e797      	b.n	8009fce <_malloc_r+0x22>
 800a09e:	6025      	str	r5, [r4, #0]
 800a0a0:	e7dc      	b.n	800a05c <_malloc_r+0xb0>
 800a0a2:	605b      	str	r3, [r3, #4]
 800a0a4:	deff      	udf	#255	; 0xff
 800a0a6:	bf00      	nop
 800a0a8:	200107b4 	.word	0x200107b4

0800a0ac <__malloc_lock>:
 800a0ac:	4801      	ldr	r0, [pc, #4]	; (800a0b4 <__malloc_lock+0x8>)
 800a0ae:	f7ff b88a 	b.w	80091c6 <__retarget_lock_acquire_recursive>
 800a0b2:	bf00      	nop
 800a0b4:	200107b0 	.word	0x200107b0

0800a0b8 <__malloc_unlock>:
 800a0b8:	4801      	ldr	r0, [pc, #4]	; (800a0c0 <__malloc_unlock+0x8>)
 800a0ba:	f7ff b885 	b.w	80091c8 <__retarget_lock_release_recursive>
 800a0be:	bf00      	nop
 800a0c0:	200107b0 	.word	0x200107b0

0800a0c4 <_Balloc>:
 800a0c4:	b570      	push	{r4, r5, r6, lr}
 800a0c6:	69c6      	ldr	r6, [r0, #28]
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	460d      	mov	r5, r1
 800a0cc:	b976      	cbnz	r6, 800a0ec <_Balloc+0x28>
 800a0ce:	2010      	movs	r0, #16
 800a0d0:	f7ff ff44 	bl	8009f5c <malloc>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	61e0      	str	r0, [r4, #28]
 800a0d8:	b920      	cbnz	r0, 800a0e4 <_Balloc+0x20>
 800a0da:	4b18      	ldr	r3, [pc, #96]	; (800a13c <_Balloc+0x78>)
 800a0dc:	4818      	ldr	r0, [pc, #96]	; (800a140 <_Balloc+0x7c>)
 800a0de:	216b      	movs	r1, #107	; 0x6b
 800a0e0:	f000 fc38 	bl	800a954 <__assert_func>
 800a0e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0e8:	6006      	str	r6, [r0, #0]
 800a0ea:	60c6      	str	r6, [r0, #12]
 800a0ec:	69e6      	ldr	r6, [r4, #28]
 800a0ee:	68f3      	ldr	r3, [r6, #12]
 800a0f0:	b183      	cbz	r3, 800a114 <_Balloc+0x50>
 800a0f2:	69e3      	ldr	r3, [r4, #28]
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0fa:	b9b8      	cbnz	r0, 800a12c <_Balloc+0x68>
 800a0fc:	2101      	movs	r1, #1
 800a0fe:	fa01 f605 	lsl.w	r6, r1, r5
 800a102:	1d72      	adds	r2, r6, #5
 800a104:	0092      	lsls	r2, r2, #2
 800a106:	4620      	mov	r0, r4
 800a108:	f000 fc42 	bl	800a990 <_calloc_r>
 800a10c:	b160      	cbz	r0, 800a128 <_Balloc+0x64>
 800a10e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a112:	e00e      	b.n	800a132 <_Balloc+0x6e>
 800a114:	2221      	movs	r2, #33	; 0x21
 800a116:	2104      	movs	r1, #4
 800a118:	4620      	mov	r0, r4
 800a11a:	f000 fc39 	bl	800a990 <_calloc_r>
 800a11e:	69e3      	ldr	r3, [r4, #28]
 800a120:	60f0      	str	r0, [r6, #12]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1e4      	bne.n	800a0f2 <_Balloc+0x2e>
 800a128:	2000      	movs	r0, #0
 800a12a:	bd70      	pop	{r4, r5, r6, pc}
 800a12c:	6802      	ldr	r2, [r0, #0]
 800a12e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a132:	2300      	movs	r3, #0
 800a134:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a138:	e7f7      	b.n	800a12a <_Balloc+0x66>
 800a13a:	bf00      	nop
 800a13c:	0800afe1 	.word	0x0800afe1
 800a140:	0800b061 	.word	0x0800b061

0800a144 <_Bfree>:
 800a144:	b570      	push	{r4, r5, r6, lr}
 800a146:	69c6      	ldr	r6, [r0, #28]
 800a148:	4605      	mov	r5, r0
 800a14a:	460c      	mov	r4, r1
 800a14c:	b976      	cbnz	r6, 800a16c <_Bfree+0x28>
 800a14e:	2010      	movs	r0, #16
 800a150:	f7ff ff04 	bl	8009f5c <malloc>
 800a154:	4602      	mov	r2, r0
 800a156:	61e8      	str	r0, [r5, #28]
 800a158:	b920      	cbnz	r0, 800a164 <_Bfree+0x20>
 800a15a:	4b09      	ldr	r3, [pc, #36]	; (800a180 <_Bfree+0x3c>)
 800a15c:	4809      	ldr	r0, [pc, #36]	; (800a184 <_Bfree+0x40>)
 800a15e:	218f      	movs	r1, #143	; 0x8f
 800a160:	f000 fbf8 	bl	800a954 <__assert_func>
 800a164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a168:	6006      	str	r6, [r0, #0]
 800a16a:	60c6      	str	r6, [r0, #12]
 800a16c:	b13c      	cbz	r4, 800a17e <_Bfree+0x3a>
 800a16e:	69eb      	ldr	r3, [r5, #28]
 800a170:	6862      	ldr	r2, [r4, #4]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a178:	6021      	str	r1, [r4, #0]
 800a17a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a17e:	bd70      	pop	{r4, r5, r6, pc}
 800a180:	0800afe1 	.word	0x0800afe1
 800a184:	0800b061 	.word	0x0800b061

0800a188 <__multadd>:
 800a188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a18c:	690d      	ldr	r5, [r1, #16]
 800a18e:	4607      	mov	r7, r0
 800a190:	460c      	mov	r4, r1
 800a192:	461e      	mov	r6, r3
 800a194:	f101 0c14 	add.w	ip, r1, #20
 800a198:	2000      	movs	r0, #0
 800a19a:	f8dc 3000 	ldr.w	r3, [ip]
 800a19e:	b299      	uxth	r1, r3
 800a1a0:	fb02 6101 	mla	r1, r2, r1, r6
 800a1a4:	0c1e      	lsrs	r6, r3, #16
 800a1a6:	0c0b      	lsrs	r3, r1, #16
 800a1a8:	fb02 3306 	mla	r3, r2, r6, r3
 800a1ac:	b289      	uxth	r1, r1
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1b4:	4285      	cmp	r5, r0
 800a1b6:	f84c 1b04 	str.w	r1, [ip], #4
 800a1ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1be:	dcec      	bgt.n	800a19a <__multadd+0x12>
 800a1c0:	b30e      	cbz	r6, 800a206 <__multadd+0x7e>
 800a1c2:	68a3      	ldr	r3, [r4, #8]
 800a1c4:	42ab      	cmp	r3, r5
 800a1c6:	dc19      	bgt.n	800a1fc <__multadd+0x74>
 800a1c8:	6861      	ldr	r1, [r4, #4]
 800a1ca:	4638      	mov	r0, r7
 800a1cc:	3101      	adds	r1, #1
 800a1ce:	f7ff ff79 	bl	800a0c4 <_Balloc>
 800a1d2:	4680      	mov	r8, r0
 800a1d4:	b928      	cbnz	r0, 800a1e2 <__multadd+0x5a>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <__multadd+0x84>)
 800a1da:	480d      	ldr	r0, [pc, #52]	; (800a210 <__multadd+0x88>)
 800a1dc:	21ba      	movs	r1, #186	; 0xba
 800a1de:	f000 fbb9 	bl	800a954 <__assert_func>
 800a1e2:	6922      	ldr	r2, [r4, #16]
 800a1e4:	3202      	adds	r2, #2
 800a1e6:	f104 010c 	add.w	r1, r4, #12
 800a1ea:	0092      	lsls	r2, r2, #2
 800a1ec:	300c      	adds	r0, #12
 800a1ee:	f000 fba3 	bl	800a938 <memcpy>
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	4638      	mov	r0, r7
 800a1f6:	f7ff ffa5 	bl	800a144 <_Bfree>
 800a1fa:	4644      	mov	r4, r8
 800a1fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a200:	3501      	adds	r5, #1
 800a202:	615e      	str	r6, [r3, #20]
 800a204:	6125      	str	r5, [r4, #16]
 800a206:	4620      	mov	r0, r4
 800a208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a20c:	0800b050 	.word	0x0800b050
 800a210:	0800b061 	.word	0x0800b061

0800a214 <__hi0bits>:
 800a214:	0c03      	lsrs	r3, r0, #16
 800a216:	041b      	lsls	r3, r3, #16
 800a218:	b9d3      	cbnz	r3, 800a250 <__hi0bits+0x3c>
 800a21a:	0400      	lsls	r0, r0, #16
 800a21c:	2310      	movs	r3, #16
 800a21e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a222:	bf04      	itt	eq
 800a224:	0200      	lsleq	r0, r0, #8
 800a226:	3308      	addeq	r3, #8
 800a228:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a22c:	bf04      	itt	eq
 800a22e:	0100      	lsleq	r0, r0, #4
 800a230:	3304      	addeq	r3, #4
 800a232:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a236:	bf04      	itt	eq
 800a238:	0080      	lsleq	r0, r0, #2
 800a23a:	3302      	addeq	r3, #2
 800a23c:	2800      	cmp	r0, #0
 800a23e:	db05      	blt.n	800a24c <__hi0bits+0x38>
 800a240:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a244:	f103 0301 	add.w	r3, r3, #1
 800a248:	bf08      	it	eq
 800a24a:	2320      	moveq	r3, #32
 800a24c:	4618      	mov	r0, r3
 800a24e:	4770      	bx	lr
 800a250:	2300      	movs	r3, #0
 800a252:	e7e4      	b.n	800a21e <__hi0bits+0xa>

0800a254 <__lo0bits>:
 800a254:	6803      	ldr	r3, [r0, #0]
 800a256:	f013 0207 	ands.w	r2, r3, #7
 800a25a:	d00c      	beq.n	800a276 <__lo0bits+0x22>
 800a25c:	07d9      	lsls	r1, r3, #31
 800a25e:	d422      	bmi.n	800a2a6 <__lo0bits+0x52>
 800a260:	079a      	lsls	r2, r3, #30
 800a262:	bf49      	itett	mi
 800a264:	085b      	lsrmi	r3, r3, #1
 800a266:	089b      	lsrpl	r3, r3, #2
 800a268:	6003      	strmi	r3, [r0, #0]
 800a26a:	2201      	movmi	r2, #1
 800a26c:	bf5c      	itt	pl
 800a26e:	6003      	strpl	r3, [r0, #0]
 800a270:	2202      	movpl	r2, #2
 800a272:	4610      	mov	r0, r2
 800a274:	4770      	bx	lr
 800a276:	b299      	uxth	r1, r3
 800a278:	b909      	cbnz	r1, 800a27e <__lo0bits+0x2a>
 800a27a:	0c1b      	lsrs	r3, r3, #16
 800a27c:	2210      	movs	r2, #16
 800a27e:	b2d9      	uxtb	r1, r3
 800a280:	b909      	cbnz	r1, 800a286 <__lo0bits+0x32>
 800a282:	3208      	adds	r2, #8
 800a284:	0a1b      	lsrs	r3, r3, #8
 800a286:	0719      	lsls	r1, r3, #28
 800a288:	bf04      	itt	eq
 800a28a:	091b      	lsreq	r3, r3, #4
 800a28c:	3204      	addeq	r2, #4
 800a28e:	0799      	lsls	r1, r3, #30
 800a290:	bf04      	itt	eq
 800a292:	089b      	lsreq	r3, r3, #2
 800a294:	3202      	addeq	r2, #2
 800a296:	07d9      	lsls	r1, r3, #31
 800a298:	d403      	bmi.n	800a2a2 <__lo0bits+0x4e>
 800a29a:	085b      	lsrs	r3, r3, #1
 800a29c:	f102 0201 	add.w	r2, r2, #1
 800a2a0:	d003      	beq.n	800a2aa <__lo0bits+0x56>
 800a2a2:	6003      	str	r3, [r0, #0]
 800a2a4:	e7e5      	b.n	800a272 <__lo0bits+0x1e>
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	e7e3      	b.n	800a272 <__lo0bits+0x1e>
 800a2aa:	2220      	movs	r2, #32
 800a2ac:	e7e1      	b.n	800a272 <__lo0bits+0x1e>
	...

0800a2b0 <__i2b>:
 800a2b0:	b510      	push	{r4, lr}
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	2101      	movs	r1, #1
 800a2b6:	f7ff ff05 	bl	800a0c4 <_Balloc>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	b928      	cbnz	r0, 800a2ca <__i2b+0x1a>
 800a2be:	4b05      	ldr	r3, [pc, #20]	; (800a2d4 <__i2b+0x24>)
 800a2c0:	4805      	ldr	r0, [pc, #20]	; (800a2d8 <__i2b+0x28>)
 800a2c2:	f240 1145 	movw	r1, #325	; 0x145
 800a2c6:	f000 fb45 	bl	800a954 <__assert_func>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	6144      	str	r4, [r0, #20]
 800a2ce:	6103      	str	r3, [r0, #16]
 800a2d0:	bd10      	pop	{r4, pc}
 800a2d2:	bf00      	nop
 800a2d4:	0800b050 	.word	0x0800b050
 800a2d8:	0800b061 	.word	0x0800b061

0800a2dc <__multiply>:
 800a2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e0:	4691      	mov	r9, r2
 800a2e2:	690a      	ldr	r2, [r1, #16]
 800a2e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	bfb8      	it	lt
 800a2ec:	460b      	movlt	r3, r1
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	bfbc      	itt	lt
 800a2f2:	464c      	movlt	r4, r9
 800a2f4:	4699      	movlt	r9, r3
 800a2f6:	6927      	ldr	r7, [r4, #16]
 800a2f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a2fc:	68a3      	ldr	r3, [r4, #8]
 800a2fe:	6861      	ldr	r1, [r4, #4]
 800a300:	eb07 060a 	add.w	r6, r7, sl
 800a304:	42b3      	cmp	r3, r6
 800a306:	b085      	sub	sp, #20
 800a308:	bfb8      	it	lt
 800a30a:	3101      	addlt	r1, #1
 800a30c:	f7ff feda 	bl	800a0c4 <_Balloc>
 800a310:	b930      	cbnz	r0, 800a320 <__multiply+0x44>
 800a312:	4602      	mov	r2, r0
 800a314:	4b44      	ldr	r3, [pc, #272]	; (800a428 <__multiply+0x14c>)
 800a316:	4845      	ldr	r0, [pc, #276]	; (800a42c <__multiply+0x150>)
 800a318:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a31c:	f000 fb1a 	bl	800a954 <__assert_func>
 800a320:	f100 0514 	add.w	r5, r0, #20
 800a324:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a328:	462b      	mov	r3, r5
 800a32a:	2200      	movs	r2, #0
 800a32c:	4543      	cmp	r3, r8
 800a32e:	d321      	bcc.n	800a374 <__multiply+0x98>
 800a330:	f104 0314 	add.w	r3, r4, #20
 800a334:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a338:	f109 0314 	add.w	r3, r9, #20
 800a33c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a340:	9202      	str	r2, [sp, #8]
 800a342:	1b3a      	subs	r2, r7, r4
 800a344:	3a15      	subs	r2, #21
 800a346:	f022 0203 	bic.w	r2, r2, #3
 800a34a:	3204      	adds	r2, #4
 800a34c:	f104 0115 	add.w	r1, r4, #21
 800a350:	428f      	cmp	r7, r1
 800a352:	bf38      	it	cc
 800a354:	2204      	movcc	r2, #4
 800a356:	9201      	str	r2, [sp, #4]
 800a358:	9a02      	ldr	r2, [sp, #8]
 800a35a:	9303      	str	r3, [sp, #12]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d80c      	bhi.n	800a37a <__multiply+0x9e>
 800a360:	2e00      	cmp	r6, #0
 800a362:	dd03      	ble.n	800a36c <__multiply+0x90>
 800a364:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d05b      	beq.n	800a424 <__multiply+0x148>
 800a36c:	6106      	str	r6, [r0, #16]
 800a36e:	b005      	add	sp, #20
 800a370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a374:	f843 2b04 	str.w	r2, [r3], #4
 800a378:	e7d8      	b.n	800a32c <__multiply+0x50>
 800a37a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a37e:	f1ba 0f00 	cmp.w	sl, #0
 800a382:	d024      	beq.n	800a3ce <__multiply+0xf2>
 800a384:	f104 0e14 	add.w	lr, r4, #20
 800a388:	46a9      	mov	r9, r5
 800a38a:	f04f 0c00 	mov.w	ip, #0
 800a38e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a392:	f8d9 1000 	ldr.w	r1, [r9]
 800a396:	fa1f fb82 	uxth.w	fp, r2
 800a39a:	b289      	uxth	r1, r1
 800a39c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a3a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a3a4:	f8d9 2000 	ldr.w	r2, [r9]
 800a3a8:	4461      	add	r1, ip
 800a3aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3ae:	fb0a c20b 	mla	r2, sl, fp, ip
 800a3b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3b6:	b289      	uxth	r1, r1
 800a3b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3bc:	4577      	cmp	r7, lr
 800a3be:	f849 1b04 	str.w	r1, [r9], #4
 800a3c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3c6:	d8e2      	bhi.n	800a38e <__multiply+0xb2>
 800a3c8:	9a01      	ldr	r2, [sp, #4]
 800a3ca:	f845 c002 	str.w	ip, [r5, r2]
 800a3ce:	9a03      	ldr	r2, [sp, #12]
 800a3d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	f1b9 0f00 	cmp.w	r9, #0
 800a3da:	d021      	beq.n	800a420 <__multiply+0x144>
 800a3dc:	6829      	ldr	r1, [r5, #0]
 800a3de:	f104 0c14 	add.w	ip, r4, #20
 800a3e2:	46ae      	mov	lr, r5
 800a3e4:	f04f 0a00 	mov.w	sl, #0
 800a3e8:	f8bc b000 	ldrh.w	fp, [ip]
 800a3ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a3f0:	fb09 220b 	mla	r2, r9, fp, r2
 800a3f4:	4452      	add	r2, sl
 800a3f6:	b289      	uxth	r1, r1
 800a3f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3fc:	f84e 1b04 	str.w	r1, [lr], #4
 800a400:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a404:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a408:	f8be 1000 	ldrh.w	r1, [lr]
 800a40c:	fb09 110a 	mla	r1, r9, sl, r1
 800a410:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a414:	4567      	cmp	r7, ip
 800a416:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a41a:	d8e5      	bhi.n	800a3e8 <__multiply+0x10c>
 800a41c:	9a01      	ldr	r2, [sp, #4]
 800a41e:	50a9      	str	r1, [r5, r2]
 800a420:	3504      	adds	r5, #4
 800a422:	e799      	b.n	800a358 <__multiply+0x7c>
 800a424:	3e01      	subs	r6, #1
 800a426:	e79b      	b.n	800a360 <__multiply+0x84>
 800a428:	0800b050 	.word	0x0800b050
 800a42c:	0800b061 	.word	0x0800b061

0800a430 <__pow5mult>:
 800a430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a434:	4615      	mov	r5, r2
 800a436:	f012 0203 	ands.w	r2, r2, #3
 800a43a:	4606      	mov	r6, r0
 800a43c:	460f      	mov	r7, r1
 800a43e:	d007      	beq.n	800a450 <__pow5mult+0x20>
 800a440:	4c25      	ldr	r4, [pc, #148]	; (800a4d8 <__pow5mult+0xa8>)
 800a442:	3a01      	subs	r2, #1
 800a444:	2300      	movs	r3, #0
 800a446:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a44a:	f7ff fe9d 	bl	800a188 <__multadd>
 800a44e:	4607      	mov	r7, r0
 800a450:	10ad      	asrs	r5, r5, #2
 800a452:	d03d      	beq.n	800a4d0 <__pow5mult+0xa0>
 800a454:	69f4      	ldr	r4, [r6, #28]
 800a456:	b97c      	cbnz	r4, 800a478 <__pow5mult+0x48>
 800a458:	2010      	movs	r0, #16
 800a45a:	f7ff fd7f 	bl	8009f5c <malloc>
 800a45e:	4602      	mov	r2, r0
 800a460:	61f0      	str	r0, [r6, #28]
 800a462:	b928      	cbnz	r0, 800a470 <__pow5mult+0x40>
 800a464:	4b1d      	ldr	r3, [pc, #116]	; (800a4dc <__pow5mult+0xac>)
 800a466:	481e      	ldr	r0, [pc, #120]	; (800a4e0 <__pow5mult+0xb0>)
 800a468:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a46c:	f000 fa72 	bl	800a954 <__assert_func>
 800a470:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a474:	6004      	str	r4, [r0, #0]
 800a476:	60c4      	str	r4, [r0, #12]
 800a478:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a47c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a480:	b94c      	cbnz	r4, 800a496 <__pow5mult+0x66>
 800a482:	f240 2171 	movw	r1, #625	; 0x271
 800a486:	4630      	mov	r0, r6
 800a488:	f7ff ff12 	bl	800a2b0 <__i2b>
 800a48c:	2300      	movs	r3, #0
 800a48e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a492:	4604      	mov	r4, r0
 800a494:	6003      	str	r3, [r0, #0]
 800a496:	f04f 0900 	mov.w	r9, #0
 800a49a:	07eb      	lsls	r3, r5, #31
 800a49c:	d50a      	bpl.n	800a4b4 <__pow5mult+0x84>
 800a49e:	4639      	mov	r1, r7
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	f7ff ff1a 	bl	800a2dc <__multiply>
 800a4a8:	4639      	mov	r1, r7
 800a4aa:	4680      	mov	r8, r0
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f7ff fe49 	bl	800a144 <_Bfree>
 800a4b2:	4647      	mov	r7, r8
 800a4b4:	106d      	asrs	r5, r5, #1
 800a4b6:	d00b      	beq.n	800a4d0 <__pow5mult+0xa0>
 800a4b8:	6820      	ldr	r0, [r4, #0]
 800a4ba:	b938      	cbnz	r0, 800a4cc <__pow5mult+0x9c>
 800a4bc:	4622      	mov	r2, r4
 800a4be:	4621      	mov	r1, r4
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	f7ff ff0b 	bl	800a2dc <__multiply>
 800a4c6:	6020      	str	r0, [r4, #0]
 800a4c8:	f8c0 9000 	str.w	r9, [r0]
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	e7e4      	b.n	800a49a <__pow5mult+0x6a>
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4d6:	bf00      	nop
 800a4d8:	0800b1b0 	.word	0x0800b1b0
 800a4dc:	0800afe1 	.word	0x0800afe1
 800a4e0:	0800b061 	.word	0x0800b061

0800a4e4 <__lshift>:
 800a4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e8:	460c      	mov	r4, r1
 800a4ea:	6849      	ldr	r1, [r1, #4]
 800a4ec:	6923      	ldr	r3, [r4, #16]
 800a4ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4f2:	68a3      	ldr	r3, [r4, #8]
 800a4f4:	4607      	mov	r7, r0
 800a4f6:	4691      	mov	r9, r2
 800a4f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4fc:	f108 0601 	add.w	r6, r8, #1
 800a500:	42b3      	cmp	r3, r6
 800a502:	db0b      	blt.n	800a51c <__lshift+0x38>
 800a504:	4638      	mov	r0, r7
 800a506:	f7ff fddd 	bl	800a0c4 <_Balloc>
 800a50a:	4605      	mov	r5, r0
 800a50c:	b948      	cbnz	r0, 800a522 <__lshift+0x3e>
 800a50e:	4602      	mov	r2, r0
 800a510:	4b28      	ldr	r3, [pc, #160]	; (800a5b4 <__lshift+0xd0>)
 800a512:	4829      	ldr	r0, [pc, #164]	; (800a5b8 <__lshift+0xd4>)
 800a514:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a518:	f000 fa1c 	bl	800a954 <__assert_func>
 800a51c:	3101      	adds	r1, #1
 800a51e:	005b      	lsls	r3, r3, #1
 800a520:	e7ee      	b.n	800a500 <__lshift+0x1c>
 800a522:	2300      	movs	r3, #0
 800a524:	f100 0114 	add.w	r1, r0, #20
 800a528:	f100 0210 	add.w	r2, r0, #16
 800a52c:	4618      	mov	r0, r3
 800a52e:	4553      	cmp	r3, sl
 800a530:	db33      	blt.n	800a59a <__lshift+0xb6>
 800a532:	6920      	ldr	r0, [r4, #16]
 800a534:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a538:	f104 0314 	add.w	r3, r4, #20
 800a53c:	f019 091f 	ands.w	r9, r9, #31
 800a540:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a544:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a548:	d02b      	beq.n	800a5a2 <__lshift+0xbe>
 800a54a:	f1c9 0e20 	rsb	lr, r9, #32
 800a54e:	468a      	mov	sl, r1
 800a550:	2200      	movs	r2, #0
 800a552:	6818      	ldr	r0, [r3, #0]
 800a554:	fa00 f009 	lsl.w	r0, r0, r9
 800a558:	4310      	orrs	r0, r2
 800a55a:	f84a 0b04 	str.w	r0, [sl], #4
 800a55e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a562:	459c      	cmp	ip, r3
 800a564:	fa22 f20e 	lsr.w	r2, r2, lr
 800a568:	d8f3      	bhi.n	800a552 <__lshift+0x6e>
 800a56a:	ebac 0304 	sub.w	r3, ip, r4
 800a56e:	3b15      	subs	r3, #21
 800a570:	f023 0303 	bic.w	r3, r3, #3
 800a574:	3304      	adds	r3, #4
 800a576:	f104 0015 	add.w	r0, r4, #21
 800a57a:	4584      	cmp	ip, r0
 800a57c:	bf38      	it	cc
 800a57e:	2304      	movcc	r3, #4
 800a580:	50ca      	str	r2, [r1, r3]
 800a582:	b10a      	cbz	r2, 800a588 <__lshift+0xa4>
 800a584:	f108 0602 	add.w	r6, r8, #2
 800a588:	3e01      	subs	r6, #1
 800a58a:	4638      	mov	r0, r7
 800a58c:	612e      	str	r6, [r5, #16]
 800a58e:	4621      	mov	r1, r4
 800a590:	f7ff fdd8 	bl	800a144 <_Bfree>
 800a594:	4628      	mov	r0, r5
 800a596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a59a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a59e:	3301      	adds	r3, #1
 800a5a0:	e7c5      	b.n	800a52e <__lshift+0x4a>
 800a5a2:	3904      	subs	r1, #4
 800a5a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5ac:	459c      	cmp	ip, r3
 800a5ae:	d8f9      	bhi.n	800a5a4 <__lshift+0xc0>
 800a5b0:	e7ea      	b.n	800a588 <__lshift+0xa4>
 800a5b2:	bf00      	nop
 800a5b4:	0800b050 	.word	0x0800b050
 800a5b8:	0800b061 	.word	0x0800b061

0800a5bc <__mcmp>:
 800a5bc:	b530      	push	{r4, r5, lr}
 800a5be:	6902      	ldr	r2, [r0, #16]
 800a5c0:	690c      	ldr	r4, [r1, #16]
 800a5c2:	1b12      	subs	r2, r2, r4
 800a5c4:	d10e      	bne.n	800a5e4 <__mcmp+0x28>
 800a5c6:	f100 0314 	add.w	r3, r0, #20
 800a5ca:	3114      	adds	r1, #20
 800a5cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a5d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a5d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a5d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a5dc:	42a5      	cmp	r5, r4
 800a5de:	d003      	beq.n	800a5e8 <__mcmp+0x2c>
 800a5e0:	d305      	bcc.n	800a5ee <__mcmp+0x32>
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	4610      	mov	r0, r2
 800a5e6:	bd30      	pop	{r4, r5, pc}
 800a5e8:	4283      	cmp	r3, r0
 800a5ea:	d3f3      	bcc.n	800a5d4 <__mcmp+0x18>
 800a5ec:	e7fa      	b.n	800a5e4 <__mcmp+0x28>
 800a5ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f2:	e7f7      	b.n	800a5e4 <__mcmp+0x28>

0800a5f4 <__mdiff>:
 800a5f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	4620      	mov	r0, r4
 800a600:	4690      	mov	r8, r2
 800a602:	f7ff ffdb 	bl	800a5bc <__mcmp>
 800a606:	1e05      	subs	r5, r0, #0
 800a608:	d110      	bne.n	800a62c <__mdiff+0x38>
 800a60a:	4629      	mov	r1, r5
 800a60c:	4630      	mov	r0, r6
 800a60e:	f7ff fd59 	bl	800a0c4 <_Balloc>
 800a612:	b930      	cbnz	r0, 800a622 <__mdiff+0x2e>
 800a614:	4b3a      	ldr	r3, [pc, #232]	; (800a700 <__mdiff+0x10c>)
 800a616:	4602      	mov	r2, r0
 800a618:	f240 2137 	movw	r1, #567	; 0x237
 800a61c:	4839      	ldr	r0, [pc, #228]	; (800a704 <__mdiff+0x110>)
 800a61e:	f000 f999 	bl	800a954 <__assert_func>
 800a622:	2301      	movs	r3, #1
 800a624:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a628:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62c:	bfa4      	itt	ge
 800a62e:	4643      	movge	r3, r8
 800a630:	46a0      	movge	r8, r4
 800a632:	4630      	mov	r0, r6
 800a634:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a638:	bfa6      	itte	ge
 800a63a:	461c      	movge	r4, r3
 800a63c:	2500      	movge	r5, #0
 800a63e:	2501      	movlt	r5, #1
 800a640:	f7ff fd40 	bl	800a0c4 <_Balloc>
 800a644:	b920      	cbnz	r0, 800a650 <__mdiff+0x5c>
 800a646:	4b2e      	ldr	r3, [pc, #184]	; (800a700 <__mdiff+0x10c>)
 800a648:	4602      	mov	r2, r0
 800a64a:	f240 2145 	movw	r1, #581	; 0x245
 800a64e:	e7e5      	b.n	800a61c <__mdiff+0x28>
 800a650:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a654:	6926      	ldr	r6, [r4, #16]
 800a656:	60c5      	str	r5, [r0, #12]
 800a658:	f104 0914 	add.w	r9, r4, #20
 800a65c:	f108 0514 	add.w	r5, r8, #20
 800a660:	f100 0e14 	add.w	lr, r0, #20
 800a664:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a668:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a66c:	f108 0210 	add.w	r2, r8, #16
 800a670:	46f2      	mov	sl, lr
 800a672:	2100      	movs	r1, #0
 800a674:	f859 3b04 	ldr.w	r3, [r9], #4
 800a678:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a67c:	fa11 f88b 	uxtah	r8, r1, fp
 800a680:	b299      	uxth	r1, r3
 800a682:	0c1b      	lsrs	r3, r3, #16
 800a684:	eba8 0801 	sub.w	r8, r8, r1
 800a688:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a68c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a690:	fa1f f888 	uxth.w	r8, r8
 800a694:	1419      	asrs	r1, r3, #16
 800a696:	454e      	cmp	r6, r9
 800a698:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a69c:	f84a 3b04 	str.w	r3, [sl], #4
 800a6a0:	d8e8      	bhi.n	800a674 <__mdiff+0x80>
 800a6a2:	1b33      	subs	r3, r6, r4
 800a6a4:	3b15      	subs	r3, #21
 800a6a6:	f023 0303 	bic.w	r3, r3, #3
 800a6aa:	3304      	adds	r3, #4
 800a6ac:	3415      	adds	r4, #21
 800a6ae:	42a6      	cmp	r6, r4
 800a6b0:	bf38      	it	cc
 800a6b2:	2304      	movcc	r3, #4
 800a6b4:	441d      	add	r5, r3
 800a6b6:	4473      	add	r3, lr
 800a6b8:	469e      	mov	lr, r3
 800a6ba:	462e      	mov	r6, r5
 800a6bc:	4566      	cmp	r6, ip
 800a6be:	d30e      	bcc.n	800a6de <__mdiff+0xea>
 800a6c0:	f10c 0203 	add.w	r2, ip, #3
 800a6c4:	1b52      	subs	r2, r2, r5
 800a6c6:	f022 0203 	bic.w	r2, r2, #3
 800a6ca:	3d03      	subs	r5, #3
 800a6cc:	45ac      	cmp	ip, r5
 800a6ce:	bf38      	it	cc
 800a6d0:	2200      	movcc	r2, #0
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a6d8:	b17a      	cbz	r2, 800a6fa <__mdiff+0x106>
 800a6da:	6107      	str	r7, [r0, #16]
 800a6dc:	e7a4      	b.n	800a628 <__mdiff+0x34>
 800a6de:	f856 8b04 	ldr.w	r8, [r6], #4
 800a6e2:	fa11 f288 	uxtah	r2, r1, r8
 800a6e6:	1414      	asrs	r4, r2, #16
 800a6e8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a6ec:	b292      	uxth	r2, r2
 800a6ee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a6f2:	f84e 2b04 	str.w	r2, [lr], #4
 800a6f6:	1421      	asrs	r1, r4, #16
 800a6f8:	e7e0      	b.n	800a6bc <__mdiff+0xc8>
 800a6fa:	3f01      	subs	r7, #1
 800a6fc:	e7ea      	b.n	800a6d4 <__mdiff+0xe0>
 800a6fe:	bf00      	nop
 800a700:	0800b050 	.word	0x0800b050
 800a704:	0800b061 	.word	0x0800b061

0800a708 <__d2b>:
 800a708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a70c:	460f      	mov	r7, r1
 800a70e:	2101      	movs	r1, #1
 800a710:	ec59 8b10 	vmov	r8, r9, d0
 800a714:	4616      	mov	r6, r2
 800a716:	f7ff fcd5 	bl	800a0c4 <_Balloc>
 800a71a:	4604      	mov	r4, r0
 800a71c:	b930      	cbnz	r0, 800a72c <__d2b+0x24>
 800a71e:	4602      	mov	r2, r0
 800a720:	4b24      	ldr	r3, [pc, #144]	; (800a7b4 <__d2b+0xac>)
 800a722:	4825      	ldr	r0, [pc, #148]	; (800a7b8 <__d2b+0xb0>)
 800a724:	f240 310f 	movw	r1, #783	; 0x30f
 800a728:	f000 f914 	bl	800a954 <__assert_func>
 800a72c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a730:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a734:	bb2d      	cbnz	r5, 800a782 <__d2b+0x7a>
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	f1b8 0300 	subs.w	r3, r8, #0
 800a73c:	d026      	beq.n	800a78c <__d2b+0x84>
 800a73e:	4668      	mov	r0, sp
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	f7ff fd87 	bl	800a254 <__lo0bits>
 800a746:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a74a:	b1e8      	cbz	r0, 800a788 <__d2b+0x80>
 800a74c:	f1c0 0320 	rsb	r3, r0, #32
 800a750:	fa02 f303 	lsl.w	r3, r2, r3
 800a754:	430b      	orrs	r3, r1
 800a756:	40c2      	lsrs	r2, r0
 800a758:	6163      	str	r3, [r4, #20]
 800a75a:	9201      	str	r2, [sp, #4]
 800a75c:	9b01      	ldr	r3, [sp, #4]
 800a75e:	61a3      	str	r3, [r4, #24]
 800a760:	2b00      	cmp	r3, #0
 800a762:	bf14      	ite	ne
 800a764:	2202      	movne	r2, #2
 800a766:	2201      	moveq	r2, #1
 800a768:	6122      	str	r2, [r4, #16]
 800a76a:	b1bd      	cbz	r5, 800a79c <__d2b+0x94>
 800a76c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a770:	4405      	add	r5, r0
 800a772:	603d      	str	r5, [r7, #0]
 800a774:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a778:	6030      	str	r0, [r6, #0]
 800a77a:	4620      	mov	r0, r4
 800a77c:	b003      	add	sp, #12
 800a77e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a786:	e7d6      	b.n	800a736 <__d2b+0x2e>
 800a788:	6161      	str	r1, [r4, #20]
 800a78a:	e7e7      	b.n	800a75c <__d2b+0x54>
 800a78c:	a801      	add	r0, sp, #4
 800a78e:	f7ff fd61 	bl	800a254 <__lo0bits>
 800a792:	9b01      	ldr	r3, [sp, #4]
 800a794:	6163      	str	r3, [r4, #20]
 800a796:	3020      	adds	r0, #32
 800a798:	2201      	movs	r2, #1
 800a79a:	e7e5      	b.n	800a768 <__d2b+0x60>
 800a79c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7a4:	6038      	str	r0, [r7, #0]
 800a7a6:	6918      	ldr	r0, [r3, #16]
 800a7a8:	f7ff fd34 	bl	800a214 <__hi0bits>
 800a7ac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7b0:	e7e2      	b.n	800a778 <__d2b+0x70>
 800a7b2:	bf00      	nop
 800a7b4:	0800b050 	.word	0x0800b050
 800a7b8:	0800b061 	.word	0x0800b061

0800a7bc <__sflush_r>:
 800a7bc:	898a      	ldrh	r2, [r1, #12]
 800a7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7c2:	4605      	mov	r5, r0
 800a7c4:	0710      	lsls	r0, r2, #28
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	d458      	bmi.n	800a87c <__sflush_r+0xc0>
 800a7ca:	684b      	ldr	r3, [r1, #4]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	dc05      	bgt.n	800a7dc <__sflush_r+0x20>
 800a7d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	dc02      	bgt.n	800a7dc <__sflush_r+0x20>
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7de:	2e00      	cmp	r6, #0
 800a7e0:	d0f9      	beq.n	800a7d6 <__sflush_r+0x1a>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7e8:	682f      	ldr	r7, [r5, #0]
 800a7ea:	6a21      	ldr	r1, [r4, #32]
 800a7ec:	602b      	str	r3, [r5, #0]
 800a7ee:	d032      	beq.n	800a856 <__sflush_r+0x9a>
 800a7f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7f2:	89a3      	ldrh	r3, [r4, #12]
 800a7f4:	075a      	lsls	r2, r3, #29
 800a7f6:	d505      	bpl.n	800a804 <__sflush_r+0x48>
 800a7f8:	6863      	ldr	r3, [r4, #4]
 800a7fa:	1ac0      	subs	r0, r0, r3
 800a7fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7fe:	b10b      	cbz	r3, 800a804 <__sflush_r+0x48>
 800a800:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a802:	1ac0      	subs	r0, r0, r3
 800a804:	2300      	movs	r3, #0
 800a806:	4602      	mov	r2, r0
 800a808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a80a:	6a21      	ldr	r1, [r4, #32]
 800a80c:	4628      	mov	r0, r5
 800a80e:	47b0      	blx	r6
 800a810:	1c43      	adds	r3, r0, #1
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	d106      	bne.n	800a824 <__sflush_r+0x68>
 800a816:	6829      	ldr	r1, [r5, #0]
 800a818:	291d      	cmp	r1, #29
 800a81a:	d82b      	bhi.n	800a874 <__sflush_r+0xb8>
 800a81c:	4a29      	ldr	r2, [pc, #164]	; (800a8c4 <__sflush_r+0x108>)
 800a81e:	410a      	asrs	r2, r1
 800a820:	07d6      	lsls	r6, r2, #31
 800a822:	d427      	bmi.n	800a874 <__sflush_r+0xb8>
 800a824:	2200      	movs	r2, #0
 800a826:	6062      	str	r2, [r4, #4]
 800a828:	04d9      	lsls	r1, r3, #19
 800a82a:	6922      	ldr	r2, [r4, #16]
 800a82c:	6022      	str	r2, [r4, #0]
 800a82e:	d504      	bpl.n	800a83a <__sflush_r+0x7e>
 800a830:	1c42      	adds	r2, r0, #1
 800a832:	d101      	bne.n	800a838 <__sflush_r+0x7c>
 800a834:	682b      	ldr	r3, [r5, #0]
 800a836:	b903      	cbnz	r3, 800a83a <__sflush_r+0x7e>
 800a838:	6560      	str	r0, [r4, #84]	; 0x54
 800a83a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a83c:	602f      	str	r7, [r5, #0]
 800a83e:	2900      	cmp	r1, #0
 800a840:	d0c9      	beq.n	800a7d6 <__sflush_r+0x1a>
 800a842:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a846:	4299      	cmp	r1, r3
 800a848:	d002      	beq.n	800a850 <__sflush_r+0x94>
 800a84a:	4628      	mov	r0, r5
 800a84c:	f7ff fb3a 	bl	8009ec4 <_free_r>
 800a850:	2000      	movs	r0, #0
 800a852:	6360      	str	r0, [r4, #52]	; 0x34
 800a854:	e7c0      	b.n	800a7d8 <__sflush_r+0x1c>
 800a856:	2301      	movs	r3, #1
 800a858:	4628      	mov	r0, r5
 800a85a:	47b0      	blx	r6
 800a85c:	1c41      	adds	r1, r0, #1
 800a85e:	d1c8      	bne.n	800a7f2 <__sflush_r+0x36>
 800a860:	682b      	ldr	r3, [r5, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d0c5      	beq.n	800a7f2 <__sflush_r+0x36>
 800a866:	2b1d      	cmp	r3, #29
 800a868:	d001      	beq.n	800a86e <__sflush_r+0xb2>
 800a86a:	2b16      	cmp	r3, #22
 800a86c:	d101      	bne.n	800a872 <__sflush_r+0xb6>
 800a86e:	602f      	str	r7, [r5, #0]
 800a870:	e7b1      	b.n	800a7d6 <__sflush_r+0x1a>
 800a872:	89a3      	ldrh	r3, [r4, #12]
 800a874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a878:	81a3      	strh	r3, [r4, #12]
 800a87a:	e7ad      	b.n	800a7d8 <__sflush_r+0x1c>
 800a87c:	690f      	ldr	r7, [r1, #16]
 800a87e:	2f00      	cmp	r7, #0
 800a880:	d0a9      	beq.n	800a7d6 <__sflush_r+0x1a>
 800a882:	0793      	lsls	r3, r2, #30
 800a884:	680e      	ldr	r6, [r1, #0]
 800a886:	bf08      	it	eq
 800a888:	694b      	ldreq	r3, [r1, #20]
 800a88a:	600f      	str	r7, [r1, #0]
 800a88c:	bf18      	it	ne
 800a88e:	2300      	movne	r3, #0
 800a890:	eba6 0807 	sub.w	r8, r6, r7
 800a894:	608b      	str	r3, [r1, #8]
 800a896:	f1b8 0f00 	cmp.w	r8, #0
 800a89a:	dd9c      	ble.n	800a7d6 <__sflush_r+0x1a>
 800a89c:	6a21      	ldr	r1, [r4, #32]
 800a89e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8a0:	4643      	mov	r3, r8
 800a8a2:	463a      	mov	r2, r7
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	47b0      	blx	r6
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	dc06      	bgt.n	800a8ba <__sflush_r+0xfe>
 800a8ac:	89a3      	ldrh	r3, [r4, #12]
 800a8ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8b2:	81a3      	strh	r3, [r4, #12]
 800a8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b8:	e78e      	b.n	800a7d8 <__sflush_r+0x1c>
 800a8ba:	4407      	add	r7, r0
 800a8bc:	eba8 0800 	sub.w	r8, r8, r0
 800a8c0:	e7e9      	b.n	800a896 <__sflush_r+0xda>
 800a8c2:	bf00      	nop
 800a8c4:	dfbffffe 	.word	0xdfbffffe

0800a8c8 <_fflush_r>:
 800a8c8:	b538      	push	{r3, r4, r5, lr}
 800a8ca:	690b      	ldr	r3, [r1, #16]
 800a8cc:	4605      	mov	r5, r0
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	b913      	cbnz	r3, 800a8d8 <_fflush_r+0x10>
 800a8d2:	2500      	movs	r5, #0
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	bd38      	pop	{r3, r4, r5, pc}
 800a8d8:	b118      	cbz	r0, 800a8e2 <_fflush_r+0x1a>
 800a8da:	6a03      	ldr	r3, [r0, #32]
 800a8dc:	b90b      	cbnz	r3, 800a8e2 <_fflush_r+0x1a>
 800a8de:	f7fe fb7b 	bl	8008fd8 <__sinit>
 800a8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d0f3      	beq.n	800a8d2 <_fflush_r+0xa>
 800a8ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8ec:	07d0      	lsls	r0, r2, #31
 800a8ee:	d404      	bmi.n	800a8fa <_fflush_r+0x32>
 800a8f0:	0599      	lsls	r1, r3, #22
 800a8f2:	d402      	bmi.n	800a8fa <_fflush_r+0x32>
 800a8f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8f6:	f7fe fc66 	bl	80091c6 <__retarget_lock_acquire_recursive>
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	f7ff ff5d 	bl	800a7bc <__sflush_r>
 800a902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a904:	07da      	lsls	r2, r3, #31
 800a906:	4605      	mov	r5, r0
 800a908:	d4e4      	bmi.n	800a8d4 <_fflush_r+0xc>
 800a90a:	89a3      	ldrh	r3, [r4, #12]
 800a90c:	059b      	lsls	r3, r3, #22
 800a90e:	d4e1      	bmi.n	800a8d4 <_fflush_r+0xc>
 800a910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a912:	f7fe fc59 	bl	80091c8 <__retarget_lock_release_recursive>
 800a916:	e7dd      	b.n	800a8d4 <_fflush_r+0xc>

0800a918 <_sbrk_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	4d06      	ldr	r5, [pc, #24]	; (800a934 <_sbrk_r+0x1c>)
 800a91c:	2300      	movs	r3, #0
 800a91e:	4604      	mov	r4, r0
 800a920:	4608      	mov	r0, r1
 800a922:	602b      	str	r3, [r5, #0]
 800a924:	f7f7 fb90 	bl	8002048 <_sbrk>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d102      	bne.n	800a932 <_sbrk_r+0x1a>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	b103      	cbz	r3, 800a932 <_sbrk_r+0x1a>
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	bd38      	pop	{r3, r4, r5, pc}
 800a934:	200107ac 	.word	0x200107ac

0800a938 <memcpy>:
 800a938:	440a      	add	r2, r1
 800a93a:	4291      	cmp	r1, r2
 800a93c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a940:	d100      	bne.n	800a944 <memcpy+0xc>
 800a942:	4770      	bx	lr
 800a944:	b510      	push	{r4, lr}
 800a946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a94a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a94e:	4291      	cmp	r1, r2
 800a950:	d1f9      	bne.n	800a946 <memcpy+0xe>
 800a952:	bd10      	pop	{r4, pc}

0800a954 <__assert_func>:
 800a954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a956:	4614      	mov	r4, r2
 800a958:	461a      	mov	r2, r3
 800a95a:	4b09      	ldr	r3, [pc, #36]	; (800a980 <__assert_func+0x2c>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4605      	mov	r5, r0
 800a960:	68d8      	ldr	r0, [r3, #12]
 800a962:	b14c      	cbz	r4, 800a978 <__assert_func+0x24>
 800a964:	4b07      	ldr	r3, [pc, #28]	; (800a984 <__assert_func+0x30>)
 800a966:	9100      	str	r1, [sp, #0]
 800a968:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a96c:	4906      	ldr	r1, [pc, #24]	; (800a988 <__assert_func+0x34>)
 800a96e:	462b      	mov	r3, r5
 800a970:	f000 f844 	bl	800a9fc <fiprintf>
 800a974:	f000 f854 	bl	800aa20 <abort>
 800a978:	4b04      	ldr	r3, [pc, #16]	; (800a98c <__assert_func+0x38>)
 800a97a:	461c      	mov	r4, r3
 800a97c:	e7f3      	b.n	800a966 <__assert_func+0x12>
 800a97e:	bf00      	nop
 800a980:	200000fc 	.word	0x200000fc
 800a984:	0800b1c6 	.word	0x0800b1c6
 800a988:	0800b1d3 	.word	0x0800b1d3
 800a98c:	0800b201 	.word	0x0800b201

0800a990 <_calloc_r>:
 800a990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a992:	fba1 2402 	umull	r2, r4, r1, r2
 800a996:	b94c      	cbnz	r4, 800a9ac <_calloc_r+0x1c>
 800a998:	4611      	mov	r1, r2
 800a99a:	9201      	str	r2, [sp, #4]
 800a99c:	f7ff fb06 	bl	8009fac <_malloc_r>
 800a9a0:	9a01      	ldr	r2, [sp, #4]
 800a9a2:	4605      	mov	r5, r0
 800a9a4:	b930      	cbnz	r0, 800a9b4 <_calloc_r+0x24>
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	b003      	add	sp, #12
 800a9aa:	bd30      	pop	{r4, r5, pc}
 800a9ac:	220c      	movs	r2, #12
 800a9ae:	6002      	str	r2, [r0, #0]
 800a9b0:	2500      	movs	r5, #0
 800a9b2:	e7f8      	b.n	800a9a6 <_calloc_r+0x16>
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	f7fe fb88 	bl	80090ca <memset>
 800a9ba:	e7f4      	b.n	800a9a6 <_calloc_r+0x16>

0800a9bc <__ascii_mbtowc>:
 800a9bc:	b082      	sub	sp, #8
 800a9be:	b901      	cbnz	r1, 800a9c2 <__ascii_mbtowc+0x6>
 800a9c0:	a901      	add	r1, sp, #4
 800a9c2:	b142      	cbz	r2, 800a9d6 <__ascii_mbtowc+0x1a>
 800a9c4:	b14b      	cbz	r3, 800a9da <__ascii_mbtowc+0x1e>
 800a9c6:	7813      	ldrb	r3, [r2, #0]
 800a9c8:	600b      	str	r3, [r1, #0]
 800a9ca:	7812      	ldrb	r2, [r2, #0]
 800a9cc:	1e10      	subs	r0, r2, #0
 800a9ce:	bf18      	it	ne
 800a9d0:	2001      	movne	r0, #1
 800a9d2:	b002      	add	sp, #8
 800a9d4:	4770      	bx	lr
 800a9d6:	4610      	mov	r0, r2
 800a9d8:	e7fb      	b.n	800a9d2 <__ascii_mbtowc+0x16>
 800a9da:	f06f 0001 	mvn.w	r0, #1
 800a9de:	e7f8      	b.n	800a9d2 <__ascii_mbtowc+0x16>

0800a9e0 <__ascii_wctomb>:
 800a9e0:	b149      	cbz	r1, 800a9f6 <__ascii_wctomb+0x16>
 800a9e2:	2aff      	cmp	r2, #255	; 0xff
 800a9e4:	bf85      	ittet	hi
 800a9e6:	238a      	movhi	r3, #138	; 0x8a
 800a9e8:	6003      	strhi	r3, [r0, #0]
 800a9ea:	700a      	strbls	r2, [r1, #0]
 800a9ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800a9f0:	bf98      	it	ls
 800a9f2:	2001      	movls	r0, #1
 800a9f4:	4770      	bx	lr
 800a9f6:	4608      	mov	r0, r1
 800a9f8:	4770      	bx	lr
	...

0800a9fc <fiprintf>:
 800a9fc:	b40e      	push	{r1, r2, r3}
 800a9fe:	b503      	push	{r0, r1, lr}
 800aa00:	4601      	mov	r1, r0
 800aa02:	ab03      	add	r3, sp, #12
 800aa04:	4805      	ldr	r0, [pc, #20]	; (800aa1c <fiprintf+0x20>)
 800aa06:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa0a:	6800      	ldr	r0, [r0, #0]
 800aa0c:	9301      	str	r3, [sp, #4]
 800aa0e:	f000 f837 	bl	800aa80 <_vfiprintf_r>
 800aa12:	b002      	add	sp, #8
 800aa14:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa18:	b003      	add	sp, #12
 800aa1a:	4770      	bx	lr
 800aa1c:	200000fc 	.word	0x200000fc

0800aa20 <abort>:
 800aa20:	b508      	push	{r3, lr}
 800aa22:	2006      	movs	r0, #6
 800aa24:	f000 fa04 	bl	800ae30 <raise>
 800aa28:	2001      	movs	r0, #1
 800aa2a:	f7f7 fa95 	bl	8001f58 <_exit>

0800aa2e <__sfputc_r>:
 800aa2e:	6893      	ldr	r3, [r2, #8]
 800aa30:	3b01      	subs	r3, #1
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	b410      	push	{r4}
 800aa36:	6093      	str	r3, [r2, #8]
 800aa38:	da08      	bge.n	800aa4c <__sfputc_r+0x1e>
 800aa3a:	6994      	ldr	r4, [r2, #24]
 800aa3c:	42a3      	cmp	r3, r4
 800aa3e:	db01      	blt.n	800aa44 <__sfputc_r+0x16>
 800aa40:	290a      	cmp	r1, #10
 800aa42:	d103      	bne.n	800aa4c <__sfputc_r+0x1e>
 800aa44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa48:	f000 b934 	b.w	800acb4 <__swbuf_r>
 800aa4c:	6813      	ldr	r3, [r2, #0]
 800aa4e:	1c58      	adds	r0, r3, #1
 800aa50:	6010      	str	r0, [r2, #0]
 800aa52:	7019      	strb	r1, [r3, #0]
 800aa54:	4608      	mov	r0, r1
 800aa56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <__sfputs_r>:
 800aa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5e:	4606      	mov	r6, r0
 800aa60:	460f      	mov	r7, r1
 800aa62:	4614      	mov	r4, r2
 800aa64:	18d5      	adds	r5, r2, r3
 800aa66:	42ac      	cmp	r4, r5
 800aa68:	d101      	bne.n	800aa6e <__sfputs_r+0x12>
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	e007      	b.n	800aa7e <__sfputs_r+0x22>
 800aa6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa72:	463a      	mov	r2, r7
 800aa74:	4630      	mov	r0, r6
 800aa76:	f7ff ffda 	bl	800aa2e <__sfputc_r>
 800aa7a:	1c43      	adds	r3, r0, #1
 800aa7c:	d1f3      	bne.n	800aa66 <__sfputs_r+0xa>
 800aa7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa80 <_vfiprintf_r>:
 800aa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	460d      	mov	r5, r1
 800aa86:	b09d      	sub	sp, #116	; 0x74
 800aa88:	4614      	mov	r4, r2
 800aa8a:	4698      	mov	r8, r3
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	b118      	cbz	r0, 800aa98 <_vfiprintf_r+0x18>
 800aa90:	6a03      	ldr	r3, [r0, #32]
 800aa92:	b90b      	cbnz	r3, 800aa98 <_vfiprintf_r+0x18>
 800aa94:	f7fe faa0 	bl	8008fd8 <__sinit>
 800aa98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa9a:	07d9      	lsls	r1, r3, #31
 800aa9c:	d405      	bmi.n	800aaaa <_vfiprintf_r+0x2a>
 800aa9e:	89ab      	ldrh	r3, [r5, #12]
 800aaa0:	059a      	lsls	r2, r3, #22
 800aaa2:	d402      	bmi.n	800aaaa <_vfiprintf_r+0x2a>
 800aaa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaa6:	f7fe fb8e 	bl	80091c6 <__retarget_lock_acquire_recursive>
 800aaaa:	89ab      	ldrh	r3, [r5, #12]
 800aaac:	071b      	lsls	r3, r3, #28
 800aaae:	d501      	bpl.n	800aab4 <_vfiprintf_r+0x34>
 800aab0:	692b      	ldr	r3, [r5, #16]
 800aab2:	b99b      	cbnz	r3, 800aadc <_vfiprintf_r+0x5c>
 800aab4:	4629      	mov	r1, r5
 800aab6:	4630      	mov	r0, r6
 800aab8:	f000 f93a 	bl	800ad30 <__swsetup_r>
 800aabc:	b170      	cbz	r0, 800aadc <_vfiprintf_r+0x5c>
 800aabe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aac0:	07dc      	lsls	r4, r3, #31
 800aac2:	d504      	bpl.n	800aace <_vfiprintf_r+0x4e>
 800aac4:	f04f 30ff 	mov.w	r0, #4294967295
 800aac8:	b01d      	add	sp, #116	; 0x74
 800aaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aace:	89ab      	ldrh	r3, [r5, #12]
 800aad0:	0598      	lsls	r0, r3, #22
 800aad2:	d4f7      	bmi.n	800aac4 <_vfiprintf_r+0x44>
 800aad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aad6:	f7fe fb77 	bl	80091c8 <__retarget_lock_release_recursive>
 800aada:	e7f3      	b.n	800aac4 <_vfiprintf_r+0x44>
 800aadc:	2300      	movs	r3, #0
 800aade:	9309      	str	r3, [sp, #36]	; 0x24
 800aae0:	2320      	movs	r3, #32
 800aae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aae6:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaea:	2330      	movs	r3, #48	; 0x30
 800aaec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aca0 <_vfiprintf_r+0x220>
 800aaf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aaf4:	f04f 0901 	mov.w	r9, #1
 800aaf8:	4623      	mov	r3, r4
 800aafa:	469a      	mov	sl, r3
 800aafc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab00:	b10a      	cbz	r2, 800ab06 <_vfiprintf_r+0x86>
 800ab02:	2a25      	cmp	r2, #37	; 0x25
 800ab04:	d1f9      	bne.n	800aafa <_vfiprintf_r+0x7a>
 800ab06:	ebba 0b04 	subs.w	fp, sl, r4
 800ab0a:	d00b      	beq.n	800ab24 <_vfiprintf_r+0xa4>
 800ab0c:	465b      	mov	r3, fp
 800ab0e:	4622      	mov	r2, r4
 800ab10:	4629      	mov	r1, r5
 800ab12:	4630      	mov	r0, r6
 800ab14:	f7ff ffa2 	bl	800aa5c <__sfputs_r>
 800ab18:	3001      	adds	r0, #1
 800ab1a:	f000 80a9 	beq.w	800ac70 <_vfiprintf_r+0x1f0>
 800ab1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab20:	445a      	add	r2, fp
 800ab22:	9209      	str	r2, [sp, #36]	; 0x24
 800ab24:	f89a 3000 	ldrb.w	r3, [sl]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 80a1 	beq.w	800ac70 <_vfiprintf_r+0x1f0>
 800ab2e:	2300      	movs	r3, #0
 800ab30:	f04f 32ff 	mov.w	r2, #4294967295
 800ab34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab38:	f10a 0a01 	add.w	sl, sl, #1
 800ab3c:	9304      	str	r3, [sp, #16]
 800ab3e:	9307      	str	r3, [sp, #28]
 800ab40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab44:	931a      	str	r3, [sp, #104]	; 0x68
 800ab46:	4654      	mov	r4, sl
 800ab48:	2205      	movs	r2, #5
 800ab4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab4e:	4854      	ldr	r0, [pc, #336]	; (800aca0 <_vfiprintf_r+0x220>)
 800ab50:	f7f5 fb46 	bl	80001e0 <memchr>
 800ab54:	9a04      	ldr	r2, [sp, #16]
 800ab56:	b9d8      	cbnz	r0, 800ab90 <_vfiprintf_r+0x110>
 800ab58:	06d1      	lsls	r1, r2, #27
 800ab5a:	bf44      	itt	mi
 800ab5c:	2320      	movmi	r3, #32
 800ab5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab62:	0713      	lsls	r3, r2, #28
 800ab64:	bf44      	itt	mi
 800ab66:	232b      	movmi	r3, #43	; 0x2b
 800ab68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab70:	2b2a      	cmp	r3, #42	; 0x2a
 800ab72:	d015      	beq.n	800aba0 <_vfiprintf_r+0x120>
 800ab74:	9a07      	ldr	r2, [sp, #28]
 800ab76:	4654      	mov	r4, sl
 800ab78:	2000      	movs	r0, #0
 800ab7a:	f04f 0c0a 	mov.w	ip, #10
 800ab7e:	4621      	mov	r1, r4
 800ab80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab84:	3b30      	subs	r3, #48	; 0x30
 800ab86:	2b09      	cmp	r3, #9
 800ab88:	d94d      	bls.n	800ac26 <_vfiprintf_r+0x1a6>
 800ab8a:	b1b0      	cbz	r0, 800abba <_vfiprintf_r+0x13a>
 800ab8c:	9207      	str	r2, [sp, #28]
 800ab8e:	e014      	b.n	800abba <_vfiprintf_r+0x13a>
 800ab90:	eba0 0308 	sub.w	r3, r0, r8
 800ab94:	fa09 f303 	lsl.w	r3, r9, r3
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	9304      	str	r3, [sp, #16]
 800ab9c:	46a2      	mov	sl, r4
 800ab9e:	e7d2      	b.n	800ab46 <_vfiprintf_r+0xc6>
 800aba0:	9b03      	ldr	r3, [sp, #12]
 800aba2:	1d19      	adds	r1, r3, #4
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	9103      	str	r1, [sp, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	bfbb      	ittet	lt
 800abac:	425b      	neglt	r3, r3
 800abae:	f042 0202 	orrlt.w	r2, r2, #2
 800abb2:	9307      	strge	r3, [sp, #28]
 800abb4:	9307      	strlt	r3, [sp, #28]
 800abb6:	bfb8      	it	lt
 800abb8:	9204      	strlt	r2, [sp, #16]
 800abba:	7823      	ldrb	r3, [r4, #0]
 800abbc:	2b2e      	cmp	r3, #46	; 0x2e
 800abbe:	d10c      	bne.n	800abda <_vfiprintf_r+0x15a>
 800abc0:	7863      	ldrb	r3, [r4, #1]
 800abc2:	2b2a      	cmp	r3, #42	; 0x2a
 800abc4:	d134      	bne.n	800ac30 <_vfiprintf_r+0x1b0>
 800abc6:	9b03      	ldr	r3, [sp, #12]
 800abc8:	1d1a      	adds	r2, r3, #4
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	9203      	str	r2, [sp, #12]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	bfb8      	it	lt
 800abd2:	f04f 33ff 	movlt.w	r3, #4294967295
 800abd6:	3402      	adds	r4, #2
 800abd8:	9305      	str	r3, [sp, #20]
 800abda:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800acb0 <_vfiprintf_r+0x230>
 800abde:	7821      	ldrb	r1, [r4, #0]
 800abe0:	2203      	movs	r2, #3
 800abe2:	4650      	mov	r0, sl
 800abe4:	f7f5 fafc 	bl	80001e0 <memchr>
 800abe8:	b138      	cbz	r0, 800abfa <_vfiprintf_r+0x17a>
 800abea:	9b04      	ldr	r3, [sp, #16]
 800abec:	eba0 000a 	sub.w	r0, r0, sl
 800abf0:	2240      	movs	r2, #64	; 0x40
 800abf2:	4082      	lsls	r2, r0
 800abf4:	4313      	orrs	r3, r2
 800abf6:	3401      	adds	r4, #1
 800abf8:	9304      	str	r3, [sp, #16]
 800abfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abfe:	4829      	ldr	r0, [pc, #164]	; (800aca4 <_vfiprintf_r+0x224>)
 800ac00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac04:	2206      	movs	r2, #6
 800ac06:	f7f5 faeb 	bl	80001e0 <memchr>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	d03f      	beq.n	800ac8e <_vfiprintf_r+0x20e>
 800ac0e:	4b26      	ldr	r3, [pc, #152]	; (800aca8 <_vfiprintf_r+0x228>)
 800ac10:	bb1b      	cbnz	r3, 800ac5a <_vfiprintf_r+0x1da>
 800ac12:	9b03      	ldr	r3, [sp, #12]
 800ac14:	3307      	adds	r3, #7
 800ac16:	f023 0307 	bic.w	r3, r3, #7
 800ac1a:	3308      	adds	r3, #8
 800ac1c:	9303      	str	r3, [sp, #12]
 800ac1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac20:	443b      	add	r3, r7
 800ac22:	9309      	str	r3, [sp, #36]	; 0x24
 800ac24:	e768      	b.n	800aaf8 <_vfiprintf_r+0x78>
 800ac26:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	2001      	movs	r0, #1
 800ac2e:	e7a6      	b.n	800ab7e <_vfiprintf_r+0xfe>
 800ac30:	2300      	movs	r3, #0
 800ac32:	3401      	adds	r4, #1
 800ac34:	9305      	str	r3, [sp, #20]
 800ac36:	4619      	mov	r1, r3
 800ac38:	f04f 0c0a 	mov.w	ip, #10
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac42:	3a30      	subs	r2, #48	; 0x30
 800ac44:	2a09      	cmp	r2, #9
 800ac46:	d903      	bls.n	800ac50 <_vfiprintf_r+0x1d0>
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d0c6      	beq.n	800abda <_vfiprintf_r+0x15a>
 800ac4c:	9105      	str	r1, [sp, #20]
 800ac4e:	e7c4      	b.n	800abda <_vfiprintf_r+0x15a>
 800ac50:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac54:	4604      	mov	r4, r0
 800ac56:	2301      	movs	r3, #1
 800ac58:	e7f0      	b.n	800ac3c <_vfiprintf_r+0x1bc>
 800ac5a:	ab03      	add	r3, sp, #12
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	462a      	mov	r2, r5
 800ac60:	4b12      	ldr	r3, [pc, #72]	; (800acac <_vfiprintf_r+0x22c>)
 800ac62:	a904      	add	r1, sp, #16
 800ac64:	4630      	mov	r0, r6
 800ac66:	f7fd fd65 	bl	8008734 <_printf_float>
 800ac6a:	4607      	mov	r7, r0
 800ac6c:	1c78      	adds	r0, r7, #1
 800ac6e:	d1d6      	bne.n	800ac1e <_vfiprintf_r+0x19e>
 800ac70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac72:	07d9      	lsls	r1, r3, #31
 800ac74:	d405      	bmi.n	800ac82 <_vfiprintf_r+0x202>
 800ac76:	89ab      	ldrh	r3, [r5, #12]
 800ac78:	059a      	lsls	r2, r3, #22
 800ac7a:	d402      	bmi.n	800ac82 <_vfiprintf_r+0x202>
 800ac7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac7e:	f7fe faa3 	bl	80091c8 <__retarget_lock_release_recursive>
 800ac82:	89ab      	ldrh	r3, [r5, #12]
 800ac84:	065b      	lsls	r3, r3, #25
 800ac86:	f53f af1d 	bmi.w	800aac4 <_vfiprintf_r+0x44>
 800ac8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac8c:	e71c      	b.n	800aac8 <_vfiprintf_r+0x48>
 800ac8e:	ab03      	add	r3, sp, #12
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	462a      	mov	r2, r5
 800ac94:	4b05      	ldr	r3, [pc, #20]	; (800acac <_vfiprintf_r+0x22c>)
 800ac96:	a904      	add	r1, sp, #16
 800ac98:	4630      	mov	r0, r6
 800ac9a:	f7fd ffef 	bl	8008c7c <_printf_i>
 800ac9e:	e7e4      	b.n	800ac6a <_vfiprintf_r+0x1ea>
 800aca0:	0800b303 	.word	0x0800b303
 800aca4:	0800b30d 	.word	0x0800b30d
 800aca8:	08008735 	.word	0x08008735
 800acac:	0800aa5d 	.word	0x0800aa5d
 800acb0:	0800b309 	.word	0x0800b309

0800acb4 <__swbuf_r>:
 800acb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb6:	460e      	mov	r6, r1
 800acb8:	4614      	mov	r4, r2
 800acba:	4605      	mov	r5, r0
 800acbc:	b118      	cbz	r0, 800acc6 <__swbuf_r+0x12>
 800acbe:	6a03      	ldr	r3, [r0, #32]
 800acc0:	b90b      	cbnz	r3, 800acc6 <__swbuf_r+0x12>
 800acc2:	f7fe f989 	bl	8008fd8 <__sinit>
 800acc6:	69a3      	ldr	r3, [r4, #24]
 800acc8:	60a3      	str	r3, [r4, #8]
 800acca:	89a3      	ldrh	r3, [r4, #12]
 800accc:	071a      	lsls	r2, r3, #28
 800acce:	d525      	bpl.n	800ad1c <__swbuf_r+0x68>
 800acd0:	6923      	ldr	r3, [r4, #16]
 800acd2:	b31b      	cbz	r3, 800ad1c <__swbuf_r+0x68>
 800acd4:	6823      	ldr	r3, [r4, #0]
 800acd6:	6922      	ldr	r2, [r4, #16]
 800acd8:	1a98      	subs	r0, r3, r2
 800acda:	6963      	ldr	r3, [r4, #20]
 800acdc:	b2f6      	uxtb	r6, r6
 800acde:	4283      	cmp	r3, r0
 800ace0:	4637      	mov	r7, r6
 800ace2:	dc04      	bgt.n	800acee <__swbuf_r+0x3a>
 800ace4:	4621      	mov	r1, r4
 800ace6:	4628      	mov	r0, r5
 800ace8:	f7ff fdee 	bl	800a8c8 <_fflush_r>
 800acec:	b9e0      	cbnz	r0, 800ad28 <__swbuf_r+0x74>
 800acee:	68a3      	ldr	r3, [r4, #8]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	60a3      	str	r3, [r4, #8]
 800acf4:	6823      	ldr	r3, [r4, #0]
 800acf6:	1c5a      	adds	r2, r3, #1
 800acf8:	6022      	str	r2, [r4, #0]
 800acfa:	701e      	strb	r6, [r3, #0]
 800acfc:	6962      	ldr	r2, [r4, #20]
 800acfe:	1c43      	adds	r3, r0, #1
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d004      	beq.n	800ad0e <__swbuf_r+0x5a>
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	07db      	lsls	r3, r3, #31
 800ad08:	d506      	bpl.n	800ad18 <__swbuf_r+0x64>
 800ad0a:	2e0a      	cmp	r6, #10
 800ad0c:	d104      	bne.n	800ad18 <__swbuf_r+0x64>
 800ad0e:	4621      	mov	r1, r4
 800ad10:	4628      	mov	r0, r5
 800ad12:	f7ff fdd9 	bl	800a8c8 <_fflush_r>
 800ad16:	b938      	cbnz	r0, 800ad28 <__swbuf_r+0x74>
 800ad18:	4638      	mov	r0, r7
 800ad1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	4628      	mov	r0, r5
 800ad20:	f000 f806 	bl	800ad30 <__swsetup_r>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	d0d5      	beq.n	800acd4 <__swbuf_r+0x20>
 800ad28:	f04f 37ff 	mov.w	r7, #4294967295
 800ad2c:	e7f4      	b.n	800ad18 <__swbuf_r+0x64>
	...

0800ad30 <__swsetup_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4b2a      	ldr	r3, [pc, #168]	; (800addc <__swsetup_r+0xac>)
 800ad34:	4605      	mov	r5, r0
 800ad36:	6818      	ldr	r0, [r3, #0]
 800ad38:	460c      	mov	r4, r1
 800ad3a:	b118      	cbz	r0, 800ad44 <__swsetup_r+0x14>
 800ad3c:	6a03      	ldr	r3, [r0, #32]
 800ad3e:	b90b      	cbnz	r3, 800ad44 <__swsetup_r+0x14>
 800ad40:	f7fe f94a 	bl	8008fd8 <__sinit>
 800ad44:	89a3      	ldrh	r3, [r4, #12]
 800ad46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad4a:	0718      	lsls	r0, r3, #28
 800ad4c:	d422      	bmi.n	800ad94 <__swsetup_r+0x64>
 800ad4e:	06d9      	lsls	r1, r3, #27
 800ad50:	d407      	bmi.n	800ad62 <__swsetup_r+0x32>
 800ad52:	2309      	movs	r3, #9
 800ad54:	602b      	str	r3, [r5, #0]
 800ad56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad5a:	81a3      	strh	r3, [r4, #12]
 800ad5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad60:	e034      	b.n	800adcc <__swsetup_r+0x9c>
 800ad62:	0758      	lsls	r0, r3, #29
 800ad64:	d512      	bpl.n	800ad8c <__swsetup_r+0x5c>
 800ad66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad68:	b141      	cbz	r1, 800ad7c <__swsetup_r+0x4c>
 800ad6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad6e:	4299      	cmp	r1, r3
 800ad70:	d002      	beq.n	800ad78 <__swsetup_r+0x48>
 800ad72:	4628      	mov	r0, r5
 800ad74:	f7ff f8a6 	bl	8009ec4 <_free_r>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	6363      	str	r3, [r4, #52]	; 0x34
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad82:	81a3      	strh	r3, [r4, #12]
 800ad84:	2300      	movs	r3, #0
 800ad86:	6063      	str	r3, [r4, #4]
 800ad88:	6923      	ldr	r3, [r4, #16]
 800ad8a:	6023      	str	r3, [r4, #0]
 800ad8c:	89a3      	ldrh	r3, [r4, #12]
 800ad8e:	f043 0308 	orr.w	r3, r3, #8
 800ad92:	81a3      	strh	r3, [r4, #12]
 800ad94:	6923      	ldr	r3, [r4, #16]
 800ad96:	b94b      	cbnz	r3, 800adac <__swsetup_r+0x7c>
 800ad98:	89a3      	ldrh	r3, [r4, #12]
 800ad9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ada2:	d003      	beq.n	800adac <__swsetup_r+0x7c>
 800ada4:	4621      	mov	r1, r4
 800ada6:	4628      	mov	r0, r5
 800ada8:	f000 f884 	bl	800aeb4 <__smakebuf_r>
 800adac:	89a0      	ldrh	r0, [r4, #12]
 800adae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adb2:	f010 0301 	ands.w	r3, r0, #1
 800adb6:	d00a      	beq.n	800adce <__swsetup_r+0x9e>
 800adb8:	2300      	movs	r3, #0
 800adba:	60a3      	str	r3, [r4, #8]
 800adbc:	6963      	ldr	r3, [r4, #20]
 800adbe:	425b      	negs	r3, r3
 800adc0:	61a3      	str	r3, [r4, #24]
 800adc2:	6923      	ldr	r3, [r4, #16]
 800adc4:	b943      	cbnz	r3, 800add8 <__swsetup_r+0xa8>
 800adc6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800adca:	d1c4      	bne.n	800ad56 <__swsetup_r+0x26>
 800adcc:	bd38      	pop	{r3, r4, r5, pc}
 800adce:	0781      	lsls	r1, r0, #30
 800add0:	bf58      	it	pl
 800add2:	6963      	ldrpl	r3, [r4, #20]
 800add4:	60a3      	str	r3, [r4, #8]
 800add6:	e7f4      	b.n	800adc2 <__swsetup_r+0x92>
 800add8:	2000      	movs	r0, #0
 800adda:	e7f7      	b.n	800adcc <__swsetup_r+0x9c>
 800addc:	200000fc 	.word	0x200000fc

0800ade0 <_raise_r>:
 800ade0:	291f      	cmp	r1, #31
 800ade2:	b538      	push	{r3, r4, r5, lr}
 800ade4:	4604      	mov	r4, r0
 800ade6:	460d      	mov	r5, r1
 800ade8:	d904      	bls.n	800adf4 <_raise_r+0x14>
 800adea:	2316      	movs	r3, #22
 800adec:	6003      	str	r3, [r0, #0]
 800adee:	f04f 30ff 	mov.w	r0, #4294967295
 800adf2:	bd38      	pop	{r3, r4, r5, pc}
 800adf4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800adf6:	b112      	cbz	r2, 800adfe <_raise_r+0x1e>
 800adf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adfc:	b94b      	cbnz	r3, 800ae12 <_raise_r+0x32>
 800adfe:	4620      	mov	r0, r4
 800ae00:	f000 f830 	bl	800ae64 <_getpid_r>
 800ae04:	462a      	mov	r2, r5
 800ae06:	4601      	mov	r1, r0
 800ae08:	4620      	mov	r0, r4
 800ae0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae0e:	f000 b817 	b.w	800ae40 <_kill_r>
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d00a      	beq.n	800ae2c <_raise_r+0x4c>
 800ae16:	1c59      	adds	r1, r3, #1
 800ae18:	d103      	bne.n	800ae22 <_raise_r+0x42>
 800ae1a:	2316      	movs	r3, #22
 800ae1c:	6003      	str	r3, [r0, #0]
 800ae1e:	2001      	movs	r0, #1
 800ae20:	e7e7      	b.n	800adf2 <_raise_r+0x12>
 800ae22:	2400      	movs	r4, #0
 800ae24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae28:	4628      	mov	r0, r5
 800ae2a:	4798      	blx	r3
 800ae2c:	2000      	movs	r0, #0
 800ae2e:	e7e0      	b.n	800adf2 <_raise_r+0x12>

0800ae30 <raise>:
 800ae30:	4b02      	ldr	r3, [pc, #8]	; (800ae3c <raise+0xc>)
 800ae32:	4601      	mov	r1, r0
 800ae34:	6818      	ldr	r0, [r3, #0]
 800ae36:	f7ff bfd3 	b.w	800ade0 <_raise_r>
 800ae3a:	bf00      	nop
 800ae3c:	200000fc 	.word	0x200000fc

0800ae40 <_kill_r>:
 800ae40:	b538      	push	{r3, r4, r5, lr}
 800ae42:	4d07      	ldr	r5, [pc, #28]	; (800ae60 <_kill_r+0x20>)
 800ae44:	2300      	movs	r3, #0
 800ae46:	4604      	mov	r4, r0
 800ae48:	4608      	mov	r0, r1
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	602b      	str	r3, [r5, #0]
 800ae4e:	f7f7 f873 	bl	8001f38 <_kill>
 800ae52:	1c43      	adds	r3, r0, #1
 800ae54:	d102      	bne.n	800ae5c <_kill_r+0x1c>
 800ae56:	682b      	ldr	r3, [r5, #0]
 800ae58:	b103      	cbz	r3, 800ae5c <_kill_r+0x1c>
 800ae5a:	6023      	str	r3, [r4, #0]
 800ae5c:	bd38      	pop	{r3, r4, r5, pc}
 800ae5e:	bf00      	nop
 800ae60:	200107ac 	.word	0x200107ac

0800ae64 <_getpid_r>:
 800ae64:	f7f7 b860 	b.w	8001f28 <_getpid>

0800ae68 <__swhatbuf_r>:
 800ae68:	b570      	push	{r4, r5, r6, lr}
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae70:	2900      	cmp	r1, #0
 800ae72:	b096      	sub	sp, #88	; 0x58
 800ae74:	4615      	mov	r5, r2
 800ae76:	461e      	mov	r6, r3
 800ae78:	da0d      	bge.n	800ae96 <__swhatbuf_r+0x2e>
 800ae7a:	89a3      	ldrh	r3, [r4, #12]
 800ae7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ae80:	f04f 0100 	mov.w	r1, #0
 800ae84:	bf0c      	ite	eq
 800ae86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ae8a:	2340      	movne	r3, #64	; 0x40
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	6031      	str	r1, [r6, #0]
 800ae90:	602b      	str	r3, [r5, #0]
 800ae92:	b016      	add	sp, #88	; 0x58
 800ae94:	bd70      	pop	{r4, r5, r6, pc}
 800ae96:	466a      	mov	r2, sp
 800ae98:	f000 f848 	bl	800af2c <_fstat_r>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	dbec      	blt.n	800ae7a <__swhatbuf_r+0x12>
 800aea0:	9901      	ldr	r1, [sp, #4]
 800aea2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aea6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aeaa:	4259      	negs	r1, r3
 800aeac:	4159      	adcs	r1, r3
 800aeae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeb2:	e7eb      	b.n	800ae8c <__swhatbuf_r+0x24>

0800aeb4 <__smakebuf_r>:
 800aeb4:	898b      	ldrh	r3, [r1, #12]
 800aeb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aeb8:	079d      	lsls	r5, r3, #30
 800aeba:	4606      	mov	r6, r0
 800aebc:	460c      	mov	r4, r1
 800aebe:	d507      	bpl.n	800aed0 <__smakebuf_r+0x1c>
 800aec0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aec4:	6023      	str	r3, [r4, #0]
 800aec6:	6123      	str	r3, [r4, #16]
 800aec8:	2301      	movs	r3, #1
 800aeca:	6163      	str	r3, [r4, #20]
 800aecc:	b002      	add	sp, #8
 800aece:	bd70      	pop	{r4, r5, r6, pc}
 800aed0:	ab01      	add	r3, sp, #4
 800aed2:	466a      	mov	r2, sp
 800aed4:	f7ff ffc8 	bl	800ae68 <__swhatbuf_r>
 800aed8:	9900      	ldr	r1, [sp, #0]
 800aeda:	4605      	mov	r5, r0
 800aedc:	4630      	mov	r0, r6
 800aede:	f7ff f865 	bl	8009fac <_malloc_r>
 800aee2:	b948      	cbnz	r0, 800aef8 <__smakebuf_r+0x44>
 800aee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aee8:	059a      	lsls	r2, r3, #22
 800aeea:	d4ef      	bmi.n	800aecc <__smakebuf_r+0x18>
 800aeec:	f023 0303 	bic.w	r3, r3, #3
 800aef0:	f043 0302 	orr.w	r3, r3, #2
 800aef4:	81a3      	strh	r3, [r4, #12]
 800aef6:	e7e3      	b.n	800aec0 <__smakebuf_r+0xc>
 800aef8:	89a3      	ldrh	r3, [r4, #12]
 800aefa:	6020      	str	r0, [r4, #0]
 800aefc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af00:	81a3      	strh	r3, [r4, #12]
 800af02:	9b00      	ldr	r3, [sp, #0]
 800af04:	6163      	str	r3, [r4, #20]
 800af06:	9b01      	ldr	r3, [sp, #4]
 800af08:	6120      	str	r0, [r4, #16]
 800af0a:	b15b      	cbz	r3, 800af24 <__smakebuf_r+0x70>
 800af0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af10:	4630      	mov	r0, r6
 800af12:	f000 f81d 	bl	800af50 <_isatty_r>
 800af16:	b128      	cbz	r0, 800af24 <__smakebuf_r+0x70>
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	f023 0303 	bic.w	r3, r3, #3
 800af1e:	f043 0301 	orr.w	r3, r3, #1
 800af22:	81a3      	strh	r3, [r4, #12]
 800af24:	89a3      	ldrh	r3, [r4, #12]
 800af26:	431d      	orrs	r5, r3
 800af28:	81a5      	strh	r5, [r4, #12]
 800af2a:	e7cf      	b.n	800aecc <__smakebuf_r+0x18>

0800af2c <_fstat_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	4d07      	ldr	r5, [pc, #28]	; (800af4c <_fstat_r+0x20>)
 800af30:	2300      	movs	r3, #0
 800af32:	4604      	mov	r4, r0
 800af34:	4608      	mov	r0, r1
 800af36:	4611      	mov	r1, r2
 800af38:	602b      	str	r3, [r5, #0]
 800af3a:	f7f7 f85c 	bl	8001ff6 <_fstat>
 800af3e:	1c43      	adds	r3, r0, #1
 800af40:	d102      	bne.n	800af48 <_fstat_r+0x1c>
 800af42:	682b      	ldr	r3, [r5, #0]
 800af44:	b103      	cbz	r3, 800af48 <_fstat_r+0x1c>
 800af46:	6023      	str	r3, [r4, #0]
 800af48:	bd38      	pop	{r3, r4, r5, pc}
 800af4a:	bf00      	nop
 800af4c:	200107ac 	.word	0x200107ac

0800af50 <_isatty_r>:
 800af50:	b538      	push	{r3, r4, r5, lr}
 800af52:	4d06      	ldr	r5, [pc, #24]	; (800af6c <_isatty_r+0x1c>)
 800af54:	2300      	movs	r3, #0
 800af56:	4604      	mov	r4, r0
 800af58:	4608      	mov	r0, r1
 800af5a:	602b      	str	r3, [r5, #0]
 800af5c:	f7f7 f85b 	bl	8002016 <_isatty>
 800af60:	1c43      	adds	r3, r0, #1
 800af62:	d102      	bne.n	800af6a <_isatty_r+0x1a>
 800af64:	682b      	ldr	r3, [r5, #0]
 800af66:	b103      	cbz	r3, 800af6a <_isatty_r+0x1a>
 800af68:	6023      	str	r3, [r4, #0]
 800af6a:	bd38      	pop	{r3, r4, r5, pc}
 800af6c:	200107ac 	.word	0x200107ac

0800af70 <_init>:
 800af70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af72:	bf00      	nop
 800af74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af76:	bc08      	pop	{r3}
 800af78:	469e      	mov	lr, r3
 800af7a:	4770      	bx	lr

0800af7c <_fini>:
 800af7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7e:	bf00      	nop
 800af80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af82:	bc08      	pop	{r3}
 800af84:	469e      	mov	lr, r3
 800af86:	4770      	bx	lr
