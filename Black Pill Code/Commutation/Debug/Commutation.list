
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08008450  08008450  00018450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087dc  080087dc  0002026c  2**0
                  CONTENTS
  4 .ARM          00000008  080087dc  080087dc  000187dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087e4  080087e4  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087e4  080087e4  000187e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087e8  080087e8  000187e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  080087ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000104ec  2000026c  08008a58  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010758  08008a58  00020758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd1a  00000000  00000000  000202df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029ec  00000000  00000000  0002fff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  000329e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c29  00000000  00000000  00033990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019783  00000000  00000000  000345b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014238  00000000  00000000  0004dd3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bb09  00000000  00000000  00061f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005138  00000000  00000000  000fda80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00102bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000026c 	.word	0x2000026c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008438 	.word	0x08008438

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000270 	.word	0x20000270
 80001dc:	08008438 	.word	0x08008438

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <PrepareCommutation>:
uint8_t StopSequence(void);
uint8_t ChangePWM (void);

/* Private function ----------------------------------------------------------*/

uint8_t PrepareCommutation (char Direction) {
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]

	// Read IDR for Hall Sensor status
	uint16_t Hall = (GPIOA->IDR & 0b111) - 1 + 6 * Direction;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <PrepareCommutation+0x7c>)
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	4619      	mov	r1, r3
 8000fb0:	0049      	lsls	r1, r1, #1
 8000fb2:	440b      	add	r3, r1
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4413      	add	r3, r2
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	81fb      	strh	r3, [r7, #14]

	// Set Registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8000fc0:	89fa      	ldrh	r2, [r7, #14]
 8000fc2:	4914      	ldr	r1, [pc, #80]	; (8001014 <PrepareCommutation+0x80>)
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	440b      	add	r3, r1
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <PrepareCommutation+0x84>)
 8000fd2:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 8000fd4:	89fa      	ldrh	r2, [r7, #14]
 8000fd6:	490f      	ldr	r1, [pc, #60]	; (8001014 <PrepareCommutation+0x80>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	881a      	ldrh	r2, [r3, #0]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <PrepareCommutation+0x84>)
 8000fe8:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 8000fea:	89fa      	ldrh	r2, [r7, #14]
 8000fec:	4909      	ldr	r1, [pc, #36]	; (8001014 <PrepareCommutation+0x80>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	881a      	ldrh	r2, [r3, #0]
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <PrepareCommutation+0x84>)
 8000ffe:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 8001000:	2300      	movs	r3, #0

}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40020000 	.word	0x40020000
 8001014:	20000000 	.word	0x20000000
 8001018:	40010000 	.word	0x40010000
 800101c:	00000000 	.word	0x00000000

08001020 <StartupSequence>:

uint8_t StartupSequence (char Direction) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]

	// Initialize some variables
	Fapb1tclk = HAL_RCC_GetPCLK1Freq() * 2;
 800102a:	f002 ff53 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
 800102e:	4603      	mov	r3, r0
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4a63      	ldr	r2, [pc, #396]	; (80011c0 <StartupSequence+0x1a0>)
 8001034:	6013      	str	r3, [r2, #0]
	Fapb2tclk = HAL_RCC_GetPCLK2Freq() * 2;
 8001036:	f002 ff61 	bl	8003efc <HAL_RCC_GetPCLK2Freq>
 800103a:	4603      	mov	r3, r0
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4a61      	ldr	r2, [pc, #388]	; (80011c4 <StartupSequence+0x1a4>)
 8001040:	6013      	str	r3, [r2, #0]
	RPMConst = (Fapb2tclk / (TIM9->PSC + 1)) * 1.35;
 8001042:	4b60      	ldr	r3, [pc, #384]	; (80011c4 <StartupSequence+0x1a4>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b60      	ldr	r3, [pc, #384]	; (80011c8 <StartupSequence+0x1a8>)
 8001048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104a:	3301      	adds	r3, #1
 800104c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa5f 	bl	8000514 <__aeabi_ui2d>
 8001056:	a358      	add	r3, pc, #352	; (adr r3, 80011b8 <StartupSequence+0x198>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff fad4 	bl	8000608 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fda6 	bl	8000bb8 <__aeabi_d2uiz>
 800106c:	4603      	mov	r3, r0
 800106e:	4a57      	ldr	r2, [pc, #348]	; (80011cc <StartupSequence+0x1ac>)
 8001070:	6013      	str	r3, [r2, #0]

	// Set first commutation state according to Hall sensors
	if (PrepareCommutation (Direction + 6 * 2)) {
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	330c      	adds	r3, #12
 8001076:	b2db      	uxtb	r3, r3
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff8b 	bl	8000f94 <PrepareCommutation>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <StartupSequence+0x68>
		return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e091      	b.n	80011ac <StartupSequence+0x18c>
	}

	// Start HallSensor timer
	HAL_TIMEx_HallSensor_Start (&htim2);
 8001088:	4851      	ldr	r0, [pc, #324]	; (80011d0 <StartupSequence+0x1b0>)
 800108a:	f004 fb8b 	bl	80057a4 <HAL_TIMEx_HallSensor_Start>

	// Start all PWM signals on TIM1
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 800108e:	2100      	movs	r1, #0
 8001090:	4850      	ldr	r0, [pc, #320]	; (80011d4 <StartupSequence+0x1b4>)
 8001092:	f003 f877 	bl	8004184 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 8001096:	2104      	movs	r1, #4
 8001098:	484e      	ldr	r0, [pc, #312]	; (80011d4 <StartupSequence+0x1b4>)
 800109a:	f003 f873 	bl	8004184 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 800109e:	2108      	movs	r1, #8
 80010a0:	484c      	ldr	r0, [pc, #304]	; (80011d4 <StartupSequence+0x1b4>)
 80010a2:	f003 f86f 	bl	8004184 <HAL_TIM_PWM_Start>

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 80010a6:	4b4c      	ldr	r3, [pc, #304]	; (80011d8 <StartupSequence+0x1b8>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	4a4b      	ldr	r2, [pc, #300]	; (80011d8 <StartupSequence+0x1b8>)
 80010ac:	f023 0320 	bic.w	r3, r3, #32
 80010b0:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 80010b2:	4b49      	ldr	r3, [pc, #292]	; (80011d8 <StartupSequence+0x1b8>)
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	4a48      	ldr	r2, [pc, #288]	; (80011d8 <StartupSequence+0x1b8>)
 80010b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010bc:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 80010be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010cc:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 80010ce:	4b3e      	ldr	r3, [pc, #248]	; (80011c8 <StartupSequence+0x1a8>)
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	4a3d      	ldr	r2, [pc, #244]	; (80011c8 <StartupSequence+0x1a8>)
 80010d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010d8:	60d3      	str	r3, [r2, #12]

	// Start Interrupts
	HAL_TIM_Base_Start_IT (&htim1);
 80010da:	483e      	ldr	r0, [pc, #248]	; (80011d4 <StartupSequence+0x1b4>)
 80010dc:	f002 ff72 	bl	8003fc4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim2);
 80010e0:	483b      	ldr	r0, [pc, #236]	; (80011d0 <StartupSequence+0x1b0>)
 80010e2:	f002 ff6f 	bl	8003fc4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim9);
 80010e6:	483d      	ldr	r0, [pc, #244]	; (80011dc <StartupSequence+0x1bc>)
 80010e8:	f002 ff6c 	bl	8003fc4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT (&htim9, TIM_CHANNEL_2);
 80010ec:	2104      	movs	r1, #4
 80010ee:	483b      	ldr	r0, [pc, #236]	; (80011dc <StartupSequence+0x1bc>)
 80010f0:	f003 f9ac 	bl	800444c <HAL_TIM_IC_Start_IT>

	// Start ADC for current
	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	HAL_ADC_Start_IT(&hadc1);
 80010f4:	483a      	ldr	r0, [pc, #232]	; (80011e0 <StartupSequence+0x1c0>)
 80010f6:	f001 fa7d 	bl	80025f4 <HAL_ADC_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010fa:	2100      	movs	r1, #0
 80010fc:	4839      	ldr	r0, [pc, #228]	; (80011e4 <StartupSequence+0x1c4>)
 80010fe:	f003 f841 	bl	8004184 <HAL_TIM_PWM_Start>

	// Clear all interrupt triggers
	TIM1->SR &= ~TIM_SR_COMIF;		// Clear Commutation interrupt flag
 8001102:	4b35      	ldr	r3, [pc, #212]	; (80011d8 <StartupSequence+0x1b8>)
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	4a34      	ldr	r2, [pc, #208]	; (80011d8 <StartupSequence+0x1b8>)
 8001108:	f023 0320 	bic.w	r3, r3, #32
 800110c:	6113      	str	r3, [r2, #16]
	TIM1->SR &= ~TIM_SR_BIF;		// Clear Break interrupt flag
 800110e:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <StartupSequence+0x1b8>)
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	4a31      	ldr	r2, [pc, #196]	; (80011d8 <StartupSequence+0x1b8>)
 8001114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001118:	6113      	str	r3, [r2, #16]
	TIM2->SR &= ~TIM_SR_TIF;		// Clear timer 2 interrupt flag
 800111a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001128:	6113      	str	r3, [r2, #16]
	TIM9->SR &= ~TIM_SR_TIF;		// Clear timer 9 interrupt flag
 800112a:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <StartupSequence+0x1a8>)
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	4a26      	ldr	r2, [pc, #152]	; (80011c8 <StartupSequence+0x1a8>)
 8001130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001134:	6113      	str	r3, [r2, #16]

	// Enable interrupts
	TIM1->DIER |= TIM_DIER_COMIE;	// Enable Commutation events in DIER register
 8001136:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <StartupSequence+0x1b8>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	4a27      	ldr	r2, [pc, #156]	; (80011d8 <StartupSequence+0x1b8>)
 800113c:	f043 0320 	orr.w	r3, r3, #32
 8001140:	60d3      	str	r3, [r2, #12]
	TIM2->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 2
 8001142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001150:	60d3      	str	r3, [r2, #12]
	TIM9->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 9
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <StartupSequence+0x1a8>)
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <StartupSequence+0x1a8>)
 8001158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800115c:	60d3      	str	r3, [r2, #12]

	// Write some registers
	ADC1->CR1  |= ADC_CR1_EOCIE;	// Enable ADC interrupts
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <StartupSequence+0x1c8>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	4a21      	ldr	r2, [pc, #132]	; (80011e8 <StartupSequence+0x1c8>)
 8001164:	f043 0320 	orr.w	r3, r3, #32
 8001168:	6053      	str	r3, [r2, #4]
	TIM1->CR2  |= TIM_CR2_CCPC; 	// Set CCPC in CR2 to preload CCxE, CCxNE and OCxM bits
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <StartupSequence+0x1b8>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	4a1a      	ldr	r2, [pc, #104]	; (80011d8 <StartupSequence+0x1b8>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6053      	str	r3, [r2, #4]
	TIM1->BDTR &= ~TIM_BDTR_DTG;	// Reset DTG bits
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <StartupSequence+0x1b8>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <StartupSequence+0x1b8>)
 800117c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR |= 0x800F;			// Set dead-time to 100ns and make sure to enable MOE bit
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <StartupSequence+0x1b8>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <StartupSequence+0x1b8>)
 8001188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800118c:	f043 030f 	orr.w	r3, r3, #15
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->EGR  |= TIM_EGR_COMG; 	// Set COMG bit in EGR for first commutation
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <StartupSequence+0x1b8>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <StartupSequence+0x1b8>)
 8001198:	f043 0320 	orr.w	r3, r3, #32
 800119c:	6153      	str	r3, [r2, #20]
	TIM1->DIER |= TIM_DIER_COMIE; 	// Enable commutation events in DIER register
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <StartupSequence+0x1b8>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <StartupSequence+0x1b8>)
 80011a4:	f043 0320 	orr.w	r3, r3, #32
 80011a8:	60d3      	str	r3, [r2, #12]

	return HAL_OK;
 80011aa:	2300      	movs	r3, #0

}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	f3af 8000 	nop.w
 80011b8:	9999999a 	.word	0x9999999a
 80011bc:	3ff59999 	.word	0x3ff59999
 80011c0:	20000288 	.word	0x20000288
 80011c4:	2000028c 	.word	0x2000028c
 80011c8:	40014000 	.word	0x40014000
 80011cc:	20000290 	.word	0x20000290
 80011d0:	200104e8 	.word	0x200104e8
 80011d4:	200104a0 	.word	0x200104a0
 80011d8:	40010000 	.word	0x40010000
 80011dc:	200105c0 	.word	0x200105c0
 80011e0:	200102a0 	.word	0x200102a0
 80011e4:	20010530 	.word	0x20010530
 80011e8:	40012000 	.word	0x40012000

080011ec <StopSequence>:

uint8_t StopSequence(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

	// Stop HallSensor timer
	HAL_TIMEx_HallSensor_Stop (&htim2);
 80011f0:	4828      	ldr	r0, [pc, #160]	; (8001294 <StopSequence+0xa8>)
 80011f2:	f004 fb57 	bl	80058a4 <HAL_TIMEx_HallSensor_Stop>

	// Disable all output channels
	TIM1->CCER  = 0x0000;
 80011f6:	4b28      	ldr	r3, [pc, #160]	; (8001298 <StopSequence+0xac>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = 0x0000;
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <StopSequence+0xac>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = 0x0000;
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <StopSequence+0xac>)
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]

	// Perform one last commutation event if not already disabled
	if ( (TIM1->DIER & TIM_DIER_COMIE) >= 1 ) { 		// If COMIE bit in DIER is set commutation events are still enabled
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <StopSequence+0xac>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f003 0320 	and.w	r3, r3, #32
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <StopSequence+0x34>

		TIM1->EGR |= TIM_EGR_COMG; 						// Trigger commutation event
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <StopSequence+0xac>)
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <StopSequence+0xac>)
 800121a:	f043 0320 	orr.w	r3, r3, #32
 800121e:	6153      	str	r3, [r2, #20]
		// while ( (TIM1->SR & TIM_SR_COMIF) >= 1 ); 	// Wait until commutation event has happened

	}

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <StopSequence+0xac>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <StopSequence+0xac>)
 8001226:	f023 0320 	bic.w	r3, r3, #32
 800122a:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <StopSequence+0xac>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4a19      	ldr	r2, [pc, #100]	; (8001298 <StopSequence+0xac>)
 8001232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001236:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 8001238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001246:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <StopSequence+0xb0>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	4a13      	ldr	r2, [pc, #76]	; (800129c <StopSequence+0xb0>)
 800124e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001252:	60d3      	str	r3, [r2, #12]

	// Stop interrupts
	HAL_TIM_Base_Stop_IT (&htim1);
 8001254:	4812      	ldr	r0, [pc, #72]	; (80012a0 <StopSequence+0xb4>)
 8001256:	f002 ff17 	bl	8004088 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim2);
 800125a:	480e      	ldr	r0, [pc, #56]	; (8001294 <StopSequence+0xa8>)
 800125c:	f002 ff14 	bl	8004088 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim9);
 8001260:	4810      	ldr	r0, [pc, #64]	; (80012a4 <StopSequence+0xb8>)
 8001262:	f002 ff11 	bl	8004088 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Stop_IT (&htim9, TIM_CHANNEL_2);
 8001266:	2104      	movs	r1, #4
 8001268:	480e      	ldr	r0, [pc, #56]	; (80012a4 <StopSequence+0xb8>)
 800126a:	f003 fa09 	bl	8004680 <HAL_TIM_IC_Stop_IT>

	// Stop PWM Timers
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_1);
 800126e:	2100      	movs	r1, #0
 8001270:	480b      	ldr	r0, [pc, #44]	; (80012a0 <StopSequence+0xb4>)
 8001272:	f003 f837 	bl	80042e4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_2);
 8001276:	2104      	movs	r1, #4
 8001278:	4809      	ldr	r0, [pc, #36]	; (80012a0 <StopSequence+0xb4>)
 800127a:	f003 f833 	bl	80042e4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_3);
 800127e:	2108      	movs	r1, #8
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <StopSequence+0xb4>)
 8001282:	f003 f82f 	bl	80042e4 <HAL_TIM_PWM_Stop>

	Registers[RPMReg] = 0;
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <StopSequence+0xbc>)
 8001288:	2200      	movs	r2, #0
 800128a:	80da      	strh	r2, [r3, #6]

	return HAL_OK;
 800128c:	2300      	movs	r3, #0

}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200104e8 	.word	0x200104e8
 8001298:	40010000 	.word	0x40010000
 800129c:	40014000 	.word	0x40014000
 80012a0:	200104a0 	.word	0x200104a0
 80012a4:	200105c0 	.word	0x200105c0
 80012a8:	20000090 	.word	0x20000090

080012ac <ChangePWM>:

uint8_t ChangePWM (void) {
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0

	uint32_t PWM = (Registers[PWMReg] * TIM1->ARR) / 100; // Calculate required CCRx value
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <ChangePWM+0x6c>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <ChangePWM+0x70>)
 80012ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	4a17      	ldr	r2, [pc, #92]	; (8001320 <ChangePWM+0x74>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	607b      	str	r3, [r7, #4]

	if (PWM >= TIM1->ARR - 60) {
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <ChangePWM+0x70>)
 80012cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ce:	3b3c      	subs	r3, #60	; 0x3c
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d303      	bcc.n	80012de <ChangePWM+0x32>
		PWM = TIM1->ARR - 60;
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <ChangePWM+0x70>)
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	3b3c      	subs	r3, #60	; 0x3c
 80012dc:	607b      	str	r3, [r7, #4]
	}

	TIM1->CR1 |= TIM_CR1_UDIS; 	// Disable Update Events
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <ChangePWM+0x70>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a0e      	ldr	r2, [pc, #56]	; (800131c <ChangePWM+0x70>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6013      	str	r3, [r2, #0]
	TIM1->CCR1 = PWM;	  		// Set new PWM for channel 1
 80012ea:	4a0c      	ldr	r2, [pc, #48]	; (800131c <ChangePWM+0x70>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = PWM;	  		// Set new PWM for channel 2
 80012f0:	4a0a      	ldr	r2, [pc, #40]	; (800131c <ChangePWM+0x70>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = PWM;	  		// Set new PWM for channel 3
 80012f6:	4a09      	ldr	r2, [pc, #36]	; (800131c <ChangePWM+0x70>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_UDIS; // Enable Update Events
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <ChangePWM+0x70>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <ChangePWM+0x70>)
 8001302:	f023 0302 	bic.w	r3, r3, #2
 8001306:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 8001308:	2300      	movs	r3, #0

}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000090 	.word	0x20000090
 800131c:	40010000 	.word	0x40010000
 8001320:	51eb851f 	.word	0x51eb851f

08001324 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800132a:	463b      	mov	r3, r7
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <MX_ADC1_Init+0x9c>)
 8001338:	4a22      	ldr	r2, [pc, #136]	; (80013c4 <MX_ADC1_Init+0xa0>)
 800133a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800133c:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <MX_ADC1_Init+0x9c>)
 800133e:	2200      	movs	r2, #0
 8001340:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <MX_ADC1_Init+0x9c>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <MX_ADC1_Init+0x9c>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <MX_ADC1_Init+0x9c>)
 8001350:	2200      	movs	r2, #0
 8001352:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <MX_ADC1_Init+0x9c>)
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <MX_ADC1_Init+0x9c>)
 800135e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <MX_ADC1_Init+0x9c>)
 8001366:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <MX_ADC1_Init+0x9c>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <MX_ADC1_Init+0x9c>)
 8001374:	2201      	movs	r2, #1
 8001376:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_ADC1_Init+0x9c>)
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <MX_ADC1_Init+0x9c>)
 8001382:	2201      	movs	r2, #1
 8001384:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001386:	480e      	ldr	r0, [pc, #56]	; (80013c0 <MX_ADC1_Init+0x9c>)
 8001388:	f001 f8f0 	bl	800256c <HAL_ADC_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001392:	f000 fafd 	bl	8001990 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001396:	2309      	movs	r3, #9
 8001398:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800139a:	2301      	movs	r3, #1
 800139c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800139e:	2301      	movs	r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a2:	463b      	mov	r3, r7
 80013a4:	4619      	mov	r1, r3
 80013a6:	4806      	ldr	r0, [pc, #24]	; (80013c0 <MX_ADC1_Init+0x9c>)
 80013a8:	f001 fb14 	bl	80029d4 <HAL_ADC_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80013b2:	f000 faed 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200102a0 	.word	0x200102a0
 80013c4:	40012000 	.word	0x40012000

080013c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a1b      	ldr	r2, [pc, #108]	; (8001454 <HAL_ADC_MspInit+0x8c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d12f      	bne.n	800144a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <HAL_ADC_MspInit+0x90>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a19      	ldr	r2, [pc, #100]	; (8001458 <HAL_ADC_MspInit+0x90>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_ADC_MspInit+0x90>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <HAL_ADC_MspInit+0x90>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <HAL_ADC_MspInit+0x90>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <HAL_ADC_MspInit+0x90>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001422:	2302      	movs	r3, #2
 8001424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001426:	2303      	movs	r3, #3
 8001428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <HAL_ADC_MspInit+0x94>)
 8001436:	f001 fe17 	bl	8003068 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	2012      	movs	r0, #18
 8001440:	f001 fddb 	bl	8002ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001444:	2012      	movs	r0, #18
 8001446:	f001 fdf4 	bl	8003032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	; 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40012000 	.word	0x40012000
 8001458:	40023800 	.word	0x40023800
 800145c:	40020400 	.word	0x40020400

08001460 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

	TotalCurrent -= Current[Ci];
 8001468:	4b39      	ldr	r3, [pc, #228]	; (8001550 <HAL_ADC_ConvCpltCallback+0xf0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a39      	ldr	r2, [pc, #228]	; (8001554 <HAL_ADC_ConvCpltCallback+0xf4>)
 800146e:	8812      	ldrh	r2, [r2, #0]
 8001470:	4611      	mov	r1, r2
 8001472:	4a39      	ldr	r2, [pc, #228]	; (8001558 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001474:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001478:	1a9b      	subs	r3, r3, r2
 800147a:	4a35      	ldr	r2, [pc, #212]	; (8001550 <HAL_ADC_ConvCpltCallback+0xf0>)
 800147c:	6013      	str	r3, [r2, #0]
	Current[Ci] = HAL_ADC_GetValue(&hadc1);
 800147e:	4837      	ldr	r0, [pc, #220]	; (800155c <HAL_ADC_ConvCpltCallback+0xfc>)
 8001480:	f001 fa86 	bl	8002990 <HAL_ADC_GetValue>
 8001484:	4601      	mov	r1, r0
 8001486:	4b33      	ldr	r3, [pc, #204]	; (8001554 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	b289      	uxth	r1, r1
 800148e:	4b32      	ldr	r3, [pc, #200]	; (8001558 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001490:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	TotalCurrent += Current[Ci];
 8001494:	4b2f      	ldr	r3, [pc, #188]	; (8001554 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <HAL_ADC_ConvCpltCallback+0xf8>)
 800149c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a29      	ldr	r2, [pc, #164]	; (8001550 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014aa:	6013      	str	r3, [r2, #0]

	Ci++;
 80014ac:	4b29      	ldr	r3, [pc, #164]	; (8001554 <HAL_ADC_ConvCpltCallback+0xf4>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <HAL_ADC_ConvCpltCallback+0xf4>)
 80014b6:	801a      	strh	r2, [r3, #0]

	if ( Ci >= AvgSizeCur - 1 ) {
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_ADC_ConvCpltCallback+0xf4>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d902      	bls.n	80014ca <HAL_ADC_ConvCpltCallback+0x6a>
		Ci = 0;
 80014c4:	4b23      	ldr	r3, [pc, #140]	; (8001554 <HAL_ADC_ConvCpltCallback+0xf4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	801a      	strh	r2, [r3, #0]
	}

	float current = (3.3 * (TotalCurrent / AvgSizeCur)) / 40960 / 0.015;
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0bdb      	lsrs	r3, r3, #15
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f81f 	bl	8000514 <__aeabi_ui2d>
 80014d6:	a31a      	add	r3, pc, #104	; (adr r3, 8001540 <HAL_ADC_ConvCpltCallback+0xe0>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff f894 	bl	8000608 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <HAL_ADC_ConvCpltCallback+0x100>)
 80014ee:	f7ff f9b5 	bl	800085c <__aeabi_ddiv>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	a313      	add	r3, pc, #76	; (adr r3, 8001548 <HAL_ADC_ConvCpltCallback+0xe8>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7ff f9ac 	bl	800085c <__aeabi_ddiv>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fb74 	bl	8000bf8 <__aeabi_d2f>
 8001510:	4603      	mov	r3, r0
 8001512:	60fb      	str	r3, [r7, #12]
	Registers[CurReg] = current * 1000;
 8001514:	edd7 7a03 	vldr	s15, [r7, #12]
 8001518:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001564 <HAL_ADC_ConvCpltCallback+0x104>
 800151c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001524:	ee17 3a90 	vmov	r3, s15
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_ADC_ConvCpltCallback+0x108>)
 800152c:	809a      	strh	r2, [r3, #4]

	Counter++;
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_ADC_ConvCpltCallback+0x10c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	4a0d      	ldr	r2, [pc, #52]	; (800156c <HAL_ADC_ConvCpltCallback+0x10c>)
 8001536:	6013      	str	r3, [r2, #0]

}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	66666666 	.word	0x66666666
 8001544:	400a6666 	.word	0x400a6666
 8001548:	eb851eb8 	.word	0xeb851eb8
 800154c:	3f8eb851 	.word	0x3f8eb851
 8001550:	20000294 	.word	0x20000294
 8001554:	2000029c 	.word	0x2000029c
 8001558:	200002a0 	.word	0x200002a0
 800155c:	200102a0 	.word	0x200102a0
 8001560:	40e40000 	.word	0x40e40000
 8001564:	447a0000 	.word	0x447a0000
 8001568:	20000090 	.word	0x20000090
 800156c:	20000298 	.word	0x20000298

08001570 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <MX_GPIO_Init+0x130>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <MX_GPIO_Init+0x130>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b42      	ldr	r3, [pc, #264]	; (80016a0 <MX_GPIO_Init+0x130>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b3e      	ldr	r3, [pc, #248]	; (80016a0 <MX_GPIO_Init+0x130>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a3d      	ldr	r2, [pc, #244]	; (80016a0 <MX_GPIO_Init+0x130>)
 80015ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b3b      	ldr	r3, [pc, #236]	; (80016a0 <MX_GPIO_Init+0x130>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <MX_GPIO_Init+0x130>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a36      	ldr	r2, [pc, #216]	; (80016a0 <MX_GPIO_Init+0x130>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <MX_GPIO_Init+0x130>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <MX_GPIO_Init+0x130>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a2f      	ldr	r2, [pc, #188]	; (80016a0 <MX_GPIO_Init+0x130>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <MX_GPIO_Init+0x130>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015fc:	4829      	ldr	r0, [pc, #164]	; (80016a4 <MX_GPIO_Init+0x134>)
 80015fe:	f001 feb7 	bl	8003370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	2301      	movs	r3, #1
 800160a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	4822      	ldr	r0, [pc, #136]	; (80016a4 <MX_GPIO_Init+0x134>)
 800161c:	f001 fd24 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001620:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001626:	2303      	movs	r3, #3
 8001628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	481b      	ldr	r0, [pc, #108]	; (80016a4 <MX_GPIO_Init+0x134>)
 8001636:	f001 fd17 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800163a:	f649 03f0 	movw	r3, #39152	; 0x98f0
 800163e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001640:	2303      	movs	r3, #3
 8001642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	4816      	ldr	r0, [pc, #88]	; (80016a8 <MX_GPIO_Init+0x138>)
 8001650:	f001 fd0a 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB12 PB5
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5
 8001654:	f241 2325 	movw	r3, #4645	; 0x1225
 8001658:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800165a:	2303      	movs	r3, #3
 800165c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4810      	ldr	r0, [pc, #64]	; (80016ac <MX_GPIO_Init+0x13c>)
 800166a:	f001 fcfd 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800166e:	2310      	movs	r3, #16
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001672:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001678:	2302      	movs	r3, #2
 800167a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	480a      	ldr	r0, [pc, #40]	; (80016ac <MX_GPIO_Init+0x13c>)
 8001684:	f001 fcf0 	bl	8003068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	200a      	movs	r0, #10
 800168e:	f001 fcb4 	bl	8002ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001692:	200a      	movs	r0, #10
 8001694:	f001 fccd 	bl	8003032 <HAL_NVIC_EnableIRQ>

}
 8001698:	bf00      	nop
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400

080016b0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2C1_Init+0x50>)
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <MX_I2C1_Init+0x54>)
 80016b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_I2C1_Init+0x50>)
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_I2C1_Init+0x58>)
 80016be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ee:	f001 fe7d 	bl	80033ec <HAL_I2C_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016f8:	f000 f94a 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200102e8 	.word	0x200102e8
 8001704:	40005400 	.word	0x40005400
 8001708:	000186a0 	.word	0x000186a0

0800170c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_I2C2_Init+0x50>)
 8001712:	4a13      	ldr	r2, [pc, #76]	; (8001760 <MX_I2C2_Init+0x54>)
 8001714:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_I2C2_Init+0x50>)
 8001718:	4a12      	ldr	r2, [pc, #72]	; (8001764 <MX_I2C2_Init+0x58>)
 800171a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_I2C2_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_I2C2_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_I2C2_Init+0x50>)
 800172a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800172e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <MX_I2C2_Init+0x50>)
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_I2C2_Init+0x50>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <MX_I2C2_Init+0x50>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_I2C2_Init+0x50>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_I2C2_Init+0x50>)
 800174a:	f001 fe4f 	bl	80033ec <HAL_I2C_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001754:	f000 f91c 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	2001033c 	.word	0x2001033c
 8001760:	40005800 	.word	0x40005800
 8001764:	000186a0 	.word	0x000186a0

08001768 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08c      	sub	sp, #48	; 0x30
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a3a      	ldr	r2, [pc, #232]	; (8001870 <HAL_I2C_MspInit+0x108>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d12c      	bne.n	80017e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	4b39      	ldr	r3, [pc, #228]	; (8001874 <HAL_I2C_MspInit+0x10c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a38      	ldr	r2, [pc, #224]	; (8001874 <HAL_I2C_MspInit+0x10c>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b36      	ldr	r3, [pc, #216]	; (8001874 <HAL_I2C_MspInit+0x10c>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017a6:	23c0      	movs	r3, #192	; 0xc0
 80017a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017aa:	2312      	movs	r3, #18
 80017ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017b6:	2304      	movs	r3, #4
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	482d      	ldr	r0, [pc, #180]	; (8001878 <HAL_I2C_MspInit+0x110>)
 80017c2:	f001 fc51 	bl	8003068 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <HAL_I2C_MspInit+0x10c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a29      	ldr	r2, [pc, #164]	; (8001874 <HAL_I2C_MspInit+0x10c>)
 80017d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b27      	ldr	r3, [pc, #156]	; (8001874 <HAL_I2C_MspInit+0x10c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80017e2:	e041      	b.n	8001868 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a24      	ldr	r2, [pc, #144]	; (800187c <HAL_I2C_MspInit+0x114>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d13c      	bne.n	8001868 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_I2C_MspInit+0x10c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <HAL_I2C_MspInit+0x10c>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <HAL_I2C_MspInit+0x10c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800180a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800180e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001810:	2312      	movs	r3, #18
 8001812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001814:	2301      	movs	r3, #1
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800181c:	2304      	movs	r3, #4
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	4619      	mov	r1, r3
 8001826:	4814      	ldr	r0, [pc, #80]	; (8001878 <HAL_I2C_MspInit+0x110>)
 8001828:	f001 fc1e 	bl	8003068 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800182c:	2308      	movs	r3, #8
 800182e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001830:	2312      	movs	r3, #18
 8001832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001834:	2301      	movs	r3, #1
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001838:	2303      	movs	r3, #3
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800183c:	2309      	movs	r3, #9
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4619      	mov	r1, r3
 8001846:	480c      	ldr	r0, [pc, #48]	; (8001878 <HAL_I2C_MspInit+0x110>)
 8001848:	f001 fc0e 	bl	8003068 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_I2C_MspInit+0x10c>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_I2C_MspInit+0x10c>)
 8001856:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800185a:	6413      	str	r3, [r2, #64]	; 0x40
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_I2C_MspInit+0x10c>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	bf00      	nop
 800186a:	3730      	adds	r7, #48	; 0x30
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40005400 	.word	0x40005400
 8001874:	40023800 	.word	0x40023800
 8001878:	40020400 	.word	0x40020400
 800187c:	40005800 	.word	0x40005800

08001880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001884:	f000 fe00 	bl	8002488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001888:	f000 f818 	bl	80018bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800188c:	f7ff fe70 	bl	8001570 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001890:	f000 fa60 	bl	8001d54 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001894:	f000 fb18 	bl	8001ec8 <MX_TIM2_Init>
  MX_TIM9_Init();
 8001898:	f000 fc0a 	bl	80020b0 <MX_TIM9_Init>
  MX_I2C1_Init();
 800189c:	f7ff ff08 	bl	80016b0 <MX_I2C1_Init>
  MX_ADC1_Init();
 80018a0:	f7ff fd40 	bl	8001324 <MX_ADC1_Init>
  MX_I2C2_Init();
 80018a4:	f7ff ff32 	bl	800170c <MX_I2C2_Init>
  MX_TIM4_Init();
 80018a8:	f000 fbae 	bl	8002008 <MX_TIM4_Init>
  MX_TIM3_Init();
 80018ac:	f000 fb56 	bl	8001f5c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	// HAL_I2C_EnableListen_IT (&hi2c1);
    StartupSequence(1);
 80018b0:	2001      	movs	r0, #1
 80018b2:	f7ff fbb5 	bl	8001020 <StartupSequence>
    ChangePWM();
 80018b6:	f7ff fcf9 	bl	80012ac <ChangePWM>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <main+0x3a>

080018bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b094      	sub	sp, #80	; 0x50
 80018c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018c2:	f107 0320 	add.w	r3, r7, #32
 80018c6:	2230      	movs	r2, #48	; 0x30
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f004 fe61 	bl	8006592 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	4b28      	ldr	r3, [pc, #160]	; (8001988 <SystemClock_Config+0xcc>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	4a27      	ldr	r2, [pc, #156]	; (8001988 <SystemClock_Config+0xcc>)
 80018ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ee:	6413      	str	r3, [r2, #64]	; 0x40
 80018f0:	4b25      	ldr	r3, [pc, #148]	; (8001988 <SystemClock_Config+0xcc>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018fc:	2300      	movs	r3, #0
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <SystemClock_Config+0xd0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a21      	ldr	r2, [pc, #132]	; (800198c <SystemClock_Config+0xd0>)
 8001906:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <SystemClock_Config+0xd0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001918:	2301      	movs	r3, #1
 800191a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800191c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001922:	2302      	movs	r3, #2
 8001924:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001926:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800192c:	2319      	movs	r3, #25
 800192e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001930:	23c0      	movs	r3, #192	; 0xc0
 8001932:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001934:	2302      	movs	r3, #2
 8001936:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001938:	2304      	movs	r3, #4
 800193a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800193c:	f107 0320 	add.w	r3, r7, #32
 8001940:	4618      	mov	r0, r3
 8001942:	f001 fe97 	bl	8003674 <HAL_RCC_OscConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800194c:	f000 f820 	bl	8001990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001950:	230f      	movs	r3, #15
 8001952:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001954:	2302      	movs	r3, #2
 8001956:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800195c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001960:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001966:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2103      	movs	r1, #3
 800196e:	4618      	mov	r0, r3
 8001970:	f002 f8f8 	bl	8003b64 <HAL_RCC_ClockConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800197a:	f000 f809 	bl	8001990 <Error_Handler>
  }
}
 800197e:	bf00      	nop
 8001980:	3750      	adds	r7, #80	; 0x50
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001998:	e7fe      	b.n	8001998 <Error_Handler+0x8>
	...

0800199c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_MspInit+0x4c>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	4a0f      	ldr	r2, [pc, #60]	; (80019e8 <HAL_MspInit+0x4c>)
 80019ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b0:	6453      	str	r3, [r2, #68]	; 0x44
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_MspInit+0x4c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_MspInit+0x4c>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <HAL_MspInit+0x4c>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_MspInit+0x4c>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800

080019ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <NMI_Handler+0x4>

080019f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <HardFault_Handler+0x4>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <MemManage_Handler+0x4>

080019fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <BusFault_Handler+0x4>

08001a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <UsageFault_Handler+0x4>

08001a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a38:	f000 fd78 	bl	800252c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

	Buzzer = 1;
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <EXTI4_IRQHandler+0x14>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001a4a:	2010      	movs	r0, #16
 8001a4c:	f001 fcaa 	bl	80033a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20010390 	.word	0x20010390

08001a58 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <ADC_IRQHandler+0x10>)
 8001a5e:	f000 fe87 	bl	8002770 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200102a0 	.word	0x200102a0

08001a6c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	if ( (TIM9->SR & TIM_SR_CC2IF) >= 1) { // If the CC2IF is set it means a input capture has happened
 8001a70:	4b2c      	ldr	r3, [pc, #176]	; (8001b24 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d03f      	beq.n	8001afc <TIM1_BRK_TIM9_IRQHandler+0x90>

		Total -= RPM[i];
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a2a      	ldr	r2, [pc, #168]	; (8001b2c <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001a82:	8812      	ldrh	r2, [r2, #0]
 8001a84:	4611      	mov	r1, r2
 8001a86:	4a2a      	ldr	r2, [pc, #168]	; (8001b30 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001a88:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	4a26      	ldr	r2, [pc, #152]	; (8001b28 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001a90:	6013      	str	r3, [r2, #0]
		RPM[i] = RPMConst / (TIM9->CCR2);
 8001a92:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <TIM1_BRK_TIM9_IRQHandler+0xc8>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	fbb2 f1f3 	udiv	r1, r2, r3
 8001a9e:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	b289      	uxth	r1, r1
 8001aa6:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001aa8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		Total += RPM[i];
 8001aac:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001ab4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001ac2:	6013      	str	r3, [r2, #0]

		i++;
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001ace:	801a      	strh	r2, [r3, #0]

		if ( i >= AvgSize - 1 ) {
 8001ad0:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	2b7e      	cmp	r3, #126	; 0x7e
 8001ad6:	d902      	bls.n	8001ade <TIM1_BRK_TIM9_IRQHandler+0x72>
			i = 0;
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	801a      	strh	r2, [r3, #0]
		}

		Registers[RPMReg] = Total / AvgSize;
 8001ade:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	09db      	lsrs	r3, r3, #7
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001ae8:	80da      	strh	r2, [r3, #6]

		// If maximum RPM is exceeded -> shutdown
		if ( Registers[RPMReg] > MaximumRPM ) {
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001aec:	88db      	ldrh	r3, [r3, #6]
 8001aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d90e      	bls.n	8001b14 <TIM1_BRK_TIM9_IRQHandler+0xa8>
			StopSequence();
 8001af6:	f7ff fb79 	bl	80011ec <StopSequence>
 8001afa:	e00b      	b.n	8001b14 <TIM1_BRK_TIM9_IRQHandler+0xa8>
		}
	} else {
		Registers[RPMReg] = 0; // If the CC2IF was not set it means the timer has overflowed and the motor is thus stationary
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	80da      	strh	r2, [r3, #6]
		Total = 0;
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
		memset(RPM, 0, AvgSize * 2);
 8001b08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4808      	ldr	r0, [pc, #32]	; (8001b30 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001b10:	f004 fd3f 	bl	8006592 <memset>
	}


  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b14:	4809      	ldr	r0, [pc, #36]	; (8001b3c <TIM1_BRK_TIM9_IRQHandler+0xd0>)
 8001b16:	f002 fe61 	bl	80047dc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001b1a:	4809      	ldr	r0, [pc, #36]	; (8001b40 <TIM1_BRK_TIM9_IRQHandler+0xd4>)
 8001b1c:	f002 fe5e 	bl	80047dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40014000 	.word	0x40014000
 8001b28:	20010394 	.word	0x20010394
 8001b2c:	20010498 	.word	0x20010498
 8001b30:	20010398 	.word	0x20010398
 8001b34:	20000290 	.word	0x20000290
 8001b38:	20000090 	.word	0x20000090
 8001b3c:	200104a0 	.word	0x200104a0
 8001b40:	200105c0 	.word	0x200105c0

08001b44 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	PrepareCommutation (Registers[DirReg]); // Set next Commutation states
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 8001b4a:	885b      	ldrh	r3, [r3, #2]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fa20 	bl	8000f94 <PrepareCommutation>

	TIM1->SR &= ~TIM_SR_COMIF; 				// Reset COMIF in SR register
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8001b5a:	f023 0320 	bic.w	r3, r3, #32
 8001b5e:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b60:	4804      	ldr	r0, [pc, #16]	; (8001b74 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 8001b62:	f002 fe3b 	bl	80047dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000090 	.word	0x20000090
 8001b70:	40010000 	.word	0x40010000
 8001b74:	200104a0 	.word	0x200104a0

08001b78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	// Reset Timer 9 counter.
	TIM9->CNT = 0x0;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <TIM2_IRQHandler+0x20>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24

	// Set COMG bit in EGR
	TIM1->EGR |= TIM_EGR_COMG;
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <TIM2_IRQHandler+0x24>)
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <TIM2_IRQHandler+0x24>)
 8001b88:	f043 0320 	orr.w	r3, r3, #32
 8001b8c:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b8e:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <TIM2_IRQHandler+0x28>)
 8001b90:	f002 fe24 	bl	80047dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40014000 	.word	0x40014000
 8001b9c:	40010000 	.word	0x40010000
 8001ba0:	200104e8 	.word	0x200104e8

08001ba4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return 1;
 8001ba8:	2301      	movs	r3, #1
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_kill>:

int _kill(int pid, int sig)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bbe:	f004 fd3b 	bl	8006638 <__errno>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2216      	movs	r2, #22
 8001bc6:	601a      	str	r2, [r3, #0]
  return -1;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_exit>:

void _exit (int status)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ffe7 	bl	8001bb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001be6:	e7fe      	b.n	8001be6 <_exit+0x12>

08001be8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e00a      	b.n	8001c10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bfa:	f3af 8000 	nop.w
 8001bfe:	4601      	mov	r1, r0
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	60ba      	str	r2, [r7, #8]
 8001c06:	b2ca      	uxtb	r2, r1
 8001c08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	dbf0      	blt.n	8001bfa <_read+0x12>
  }

  return len;
 8001c18:	687b      	ldr	r3, [r7, #4]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	e009      	b.n	8001c48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	60ba      	str	r2, [r7, #8]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3301      	adds	r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dbf1      	blt.n	8001c34 <_write+0x12>
  }
  return len;
 8001c50:	687b      	ldr	r3, [r7, #4]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_close>:

int _close(int file)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c82:	605a      	str	r2, [r3, #4]
  return 0;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <_isatty>:

int _isatty(int file)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <_sbrk+0x5c>)
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <_sbrk+0x60>)
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <_sbrk+0x64>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <_sbrk+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d207      	bcs.n	8001d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf4:	f004 fca0 	bl	8006638 <__errno>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	e009      	b.n	8001d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <_sbrk+0x64>)
 8001d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20020000 	.word	0x20020000
 8001d24:	00000400 	.word	0x00000400
 8001d28:	2001049c 	.word	0x2001049c
 8001d2c:	20010758 	.word	0x20010758

08001d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <SystemInit+0x20>)
 8001d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <SystemInit+0x20>)
 8001d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b096      	sub	sp, #88	; 0x58
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d74:	f107 0320 	add.w	r3, r7, #32
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
 8001d84:	615a      	str	r2, [r3, #20]
 8001d86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d88:	463b      	mov	r3, r7
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f004 fbff 	bl	8006592 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d94:	4b4a      	ldr	r3, [pc, #296]	; (8001ec0 <MX_TIM1_Init+0x16c>)
 8001d96:	4a4b      	ldr	r2, [pc, #300]	; (8001ec4 <MX_TIM1_Init+0x170>)
 8001d98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d9a:	4b49      	ldr	r3, [pc, #292]	; (8001ec0 <MX_TIM1_Init+0x16c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da0:	4b47      	ldr	r3, [pc, #284]	; (8001ec0 <MX_TIM1_Init+0x16c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 8001da6:	4b46      	ldr	r3, [pc, #280]	; (8001ec0 <MX_TIM1_Init+0x16c>)
 8001da8:	f240 727f 	movw	r2, #1919	; 0x77f
 8001dac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dae:	4b44      	ldr	r3, [pc, #272]	; (8001ec0 <MX_TIM1_Init+0x16c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001db4:	4b42      	ldr	r3, [pc, #264]	; (8001ec0 <MX_TIM1_Init+0x16c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dba:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <MX_TIM1_Init+0x16c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dc0:	483f      	ldr	r0, [pc, #252]	; (8001ec0 <MX_TIM1_Init+0x16c>)
 8001dc2:	f002 f8af 	bl	8003f24 <HAL_TIM_Base_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001dcc:	f7ff fde0 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dd0:	483b      	ldr	r0, [pc, #236]	; (8001ec0 <MX_TIM1_Init+0x16c>)
 8001dd2:	f002 f988 	bl	80040e6 <HAL_TIM_PWM_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001ddc:	f7ff fdd8 	bl	8001990 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001de0:	2304      	movs	r3, #4
 8001de2:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001de8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dec:	4619      	mov	r1, r3
 8001dee:	4834      	ldr	r0, [pc, #208]	; (8001ec0 <MX_TIM1_Init+0x16c>)
 8001df0:	f002 ff5a 	bl	8004ca8 <HAL_TIM_SlaveConfigSynchro>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001dfa:	f7ff fdc9 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	482c      	ldr	r0, [pc, #176]	; (8001ec0 <MX_TIM1_Init+0x16c>)
 8001e0e:	f003 fd81 	bl	8005914 <HAL_TIMEx_MasterConfigSynchronization>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001e18:	f7ff fdba 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e1c:	2360      	movs	r3, #96	; 0x60
 8001e1e:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e38:	f107 0320 	add.w	r3, r7, #32
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	4619      	mov	r1, r3
 8001e40:	481f      	ldr	r0, [pc, #124]	; (8001ec0 <MX_TIM1_Init+0x16c>)
 8001e42:	f002 fe6f 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001e4c:	f7ff fda0 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e50:	f107 0320 	add.w	r3, r7, #32
 8001e54:	2204      	movs	r2, #4
 8001e56:	4619      	mov	r1, r3
 8001e58:	4819      	ldr	r0, [pc, #100]	; (8001ec0 <MX_TIM1_Init+0x16c>)
 8001e5a:	f002 fe63 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001e64:	f7ff fd94 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e68:	f107 0320 	add.w	r3, r7, #32
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4813      	ldr	r0, [pc, #76]	; (8001ec0 <MX_TIM1_Init+0x16c>)
 8001e72:	f002 fe57 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001e7c:	f7ff fd88 	bl	8001990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4807      	ldr	r0, [pc, #28]	; (8001ec0 <MX_TIM1_Init+0x16c>)
 8001ea4:	f003 fda4 	bl	80059f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8001eae:	f7ff fd6f 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001eb2:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <MX_TIM1_Init+0x16c>)
 8001eb4:	f000 fa62 	bl	800237c <HAL_TIM_MspPostInit>

}
 8001eb8:	bf00      	nop
 8001eba:	3758      	adds	r7, #88	; 0x58
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200104a0 	.word	0x200104a0
 8001ec4:	40010000 	.word	0x40010000

08001ec8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001ece:	f107 0308 	add.w	r3, r7, #8
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001edc:	463b      	mov	r3, r7
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <MX_TIM2_Init+0x90>)
 8001ee6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001eec:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <MX_TIM2_Init+0x90>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef2:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <MX_TIM2_Init+0x90>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ef8:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <MX_TIM2_Init+0x90>)
 8001efa:	f04f 32ff 	mov.w	r2, #4294967295
 8001efe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f00:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <MX_TIM2_Init+0x90>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <MX_TIM2_Init+0x90>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001f1c:	f107 0308 	add.w	r3, r7, #8
 8001f20:	4619      	mov	r1, r3
 8001f22:	480d      	ldr	r0, [pc, #52]	; (8001f58 <MX_TIM2_Init+0x90>)
 8001f24:	f003 fb94 	bl	8005650 <HAL_TIMEx_HallSensor_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001f2e:	f7ff fd2f 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001f32:	2350      	movs	r3, #80	; 0x50
 8001f34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4806      	ldr	r0, [pc, #24]	; (8001f58 <MX_TIM2_Init+0x90>)
 8001f40:	f003 fce8 	bl	8005914 <HAL_TIMEx_MasterConfigSynchronization>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001f4a:	f7ff fd21 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200104e8 	.word	0x200104e8

08001f5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	; 0x28
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f62:	f107 0320 	add.w	r3, r7, #32
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
 8001f78:	611a      	str	r2, [r3, #16]
 8001f7a:	615a      	str	r2, [r3, #20]
 8001f7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f7e:	4b20      	ldr	r3, [pc, #128]	; (8002000 <MX_TIM3_Init+0xa4>)
 8001f80:	4a20      	ldr	r2, [pc, #128]	; (8002004 <MX_TIM3_Init+0xa8>)
 8001f82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f84:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <MX_TIM3_Init+0xa4>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <MX_TIM3_Init+0xa4>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 959;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <MX_TIM3_Init+0xa4>)
 8001f92:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001f96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <MX_TIM3_Init+0xa4>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <MX_TIM3_Init+0xa4>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fa4:	4816      	ldr	r0, [pc, #88]	; (8002000 <MX_TIM3_Init+0xa4>)
 8001fa6:	f002 f89e 	bl	80040e6 <HAL_TIM_PWM_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001fb0:	f7ff fcee 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fbc:	f107 0320 	add.w	r3, r7, #32
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	480f      	ldr	r0, [pc, #60]	; (8002000 <MX_TIM3_Init+0xa4>)
 8001fc4:	f003 fca6 	bl	8005914 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001fce:	f7ff fcdf 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fd2:	2360      	movs	r3, #96	; 0x60
 8001fd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_TIM3_Init+0xa4>)
 8001fea:	f002 fd9b 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001ff4:	f7ff fccc 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	; 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20010530 	.word	0x20010530
 8002004:	40000400 	.word	0x40000400

08002008 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200e:	f107 0310 	add.w	r3, r7, #16
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002018:	463b      	mov	r3, r7
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002024:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <MX_TIM4_Init+0xa0>)
 8002026:	4a21      	ldr	r2, [pc, #132]	; (80020ac <MX_TIM4_Init+0xa4>)
 8002028:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800202a:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <MX_TIM4_Init+0xa0>)
 800202c:	2200      	movs	r2, #0
 800202e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <MX_TIM4_Init+0xa0>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002036:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <MX_TIM4_Init+0xa0>)
 8002038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800203c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203e:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <MX_TIM4_Init+0xa0>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002044:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <MX_TIM4_Init+0xa0>)
 8002046:	2200      	movs	r2, #0
 8002048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800204a:	4817      	ldr	r0, [pc, #92]	; (80020a8 <MX_TIM4_Init+0xa0>)
 800204c:	f002 f9ae 	bl	80043ac <HAL_TIM_IC_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002056:	f7ff fc9b 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002062:	f107 0310 	add.w	r3, r7, #16
 8002066:	4619      	mov	r1, r3
 8002068:	480f      	ldr	r0, [pc, #60]	; (80020a8 <MX_TIM4_Init+0xa0>)
 800206a:	f003 fc53 	bl	8005914 <HAL_TIMEx_MasterConfigSynchronization>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002074:	f7ff fc8c 	bl	8001990 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002078:	2300      	movs	r3, #0
 800207a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800207c:	2301      	movs	r3, #1
 800207e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002088:	463b      	mov	r3, r7
 800208a:	2208      	movs	r2, #8
 800208c:	4619      	mov	r1, r3
 800208e:	4806      	ldr	r0, [pc, #24]	; (80020a8 <MX_TIM4_Init+0xa0>)
 8002090:	f002 fcac 	bl	80049ec <HAL_TIM_IC_ConfigChannel>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800209a:	f7ff fc79 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20010578 	.word	0x20010578
 80020ac:	40000800 	.word	0x40000800

080020b0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80020b6:	463b      	mov	r3, r7
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80020c2:	4b19      	ldr	r3, [pc, #100]	; (8002128 <MX_TIM9_Init+0x78>)
 80020c4:	4a19      	ldr	r2, [pc, #100]	; (800212c <MX_TIM9_Init+0x7c>)
 80020c6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1499;
 80020c8:	4b17      	ldr	r3, [pc, #92]	; (8002128 <MX_TIM9_Init+0x78>)
 80020ca:	f240 52db 	movw	r2, #1499	; 0x5db
 80020ce:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <MX_TIM9_Init+0x78>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 63999;
 80020d6:	4b14      	ldr	r3, [pc, #80]	; (8002128 <MX_TIM9_Init+0x78>)
 80020d8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80020dc:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <MX_TIM9_Init+0x78>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e4:	4b10      	ldr	r3, [pc, #64]	; (8002128 <MX_TIM9_Init+0x78>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80020ea:	480f      	ldr	r0, [pc, #60]	; (8002128 <MX_TIM9_Init+0x78>)
 80020ec:	f002 f95e 	bl	80043ac <HAL_TIM_IC_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80020f6:	f7ff fc4b 	bl	8001990 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020fa:	2300      	movs	r3, #0
 80020fc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020fe:	2301      	movs	r3, #1
 8002100:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 8002106:	2302      	movs	r3, #2
 8002108:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800210a:	463b      	mov	r3, r7
 800210c:	2204      	movs	r2, #4
 800210e:	4619      	mov	r1, r3
 8002110:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_TIM9_Init+0x78>)
 8002112:	f002 fc6b 	bl	80049ec <HAL_TIM_IC_ConfigChannel>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM9_Init+0x70>
  {
    Error_Handler();
 800211c:	f7ff fc38 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200105c0 	.word	0x200105c0
 800212c:	40014000 	.word	0x40014000

08002130 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a12      	ldr	r2, [pc, #72]	; (8002188 <HAL_TIM_Base_MspInit+0x58>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d11d      	bne.n	800217e <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_TIM_Base_MspInit+0x5c>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	4a10      	ldr	r2, [pc, #64]	; (800218c <HAL_TIM_Base_MspInit+0x5c>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6453      	str	r3, [r2, #68]	; 0x44
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <HAL_TIM_Base_MspInit+0x5c>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800215e:	2200      	movs	r2, #0
 8002160:	2100      	movs	r1, #0
 8002162:	2018      	movs	r0, #24
 8002164:	f000 ff49 	bl	8002ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002168:	2018      	movs	r0, #24
 800216a:	f000 ff62 	bl	8003032 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2100      	movs	r1, #0
 8002172:	201a      	movs	r0, #26
 8002174:	f000 ff41 	bl	8002ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002178:	201a      	movs	r0, #26
 800217a:	f000 ff5a 	bl	8003032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40010000 	.word	0x40010000
 800218c:	40023800 	.word	0x40023800

08002190 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b0:	d133      	bne.n	800221a <HAL_TIMEx_HallSensor_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a1a      	ldr	r2, [pc, #104]	; (8002224 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a13      	ldr	r2, [pc, #76]	; (8002224 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80021ea:	2307      	movs	r3, #7
 80021ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021f2:	2301      	movs	r3, #1
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021fa:	2301      	movs	r3, #1
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	4619      	mov	r1, r3
 8002204:	4808      	ldr	r0, [pc, #32]	; (8002228 <HAL_TIMEx_HallSensor_MspInit+0x98>)
 8002206:	f000 ff2f 	bl	8003068 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	201c      	movs	r0, #28
 8002210:	f000 fef3 	bl	8002ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002214:	201c      	movs	r0, #28
 8002216:	f000 ff0c 	bl	8003032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800221a:	bf00      	nop
 800221c:	3728      	adds	r7, #40	; 0x28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	40020000 	.word	0x40020000

0800222c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <HAL_TIM_PWM_MspInit+0x3c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d10d      	bne.n	800225a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <HAL_TIM_PWM_MspInit+0x40>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	4a09      	ldr	r2, [pc, #36]	; (800226c <HAL_TIM_PWM_MspInit+0x40>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	6413      	str	r3, [r2, #64]	; 0x40
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <HAL_TIM_PWM_MspInit+0x40>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40000400 	.word	0x40000400
 800226c:	40023800 	.word	0x40023800

08002270 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08c      	sub	sp, #48	; 0x30
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM4)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a36      	ldr	r2, [pc, #216]	; (8002368 <HAL_TIM_IC_MspInit+0xf8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d12d      	bne.n	80022ee <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	4b35      	ldr	r3, [pc, #212]	; (800236c <HAL_TIM_IC_MspInit+0xfc>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a34      	ldr	r2, [pc, #208]	; (800236c <HAL_TIM_IC_MspInit+0xfc>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b32      	ldr	r3, [pc, #200]	; (800236c <HAL_TIM_IC_MspInit+0xfc>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	4b2e      	ldr	r3, [pc, #184]	; (800236c <HAL_TIM_IC_MspInit+0xfc>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a2d      	ldr	r2, [pc, #180]	; (800236c <HAL_TIM_IC_MspInit+0xfc>)
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b2b      	ldr	r3, [pc, #172]	; (800236c <HAL_TIM_IC_MspInit+0xfc>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022dc:	2302      	movs	r3, #2
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e0:	f107 031c 	add.w	r3, r7, #28
 80022e4:	4619      	mov	r1, r3
 80022e6:	4822      	ldr	r0, [pc, #136]	; (8002370 <HAL_TIM_IC_MspInit+0x100>)
 80022e8:	f000 febe 	bl	8003068 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80022ec:	e038      	b.n	8002360 <HAL_TIM_IC_MspInit+0xf0>
  else if(tim_icHandle->Instance==TIM9)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a20      	ldr	r2, [pc, #128]	; (8002374 <HAL_TIM_IC_MspInit+0x104>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d133      	bne.n	8002360 <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_TIM_IC_MspInit+0xfc>)
 80022fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002300:	4a1a      	ldr	r2, [pc, #104]	; (800236c <HAL_TIM_IC_MspInit+0xfc>)
 8002302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002306:	6453      	str	r3, [r2, #68]	; 0x44
 8002308:	4b18      	ldr	r3, [pc, #96]	; (800236c <HAL_TIM_IC_MspInit+0xfc>)
 800230a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <HAL_TIM_IC_MspInit+0xfc>)
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	4a13      	ldr	r2, [pc, #76]	; (800236c <HAL_TIM_IC_MspInit+0xfc>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6313      	str	r3, [r2, #48]	; 0x30
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_TIM_IC_MspInit+0xfc>)
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002330:	2308      	movs	r3, #8
 8002332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002338:	2301      	movs	r3, #1
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	2300      	movs	r3, #0
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002340:	2303      	movs	r3, #3
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	4619      	mov	r1, r3
 800234a:	480b      	ldr	r0, [pc, #44]	; (8002378 <HAL_TIM_IC_MspInit+0x108>)
 800234c:	f000 fe8c 	bl	8003068 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2100      	movs	r1, #0
 8002354:	2018      	movs	r0, #24
 8002356:	f000 fe50 	bl	8002ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800235a:	2018      	movs	r0, #24
 800235c:	f000 fe69 	bl	8003032 <HAL_NVIC_EnableIRQ>
}
 8002360:	bf00      	nop
 8002362:	3730      	adds	r7, #48	; 0x30
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40000800 	.word	0x40000800
 800236c:	40023800 	.word	0x40023800
 8002370:	40020400 	.word	0x40020400
 8002374:	40014000 	.word	0x40014000
 8002378:	40020000 	.word	0x40020000

0800237c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a22      	ldr	r2, [pc, #136]	; (8002424 <HAL_TIM_MspPostInit+0xa8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d13d      	bne.n	800241a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	4b21      	ldr	r3, [pc, #132]	; (8002428 <HAL_TIM_MspPostInit+0xac>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a20      	ldr	r2, [pc, #128]	; (8002428 <HAL_TIM_MspPostInit+0xac>)
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <HAL_TIM_MspPostInit+0xac>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <HAL_TIM_MspPostInit+0xac>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a19      	ldr	r2, [pc, #100]	; (8002428 <HAL_TIM_MspPostInit+0xac>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b17      	ldr	r3, [pc, #92]	; (8002428 <HAL_TIM_MspPostInit+0xac>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80023d6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80023da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023e8:	2301      	movs	r3, #1
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	4619      	mov	r1, r3
 80023f2:	480e      	ldr	r0, [pc, #56]	; (800242c <HAL_TIM_MspPostInit+0xb0>)
 80023f4:	f000 fe38 	bl	8003068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80023f8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80023fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2300      	movs	r3, #0
 8002408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800240a:	2301      	movs	r3, #1
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4619      	mov	r1, r3
 8002414:	4806      	ldr	r0, [pc, #24]	; (8002430 <HAL_TIM_MspPostInit+0xb4>)
 8002416:	f000 fe27 	bl	8003068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800241a:	bf00      	nop
 800241c:	3728      	adds	r7, #40	; 0x28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40010000 	.word	0x40010000
 8002428:	40023800 	.word	0x40023800
 800242c:	40020400 	.word	0x40020400
 8002430:	40020000 	.word	0x40020000

08002434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800246c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002438:	480d      	ldr	r0, [pc, #52]	; (8002470 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800243a:	490e      	ldr	r1, [pc, #56]	; (8002474 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800243c:	4a0e      	ldr	r2, [pc, #56]	; (8002478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800243e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002440:	e002      	b.n	8002448 <LoopCopyDataInit>

08002442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002446:	3304      	adds	r3, #4

08002448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800244c:	d3f9      	bcc.n	8002442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244e:	4a0b      	ldr	r2, [pc, #44]	; (800247c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002450:	4c0b      	ldr	r4, [pc, #44]	; (8002480 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002454:	e001      	b.n	800245a <LoopFillZerobss>

08002456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002458:	3204      	adds	r2, #4

0800245a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800245c:	d3fb      	bcc.n	8002456 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800245e:	f7ff fc67 	bl	8001d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002462:	f004 f8ef 	bl	8006644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002466:	f7ff fa0b 	bl	8001880 <main>
  bx  lr    
 800246a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800246c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002474:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8002478:	080087ec 	.word	0x080087ec
  ldr r2, =_sbss
 800247c:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8002480:	20010758 	.word	0x20010758

08002484 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002484:	e7fe      	b.n	8002484 <DMA1_Stream0_IRQHandler>
	...

08002488 <HAL_Init>:
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0d      	ldr	r2, [pc, #52]	; (80024c8 <HAL_Init+0x40>)
 8002492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_Init+0x40>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_Init+0x40>)
 800249e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_Init+0x40>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <HAL_Init+0x40>)
 80024aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	2003      	movs	r0, #3
 80024b2:	f000 fd97 	bl	8002fe4 <HAL_NVIC_SetPriorityGrouping>
 80024b6:	200f      	movs	r0, #15
 80024b8:	f000 f808 	bl	80024cc <HAL_InitTick>
 80024bc:	f7ff fa6e 	bl	800199c <HAL_MspInit>
 80024c0:	2300      	movs	r3, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023c00 	.word	0x40023c00

080024cc <HAL_InitTick>:
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_InitTick+0x54>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_InitTick+0x58>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4619      	mov	r1, r3
 80024de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fdaf 	bl	800304e <HAL_SYSTICK_Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_InitTick+0x2e>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00e      	b.n	8002518 <HAL_InitTick+0x4c>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b0f      	cmp	r3, #15
 80024fe:	d80a      	bhi.n	8002516 <HAL_InitTick+0x4a>
 8002500:	2200      	movs	r2, #0
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f000 fd77 	bl	8002ffa <HAL_NVIC_SetPriority>
 800250c:	4a06      	ldr	r2, [pc, #24]	; (8002528 <HAL_InitTick+0x5c>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <HAL_InitTick+0x4c>
 8002516:	2301      	movs	r3, #1
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000098 	.word	0x20000098
 8002524:	200000a0 	.word	0x200000a0
 8002528:	2000009c 	.word	0x2000009c

0800252c <HAL_IncTick>:
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_IncTick+0x20>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_IncTick+0x24>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4413      	add	r3, r2
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_IncTick+0x24>)
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	200000a0 	.word	0x200000a0
 8002550:	20010608 	.word	0x20010608

08002554 <HAL_GetTick>:
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <HAL_GetTick+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20010608 	.word	0x20010608

0800256c <HAL_ADC_Init>:
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_ADC_Init+0x16>
 800257e:	2301      	movs	r3, #1
 8002580:	e033      	b.n	80025ea <HAL_ADC_Init+0x7e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <HAL_ADC_Init+0x32>
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe ff1c 	bl	80013c8 <HAL_ADC_MspInit>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d118      	bne.n	80025dc <HAL_ADC_Init+0x70>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025b2:	f023 0302 	bic.w	r3, r3, #2
 80025b6:	f043 0202 	orr.w	r2, r3, #2
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fb3a 	bl	8002c38 <ADC_Init>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	645a      	str	r2, [r3, #68]	; 0x44
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f023 0303 	bic.w	r3, r3, #3
 80025d2:	f043 0201 	orr.w	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
 80025da:	e001      	b.n	80025e0 <HAL_ADC_Init+0x74>
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_ADC_Start_IT>:
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	2300      	movs	r3, #0
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_ADC_Start_IT+0x1a>
 800260a:	2302      	movs	r3, #2
 800260c:	e0a1      	b.n	8002752 <HAL_ADC_Start_IT+0x15e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b01      	cmp	r3, #1
 8002622:	d018      	beq.n	8002656 <HAL_ADC_Start_IT+0x62>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	4b4a      	ldr	r3, [pc, #296]	; (8002760 <HAL_ADC_Start_IT+0x16c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a4a      	ldr	r2, [pc, #296]	; (8002764 <HAL_ADC_Start_IT+0x170>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	0c9a      	lsrs	r2, r3, #18
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	e002      	b.n	8002650 <HAL_ADC_Start_IT+0x5c>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	3b01      	subs	r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f9      	bne.n	800264a <HAL_ADC_Start_IT+0x56>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b01      	cmp	r3, #1
 8002662:	d169      	bne.n	8002738 <HAL_ADC_Start_IT+0x144>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002682:	2b00      	cmp	r3, #0
 8002684:	d007      	beq.n	8002696 <HAL_ADC_Start_IT+0xa2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800268e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800269e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a2:	d106      	bne.n	80026b2 <HAL_ADC_Start_IT+0xbe>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	f023 0206 	bic.w	r2, r3, #6
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	645a      	str	r2, [r3, #68]	; 0x44
 80026b0:	e002      	b.n	80026b8 <HAL_ADC_Start_IT+0xc4>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	645a      	str	r2, [r3, #68]	; 0x44
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026c0:	4b29      	ldr	r3, [pc, #164]	; (8002768 <HAL_ADC_Start_IT+0x174>)
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026dc:	f043 0320 	orr.w	r3, r3, #32
 80026e0:	6053      	str	r3, [r2, #4]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10f      	bne.n	800270e <HAL_ADC_Start_IT+0x11a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d129      	bne.n	8002750 <HAL_ADC_Start_IT+0x15c>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	e020      	b.n	8002750 <HAL_ADC_Start_IT+0x15c>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a16      	ldr	r2, [pc, #88]	; (800276c <HAL_ADC_Start_IT+0x178>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d11b      	bne.n	8002750 <HAL_ADC_Start_IT+0x15c>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d114      	bne.n	8002750 <HAL_ADC_Start_IT+0x15c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	e00b      	b.n	8002750 <HAL_ADC_Start_IT+0x15c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f043 0210 	orr.w	r2, r3, #16
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	641a      	str	r2, [r3, #64]	; 0x40
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	645a      	str	r2, [r3, #68]	; 0x44
 8002750:	2300      	movs	r3, #0
 8002752:	4618      	mov	r0, r3
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000098 	.word	0x20000098
 8002764:	431bde83 	.word	0x431bde83
 8002768:	40012300 	.word	0x40012300
 800276c:	40012000 	.word	0x40012000

08002770 <HAL_ADC_IRQHandler>:
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d049      	beq.n	800283a <HAL_ADC_IRQHandler+0xca>
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d046      	beq.n	800283a <HAL_ADC_IRQHandler+0xca>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <HAL_ADC_IRQHandler+0x54>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d12b      	bne.n	800282a <HAL_ADC_IRQHandler+0xba>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7e1b      	ldrb	r3, [r3, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d127      	bne.n	800282a <HAL_ADC_IRQHandler+0xba>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d006      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x86>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d119      	bne.n	800282a <HAL_ADC_IRQHandler+0xba>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0220 	bic.w	r2, r2, #32
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <HAL_ADC_IRQHandler+0xba>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f043 0201 	orr.w	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe fe18 	bl	8001460 <HAL_ADC_ConvCpltCallback>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0212 	mvn.w	r2, #18
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d057      	beq.n	8002900 <HAL_ADC_IRQHandler+0x190>
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d054      	beq.n	8002900 <HAL_ADC_IRQHandler+0x190>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 0310 	and.w	r3, r3, #16
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <HAL_ADC_IRQHandler+0xfe>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d139      	bne.n	80028f0 <HAL_ADC_IRQHandler+0x180>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d006      	beq.n	8002898 <HAL_ADC_IRQHandler+0x128>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002894:	2b00      	cmp	r3, #0
 8002896:	d12b      	bne.n	80028f0 <HAL_ADC_IRQHandler+0x180>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d124      	bne.n	80028f0 <HAL_ADC_IRQHandler+0x180>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d11d      	bne.n	80028f0 <HAL_ADC_IRQHandler+0x180>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7e1b      	ldrb	r3, [r3, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d119      	bne.n	80028f0 <HAL_ADC_IRQHandler+0x180>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028ca:	605a      	str	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d105      	bne.n	80028f0 <HAL_ADC_IRQHandler+0x180>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f043 0201 	orr.w	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fa9d 	bl	8002e30 <HAL_ADCEx_InjectedConvCpltCallback>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f06f 020c 	mvn.w	r2, #12
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d017      	beq.n	8002946 <HAL_ADC_IRQHandler+0x1d6>
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d014      	beq.n	8002946 <HAL_ADC_IRQHandler+0x1d6>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d10d      	bne.n	8002946 <HAL_ADC_IRQHandler+0x1d6>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f837 	bl	80029aa <HAL_ADC_LevelOutOfWindowCallback>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0201 	mvn.w	r2, #1
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d015      	beq.n	8002988 <HAL_ADC_IRQHandler+0x218>
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d012      	beq.n	8002988 <HAL_ADC_IRQHandler+0x218>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f043 0202 	orr.w	r2, r3, #2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	645a      	str	r2, [r3, #68]	; 0x44
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f06f 0220 	mvn.w	r2, #32
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f820 	bl	80029be <HAL_ADC_ErrorCallback>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f06f 0220 	mvn.w	r2, #32
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	bf00      	nop
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_ADC_GetValue>:
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_ADC_LevelOutOfWindowCallback>:
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_ADC_ErrorCallback>:
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <HAL_ADC_ConfigChannel>:
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x1c>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e113      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x244>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b09      	cmp	r3, #9
 80029fe:	d925      	bls.n	8002a4c <HAL_ADC_ConfigChannel+0x78>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68d9      	ldr	r1, [r3, #12]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4613      	mov	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4413      	add	r3, r2
 8002a14:	3b1e      	subs	r3, #30
 8002a16:	2207      	movs	r2, #7
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43da      	mvns	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	400a      	ands	r2, r1
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68d9      	ldr	r1, [r3, #12]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	4618      	mov	r0, r3
 8002a38:	4603      	mov	r3, r0
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4403      	add	r3, r0
 8002a3e:	3b1e      	subs	r3, #30
 8002a40:	409a      	lsls	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	e022      	b.n	8002a92 <HAL_ADC_ConfigChannel+0xbe>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6919      	ldr	r1, [r3, #16]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4413      	add	r3, r2
 8002a60:	2207      	movs	r2, #7
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	611a      	str	r2, [r3, #16]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6919      	ldr	r1, [r3, #16]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	4618      	mov	r0, r3
 8002a82:	4603      	mov	r3, r0
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4403      	add	r3, r0
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	611a      	str	r2, [r3, #16]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b06      	cmp	r3, #6
 8002a98:	d824      	bhi.n	8002ae4 <HAL_ADC_ConfigChannel+0x110>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3b05      	subs	r3, #5
 8002aac:	221f      	movs	r2, #31
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	400a      	ands	r2, r1
 8002aba:	635a      	str	r2, [r3, #52]	; 0x34
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	4618      	mov	r0, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3b05      	subs	r3, #5
 8002ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ae2:	e04c      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x1aa>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b0c      	cmp	r3, #12
 8002aea:	d824      	bhi.n	8002b36 <HAL_ADC_ConfigChannel+0x162>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	3b23      	subs	r3, #35	; 0x23
 8002afe:	221f      	movs	r2, #31
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43da      	mvns	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	400a      	ands	r2, r1
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	3b23      	subs	r3, #35	; 0x23
 8002b28:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
 8002b34:	e023      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x1aa>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	3b41      	subs	r3, #65	; 0x41
 8002b48:	221f      	movs	r2, #31
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	400a      	ands	r2, r1
 8002b56:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	4618      	mov	r0, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	3b41      	subs	r3, #65	; 0x41
 8002b72:	fa00 f203 	lsl.w	r2, r0, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b7e:	4b29      	ldr	r3, [pc, #164]	; (8002c24 <HAL_ADC_ConfigChannel+0x250>)
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a28      	ldr	r2, [pc, #160]	; (8002c28 <HAL_ADC_ConfigChannel+0x254>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d10f      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x1d8>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b12      	cmp	r3, #18
 8002b92:	d10b      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x1d8>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	605a      	str	r2, [r3, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	605a      	str	r2, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1d      	ldr	r2, [pc, #116]	; (8002c28 <HAL_ADC_ConfigChannel+0x254>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d12b      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x23a>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <HAL_ADC_ConfigChannel+0x258>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d003      	beq.n	8002bc8 <HAL_ADC_ConfigChannel+0x1f4>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b11      	cmp	r3, #17
 8002bc6:	d122      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x23a>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a11      	ldr	r2, [pc, #68]	; (8002c2c <HAL_ADC_ConfigChannel+0x258>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d111      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x23a>
 8002bea:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <HAL_ADC_ConfigChannel+0x25c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a11      	ldr	r2, [pc, #68]	; (8002c34 <HAL_ADC_ConfigChannel+0x260>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	0c9a      	lsrs	r2, r3, #18
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	e002      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x234>
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f9      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x22e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c16:	2300      	movs	r3, #0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40012300 	.word	0x40012300
 8002c28:	40012000 	.word	0x40012000
 8002c2c:	10000012 	.word	0x10000012
 8002c30:	20000098 	.word	0x20000098
 8002c34:	431bde83 	.word	0x431bde83

08002c38 <ADC_Init>:
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	4b79      	ldr	r3, [pc, #484]	; (8002e28 <ADC_Init+0x1f0>)
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	021a      	lsls	r2, r3, #8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6859      	ldr	r1, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	605a      	str	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6899      	ldr	r1, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	609a      	str	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	4a58      	ldr	r2, [pc, #352]	; (8002e2c <ADC_Init+0x1f4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d022      	beq.n	8002d16 <ADC_Init+0xde>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6899      	ldr	r1, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6899      	ldr	r1, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	e00f      	b.n	8002d36 <ADC_Init+0xfe>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d24:	609a      	str	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0202 	bic.w	r2, r2, #2
 8002d44:	609a      	str	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6899      	ldr	r1, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7e1b      	ldrb	r3, [r3, #24]
 8002d50:	005a      	lsls	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01b      	beq.n	8002d9c <ADC_Init+0x164>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6859      	ldr	r1, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	035a      	lsls	r2, r3, #13
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	e007      	b.n	8002dac <ADC_Init+0x174>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002dba:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	051a      	lsls	r2, r3, #20
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6899      	ldr	r1, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dee:	025a      	lsls	r2, r3, #9
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6899      	ldr	r1, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	029a      	lsls	r2, r3, #10
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	40012300 	.word	0x40012300
 8002e2c:	0f000001 	.word	0x0f000001

08002e30 <HAL_ADCEx_InjectedConvCpltCallback>:
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <__NVIC_SetPriorityGrouping>:
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <__NVIC_SetPriorityGrouping+0x44>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e60:	4013      	ands	r3, r2
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	021a      	lsls	r2, r3, #8
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	4a04      	ldr	r2, [pc, #16]	; (8002e88 <__NVIC_SetPriorityGrouping+0x44>)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	60d3      	str	r3, [r2, #12]
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_GetPriorityGrouping>:
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <__NVIC_EnableIRQ>:
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	db0b      	blt.n	8002ed2 <__NVIC_EnableIRQ+0x2a>
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	f003 021f 	and.w	r2, r3, #31
 8002ec0:	4907      	ldr	r1, [pc, #28]	; (8002ee0 <__NVIC_EnableIRQ+0x38>)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	2001      	movs	r0, #1
 8002eca:	fa00 f202 	lsl.w	r2, r0, r2
 8002ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	e000e100 	.word	0xe000e100

08002ee4 <__NVIC_SetPriority>:
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	6039      	str	r1, [r7, #0]
 8002eee:	71fb      	strb	r3, [r7, #7]
 8002ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	db0a      	blt.n	8002f0e <__NVIC_SetPriority+0x2a>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	490c      	ldr	r1, [pc, #48]	; (8002f30 <__NVIC_SetPriority+0x4c>)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	0112      	lsls	r2, r2, #4
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	440b      	add	r3, r1
 8002f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002f0c:	e00a      	b.n	8002f24 <__NVIC_SetPriority+0x40>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	4908      	ldr	r1, [pc, #32]	; (8002f34 <__NVIC_SetPriority+0x50>)
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	3b04      	subs	r3, #4
 8002f1c:	0112      	lsls	r2, r2, #4
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	440b      	add	r3, r1
 8002f22:	761a      	strb	r2, [r3, #24]
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000e100 	.word	0xe000e100
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <NVIC_EncodePriority>:
 8002f38:	b480      	push	{r7}
 8002f3a:	b089      	sub	sp, #36	; 0x24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f1c3 0307 	rsb	r3, r3, #7
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	bf28      	it	cs
 8002f56:	2304      	movcs	r3, #4
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	2b06      	cmp	r3, #6
 8002f60:	d902      	bls.n	8002f68 <NVIC_EncodePriority+0x30>
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3b03      	subs	r3, #3
 8002f66:	e000      	b.n	8002f6a <NVIC_EncodePriority+0x32>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43da      	mvns	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	f04f 31ff 	mov.w	r1, #4294967295
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8a:	43d9      	mvns	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	400b      	ands	r3, r1
 8002f90:	4313      	orrs	r3, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	3724      	adds	r7, #36	; 0x24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
	...

08002fa0 <SysTick_Config>:
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fb0:	d301      	bcc.n	8002fb6 <SysTick_Config+0x16>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e00f      	b.n	8002fd6 <SysTick_Config+0x36>
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <SysTick_Config+0x40>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	6053      	str	r3, [r2, #4]
 8002fbe:	210f      	movs	r1, #15
 8002fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc4:	f7ff ff8e 	bl	8002ee4 <__NVIC_SetPriority>
 8002fc8:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <SysTick_Config+0x40>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <SysTick_Config+0x40>)
 8002fd0:	2207      	movs	r2, #7
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	e000e010 	.word	0xe000e010

08002fe4 <HAL_NVIC_SetPriorityGrouping>:
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff ff29 	bl	8002e44 <__NVIC_SetPriorityGrouping>
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_NVIC_SetPriority>:
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b086      	sub	sp, #24
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	4603      	mov	r3, r0
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	73fb      	strb	r3, [r7, #15]
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	f7ff ff3e 	bl	8002e8c <__NVIC_GetPriorityGrouping>
 8003010:	6178      	str	r0, [r7, #20]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	6978      	ldr	r0, [r7, #20]
 8003018:	f7ff ff8e 	bl	8002f38 <NVIC_EncodePriority>
 800301c:	4602      	mov	r2, r0
 800301e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff5d 	bl	8002ee4 <__NVIC_SetPriority>
 800302a:	bf00      	nop
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_NVIC_EnableIRQ>:
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	4603      	mov	r3, r0
 800303a:	71fb      	strb	r3, [r7, #7]
 800303c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff ff31 	bl	8002ea8 <__NVIC_EnableIRQ>
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_SYSTICK_Config>:
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff ffa2 	bl	8002fa0 <SysTick_Config>
 800305c:	4603      	mov	r3, r0
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <HAL_GPIO_Init>:
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	; 0x24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	2300      	movs	r3, #0
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	e159      	b.n	8003338 <HAL_GPIO_Init+0x2d0>
 8003084:	2201      	movs	r2, #1
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4013      	ands	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	429a      	cmp	r2, r3
 800309e:	f040 8148 	bne.w	8003332 <HAL_GPIO_Init+0x2ca>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d005      	beq.n	80030ba <HAL_GPIO_Init+0x52>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d130      	bne.n	800311c <HAL_GPIO_Init+0xb4>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	61bb      	str	r3, [r7, #24]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	2203      	movs	r2, #3
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	61bb      	str	r3, [r7, #24]
 80030f0:	2201      	movs	r2, #1
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	091b      	lsrs	r3, r3, #4
 8003106:	f003 0201 	and.w	r2, r3, #1
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b03      	cmp	r3, #3
 8003126:	d017      	beq.n	8003158 <HAL_GPIO_Init+0xf0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	2203      	movs	r2, #3
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	60da      	str	r2, [r3, #12]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d123      	bne.n	80031ac <HAL_GPIO_Init+0x144>
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	08da      	lsrs	r2, r3, #3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3208      	adds	r2, #8
 800316c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	220f      	movs	r2, #15
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	08da      	lsrs	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3208      	adds	r2, #8
 80031a6:	69b9      	ldr	r1, [r7, #24]
 80031a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0203 	and.w	r2, r3, #3
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 80a2 	beq.w	8003332 <HAL_GPIO_Init+0x2ca>
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	4b57      	ldr	r3, [pc, #348]	; (8003350 <HAL_GPIO_Init+0x2e8>)
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	4a56      	ldr	r2, [pc, #344]	; (8003350 <HAL_GPIO_Init+0x2e8>)
 80031f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031fc:	6453      	str	r3, [r2, #68]	; 0x44
 80031fe:	4b54      	ldr	r3, [pc, #336]	; (8003350 <HAL_GPIO_Init+0x2e8>)
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4a52      	ldr	r2, [pc, #328]	; (8003354 <HAL_GPIO_Init+0x2ec>)
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	089b      	lsrs	r3, r3, #2
 8003210:	3302      	adds	r3, #2
 8003212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	220f      	movs	r2, #15
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4013      	ands	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a49      	ldr	r2, [pc, #292]	; (8003358 <HAL_GPIO_Init+0x2f0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d019      	beq.n	800326a <HAL_GPIO_Init+0x202>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a48      	ldr	r2, [pc, #288]	; (800335c <HAL_GPIO_Init+0x2f4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <HAL_GPIO_Init+0x1fe>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a47      	ldr	r2, [pc, #284]	; (8003360 <HAL_GPIO_Init+0x2f8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00d      	beq.n	8003262 <HAL_GPIO_Init+0x1fa>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a46      	ldr	r2, [pc, #280]	; (8003364 <HAL_GPIO_Init+0x2fc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d007      	beq.n	800325e <HAL_GPIO_Init+0x1f6>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a45      	ldr	r2, [pc, #276]	; (8003368 <HAL_GPIO_Init+0x300>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_GPIO_Init+0x1f2>
 8003256:	2304      	movs	r3, #4
 8003258:	e008      	b.n	800326c <HAL_GPIO_Init+0x204>
 800325a:	2307      	movs	r3, #7
 800325c:	e006      	b.n	800326c <HAL_GPIO_Init+0x204>
 800325e:	2303      	movs	r3, #3
 8003260:	e004      	b.n	800326c <HAL_GPIO_Init+0x204>
 8003262:	2302      	movs	r3, #2
 8003264:	e002      	b.n	800326c <HAL_GPIO_Init+0x204>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <HAL_GPIO_Init+0x204>
 800326a:	2300      	movs	r3, #0
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	f002 0203 	and.w	r2, r2, #3
 8003272:	0092      	lsls	r2, r2, #2
 8003274:	4093      	lsls	r3, r2
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
 800327c:	4935      	ldr	r1, [pc, #212]	; (8003354 <HAL_GPIO_Init+0x2ec>)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	089b      	lsrs	r3, r3, #2
 8003282:	3302      	adds	r3, #2
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800328a:	4b38      	ldr	r3, [pc, #224]	; (800336c <HAL_GPIO_Init+0x304>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_Init+0x246>
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	4a2f      	ldr	r2, [pc, #188]	; (800336c <HAL_GPIO_Init+0x304>)
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	6093      	str	r3, [r2, #8]
 80032b4:	4b2d      	ldr	r3, [pc, #180]	; (800336c <HAL_GPIO_Init+0x304>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_GPIO_Init+0x270>
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	4a24      	ldr	r2, [pc, #144]	; (800336c <HAL_GPIO_Init+0x304>)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	60d3      	str	r3, [r2, #12]
 80032de:	4b23      	ldr	r3, [pc, #140]	; (800336c <HAL_GPIO_Init+0x304>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	61bb      	str	r3, [r7, #24]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x29a>
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	4a1a      	ldr	r2, [pc, #104]	; (800336c <HAL_GPIO_Init+0x304>)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	6053      	str	r3, [r2, #4]
 8003308:	4b18      	ldr	r3, [pc, #96]	; (800336c <HAL_GPIO_Init+0x304>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x2c4>
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	4a0f      	ldr	r2, [pc, #60]	; (800336c <HAL_GPIO_Init+0x304>)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3301      	adds	r3, #1
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	2b0f      	cmp	r3, #15
 800333c:	f67f aea2 	bls.w	8003084 <HAL_GPIO_Init+0x1c>
 8003340:	bf00      	nop
 8003342:	bf00      	nop
 8003344:	3724      	adds	r7, #36	; 0x24
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800
 8003354:	40013800 	.word	0x40013800
 8003358:	40020000 	.word	0x40020000
 800335c:	40020400 	.word	0x40020400
 8003360:	40020800 	.word	0x40020800
 8003364:	40020c00 	.word	0x40020c00
 8003368:	40021000 	.word	0x40021000
 800336c:	40013c00 	.word	0x40013c00

08003370 <HAL_GPIO_WritePin>:
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	807b      	strh	r3, [r7, #2]
 800337c:	4613      	mov	r3, r2
 800337e:	707b      	strb	r3, [r7, #1]
 8003380:	787b      	ldrb	r3, [r7, #1]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_WritePin+0x1e>
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	619a      	str	r2, [r3, #24]
 800338c:	e003      	b.n	8003396 <HAL_GPIO_WritePin+0x26>
 800338e:	887b      	ldrh	r3, [r7, #2]
 8003390:	041a      	lsls	r2, r3, #16
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	619a      	str	r2, [r3, #24]
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <HAL_GPIO_EXTI_IRQHandler>:
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	80fb      	strh	r3, [r7, #6]
 80033ae:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d006      	beq.n	80033c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
 80033ba:	4a05      	ldr	r2, [pc, #20]	; (80033d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	6153      	str	r3, [r2, #20]
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f806 	bl	80033d4 <HAL_GPIO_EXTI_Callback>
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40013c00 	.word	0x40013c00

080033d4 <HAL_GPIO_EXTI_Callback>:
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	80fb      	strh	r3, [r7, #6]
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
	...

080033ec <HAL_I2C_Init>:
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_I2C_Init+0x12>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e12b      	b.n	8003656 <HAL_I2C_Init+0x26a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_I2C_Init+0x2c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fe f9a8 	bl	8001768 <HAL_I2C_MspInit>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2224      	movs	r2, #36	; 0x24
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	f000 fd40 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4a81      	ldr	r2, [pc, #516]	; (8003660 <HAL_I2C_Init+0x274>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d807      	bhi.n	8003470 <HAL_I2C_Init+0x84>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a80      	ldr	r2, [pc, #512]	; (8003664 <HAL_I2C_Init+0x278>)
 8003464:	4293      	cmp	r3, r2
 8003466:	bf94      	ite	ls
 8003468:	2301      	movls	r3, #1
 800346a:	2300      	movhi	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e006      	b.n	800347e <HAL_I2C_Init+0x92>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4a7d      	ldr	r2, [pc, #500]	; (8003668 <HAL_I2C_Init+0x27c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	bf94      	ite	ls
 8003478:	2301      	movls	r3, #1
 800347a:	2300      	movhi	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_I2C_Init+0x9a>
 8003482:	2301      	movs	r3, #1
 8003484:	e0e7      	b.n	8003656 <HAL_I2C_Init+0x26a>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4a78      	ldr	r2, [pc, #480]	; (800366c <HAL_I2C_Init+0x280>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	0c9b      	lsrs	r3, r3, #18
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a6a      	ldr	r2, [pc, #424]	; (8003660 <HAL_I2C_Init+0x274>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d802      	bhi.n	80034c0 <HAL_I2C_Init+0xd4>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	3301      	adds	r3, #1
 80034be:	e009      	b.n	80034d4 <HAL_I2C_Init+0xe8>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	4a69      	ldr	r2, [pc, #420]	; (8003670 <HAL_I2C_Init+0x284>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	099b      	lsrs	r3, r3, #6
 80034d2:	3301      	adds	r3, #1
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	430b      	orrs	r3, r1
 80034da:	6213      	str	r3, [r2, #32]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	495c      	ldr	r1, [pc, #368]	; (8003660 <HAL_I2C_Init+0x274>)
 80034f0:	428b      	cmp	r3, r1
 80034f2:	d819      	bhi.n	8003528 <HAL_I2C_Init+0x13c>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1e59      	subs	r1, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003502:	1c59      	adds	r1, r3, #1
 8003504:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003508:	400b      	ands	r3, r1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_I2C_Init+0x138>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1e59      	subs	r1, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	fbb1 f3f3 	udiv	r3, r1, r3
 800351c:	3301      	adds	r3, #1
 800351e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003522:	e051      	b.n	80035c8 <HAL_I2C_Init+0x1dc>
 8003524:	2304      	movs	r3, #4
 8003526:	e04f      	b.n	80035c8 <HAL_I2C_Init+0x1dc>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d111      	bne.n	8003554 <HAL_I2C_Init+0x168>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1e58      	subs	r0, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6859      	ldr	r1, [r3, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	440b      	add	r3, r1
 800353e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003542:	3301      	adds	r3, #1
 8003544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003548:	2b00      	cmp	r3, #0
 800354a:	bf0c      	ite	eq
 800354c:	2301      	moveq	r3, #1
 800354e:	2300      	movne	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	e012      	b.n	800357a <HAL_I2C_Init+0x18e>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1e58      	subs	r0, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	0099      	lsls	r1, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	fbb0 f3f3 	udiv	r3, r0, r3
 800356a:	3301      	adds	r3, #1
 800356c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_Init+0x196>
 800357e:	2301      	movs	r3, #1
 8003580:	e022      	b.n	80035c8 <HAL_I2C_Init+0x1dc>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10e      	bne.n	80035a8 <HAL_I2C_Init+0x1bc>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1e58      	subs	r0, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6859      	ldr	r1, [r3, #4]
 8003592:	460b      	mov	r3, r1
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	440b      	add	r3, r1
 8003598:	fbb0 f3f3 	udiv	r3, r0, r3
 800359c:	3301      	adds	r3, #1
 800359e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a6:	e00f      	b.n	80035c8 <HAL_I2C_Init+0x1dc>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1e58      	subs	r0, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	0099      	lsls	r1, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	6809      	ldr	r1, [r1, #0]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61cb      	str	r3, [r1, #28]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69da      	ldr	r2, [r3, #28]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6911      	ldr	r1, [r2, #16]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68d2      	ldr	r2, [r2, #12]
 8003602:	4311      	orrs	r1, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	430b      	orrs	r3, r1
 800360a:	6093      	str	r3, [r2, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	641a      	str	r2, [r3, #64]	; 0x40
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	; 0x30
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003654:	2300      	movs	r3, #0
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	000186a0 	.word	0x000186a0
 8003664:	001e847f 	.word	0x001e847f
 8003668:	003d08ff 	.word	0x003d08ff
 800366c:	431bde83 	.word	0x431bde83
 8003670:	10624dd3 	.word	0x10624dd3

08003674 <HAL_RCC_OscConfig>:
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCC_OscConfig+0x12>
 8003682:	2301      	movs	r3, #1
 8003684:	e267      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d075      	beq.n	800377e <HAL_RCC_OscConfig+0x10a>
 8003692:	4b88      	ldr	r3, [pc, #544]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b04      	cmp	r3, #4
 800369c:	d00c      	beq.n	80036b8 <HAL_RCC_OscConfig+0x44>
 800369e:	4b85      	ldr	r3, [pc, #532]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d112      	bne.n	80036d0 <HAL_RCC_OscConfig+0x5c>
 80036aa:	4b82      	ldr	r3, [pc, #520]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b6:	d10b      	bne.n	80036d0 <HAL_RCC_OscConfig+0x5c>
 80036b8:	4b7e      	ldr	r3, [pc, #504]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d05b      	beq.n	800377c <HAL_RCC_OscConfig+0x108>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d157      	bne.n	800377c <HAL_RCC_OscConfig+0x108>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e242      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d8:	d106      	bne.n	80036e8 <HAL_RCC_OscConfig+0x74>
 80036da:	4b76      	ldr	r3, [pc, #472]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a75      	ldr	r2, [pc, #468]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	e01d      	b.n	8003724 <HAL_RCC_OscConfig+0xb0>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f0:	d10c      	bne.n	800370c <HAL_RCC_OscConfig+0x98>
 80036f2:	4b70      	ldr	r3, [pc, #448]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a6f      	ldr	r2, [pc, #444]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	4b6d      	ldr	r3, [pc, #436]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a6c      	ldr	r2, [pc, #432]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	e00b      	b.n	8003724 <HAL_RCC_OscConfig+0xb0>
 800370c:	4b69      	ldr	r3, [pc, #420]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a68      	ldr	r2, [pc, #416]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	4b66      	ldr	r3, [pc, #408]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a65      	ldr	r2, [pc, #404]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 800371e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d013      	beq.n	8003754 <HAL_RCC_OscConfig+0xe0>
 800372c:	f7fe ff12 	bl	8002554 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0xd2>
 8003734:	f7fe ff0e 	bl	8002554 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b64      	cmp	r3, #100	; 0x64
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0xd2>
 8003742:	2303      	movs	r3, #3
 8003744:	e207      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 8003746:	4b5b      	ldr	r3, [pc, #364]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0xc0>
 8003752:	e014      	b.n	800377e <HAL_RCC_OscConfig+0x10a>
 8003754:	f7fe fefe 	bl	8002554 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0xfa>
 800375c:	f7fe fefa 	bl	8002554 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0xfa>
 800376a:	2303      	movs	r3, #3
 800376c:	e1f3      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 800376e:	4b51      	ldr	r3, [pc, #324]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0xe8>
 800377a:	e000      	b.n	800377e <HAL_RCC_OscConfig+0x10a>
 800377c:	bf00      	nop
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d063      	beq.n	8003852 <HAL_RCC_OscConfig+0x1de>
 800378a:	4b4a      	ldr	r3, [pc, #296]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <HAL_RCC_OscConfig+0x13a>
 8003796:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d11c      	bne.n	80037dc <HAL_RCC_OscConfig+0x168>
 80037a2:	4b44      	ldr	r3, [pc, #272]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d116      	bne.n	80037dc <HAL_RCC_OscConfig+0x168>
 80037ae:	4b41      	ldr	r3, [pc, #260]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_RCC_OscConfig+0x152>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d001      	beq.n	80037c6 <HAL_RCC_OscConfig+0x152>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e1c7      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 80037c6:	4b3b      	ldr	r3, [pc, #236]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4937      	ldr	r1, [pc, #220]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]
 80037da:	e03a      	b.n	8003852 <HAL_RCC_OscConfig+0x1de>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d020      	beq.n	8003826 <HAL_RCC_OscConfig+0x1b2>
 80037e4:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <HAL_RCC_OscConfig+0x244>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	f7fe feb3 	bl	8002554 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x190>
 80037f2:	f7fe feaf 	bl	8002554 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x190>
 8003800:	2303      	movs	r3, #3
 8003802:	e1a8      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 8003804:	4b2b      	ldr	r3, [pc, #172]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCC_OscConfig+0x17e>
 8003810:	4b28      	ldr	r3, [pc, #160]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4925      	ldr	r1, [pc, #148]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003820:	4313      	orrs	r3, r2
 8003822:	600b      	str	r3, [r1, #0]
 8003824:	e015      	b.n	8003852 <HAL_RCC_OscConfig+0x1de>
 8003826:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <HAL_RCC_OscConfig+0x244>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	f7fe fe92 	bl	8002554 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x1d2>
 8003834:	f7fe fe8e 	bl	8002554 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x1d2>
 8003842:	2303      	movs	r3, #3
 8003844:	e187      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 8003846:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x1c0>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d036      	beq.n	80038cc <HAL_RCC_OscConfig+0x258>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d016      	beq.n	8003894 <HAL_RCC_OscConfig+0x220>
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <HAL_RCC_OscConfig+0x248>)
 8003868:	2201      	movs	r2, #1
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f7fe fe72 	bl	8002554 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x212>
 8003874:	f7fe fe6e 	bl	8002554 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x212>
 8003882:	2303      	movs	r3, #3
 8003884:	e167      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0x200>
 8003892:	e01b      	b.n	80038cc <HAL_RCC_OscConfig+0x258>
 8003894:	4b09      	ldr	r3, [pc, #36]	; (80038bc <HAL_RCC_OscConfig+0x248>)
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	f7fe fe5b 	bl	8002554 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]
 80038a0:	e00e      	b.n	80038c0 <HAL_RCC_OscConfig+0x24c>
 80038a2:	f7fe fe57 	bl	8002554 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d907      	bls.n	80038c0 <HAL_RCC_OscConfig+0x24c>
 80038b0:	2303      	movs	r3, #3
 80038b2:	e150      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 80038b4:	40023800 	.word	0x40023800
 80038b8:	42470000 	.word	0x42470000
 80038bc:	42470e80 	.word	0x42470e80
 80038c0:	4b88      	ldr	r3, [pc, #544]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80038c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1ea      	bne.n	80038a2 <HAL_RCC_OscConfig+0x22e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8097 	beq.w	8003a08 <HAL_RCC_OscConfig+0x394>
 80038da:	2300      	movs	r3, #0
 80038dc:	75fb      	strb	r3, [r7, #23]
 80038de:	4b81      	ldr	r3, [pc, #516]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10f      	bne.n	800390a <HAL_RCC_OscConfig+0x296>
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	4b7d      	ldr	r3, [pc, #500]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	4a7c      	ldr	r2, [pc, #496]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80038f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f8:	6413      	str	r3, [r2, #64]	; 0x40
 80038fa:	4b7a      	ldr	r3, [pc, #488]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2301      	movs	r3, #1
 8003908:	75fb      	strb	r3, [r7, #23]
 800390a:	4b77      	ldr	r3, [pc, #476]	; (8003ae8 <HAL_RCC_OscConfig+0x474>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003912:	2b00      	cmp	r3, #0
 8003914:	d118      	bne.n	8003948 <HAL_RCC_OscConfig+0x2d4>
 8003916:	4b74      	ldr	r3, [pc, #464]	; (8003ae8 <HAL_RCC_OscConfig+0x474>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a73      	ldr	r2, [pc, #460]	; (8003ae8 <HAL_RCC_OscConfig+0x474>)
 800391c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	f7fe fe17 	bl	8002554 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x2c8>
 800392a:	f7fe fe13 	bl	8002554 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x2c8>
 8003938:	2303      	movs	r3, #3
 800393a:	e10c      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 800393c:	4b6a      	ldr	r3, [pc, #424]	; (8003ae8 <HAL_RCC_OscConfig+0x474>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x2b6>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d106      	bne.n	800395e <HAL_RCC_OscConfig+0x2ea>
 8003950:	4b64      	ldr	r3, [pc, #400]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	4a63      	ldr	r2, [pc, #396]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	6713      	str	r3, [r2, #112]	; 0x70
 800395c:	e01c      	b.n	8003998 <HAL_RCC_OscConfig+0x324>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b05      	cmp	r3, #5
 8003964:	d10c      	bne.n	8003980 <HAL_RCC_OscConfig+0x30c>
 8003966:	4b5f      	ldr	r3, [pc, #380]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	4a5e      	ldr	r2, [pc, #376]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	6713      	str	r3, [r2, #112]	; 0x70
 8003972:	4b5c      	ldr	r3, [pc, #368]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	4a5b      	ldr	r2, [pc, #364]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6713      	str	r3, [r2, #112]	; 0x70
 800397e:	e00b      	b.n	8003998 <HAL_RCC_OscConfig+0x324>
 8003980:	4b58      	ldr	r3, [pc, #352]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4a57      	ldr	r2, [pc, #348]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	6713      	str	r3, [r2, #112]	; 0x70
 800398c:	4b55      	ldr	r3, [pc, #340]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	4a54      	ldr	r2, [pc, #336]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003992:	f023 0304 	bic.w	r3, r3, #4
 8003996:	6713      	str	r3, [r2, #112]	; 0x70
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d015      	beq.n	80039cc <HAL_RCC_OscConfig+0x358>
 80039a0:	f7fe fdd8 	bl	8002554 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]
 80039a6:	e00a      	b.n	80039be <HAL_RCC_OscConfig+0x34a>
 80039a8:	f7fe fdd4 	bl	8002554 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x34a>
 80039ba:	2303      	movs	r3, #3
 80039bc:	e0cb      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 80039be:	4b49      	ldr	r3, [pc, #292]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0ee      	beq.n	80039a8 <HAL_RCC_OscConfig+0x334>
 80039ca:	e014      	b.n	80039f6 <HAL_RCC_OscConfig+0x382>
 80039cc:	f7fe fdc2 	bl	8002554 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]
 80039d2:	e00a      	b.n	80039ea <HAL_RCC_OscConfig+0x376>
 80039d4:	f7fe fdbe 	bl	8002554 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x376>
 80039e6:	2303      	movs	r3, #3
 80039e8:	e0b5      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 80039ea:	4b3e      	ldr	r3, [pc, #248]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1ee      	bne.n	80039d4 <HAL_RCC_OscConfig+0x360>
 80039f6:	7dfb      	ldrb	r3, [r7, #23]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d105      	bne.n	8003a08 <HAL_RCC_OscConfig+0x394>
 80039fc:	4b39      	ldr	r3, [pc, #228]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	4a38      	ldr	r2, [pc, #224]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6413      	str	r3, [r2, #64]	; 0x40
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80a1 	beq.w	8003b54 <HAL_RCC_OscConfig+0x4e0>
 8003a12:	4b34      	ldr	r3, [pc, #208]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d05c      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x464>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d141      	bne.n	8003aaa <HAL_RCC_OscConfig+0x436>
 8003a26:	4b31      	ldr	r3, [pc, #196]	; (8003aec <HAL_RCC_OscConfig+0x478>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	f7fe fd92 	bl	8002554 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x3d2>
 8003a34:	f7fe fd8e 	bl	8002554 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x3d2>
 8003a42:	2303      	movs	r3, #3
 8003a44:	e087      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 8003a46:	4b27      	ldr	r3, [pc, #156]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x3c0>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69da      	ldr	r2, [r3, #28]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	019b      	lsls	r3, r3, #6
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	085b      	lsrs	r3, r3, #1
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	041b      	lsls	r3, r3, #16
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	061b      	lsls	r3, r3, #24
 8003a76:	491b      	ldr	r1, [pc, #108]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	604b      	str	r3, [r1, #4]
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <HAL_RCC_OscConfig+0x478>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	f7fe fd67 	bl	8002554 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x428>
 8003a8a:	f7fe fd63 	bl	8002554 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x428>
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e05c      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 8003a9c:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x416>
 8003aa8:	e054      	b.n	8003b54 <HAL_RCC_OscConfig+0x4e0>
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_RCC_OscConfig+0x478>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f7fe fd50 	bl	8002554 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x456>
 8003ab8:	f7fe fd4c 	bl	8002554 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x456>
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e045      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 8003aca:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x444>
 8003ad6:	e03d      	b.n	8003b54 <HAL_RCC_OscConfig+0x4e0>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d107      	bne.n	8003af0 <HAL_RCC_OscConfig+0x47c>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e038      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	42470060 	.word	0x42470060
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <HAL_RCC_OscConfig+0x4ec>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d028      	beq.n	8003b50 <HAL_RCC_OscConfig+0x4dc>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d121      	bne.n	8003b50 <HAL_RCC_OscConfig+0x4dc>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d11a      	bne.n	8003b50 <HAL_RCC_OscConfig+0x4dc>
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b20:	4013      	ands	r3, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b26:	0192      	lsls	r2, r2, #6
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d111      	bne.n	8003b50 <HAL_RCC_OscConfig+0x4dc>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	085b      	lsrs	r3, r3, #1
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	041b      	lsls	r3, r3, #16
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d107      	bne.n	8003b50 <HAL_RCC_OscConfig+0x4dc>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	061b      	lsls	r3, r3, #24
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_OscConfig+0x4e0>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 8003b54:	2300      	movs	r3, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800

08003b64 <HAL_RCC_ClockConfig>:
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x14>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0cc      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
 8003b78:	4b68      	ldr	r3, [pc, #416]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d90c      	bls.n	8003ba0 <HAL_RCC_ClockConfig+0x3c>
 8003b86:	4b65      	ldr	r3, [pc, #404]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	4b63      	ldr	r3, [pc, #396]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x3c>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0b8      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <HAL_RCC_ClockConfig+0x8a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x60>
 8003bb8:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	4a58      	ldr	r2, [pc, #352]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bc2:	6093      	str	r3, [r2, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x78>
 8003bd0:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4a52      	ldr	r2, [pc, #328]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bda:	6093      	str	r3, [r2, #8]
 8003bdc:	4b50      	ldr	r3, [pc, #320]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	494d      	ldr	r1, [pc, #308]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d044      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x120>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d107      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xae>
 8003c02:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d119      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xde>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e07f      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d003      	beq.n	8003c22 <HAL_RCC_ClockConfig+0xbe>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d107      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xce>
 8003c22:	4b3f      	ldr	r3, [pc, #252]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d109      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xde>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e06f      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
 8003c32:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xde>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e067      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
 8003c42:	4b37      	ldr	r3, [pc, #220]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f023 0203 	bic.w	r2, r3, #3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4934      	ldr	r1, [pc, #208]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	608b      	str	r3, [r1, #8]
 8003c54:	f7fe fc7e 	bl	8002554 <HAL_GetTick>
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCC_ClockConfig+0x10e>
 8003c5c:	f7fe fc7a 	bl	8002554 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_ClockConfig+0x10e>
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e04f      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
 8003c72:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 020c 	and.w	r2, r3, #12
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d1eb      	bne.n	8003c5c <HAL_RCC_ClockConfig+0xf8>
 8003c84:	4b25      	ldr	r3, [pc, #148]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d20c      	bcs.n	8003cac <HAL_RCC_ClockConfig+0x148>
 8003c92:	4b22      	ldr	r3, [pc, #136]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x148>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e032      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RCC_ClockConfig+0x166>
 8003cb8:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4916      	ldr	r1, [pc, #88]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_RCC_ClockConfig+0x186>
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	490e      	ldr	r1, [pc, #56]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
 8003cea:	f000 f821 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	490a      	ldr	r1, [pc, #40]	; (8003d24 <HAL_RCC_ClockConfig+0x1c0>)
 8003cfc:	5ccb      	ldrb	r3, [r1, r3]
 8003cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003d02:	4a09      	ldr	r2, [pc, #36]	; (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe fbde 	bl	80024cc <HAL_InitTick>
 8003d10:	2300      	movs	r3, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023c00 	.word	0x40023c00
 8003d20:	40023800 	.word	0x40023800
 8003d24:	08008450 	.word	0x08008450
 8003d28:	20000098 	.word	0x20000098
 8003d2c:	2000009c 	.word	0x2000009c

08003d30 <HAL_RCC_GetSysClockFreq>:
 8003d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d34:	b090      	sub	sp, #64	; 0x40
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	2300      	movs	r3, #0
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d40:	2300      	movs	r3, #0
 8003d42:	633b      	str	r3, [r7, #48]	; 0x30
 8003d44:	2300      	movs	r3, #0
 8003d46:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d48:	4b59      	ldr	r3, [pc, #356]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 030c 	and.w	r3, r3, #12
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d00d      	beq.n	8003d70 <HAL_RCC_GetSysClockFreq+0x40>
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	f200 80a1 	bhi.w	8003e9c <HAL_RCC_GetSysClockFreq+0x16c>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0x34>
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d003      	beq.n	8003d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d62:	e09b      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0x16c>
 8003d64:	4b53      	ldr	r3, [pc, #332]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d66:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d68:	e09b      	b.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x172>
 8003d6a:	4b53      	ldr	r3, [pc, #332]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d6e:	e098      	b.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x172>
 8003d70:	4b4f      	ldr	r3, [pc, #316]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d78:	637b      	str	r3, [r7, #52]	; 0x34
 8003d7a:	4b4d      	ldr	r3, [pc, #308]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d028      	beq.n	8003dd8 <HAL_RCC_GetSysClockFreq+0xa8>
 8003d86:	4b4a      	ldr	r3, [pc, #296]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	099b      	lsrs	r3, r3, #6
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	623b      	str	r3, [r7, #32]
 8003d90:	627a      	str	r2, [r7, #36]	; 0x24
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4b47      	ldr	r3, [pc, #284]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d9c:	fb03 f201 	mul.w	r2, r3, r1
 8003da0:	2300      	movs	r3, #0
 8003da2:	fb00 f303 	mul.w	r3, r0, r3
 8003da6:	4413      	add	r3, r2
 8003da8:	4a43      	ldr	r2, [pc, #268]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003daa:	fba0 1202 	umull	r1, r2, r0, r2
 8003dae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003db0:	460a      	mov	r2, r1
 8003db2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003db6:	4413      	add	r3, r2
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	61fa      	str	r2, [r7, #28]
 8003dc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dca:	f7fc ff65 	bl	8000c98 <__aeabi_uldivmod>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd6:	e053      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0x150>
 8003dd8:	4b35      	ldr	r3, [pc, #212]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	099b      	lsrs	r3, r3, #6
 8003dde:	2200      	movs	r2, #0
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	617a      	str	r2, [r7, #20]
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003dea:	f04f 0b00 	mov.w	fp, #0
 8003dee:	4652      	mov	r2, sl
 8003df0:	465b      	mov	r3, fp
 8003df2:	f04f 0000 	mov.w	r0, #0
 8003df6:	f04f 0100 	mov.w	r1, #0
 8003dfa:	0159      	lsls	r1, r3, #5
 8003dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e00:	0150      	lsls	r0, r2, #5
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	ebb2 080a 	subs.w	r8, r2, sl
 8003e0a:	eb63 090b 	sbc.w	r9, r3, fp
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e22:	ebb2 0408 	subs.w	r4, r2, r8
 8003e26:	eb63 0509 	sbc.w	r5, r3, r9
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	00eb      	lsls	r3, r5, #3
 8003e34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e38:	00e2      	lsls	r2, r4, #3
 8003e3a:	4614      	mov	r4, r2
 8003e3c:	461d      	mov	r5, r3
 8003e3e:	eb14 030a 	adds.w	r3, r4, sl
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	eb45 030b 	adc.w	r3, r5, fp
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e56:	4629      	mov	r1, r5
 8003e58:	028b      	lsls	r3, r1, #10
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e60:	4621      	mov	r1, r4
 8003e62:	028a      	lsls	r2, r1, #10
 8003e64:	4610      	mov	r0, r2
 8003e66:	4619      	mov	r1, r3
 8003e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	60fa      	str	r2, [r7, #12]
 8003e70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e74:	f7fc ff10 	bl	8000c98 <__aeabi_uldivmod>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e9a:	e002      	b.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x172>
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ea0:	bf00      	nop
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3740      	adds	r7, #64	; 0x40
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eae:	bf00      	nop
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	00f42400 	.word	0x00f42400
 8003eb8:	017d7840 	.word	0x017d7840

08003ebc <HAL_RCC_GetHCLKFreq>:
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20000098 	.word	0x20000098

08003ed4 <HAL_RCC_GetPCLK1Freq>:
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	f7ff fff0 	bl	8003ebc <HAL_RCC_GetHCLKFreq>
 8003edc:	4602      	mov	r2, r0
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	0a9b      	lsrs	r3, r3, #10
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	4903      	ldr	r1, [pc, #12]	; (8003ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eea:	5ccb      	ldrb	r3, [r1, r3]
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	08008460 	.word	0x08008460

08003efc <HAL_RCC_GetPCLK2Freq>:
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	f7ff ffdc 	bl	8003ebc <HAL_RCC_GetHCLKFreq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	0b5b      	lsrs	r3, r3, #13
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	4903      	ldr	r1, [pc, #12]	; (8003f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f12:	5ccb      	ldrb	r3, [r1, r3]
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
 8003f18:	4618      	mov	r0, r3
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	08008460 	.word	0x08008460

08003f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e041      	b.n	8003fba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fe f8f0 	bl	8002130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f000 ff14 	bl	8004d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d001      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e044      	b.n	8004066 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1e      	ldr	r2, [pc, #120]	; (8004074 <HAL_TIM_Base_Start_IT+0xb0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d018      	beq.n	8004030 <HAL_TIM_Base_Start_IT+0x6c>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004006:	d013      	beq.n	8004030 <HAL_TIM_Base_Start_IT+0x6c>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1a      	ldr	r2, [pc, #104]	; (8004078 <HAL_TIM_Base_Start_IT+0xb4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00e      	beq.n	8004030 <HAL_TIM_Base_Start_IT+0x6c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a19      	ldr	r2, [pc, #100]	; (800407c <HAL_TIM_Base_Start_IT+0xb8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d009      	beq.n	8004030 <HAL_TIM_Base_Start_IT+0x6c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a17      	ldr	r2, [pc, #92]	; (8004080 <HAL_TIM_Base_Start_IT+0xbc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d004      	beq.n	8004030 <HAL_TIM_Base_Start_IT+0x6c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a16      	ldr	r2, [pc, #88]	; (8004084 <HAL_TIM_Base_Start_IT+0xc0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d111      	bne.n	8004054 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b06      	cmp	r3, #6
 8004040:	d010      	beq.n	8004064 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0201 	orr.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004052:	e007      	b.n	8004064 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40010000 	.word	0x40010000
 8004078:	40000400 	.word	0x40000400
 800407c:	40000800 	.word	0x40000800
 8004080:	40000c00 	.word	0x40000c00
 8004084:	40014000 	.word	0x40014000

08004088 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0201 	bic.w	r2, r2, #1
 800409e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6a1a      	ldr	r2, [r3, #32]
 80040a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10f      	bne.n	80040d0 <HAL_TIM_Base_Stop_IT+0x48>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6a1a      	ldr	r2, [r3, #32]
 80040b6:	f240 4344 	movw	r3, #1092	; 0x444
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d107      	bne.n	80040d0 <HAL_TIM_Base_Stop_IT+0x48>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0201 	bic.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e041      	b.n	800417c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d106      	bne.n	8004112 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7fe f88d 	bl	800222c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3304      	adds	r3, #4
 8004122:	4619      	mov	r1, r3
 8004124:	4610      	mov	r0, r2
 8004126:	f000 fe33 	bl	8004d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <HAL_TIM_PWM_Start+0x24>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	bf14      	ite	ne
 80041a0:	2301      	movne	r3, #1
 80041a2:	2300      	moveq	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	e022      	b.n	80041ee <HAL_TIM_PWM_Start+0x6a>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d109      	bne.n	80041c2 <HAL_TIM_PWM_Start+0x3e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	bf14      	ite	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	2300      	moveq	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	e015      	b.n	80041ee <HAL_TIM_PWM_Start+0x6a>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d109      	bne.n	80041dc <HAL_TIM_PWM_Start+0x58>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	bf14      	ite	ne
 80041d4:	2301      	movne	r3, #1
 80041d6:	2300      	moveq	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	e008      	b.n	80041ee <HAL_TIM_PWM_Start+0x6a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	bf14      	ite	ne
 80041e8:	2301      	movne	r3, #1
 80041ea:	2300      	moveq	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e068      	b.n	80042c8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d104      	bne.n	8004206 <HAL_TIM_PWM_Start+0x82>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004204:	e013      	b.n	800422e <HAL_TIM_PWM_Start+0xaa>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b04      	cmp	r3, #4
 800420a:	d104      	bne.n	8004216 <HAL_TIM_PWM_Start+0x92>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004214:	e00b      	b.n	800422e <HAL_TIM_PWM_Start+0xaa>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d104      	bne.n	8004226 <HAL_TIM_PWM_Start+0xa2>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004224:	e003      	b.n	800422e <HAL_TIM_PWM_Start+0xaa>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2202      	movs	r2, #2
 800422a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2201      	movs	r2, #1
 8004234:	6839      	ldr	r1, [r7, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f001 f9e5 	bl	8005606 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a23      	ldr	r2, [pc, #140]	; (80042d0 <HAL_TIM_PWM_Start+0x14c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d107      	bne.n	8004256 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004254:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1d      	ldr	r2, [pc, #116]	; (80042d0 <HAL_TIM_PWM_Start+0x14c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d018      	beq.n	8004292 <HAL_TIM_PWM_Start+0x10e>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004268:	d013      	beq.n	8004292 <HAL_TIM_PWM_Start+0x10e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a19      	ldr	r2, [pc, #100]	; (80042d4 <HAL_TIM_PWM_Start+0x150>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00e      	beq.n	8004292 <HAL_TIM_PWM_Start+0x10e>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <HAL_TIM_PWM_Start+0x154>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d009      	beq.n	8004292 <HAL_TIM_PWM_Start+0x10e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a16      	ldr	r2, [pc, #88]	; (80042dc <HAL_TIM_PWM_Start+0x158>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d004      	beq.n	8004292 <HAL_TIM_PWM_Start+0x10e>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a14      	ldr	r2, [pc, #80]	; (80042e0 <HAL_TIM_PWM_Start+0x15c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d111      	bne.n	80042b6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b06      	cmp	r3, #6
 80042a2:	d010      	beq.n	80042c6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b4:	e007      	b.n	80042c6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 0201 	orr.w	r2, r2, #1
 80042c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40010000 	.word	0x40010000
 80042d4:	40000400 	.word	0x40000400
 80042d8:	40000800 	.word	0x40000800
 80042dc:	40000c00 	.word	0x40000c00
 80042e0:	40014000 	.word	0x40014000

080042e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2200      	movs	r2, #0
 80042f4:	6839      	ldr	r1, [r7, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f001 f985 	bl	8005606 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a29      	ldr	r2, [pc, #164]	; (80043a8 <HAL_TIM_PWM_Stop+0xc4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d117      	bne.n	8004336 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6a1a      	ldr	r2, [r3, #32]
 800430c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004310:	4013      	ands	r3, r2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10f      	bne.n	8004336 <HAL_TIM_PWM_Stop+0x52>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6a1a      	ldr	r2, [r3, #32]
 800431c:	f240 4344 	movw	r3, #1092	; 0x444
 8004320:	4013      	ands	r3, r2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d107      	bne.n	8004336 <HAL_TIM_PWM_Stop+0x52>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004334:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6a1a      	ldr	r2, [r3, #32]
 800433c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004340:	4013      	ands	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10f      	bne.n	8004366 <HAL_TIM_PWM_Stop+0x82>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	f240 4344 	movw	r3, #1092	; 0x444
 8004350:	4013      	ands	r3, r2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d107      	bne.n	8004366 <HAL_TIM_PWM_Stop+0x82>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0201 	bic.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d104      	bne.n	8004376 <HAL_TIM_PWM_Stop+0x92>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004374:	e013      	b.n	800439e <HAL_TIM_PWM_Stop+0xba>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b04      	cmp	r3, #4
 800437a:	d104      	bne.n	8004386 <HAL_TIM_PWM_Stop+0xa2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004384:	e00b      	b.n	800439e <HAL_TIM_PWM_Stop+0xba>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d104      	bne.n	8004396 <HAL_TIM_PWM_Stop+0xb2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004394:	e003      	b.n	800439e <HAL_TIM_PWM_Stop+0xba>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40010000 	.word	0x40010000

080043ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e041      	b.n	8004442 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd ff4c 	bl	8002270 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3304      	adds	r3, #4
 80043e8:	4619      	mov	r1, r3
 80043ea:	4610      	mov	r0, r2
 80043ec:	f000 fcd0 	bl	8004d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d104      	bne.n	800446a <HAL_TIM_IC_Start_IT+0x1e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004466:	b2db      	uxtb	r3, r3
 8004468:	e013      	b.n	8004492 <HAL_TIM_IC_Start_IT+0x46>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b04      	cmp	r3, #4
 800446e:	d104      	bne.n	800447a <HAL_TIM_IC_Start_IT+0x2e>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004476:	b2db      	uxtb	r3, r3
 8004478:	e00b      	b.n	8004492 <HAL_TIM_IC_Start_IT+0x46>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d104      	bne.n	800448a <HAL_TIM_IC_Start_IT+0x3e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004486:	b2db      	uxtb	r3, r3
 8004488:	e003      	b.n	8004492 <HAL_TIM_IC_Start_IT+0x46>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004490:	b2db      	uxtb	r3, r3
 8004492:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d104      	bne.n	80044a4 <HAL_TIM_IC_Start_IT+0x58>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	e013      	b.n	80044cc <HAL_TIM_IC_Start_IT+0x80>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d104      	bne.n	80044b4 <HAL_TIM_IC_Start_IT+0x68>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	e00b      	b.n	80044cc <HAL_TIM_IC_Start_IT+0x80>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d104      	bne.n	80044c4 <HAL_TIM_IC_Start_IT+0x78>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	e003      	b.n	80044cc <HAL_TIM_IC_Start_IT+0x80>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80044ce:	7bbb      	ldrb	r3, [r7, #14]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d102      	bne.n	80044da <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80044d4:	7b7b      	ldrb	r3, [r7, #13]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d001      	beq.n	80044de <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e0c2      	b.n	8004664 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <HAL_TIM_IC_Start_IT+0xa2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044ec:	e013      	b.n	8004516 <HAL_TIM_IC_Start_IT+0xca>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d104      	bne.n	80044fe <HAL_TIM_IC_Start_IT+0xb2>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044fc:	e00b      	b.n	8004516 <HAL_TIM_IC_Start_IT+0xca>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b08      	cmp	r3, #8
 8004502:	d104      	bne.n	800450e <HAL_TIM_IC_Start_IT+0xc2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800450c:	e003      	b.n	8004516 <HAL_TIM_IC_Start_IT+0xca>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2202      	movs	r2, #2
 8004512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <HAL_TIM_IC_Start_IT+0xda>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004524:	e013      	b.n	800454e <HAL_TIM_IC_Start_IT+0x102>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b04      	cmp	r3, #4
 800452a:	d104      	bne.n	8004536 <HAL_TIM_IC_Start_IT+0xea>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004534:	e00b      	b.n	800454e <HAL_TIM_IC_Start_IT+0x102>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d104      	bne.n	8004546 <HAL_TIM_IC_Start_IT+0xfa>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004544:	e003      	b.n	800454e <HAL_TIM_IC_Start_IT+0x102>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b0c      	cmp	r3, #12
 8004552:	d841      	bhi.n	80045d8 <HAL_TIM_IC_Start_IT+0x18c>
 8004554:	a201      	add	r2, pc, #4	; (adr r2, 800455c <HAL_TIM_IC_Start_IT+0x110>)
 8004556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455a:	bf00      	nop
 800455c:	08004591 	.word	0x08004591
 8004560:	080045d9 	.word	0x080045d9
 8004564:	080045d9 	.word	0x080045d9
 8004568:	080045d9 	.word	0x080045d9
 800456c:	080045a3 	.word	0x080045a3
 8004570:	080045d9 	.word	0x080045d9
 8004574:	080045d9 	.word	0x080045d9
 8004578:	080045d9 	.word	0x080045d9
 800457c:	080045b5 	.word	0x080045b5
 8004580:	080045d9 	.word	0x080045d9
 8004584:	080045d9 	.word	0x080045d9
 8004588:	080045d9 	.word	0x080045d9
 800458c:	080045c7 	.word	0x080045c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0202 	orr.w	r2, r2, #2
 800459e:	60da      	str	r2, [r3, #12]
      break;
 80045a0:	e01d      	b.n	80045de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0204 	orr.w	r2, r2, #4
 80045b0:	60da      	str	r2, [r3, #12]
      break;
 80045b2:	e014      	b.n	80045de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0208 	orr.w	r2, r2, #8
 80045c2:	60da      	str	r2, [r3, #12]
      break;
 80045c4:	e00b      	b.n	80045de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0210 	orr.w	r2, r2, #16
 80045d4:	60da      	str	r2, [r3, #12]
      break;
 80045d6:	e002      	b.n	80045de <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
      break;
 80045dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d13e      	bne.n	8004662 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2201      	movs	r2, #1
 80045ea:	6839      	ldr	r1, [r7, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 f80a 	bl	8005606 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a1d      	ldr	r2, [pc, #116]	; (800466c <HAL_TIM_IC_Start_IT+0x220>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d018      	beq.n	800462e <HAL_TIM_IC_Start_IT+0x1e2>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004604:	d013      	beq.n	800462e <HAL_TIM_IC_Start_IT+0x1e2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a19      	ldr	r2, [pc, #100]	; (8004670 <HAL_TIM_IC_Start_IT+0x224>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00e      	beq.n	800462e <HAL_TIM_IC_Start_IT+0x1e2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a17      	ldr	r2, [pc, #92]	; (8004674 <HAL_TIM_IC_Start_IT+0x228>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d009      	beq.n	800462e <HAL_TIM_IC_Start_IT+0x1e2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a16      	ldr	r2, [pc, #88]	; (8004678 <HAL_TIM_IC_Start_IT+0x22c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d004      	beq.n	800462e <HAL_TIM_IC_Start_IT+0x1e2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a14      	ldr	r2, [pc, #80]	; (800467c <HAL_TIM_IC_Start_IT+0x230>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d111      	bne.n	8004652 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b06      	cmp	r3, #6
 800463e:	d010      	beq.n	8004662 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004650:	e007      	b.n	8004662 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0201 	orr.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004662:	7bfb      	ldrb	r3, [r7, #15]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40010000 	.word	0x40010000
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800
 8004678:	40000c00 	.word	0x40000c00
 800467c:	40014000 	.word	0x40014000

08004680 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b0c      	cmp	r3, #12
 8004692:	d841      	bhi.n	8004718 <HAL_TIM_IC_Stop_IT+0x98>
 8004694:	a201      	add	r2, pc, #4	; (adr r2, 800469c <HAL_TIM_IC_Stop_IT+0x1c>)
 8004696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469a:	bf00      	nop
 800469c:	080046d1 	.word	0x080046d1
 80046a0:	08004719 	.word	0x08004719
 80046a4:	08004719 	.word	0x08004719
 80046a8:	08004719 	.word	0x08004719
 80046ac:	080046e3 	.word	0x080046e3
 80046b0:	08004719 	.word	0x08004719
 80046b4:	08004719 	.word	0x08004719
 80046b8:	08004719 	.word	0x08004719
 80046bc:	080046f5 	.word	0x080046f5
 80046c0:	08004719 	.word	0x08004719
 80046c4:	08004719 	.word	0x08004719
 80046c8:	08004719 	.word	0x08004719
 80046cc:	08004707 	.word	0x08004707
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0202 	bic.w	r2, r2, #2
 80046de:	60da      	str	r2, [r3, #12]
      break;
 80046e0:	e01d      	b.n	800471e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0204 	bic.w	r2, r2, #4
 80046f0:	60da      	str	r2, [r3, #12]
      break;
 80046f2:	e014      	b.n	800471e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0208 	bic.w	r2, r2, #8
 8004702:	60da      	str	r2, [r3, #12]
      break;
 8004704:	e00b      	b.n	800471e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0210 	bic.w	r2, r2, #16
 8004714:	60da      	str	r2, [r3, #12]
      break;
 8004716:	e002      	b.n	800471e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
      break;
 800471c:	bf00      	nop
  }

  if (status == HAL_OK)
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d156      	bne.n	80047d2 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2200      	movs	r2, #0
 800472a:	6839      	ldr	r1, [r7, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f000 ff6a 	bl	8005606 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6a1a      	ldr	r2, [r3, #32]
 8004738:	f241 1311 	movw	r3, #4369	; 0x1111
 800473c:	4013      	ands	r3, r2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10f      	bne.n	8004762 <HAL_TIM_IC_Stop_IT+0xe2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6a1a      	ldr	r2, [r3, #32]
 8004748:	f240 4344 	movw	r3, #1092	; 0x444
 800474c:	4013      	ands	r3, r2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d107      	bne.n	8004762 <HAL_TIM_IC_Stop_IT+0xe2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d104      	bne.n	8004772 <HAL_TIM_IC_Stop_IT+0xf2>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004770:	e013      	b.n	800479a <HAL_TIM_IC_Stop_IT+0x11a>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b04      	cmp	r3, #4
 8004776:	d104      	bne.n	8004782 <HAL_TIM_IC_Stop_IT+0x102>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004780:	e00b      	b.n	800479a <HAL_TIM_IC_Stop_IT+0x11a>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b08      	cmp	r3, #8
 8004786:	d104      	bne.n	8004792 <HAL_TIM_IC_Stop_IT+0x112>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004790:	e003      	b.n	800479a <HAL_TIM_IC_Stop_IT+0x11a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d104      	bne.n	80047aa <HAL_TIM_IC_Stop_IT+0x12a>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a8:	e013      	b.n	80047d2 <HAL_TIM_IC_Stop_IT+0x152>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d104      	bne.n	80047ba <HAL_TIM_IC_Stop_IT+0x13a>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047b8:	e00b      	b.n	80047d2 <HAL_TIM_IC_Stop_IT+0x152>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d104      	bne.n	80047ca <HAL_TIM_IC_Stop_IT+0x14a>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c8:	e003      	b.n	80047d2 <HAL_TIM_IC_Stop_IT+0x152>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d122      	bne.n	8004838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d11b      	bne.n	8004838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0202 	mvn.w	r2, #2
 8004808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa98 	bl	8004d54 <HAL_TIM_IC_CaptureCallback>
 8004824:	e005      	b.n	8004832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fa8a 	bl	8004d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fa9b 	bl	8004d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b04      	cmp	r3, #4
 8004844:	d122      	bne.n	800488c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b04      	cmp	r3, #4
 8004852:	d11b      	bne.n	800488c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0204 	mvn.w	r2, #4
 800485c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2202      	movs	r2, #2
 8004862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fa6e 	bl	8004d54 <HAL_TIM_IC_CaptureCallback>
 8004878:	e005      	b.n	8004886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fa60 	bl	8004d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fa71 	bl	8004d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b08      	cmp	r3, #8
 8004898:	d122      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d11b      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f06f 0208 	mvn.w	r2, #8
 80048b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2204      	movs	r2, #4
 80048b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fa44 	bl	8004d54 <HAL_TIM_IC_CaptureCallback>
 80048cc:	e005      	b.n	80048da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fa36 	bl	8004d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fa47 	bl	8004d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d122      	bne.n	8004934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b10      	cmp	r3, #16
 80048fa:	d11b      	bne.n	8004934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0210 	mvn.w	r2, #16
 8004904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2208      	movs	r2, #8
 800490a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fa1a 	bl	8004d54 <HAL_TIM_IC_CaptureCallback>
 8004920:	e005      	b.n	800492e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fa0c 	bl	8004d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 fa1d 	bl	8004d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b01      	cmp	r3, #1
 8004940:	d10e      	bne.n	8004960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b01      	cmp	r3, #1
 800494e:	d107      	bne.n	8004960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0201 	mvn.w	r2, #1
 8004958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f9e6 	bl	8004d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b80      	cmp	r3, #128	; 0x80
 800496c:	d10e      	bne.n	800498c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004978:	2b80      	cmp	r3, #128	; 0x80
 800497a:	d107      	bne.n	800498c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f001 f88e 	bl	8005aa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b40      	cmp	r3, #64	; 0x40
 8004998:	d10e      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	d107      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f9e2 	bl	8004d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d10e      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	d107      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0220 	mvn.w	r2, #32
 80049dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f001 f858 	bl	8005a94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e088      	b.n	8004b1c <HAL_TIM_IC_ConfigChannel+0x130>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d11b      	bne.n	8004a50 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	6819      	ldr	r1, [r3, #0]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f000 fc50 	bl	80052cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 020c 	bic.w	r2, r2, #12
 8004a3a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6999      	ldr	r1, [r3, #24]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	619a      	str	r2, [r3, #24]
 8004a4e:	e060      	b.n	8004b12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d11c      	bne.n	8004a90 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	6819      	ldr	r1, [r3, #0]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f000 fcc8 	bl	80053fa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699a      	ldr	r2, [r3, #24]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a78:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6999      	ldr	r1, [r3, #24]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	021a      	lsls	r2, r3, #8
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	619a      	str	r2, [r3, #24]
 8004a8e:	e040      	b.n	8004b12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d11b      	bne.n	8004ace <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	6819      	ldr	r1, [r3, #0]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f000 fd15 	bl	80054d4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69da      	ldr	r2, [r3, #28]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 020c 	bic.w	r2, r2, #12
 8004ab8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69d9      	ldr	r1, [r3, #28]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	61da      	str	r2, [r3, #28]
 8004acc:	e021      	b.n	8004b12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b0c      	cmp	r3, #12
 8004ad2:	d11c      	bne.n	8004b0e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6818      	ldr	r0, [r3, #0]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	6819      	ldr	r1, [r3, #0]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f000 fd32 	bl	800554c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004af6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69d9      	ldr	r1, [r3, #28]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	021a      	lsls	r2, r3, #8
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	61da      	str	r2, [r3, #28]
 8004b0c:	e001      	b.n	8004b12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e0ae      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b0c      	cmp	r3, #12
 8004b4e:	f200 809f 	bhi.w	8004c90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b52:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004b8d 	.word	0x08004b8d
 8004b5c:	08004c91 	.word	0x08004c91
 8004b60:	08004c91 	.word	0x08004c91
 8004b64:	08004c91 	.word	0x08004c91
 8004b68:	08004bcd 	.word	0x08004bcd
 8004b6c:	08004c91 	.word	0x08004c91
 8004b70:	08004c91 	.word	0x08004c91
 8004b74:	08004c91 	.word	0x08004c91
 8004b78:	08004c0f 	.word	0x08004c0f
 8004b7c:	08004c91 	.word	0x08004c91
 8004b80:	08004c91 	.word	0x08004c91
 8004b84:	08004c91 	.word	0x08004c91
 8004b88:	08004c4f 	.word	0x08004c4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 f97c 	bl	8004e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0208 	orr.w	r2, r2, #8
 8004ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0204 	bic.w	r2, r2, #4
 8004bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6999      	ldr	r1, [r3, #24]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	619a      	str	r2, [r3, #24]
      break;
 8004bca:	e064      	b.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 f9c2 	bl	8004f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6999      	ldr	r1, [r3, #24]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	021a      	lsls	r2, r3, #8
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	619a      	str	r2, [r3, #24]
      break;
 8004c0c:	e043      	b.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fa0d 	bl	8005034 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0208 	orr.w	r2, r2, #8
 8004c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0204 	bic.w	r2, r2, #4
 8004c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69d9      	ldr	r1, [r3, #28]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	61da      	str	r2, [r3, #28]
      break;
 8004c4c:	e023      	b.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fa57 	bl	8005108 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69da      	ldr	r2, [r3, #28]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69d9      	ldr	r1, [r3, #28]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	021a      	lsls	r2, r3, #8
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	61da      	str	r2, [r3, #28]
      break;
 8004c8e:	e002      	b.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	75fb      	strb	r3, [r7, #23]
      break;
 8004c94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e031      	b.n	8004d24 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004cd0:	6839      	ldr	r1, [r7, #0]
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fa68 	bl	80051a8 <TIM_SlaveTimer_SetConfig>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d009      	beq.n	8004cf2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e018      	b.n	8004d24 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d00:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d10:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a34      	ldr	r2, [pc, #208]	; (8004e74 <TIM_Base_SetConfig+0xe4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00f      	beq.n	8004dc8 <TIM_Base_SetConfig+0x38>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dae:	d00b      	beq.n	8004dc8 <TIM_Base_SetConfig+0x38>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a31      	ldr	r2, [pc, #196]	; (8004e78 <TIM_Base_SetConfig+0xe8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d007      	beq.n	8004dc8 <TIM_Base_SetConfig+0x38>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a30      	ldr	r2, [pc, #192]	; (8004e7c <TIM_Base_SetConfig+0xec>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d003      	beq.n	8004dc8 <TIM_Base_SetConfig+0x38>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a2f      	ldr	r2, [pc, #188]	; (8004e80 <TIM_Base_SetConfig+0xf0>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d108      	bne.n	8004dda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a25      	ldr	r2, [pc, #148]	; (8004e74 <TIM_Base_SetConfig+0xe4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d01b      	beq.n	8004e1a <TIM_Base_SetConfig+0x8a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de8:	d017      	beq.n	8004e1a <TIM_Base_SetConfig+0x8a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a22      	ldr	r2, [pc, #136]	; (8004e78 <TIM_Base_SetConfig+0xe8>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d013      	beq.n	8004e1a <TIM_Base_SetConfig+0x8a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a21      	ldr	r2, [pc, #132]	; (8004e7c <TIM_Base_SetConfig+0xec>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00f      	beq.n	8004e1a <TIM_Base_SetConfig+0x8a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a20      	ldr	r2, [pc, #128]	; (8004e80 <TIM_Base_SetConfig+0xf0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d00b      	beq.n	8004e1a <TIM_Base_SetConfig+0x8a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <TIM_Base_SetConfig+0xf4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d007      	beq.n	8004e1a <TIM_Base_SetConfig+0x8a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a1e      	ldr	r2, [pc, #120]	; (8004e88 <TIM_Base_SetConfig+0xf8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d003      	beq.n	8004e1a <TIM_Base_SetConfig+0x8a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a1d      	ldr	r2, [pc, #116]	; (8004e8c <TIM_Base_SetConfig+0xfc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d108      	bne.n	8004e2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a08      	ldr	r2, [pc, #32]	; (8004e74 <TIM_Base_SetConfig+0xe4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d103      	bne.n	8004e60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	615a      	str	r2, [r3, #20]
}
 8004e66:	bf00      	nop
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800
 8004e80:	40000c00 	.word	0x40000c00
 8004e84:	40014000 	.word	0x40014000
 8004e88:	40014400 	.word	0x40014400
 8004e8c:	40014800 	.word	0x40014800

08004e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f023 0201 	bic.w	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0303 	bic.w	r3, r3, #3
 8004ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f023 0302 	bic.w	r3, r3, #2
 8004ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a1c      	ldr	r2, [pc, #112]	; (8004f58 <TIM_OC1_SetConfig+0xc8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d10c      	bne.n	8004f06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f023 0308 	bic.w	r3, r3, #8
 8004ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f023 0304 	bic.w	r3, r3, #4
 8004f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a13      	ldr	r2, [pc, #76]	; (8004f58 <TIM_OC1_SetConfig+0xc8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d111      	bne.n	8004f32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	621a      	str	r2, [r3, #32]
}
 8004f4c:	bf00      	nop
 8004f4e:	371c      	adds	r7, #28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	40010000 	.word	0x40010000

08004f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f023 0210 	bic.w	r2, r3, #16
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	021b      	lsls	r3, r3, #8
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f023 0320 	bic.w	r3, r3, #32
 8004fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a1e      	ldr	r2, [pc, #120]	; (8005030 <TIM_OC2_SetConfig+0xd4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d10d      	bne.n	8004fd8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a15      	ldr	r2, [pc, #84]	; (8005030 <TIM_OC2_SetConfig+0xd4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d113      	bne.n	8005008 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fe6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	621a      	str	r2, [r3, #32]
}
 8005022:	bf00      	nop
 8005024:	371c      	adds	r7, #28
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40010000 	.word	0x40010000

08005034 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0303 	bic.w	r3, r3, #3
 800506a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800507c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	021b      	lsls	r3, r3, #8
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	4313      	orrs	r3, r2
 8005088:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <TIM_OC3_SetConfig+0xd0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d10d      	bne.n	80050ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005098:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	021b      	lsls	r3, r3, #8
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a14      	ldr	r2, [pc, #80]	; (8005104 <TIM_OC3_SetConfig+0xd0>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d113      	bne.n	80050de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	621a      	str	r2, [r3, #32]
}
 80050f8:	bf00      	nop
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	40010000 	.word	0x40010000

08005108 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	021b      	lsls	r3, r3, #8
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4313      	orrs	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005152:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	031b      	lsls	r3, r3, #12
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a10      	ldr	r2, [pc, #64]	; (80051a4 <TIM_OC4_SetConfig+0x9c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d109      	bne.n	800517c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800516e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	019b      	lsls	r3, r3, #6
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	621a      	str	r2, [r3, #32]
}
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40010000 	.word	0x40010000

080051a8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f023 0307 	bic.w	r3, r3, #7
 80051d6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b70      	cmp	r3, #112	; 0x70
 80051f0:	d01a      	beq.n	8005228 <TIM_SlaveTimer_SetConfig+0x80>
 80051f2:	2b70      	cmp	r3, #112	; 0x70
 80051f4:	d860      	bhi.n	80052b8 <TIM_SlaveTimer_SetConfig+0x110>
 80051f6:	2b60      	cmp	r3, #96	; 0x60
 80051f8:	d054      	beq.n	80052a4 <TIM_SlaveTimer_SetConfig+0xfc>
 80051fa:	2b60      	cmp	r3, #96	; 0x60
 80051fc:	d85c      	bhi.n	80052b8 <TIM_SlaveTimer_SetConfig+0x110>
 80051fe:	2b50      	cmp	r3, #80	; 0x50
 8005200:	d046      	beq.n	8005290 <TIM_SlaveTimer_SetConfig+0xe8>
 8005202:	2b50      	cmp	r3, #80	; 0x50
 8005204:	d858      	bhi.n	80052b8 <TIM_SlaveTimer_SetConfig+0x110>
 8005206:	2b40      	cmp	r3, #64	; 0x40
 8005208:	d019      	beq.n	800523e <TIM_SlaveTimer_SetConfig+0x96>
 800520a:	2b40      	cmp	r3, #64	; 0x40
 800520c:	d854      	bhi.n	80052b8 <TIM_SlaveTimer_SetConfig+0x110>
 800520e:	2b30      	cmp	r3, #48	; 0x30
 8005210:	d055      	beq.n	80052be <TIM_SlaveTimer_SetConfig+0x116>
 8005212:	2b30      	cmp	r3, #48	; 0x30
 8005214:	d850      	bhi.n	80052b8 <TIM_SlaveTimer_SetConfig+0x110>
 8005216:	2b20      	cmp	r3, #32
 8005218:	d051      	beq.n	80052be <TIM_SlaveTimer_SetConfig+0x116>
 800521a:	2b20      	cmp	r3, #32
 800521c:	d84c      	bhi.n	80052b8 <TIM_SlaveTimer_SetConfig+0x110>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d04d      	beq.n	80052be <TIM_SlaveTimer_SetConfig+0x116>
 8005222:	2b10      	cmp	r3, #16
 8005224:	d04b      	beq.n	80052be <TIM_SlaveTimer_SetConfig+0x116>
 8005226:	e047      	b.n	80052b8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68d9      	ldr	r1, [r3, #12]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f000 f9c5 	bl	80055c6 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800523c:	e040      	b.n	80052c0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b05      	cmp	r3, #5
 8005244:	d101      	bne.n	800524a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e03b      	b.n	80052c2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6a1a      	ldr	r2, [r3, #32]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0201 	bic.w	r2, r2, #1
 8005260:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005270:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	4313      	orrs	r3, r2
 800527c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	621a      	str	r2, [r3, #32]
      break;
 800528e:	e017      	b.n	80052c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	6899      	ldr	r1, [r3, #8]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	461a      	mov	r2, r3
 800529e:	f000 f87d 	bl	800539c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80052a2:	e00d      	b.n	80052c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	6899      	ldr	r1, [r3, #8]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	461a      	mov	r2, r3
 80052b2:	f000 f8df 	bl	8005474 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80052b6:	e003      	b.n	80052c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	75fb      	strb	r3, [r7, #23]
      break;
 80052bc:	e000      	b.n	80052c0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80052be:	bf00      	nop
  }

  return status;
 80052c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	f023 0201 	bic.w	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4a24      	ldr	r2, [pc, #144]	; (8005388 <TIM_TI1_SetConfig+0xbc>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d013      	beq.n	8005322 <TIM_TI1_SetConfig+0x56>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005300:	d00f      	beq.n	8005322 <TIM_TI1_SetConfig+0x56>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4a21      	ldr	r2, [pc, #132]	; (800538c <TIM_TI1_SetConfig+0xc0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00b      	beq.n	8005322 <TIM_TI1_SetConfig+0x56>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a20      	ldr	r2, [pc, #128]	; (8005390 <TIM_TI1_SetConfig+0xc4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d007      	beq.n	8005322 <TIM_TI1_SetConfig+0x56>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4a1f      	ldr	r2, [pc, #124]	; (8005394 <TIM_TI1_SetConfig+0xc8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d003      	beq.n	8005322 <TIM_TI1_SetConfig+0x56>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4a1e      	ldr	r2, [pc, #120]	; (8005398 <TIM_TI1_SetConfig+0xcc>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d101      	bne.n	8005326 <TIM_TI1_SetConfig+0x5a>
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <TIM_TI1_SetConfig+0x5c>
 8005326:	2300      	movs	r3, #0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d008      	beq.n	800533e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f023 0303 	bic.w	r3, r3, #3
 8005332:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	e003      	b.n	8005346 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f043 0301 	orr.w	r3, r3, #1
 8005344:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800534c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	b2db      	uxtb	r3, r3
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f023 030a 	bic.w	r3, r3, #10
 8005360:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f003 030a 	and.w	r3, r3, #10
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	621a      	str	r2, [r3, #32]
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40010000 	.word	0x40010000
 800538c:	40000400 	.word	0x40000400
 8005390:	40000800 	.word	0x40000800
 8005394:	40000c00 	.word	0x40000c00
 8005398:	40014000 	.word	0x40014000

0800539c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	f023 0201 	bic.w	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f023 030a 	bic.w	r3, r3, #10
 80053d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b087      	sub	sp, #28
 80053fe:	af00      	add	r7, sp, #0
 8005400:	60f8      	str	r0, [r7, #12]
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	607a      	str	r2, [r7, #4]
 8005406:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	f023 0210 	bic.w	r2, r3, #16
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005426:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	021b      	lsls	r3, r3, #8
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005438:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	031b      	lsls	r3, r3, #12
 800543e:	b29b      	uxth	r3, r3
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800544c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	621a      	str	r2, [r3, #32]
}
 8005468:	bf00      	nop
 800546a:	371c      	adds	r7, #28
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	f023 0210 	bic.w	r2, r3, #16
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800549e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	031b      	lsls	r3, r3, #12
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	621a      	str	r2, [r3, #32]
}
 80054c8:	bf00      	nop
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f023 0303 	bic.w	r3, r3, #3
 8005500:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4313      	orrs	r3, r2
 8005508:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005510:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	b2db      	uxtb	r3, r3
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	4313      	orrs	r3, r2
 800551c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005524:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	021b      	lsls	r3, r3, #8
 800552a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	621a      	str	r2, [r3, #32]
}
 8005540:	bf00      	nop
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005578:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800558a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	031b      	lsls	r3, r3, #12
 8005590:	b29b      	uxth	r3, r3
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800559e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	031b      	lsls	r3, r3, #12
 80055a4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	621a      	str	r2, [r3, #32]
}
 80055ba:	bf00      	nop
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b087      	sub	sp, #28
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	607a      	str	r2, [r7, #4]
 80055d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	021a      	lsls	r2, r3, #8
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	431a      	orrs	r2, r3
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	609a      	str	r2, [r3, #8]
}
 80055fa:	bf00      	nop
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005606:	b480      	push	{r7}
 8005608:	b087      	sub	sp, #28
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f003 031f 	and.w	r3, r3, #31
 8005618:	2201      	movs	r2, #1
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a1a      	ldr	r2, [r3, #32]
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	43db      	mvns	r3, r3
 8005628:	401a      	ands	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a1a      	ldr	r2, [r3, #32]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	6879      	ldr	r1, [r7, #4]
 800563a:	fa01 f303 	lsl.w	r3, r1, r3
 800563e:	431a      	orrs	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	621a      	str	r2, [r3, #32]
}
 8005644:	bf00      	nop
 8005646:	371c      	adds	r7, #28
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08a      	sub	sp, #40	; 0x28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e09a      	b.n	800579a <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d106      	bne.n	800567e <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7fc fd89 	bl	8002190 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2202      	movs	r2, #2
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3304      	adds	r3, #4
 800568e:	4619      	mov	r1, r3
 8005690:	4610      	mov	r0, r2
 8005692:	f7ff fb7d 	bl	8004d90 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6818      	ldr	r0, [r3, #0]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	6819      	ldr	r1, [r3, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2203      	movs	r2, #3
 80056a4:	f7ff fe12 	bl	80052cc <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 020c 	bic.w	r2, r2, #12
 80056b6:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6999      	ldr	r1, [r3, #24]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056d8:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80056e8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056f8:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0207 	bic.w	r2, r2, #7
 8005708:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f042 0204 	orr.w	r2, r2, #4
 8005718:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800571a:	2300      	movs	r3, #0
 800571c:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800571e:	2300      	movs	r3, #0
 8005720:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005722:	2370      	movs	r3, #112	; 0x70
 8005724:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005726:	2300      	movs	r3, #0
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800572a:	2300      	movs	r3, #0
 800572c:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f107 020c 	add.w	r2, r7, #12
 8005740:	4611      	mov	r1, r2
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff fc0a 	bl	8004f5c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005756:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8005766:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3728      	adds	r7, #40	; 0x28
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057b2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057ba:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057c2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80057ca:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d108      	bne.n	80057e4 <HAL_TIMEx_HallSensor_Start+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057d2:	7bbb      	ldrb	r3, [r7, #14]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d105      	bne.n	80057e4 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057d8:	7b7b      	ldrb	r3, [r7, #13]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d102      	bne.n	80057e4 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057de:	7b3b      	ldrb	r3, [r7, #12]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d001      	beq.n	80057e8 <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e04f      	b.n	8005888 <HAL_TIMEx_HallSensor_Start+0xe4>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2201      	movs	r2, #1
 800580e:	2100      	movs	r1, #0
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff fef8 	bl	8005606 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <HAL_TIMEx_HallSensor_Start+0xec>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d018      	beq.n	8005852 <HAL_TIMEx_HallSensor_Start+0xae>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005828:	d013      	beq.n	8005852 <HAL_TIMEx_HallSensor_Start+0xae>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a19      	ldr	r2, [pc, #100]	; (8005894 <HAL_TIMEx_HallSensor_Start+0xf0>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00e      	beq.n	8005852 <HAL_TIMEx_HallSensor_Start+0xae>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a17      	ldr	r2, [pc, #92]	; (8005898 <HAL_TIMEx_HallSensor_Start+0xf4>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d009      	beq.n	8005852 <HAL_TIMEx_HallSensor_Start+0xae>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a16      	ldr	r2, [pc, #88]	; (800589c <HAL_TIMEx_HallSensor_Start+0xf8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d004      	beq.n	8005852 <HAL_TIMEx_HallSensor_Start+0xae>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a14      	ldr	r2, [pc, #80]	; (80058a0 <HAL_TIMEx_HallSensor_Start+0xfc>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d111      	bne.n	8005876 <HAL_TIMEx_HallSensor_Start+0xd2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b06      	cmp	r3, #6
 8005862:	d010      	beq.n	8005886 <HAL_TIMEx_HallSensor_Start+0xe2>
    {
      __HAL_TIM_ENABLE(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005874:	e007      	b.n	8005886 <HAL_TIMEx_HallSensor_Start+0xe2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0201 	orr.w	r2, r2, #1
 8005884:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40010000 	.word	0x40010000
 8005894:	40000400 	.word	0x40000400
 8005898:	40000800 	.word	0x40000800
 800589c:	40000c00 	.word	0x40000c00
 80058a0:	40014000 	.word	0x40014000

080058a4 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2200      	movs	r2, #0
 80058b2:	2100      	movs	r1, #0
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7ff fea6 	bl	8005606 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6a1a      	ldr	r2, [r3, #32]
 80058c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80058c4:	4013      	ands	r3, r2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10f      	bne.n	80058ea <HAL_TIMEx_HallSensor_Stop+0x46>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6a1a      	ldr	r2, [r3, #32]
 80058d0:	f240 4344 	movw	r3, #1092	; 0x444
 80058d4:	4013      	ands	r3, r2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d107      	bne.n	80058ea <HAL_TIMEx_HallSensor_Stop+0x46>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0201 	bic.w	r2, r2, #1
 80058e8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005928:	2302      	movs	r3, #2
 800592a:	e050      	b.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a1c      	ldr	r2, [pc, #112]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d018      	beq.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005978:	d013      	beq.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00e      	beq.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a16      	ldr	r2, [pc, #88]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d009      	beq.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a15      	ldr	r2, [pc, #84]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d004      	beq.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a13      	ldr	r2, [pc, #76]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d10c      	bne.n	80059bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40010000 	.word	0x40010000
 80059e0:	40000400 	.word	0x40000400
 80059e4:	40000800 	.word	0x40000800
 80059e8:	40000c00 	.word	0x40000c00
 80059ec:	40014000 	.word	0x40014000

080059f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e03d      	b.n	8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <__cvt>:
 8005abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac0:	ec55 4b10 	vmov	r4, r5, d0
 8005ac4:	2d00      	cmp	r5, #0
 8005ac6:	460e      	mov	r6, r1
 8005ac8:	4619      	mov	r1, r3
 8005aca:	462b      	mov	r3, r5
 8005acc:	bfbb      	ittet	lt
 8005ace:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005ad2:	461d      	movlt	r5, r3
 8005ad4:	2300      	movge	r3, #0
 8005ad6:	232d      	movlt	r3, #45	; 0x2d
 8005ad8:	700b      	strb	r3, [r1, #0]
 8005ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005adc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ae0:	4691      	mov	r9, r2
 8005ae2:	f023 0820 	bic.w	r8, r3, #32
 8005ae6:	bfbc      	itt	lt
 8005ae8:	4622      	movlt	r2, r4
 8005aea:	4614      	movlt	r4, r2
 8005aec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005af0:	d005      	beq.n	8005afe <__cvt+0x42>
 8005af2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005af6:	d100      	bne.n	8005afa <__cvt+0x3e>
 8005af8:	3601      	adds	r6, #1
 8005afa:	2102      	movs	r1, #2
 8005afc:	e000      	b.n	8005b00 <__cvt+0x44>
 8005afe:	2103      	movs	r1, #3
 8005b00:	ab03      	add	r3, sp, #12
 8005b02:	9301      	str	r3, [sp, #4]
 8005b04:	ab02      	add	r3, sp, #8
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	ec45 4b10 	vmov	d0, r4, r5
 8005b0c:	4653      	mov	r3, sl
 8005b0e:	4632      	mov	r2, r6
 8005b10:	f000 fe4a 	bl	80067a8 <_dtoa_r>
 8005b14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b18:	4607      	mov	r7, r0
 8005b1a:	d102      	bne.n	8005b22 <__cvt+0x66>
 8005b1c:	f019 0f01 	tst.w	r9, #1
 8005b20:	d022      	beq.n	8005b68 <__cvt+0xac>
 8005b22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b26:	eb07 0906 	add.w	r9, r7, r6
 8005b2a:	d110      	bne.n	8005b4e <__cvt+0x92>
 8005b2c:	783b      	ldrb	r3, [r7, #0]
 8005b2e:	2b30      	cmp	r3, #48	; 0x30
 8005b30:	d10a      	bne.n	8005b48 <__cvt+0x8c>
 8005b32:	2200      	movs	r2, #0
 8005b34:	2300      	movs	r3, #0
 8005b36:	4620      	mov	r0, r4
 8005b38:	4629      	mov	r1, r5
 8005b3a:	f7fa ffcd 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b3e:	b918      	cbnz	r0, 8005b48 <__cvt+0x8c>
 8005b40:	f1c6 0601 	rsb	r6, r6, #1
 8005b44:	f8ca 6000 	str.w	r6, [sl]
 8005b48:	f8da 3000 	ldr.w	r3, [sl]
 8005b4c:	4499      	add	r9, r3
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2300      	movs	r3, #0
 8005b52:	4620      	mov	r0, r4
 8005b54:	4629      	mov	r1, r5
 8005b56:	f7fa ffbf 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b5a:	b108      	cbz	r0, 8005b60 <__cvt+0xa4>
 8005b5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b60:	2230      	movs	r2, #48	; 0x30
 8005b62:	9b03      	ldr	r3, [sp, #12]
 8005b64:	454b      	cmp	r3, r9
 8005b66:	d307      	bcc.n	8005b78 <__cvt+0xbc>
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b6c:	1bdb      	subs	r3, r3, r7
 8005b6e:	4638      	mov	r0, r7
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	b004      	add	sp, #16
 8005b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b78:	1c59      	adds	r1, r3, #1
 8005b7a:	9103      	str	r1, [sp, #12]
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	e7f0      	b.n	8005b62 <__cvt+0xa6>

08005b80 <__exponent>:
 8005b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b82:	4603      	mov	r3, r0
 8005b84:	2900      	cmp	r1, #0
 8005b86:	bfb8      	it	lt
 8005b88:	4249      	neglt	r1, r1
 8005b8a:	f803 2b02 	strb.w	r2, [r3], #2
 8005b8e:	bfb4      	ite	lt
 8005b90:	222d      	movlt	r2, #45	; 0x2d
 8005b92:	222b      	movge	r2, #43	; 0x2b
 8005b94:	2909      	cmp	r1, #9
 8005b96:	7042      	strb	r2, [r0, #1]
 8005b98:	dd2a      	ble.n	8005bf0 <__exponent+0x70>
 8005b9a:	f10d 0207 	add.w	r2, sp, #7
 8005b9e:	4617      	mov	r7, r2
 8005ba0:	260a      	movs	r6, #10
 8005ba2:	4694      	mov	ip, r2
 8005ba4:	fb91 f5f6 	sdiv	r5, r1, r6
 8005ba8:	fb06 1415 	mls	r4, r6, r5, r1
 8005bac:	3430      	adds	r4, #48	; 0x30
 8005bae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	2c63      	cmp	r4, #99	; 0x63
 8005bb6:	f102 32ff 	add.w	r2, r2, #4294967295
 8005bba:	4629      	mov	r1, r5
 8005bbc:	dcf1      	bgt.n	8005ba2 <__exponent+0x22>
 8005bbe:	3130      	adds	r1, #48	; 0x30
 8005bc0:	f1ac 0402 	sub.w	r4, ip, #2
 8005bc4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005bc8:	1c41      	adds	r1, r0, #1
 8005bca:	4622      	mov	r2, r4
 8005bcc:	42ba      	cmp	r2, r7
 8005bce:	d30a      	bcc.n	8005be6 <__exponent+0x66>
 8005bd0:	f10d 0209 	add.w	r2, sp, #9
 8005bd4:	eba2 020c 	sub.w	r2, r2, ip
 8005bd8:	42bc      	cmp	r4, r7
 8005bda:	bf88      	it	hi
 8005bdc:	2200      	movhi	r2, #0
 8005bde:	4413      	add	r3, r2
 8005be0:	1a18      	subs	r0, r3, r0
 8005be2:	b003      	add	sp, #12
 8005be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005bea:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005bee:	e7ed      	b.n	8005bcc <__exponent+0x4c>
 8005bf0:	2330      	movs	r3, #48	; 0x30
 8005bf2:	3130      	adds	r1, #48	; 0x30
 8005bf4:	7083      	strb	r3, [r0, #2]
 8005bf6:	70c1      	strb	r1, [r0, #3]
 8005bf8:	1d03      	adds	r3, r0, #4
 8005bfa:	e7f1      	b.n	8005be0 <__exponent+0x60>

08005bfc <_printf_float>:
 8005bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c00:	ed2d 8b02 	vpush	{d8}
 8005c04:	b08d      	sub	sp, #52	; 0x34
 8005c06:	460c      	mov	r4, r1
 8005c08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005c0c:	4616      	mov	r6, r2
 8005c0e:	461f      	mov	r7, r3
 8005c10:	4605      	mov	r5, r0
 8005c12:	f000 fcc7 	bl	80065a4 <_localeconv_r>
 8005c16:	f8d0 a000 	ldr.w	sl, [r0]
 8005c1a:	4650      	mov	r0, sl
 8005c1c:	f7fa fb30 	bl	8000280 <strlen>
 8005c20:	2300      	movs	r3, #0
 8005c22:	930a      	str	r3, [sp, #40]	; 0x28
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	9305      	str	r3, [sp, #20]
 8005c28:	f8d8 3000 	ldr.w	r3, [r8]
 8005c2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c30:	3307      	adds	r3, #7
 8005c32:	f023 0307 	bic.w	r3, r3, #7
 8005c36:	f103 0208 	add.w	r2, r3, #8
 8005c3a:	f8c8 2000 	str.w	r2, [r8]
 8005c3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c46:	9307      	str	r3, [sp, #28]
 8005c48:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c4c:	ee08 0a10 	vmov	s16, r0
 8005c50:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005c54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c58:	4b9e      	ldr	r3, [pc, #632]	; (8005ed4 <_printf_float+0x2d8>)
 8005c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5e:	f7fa ff6d 	bl	8000b3c <__aeabi_dcmpun>
 8005c62:	bb88      	cbnz	r0, 8005cc8 <_printf_float+0xcc>
 8005c64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c68:	4b9a      	ldr	r3, [pc, #616]	; (8005ed4 <_printf_float+0x2d8>)
 8005c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6e:	f7fa ff47 	bl	8000b00 <__aeabi_dcmple>
 8005c72:	bb48      	cbnz	r0, 8005cc8 <_printf_float+0xcc>
 8005c74:	2200      	movs	r2, #0
 8005c76:	2300      	movs	r3, #0
 8005c78:	4640      	mov	r0, r8
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	f7fa ff36 	bl	8000aec <__aeabi_dcmplt>
 8005c80:	b110      	cbz	r0, 8005c88 <_printf_float+0x8c>
 8005c82:	232d      	movs	r3, #45	; 0x2d
 8005c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c88:	4a93      	ldr	r2, [pc, #588]	; (8005ed8 <_printf_float+0x2dc>)
 8005c8a:	4b94      	ldr	r3, [pc, #592]	; (8005edc <_printf_float+0x2e0>)
 8005c8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c90:	bf94      	ite	ls
 8005c92:	4690      	movls	r8, r2
 8005c94:	4698      	movhi	r8, r3
 8005c96:	2303      	movs	r3, #3
 8005c98:	6123      	str	r3, [r4, #16]
 8005c9a:	9b05      	ldr	r3, [sp, #20]
 8005c9c:	f023 0304 	bic.w	r3, r3, #4
 8005ca0:	6023      	str	r3, [r4, #0]
 8005ca2:	f04f 0900 	mov.w	r9, #0
 8005ca6:	9700      	str	r7, [sp, #0]
 8005ca8:	4633      	mov	r3, r6
 8005caa:	aa0b      	add	r2, sp, #44	; 0x2c
 8005cac:	4621      	mov	r1, r4
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f000 f9da 	bl	8006068 <_printf_common>
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	f040 8090 	bne.w	8005dda <_printf_float+0x1de>
 8005cba:	f04f 30ff 	mov.w	r0, #4294967295
 8005cbe:	b00d      	add	sp, #52	; 0x34
 8005cc0:	ecbd 8b02 	vpop	{d8}
 8005cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc8:	4642      	mov	r2, r8
 8005cca:	464b      	mov	r3, r9
 8005ccc:	4640      	mov	r0, r8
 8005cce:	4649      	mov	r1, r9
 8005cd0:	f7fa ff34 	bl	8000b3c <__aeabi_dcmpun>
 8005cd4:	b140      	cbz	r0, 8005ce8 <_printf_float+0xec>
 8005cd6:	464b      	mov	r3, r9
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	bfbc      	itt	lt
 8005cdc:	232d      	movlt	r3, #45	; 0x2d
 8005cde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ce2:	4a7f      	ldr	r2, [pc, #508]	; (8005ee0 <_printf_float+0x2e4>)
 8005ce4:	4b7f      	ldr	r3, [pc, #508]	; (8005ee4 <_printf_float+0x2e8>)
 8005ce6:	e7d1      	b.n	8005c8c <_printf_float+0x90>
 8005ce8:	6863      	ldr	r3, [r4, #4]
 8005cea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005cee:	9206      	str	r2, [sp, #24]
 8005cf0:	1c5a      	adds	r2, r3, #1
 8005cf2:	d13f      	bne.n	8005d74 <_printf_float+0x178>
 8005cf4:	2306      	movs	r3, #6
 8005cf6:	6063      	str	r3, [r4, #4]
 8005cf8:	9b05      	ldr	r3, [sp, #20]
 8005cfa:	6861      	ldr	r1, [r4, #4]
 8005cfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d00:	2300      	movs	r3, #0
 8005d02:	9303      	str	r3, [sp, #12]
 8005d04:	ab0a      	add	r3, sp, #40	; 0x28
 8005d06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005d0a:	ab09      	add	r3, sp, #36	; 0x24
 8005d0c:	ec49 8b10 	vmov	d0, r8, r9
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	6022      	str	r2, [r4, #0]
 8005d14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f7ff fecf 	bl	8005abc <__cvt>
 8005d1e:	9b06      	ldr	r3, [sp, #24]
 8005d20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d22:	2b47      	cmp	r3, #71	; 0x47
 8005d24:	4680      	mov	r8, r0
 8005d26:	d108      	bne.n	8005d3a <_printf_float+0x13e>
 8005d28:	1cc8      	adds	r0, r1, #3
 8005d2a:	db02      	blt.n	8005d32 <_printf_float+0x136>
 8005d2c:	6863      	ldr	r3, [r4, #4]
 8005d2e:	4299      	cmp	r1, r3
 8005d30:	dd41      	ble.n	8005db6 <_printf_float+0x1ba>
 8005d32:	f1ab 0302 	sub.w	r3, fp, #2
 8005d36:	fa5f fb83 	uxtb.w	fp, r3
 8005d3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d3e:	d820      	bhi.n	8005d82 <_printf_float+0x186>
 8005d40:	3901      	subs	r1, #1
 8005d42:	465a      	mov	r2, fp
 8005d44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d48:	9109      	str	r1, [sp, #36]	; 0x24
 8005d4a:	f7ff ff19 	bl	8005b80 <__exponent>
 8005d4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d50:	1813      	adds	r3, r2, r0
 8005d52:	2a01      	cmp	r2, #1
 8005d54:	4681      	mov	r9, r0
 8005d56:	6123      	str	r3, [r4, #16]
 8005d58:	dc02      	bgt.n	8005d60 <_printf_float+0x164>
 8005d5a:	6822      	ldr	r2, [r4, #0]
 8005d5c:	07d2      	lsls	r2, r2, #31
 8005d5e:	d501      	bpl.n	8005d64 <_printf_float+0x168>
 8005d60:	3301      	adds	r3, #1
 8005d62:	6123      	str	r3, [r4, #16]
 8005d64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d09c      	beq.n	8005ca6 <_printf_float+0xaa>
 8005d6c:	232d      	movs	r3, #45	; 0x2d
 8005d6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d72:	e798      	b.n	8005ca6 <_printf_float+0xaa>
 8005d74:	9a06      	ldr	r2, [sp, #24]
 8005d76:	2a47      	cmp	r2, #71	; 0x47
 8005d78:	d1be      	bne.n	8005cf8 <_printf_float+0xfc>
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1bc      	bne.n	8005cf8 <_printf_float+0xfc>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e7b9      	b.n	8005cf6 <_printf_float+0xfa>
 8005d82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d86:	d118      	bne.n	8005dba <_printf_float+0x1be>
 8005d88:	2900      	cmp	r1, #0
 8005d8a:	6863      	ldr	r3, [r4, #4]
 8005d8c:	dd0b      	ble.n	8005da6 <_printf_float+0x1aa>
 8005d8e:	6121      	str	r1, [r4, #16]
 8005d90:	b913      	cbnz	r3, 8005d98 <_printf_float+0x19c>
 8005d92:	6822      	ldr	r2, [r4, #0]
 8005d94:	07d0      	lsls	r0, r2, #31
 8005d96:	d502      	bpl.n	8005d9e <_printf_float+0x1a2>
 8005d98:	3301      	adds	r3, #1
 8005d9a:	440b      	add	r3, r1
 8005d9c:	6123      	str	r3, [r4, #16]
 8005d9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005da0:	f04f 0900 	mov.w	r9, #0
 8005da4:	e7de      	b.n	8005d64 <_printf_float+0x168>
 8005da6:	b913      	cbnz	r3, 8005dae <_printf_float+0x1b2>
 8005da8:	6822      	ldr	r2, [r4, #0]
 8005daa:	07d2      	lsls	r2, r2, #31
 8005dac:	d501      	bpl.n	8005db2 <_printf_float+0x1b6>
 8005dae:	3302      	adds	r3, #2
 8005db0:	e7f4      	b.n	8005d9c <_printf_float+0x1a0>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e7f2      	b.n	8005d9c <_printf_float+0x1a0>
 8005db6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dbc:	4299      	cmp	r1, r3
 8005dbe:	db05      	blt.n	8005dcc <_printf_float+0x1d0>
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	6121      	str	r1, [r4, #16]
 8005dc4:	07d8      	lsls	r0, r3, #31
 8005dc6:	d5ea      	bpl.n	8005d9e <_printf_float+0x1a2>
 8005dc8:	1c4b      	adds	r3, r1, #1
 8005dca:	e7e7      	b.n	8005d9c <_printf_float+0x1a0>
 8005dcc:	2900      	cmp	r1, #0
 8005dce:	bfd4      	ite	le
 8005dd0:	f1c1 0202 	rsble	r2, r1, #2
 8005dd4:	2201      	movgt	r2, #1
 8005dd6:	4413      	add	r3, r2
 8005dd8:	e7e0      	b.n	8005d9c <_printf_float+0x1a0>
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	055a      	lsls	r2, r3, #21
 8005dde:	d407      	bmi.n	8005df0 <_printf_float+0x1f4>
 8005de0:	6923      	ldr	r3, [r4, #16]
 8005de2:	4642      	mov	r2, r8
 8005de4:	4631      	mov	r1, r6
 8005de6:	4628      	mov	r0, r5
 8005de8:	47b8      	blx	r7
 8005dea:	3001      	adds	r0, #1
 8005dec:	d12c      	bne.n	8005e48 <_printf_float+0x24c>
 8005dee:	e764      	b.n	8005cba <_printf_float+0xbe>
 8005df0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005df4:	f240 80e0 	bls.w	8005fb8 <_printf_float+0x3bc>
 8005df8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f7fa fe6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d034      	beq.n	8005e72 <_printf_float+0x276>
 8005e08:	4a37      	ldr	r2, [pc, #220]	; (8005ee8 <_printf_float+0x2ec>)
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	4631      	mov	r1, r6
 8005e0e:	4628      	mov	r0, r5
 8005e10:	47b8      	blx	r7
 8005e12:	3001      	adds	r0, #1
 8005e14:	f43f af51 	beq.w	8005cba <_printf_float+0xbe>
 8005e18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	db02      	blt.n	8005e26 <_printf_float+0x22a>
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	07d8      	lsls	r0, r3, #31
 8005e24:	d510      	bpl.n	8005e48 <_printf_float+0x24c>
 8005e26:	ee18 3a10 	vmov	r3, s16
 8005e2a:	4652      	mov	r2, sl
 8005e2c:	4631      	mov	r1, r6
 8005e2e:	4628      	mov	r0, r5
 8005e30:	47b8      	blx	r7
 8005e32:	3001      	adds	r0, #1
 8005e34:	f43f af41 	beq.w	8005cba <_printf_float+0xbe>
 8005e38:	f04f 0800 	mov.w	r8, #0
 8005e3c:	f104 091a 	add.w	r9, r4, #26
 8005e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e42:	3b01      	subs	r3, #1
 8005e44:	4543      	cmp	r3, r8
 8005e46:	dc09      	bgt.n	8005e5c <_printf_float+0x260>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	079b      	lsls	r3, r3, #30
 8005e4c:	f100 8107 	bmi.w	800605e <_printf_float+0x462>
 8005e50:	68e0      	ldr	r0, [r4, #12]
 8005e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e54:	4298      	cmp	r0, r3
 8005e56:	bfb8      	it	lt
 8005e58:	4618      	movlt	r0, r3
 8005e5a:	e730      	b.n	8005cbe <_printf_float+0xc2>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	464a      	mov	r2, r9
 8005e60:	4631      	mov	r1, r6
 8005e62:	4628      	mov	r0, r5
 8005e64:	47b8      	blx	r7
 8005e66:	3001      	adds	r0, #1
 8005e68:	f43f af27 	beq.w	8005cba <_printf_float+0xbe>
 8005e6c:	f108 0801 	add.w	r8, r8, #1
 8005e70:	e7e6      	b.n	8005e40 <_printf_float+0x244>
 8005e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	dc39      	bgt.n	8005eec <_printf_float+0x2f0>
 8005e78:	4a1b      	ldr	r2, [pc, #108]	; (8005ee8 <_printf_float+0x2ec>)
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4628      	mov	r0, r5
 8005e80:	47b8      	blx	r7
 8005e82:	3001      	adds	r0, #1
 8005e84:	f43f af19 	beq.w	8005cba <_printf_float+0xbe>
 8005e88:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	d102      	bne.n	8005e96 <_printf_float+0x29a>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	07d9      	lsls	r1, r3, #31
 8005e94:	d5d8      	bpl.n	8005e48 <_printf_float+0x24c>
 8005e96:	ee18 3a10 	vmov	r3, s16
 8005e9a:	4652      	mov	r2, sl
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	47b8      	blx	r7
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	f43f af09 	beq.w	8005cba <_printf_float+0xbe>
 8005ea8:	f04f 0900 	mov.w	r9, #0
 8005eac:	f104 0a1a 	add.w	sl, r4, #26
 8005eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb2:	425b      	negs	r3, r3
 8005eb4:	454b      	cmp	r3, r9
 8005eb6:	dc01      	bgt.n	8005ebc <_printf_float+0x2c0>
 8005eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eba:	e792      	b.n	8005de2 <_printf_float+0x1e6>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	4652      	mov	r2, sl
 8005ec0:	4631      	mov	r1, r6
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	47b8      	blx	r7
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	f43f aef7 	beq.w	8005cba <_printf_float+0xbe>
 8005ecc:	f109 0901 	add.w	r9, r9, #1
 8005ed0:	e7ee      	b.n	8005eb0 <_printf_float+0x2b4>
 8005ed2:	bf00      	nop
 8005ed4:	7fefffff 	.word	0x7fefffff
 8005ed8:	08008468 	.word	0x08008468
 8005edc:	0800846c 	.word	0x0800846c
 8005ee0:	08008470 	.word	0x08008470
 8005ee4:	08008474 	.word	0x08008474
 8005ee8:	08008478 	.word	0x08008478
 8005eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	bfa8      	it	ge
 8005ef4:	461a      	movge	r2, r3
 8005ef6:	2a00      	cmp	r2, #0
 8005ef8:	4691      	mov	r9, r2
 8005efa:	dc37      	bgt.n	8005f6c <_printf_float+0x370>
 8005efc:	f04f 0b00 	mov.w	fp, #0
 8005f00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f04:	f104 021a 	add.w	r2, r4, #26
 8005f08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f0a:	9305      	str	r3, [sp, #20]
 8005f0c:	eba3 0309 	sub.w	r3, r3, r9
 8005f10:	455b      	cmp	r3, fp
 8005f12:	dc33      	bgt.n	8005f7c <_printf_float+0x380>
 8005f14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	db3b      	blt.n	8005f94 <_printf_float+0x398>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	07da      	lsls	r2, r3, #31
 8005f20:	d438      	bmi.n	8005f94 <_printf_float+0x398>
 8005f22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005f26:	eba2 0903 	sub.w	r9, r2, r3
 8005f2a:	9b05      	ldr	r3, [sp, #20]
 8005f2c:	1ad2      	subs	r2, r2, r3
 8005f2e:	4591      	cmp	r9, r2
 8005f30:	bfa8      	it	ge
 8005f32:	4691      	movge	r9, r2
 8005f34:	f1b9 0f00 	cmp.w	r9, #0
 8005f38:	dc35      	bgt.n	8005fa6 <_printf_float+0x3aa>
 8005f3a:	f04f 0800 	mov.w	r8, #0
 8005f3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f42:	f104 0a1a 	add.w	sl, r4, #26
 8005f46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f4a:	1a9b      	subs	r3, r3, r2
 8005f4c:	eba3 0309 	sub.w	r3, r3, r9
 8005f50:	4543      	cmp	r3, r8
 8005f52:	f77f af79 	ble.w	8005e48 <_printf_float+0x24c>
 8005f56:	2301      	movs	r3, #1
 8005f58:	4652      	mov	r2, sl
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	47b8      	blx	r7
 8005f60:	3001      	adds	r0, #1
 8005f62:	f43f aeaa 	beq.w	8005cba <_printf_float+0xbe>
 8005f66:	f108 0801 	add.w	r8, r8, #1
 8005f6a:	e7ec      	b.n	8005f46 <_printf_float+0x34a>
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	4631      	mov	r1, r6
 8005f70:	4642      	mov	r2, r8
 8005f72:	4628      	mov	r0, r5
 8005f74:	47b8      	blx	r7
 8005f76:	3001      	adds	r0, #1
 8005f78:	d1c0      	bne.n	8005efc <_printf_float+0x300>
 8005f7a:	e69e      	b.n	8005cba <_printf_float+0xbe>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4628      	mov	r0, r5
 8005f82:	9205      	str	r2, [sp, #20]
 8005f84:	47b8      	blx	r7
 8005f86:	3001      	adds	r0, #1
 8005f88:	f43f ae97 	beq.w	8005cba <_printf_float+0xbe>
 8005f8c:	9a05      	ldr	r2, [sp, #20]
 8005f8e:	f10b 0b01 	add.w	fp, fp, #1
 8005f92:	e7b9      	b.n	8005f08 <_printf_float+0x30c>
 8005f94:	ee18 3a10 	vmov	r3, s16
 8005f98:	4652      	mov	r2, sl
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	47b8      	blx	r7
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	d1be      	bne.n	8005f22 <_printf_float+0x326>
 8005fa4:	e689      	b.n	8005cba <_printf_float+0xbe>
 8005fa6:	9a05      	ldr	r2, [sp, #20]
 8005fa8:	464b      	mov	r3, r9
 8005faa:	4442      	add	r2, r8
 8005fac:	4631      	mov	r1, r6
 8005fae:	4628      	mov	r0, r5
 8005fb0:	47b8      	blx	r7
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d1c1      	bne.n	8005f3a <_printf_float+0x33e>
 8005fb6:	e680      	b.n	8005cba <_printf_float+0xbe>
 8005fb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fba:	2a01      	cmp	r2, #1
 8005fbc:	dc01      	bgt.n	8005fc2 <_printf_float+0x3c6>
 8005fbe:	07db      	lsls	r3, r3, #31
 8005fc0:	d53a      	bpl.n	8006038 <_printf_float+0x43c>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	4642      	mov	r2, r8
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4628      	mov	r0, r5
 8005fca:	47b8      	blx	r7
 8005fcc:	3001      	adds	r0, #1
 8005fce:	f43f ae74 	beq.w	8005cba <_printf_float+0xbe>
 8005fd2:	ee18 3a10 	vmov	r3, s16
 8005fd6:	4652      	mov	r2, sl
 8005fd8:	4631      	mov	r1, r6
 8005fda:	4628      	mov	r0, r5
 8005fdc:	47b8      	blx	r7
 8005fde:	3001      	adds	r0, #1
 8005fe0:	f43f ae6b 	beq.w	8005cba <_printf_float+0xbe>
 8005fe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fe8:	2200      	movs	r2, #0
 8005fea:	2300      	movs	r3, #0
 8005fec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005ff0:	f7fa fd72 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ff4:	b9d8      	cbnz	r0, 800602e <_printf_float+0x432>
 8005ff6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005ffa:	f108 0201 	add.w	r2, r8, #1
 8005ffe:	4631      	mov	r1, r6
 8006000:	4628      	mov	r0, r5
 8006002:	47b8      	blx	r7
 8006004:	3001      	adds	r0, #1
 8006006:	d10e      	bne.n	8006026 <_printf_float+0x42a>
 8006008:	e657      	b.n	8005cba <_printf_float+0xbe>
 800600a:	2301      	movs	r3, #1
 800600c:	4652      	mov	r2, sl
 800600e:	4631      	mov	r1, r6
 8006010:	4628      	mov	r0, r5
 8006012:	47b8      	blx	r7
 8006014:	3001      	adds	r0, #1
 8006016:	f43f ae50 	beq.w	8005cba <_printf_float+0xbe>
 800601a:	f108 0801 	add.w	r8, r8, #1
 800601e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006020:	3b01      	subs	r3, #1
 8006022:	4543      	cmp	r3, r8
 8006024:	dcf1      	bgt.n	800600a <_printf_float+0x40e>
 8006026:	464b      	mov	r3, r9
 8006028:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800602c:	e6da      	b.n	8005de4 <_printf_float+0x1e8>
 800602e:	f04f 0800 	mov.w	r8, #0
 8006032:	f104 0a1a 	add.w	sl, r4, #26
 8006036:	e7f2      	b.n	800601e <_printf_float+0x422>
 8006038:	2301      	movs	r3, #1
 800603a:	4642      	mov	r2, r8
 800603c:	e7df      	b.n	8005ffe <_printf_float+0x402>
 800603e:	2301      	movs	r3, #1
 8006040:	464a      	mov	r2, r9
 8006042:	4631      	mov	r1, r6
 8006044:	4628      	mov	r0, r5
 8006046:	47b8      	blx	r7
 8006048:	3001      	adds	r0, #1
 800604a:	f43f ae36 	beq.w	8005cba <_printf_float+0xbe>
 800604e:	f108 0801 	add.w	r8, r8, #1
 8006052:	68e3      	ldr	r3, [r4, #12]
 8006054:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006056:	1a5b      	subs	r3, r3, r1
 8006058:	4543      	cmp	r3, r8
 800605a:	dcf0      	bgt.n	800603e <_printf_float+0x442>
 800605c:	e6f8      	b.n	8005e50 <_printf_float+0x254>
 800605e:	f04f 0800 	mov.w	r8, #0
 8006062:	f104 0919 	add.w	r9, r4, #25
 8006066:	e7f4      	b.n	8006052 <_printf_float+0x456>

08006068 <_printf_common>:
 8006068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800606c:	4616      	mov	r6, r2
 800606e:	4699      	mov	r9, r3
 8006070:	688a      	ldr	r2, [r1, #8]
 8006072:	690b      	ldr	r3, [r1, #16]
 8006074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006078:	4293      	cmp	r3, r2
 800607a:	bfb8      	it	lt
 800607c:	4613      	movlt	r3, r2
 800607e:	6033      	str	r3, [r6, #0]
 8006080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006084:	4607      	mov	r7, r0
 8006086:	460c      	mov	r4, r1
 8006088:	b10a      	cbz	r2, 800608e <_printf_common+0x26>
 800608a:	3301      	adds	r3, #1
 800608c:	6033      	str	r3, [r6, #0]
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	0699      	lsls	r1, r3, #26
 8006092:	bf42      	ittt	mi
 8006094:	6833      	ldrmi	r3, [r6, #0]
 8006096:	3302      	addmi	r3, #2
 8006098:	6033      	strmi	r3, [r6, #0]
 800609a:	6825      	ldr	r5, [r4, #0]
 800609c:	f015 0506 	ands.w	r5, r5, #6
 80060a0:	d106      	bne.n	80060b0 <_printf_common+0x48>
 80060a2:	f104 0a19 	add.w	sl, r4, #25
 80060a6:	68e3      	ldr	r3, [r4, #12]
 80060a8:	6832      	ldr	r2, [r6, #0]
 80060aa:	1a9b      	subs	r3, r3, r2
 80060ac:	42ab      	cmp	r3, r5
 80060ae:	dc26      	bgt.n	80060fe <_printf_common+0x96>
 80060b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060b4:	1e13      	subs	r3, r2, #0
 80060b6:	6822      	ldr	r2, [r4, #0]
 80060b8:	bf18      	it	ne
 80060ba:	2301      	movne	r3, #1
 80060bc:	0692      	lsls	r2, r2, #26
 80060be:	d42b      	bmi.n	8006118 <_printf_common+0xb0>
 80060c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060c4:	4649      	mov	r1, r9
 80060c6:	4638      	mov	r0, r7
 80060c8:	47c0      	blx	r8
 80060ca:	3001      	adds	r0, #1
 80060cc:	d01e      	beq.n	800610c <_printf_common+0xa4>
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	6922      	ldr	r2, [r4, #16]
 80060d2:	f003 0306 	and.w	r3, r3, #6
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	bf02      	ittt	eq
 80060da:	68e5      	ldreq	r5, [r4, #12]
 80060dc:	6833      	ldreq	r3, [r6, #0]
 80060de:	1aed      	subeq	r5, r5, r3
 80060e0:	68a3      	ldr	r3, [r4, #8]
 80060e2:	bf0c      	ite	eq
 80060e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060e8:	2500      	movne	r5, #0
 80060ea:	4293      	cmp	r3, r2
 80060ec:	bfc4      	itt	gt
 80060ee:	1a9b      	subgt	r3, r3, r2
 80060f0:	18ed      	addgt	r5, r5, r3
 80060f2:	2600      	movs	r6, #0
 80060f4:	341a      	adds	r4, #26
 80060f6:	42b5      	cmp	r5, r6
 80060f8:	d11a      	bne.n	8006130 <_printf_common+0xc8>
 80060fa:	2000      	movs	r0, #0
 80060fc:	e008      	b.n	8006110 <_printf_common+0xa8>
 80060fe:	2301      	movs	r3, #1
 8006100:	4652      	mov	r2, sl
 8006102:	4649      	mov	r1, r9
 8006104:	4638      	mov	r0, r7
 8006106:	47c0      	blx	r8
 8006108:	3001      	adds	r0, #1
 800610a:	d103      	bne.n	8006114 <_printf_common+0xac>
 800610c:	f04f 30ff 	mov.w	r0, #4294967295
 8006110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006114:	3501      	adds	r5, #1
 8006116:	e7c6      	b.n	80060a6 <_printf_common+0x3e>
 8006118:	18e1      	adds	r1, r4, r3
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	2030      	movs	r0, #48	; 0x30
 800611e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006122:	4422      	add	r2, r4
 8006124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800612c:	3302      	adds	r3, #2
 800612e:	e7c7      	b.n	80060c0 <_printf_common+0x58>
 8006130:	2301      	movs	r3, #1
 8006132:	4622      	mov	r2, r4
 8006134:	4649      	mov	r1, r9
 8006136:	4638      	mov	r0, r7
 8006138:	47c0      	blx	r8
 800613a:	3001      	adds	r0, #1
 800613c:	d0e6      	beq.n	800610c <_printf_common+0xa4>
 800613e:	3601      	adds	r6, #1
 8006140:	e7d9      	b.n	80060f6 <_printf_common+0x8e>
	...

08006144 <_printf_i>:
 8006144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006148:	7e0f      	ldrb	r7, [r1, #24]
 800614a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800614c:	2f78      	cmp	r7, #120	; 0x78
 800614e:	4691      	mov	r9, r2
 8006150:	4680      	mov	r8, r0
 8006152:	460c      	mov	r4, r1
 8006154:	469a      	mov	sl, r3
 8006156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800615a:	d807      	bhi.n	800616c <_printf_i+0x28>
 800615c:	2f62      	cmp	r7, #98	; 0x62
 800615e:	d80a      	bhi.n	8006176 <_printf_i+0x32>
 8006160:	2f00      	cmp	r7, #0
 8006162:	f000 80d4 	beq.w	800630e <_printf_i+0x1ca>
 8006166:	2f58      	cmp	r7, #88	; 0x58
 8006168:	f000 80c0 	beq.w	80062ec <_printf_i+0x1a8>
 800616c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006174:	e03a      	b.n	80061ec <_printf_i+0xa8>
 8006176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800617a:	2b15      	cmp	r3, #21
 800617c:	d8f6      	bhi.n	800616c <_printf_i+0x28>
 800617e:	a101      	add	r1, pc, #4	; (adr r1, 8006184 <_printf_i+0x40>)
 8006180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006184:	080061dd 	.word	0x080061dd
 8006188:	080061f1 	.word	0x080061f1
 800618c:	0800616d 	.word	0x0800616d
 8006190:	0800616d 	.word	0x0800616d
 8006194:	0800616d 	.word	0x0800616d
 8006198:	0800616d 	.word	0x0800616d
 800619c:	080061f1 	.word	0x080061f1
 80061a0:	0800616d 	.word	0x0800616d
 80061a4:	0800616d 	.word	0x0800616d
 80061a8:	0800616d 	.word	0x0800616d
 80061ac:	0800616d 	.word	0x0800616d
 80061b0:	080062f5 	.word	0x080062f5
 80061b4:	0800621d 	.word	0x0800621d
 80061b8:	080062af 	.word	0x080062af
 80061bc:	0800616d 	.word	0x0800616d
 80061c0:	0800616d 	.word	0x0800616d
 80061c4:	08006317 	.word	0x08006317
 80061c8:	0800616d 	.word	0x0800616d
 80061cc:	0800621d 	.word	0x0800621d
 80061d0:	0800616d 	.word	0x0800616d
 80061d4:	0800616d 	.word	0x0800616d
 80061d8:	080062b7 	.word	0x080062b7
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	1d1a      	adds	r2, r3, #4
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	602a      	str	r2, [r5, #0]
 80061e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061ec:	2301      	movs	r3, #1
 80061ee:	e09f      	b.n	8006330 <_printf_i+0x1ec>
 80061f0:	6820      	ldr	r0, [r4, #0]
 80061f2:	682b      	ldr	r3, [r5, #0]
 80061f4:	0607      	lsls	r7, r0, #24
 80061f6:	f103 0104 	add.w	r1, r3, #4
 80061fa:	6029      	str	r1, [r5, #0]
 80061fc:	d501      	bpl.n	8006202 <_printf_i+0xbe>
 80061fe:	681e      	ldr	r6, [r3, #0]
 8006200:	e003      	b.n	800620a <_printf_i+0xc6>
 8006202:	0646      	lsls	r6, r0, #25
 8006204:	d5fb      	bpl.n	80061fe <_printf_i+0xba>
 8006206:	f9b3 6000 	ldrsh.w	r6, [r3]
 800620a:	2e00      	cmp	r6, #0
 800620c:	da03      	bge.n	8006216 <_printf_i+0xd2>
 800620e:	232d      	movs	r3, #45	; 0x2d
 8006210:	4276      	negs	r6, r6
 8006212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006216:	485a      	ldr	r0, [pc, #360]	; (8006380 <_printf_i+0x23c>)
 8006218:	230a      	movs	r3, #10
 800621a:	e012      	b.n	8006242 <_printf_i+0xfe>
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	6820      	ldr	r0, [r4, #0]
 8006220:	1d19      	adds	r1, r3, #4
 8006222:	6029      	str	r1, [r5, #0]
 8006224:	0605      	lsls	r5, r0, #24
 8006226:	d501      	bpl.n	800622c <_printf_i+0xe8>
 8006228:	681e      	ldr	r6, [r3, #0]
 800622a:	e002      	b.n	8006232 <_printf_i+0xee>
 800622c:	0641      	lsls	r1, r0, #25
 800622e:	d5fb      	bpl.n	8006228 <_printf_i+0xe4>
 8006230:	881e      	ldrh	r6, [r3, #0]
 8006232:	4853      	ldr	r0, [pc, #332]	; (8006380 <_printf_i+0x23c>)
 8006234:	2f6f      	cmp	r7, #111	; 0x6f
 8006236:	bf0c      	ite	eq
 8006238:	2308      	moveq	r3, #8
 800623a:	230a      	movne	r3, #10
 800623c:	2100      	movs	r1, #0
 800623e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006242:	6865      	ldr	r5, [r4, #4]
 8006244:	60a5      	str	r5, [r4, #8]
 8006246:	2d00      	cmp	r5, #0
 8006248:	bfa2      	ittt	ge
 800624a:	6821      	ldrge	r1, [r4, #0]
 800624c:	f021 0104 	bicge.w	r1, r1, #4
 8006250:	6021      	strge	r1, [r4, #0]
 8006252:	b90e      	cbnz	r6, 8006258 <_printf_i+0x114>
 8006254:	2d00      	cmp	r5, #0
 8006256:	d04b      	beq.n	80062f0 <_printf_i+0x1ac>
 8006258:	4615      	mov	r5, r2
 800625a:	fbb6 f1f3 	udiv	r1, r6, r3
 800625e:	fb03 6711 	mls	r7, r3, r1, r6
 8006262:	5dc7      	ldrb	r7, [r0, r7]
 8006264:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006268:	4637      	mov	r7, r6
 800626a:	42bb      	cmp	r3, r7
 800626c:	460e      	mov	r6, r1
 800626e:	d9f4      	bls.n	800625a <_printf_i+0x116>
 8006270:	2b08      	cmp	r3, #8
 8006272:	d10b      	bne.n	800628c <_printf_i+0x148>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	07de      	lsls	r6, r3, #31
 8006278:	d508      	bpl.n	800628c <_printf_i+0x148>
 800627a:	6923      	ldr	r3, [r4, #16]
 800627c:	6861      	ldr	r1, [r4, #4]
 800627e:	4299      	cmp	r1, r3
 8006280:	bfde      	ittt	le
 8006282:	2330      	movle	r3, #48	; 0x30
 8006284:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006288:	f105 35ff 	addle.w	r5, r5, #4294967295
 800628c:	1b52      	subs	r2, r2, r5
 800628e:	6122      	str	r2, [r4, #16]
 8006290:	f8cd a000 	str.w	sl, [sp]
 8006294:	464b      	mov	r3, r9
 8006296:	aa03      	add	r2, sp, #12
 8006298:	4621      	mov	r1, r4
 800629a:	4640      	mov	r0, r8
 800629c:	f7ff fee4 	bl	8006068 <_printf_common>
 80062a0:	3001      	adds	r0, #1
 80062a2:	d14a      	bne.n	800633a <_printf_i+0x1f6>
 80062a4:	f04f 30ff 	mov.w	r0, #4294967295
 80062a8:	b004      	add	sp, #16
 80062aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	f043 0320 	orr.w	r3, r3, #32
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	4833      	ldr	r0, [pc, #204]	; (8006384 <_printf_i+0x240>)
 80062b8:	2778      	movs	r7, #120	; 0x78
 80062ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	6829      	ldr	r1, [r5, #0]
 80062c2:	061f      	lsls	r7, r3, #24
 80062c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80062c8:	d402      	bmi.n	80062d0 <_printf_i+0x18c>
 80062ca:	065f      	lsls	r7, r3, #25
 80062cc:	bf48      	it	mi
 80062ce:	b2b6      	uxthmi	r6, r6
 80062d0:	07df      	lsls	r7, r3, #31
 80062d2:	bf48      	it	mi
 80062d4:	f043 0320 	orrmi.w	r3, r3, #32
 80062d8:	6029      	str	r1, [r5, #0]
 80062da:	bf48      	it	mi
 80062dc:	6023      	strmi	r3, [r4, #0]
 80062de:	b91e      	cbnz	r6, 80062e8 <_printf_i+0x1a4>
 80062e0:	6823      	ldr	r3, [r4, #0]
 80062e2:	f023 0320 	bic.w	r3, r3, #32
 80062e6:	6023      	str	r3, [r4, #0]
 80062e8:	2310      	movs	r3, #16
 80062ea:	e7a7      	b.n	800623c <_printf_i+0xf8>
 80062ec:	4824      	ldr	r0, [pc, #144]	; (8006380 <_printf_i+0x23c>)
 80062ee:	e7e4      	b.n	80062ba <_printf_i+0x176>
 80062f0:	4615      	mov	r5, r2
 80062f2:	e7bd      	b.n	8006270 <_printf_i+0x12c>
 80062f4:	682b      	ldr	r3, [r5, #0]
 80062f6:	6826      	ldr	r6, [r4, #0]
 80062f8:	6961      	ldr	r1, [r4, #20]
 80062fa:	1d18      	adds	r0, r3, #4
 80062fc:	6028      	str	r0, [r5, #0]
 80062fe:	0635      	lsls	r5, r6, #24
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	d501      	bpl.n	8006308 <_printf_i+0x1c4>
 8006304:	6019      	str	r1, [r3, #0]
 8006306:	e002      	b.n	800630e <_printf_i+0x1ca>
 8006308:	0670      	lsls	r0, r6, #25
 800630a:	d5fb      	bpl.n	8006304 <_printf_i+0x1c0>
 800630c:	8019      	strh	r1, [r3, #0]
 800630e:	2300      	movs	r3, #0
 8006310:	6123      	str	r3, [r4, #16]
 8006312:	4615      	mov	r5, r2
 8006314:	e7bc      	b.n	8006290 <_printf_i+0x14c>
 8006316:	682b      	ldr	r3, [r5, #0]
 8006318:	1d1a      	adds	r2, r3, #4
 800631a:	602a      	str	r2, [r5, #0]
 800631c:	681d      	ldr	r5, [r3, #0]
 800631e:	6862      	ldr	r2, [r4, #4]
 8006320:	2100      	movs	r1, #0
 8006322:	4628      	mov	r0, r5
 8006324:	f7f9 ff5c 	bl	80001e0 <memchr>
 8006328:	b108      	cbz	r0, 800632e <_printf_i+0x1ea>
 800632a:	1b40      	subs	r0, r0, r5
 800632c:	6060      	str	r0, [r4, #4]
 800632e:	6863      	ldr	r3, [r4, #4]
 8006330:	6123      	str	r3, [r4, #16]
 8006332:	2300      	movs	r3, #0
 8006334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006338:	e7aa      	b.n	8006290 <_printf_i+0x14c>
 800633a:	6923      	ldr	r3, [r4, #16]
 800633c:	462a      	mov	r2, r5
 800633e:	4649      	mov	r1, r9
 8006340:	4640      	mov	r0, r8
 8006342:	47d0      	blx	sl
 8006344:	3001      	adds	r0, #1
 8006346:	d0ad      	beq.n	80062a4 <_printf_i+0x160>
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	079b      	lsls	r3, r3, #30
 800634c:	d413      	bmi.n	8006376 <_printf_i+0x232>
 800634e:	68e0      	ldr	r0, [r4, #12]
 8006350:	9b03      	ldr	r3, [sp, #12]
 8006352:	4298      	cmp	r0, r3
 8006354:	bfb8      	it	lt
 8006356:	4618      	movlt	r0, r3
 8006358:	e7a6      	b.n	80062a8 <_printf_i+0x164>
 800635a:	2301      	movs	r3, #1
 800635c:	4632      	mov	r2, r6
 800635e:	4649      	mov	r1, r9
 8006360:	4640      	mov	r0, r8
 8006362:	47d0      	blx	sl
 8006364:	3001      	adds	r0, #1
 8006366:	d09d      	beq.n	80062a4 <_printf_i+0x160>
 8006368:	3501      	adds	r5, #1
 800636a:	68e3      	ldr	r3, [r4, #12]
 800636c:	9903      	ldr	r1, [sp, #12]
 800636e:	1a5b      	subs	r3, r3, r1
 8006370:	42ab      	cmp	r3, r5
 8006372:	dcf2      	bgt.n	800635a <_printf_i+0x216>
 8006374:	e7eb      	b.n	800634e <_printf_i+0x20a>
 8006376:	2500      	movs	r5, #0
 8006378:	f104 0619 	add.w	r6, r4, #25
 800637c:	e7f5      	b.n	800636a <_printf_i+0x226>
 800637e:	bf00      	nop
 8006380:	0800847a 	.word	0x0800847a
 8006384:	0800848b 	.word	0x0800848b

08006388 <std>:
 8006388:	2300      	movs	r3, #0
 800638a:	b510      	push	{r4, lr}
 800638c:	4604      	mov	r4, r0
 800638e:	e9c0 3300 	strd	r3, r3, [r0]
 8006392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006396:	6083      	str	r3, [r0, #8]
 8006398:	8181      	strh	r1, [r0, #12]
 800639a:	6643      	str	r3, [r0, #100]	; 0x64
 800639c:	81c2      	strh	r2, [r0, #14]
 800639e:	6183      	str	r3, [r0, #24]
 80063a0:	4619      	mov	r1, r3
 80063a2:	2208      	movs	r2, #8
 80063a4:	305c      	adds	r0, #92	; 0x5c
 80063a6:	f000 f8f4 	bl	8006592 <memset>
 80063aa:	4b0d      	ldr	r3, [pc, #52]	; (80063e0 <std+0x58>)
 80063ac:	6263      	str	r3, [r4, #36]	; 0x24
 80063ae:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <std+0x5c>)
 80063b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80063b2:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <std+0x60>)
 80063b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063b6:	4b0d      	ldr	r3, [pc, #52]	; (80063ec <std+0x64>)
 80063b8:	6323      	str	r3, [r4, #48]	; 0x30
 80063ba:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <std+0x68>)
 80063bc:	6224      	str	r4, [r4, #32]
 80063be:	429c      	cmp	r4, r3
 80063c0:	d006      	beq.n	80063d0 <std+0x48>
 80063c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80063c6:	4294      	cmp	r4, r2
 80063c8:	d002      	beq.n	80063d0 <std+0x48>
 80063ca:	33d0      	adds	r3, #208	; 0xd0
 80063cc:	429c      	cmp	r4, r3
 80063ce:	d105      	bne.n	80063dc <std+0x54>
 80063d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80063d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d8:	f000 b958 	b.w	800668c <__retarget_lock_init_recursive>
 80063dc:	bd10      	pop	{r4, pc}
 80063de:	bf00      	nop
 80063e0:	0800650d 	.word	0x0800650d
 80063e4:	0800652f 	.word	0x0800652f
 80063e8:	08006567 	.word	0x08006567
 80063ec:	0800658b 	.word	0x0800658b
 80063f0:	2001060c 	.word	0x2001060c

080063f4 <stdio_exit_handler>:
 80063f4:	4a02      	ldr	r2, [pc, #8]	; (8006400 <stdio_exit_handler+0xc>)
 80063f6:	4903      	ldr	r1, [pc, #12]	; (8006404 <stdio_exit_handler+0x10>)
 80063f8:	4803      	ldr	r0, [pc, #12]	; (8006408 <stdio_exit_handler+0x14>)
 80063fa:	f000 b869 	b.w	80064d0 <_fwalk_sglue>
 80063fe:	bf00      	nop
 8006400:	200000a4 	.word	0x200000a4
 8006404:	08007d91 	.word	0x08007d91
 8006408:	200000b0 	.word	0x200000b0

0800640c <cleanup_stdio>:
 800640c:	6841      	ldr	r1, [r0, #4]
 800640e:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <cleanup_stdio+0x34>)
 8006410:	4299      	cmp	r1, r3
 8006412:	b510      	push	{r4, lr}
 8006414:	4604      	mov	r4, r0
 8006416:	d001      	beq.n	800641c <cleanup_stdio+0x10>
 8006418:	f001 fcba 	bl	8007d90 <_fflush_r>
 800641c:	68a1      	ldr	r1, [r4, #8]
 800641e:	4b09      	ldr	r3, [pc, #36]	; (8006444 <cleanup_stdio+0x38>)
 8006420:	4299      	cmp	r1, r3
 8006422:	d002      	beq.n	800642a <cleanup_stdio+0x1e>
 8006424:	4620      	mov	r0, r4
 8006426:	f001 fcb3 	bl	8007d90 <_fflush_r>
 800642a:	68e1      	ldr	r1, [r4, #12]
 800642c:	4b06      	ldr	r3, [pc, #24]	; (8006448 <cleanup_stdio+0x3c>)
 800642e:	4299      	cmp	r1, r3
 8006430:	d004      	beq.n	800643c <cleanup_stdio+0x30>
 8006432:	4620      	mov	r0, r4
 8006434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006438:	f001 bcaa 	b.w	8007d90 <_fflush_r>
 800643c:	bd10      	pop	{r4, pc}
 800643e:	bf00      	nop
 8006440:	2001060c 	.word	0x2001060c
 8006444:	20010674 	.word	0x20010674
 8006448:	200106dc 	.word	0x200106dc

0800644c <global_stdio_init.part.0>:
 800644c:	b510      	push	{r4, lr}
 800644e:	4b0b      	ldr	r3, [pc, #44]	; (800647c <global_stdio_init.part.0+0x30>)
 8006450:	4c0b      	ldr	r4, [pc, #44]	; (8006480 <global_stdio_init.part.0+0x34>)
 8006452:	4a0c      	ldr	r2, [pc, #48]	; (8006484 <global_stdio_init.part.0+0x38>)
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	4620      	mov	r0, r4
 8006458:	2200      	movs	r2, #0
 800645a:	2104      	movs	r1, #4
 800645c:	f7ff ff94 	bl	8006388 <std>
 8006460:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006464:	2201      	movs	r2, #1
 8006466:	2109      	movs	r1, #9
 8006468:	f7ff ff8e 	bl	8006388 <std>
 800646c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006470:	2202      	movs	r2, #2
 8006472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006476:	2112      	movs	r1, #18
 8006478:	f7ff bf86 	b.w	8006388 <std>
 800647c:	20010744 	.word	0x20010744
 8006480:	2001060c 	.word	0x2001060c
 8006484:	080063f5 	.word	0x080063f5

08006488 <__sfp_lock_acquire>:
 8006488:	4801      	ldr	r0, [pc, #4]	; (8006490 <__sfp_lock_acquire+0x8>)
 800648a:	f000 b900 	b.w	800668e <__retarget_lock_acquire_recursive>
 800648e:	bf00      	nop
 8006490:	2001074d 	.word	0x2001074d

08006494 <__sfp_lock_release>:
 8006494:	4801      	ldr	r0, [pc, #4]	; (800649c <__sfp_lock_release+0x8>)
 8006496:	f000 b8fb 	b.w	8006690 <__retarget_lock_release_recursive>
 800649a:	bf00      	nop
 800649c:	2001074d 	.word	0x2001074d

080064a0 <__sinit>:
 80064a0:	b510      	push	{r4, lr}
 80064a2:	4604      	mov	r4, r0
 80064a4:	f7ff fff0 	bl	8006488 <__sfp_lock_acquire>
 80064a8:	6a23      	ldr	r3, [r4, #32]
 80064aa:	b11b      	cbz	r3, 80064b4 <__sinit+0x14>
 80064ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b0:	f7ff bff0 	b.w	8006494 <__sfp_lock_release>
 80064b4:	4b04      	ldr	r3, [pc, #16]	; (80064c8 <__sinit+0x28>)
 80064b6:	6223      	str	r3, [r4, #32]
 80064b8:	4b04      	ldr	r3, [pc, #16]	; (80064cc <__sinit+0x2c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1f5      	bne.n	80064ac <__sinit+0xc>
 80064c0:	f7ff ffc4 	bl	800644c <global_stdio_init.part.0>
 80064c4:	e7f2      	b.n	80064ac <__sinit+0xc>
 80064c6:	bf00      	nop
 80064c8:	0800640d 	.word	0x0800640d
 80064cc:	20010744 	.word	0x20010744

080064d0 <_fwalk_sglue>:
 80064d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d4:	4607      	mov	r7, r0
 80064d6:	4688      	mov	r8, r1
 80064d8:	4614      	mov	r4, r2
 80064da:	2600      	movs	r6, #0
 80064dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064e0:	f1b9 0901 	subs.w	r9, r9, #1
 80064e4:	d505      	bpl.n	80064f2 <_fwalk_sglue+0x22>
 80064e6:	6824      	ldr	r4, [r4, #0]
 80064e8:	2c00      	cmp	r4, #0
 80064ea:	d1f7      	bne.n	80064dc <_fwalk_sglue+0xc>
 80064ec:	4630      	mov	r0, r6
 80064ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f2:	89ab      	ldrh	r3, [r5, #12]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d907      	bls.n	8006508 <_fwalk_sglue+0x38>
 80064f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064fc:	3301      	adds	r3, #1
 80064fe:	d003      	beq.n	8006508 <_fwalk_sglue+0x38>
 8006500:	4629      	mov	r1, r5
 8006502:	4638      	mov	r0, r7
 8006504:	47c0      	blx	r8
 8006506:	4306      	orrs	r6, r0
 8006508:	3568      	adds	r5, #104	; 0x68
 800650a:	e7e9      	b.n	80064e0 <_fwalk_sglue+0x10>

0800650c <__sread>:
 800650c:	b510      	push	{r4, lr}
 800650e:	460c      	mov	r4, r1
 8006510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006514:	f000 f86c 	bl	80065f0 <_read_r>
 8006518:	2800      	cmp	r0, #0
 800651a:	bfab      	itete	ge
 800651c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800651e:	89a3      	ldrhlt	r3, [r4, #12]
 8006520:	181b      	addge	r3, r3, r0
 8006522:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006526:	bfac      	ite	ge
 8006528:	6563      	strge	r3, [r4, #84]	; 0x54
 800652a:	81a3      	strhlt	r3, [r4, #12]
 800652c:	bd10      	pop	{r4, pc}

0800652e <__swrite>:
 800652e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006532:	461f      	mov	r7, r3
 8006534:	898b      	ldrh	r3, [r1, #12]
 8006536:	05db      	lsls	r3, r3, #23
 8006538:	4605      	mov	r5, r0
 800653a:	460c      	mov	r4, r1
 800653c:	4616      	mov	r6, r2
 800653e:	d505      	bpl.n	800654c <__swrite+0x1e>
 8006540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006544:	2302      	movs	r3, #2
 8006546:	2200      	movs	r2, #0
 8006548:	f000 f840 	bl	80065cc <_lseek_r>
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006556:	81a3      	strh	r3, [r4, #12]
 8006558:	4632      	mov	r2, r6
 800655a:	463b      	mov	r3, r7
 800655c:	4628      	mov	r0, r5
 800655e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006562:	f000 b857 	b.w	8006614 <_write_r>

08006566 <__sseek>:
 8006566:	b510      	push	{r4, lr}
 8006568:	460c      	mov	r4, r1
 800656a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656e:	f000 f82d 	bl	80065cc <_lseek_r>
 8006572:	1c43      	adds	r3, r0, #1
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	bf15      	itete	ne
 8006578:	6560      	strne	r0, [r4, #84]	; 0x54
 800657a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800657e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006582:	81a3      	strheq	r3, [r4, #12]
 8006584:	bf18      	it	ne
 8006586:	81a3      	strhne	r3, [r4, #12]
 8006588:	bd10      	pop	{r4, pc}

0800658a <__sclose>:
 800658a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800658e:	f000 b80d 	b.w	80065ac <_close_r>

08006592 <memset>:
 8006592:	4402      	add	r2, r0
 8006594:	4603      	mov	r3, r0
 8006596:	4293      	cmp	r3, r2
 8006598:	d100      	bne.n	800659c <memset+0xa>
 800659a:	4770      	bx	lr
 800659c:	f803 1b01 	strb.w	r1, [r3], #1
 80065a0:	e7f9      	b.n	8006596 <memset+0x4>
	...

080065a4 <_localeconv_r>:
 80065a4:	4800      	ldr	r0, [pc, #0]	; (80065a8 <_localeconv_r+0x4>)
 80065a6:	4770      	bx	lr
 80065a8:	200001f0 	.word	0x200001f0

080065ac <_close_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4d06      	ldr	r5, [pc, #24]	; (80065c8 <_close_r+0x1c>)
 80065b0:	2300      	movs	r3, #0
 80065b2:	4604      	mov	r4, r0
 80065b4:	4608      	mov	r0, r1
 80065b6:	602b      	str	r3, [r5, #0]
 80065b8:	f7fb fb4f 	bl	8001c5a <_close>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_close_r+0x1a>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_close_r+0x1a>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	20010748 	.word	0x20010748

080065cc <_lseek_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4d07      	ldr	r5, [pc, #28]	; (80065ec <_lseek_r+0x20>)
 80065d0:	4604      	mov	r4, r0
 80065d2:	4608      	mov	r0, r1
 80065d4:	4611      	mov	r1, r2
 80065d6:	2200      	movs	r2, #0
 80065d8:	602a      	str	r2, [r5, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	f7fb fb64 	bl	8001ca8 <_lseek>
 80065e0:	1c43      	adds	r3, r0, #1
 80065e2:	d102      	bne.n	80065ea <_lseek_r+0x1e>
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	b103      	cbz	r3, 80065ea <_lseek_r+0x1e>
 80065e8:	6023      	str	r3, [r4, #0]
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	20010748 	.word	0x20010748

080065f0 <_read_r>:
 80065f0:	b538      	push	{r3, r4, r5, lr}
 80065f2:	4d07      	ldr	r5, [pc, #28]	; (8006610 <_read_r+0x20>)
 80065f4:	4604      	mov	r4, r0
 80065f6:	4608      	mov	r0, r1
 80065f8:	4611      	mov	r1, r2
 80065fa:	2200      	movs	r2, #0
 80065fc:	602a      	str	r2, [r5, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	f7fb faf2 	bl	8001be8 <_read>
 8006604:	1c43      	adds	r3, r0, #1
 8006606:	d102      	bne.n	800660e <_read_r+0x1e>
 8006608:	682b      	ldr	r3, [r5, #0]
 800660a:	b103      	cbz	r3, 800660e <_read_r+0x1e>
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	bd38      	pop	{r3, r4, r5, pc}
 8006610:	20010748 	.word	0x20010748

08006614 <_write_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	4d07      	ldr	r5, [pc, #28]	; (8006634 <_write_r+0x20>)
 8006618:	4604      	mov	r4, r0
 800661a:	4608      	mov	r0, r1
 800661c:	4611      	mov	r1, r2
 800661e:	2200      	movs	r2, #0
 8006620:	602a      	str	r2, [r5, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	f7fb fafd 	bl	8001c22 <_write>
 8006628:	1c43      	adds	r3, r0, #1
 800662a:	d102      	bne.n	8006632 <_write_r+0x1e>
 800662c:	682b      	ldr	r3, [r5, #0]
 800662e:	b103      	cbz	r3, 8006632 <_write_r+0x1e>
 8006630:	6023      	str	r3, [r4, #0]
 8006632:	bd38      	pop	{r3, r4, r5, pc}
 8006634:	20010748 	.word	0x20010748

08006638 <__errno>:
 8006638:	4b01      	ldr	r3, [pc, #4]	; (8006640 <__errno+0x8>)
 800663a:	6818      	ldr	r0, [r3, #0]
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	200000fc 	.word	0x200000fc

08006644 <__libc_init_array>:
 8006644:	b570      	push	{r4, r5, r6, lr}
 8006646:	4d0d      	ldr	r5, [pc, #52]	; (800667c <__libc_init_array+0x38>)
 8006648:	4c0d      	ldr	r4, [pc, #52]	; (8006680 <__libc_init_array+0x3c>)
 800664a:	1b64      	subs	r4, r4, r5
 800664c:	10a4      	asrs	r4, r4, #2
 800664e:	2600      	movs	r6, #0
 8006650:	42a6      	cmp	r6, r4
 8006652:	d109      	bne.n	8006668 <__libc_init_array+0x24>
 8006654:	4d0b      	ldr	r5, [pc, #44]	; (8006684 <__libc_init_array+0x40>)
 8006656:	4c0c      	ldr	r4, [pc, #48]	; (8006688 <__libc_init_array+0x44>)
 8006658:	f001 feee 	bl	8008438 <_init>
 800665c:	1b64      	subs	r4, r4, r5
 800665e:	10a4      	asrs	r4, r4, #2
 8006660:	2600      	movs	r6, #0
 8006662:	42a6      	cmp	r6, r4
 8006664:	d105      	bne.n	8006672 <__libc_init_array+0x2e>
 8006666:	bd70      	pop	{r4, r5, r6, pc}
 8006668:	f855 3b04 	ldr.w	r3, [r5], #4
 800666c:	4798      	blx	r3
 800666e:	3601      	adds	r6, #1
 8006670:	e7ee      	b.n	8006650 <__libc_init_array+0xc>
 8006672:	f855 3b04 	ldr.w	r3, [r5], #4
 8006676:	4798      	blx	r3
 8006678:	3601      	adds	r6, #1
 800667a:	e7f2      	b.n	8006662 <__libc_init_array+0x1e>
 800667c:	080087e4 	.word	0x080087e4
 8006680:	080087e4 	.word	0x080087e4
 8006684:	080087e4 	.word	0x080087e4
 8006688:	080087e8 	.word	0x080087e8

0800668c <__retarget_lock_init_recursive>:
 800668c:	4770      	bx	lr

0800668e <__retarget_lock_acquire_recursive>:
 800668e:	4770      	bx	lr

08006690 <__retarget_lock_release_recursive>:
 8006690:	4770      	bx	lr

08006692 <quorem>:
 8006692:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006696:	6903      	ldr	r3, [r0, #16]
 8006698:	690c      	ldr	r4, [r1, #16]
 800669a:	42a3      	cmp	r3, r4
 800669c:	4607      	mov	r7, r0
 800669e:	db7e      	blt.n	800679e <quorem+0x10c>
 80066a0:	3c01      	subs	r4, #1
 80066a2:	f101 0814 	add.w	r8, r1, #20
 80066a6:	f100 0514 	add.w	r5, r0, #20
 80066aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066ae:	9301      	str	r3, [sp, #4]
 80066b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066b8:	3301      	adds	r3, #1
 80066ba:	429a      	cmp	r2, r3
 80066bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80066c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80066c8:	d331      	bcc.n	800672e <quorem+0x9c>
 80066ca:	f04f 0e00 	mov.w	lr, #0
 80066ce:	4640      	mov	r0, r8
 80066d0:	46ac      	mov	ip, r5
 80066d2:	46f2      	mov	sl, lr
 80066d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80066d8:	b293      	uxth	r3, r2
 80066da:	fb06 e303 	mla	r3, r6, r3, lr
 80066de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066e2:	0c1a      	lsrs	r2, r3, #16
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	ebaa 0303 	sub.w	r3, sl, r3
 80066ea:	f8dc a000 	ldr.w	sl, [ip]
 80066ee:	fa13 f38a 	uxtah	r3, r3, sl
 80066f2:	fb06 220e 	mla	r2, r6, lr, r2
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	9b00      	ldr	r3, [sp, #0]
 80066fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066fe:	b292      	uxth	r2, r2
 8006700:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006704:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006708:	f8bd 3000 	ldrh.w	r3, [sp]
 800670c:	4581      	cmp	r9, r0
 800670e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006712:	f84c 3b04 	str.w	r3, [ip], #4
 8006716:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800671a:	d2db      	bcs.n	80066d4 <quorem+0x42>
 800671c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006720:	b92b      	cbnz	r3, 800672e <quorem+0x9c>
 8006722:	9b01      	ldr	r3, [sp, #4]
 8006724:	3b04      	subs	r3, #4
 8006726:	429d      	cmp	r5, r3
 8006728:	461a      	mov	r2, r3
 800672a:	d32c      	bcc.n	8006786 <quorem+0xf4>
 800672c:	613c      	str	r4, [r7, #16]
 800672e:	4638      	mov	r0, r7
 8006730:	f001 f9a8 	bl	8007a84 <__mcmp>
 8006734:	2800      	cmp	r0, #0
 8006736:	db22      	blt.n	800677e <quorem+0xec>
 8006738:	3601      	adds	r6, #1
 800673a:	4629      	mov	r1, r5
 800673c:	2000      	movs	r0, #0
 800673e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006742:	f8d1 c000 	ldr.w	ip, [r1]
 8006746:	b293      	uxth	r3, r2
 8006748:	1ac3      	subs	r3, r0, r3
 800674a:	0c12      	lsrs	r2, r2, #16
 800674c:	fa13 f38c 	uxtah	r3, r3, ip
 8006750:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006754:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006758:	b29b      	uxth	r3, r3
 800675a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800675e:	45c1      	cmp	r9, r8
 8006760:	f841 3b04 	str.w	r3, [r1], #4
 8006764:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006768:	d2e9      	bcs.n	800673e <quorem+0xac>
 800676a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800676e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006772:	b922      	cbnz	r2, 800677e <quorem+0xec>
 8006774:	3b04      	subs	r3, #4
 8006776:	429d      	cmp	r5, r3
 8006778:	461a      	mov	r2, r3
 800677a:	d30a      	bcc.n	8006792 <quorem+0x100>
 800677c:	613c      	str	r4, [r7, #16]
 800677e:	4630      	mov	r0, r6
 8006780:	b003      	add	sp, #12
 8006782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006786:	6812      	ldr	r2, [r2, #0]
 8006788:	3b04      	subs	r3, #4
 800678a:	2a00      	cmp	r2, #0
 800678c:	d1ce      	bne.n	800672c <quorem+0x9a>
 800678e:	3c01      	subs	r4, #1
 8006790:	e7c9      	b.n	8006726 <quorem+0x94>
 8006792:	6812      	ldr	r2, [r2, #0]
 8006794:	3b04      	subs	r3, #4
 8006796:	2a00      	cmp	r2, #0
 8006798:	d1f0      	bne.n	800677c <quorem+0xea>
 800679a:	3c01      	subs	r4, #1
 800679c:	e7eb      	b.n	8006776 <quorem+0xe4>
 800679e:	2000      	movs	r0, #0
 80067a0:	e7ee      	b.n	8006780 <quorem+0xee>
 80067a2:	0000      	movs	r0, r0
 80067a4:	0000      	movs	r0, r0
	...

080067a8 <_dtoa_r>:
 80067a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ac:	ed2d 8b04 	vpush	{d8-d9}
 80067b0:	69c5      	ldr	r5, [r0, #28]
 80067b2:	b093      	sub	sp, #76	; 0x4c
 80067b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80067b8:	ec57 6b10 	vmov	r6, r7, d0
 80067bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80067c0:	9107      	str	r1, [sp, #28]
 80067c2:	4604      	mov	r4, r0
 80067c4:	920a      	str	r2, [sp, #40]	; 0x28
 80067c6:	930d      	str	r3, [sp, #52]	; 0x34
 80067c8:	b975      	cbnz	r5, 80067e8 <_dtoa_r+0x40>
 80067ca:	2010      	movs	r0, #16
 80067cc:	f000 fe2a 	bl	8007424 <malloc>
 80067d0:	4602      	mov	r2, r0
 80067d2:	61e0      	str	r0, [r4, #28]
 80067d4:	b920      	cbnz	r0, 80067e0 <_dtoa_r+0x38>
 80067d6:	4bae      	ldr	r3, [pc, #696]	; (8006a90 <_dtoa_r+0x2e8>)
 80067d8:	21ef      	movs	r1, #239	; 0xef
 80067da:	48ae      	ldr	r0, [pc, #696]	; (8006a94 <_dtoa_r+0x2ec>)
 80067dc:	f001 fb1e 	bl	8007e1c <__assert_func>
 80067e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067e4:	6005      	str	r5, [r0, #0]
 80067e6:	60c5      	str	r5, [r0, #12]
 80067e8:	69e3      	ldr	r3, [r4, #28]
 80067ea:	6819      	ldr	r1, [r3, #0]
 80067ec:	b151      	cbz	r1, 8006804 <_dtoa_r+0x5c>
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	604a      	str	r2, [r1, #4]
 80067f2:	2301      	movs	r3, #1
 80067f4:	4093      	lsls	r3, r2
 80067f6:	608b      	str	r3, [r1, #8]
 80067f8:	4620      	mov	r0, r4
 80067fa:	f000 ff07 	bl	800760c <_Bfree>
 80067fe:	69e3      	ldr	r3, [r4, #28]
 8006800:	2200      	movs	r2, #0
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	1e3b      	subs	r3, r7, #0
 8006806:	bfbb      	ittet	lt
 8006808:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800680c:	9303      	strlt	r3, [sp, #12]
 800680e:	2300      	movge	r3, #0
 8006810:	2201      	movlt	r2, #1
 8006812:	bfac      	ite	ge
 8006814:	f8c8 3000 	strge.w	r3, [r8]
 8006818:	f8c8 2000 	strlt.w	r2, [r8]
 800681c:	4b9e      	ldr	r3, [pc, #632]	; (8006a98 <_dtoa_r+0x2f0>)
 800681e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006822:	ea33 0308 	bics.w	r3, r3, r8
 8006826:	d11b      	bne.n	8006860 <_dtoa_r+0xb8>
 8006828:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800682a:	f242 730f 	movw	r3, #9999	; 0x270f
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006834:	4333      	orrs	r3, r6
 8006836:	f000 8593 	beq.w	8007360 <_dtoa_r+0xbb8>
 800683a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800683c:	b963      	cbnz	r3, 8006858 <_dtoa_r+0xb0>
 800683e:	4b97      	ldr	r3, [pc, #604]	; (8006a9c <_dtoa_r+0x2f4>)
 8006840:	e027      	b.n	8006892 <_dtoa_r+0xea>
 8006842:	4b97      	ldr	r3, [pc, #604]	; (8006aa0 <_dtoa_r+0x2f8>)
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	3308      	adds	r3, #8
 8006848:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	9800      	ldr	r0, [sp, #0]
 800684e:	b013      	add	sp, #76	; 0x4c
 8006850:	ecbd 8b04 	vpop	{d8-d9}
 8006854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006858:	4b90      	ldr	r3, [pc, #576]	; (8006a9c <_dtoa_r+0x2f4>)
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	3303      	adds	r3, #3
 800685e:	e7f3      	b.n	8006848 <_dtoa_r+0xa0>
 8006860:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006864:	2200      	movs	r2, #0
 8006866:	ec51 0b17 	vmov	r0, r1, d7
 800686a:	eeb0 8a47 	vmov.f32	s16, s14
 800686e:	eef0 8a67 	vmov.f32	s17, s15
 8006872:	2300      	movs	r3, #0
 8006874:	f7fa f930 	bl	8000ad8 <__aeabi_dcmpeq>
 8006878:	4681      	mov	r9, r0
 800687a:	b160      	cbz	r0, 8006896 <_dtoa_r+0xee>
 800687c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800687e:	2301      	movs	r3, #1
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 8568 	beq.w	800735a <_dtoa_r+0xbb2>
 800688a:	4b86      	ldr	r3, [pc, #536]	; (8006aa4 <_dtoa_r+0x2fc>)
 800688c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	3b01      	subs	r3, #1
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	e7da      	b.n	800684c <_dtoa_r+0xa4>
 8006896:	aa10      	add	r2, sp, #64	; 0x40
 8006898:	a911      	add	r1, sp, #68	; 0x44
 800689a:	4620      	mov	r0, r4
 800689c:	eeb0 0a48 	vmov.f32	s0, s16
 80068a0:	eef0 0a68 	vmov.f32	s1, s17
 80068a4:	f001 f994 	bl	8007bd0 <__d2b>
 80068a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80068ac:	4682      	mov	sl, r0
 80068ae:	2d00      	cmp	r5, #0
 80068b0:	d07f      	beq.n	80069b2 <_dtoa_r+0x20a>
 80068b2:	ee18 3a90 	vmov	r3, s17
 80068b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80068be:	ec51 0b18 	vmov	r0, r1, d8
 80068c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80068c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80068ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80068ce:	4619      	mov	r1, r3
 80068d0:	2200      	movs	r2, #0
 80068d2:	4b75      	ldr	r3, [pc, #468]	; (8006aa8 <_dtoa_r+0x300>)
 80068d4:	f7f9 fce0 	bl	8000298 <__aeabi_dsub>
 80068d8:	a367      	add	r3, pc, #412	; (adr r3, 8006a78 <_dtoa_r+0x2d0>)
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	f7f9 fe93 	bl	8000608 <__aeabi_dmul>
 80068e2:	a367      	add	r3, pc, #412	; (adr r3, 8006a80 <_dtoa_r+0x2d8>)
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	f7f9 fcd8 	bl	800029c <__adddf3>
 80068ec:	4606      	mov	r6, r0
 80068ee:	4628      	mov	r0, r5
 80068f0:	460f      	mov	r7, r1
 80068f2:	f7f9 fe1f 	bl	8000534 <__aeabi_i2d>
 80068f6:	a364      	add	r3, pc, #400	; (adr r3, 8006a88 <_dtoa_r+0x2e0>)
 80068f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fc:	f7f9 fe84 	bl	8000608 <__aeabi_dmul>
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	4630      	mov	r0, r6
 8006906:	4639      	mov	r1, r7
 8006908:	f7f9 fcc8 	bl	800029c <__adddf3>
 800690c:	4606      	mov	r6, r0
 800690e:	460f      	mov	r7, r1
 8006910:	f7fa f92a 	bl	8000b68 <__aeabi_d2iz>
 8006914:	2200      	movs	r2, #0
 8006916:	4683      	mov	fp, r0
 8006918:	2300      	movs	r3, #0
 800691a:	4630      	mov	r0, r6
 800691c:	4639      	mov	r1, r7
 800691e:	f7fa f8e5 	bl	8000aec <__aeabi_dcmplt>
 8006922:	b148      	cbz	r0, 8006938 <_dtoa_r+0x190>
 8006924:	4658      	mov	r0, fp
 8006926:	f7f9 fe05 	bl	8000534 <__aeabi_i2d>
 800692a:	4632      	mov	r2, r6
 800692c:	463b      	mov	r3, r7
 800692e:	f7fa f8d3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006932:	b908      	cbnz	r0, 8006938 <_dtoa_r+0x190>
 8006934:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006938:	f1bb 0f16 	cmp.w	fp, #22
 800693c:	d857      	bhi.n	80069ee <_dtoa_r+0x246>
 800693e:	4b5b      	ldr	r3, [pc, #364]	; (8006aac <_dtoa_r+0x304>)
 8006940:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006948:	ec51 0b18 	vmov	r0, r1, d8
 800694c:	f7fa f8ce 	bl	8000aec <__aeabi_dcmplt>
 8006950:	2800      	cmp	r0, #0
 8006952:	d04e      	beq.n	80069f2 <_dtoa_r+0x24a>
 8006954:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006958:	2300      	movs	r3, #0
 800695a:	930c      	str	r3, [sp, #48]	; 0x30
 800695c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800695e:	1b5b      	subs	r3, r3, r5
 8006960:	1e5a      	subs	r2, r3, #1
 8006962:	bf45      	ittet	mi
 8006964:	f1c3 0301 	rsbmi	r3, r3, #1
 8006968:	9305      	strmi	r3, [sp, #20]
 800696a:	2300      	movpl	r3, #0
 800696c:	2300      	movmi	r3, #0
 800696e:	9206      	str	r2, [sp, #24]
 8006970:	bf54      	ite	pl
 8006972:	9305      	strpl	r3, [sp, #20]
 8006974:	9306      	strmi	r3, [sp, #24]
 8006976:	f1bb 0f00 	cmp.w	fp, #0
 800697a:	db3c      	blt.n	80069f6 <_dtoa_r+0x24e>
 800697c:	9b06      	ldr	r3, [sp, #24]
 800697e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006982:	445b      	add	r3, fp
 8006984:	9306      	str	r3, [sp, #24]
 8006986:	2300      	movs	r3, #0
 8006988:	9308      	str	r3, [sp, #32]
 800698a:	9b07      	ldr	r3, [sp, #28]
 800698c:	2b09      	cmp	r3, #9
 800698e:	d868      	bhi.n	8006a62 <_dtoa_r+0x2ba>
 8006990:	2b05      	cmp	r3, #5
 8006992:	bfc4      	itt	gt
 8006994:	3b04      	subgt	r3, #4
 8006996:	9307      	strgt	r3, [sp, #28]
 8006998:	9b07      	ldr	r3, [sp, #28]
 800699a:	f1a3 0302 	sub.w	r3, r3, #2
 800699e:	bfcc      	ite	gt
 80069a0:	2500      	movgt	r5, #0
 80069a2:	2501      	movle	r5, #1
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	f200 8085 	bhi.w	8006ab4 <_dtoa_r+0x30c>
 80069aa:	e8df f003 	tbb	[pc, r3]
 80069ae:	3b2e      	.short	0x3b2e
 80069b0:	5839      	.short	0x5839
 80069b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80069b6:	441d      	add	r5, r3
 80069b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80069bc:	2b20      	cmp	r3, #32
 80069be:	bfc1      	itttt	gt
 80069c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80069c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80069c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80069cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80069d0:	bfd6      	itet	le
 80069d2:	f1c3 0320 	rsble	r3, r3, #32
 80069d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80069da:	fa06 f003 	lslle.w	r0, r6, r3
 80069de:	f7f9 fd99 	bl	8000514 <__aeabi_ui2d>
 80069e2:	2201      	movs	r2, #1
 80069e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80069e8:	3d01      	subs	r5, #1
 80069ea:	920e      	str	r2, [sp, #56]	; 0x38
 80069ec:	e76f      	b.n	80068ce <_dtoa_r+0x126>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e7b3      	b.n	800695a <_dtoa_r+0x1b2>
 80069f2:	900c      	str	r0, [sp, #48]	; 0x30
 80069f4:	e7b2      	b.n	800695c <_dtoa_r+0x1b4>
 80069f6:	9b05      	ldr	r3, [sp, #20]
 80069f8:	eba3 030b 	sub.w	r3, r3, fp
 80069fc:	9305      	str	r3, [sp, #20]
 80069fe:	f1cb 0300 	rsb	r3, fp, #0
 8006a02:	9308      	str	r3, [sp, #32]
 8006a04:	2300      	movs	r3, #0
 8006a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a08:	e7bf      	b.n	800698a <_dtoa_r+0x1e2>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	dc52      	bgt.n	8006aba <_dtoa_r+0x312>
 8006a14:	2301      	movs	r3, #1
 8006a16:	9301      	str	r3, [sp, #4]
 8006a18:	9304      	str	r3, [sp, #16]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	920a      	str	r2, [sp, #40]	; 0x28
 8006a1e:	e00b      	b.n	8006a38 <_dtoa_r+0x290>
 8006a20:	2301      	movs	r3, #1
 8006a22:	e7f3      	b.n	8006a0c <_dtoa_r+0x264>
 8006a24:	2300      	movs	r3, #0
 8006a26:	9309      	str	r3, [sp, #36]	; 0x24
 8006a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2a:	445b      	add	r3, fp
 8006a2c:	9301      	str	r3, [sp, #4]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	9304      	str	r3, [sp, #16]
 8006a34:	bfb8      	it	lt
 8006a36:	2301      	movlt	r3, #1
 8006a38:	69e0      	ldr	r0, [r4, #28]
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	f102 0614 	add.w	r6, r2, #20
 8006a42:	429e      	cmp	r6, r3
 8006a44:	d93d      	bls.n	8006ac2 <_dtoa_r+0x31a>
 8006a46:	6041      	str	r1, [r0, #4]
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f000 fd9f 	bl	800758c <_Balloc>
 8006a4e:	9000      	str	r0, [sp, #0]
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d139      	bne.n	8006ac8 <_dtoa_r+0x320>
 8006a54:	4b16      	ldr	r3, [pc, #88]	; (8006ab0 <_dtoa_r+0x308>)
 8006a56:	4602      	mov	r2, r0
 8006a58:	f240 11af 	movw	r1, #431	; 0x1af
 8006a5c:	e6bd      	b.n	80067da <_dtoa_r+0x32>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e7e1      	b.n	8006a26 <_dtoa_r+0x27e>
 8006a62:	2501      	movs	r5, #1
 8006a64:	2300      	movs	r3, #0
 8006a66:	9307      	str	r3, [sp, #28]
 8006a68:	9509      	str	r5, [sp, #36]	; 0x24
 8006a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a6e:	9301      	str	r3, [sp, #4]
 8006a70:	9304      	str	r3, [sp, #16]
 8006a72:	2200      	movs	r2, #0
 8006a74:	2312      	movs	r3, #18
 8006a76:	e7d1      	b.n	8006a1c <_dtoa_r+0x274>
 8006a78:	636f4361 	.word	0x636f4361
 8006a7c:	3fd287a7 	.word	0x3fd287a7
 8006a80:	8b60c8b3 	.word	0x8b60c8b3
 8006a84:	3fc68a28 	.word	0x3fc68a28
 8006a88:	509f79fb 	.word	0x509f79fb
 8006a8c:	3fd34413 	.word	0x3fd34413
 8006a90:	080084a9 	.word	0x080084a9
 8006a94:	080084c0 	.word	0x080084c0
 8006a98:	7ff00000 	.word	0x7ff00000
 8006a9c:	080084a5 	.word	0x080084a5
 8006aa0:	0800849c 	.word	0x0800849c
 8006aa4:	08008479 	.word	0x08008479
 8006aa8:	3ff80000 	.word	0x3ff80000
 8006aac:	080085b0 	.word	0x080085b0
 8006ab0:	08008518 	.word	0x08008518
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab8:	e7d7      	b.n	8006a6a <_dtoa_r+0x2c2>
 8006aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	9304      	str	r3, [sp, #16]
 8006ac0:	e7ba      	b.n	8006a38 <_dtoa_r+0x290>
 8006ac2:	3101      	adds	r1, #1
 8006ac4:	0052      	lsls	r2, r2, #1
 8006ac6:	e7ba      	b.n	8006a3e <_dtoa_r+0x296>
 8006ac8:	69e3      	ldr	r3, [r4, #28]
 8006aca:	9a00      	ldr	r2, [sp, #0]
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	9b04      	ldr	r3, [sp, #16]
 8006ad0:	2b0e      	cmp	r3, #14
 8006ad2:	f200 80a8 	bhi.w	8006c26 <_dtoa_r+0x47e>
 8006ad6:	2d00      	cmp	r5, #0
 8006ad8:	f000 80a5 	beq.w	8006c26 <_dtoa_r+0x47e>
 8006adc:	f1bb 0f00 	cmp.w	fp, #0
 8006ae0:	dd38      	ble.n	8006b54 <_dtoa_r+0x3ac>
 8006ae2:	4bc0      	ldr	r3, [pc, #768]	; (8006de4 <_dtoa_r+0x63c>)
 8006ae4:	f00b 020f 	and.w	r2, fp, #15
 8006ae8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006af0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006af4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006af8:	d019      	beq.n	8006b2e <_dtoa_r+0x386>
 8006afa:	4bbb      	ldr	r3, [pc, #748]	; (8006de8 <_dtoa_r+0x640>)
 8006afc:	ec51 0b18 	vmov	r0, r1, d8
 8006b00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b04:	f7f9 feaa 	bl	800085c <__aeabi_ddiv>
 8006b08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b0c:	f008 080f 	and.w	r8, r8, #15
 8006b10:	2503      	movs	r5, #3
 8006b12:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006de8 <_dtoa_r+0x640>
 8006b16:	f1b8 0f00 	cmp.w	r8, #0
 8006b1a:	d10a      	bne.n	8006b32 <_dtoa_r+0x38a>
 8006b1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b20:	4632      	mov	r2, r6
 8006b22:	463b      	mov	r3, r7
 8006b24:	f7f9 fe9a 	bl	800085c <__aeabi_ddiv>
 8006b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b2c:	e02b      	b.n	8006b86 <_dtoa_r+0x3de>
 8006b2e:	2502      	movs	r5, #2
 8006b30:	e7ef      	b.n	8006b12 <_dtoa_r+0x36a>
 8006b32:	f018 0f01 	tst.w	r8, #1
 8006b36:	d008      	beq.n	8006b4a <_dtoa_r+0x3a2>
 8006b38:	4630      	mov	r0, r6
 8006b3a:	4639      	mov	r1, r7
 8006b3c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006b40:	f7f9 fd62 	bl	8000608 <__aeabi_dmul>
 8006b44:	3501      	adds	r5, #1
 8006b46:	4606      	mov	r6, r0
 8006b48:	460f      	mov	r7, r1
 8006b4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006b4e:	f109 0908 	add.w	r9, r9, #8
 8006b52:	e7e0      	b.n	8006b16 <_dtoa_r+0x36e>
 8006b54:	f000 809f 	beq.w	8006c96 <_dtoa_r+0x4ee>
 8006b58:	f1cb 0600 	rsb	r6, fp, #0
 8006b5c:	4ba1      	ldr	r3, [pc, #644]	; (8006de4 <_dtoa_r+0x63c>)
 8006b5e:	4fa2      	ldr	r7, [pc, #648]	; (8006de8 <_dtoa_r+0x640>)
 8006b60:	f006 020f 	and.w	r2, r6, #15
 8006b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	ec51 0b18 	vmov	r0, r1, d8
 8006b70:	f7f9 fd4a 	bl	8000608 <__aeabi_dmul>
 8006b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b78:	1136      	asrs	r6, r6, #4
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	2502      	movs	r5, #2
 8006b7e:	2e00      	cmp	r6, #0
 8006b80:	d17e      	bne.n	8006c80 <_dtoa_r+0x4d8>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1d0      	bne.n	8006b28 <_dtoa_r+0x380>
 8006b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 8084 	beq.w	8006c9a <_dtoa_r+0x4f2>
 8006b92:	4b96      	ldr	r3, [pc, #600]	; (8006dec <_dtoa_r+0x644>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	4640      	mov	r0, r8
 8006b98:	4649      	mov	r1, r9
 8006b9a:	f7f9 ffa7 	bl	8000aec <__aeabi_dcmplt>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d07b      	beq.n	8006c9a <_dtoa_r+0x4f2>
 8006ba2:	9b04      	ldr	r3, [sp, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d078      	beq.n	8006c9a <_dtoa_r+0x4f2>
 8006ba8:	9b01      	ldr	r3, [sp, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	dd39      	ble.n	8006c22 <_dtoa_r+0x47a>
 8006bae:	4b90      	ldr	r3, [pc, #576]	; (8006df0 <_dtoa_r+0x648>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	4649      	mov	r1, r9
 8006bb6:	f7f9 fd27 	bl	8000608 <__aeabi_dmul>
 8006bba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bbe:	9e01      	ldr	r6, [sp, #4]
 8006bc0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006bc4:	3501      	adds	r5, #1
 8006bc6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006bca:	4628      	mov	r0, r5
 8006bcc:	f7f9 fcb2 	bl	8000534 <__aeabi_i2d>
 8006bd0:	4642      	mov	r2, r8
 8006bd2:	464b      	mov	r3, r9
 8006bd4:	f7f9 fd18 	bl	8000608 <__aeabi_dmul>
 8006bd8:	4b86      	ldr	r3, [pc, #536]	; (8006df4 <_dtoa_r+0x64c>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f7f9 fb5e 	bl	800029c <__adddf3>
 8006be0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006be8:	9303      	str	r3, [sp, #12]
 8006bea:	2e00      	cmp	r6, #0
 8006bec:	d158      	bne.n	8006ca0 <_dtoa_r+0x4f8>
 8006bee:	4b82      	ldr	r3, [pc, #520]	; (8006df8 <_dtoa_r+0x650>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	f7f9 fb4f 	bl	8000298 <__aeabi_dsub>
 8006bfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bfe:	4680      	mov	r8, r0
 8006c00:	4689      	mov	r9, r1
 8006c02:	f7f9 ff91 	bl	8000b28 <__aeabi_dcmpgt>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	f040 8296 	bne.w	8007138 <_dtoa_r+0x990>
 8006c0c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006c10:	4640      	mov	r0, r8
 8006c12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c16:	4649      	mov	r1, r9
 8006c18:	f7f9 ff68 	bl	8000aec <__aeabi_dcmplt>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	f040 8289 	bne.w	8007134 <_dtoa_r+0x98c>
 8006c22:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006c26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f2c0 814e 	blt.w	8006eca <_dtoa_r+0x722>
 8006c2e:	f1bb 0f0e 	cmp.w	fp, #14
 8006c32:	f300 814a 	bgt.w	8006eca <_dtoa_r+0x722>
 8006c36:	4b6b      	ldr	r3, [pc, #428]	; (8006de4 <_dtoa_r+0x63c>)
 8006c38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f280 80dc 	bge.w	8006e00 <_dtoa_r+0x658>
 8006c48:	9b04      	ldr	r3, [sp, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f300 80d8 	bgt.w	8006e00 <_dtoa_r+0x658>
 8006c50:	f040 826f 	bne.w	8007132 <_dtoa_r+0x98a>
 8006c54:	4b68      	ldr	r3, [pc, #416]	; (8006df8 <_dtoa_r+0x650>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	4640      	mov	r0, r8
 8006c5a:	4649      	mov	r1, r9
 8006c5c:	f7f9 fcd4 	bl	8000608 <__aeabi_dmul>
 8006c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c64:	f7f9 ff56 	bl	8000b14 <__aeabi_dcmpge>
 8006c68:	9e04      	ldr	r6, [sp, #16]
 8006c6a:	4637      	mov	r7, r6
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	f040 8245 	bne.w	80070fc <_dtoa_r+0x954>
 8006c72:	9d00      	ldr	r5, [sp, #0]
 8006c74:	2331      	movs	r3, #49	; 0x31
 8006c76:	f805 3b01 	strb.w	r3, [r5], #1
 8006c7a:	f10b 0b01 	add.w	fp, fp, #1
 8006c7e:	e241      	b.n	8007104 <_dtoa_r+0x95c>
 8006c80:	07f2      	lsls	r2, r6, #31
 8006c82:	d505      	bpl.n	8006c90 <_dtoa_r+0x4e8>
 8006c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c88:	f7f9 fcbe 	bl	8000608 <__aeabi_dmul>
 8006c8c:	3501      	adds	r5, #1
 8006c8e:	2301      	movs	r3, #1
 8006c90:	1076      	asrs	r6, r6, #1
 8006c92:	3708      	adds	r7, #8
 8006c94:	e773      	b.n	8006b7e <_dtoa_r+0x3d6>
 8006c96:	2502      	movs	r5, #2
 8006c98:	e775      	b.n	8006b86 <_dtoa_r+0x3de>
 8006c9a:	9e04      	ldr	r6, [sp, #16]
 8006c9c:	465f      	mov	r7, fp
 8006c9e:	e792      	b.n	8006bc6 <_dtoa_r+0x41e>
 8006ca0:	9900      	ldr	r1, [sp, #0]
 8006ca2:	4b50      	ldr	r3, [pc, #320]	; (8006de4 <_dtoa_r+0x63c>)
 8006ca4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ca8:	4431      	add	r1, r6
 8006caa:	9102      	str	r1, [sp, #8]
 8006cac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cae:	eeb0 9a47 	vmov.f32	s18, s14
 8006cb2:	eef0 9a67 	vmov.f32	s19, s15
 8006cb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006cba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cbe:	2900      	cmp	r1, #0
 8006cc0:	d044      	beq.n	8006d4c <_dtoa_r+0x5a4>
 8006cc2:	494e      	ldr	r1, [pc, #312]	; (8006dfc <_dtoa_r+0x654>)
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	f7f9 fdc9 	bl	800085c <__aeabi_ddiv>
 8006cca:	ec53 2b19 	vmov	r2, r3, d9
 8006cce:	f7f9 fae3 	bl	8000298 <__aeabi_dsub>
 8006cd2:	9d00      	ldr	r5, [sp, #0]
 8006cd4:	ec41 0b19 	vmov	d9, r0, r1
 8006cd8:	4649      	mov	r1, r9
 8006cda:	4640      	mov	r0, r8
 8006cdc:	f7f9 ff44 	bl	8000b68 <__aeabi_d2iz>
 8006ce0:	4606      	mov	r6, r0
 8006ce2:	f7f9 fc27 	bl	8000534 <__aeabi_i2d>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4640      	mov	r0, r8
 8006cec:	4649      	mov	r1, r9
 8006cee:	f7f9 fad3 	bl	8000298 <__aeabi_dsub>
 8006cf2:	3630      	adds	r6, #48	; 0x30
 8006cf4:	f805 6b01 	strb.w	r6, [r5], #1
 8006cf8:	ec53 2b19 	vmov	r2, r3, d9
 8006cfc:	4680      	mov	r8, r0
 8006cfe:	4689      	mov	r9, r1
 8006d00:	f7f9 fef4 	bl	8000aec <__aeabi_dcmplt>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d164      	bne.n	8006dd2 <_dtoa_r+0x62a>
 8006d08:	4642      	mov	r2, r8
 8006d0a:	464b      	mov	r3, r9
 8006d0c:	4937      	ldr	r1, [pc, #220]	; (8006dec <_dtoa_r+0x644>)
 8006d0e:	2000      	movs	r0, #0
 8006d10:	f7f9 fac2 	bl	8000298 <__aeabi_dsub>
 8006d14:	ec53 2b19 	vmov	r2, r3, d9
 8006d18:	f7f9 fee8 	bl	8000aec <__aeabi_dcmplt>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	f040 80b6 	bne.w	8006e8e <_dtoa_r+0x6e6>
 8006d22:	9b02      	ldr	r3, [sp, #8]
 8006d24:	429d      	cmp	r5, r3
 8006d26:	f43f af7c 	beq.w	8006c22 <_dtoa_r+0x47a>
 8006d2a:	4b31      	ldr	r3, [pc, #196]	; (8006df0 <_dtoa_r+0x648>)
 8006d2c:	ec51 0b19 	vmov	r0, r1, d9
 8006d30:	2200      	movs	r2, #0
 8006d32:	f7f9 fc69 	bl	8000608 <__aeabi_dmul>
 8006d36:	4b2e      	ldr	r3, [pc, #184]	; (8006df0 <_dtoa_r+0x648>)
 8006d38:	ec41 0b19 	vmov	d9, r0, r1
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	4640      	mov	r0, r8
 8006d40:	4649      	mov	r1, r9
 8006d42:	f7f9 fc61 	bl	8000608 <__aeabi_dmul>
 8006d46:	4680      	mov	r8, r0
 8006d48:	4689      	mov	r9, r1
 8006d4a:	e7c5      	b.n	8006cd8 <_dtoa_r+0x530>
 8006d4c:	ec51 0b17 	vmov	r0, r1, d7
 8006d50:	f7f9 fc5a 	bl	8000608 <__aeabi_dmul>
 8006d54:	9b02      	ldr	r3, [sp, #8]
 8006d56:	9d00      	ldr	r5, [sp, #0]
 8006d58:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d5a:	ec41 0b19 	vmov	d9, r0, r1
 8006d5e:	4649      	mov	r1, r9
 8006d60:	4640      	mov	r0, r8
 8006d62:	f7f9 ff01 	bl	8000b68 <__aeabi_d2iz>
 8006d66:	4606      	mov	r6, r0
 8006d68:	f7f9 fbe4 	bl	8000534 <__aeabi_i2d>
 8006d6c:	3630      	adds	r6, #48	; 0x30
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	4640      	mov	r0, r8
 8006d74:	4649      	mov	r1, r9
 8006d76:	f7f9 fa8f 	bl	8000298 <__aeabi_dsub>
 8006d7a:	f805 6b01 	strb.w	r6, [r5], #1
 8006d7e:	9b02      	ldr	r3, [sp, #8]
 8006d80:	429d      	cmp	r5, r3
 8006d82:	4680      	mov	r8, r0
 8006d84:	4689      	mov	r9, r1
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	d124      	bne.n	8006dd6 <_dtoa_r+0x62e>
 8006d8c:	4b1b      	ldr	r3, [pc, #108]	; (8006dfc <_dtoa_r+0x654>)
 8006d8e:	ec51 0b19 	vmov	r0, r1, d9
 8006d92:	f7f9 fa83 	bl	800029c <__adddf3>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	f7f9 fec3 	bl	8000b28 <__aeabi_dcmpgt>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	d173      	bne.n	8006e8e <_dtoa_r+0x6e6>
 8006da6:	ec53 2b19 	vmov	r2, r3, d9
 8006daa:	4914      	ldr	r1, [pc, #80]	; (8006dfc <_dtoa_r+0x654>)
 8006dac:	2000      	movs	r0, #0
 8006dae:	f7f9 fa73 	bl	8000298 <__aeabi_dsub>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	4640      	mov	r0, r8
 8006db8:	4649      	mov	r1, r9
 8006dba:	f7f9 fe97 	bl	8000aec <__aeabi_dcmplt>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	f43f af2f 	beq.w	8006c22 <_dtoa_r+0x47a>
 8006dc4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006dc6:	1e6b      	subs	r3, r5, #1
 8006dc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006dca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006dce:	2b30      	cmp	r3, #48	; 0x30
 8006dd0:	d0f8      	beq.n	8006dc4 <_dtoa_r+0x61c>
 8006dd2:	46bb      	mov	fp, r7
 8006dd4:	e04a      	b.n	8006e6c <_dtoa_r+0x6c4>
 8006dd6:	4b06      	ldr	r3, [pc, #24]	; (8006df0 <_dtoa_r+0x648>)
 8006dd8:	f7f9 fc16 	bl	8000608 <__aeabi_dmul>
 8006ddc:	4680      	mov	r8, r0
 8006dde:	4689      	mov	r9, r1
 8006de0:	e7bd      	b.n	8006d5e <_dtoa_r+0x5b6>
 8006de2:	bf00      	nop
 8006de4:	080085b0 	.word	0x080085b0
 8006de8:	08008588 	.word	0x08008588
 8006dec:	3ff00000 	.word	0x3ff00000
 8006df0:	40240000 	.word	0x40240000
 8006df4:	401c0000 	.word	0x401c0000
 8006df8:	40140000 	.word	0x40140000
 8006dfc:	3fe00000 	.word	0x3fe00000
 8006e00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006e04:	9d00      	ldr	r5, [sp, #0]
 8006e06:	4642      	mov	r2, r8
 8006e08:	464b      	mov	r3, r9
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	4639      	mov	r1, r7
 8006e0e:	f7f9 fd25 	bl	800085c <__aeabi_ddiv>
 8006e12:	f7f9 fea9 	bl	8000b68 <__aeabi_d2iz>
 8006e16:	9001      	str	r0, [sp, #4]
 8006e18:	f7f9 fb8c 	bl	8000534 <__aeabi_i2d>
 8006e1c:	4642      	mov	r2, r8
 8006e1e:	464b      	mov	r3, r9
 8006e20:	f7f9 fbf2 	bl	8000608 <__aeabi_dmul>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4630      	mov	r0, r6
 8006e2a:	4639      	mov	r1, r7
 8006e2c:	f7f9 fa34 	bl	8000298 <__aeabi_dsub>
 8006e30:	9e01      	ldr	r6, [sp, #4]
 8006e32:	9f04      	ldr	r7, [sp, #16]
 8006e34:	3630      	adds	r6, #48	; 0x30
 8006e36:	f805 6b01 	strb.w	r6, [r5], #1
 8006e3a:	9e00      	ldr	r6, [sp, #0]
 8006e3c:	1bae      	subs	r6, r5, r6
 8006e3e:	42b7      	cmp	r7, r6
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	d134      	bne.n	8006eb0 <_dtoa_r+0x708>
 8006e46:	f7f9 fa29 	bl	800029c <__adddf3>
 8006e4a:	4642      	mov	r2, r8
 8006e4c:	464b      	mov	r3, r9
 8006e4e:	4606      	mov	r6, r0
 8006e50:	460f      	mov	r7, r1
 8006e52:	f7f9 fe69 	bl	8000b28 <__aeabi_dcmpgt>
 8006e56:	b9c8      	cbnz	r0, 8006e8c <_dtoa_r+0x6e4>
 8006e58:	4642      	mov	r2, r8
 8006e5a:	464b      	mov	r3, r9
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	4639      	mov	r1, r7
 8006e60:	f7f9 fe3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e64:	b110      	cbz	r0, 8006e6c <_dtoa_r+0x6c4>
 8006e66:	9b01      	ldr	r3, [sp, #4]
 8006e68:	07db      	lsls	r3, r3, #31
 8006e6a:	d40f      	bmi.n	8006e8c <_dtoa_r+0x6e4>
 8006e6c:	4651      	mov	r1, sl
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f000 fbcc 	bl	800760c <_Bfree>
 8006e74:	2300      	movs	r3, #0
 8006e76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e78:	702b      	strb	r3, [r5, #0]
 8006e7a:	f10b 0301 	add.w	r3, fp, #1
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f43f ace2 	beq.w	800684c <_dtoa_r+0xa4>
 8006e88:	601d      	str	r5, [r3, #0]
 8006e8a:	e4df      	b.n	800684c <_dtoa_r+0xa4>
 8006e8c:	465f      	mov	r7, fp
 8006e8e:	462b      	mov	r3, r5
 8006e90:	461d      	mov	r5, r3
 8006e92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e96:	2a39      	cmp	r2, #57	; 0x39
 8006e98:	d106      	bne.n	8006ea8 <_dtoa_r+0x700>
 8006e9a:	9a00      	ldr	r2, [sp, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d1f7      	bne.n	8006e90 <_dtoa_r+0x6e8>
 8006ea0:	9900      	ldr	r1, [sp, #0]
 8006ea2:	2230      	movs	r2, #48	; 0x30
 8006ea4:	3701      	adds	r7, #1
 8006ea6:	700a      	strb	r2, [r1, #0]
 8006ea8:	781a      	ldrb	r2, [r3, #0]
 8006eaa:	3201      	adds	r2, #1
 8006eac:	701a      	strb	r2, [r3, #0]
 8006eae:	e790      	b.n	8006dd2 <_dtoa_r+0x62a>
 8006eb0:	4ba3      	ldr	r3, [pc, #652]	; (8007140 <_dtoa_r+0x998>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f7f9 fba8 	bl	8000608 <__aeabi_dmul>
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2300      	movs	r3, #0
 8006ebc:	4606      	mov	r6, r0
 8006ebe:	460f      	mov	r7, r1
 8006ec0:	f7f9 fe0a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d09e      	beq.n	8006e06 <_dtoa_r+0x65e>
 8006ec8:	e7d0      	b.n	8006e6c <_dtoa_r+0x6c4>
 8006eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ecc:	2a00      	cmp	r2, #0
 8006ece:	f000 80ca 	beq.w	8007066 <_dtoa_r+0x8be>
 8006ed2:	9a07      	ldr	r2, [sp, #28]
 8006ed4:	2a01      	cmp	r2, #1
 8006ed6:	f300 80ad 	bgt.w	8007034 <_dtoa_r+0x88c>
 8006eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006edc:	2a00      	cmp	r2, #0
 8006ede:	f000 80a5 	beq.w	800702c <_dtoa_r+0x884>
 8006ee2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ee6:	9e08      	ldr	r6, [sp, #32]
 8006ee8:	9d05      	ldr	r5, [sp, #20]
 8006eea:	9a05      	ldr	r2, [sp, #20]
 8006eec:	441a      	add	r2, r3
 8006eee:	9205      	str	r2, [sp, #20]
 8006ef0:	9a06      	ldr	r2, [sp, #24]
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	441a      	add	r2, r3
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	9206      	str	r2, [sp, #24]
 8006efa:	f000 fc3d 	bl	8007778 <__i2b>
 8006efe:	4607      	mov	r7, r0
 8006f00:	b165      	cbz	r5, 8006f1c <_dtoa_r+0x774>
 8006f02:	9b06      	ldr	r3, [sp, #24]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	dd09      	ble.n	8006f1c <_dtoa_r+0x774>
 8006f08:	42ab      	cmp	r3, r5
 8006f0a:	9a05      	ldr	r2, [sp, #20]
 8006f0c:	bfa8      	it	ge
 8006f0e:	462b      	movge	r3, r5
 8006f10:	1ad2      	subs	r2, r2, r3
 8006f12:	9205      	str	r2, [sp, #20]
 8006f14:	9a06      	ldr	r2, [sp, #24]
 8006f16:	1aed      	subs	r5, r5, r3
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	9306      	str	r3, [sp, #24]
 8006f1c:	9b08      	ldr	r3, [sp, #32]
 8006f1e:	b1f3      	cbz	r3, 8006f5e <_dtoa_r+0x7b6>
 8006f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 80a3 	beq.w	800706e <_dtoa_r+0x8c6>
 8006f28:	2e00      	cmp	r6, #0
 8006f2a:	dd10      	ble.n	8006f4e <_dtoa_r+0x7a6>
 8006f2c:	4639      	mov	r1, r7
 8006f2e:	4632      	mov	r2, r6
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 fce1 	bl	80078f8 <__pow5mult>
 8006f36:	4652      	mov	r2, sl
 8006f38:	4601      	mov	r1, r0
 8006f3a:	4607      	mov	r7, r0
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f000 fc31 	bl	80077a4 <__multiply>
 8006f42:	4651      	mov	r1, sl
 8006f44:	4680      	mov	r8, r0
 8006f46:	4620      	mov	r0, r4
 8006f48:	f000 fb60 	bl	800760c <_Bfree>
 8006f4c:	46c2      	mov	sl, r8
 8006f4e:	9b08      	ldr	r3, [sp, #32]
 8006f50:	1b9a      	subs	r2, r3, r6
 8006f52:	d004      	beq.n	8006f5e <_dtoa_r+0x7b6>
 8006f54:	4651      	mov	r1, sl
 8006f56:	4620      	mov	r0, r4
 8006f58:	f000 fcce 	bl	80078f8 <__pow5mult>
 8006f5c:	4682      	mov	sl, r0
 8006f5e:	2101      	movs	r1, #1
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 fc09 	bl	8007778 <__i2b>
 8006f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	4606      	mov	r6, r0
 8006f6c:	f340 8081 	ble.w	8007072 <_dtoa_r+0x8ca>
 8006f70:	461a      	mov	r2, r3
 8006f72:	4601      	mov	r1, r0
 8006f74:	4620      	mov	r0, r4
 8006f76:	f000 fcbf 	bl	80078f8 <__pow5mult>
 8006f7a:	9b07      	ldr	r3, [sp, #28]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	4606      	mov	r6, r0
 8006f80:	dd7a      	ble.n	8007078 <_dtoa_r+0x8d0>
 8006f82:	f04f 0800 	mov.w	r8, #0
 8006f86:	6933      	ldr	r3, [r6, #16]
 8006f88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f8c:	6918      	ldr	r0, [r3, #16]
 8006f8e:	f000 fba5 	bl	80076dc <__hi0bits>
 8006f92:	f1c0 0020 	rsb	r0, r0, #32
 8006f96:	9b06      	ldr	r3, [sp, #24]
 8006f98:	4418      	add	r0, r3
 8006f9a:	f010 001f 	ands.w	r0, r0, #31
 8006f9e:	f000 8094 	beq.w	80070ca <_dtoa_r+0x922>
 8006fa2:	f1c0 0320 	rsb	r3, r0, #32
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	f340 8085 	ble.w	80070b6 <_dtoa_r+0x90e>
 8006fac:	9b05      	ldr	r3, [sp, #20]
 8006fae:	f1c0 001c 	rsb	r0, r0, #28
 8006fb2:	4403      	add	r3, r0
 8006fb4:	9305      	str	r3, [sp, #20]
 8006fb6:	9b06      	ldr	r3, [sp, #24]
 8006fb8:	4403      	add	r3, r0
 8006fba:	4405      	add	r5, r0
 8006fbc:	9306      	str	r3, [sp, #24]
 8006fbe:	9b05      	ldr	r3, [sp, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	dd05      	ble.n	8006fd0 <_dtoa_r+0x828>
 8006fc4:	4651      	mov	r1, sl
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f000 fcef 	bl	80079ac <__lshift>
 8006fce:	4682      	mov	sl, r0
 8006fd0:	9b06      	ldr	r3, [sp, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	dd05      	ble.n	8006fe2 <_dtoa_r+0x83a>
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	461a      	mov	r2, r3
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f000 fce6 	bl	80079ac <__lshift>
 8006fe0:	4606      	mov	r6, r0
 8006fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d072      	beq.n	80070ce <_dtoa_r+0x926>
 8006fe8:	4631      	mov	r1, r6
 8006fea:	4650      	mov	r0, sl
 8006fec:	f000 fd4a 	bl	8007a84 <__mcmp>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	da6c      	bge.n	80070ce <_dtoa_r+0x926>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4651      	mov	r1, sl
 8006ff8:	220a      	movs	r2, #10
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f000 fb28 	bl	8007650 <__multadd>
 8007000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007002:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007006:	4682      	mov	sl, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 81b0 	beq.w	800736e <_dtoa_r+0xbc6>
 800700e:	2300      	movs	r3, #0
 8007010:	4639      	mov	r1, r7
 8007012:	220a      	movs	r2, #10
 8007014:	4620      	mov	r0, r4
 8007016:	f000 fb1b 	bl	8007650 <__multadd>
 800701a:	9b01      	ldr	r3, [sp, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	4607      	mov	r7, r0
 8007020:	f300 8096 	bgt.w	8007150 <_dtoa_r+0x9a8>
 8007024:	9b07      	ldr	r3, [sp, #28]
 8007026:	2b02      	cmp	r3, #2
 8007028:	dc59      	bgt.n	80070de <_dtoa_r+0x936>
 800702a:	e091      	b.n	8007150 <_dtoa_r+0x9a8>
 800702c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800702e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007032:	e758      	b.n	8006ee6 <_dtoa_r+0x73e>
 8007034:	9b04      	ldr	r3, [sp, #16]
 8007036:	1e5e      	subs	r6, r3, #1
 8007038:	9b08      	ldr	r3, [sp, #32]
 800703a:	42b3      	cmp	r3, r6
 800703c:	bfbf      	itttt	lt
 800703e:	9b08      	ldrlt	r3, [sp, #32]
 8007040:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007042:	9608      	strlt	r6, [sp, #32]
 8007044:	1af3      	sublt	r3, r6, r3
 8007046:	bfb4      	ite	lt
 8007048:	18d2      	addlt	r2, r2, r3
 800704a:	1b9e      	subge	r6, r3, r6
 800704c:	9b04      	ldr	r3, [sp, #16]
 800704e:	bfbc      	itt	lt
 8007050:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007052:	2600      	movlt	r6, #0
 8007054:	2b00      	cmp	r3, #0
 8007056:	bfb7      	itett	lt
 8007058:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800705c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007060:	1a9d      	sublt	r5, r3, r2
 8007062:	2300      	movlt	r3, #0
 8007064:	e741      	b.n	8006eea <_dtoa_r+0x742>
 8007066:	9e08      	ldr	r6, [sp, #32]
 8007068:	9d05      	ldr	r5, [sp, #20]
 800706a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800706c:	e748      	b.n	8006f00 <_dtoa_r+0x758>
 800706e:	9a08      	ldr	r2, [sp, #32]
 8007070:	e770      	b.n	8006f54 <_dtoa_r+0x7ac>
 8007072:	9b07      	ldr	r3, [sp, #28]
 8007074:	2b01      	cmp	r3, #1
 8007076:	dc19      	bgt.n	80070ac <_dtoa_r+0x904>
 8007078:	9b02      	ldr	r3, [sp, #8]
 800707a:	b9bb      	cbnz	r3, 80070ac <_dtoa_r+0x904>
 800707c:	9b03      	ldr	r3, [sp, #12]
 800707e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007082:	b99b      	cbnz	r3, 80070ac <_dtoa_r+0x904>
 8007084:	9b03      	ldr	r3, [sp, #12]
 8007086:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800708a:	0d1b      	lsrs	r3, r3, #20
 800708c:	051b      	lsls	r3, r3, #20
 800708e:	b183      	cbz	r3, 80070b2 <_dtoa_r+0x90a>
 8007090:	9b05      	ldr	r3, [sp, #20]
 8007092:	3301      	adds	r3, #1
 8007094:	9305      	str	r3, [sp, #20]
 8007096:	9b06      	ldr	r3, [sp, #24]
 8007098:	3301      	adds	r3, #1
 800709a:	9306      	str	r3, [sp, #24]
 800709c:	f04f 0801 	mov.w	r8, #1
 80070a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f47f af6f 	bne.w	8006f86 <_dtoa_r+0x7de>
 80070a8:	2001      	movs	r0, #1
 80070aa:	e774      	b.n	8006f96 <_dtoa_r+0x7ee>
 80070ac:	f04f 0800 	mov.w	r8, #0
 80070b0:	e7f6      	b.n	80070a0 <_dtoa_r+0x8f8>
 80070b2:	4698      	mov	r8, r3
 80070b4:	e7f4      	b.n	80070a0 <_dtoa_r+0x8f8>
 80070b6:	d082      	beq.n	8006fbe <_dtoa_r+0x816>
 80070b8:	9a05      	ldr	r2, [sp, #20]
 80070ba:	331c      	adds	r3, #28
 80070bc:	441a      	add	r2, r3
 80070be:	9205      	str	r2, [sp, #20]
 80070c0:	9a06      	ldr	r2, [sp, #24]
 80070c2:	441a      	add	r2, r3
 80070c4:	441d      	add	r5, r3
 80070c6:	9206      	str	r2, [sp, #24]
 80070c8:	e779      	b.n	8006fbe <_dtoa_r+0x816>
 80070ca:	4603      	mov	r3, r0
 80070cc:	e7f4      	b.n	80070b8 <_dtoa_r+0x910>
 80070ce:	9b04      	ldr	r3, [sp, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	dc37      	bgt.n	8007144 <_dtoa_r+0x99c>
 80070d4:	9b07      	ldr	r3, [sp, #28]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	dd34      	ble.n	8007144 <_dtoa_r+0x99c>
 80070da:	9b04      	ldr	r3, [sp, #16]
 80070dc:	9301      	str	r3, [sp, #4]
 80070de:	9b01      	ldr	r3, [sp, #4]
 80070e0:	b963      	cbnz	r3, 80070fc <_dtoa_r+0x954>
 80070e2:	4631      	mov	r1, r6
 80070e4:	2205      	movs	r2, #5
 80070e6:	4620      	mov	r0, r4
 80070e8:	f000 fab2 	bl	8007650 <__multadd>
 80070ec:	4601      	mov	r1, r0
 80070ee:	4606      	mov	r6, r0
 80070f0:	4650      	mov	r0, sl
 80070f2:	f000 fcc7 	bl	8007a84 <__mcmp>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	f73f adbb 	bgt.w	8006c72 <_dtoa_r+0x4ca>
 80070fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070fe:	9d00      	ldr	r5, [sp, #0]
 8007100:	ea6f 0b03 	mvn.w	fp, r3
 8007104:	f04f 0800 	mov.w	r8, #0
 8007108:	4631      	mov	r1, r6
 800710a:	4620      	mov	r0, r4
 800710c:	f000 fa7e 	bl	800760c <_Bfree>
 8007110:	2f00      	cmp	r7, #0
 8007112:	f43f aeab 	beq.w	8006e6c <_dtoa_r+0x6c4>
 8007116:	f1b8 0f00 	cmp.w	r8, #0
 800711a:	d005      	beq.n	8007128 <_dtoa_r+0x980>
 800711c:	45b8      	cmp	r8, r7
 800711e:	d003      	beq.n	8007128 <_dtoa_r+0x980>
 8007120:	4641      	mov	r1, r8
 8007122:	4620      	mov	r0, r4
 8007124:	f000 fa72 	bl	800760c <_Bfree>
 8007128:	4639      	mov	r1, r7
 800712a:	4620      	mov	r0, r4
 800712c:	f000 fa6e 	bl	800760c <_Bfree>
 8007130:	e69c      	b.n	8006e6c <_dtoa_r+0x6c4>
 8007132:	2600      	movs	r6, #0
 8007134:	4637      	mov	r7, r6
 8007136:	e7e1      	b.n	80070fc <_dtoa_r+0x954>
 8007138:	46bb      	mov	fp, r7
 800713a:	4637      	mov	r7, r6
 800713c:	e599      	b.n	8006c72 <_dtoa_r+0x4ca>
 800713e:	bf00      	nop
 8007140:	40240000 	.word	0x40240000
 8007144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 80c8 	beq.w	80072dc <_dtoa_r+0xb34>
 800714c:	9b04      	ldr	r3, [sp, #16]
 800714e:	9301      	str	r3, [sp, #4]
 8007150:	2d00      	cmp	r5, #0
 8007152:	dd05      	ble.n	8007160 <_dtoa_r+0x9b8>
 8007154:	4639      	mov	r1, r7
 8007156:	462a      	mov	r2, r5
 8007158:	4620      	mov	r0, r4
 800715a:	f000 fc27 	bl	80079ac <__lshift>
 800715e:	4607      	mov	r7, r0
 8007160:	f1b8 0f00 	cmp.w	r8, #0
 8007164:	d05b      	beq.n	800721e <_dtoa_r+0xa76>
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	4620      	mov	r0, r4
 800716a:	f000 fa0f 	bl	800758c <_Balloc>
 800716e:	4605      	mov	r5, r0
 8007170:	b928      	cbnz	r0, 800717e <_dtoa_r+0x9d6>
 8007172:	4b83      	ldr	r3, [pc, #524]	; (8007380 <_dtoa_r+0xbd8>)
 8007174:	4602      	mov	r2, r0
 8007176:	f240 21ef 	movw	r1, #751	; 0x2ef
 800717a:	f7ff bb2e 	b.w	80067da <_dtoa_r+0x32>
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	3202      	adds	r2, #2
 8007182:	0092      	lsls	r2, r2, #2
 8007184:	f107 010c 	add.w	r1, r7, #12
 8007188:	300c      	adds	r0, #12
 800718a:	f000 fe39 	bl	8007e00 <memcpy>
 800718e:	2201      	movs	r2, #1
 8007190:	4629      	mov	r1, r5
 8007192:	4620      	mov	r0, r4
 8007194:	f000 fc0a 	bl	80079ac <__lshift>
 8007198:	9b00      	ldr	r3, [sp, #0]
 800719a:	3301      	adds	r3, #1
 800719c:	9304      	str	r3, [sp, #16]
 800719e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071a2:	4413      	add	r3, r2
 80071a4:	9308      	str	r3, [sp, #32]
 80071a6:	9b02      	ldr	r3, [sp, #8]
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	46b8      	mov	r8, r7
 80071ae:	9306      	str	r3, [sp, #24]
 80071b0:	4607      	mov	r7, r0
 80071b2:	9b04      	ldr	r3, [sp, #16]
 80071b4:	4631      	mov	r1, r6
 80071b6:	3b01      	subs	r3, #1
 80071b8:	4650      	mov	r0, sl
 80071ba:	9301      	str	r3, [sp, #4]
 80071bc:	f7ff fa69 	bl	8006692 <quorem>
 80071c0:	4641      	mov	r1, r8
 80071c2:	9002      	str	r0, [sp, #8]
 80071c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80071c8:	4650      	mov	r0, sl
 80071ca:	f000 fc5b 	bl	8007a84 <__mcmp>
 80071ce:	463a      	mov	r2, r7
 80071d0:	9005      	str	r0, [sp, #20]
 80071d2:	4631      	mov	r1, r6
 80071d4:	4620      	mov	r0, r4
 80071d6:	f000 fc71 	bl	8007abc <__mdiff>
 80071da:	68c2      	ldr	r2, [r0, #12]
 80071dc:	4605      	mov	r5, r0
 80071de:	bb02      	cbnz	r2, 8007222 <_dtoa_r+0xa7a>
 80071e0:	4601      	mov	r1, r0
 80071e2:	4650      	mov	r0, sl
 80071e4:	f000 fc4e 	bl	8007a84 <__mcmp>
 80071e8:	4602      	mov	r2, r0
 80071ea:	4629      	mov	r1, r5
 80071ec:	4620      	mov	r0, r4
 80071ee:	9209      	str	r2, [sp, #36]	; 0x24
 80071f0:	f000 fa0c 	bl	800760c <_Bfree>
 80071f4:	9b07      	ldr	r3, [sp, #28]
 80071f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071f8:	9d04      	ldr	r5, [sp, #16]
 80071fa:	ea43 0102 	orr.w	r1, r3, r2
 80071fe:	9b06      	ldr	r3, [sp, #24]
 8007200:	4319      	orrs	r1, r3
 8007202:	d110      	bne.n	8007226 <_dtoa_r+0xa7e>
 8007204:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007208:	d029      	beq.n	800725e <_dtoa_r+0xab6>
 800720a:	9b05      	ldr	r3, [sp, #20]
 800720c:	2b00      	cmp	r3, #0
 800720e:	dd02      	ble.n	8007216 <_dtoa_r+0xa6e>
 8007210:	9b02      	ldr	r3, [sp, #8]
 8007212:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007216:	9b01      	ldr	r3, [sp, #4]
 8007218:	f883 9000 	strb.w	r9, [r3]
 800721c:	e774      	b.n	8007108 <_dtoa_r+0x960>
 800721e:	4638      	mov	r0, r7
 8007220:	e7ba      	b.n	8007198 <_dtoa_r+0x9f0>
 8007222:	2201      	movs	r2, #1
 8007224:	e7e1      	b.n	80071ea <_dtoa_r+0xa42>
 8007226:	9b05      	ldr	r3, [sp, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	db04      	blt.n	8007236 <_dtoa_r+0xa8e>
 800722c:	9907      	ldr	r1, [sp, #28]
 800722e:	430b      	orrs	r3, r1
 8007230:	9906      	ldr	r1, [sp, #24]
 8007232:	430b      	orrs	r3, r1
 8007234:	d120      	bne.n	8007278 <_dtoa_r+0xad0>
 8007236:	2a00      	cmp	r2, #0
 8007238:	dded      	ble.n	8007216 <_dtoa_r+0xa6e>
 800723a:	4651      	mov	r1, sl
 800723c:	2201      	movs	r2, #1
 800723e:	4620      	mov	r0, r4
 8007240:	f000 fbb4 	bl	80079ac <__lshift>
 8007244:	4631      	mov	r1, r6
 8007246:	4682      	mov	sl, r0
 8007248:	f000 fc1c 	bl	8007a84 <__mcmp>
 800724c:	2800      	cmp	r0, #0
 800724e:	dc03      	bgt.n	8007258 <_dtoa_r+0xab0>
 8007250:	d1e1      	bne.n	8007216 <_dtoa_r+0xa6e>
 8007252:	f019 0f01 	tst.w	r9, #1
 8007256:	d0de      	beq.n	8007216 <_dtoa_r+0xa6e>
 8007258:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800725c:	d1d8      	bne.n	8007210 <_dtoa_r+0xa68>
 800725e:	9a01      	ldr	r2, [sp, #4]
 8007260:	2339      	movs	r3, #57	; 0x39
 8007262:	7013      	strb	r3, [r2, #0]
 8007264:	462b      	mov	r3, r5
 8007266:	461d      	mov	r5, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800726e:	2a39      	cmp	r2, #57	; 0x39
 8007270:	d06c      	beq.n	800734c <_dtoa_r+0xba4>
 8007272:	3201      	adds	r2, #1
 8007274:	701a      	strb	r2, [r3, #0]
 8007276:	e747      	b.n	8007108 <_dtoa_r+0x960>
 8007278:	2a00      	cmp	r2, #0
 800727a:	dd07      	ble.n	800728c <_dtoa_r+0xae4>
 800727c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007280:	d0ed      	beq.n	800725e <_dtoa_r+0xab6>
 8007282:	9a01      	ldr	r2, [sp, #4]
 8007284:	f109 0301 	add.w	r3, r9, #1
 8007288:	7013      	strb	r3, [r2, #0]
 800728a:	e73d      	b.n	8007108 <_dtoa_r+0x960>
 800728c:	9b04      	ldr	r3, [sp, #16]
 800728e:	9a08      	ldr	r2, [sp, #32]
 8007290:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007294:	4293      	cmp	r3, r2
 8007296:	d043      	beq.n	8007320 <_dtoa_r+0xb78>
 8007298:	4651      	mov	r1, sl
 800729a:	2300      	movs	r3, #0
 800729c:	220a      	movs	r2, #10
 800729e:	4620      	mov	r0, r4
 80072a0:	f000 f9d6 	bl	8007650 <__multadd>
 80072a4:	45b8      	cmp	r8, r7
 80072a6:	4682      	mov	sl, r0
 80072a8:	f04f 0300 	mov.w	r3, #0
 80072ac:	f04f 020a 	mov.w	r2, #10
 80072b0:	4641      	mov	r1, r8
 80072b2:	4620      	mov	r0, r4
 80072b4:	d107      	bne.n	80072c6 <_dtoa_r+0xb1e>
 80072b6:	f000 f9cb 	bl	8007650 <__multadd>
 80072ba:	4680      	mov	r8, r0
 80072bc:	4607      	mov	r7, r0
 80072be:	9b04      	ldr	r3, [sp, #16]
 80072c0:	3301      	adds	r3, #1
 80072c2:	9304      	str	r3, [sp, #16]
 80072c4:	e775      	b.n	80071b2 <_dtoa_r+0xa0a>
 80072c6:	f000 f9c3 	bl	8007650 <__multadd>
 80072ca:	4639      	mov	r1, r7
 80072cc:	4680      	mov	r8, r0
 80072ce:	2300      	movs	r3, #0
 80072d0:	220a      	movs	r2, #10
 80072d2:	4620      	mov	r0, r4
 80072d4:	f000 f9bc 	bl	8007650 <__multadd>
 80072d8:	4607      	mov	r7, r0
 80072da:	e7f0      	b.n	80072be <_dtoa_r+0xb16>
 80072dc:	9b04      	ldr	r3, [sp, #16]
 80072de:	9301      	str	r3, [sp, #4]
 80072e0:	9d00      	ldr	r5, [sp, #0]
 80072e2:	4631      	mov	r1, r6
 80072e4:	4650      	mov	r0, sl
 80072e6:	f7ff f9d4 	bl	8006692 <quorem>
 80072ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80072ee:	9b00      	ldr	r3, [sp, #0]
 80072f0:	f805 9b01 	strb.w	r9, [r5], #1
 80072f4:	1aea      	subs	r2, r5, r3
 80072f6:	9b01      	ldr	r3, [sp, #4]
 80072f8:	4293      	cmp	r3, r2
 80072fa:	dd07      	ble.n	800730c <_dtoa_r+0xb64>
 80072fc:	4651      	mov	r1, sl
 80072fe:	2300      	movs	r3, #0
 8007300:	220a      	movs	r2, #10
 8007302:	4620      	mov	r0, r4
 8007304:	f000 f9a4 	bl	8007650 <__multadd>
 8007308:	4682      	mov	sl, r0
 800730a:	e7ea      	b.n	80072e2 <_dtoa_r+0xb3a>
 800730c:	9b01      	ldr	r3, [sp, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	bfc8      	it	gt
 8007312:	461d      	movgt	r5, r3
 8007314:	9b00      	ldr	r3, [sp, #0]
 8007316:	bfd8      	it	le
 8007318:	2501      	movle	r5, #1
 800731a:	441d      	add	r5, r3
 800731c:	f04f 0800 	mov.w	r8, #0
 8007320:	4651      	mov	r1, sl
 8007322:	2201      	movs	r2, #1
 8007324:	4620      	mov	r0, r4
 8007326:	f000 fb41 	bl	80079ac <__lshift>
 800732a:	4631      	mov	r1, r6
 800732c:	4682      	mov	sl, r0
 800732e:	f000 fba9 	bl	8007a84 <__mcmp>
 8007332:	2800      	cmp	r0, #0
 8007334:	dc96      	bgt.n	8007264 <_dtoa_r+0xabc>
 8007336:	d102      	bne.n	800733e <_dtoa_r+0xb96>
 8007338:	f019 0f01 	tst.w	r9, #1
 800733c:	d192      	bne.n	8007264 <_dtoa_r+0xabc>
 800733e:	462b      	mov	r3, r5
 8007340:	461d      	mov	r5, r3
 8007342:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007346:	2a30      	cmp	r2, #48	; 0x30
 8007348:	d0fa      	beq.n	8007340 <_dtoa_r+0xb98>
 800734a:	e6dd      	b.n	8007108 <_dtoa_r+0x960>
 800734c:	9a00      	ldr	r2, [sp, #0]
 800734e:	429a      	cmp	r2, r3
 8007350:	d189      	bne.n	8007266 <_dtoa_r+0xabe>
 8007352:	f10b 0b01 	add.w	fp, fp, #1
 8007356:	2331      	movs	r3, #49	; 0x31
 8007358:	e796      	b.n	8007288 <_dtoa_r+0xae0>
 800735a:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <_dtoa_r+0xbdc>)
 800735c:	f7ff ba99 	b.w	8006892 <_dtoa_r+0xea>
 8007360:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007362:	2b00      	cmp	r3, #0
 8007364:	f47f aa6d 	bne.w	8006842 <_dtoa_r+0x9a>
 8007368:	4b07      	ldr	r3, [pc, #28]	; (8007388 <_dtoa_r+0xbe0>)
 800736a:	f7ff ba92 	b.w	8006892 <_dtoa_r+0xea>
 800736e:	9b01      	ldr	r3, [sp, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	dcb5      	bgt.n	80072e0 <_dtoa_r+0xb38>
 8007374:	9b07      	ldr	r3, [sp, #28]
 8007376:	2b02      	cmp	r3, #2
 8007378:	f73f aeb1 	bgt.w	80070de <_dtoa_r+0x936>
 800737c:	e7b0      	b.n	80072e0 <_dtoa_r+0xb38>
 800737e:	bf00      	nop
 8007380:	08008518 	.word	0x08008518
 8007384:	08008478 	.word	0x08008478
 8007388:	0800849c 	.word	0x0800849c

0800738c <_free_r>:
 800738c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800738e:	2900      	cmp	r1, #0
 8007390:	d044      	beq.n	800741c <_free_r+0x90>
 8007392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007396:	9001      	str	r0, [sp, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	f1a1 0404 	sub.w	r4, r1, #4
 800739e:	bfb8      	it	lt
 80073a0:	18e4      	addlt	r4, r4, r3
 80073a2:	f000 f8e7 	bl	8007574 <__malloc_lock>
 80073a6:	4a1e      	ldr	r2, [pc, #120]	; (8007420 <_free_r+0x94>)
 80073a8:	9801      	ldr	r0, [sp, #4]
 80073aa:	6813      	ldr	r3, [r2, #0]
 80073ac:	b933      	cbnz	r3, 80073bc <_free_r+0x30>
 80073ae:	6063      	str	r3, [r4, #4]
 80073b0:	6014      	str	r4, [r2, #0]
 80073b2:	b003      	add	sp, #12
 80073b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073b8:	f000 b8e2 	b.w	8007580 <__malloc_unlock>
 80073bc:	42a3      	cmp	r3, r4
 80073be:	d908      	bls.n	80073d2 <_free_r+0x46>
 80073c0:	6825      	ldr	r5, [r4, #0]
 80073c2:	1961      	adds	r1, r4, r5
 80073c4:	428b      	cmp	r3, r1
 80073c6:	bf01      	itttt	eq
 80073c8:	6819      	ldreq	r1, [r3, #0]
 80073ca:	685b      	ldreq	r3, [r3, #4]
 80073cc:	1949      	addeq	r1, r1, r5
 80073ce:	6021      	streq	r1, [r4, #0]
 80073d0:	e7ed      	b.n	80073ae <_free_r+0x22>
 80073d2:	461a      	mov	r2, r3
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	b10b      	cbz	r3, 80073dc <_free_r+0x50>
 80073d8:	42a3      	cmp	r3, r4
 80073da:	d9fa      	bls.n	80073d2 <_free_r+0x46>
 80073dc:	6811      	ldr	r1, [r2, #0]
 80073de:	1855      	adds	r5, r2, r1
 80073e0:	42a5      	cmp	r5, r4
 80073e2:	d10b      	bne.n	80073fc <_free_r+0x70>
 80073e4:	6824      	ldr	r4, [r4, #0]
 80073e6:	4421      	add	r1, r4
 80073e8:	1854      	adds	r4, r2, r1
 80073ea:	42a3      	cmp	r3, r4
 80073ec:	6011      	str	r1, [r2, #0]
 80073ee:	d1e0      	bne.n	80073b2 <_free_r+0x26>
 80073f0:	681c      	ldr	r4, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	6053      	str	r3, [r2, #4]
 80073f6:	440c      	add	r4, r1
 80073f8:	6014      	str	r4, [r2, #0]
 80073fa:	e7da      	b.n	80073b2 <_free_r+0x26>
 80073fc:	d902      	bls.n	8007404 <_free_r+0x78>
 80073fe:	230c      	movs	r3, #12
 8007400:	6003      	str	r3, [r0, #0]
 8007402:	e7d6      	b.n	80073b2 <_free_r+0x26>
 8007404:	6825      	ldr	r5, [r4, #0]
 8007406:	1961      	adds	r1, r4, r5
 8007408:	428b      	cmp	r3, r1
 800740a:	bf04      	itt	eq
 800740c:	6819      	ldreq	r1, [r3, #0]
 800740e:	685b      	ldreq	r3, [r3, #4]
 8007410:	6063      	str	r3, [r4, #4]
 8007412:	bf04      	itt	eq
 8007414:	1949      	addeq	r1, r1, r5
 8007416:	6021      	streq	r1, [r4, #0]
 8007418:	6054      	str	r4, [r2, #4]
 800741a:	e7ca      	b.n	80073b2 <_free_r+0x26>
 800741c:	b003      	add	sp, #12
 800741e:	bd30      	pop	{r4, r5, pc}
 8007420:	20010750 	.word	0x20010750

08007424 <malloc>:
 8007424:	4b02      	ldr	r3, [pc, #8]	; (8007430 <malloc+0xc>)
 8007426:	4601      	mov	r1, r0
 8007428:	6818      	ldr	r0, [r3, #0]
 800742a:	f000 b823 	b.w	8007474 <_malloc_r>
 800742e:	bf00      	nop
 8007430:	200000fc 	.word	0x200000fc

08007434 <sbrk_aligned>:
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	4e0e      	ldr	r6, [pc, #56]	; (8007470 <sbrk_aligned+0x3c>)
 8007438:	460c      	mov	r4, r1
 800743a:	6831      	ldr	r1, [r6, #0]
 800743c:	4605      	mov	r5, r0
 800743e:	b911      	cbnz	r1, 8007446 <sbrk_aligned+0x12>
 8007440:	f000 fcce 	bl	8007de0 <_sbrk_r>
 8007444:	6030      	str	r0, [r6, #0]
 8007446:	4621      	mov	r1, r4
 8007448:	4628      	mov	r0, r5
 800744a:	f000 fcc9 	bl	8007de0 <_sbrk_r>
 800744e:	1c43      	adds	r3, r0, #1
 8007450:	d00a      	beq.n	8007468 <sbrk_aligned+0x34>
 8007452:	1cc4      	adds	r4, r0, #3
 8007454:	f024 0403 	bic.w	r4, r4, #3
 8007458:	42a0      	cmp	r0, r4
 800745a:	d007      	beq.n	800746c <sbrk_aligned+0x38>
 800745c:	1a21      	subs	r1, r4, r0
 800745e:	4628      	mov	r0, r5
 8007460:	f000 fcbe 	bl	8007de0 <_sbrk_r>
 8007464:	3001      	adds	r0, #1
 8007466:	d101      	bne.n	800746c <sbrk_aligned+0x38>
 8007468:	f04f 34ff 	mov.w	r4, #4294967295
 800746c:	4620      	mov	r0, r4
 800746e:	bd70      	pop	{r4, r5, r6, pc}
 8007470:	20010754 	.word	0x20010754

08007474 <_malloc_r>:
 8007474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007478:	1ccd      	adds	r5, r1, #3
 800747a:	f025 0503 	bic.w	r5, r5, #3
 800747e:	3508      	adds	r5, #8
 8007480:	2d0c      	cmp	r5, #12
 8007482:	bf38      	it	cc
 8007484:	250c      	movcc	r5, #12
 8007486:	2d00      	cmp	r5, #0
 8007488:	4607      	mov	r7, r0
 800748a:	db01      	blt.n	8007490 <_malloc_r+0x1c>
 800748c:	42a9      	cmp	r1, r5
 800748e:	d905      	bls.n	800749c <_malloc_r+0x28>
 8007490:	230c      	movs	r3, #12
 8007492:	603b      	str	r3, [r7, #0]
 8007494:	2600      	movs	r6, #0
 8007496:	4630      	mov	r0, r6
 8007498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800749c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007570 <_malloc_r+0xfc>
 80074a0:	f000 f868 	bl	8007574 <__malloc_lock>
 80074a4:	f8d8 3000 	ldr.w	r3, [r8]
 80074a8:	461c      	mov	r4, r3
 80074aa:	bb5c      	cbnz	r4, 8007504 <_malloc_r+0x90>
 80074ac:	4629      	mov	r1, r5
 80074ae:	4638      	mov	r0, r7
 80074b0:	f7ff ffc0 	bl	8007434 <sbrk_aligned>
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	4604      	mov	r4, r0
 80074b8:	d155      	bne.n	8007566 <_malloc_r+0xf2>
 80074ba:	f8d8 4000 	ldr.w	r4, [r8]
 80074be:	4626      	mov	r6, r4
 80074c0:	2e00      	cmp	r6, #0
 80074c2:	d145      	bne.n	8007550 <_malloc_r+0xdc>
 80074c4:	2c00      	cmp	r4, #0
 80074c6:	d048      	beq.n	800755a <_malloc_r+0xe6>
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	4631      	mov	r1, r6
 80074cc:	4638      	mov	r0, r7
 80074ce:	eb04 0903 	add.w	r9, r4, r3
 80074d2:	f000 fc85 	bl	8007de0 <_sbrk_r>
 80074d6:	4581      	cmp	r9, r0
 80074d8:	d13f      	bne.n	800755a <_malloc_r+0xe6>
 80074da:	6821      	ldr	r1, [r4, #0]
 80074dc:	1a6d      	subs	r5, r5, r1
 80074de:	4629      	mov	r1, r5
 80074e0:	4638      	mov	r0, r7
 80074e2:	f7ff ffa7 	bl	8007434 <sbrk_aligned>
 80074e6:	3001      	adds	r0, #1
 80074e8:	d037      	beq.n	800755a <_malloc_r+0xe6>
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	442b      	add	r3, r5
 80074ee:	6023      	str	r3, [r4, #0]
 80074f0:	f8d8 3000 	ldr.w	r3, [r8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d038      	beq.n	800756a <_malloc_r+0xf6>
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	42a2      	cmp	r2, r4
 80074fc:	d12b      	bne.n	8007556 <_malloc_r+0xe2>
 80074fe:	2200      	movs	r2, #0
 8007500:	605a      	str	r2, [r3, #4]
 8007502:	e00f      	b.n	8007524 <_malloc_r+0xb0>
 8007504:	6822      	ldr	r2, [r4, #0]
 8007506:	1b52      	subs	r2, r2, r5
 8007508:	d41f      	bmi.n	800754a <_malloc_r+0xd6>
 800750a:	2a0b      	cmp	r2, #11
 800750c:	d917      	bls.n	800753e <_malloc_r+0xca>
 800750e:	1961      	adds	r1, r4, r5
 8007510:	42a3      	cmp	r3, r4
 8007512:	6025      	str	r5, [r4, #0]
 8007514:	bf18      	it	ne
 8007516:	6059      	strne	r1, [r3, #4]
 8007518:	6863      	ldr	r3, [r4, #4]
 800751a:	bf08      	it	eq
 800751c:	f8c8 1000 	streq.w	r1, [r8]
 8007520:	5162      	str	r2, [r4, r5]
 8007522:	604b      	str	r3, [r1, #4]
 8007524:	4638      	mov	r0, r7
 8007526:	f104 060b 	add.w	r6, r4, #11
 800752a:	f000 f829 	bl	8007580 <__malloc_unlock>
 800752e:	f026 0607 	bic.w	r6, r6, #7
 8007532:	1d23      	adds	r3, r4, #4
 8007534:	1af2      	subs	r2, r6, r3
 8007536:	d0ae      	beq.n	8007496 <_malloc_r+0x22>
 8007538:	1b9b      	subs	r3, r3, r6
 800753a:	50a3      	str	r3, [r4, r2]
 800753c:	e7ab      	b.n	8007496 <_malloc_r+0x22>
 800753e:	42a3      	cmp	r3, r4
 8007540:	6862      	ldr	r2, [r4, #4]
 8007542:	d1dd      	bne.n	8007500 <_malloc_r+0x8c>
 8007544:	f8c8 2000 	str.w	r2, [r8]
 8007548:	e7ec      	b.n	8007524 <_malloc_r+0xb0>
 800754a:	4623      	mov	r3, r4
 800754c:	6864      	ldr	r4, [r4, #4]
 800754e:	e7ac      	b.n	80074aa <_malloc_r+0x36>
 8007550:	4634      	mov	r4, r6
 8007552:	6876      	ldr	r6, [r6, #4]
 8007554:	e7b4      	b.n	80074c0 <_malloc_r+0x4c>
 8007556:	4613      	mov	r3, r2
 8007558:	e7cc      	b.n	80074f4 <_malloc_r+0x80>
 800755a:	230c      	movs	r3, #12
 800755c:	603b      	str	r3, [r7, #0]
 800755e:	4638      	mov	r0, r7
 8007560:	f000 f80e 	bl	8007580 <__malloc_unlock>
 8007564:	e797      	b.n	8007496 <_malloc_r+0x22>
 8007566:	6025      	str	r5, [r4, #0]
 8007568:	e7dc      	b.n	8007524 <_malloc_r+0xb0>
 800756a:	605b      	str	r3, [r3, #4]
 800756c:	deff      	udf	#255	; 0xff
 800756e:	bf00      	nop
 8007570:	20010750 	.word	0x20010750

08007574 <__malloc_lock>:
 8007574:	4801      	ldr	r0, [pc, #4]	; (800757c <__malloc_lock+0x8>)
 8007576:	f7ff b88a 	b.w	800668e <__retarget_lock_acquire_recursive>
 800757a:	bf00      	nop
 800757c:	2001074c 	.word	0x2001074c

08007580 <__malloc_unlock>:
 8007580:	4801      	ldr	r0, [pc, #4]	; (8007588 <__malloc_unlock+0x8>)
 8007582:	f7ff b885 	b.w	8006690 <__retarget_lock_release_recursive>
 8007586:	bf00      	nop
 8007588:	2001074c 	.word	0x2001074c

0800758c <_Balloc>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	69c6      	ldr	r6, [r0, #28]
 8007590:	4604      	mov	r4, r0
 8007592:	460d      	mov	r5, r1
 8007594:	b976      	cbnz	r6, 80075b4 <_Balloc+0x28>
 8007596:	2010      	movs	r0, #16
 8007598:	f7ff ff44 	bl	8007424 <malloc>
 800759c:	4602      	mov	r2, r0
 800759e:	61e0      	str	r0, [r4, #28]
 80075a0:	b920      	cbnz	r0, 80075ac <_Balloc+0x20>
 80075a2:	4b18      	ldr	r3, [pc, #96]	; (8007604 <_Balloc+0x78>)
 80075a4:	4818      	ldr	r0, [pc, #96]	; (8007608 <_Balloc+0x7c>)
 80075a6:	216b      	movs	r1, #107	; 0x6b
 80075a8:	f000 fc38 	bl	8007e1c <__assert_func>
 80075ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075b0:	6006      	str	r6, [r0, #0]
 80075b2:	60c6      	str	r6, [r0, #12]
 80075b4:	69e6      	ldr	r6, [r4, #28]
 80075b6:	68f3      	ldr	r3, [r6, #12]
 80075b8:	b183      	cbz	r3, 80075dc <_Balloc+0x50>
 80075ba:	69e3      	ldr	r3, [r4, #28]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075c2:	b9b8      	cbnz	r0, 80075f4 <_Balloc+0x68>
 80075c4:	2101      	movs	r1, #1
 80075c6:	fa01 f605 	lsl.w	r6, r1, r5
 80075ca:	1d72      	adds	r2, r6, #5
 80075cc:	0092      	lsls	r2, r2, #2
 80075ce:	4620      	mov	r0, r4
 80075d0:	f000 fc42 	bl	8007e58 <_calloc_r>
 80075d4:	b160      	cbz	r0, 80075f0 <_Balloc+0x64>
 80075d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075da:	e00e      	b.n	80075fa <_Balloc+0x6e>
 80075dc:	2221      	movs	r2, #33	; 0x21
 80075de:	2104      	movs	r1, #4
 80075e0:	4620      	mov	r0, r4
 80075e2:	f000 fc39 	bl	8007e58 <_calloc_r>
 80075e6:	69e3      	ldr	r3, [r4, #28]
 80075e8:	60f0      	str	r0, [r6, #12]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e4      	bne.n	80075ba <_Balloc+0x2e>
 80075f0:	2000      	movs	r0, #0
 80075f2:	bd70      	pop	{r4, r5, r6, pc}
 80075f4:	6802      	ldr	r2, [r0, #0]
 80075f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075fa:	2300      	movs	r3, #0
 80075fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007600:	e7f7      	b.n	80075f2 <_Balloc+0x66>
 8007602:	bf00      	nop
 8007604:	080084a9 	.word	0x080084a9
 8007608:	08008529 	.word	0x08008529

0800760c <_Bfree>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	69c6      	ldr	r6, [r0, #28]
 8007610:	4605      	mov	r5, r0
 8007612:	460c      	mov	r4, r1
 8007614:	b976      	cbnz	r6, 8007634 <_Bfree+0x28>
 8007616:	2010      	movs	r0, #16
 8007618:	f7ff ff04 	bl	8007424 <malloc>
 800761c:	4602      	mov	r2, r0
 800761e:	61e8      	str	r0, [r5, #28]
 8007620:	b920      	cbnz	r0, 800762c <_Bfree+0x20>
 8007622:	4b09      	ldr	r3, [pc, #36]	; (8007648 <_Bfree+0x3c>)
 8007624:	4809      	ldr	r0, [pc, #36]	; (800764c <_Bfree+0x40>)
 8007626:	218f      	movs	r1, #143	; 0x8f
 8007628:	f000 fbf8 	bl	8007e1c <__assert_func>
 800762c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007630:	6006      	str	r6, [r0, #0]
 8007632:	60c6      	str	r6, [r0, #12]
 8007634:	b13c      	cbz	r4, 8007646 <_Bfree+0x3a>
 8007636:	69eb      	ldr	r3, [r5, #28]
 8007638:	6862      	ldr	r2, [r4, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007640:	6021      	str	r1, [r4, #0]
 8007642:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007646:	bd70      	pop	{r4, r5, r6, pc}
 8007648:	080084a9 	.word	0x080084a9
 800764c:	08008529 	.word	0x08008529

08007650 <__multadd>:
 8007650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007654:	690d      	ldr	r5, [r1, #16]
 8007656:	4607      	mov	r7, r0
 8007658:	460c      	mov	r4, r1
 800765a:	461e      	mov	r6, r3
 800765c:	f101 0c14 	add.w	ip, r1, #20
 8007660:	2000      	movs	r0, #0
 8007662:	f8dc 3000 	ldr.w	r3, [ip]
 8007666:	b299      	uxth	r1, r3
 8007668:	fb02 6101 	mla	r1, r2, r1, r6
 800766c:	0c1e      	lsrs	r6, r3, #16
 800766e:	0c0b      	lsrs	r3, r1, #16
 8007670:	fb02 3306 	mla	r3, r2, r6, r3
 8007674:	b289      	uxth	r1, r1
 8007676:	3001      	adds	r0, #1
 8007678:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800767c:	4285      	cmp	r5, r0
 800767e:	f84c 1b04 	str.w	r1, [ip], #4
 8007682:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007686:	dcec      	bgt.n	8007662 <__multadd+0x12>
 8007688:	b30e      	cbz	r6, 80076ce <__multadd+0x7e>
 800768a:	68a3      	ldr	r3, [r4, #8]
 800768c:	42ab      	cmp	r3, r5
 800768e:	dc19      	bgt.n	80076c4 <__multadd+0x74>
 8007690:	6861      	ldr	r1, [r4, #4]
 8007692:	4638      	mov	r0, r7
 8007694:	3101      	adds	r1, #1
 8007696:	f7ff ff79 	bl	800758c <_Balloc>
 800769a:	4680      	mov	r8, r0
 800769c:	b928      	cbnz	r0, 80076aa <__multadd+0x5a>
 800769e:	4602      	mov	r2, r0
 80076a0:	4b0c      	ldr	r3, [pc, #48]	; (80076d4 <__multadd+0x84>)
 80076a2:	480d      	ldr	r0, [pc, #52]	; (80076d8 <__multadd+0x88>)
 80076a4:	21ba      	movs	r1, #186	; 0xba
 80076a6:	f000 fbb9 	bl	8007e1c <__assert_func>
 80076aa:	6922      	ldr	r2, [r4, #16]
 80076ac:	3202      	adds	r2, #2
 80076ae:	f104 010c 	add.w	r1, r4, #12
 80076b2:	0092      	lsls	r2, r2, #2
 80076b4:	300c      	adds	r0, #12
 80076b6:	f000 fba3 	bl	8007e00 <memcpy>
 80076ba:	4621      	mov	r1, r4
 80076bc:	4638      	mov	r0, r7
 80076be:	f7ff ffa5 	bl	800760c <_Bfree>
 80076c2:	4644      	mov	r4, r8
 80076c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076c8:	3501      	adds	r5, #1
 80076ca:	615e      	str	r6, [r3, #20]
 80076cc:	6125      	str	r5, [r4, #16]
 80076ce:	4620      	mov	r0, r4
 80076d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076d4:	08008518 	.word	0x08008518
 80076d8:	08008529 	.word	0x08008529

080076dc <__hi0bits>:
 80076dc:	0c03      	lsrs	r3, r0, #16
 80076de:	041b      	lsls	r3, r3, #16
 80076e0:	b9d3      	cbnz	r3, 8007718 <__hi0bits+0x3c>
 80076e2:	0400      	lsls	r0, r0, #16
 80076e4:	2310      	movs	r3, #16
 80076e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80076ea:	bf04      	itt	eq
 80076ec:	0200      	lsleq	r0, r0, #8
 80076ee:	3308      	addeq	r3, #8
 80076f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80076f4:	bf04      	itt	eq
 80076f6:	0100      	lsleq	r0, r0, #4
 80076f8:	3304      	addeq	r3, #4
 80076fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076fe:	bf04      	itt	eq
 8007700:	0080      	lsleq	r0, r0, #2
 8007702:	3302      	addeq	r3, #2
 8007704:	2800      	cmp	r0, #0
 8007706:	db05      	blt.n	8007714 <__hi0bits+0x38>
 8007708:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800770c:	f103 0301 	add.w	r3, r3, #1
 8007710:	bf08      	it	eq
 8007712:	2320      	moveq	r3, #32
 8007714:	4618      	mov	r0, r3
 8007716:	4770      	bx	lr
 8007718:	2300      	movs	r3, #0
 800771a:	e7e4      	b.n	80076e6 <__hi0bits+0xa>

0800771c <__lo0bits>:
 800771c:	6803      	ldr	r3, [r0, #0]
 800771e:	f013 0207 	ands.w	r2, r3, #7
 8007722:	d00c      	beq.n	800773e <__lo0bits+0x22>
 8007724:	07d9      	lsls	r1, r3, #31
 8007726:	d422      	bmi.n	800776e <__lo0bits+0x52>
 8007728:	079a      	lsls	r2, r3, #30
 800772a:	bf49      	itett	mi
 800772c:	085b      	lsrmi	r3, r3, #1
 800772e:	089b      	lsrpl	r3, r3, #2
 8007730:	6003      	strmi	r3, [r0, #0]
 8007732:	2201      	movmi	r2, #1
 8007734:	bf5c      	itt	pl
 8007736:	6003      	strpl	r3, [r0, #0]
 8007738:	2202      	movpl	r2, #2
 800773a:	4610      	mov	r0, r2
 800773c:	4770      	bx	lr
 800773e:	b299      	uxth	r1, r3
 8007740:	b909      	cbnz	r1, 8007746 <__lo0bits+0x2a>
 8007742:	0c1b      	lsrs	r3, r3, #16
 8007744:	2210      	movs	r2, #16
 8007746:	b2d9      	uxtb	r1, r3
 8007748:	b909      	cbnz	r1, 800774e <__lo0bits+0x32>
 800774a:	3208      	adds	r2, #8
 800774c:	0a1b      	lsrs	r3, r3, #8
 800774e:	0719      	lsls	r1, r3, #28
 8007750:	bf04      	itt	eq
 8007752:	091b      	lsreq	r3, r3, #4
 8007754:	3204      	addeq	r2, #4
 8007756:	0799      	lsls	r1, r3, #30
 8007758:	bf04      	itt	eq
 800775a:	089b      	lsreq	r3, r3, #2
 800775c:	3202      	addeq	r2, #2
 800775e:	07d9      	lsls	r1, r3, #31
 8007760:	d403      	bmi.n	800776a <__lo0bits+0x4e>
 8007762:	085b      	lsrs	r3, r3, #1
 8007764:	f102 0201 	add.w	r2, r2, #1
 8007768:	d003      	beq.n	8007772 <__lo0bits+0x56>
 800776a:	6003      	str	r3, [r0, #0]
 800776c:	e7e5      	b.n	800773a <__lo0bits+0x1e>
 800776e:	2200      	movs	r2, #0
 8007770:	e7e3      	b.n	800773a <__lo0bits+0x1e>
 8007772:	2220      	movs	r2, #32
 8007774:	e7e1      	b.n	800773a <__lo0bits+0x1e>
	...

08007778 <__i2b>:
 8007778:	b510      	push	{r4, lr}
 800777a:	460c      	mov	r4, r1
 800777c:	2101      	movs	r1, #1
 800777e:	f7ff ff05 	bl	800758c <_Balloc>
 8007782:	4602      	mov	r2, r0
 8007784:	b928      	cbnz	r0, 8007792 <__i2b+0x1a>
 8007786:	4b05      	ldr	r3, [pc, #20]	; (800779c <__i2b+0x24>)
 8007788:	4805      	ldr	r0, [pc, #20]	; (80077a0 <__i2b+0x28>)
 800778a:	f240 1145 	movw	r1, #325	; 0x145
 800778e:	f000 fb45 	bl	8007e1c <__assert_func>
 8007792:	2301      	movs	r3, #1
 8007794:	6144      	str	r4, [r0, #20]
 8007796:	6103      	str	r3, [r0, #16]
 8007798:	bd10      	pop	{r4, pc}
 800779a:	bf00      	nop
 800779c:	08008518 	.word	0x08008518
 80077a0:	08008529 	.word	0x08008529

080077a4 <__multiply>:
 80077a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a8:	4691      	mov	r9, r2
 80077aa:	690a      	ldr	r2, [r1, #16]
 80077ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	bfb8      	it	lt
 80077b4:	460b      	movlt	r3, r1
 80077b6:	460c      	mov	r4, r1
 80077b8:	bfbc      	itt	lt
 80077ba:	464c      	movlt	r4, r9
 80077bc:	4699      	movlt	r9, r3
 80077be:	6927      	ldr	r7, [r4, #16]
 80077c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077c4:	68a3      	ldr	r3, [r4, #8]
 80077c6:	6861      	ldr	r1, [r4, #4]
 80077c8:	eb07 060a 	add.w	r6, r7, sl
 80077cc:	42b3      	cmp	r3, r6
 80077ce:	b085      	sub	sp, #20
 80077d0:	bfb8      	it	lt
 80077d2:	3101      	addlt	r1, #1
 80077d4:	f7ff feda 	bl	800758c <_Balloc>
 80077d8:	b930      	cbnz	r0, 80077e8 <__multiply+0x44>
 80077da:	4602      	mov	r2, r0
 80077dc:	4b44      	ldr	r3, [pc, #272]	; (80078f0 <__multiply+0x14c>)
 80077de:	4845      	ldr	r0, [pc, #276]	; (80078f4 <__multiply+0x150>)
 80077e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80077e4:	f000 fb1a 	bl	8007e1c <__assert_func>
 80077e8:	f100 0514 	add.w	r5, r0, #20
 80077ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077f0:	462b      	mov	r3, r5
 80077f2:	2200      	movs	r2, #0
 80077f4:	4543      	cmp	r3, r8
 80077f6:	d321      	bcc.n	800783c <__multiply+0x98>
 80077f8:	f104 0314 	add.w	r3, r4, #20
 80077fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007800:	f109 0314 	add.w	r3, r9, #20
 8007804:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007808:	9202      	str	r2, [sp, #8]
 800780a:	1b3a      	subs	r2, r7, r4
 800780c:	3a15      	subs	r2, #21
 800780e:	f022 0203 	bic.w	r2, r2, #3
 8007812:	3204      	adds	r2, #4
 8007814:	f104 0115 	add.w	r1, r4, #21
 8007818:	428f      	cmp	r7, r1
 800781a:	bf38      	it	cc
 800781c:	2204      	movcc	r2, #4
 800781e:	9201      	str	r2, [sp, #4]
 8007820:	9a02      	ldr	r2, [sp, #8]
 8007822:	9303      	str	r3, [sp, #12]
 8007824:	429a      	cmp	r2, r3
 8007826:	d80c      	bhi.n	8007842 <__multiply+0x9e>
 8007828:	2e00      	cmp	r6, #0
 800782a:	dd03      	ble.n	8007834 <__multiply+0x90>
 800782c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007830:	2b00      	cmp	r3, #0
 8007832:	d05b      	beq.n	80078ec <__multiply+0x148>
 8007834:	6106      	str	r6, [r0, #16]
 8007836:	b005      	add	sp, #20
 8007838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783c:	f843 2b04 	str.w	r2, [r3], #4
 8007840:	e7d8      	b.n	80077f4 <__multiply+0x50>
 8007842:	f8b3 a000 	ldrh.w	sl, [r3]
 8007846:	f1ba 0f00 	cmp.w	sl, #0
 800784a:	d024      	beq.n	8007896 <__multiply+0xf2>
 800784c:	f104 0e14 	add.w	lr, r4, #20
 8007850:	46a9      	mov	r9, r5
 8007852:	f04f 0c00 	mov.w	ip, #0
 8007856:	f85e 2b04 	ldr.w	r2, [lr], #4
 800785a:	f8d9 1000 	ldr.w	r1, [r9]
 800785e:	fa1f fb82 	uxth.w	fp, r2
 8007862:	b289      	uxth	r1, r1
 8007864:	fb0a 110b 	mla	r1, sl, fp, r1
 8007868:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800786c:	f8d9 2000 	ldr.w	r2, [r9]
 8007870:	4461      	add	r1, ip
 8007872:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007876:	fb0a c20b 	mla	r2, sl, fp, ip
 800787a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800787e:	b289      	uxth	r1, r1
 8007880:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007884:	4577      	cmp	r7, lr
 8007886:	f849 1b04 	str.w	r1, [r9], #4
 800788a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800788e:	d8e2      	bhi.n	8007856 <__multiply+0xb2>
 8007890:	9a01      	ldr	r2, [sp, #4]
 8007892:	f845 c002 	str.w	ip, [r5, r2]
 8007896:	9a03      	ldr	r2, [sp, #12]
 8007898:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800789c:	3304      	adds	r3, #4
 800789e:	f1b9 0f00 	cmp.w	r9, #0
 80078a2:	d021      	beq.n	80078e8 <__multiply+0x144>
 80078a4:	6829      	ldr	r1, [r5, #0]
 80078a6:	f104 0c14 	add.w	ip, r4, #20
 80078aa:	46ae      	mov	lr, r5
 80078ac:	f04f 0a00 	mov.w	sl, #0
 80078b0:	f8bc b000 	ldrh.w	fp, [ip]
 80078b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80078b8:	fb09 220b 	mla	r2, r9, fp, r2
 80078bc:	4452      	add	r2, sl
 80078be:	b289      	uxth	r1, r1
 80078c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078c4:	f84e 1b04 	str.w	r1, [lr], #4
 80078c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80078cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078d0:	f8be 1000 	ldrh.w	r1, [lr]
 80078d4:	fb09 110a 	mla	r1, r9, sl, r1
 80078d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80078dc:	4567      	cmp	r7, ip
 80078de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078e2:	d8e5      	bhi.n	80078b0 <__multiply+0x10c>
 80078e4:	9a01      	ldr	r2, [sp, #4]
 80078e6:	50a9      	str	r1, [r5, r2]
 80078e8:	3504      	adds	r5, #4
 80078ea:	e799      	b.n	8007820 <__multiply+0x7c>
 80078ec:	3e01      	subs	r6, #1
 80078ee:	e79b      	b.n	8007828 <__multiply+0x84>
 80078f0:	08008518 	.word	0x08008518
 80078f4:	08008529 	.word	0x08008529

080078f8 <__pow5mult>:
 80078f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078fc:	4615      	mov	r5, r2
 80078fe:	f012 0203 	ands.w	r2, r2, #3
 8007902:	4606      	mov	r6, r0
 8007904:	460f      	mov	r7, r1
 8007906:	d007      	beq.n	8007918 <__pow5mult+0x20>
 8007908:	4c25      	ldr	r4, [pc, #148]	; (80079a0 <__pow5mult+0xa8>)
 800790a:	3a01      	subs	r2, #1
 800790c:	2300      	movs	r3, #0
 800790e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007912:	f7ff fe9d 	bl	8007650 <__multadd>
 8007916:	4607      	mov	r7, r0
 8007918:	10ad      	asrs	r5, r5, #2
 800791a:	d03d      	beq.n	8007998 <__pow5mult+0xa0>
 800791c:	69f4      	ldr	r4, [r6, #28]
 800791e:	b97c      	cbnz	r4, 8007940 <__pow5mult+0x48>
 8007920:	2010      	movs	r0, #16
 8007922:	f7ff fd7f 	bl	8007424 <malloc>
 8007926:	4602      	mov	r2, r0
 8007928:	61f0      	str	r0, [r6, #28]
 800792a:	b928      	cbnz	r0, 8007938 <__pow5mult+0x40>
 800792c:	4b1d      	ldr	r3, [pc, #116]	; (80079a4 <__pow5mult+0xac>)
 800792e:	481e      	ldr	r0, [pc, #120]	; (80079a8 <__pow5mult+0xb0>)
 8007930:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007934:	f000 fa72 	bl	8007e1c <__assert_func>
 8007938:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800793c:	6004      	str	r4, [r0, #0]
 800793e:	60c4      	str	r4, [r0, #12]
 8007940:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007944:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007948:	b94c      	cbnz	r4, 800795e <__pow5mult+0x66>
 800794a:	f240 2171 	movw	r1, #625	; 0x271
 800794e:	4630      	mov	r0, r6
 8007950:	f7ff ff12 	bl	8007778 <__i2b>
 8007954:	2300      	movs	r3, #0
 8007956:	f8c8 0008 	str.w	r0, [r8, #8]
 800795a:	4604      	mov	r4, r0
 800795c:	6003      	str	r3, [r0, #0]
 800795e:	f04f 0900 	mov.w	r9, #0
 8007962:	07eb      	lsls	r3, r5, #31
 8007964:	d50a      	bpl.n	800797c <__pow5mult+0x84>
 8007966:	4639      	mov	r1, r7
 8007968:	4622      	mov	r2, r4
 800796a:	4630      	mov	r0, r6
 800796c:	f7ff ff1a 	bl	80077a4 <__multiply>
 8007970:	4639      	mov	r1, r7
 8007972:	4680      	mov	r8, r0
 8007974:	4630      	mov	r0, r6
 8007976:	f7ff fe49 	bl	800760c <_Bfree>
 800797a:	4647      	mov	r7, r8
 800797c:	106d      	asrs	r5, r5, #1
 800797e:	d00b      	beq.n	8007998 <__pow5mult+0xa0>
 8007980:	6820      	ldr	r0, [r4, #0]
 8007982:	b938      	cbnz	r0, 8007994 <__pow5mult+0x9c>
 8007984:	4622      	mov	r2, r4
 8007986:	4621      	mov	r1, r4
 8007988:	4630      	mov	r0, r6
 800798a:	f7ff ff0b 	bl	80077a4 <__multiply>
 800798e:	6020      	str	r0, [r4, #0]
 8007990:	f8c0 9000 	str.w	r9, [r0]
 8007994:	4604      	mov	r4, r0
 8007996:	e7e4      	b.n	8007962 <__pow5mult+0x6a>
 8007998:	4638      	mov	r0, r7
 800799a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800799e:	bf00      	nop
 80079a0:	08008678 	.word	0x08008678
 80079a4:	080084a9 	.word	0x080084a9
 80079a8:	08008529 	.word	0x08008529

080079ac <__lshift>:
 80079ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b0:	460c      	mov	r4, r1
 80079b2:	6849      	ldr	r1, [r1, #4]
 80079b4:	6923      	ldr	r3, [r4, #16]
 80079b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079ba:	68a3      	ldr	r3, [r4, #8]
 80079bc:	4607      	mov	r7, r0
 80079be:	4691      	mov	r9, r2
 80079c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079c4:	f108 0601 	add.w	r6, r8, #1
 80079c8:	42b3      	cmp	r3, r6
 80079ca:	db0b      	blt.n	80079e4 <__lshift+0x38>
 80079cc:	4638      	mov	r0, r7
 80079ce:	f7ff fddd 	bl	800758c <_Balloc>
 80079d2:	4605      	mov	r5, r0
 80079d4:	b948      	cbnz	r0, 80079ea <__lshift+0x3e>
 80079d6:	4602      	mov	r2, r0
 80079d8:	4b28      	ldr	r3, [pc, #160]	; (8007a7c <__lshift+0xd0>)
 80079da:	4829      	ldr	r0, [pc, #164]	; (8007a80 <__lshift+0xd4>)
 80079dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80079e0:	f000 fa1c 	bl	8007e1c <__assert_func>
 80079e4:	3101      	adds	r1, #1
 80079e6:	005b      	lsls	r3, r3, #1
 80079e8:	e7ee      	b.n	80079c8 <__lshift+0x1c>
 80079ea:	2300      	movs	r3, #0
 80079ec:	f100 0114 	add.w	r1, r0, #20
 80079f0:	f100 0210 	add.w	r2, r0, #16
 80079f4:	4618      	mov	r0, r3
 80079f6:	4553      	cmp	r3, sl
 80079f8:	db33      	blt.n	8007a62 <__lshift+0xb6>
 80079fa:	6920      	ldr	r0, [r4, #16]
 80079fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a00:	f104 0314 	add.w	r3, r4, #20
 8007a04:	f019 091f 	ands.w	r9, r9, #31
 8007a08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a10:	d02b      	beq.n	8007a6a <__lshift+0xbe>
 8007a12:	f1c9 0e20 	rsb	lr, r9, #32
 8007a16:	468a      	mov	sl, r1
 8007a18:	2200      	movs	r2, #0
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	fa00 f009 	lsl.w	r0, r0, r9
 8007a20:	4310      	orrs	r0, r2
 8007a22:	f84a 0b04 	str.w	r0, [sl], #4
 8007a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a2a:	459c      	cmp	ip, r3
 8007a2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a30:	d8f3      	bhi.n	8007a1a <__lshift+0x6e>
 8007a32:	ebac 0304 	sub.w	r3, ip, r4
 8007a36:	3b15      	subs	r3, #21
 8007a38:	f023 0303 	bic.w	r3, r3, #3
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	f104 0015 	add.w	r0, r4, #21
 8007a42:	4584      	cmp	ip, r0
 8007a44:	bf38      	it	cc
 8007a46:	2304      	movcc	r3, #4
 8007a48:	50ca      	str	r2, [r1, r3]
 8007a4a:	b10a      	cbz	r2, 8007a50 <__lshift+0xa4>
 8007a4c:	f108 0602 	add.w	r6, r8, #2
 8007a50:	3e01      	subs	r6, #1
 8007a52:	4638      	mov	r0, r7
 8007a54:	612e      	str	r6, [r5, #16]
 8007a56:	4621      	mov	r1, r4
 8007a58:	f7ff fdd8 	bl	800760c <_Bfree>
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a62:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a66:	3301      	adds	r3, #1
 8007a68:	e7c5      	b.n	80079f6 <__lshift+0x4a>
 8007a6a:	3904      	subs	r1, #4
 8007a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a70:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a74:	459c      	cmp	ip, r3
 8007a76:	d8f9      	bhi.n	8007a6c <__lshift+0xc0>
 8007a78:	e7ea      	b.n	8007a50 <__lshift+0xa4>
 8007a7a:	bf00      	nop
 8007a7c:	08008518 	.word	0x08008518
 8007a80:	08008529 	.word	0x08008529

08007a84 <__mcmp>:
 8007a84:	b530      	push	{r4, r5, lr}
 8007a86:	6902      	ldr	r2, [r0, #16]
 8007a88:	690c      	ldr	r4, [r1, #16]
 8007a8a:	1b12      	subs	r2, r2, r4
 8007a8c:	d10e      	bne.n	8007aac <__mcmp+0x28>
 8007a8e:	f100 0314 	add.w	r3, r0, #20
 8007a92:	3114      	adds	r1, #20
 8007a94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007aa0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007aa4:	42a5      	cmp	r5, r4
 8007aa6:	d003      	beq.n	8007ab0 <__mcmp+0x2c>
 8007aa8:	d305      	bcc.n	8007ab6 <__mcmp+0x32>
 8007aaa:	2201      	movs	r2, #1
 8007aac:	4610      	mov	r0, r2
 8007aae:	bd30      	pop	{r4, r5, pc}
 8007ab0:	4283      	cmp	r3, r0
 8007ab2:	d3f3      	bcc.n	8007a9c <__mcmp+0x18>
 8007ab4:	e7fa      	b.n	8007aac <__mcmp+0x28>
 8007ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aba:	e7f7      	b.n	8007aac <__mcmp+0x28>

08007abc <__mdiff>:
 8007abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	4690      	mov	r8, r2
 8007aca:	f7ff ffdb 	bl	8007a84 <__mcmp>
 8007ace:	1e05      	subs	r5, r0, #0
 8007ad0:	d110      	bne.n	8007af4 <__mdiff+0x38>
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f7ff fd59 	bl	800758c <_Balloc>
 8007ada:	b930      	cbnz	r0, 8007aea <__mdiff+0x2e>
 8007adc:	4b3a      	ldr	r3, [pc, #232]	; (8007bc8 <__mdiff+0x10c>)
 8007ade:	4602      	mov	r2, r0
 8007ae0:	f240 2137 	movw	r1, #567	; 0x237
 8007ae4:	4839      	ldr	r0, [pc, #228]	; (8007bcc <__mdiff+0x110>)
 8007ae6:	f000 f999 	bl	8007e1c <__assert_func>
 8007aea:	2301      	movs	r3, #1
 8007aec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007af0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af4:	bfa4      	itt	ge
 8007af6:	4643      	movge	r3, r8
 8007af8:	46a0      	movge	r8, r4
 8007afa:	4630      	mov	r0, r6
 8007afc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b00:	bfa6      	itte	ge
 8007b02:	461c      	movge	r4, r3
 8007b04:	2500      	movge	r5, #0
 8007b06:	2501      	movlt	r5, #1
 8007b08:	f7ff fd40 	bl	800758c <_Balloc>
 8007b0c:	b920      	cbnz	r0, 8007b18 <__mdiff+0x5c>
 8007b0e:	4b2e      	ldr	r3, [pc, #184]	; (8007bc8 <__mdiff+0x10c>)
 8007b10:	4602      	mov	r2, r0
 8007b12:	f240 2145 	movw	r1, #581	; 0x245
 8007b16:	e7e5      	b.n	8007ae4 <__mdiff+0x28>
 8007b18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b1c:	6926      	ldr	r6, [r4, #16]
 8007b1e:	60c5      	str	r5, [r0, #12]
 8007b20:	f104 0914 	add.w	r9, r4, #20
 8007b24:	f108 0514 	add.w	r5, r8, #20
 8007b28:	f100 0e14 	add.w	lr, r0, #20
 8007b2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007b30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b34:	f108 0210 	add.w	r2, r8, #16
 8007b38:	46f2      	mov	sl, lr
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b44:	fa11 f88b 	uxtah	r8, r1, fp
 8007b48:	b299      	uxth	r1, r3
 8007b4a:	0c1b      	lsrs	r3, r3, #16
 8007b4c:	eba8 0801 	sub.w	r8, r8, r1
 8007b50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b54:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b58:	fa1f f888 	uxth.w	r8, r8
 8007b5c:	1419      	asrs	r1, r3, #16
 8007b5e:	454e      	cmp	r6, r9
 8007b60:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b64:	f84a 3b04 	str.w	r3, [sl], #4
 8007b68:	d8e8      	bhi.n	8007b3c <__mdiff+0x80>
 8007b6a:	1b33      	subs	r3, r6, r4
 8007b6c:	3b15      	subs	r3, #21
 8007b6e:	f023 0303 	bic.w	r3, r3, #3
 8007b72:	3304      	adds	r3, #4
 8007b74:	3415      	adds	r4, #21
 8007b76:	42a6      	cmp	r6, r4
 8007b78:	bf38      	it	cc
 8007b7a:	2304      	movcc	r3, #4
 8007b7c:	441d      	add	r5, r3
 8007b7e:	4473      	add	r3, lr
 8007b80:	469e      	mov	lr, r3
 8007b82:	462e      	mov	r6, r5
 8007b84:	4566      	cmp	r6, ip
 8007b86:	d30e      	bcc.n	8007ba6 <__mdiff+0xea>
 8007b88:	f10c 0203 	add.w	r2, ip, #3
 8007b8c:	1b52      	subs	r2, r2, r5
 8007b8e:	f022 0203 	bic.w	r2, r2, #3
 8007b92:	3d03      	subs	r5, #3
 8007b94:	45ac      	cmp	ip, r5
 8007b96:	bf38      	it	cc
 8007b98:	2200      	movcc	r2, #0
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007ba0:	b17a      	cbz	r2, 8007bc2 <__mdiff+0x106>
 8007ba2:	6107      	str	r7, [r0, #16]
 8007ba4:	e7a4      	b.n	8007af0 <__mdiff+0x34>
 8007ba6:	f856 8b04 	ldr.w	r8, [r6], #4
 8007baa:	fa11 f288 	uxtah	r2, r1, r8
 8007bae:	1414      	asrs	r4, r2, #16
 8007bb0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007bb4:	b292      	uxth	r2, r2
 8007bb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007bba:	f84e 2b04 	str.w	r2, [lr], #4
 8007bbe:	1421      	asrs	r1, r4, #16
 8007bc0:	e7e0      	b.n	8007b84 <__mdiff+0xc8>
 8007bc2:	3f01      	subs	r7, #1
 8007bc4:	e7ea      	b.n	8007b9c <__mdiff+0xe0>
 8007bc6:	bf00      	nop
 8007bc8:	08008518 	.word	0x08008518
 8007bcc:	08008529 	.word	0x08008529

08007bd0 <__d2b>:
 8007bd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bd4:	460f      	mov	r7, r1
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	ec59 8b10 	vmov	r8, r9, d0
 8007bdc:	4616      	mov	r6, r2
 8007bde:	f7ff fcd5 	bl	800758c <_Balloc>
 8007be2:	4604      	mov	r4, r0
 8007be4:	b930      	cbnz	r0, 8007bf4 <__d2b+0x24>
 8007be6:	4602      	mov	r2, r0
 8007be8:	4b24      	ldr	r3, [pc, #144]	; (8007c7c <__d2b+0xac>)
 8007bea:	4825      	ldr	r0, [pc, #148]	; (8007c80 <__d2b+0xb0>)
 8007bec:	f240 310f 	movw	r1, #783	; 0x30f
 8007bf0:	f000 f914 	bl	8007e1c <__assert_func>
 8007bf4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007bf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bfc:	bb2d      	cbnz	r5, 8007c4a <__d2b+0x7a>
 8007bfe:	9301      	str	r3, [sp, #4]
 8007c00:	f1b8 0300 	subs.w	r3, r8, #0
 8007c04:	d026      	beq.n	8007c54 <__d2b+0x84>
 8007c06:	4668      	mov	r0, sp
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	f7ff fd87 	bl	800771c <__lo0bits>
 8007c0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007c12:	b1e8      	cbz	r0, 8007c50 <__d2b+0x80>
 8007c14:	f1c0 0320 	rsb	r3, r0, #32
 8007c18:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	40c2      	lsrs	r2, r0
 8007c20:	6163      	str	r3, [r4, #20]
 8007c22:	9201      	str	r2, [sp, #4]
 8007c24:	9b01      	ldr	r3, [sp, #4]
 8007c26:	61a3      	str	r3, [r4, #24]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	bf14      	ite	ne
 8007c2c:	2202      	movne	r2, #2
 8007c2e:	2201      	moveq	r2, #1
 8007c30:	6122      	str	r2, [r4, #16]
 8007c32:	b1bd      	cbz	r5, 8007c64 <__d2b+0x94>
 8007c34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c38:	4405      	add	r5, r0
 8007c3a:	603d      	str	r5, [r7, #0]
 8007c3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c40:	6030      	str	r0, [r6, #0]
 8007c42:	4620      	mov	r0, r4
 8007c44:	b003      	add	sp, #12
 8007c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c4e:	e7d6      	b.n	8007bfe <__d2b+0x2e>
 8007c50:	6161      	str	r1, [r4, #20]
 8007c52:	e7e7      	b.n	8007c24 <__d2b+0x54>
 8007c54:	a801      	add	r0, sp, #4
 8007c56:	f7ff fd61 	bl	800771c <__lo0bits>
 8007c5a:	9b01      	ldr	r3, [sp, #4]
 8007c5c:	6163      	str	r3, [r4, #20]
 8007c5e:	3020      	adds	r0, #32
 8007c60:	2201      	movs	r2, #1
 8007c62:	e7e5      	b.n	8007c30 <__d2b+0x60>
 8007c64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c6c:	6038      	str	r0, [r7, #0]
 8007c6e:	6918      	ldr	r0, [r3, #16]
 8007c70:	f7ff fd34 	bl	80076dc <__hi0bits>
 8007c74:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c78:	e7e2      	b.n	8007c40 <__d2b+0x70>
 8007c7a:	bf00      	nop
 8007c7c:	08008518 	.word	0x08008518
 8007c80:	08008529 	.word	0x08008529

08007c84 <__sflush_r>:
 8007c84:	898a      	ldrh	r2, [r1, #12]
 8007c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8a:	4605      	mov	r5, r0
 8007c8c:	0710      	lsls	r0, r2, #28
 8007c8e:	460c      	mov	r4, r1
 8007c90:	d458      	bmi.n	8007d44 <__sflush_r+0xc0>
 8007c92:	684b      	ldr	r3, [r1, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	dc05      	bgt.n	8007ca4 <__sflush_r+0x20>
 8007c98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	dc02      	bgt.n	8007ca4 <__sflush_r+0x20>
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ca6:	2e00      	cmp	r6, #0
 8007ca8:	d0f9      	beq.n	8007c9e <__sflush_r+0x1a>
 8007caa:	2300      	movs	r3, #0
 8007cac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cb0:	682f      	ldr	r7, [r5, #0]
 8007cb2:	6a21      	ldr	r1, [r4, #32]
 8007cb4:	602b      	str	r3, [r5, #0]
 8007cb6:	d032      	beq.n	8007d1e <__sflush_r+0x9a>
 8007cb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	075a      	lsls	r2, r3, #29
 8007cbe:	d505      	bpl.n	8007ccc <__sflush_r+0x48>
 8007cc0:	6863      	ldr	r3, [r4, #4]
 8007cc2:	1ac0      	subs	r0, r0, r3
 8007cc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cc6:	b10b      	cbz	r3, 8007ccc <__sflush_r+0x48>
 8007cc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cca:	1ac0      	subs	r0, r0, r3
 8007ccc:	2300      	movs	r3, #0
 8007cce:	4602      	mov	r2, r0
 8007cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cd2:	6a21      	ldr	r1, [r4, #32]
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	47b0      	blx	r6
 8007cd8:	1c43      	adds	r3, r0, #1
 8007cda:	89a3      	ldrh	r3, [r4, #12]
 8007cdc:	d106      	bne.n	8007cec <__sflush_r+0x68>
 8007cde:	6829      	ldr	r1, [r5, #0]
 8007ce0:	291d      	cmp	r1, #29
 8007ce2:	d82b      	bhi.n	8007d3c <__sflush_r+0xb8>
 8007ce4:	4a29      	ldr	r2, [pc, #164]	; (8007d8c <__sflush_r+0x108>)
 8007ce6:	410a      	asrs	r2, r1
 8007ce8:	07d6      	lsls	r6, r2, #31
 8007cea:	d427      	bmi.n	8007d3c <__sflush_r+0xb8>
 8007cec:	2200      	movs	r2, #0
 8007cee:	6062      	str	r2, [r4, #4]
 8007cf0:	04d9      	lsls	r1, r3, #19
 8007cf2:	6922      	ldr	r2, [r4, #16]
 8007cf4:	6022      	str	r2, [r4, #0]
 8007cf6:	d504      	bpl.n	8007d02 <__sflush_r+0x7e>
 8007cf8:	1c42      	adds	r2, r0, #1
 8007cfa:	d101      	bne.n	8007d00 <__sflush_r+0x7c>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b903      	cbnz	r3, 8007d02 <__sflush_r+0x7e>
 8007d00:	6560      	str	r0, [r4, #84]	; 0x54
 8007d02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d04:	602f      	str	r7, [r5, #0]
 8007d06:	2900      	cmp	r1, #0
 8007d08:	d0c9      	beq.n	8007c9e <__sflush_r+0x1a>
 8007d0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d0e:	4299      	cmp	r1, r3
 8007d10:	d002      	beq.n	8007d18 <__sflush_r+0x94>
 8007d12:	4628      	mov	r0, r5
 8007d14:	f7ff fb3a 	bl	800738c <_free_r>
 8007d18:	2000      	movs	r0, #0
 8007d1a:	6360      	str	r0, [r4, #52]	; 0x34
 8007d1c:	e7c0      	b.n	8007ca0 <__sflush_r+0x1c>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	4628      	mov	r0, r5
 8007d22:	47b0      	blx	r6
 8007d24:	1c41      	adds	r1, r0, #1
 8007d26:	d1c8      	bne.n	8007cba <__sflush_r+0x36>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d0c5      	beq.n	8007cba <__sflush_r+0x36>
 8007d2e:	2b1d      	cmp	r3, #29
 8007d30:	d001      	beq.n	8007d36 <__sflush_r+0xb2>
 8007d32:	2b16      	cmp	r3, #22
 8007d34:	d101      	bne.n	8007d3a <__sflush_r+0xb6>
 8007d36:	602f      	str	r7, [r5, #0]
 8007d38:	e7b1      	b.n	8007c9e <__sflush_r+0x1a>
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d40:	81a3      	strh	r3, [r4, #12]
 8007d42:	e7ad      	b.n	8007ca0 <__sflush_r+0x1c>
 8007d44:	690f      	ldr	r7, [r1, #16]
 8007d46:	2f00      	cmp	r7, #0
 8007d48:	d0a9      	beq.n	8007c9e <__sflush_r+0x1a>
 8007d4a:	0793      	lsls	r3, r2, #30
 8007d4c:	680e      	ldr	r6, [r1, #0]
 8007d4e:	bf08      	it	eq
 8007d50:	694b      	ldreq	r3, [r1, #20]
 8007d52:	600f      	str	r7, [r1, #0]
 8007d54:	bf18      	it	ne
 8007d56:	2300      	movne	r3, #0
 8007d58:	eba6 0807 	sub.w	r8, r6, r7
 8007d5c:	608b      	str	r3, [r1, #8]
 8007d5e:	f1b8 0f00 	cmp.w	r8, #0
 8007d62:	dd9c      	ble.n	8007c9e <__sflush_r+0x1a>
 8007d64:	6a21      	ldr	r1, [r4, #32]
 8007d66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d68:	4643      	mov	r3, r8
 8007d6a:	463a      	mov	r2, r7
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b0      	blx	r6
 8007d70:	2800      	cmp	r0, #0
 8007d72:	dc06      	bgt.n	8007d82 <__sflush_r+0xfe>
 8007d74:	89a3      	ldrh	r3, [r4, #12]
 8007d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d7a:	81a3      	strh	r3, [r4, #12]
 8007d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d80:	e78e      	b.n	8007ca0 <__sflush_r+0x1c>
 8007d82:	4407      	add	r7, r0
 8007d84:	eba8 0800 	sub.w	r8, r8, r0
 8007d88:	e7e9      	b.n	8007d5e <__sflush_r+0xda>
 8007d8a:	bf00      	nop
 8007d8c:	dfbffffe 	.word	0xdfbffffe

08007d90 <_fflush_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	690b      	ldr	r3, [r1, #16]
 8007d94:	4605      	mov	r5, r0
 8007d96:	460c      	mov	r4, r1
 8007d98:	b913      	cbnz	r3, 8007da0 <_fflush_r+0x10>
 8007d9a:	2500      	movs	r5, #0
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	b118      	cbz	r0, 8007daa <_fflush_r+0x1a>
 8007da2:	6a03      	ldr	r3, [r0, #32]
 8007da4:	b90b      	cbnz	r3, 8007daa <_fflush_r+0x1a>
 8007da6:	f7fe fb7b 	bl	80064a0 <__sinit>
 8007daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d0f3      	beq.n	8007d9a <_fflush_r+0xa>
 8007db2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007db4:	07d0      	lsls	r0, r2, #31
 8007db6:	d404      	bmi.n	8007dc2 <_fflush_r+0x32>
 8007db8:	0599      	lsls	r1, r3, #22
 8007dba:	d402      	bmi.n	8007dc2 <_fflush_r+0x32>
 8007dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dbe:	f7fe fc66 	bl	800668e <__retarget_lock_acquire_recursive>
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	f7ff ff5d 	bl	8007c84 <__sflush_r>
 8007dca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dcc:	07da      	lsls	r2, r3, #31
 8007dce:	4605      	mov	r5, r0
 8007dd0:	d4e4      	bmi.n	8007d9c <_fflush_r+0xc>
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	059b      	lsls	r3, r3, #22
 8007dd6:	d4e1      	bmi.n	8007d9c <_fflush_r+0xc>
 8007dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dda:	f7fe fc59 	bl	8006690 <__retarget_lock_release_recursive>
 8007dde:	e7dd      	b.n	8007d9c <_fflush_r+0xc>

08007de0 <_sbrk_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	4d06      	ldr	r5, [pc, #24]	; (8007dfc <_sbrk_r+0x1c>)
 8007de4:	2300      	movs	r3, #0
 8007de6:	4604      	mov	r4, r0
 8007de8:	4608      	mov	r0, r1
 8007dea:	602b      	str	r3, [r5, #0]
 8007dec:	f7f9 ff6a 	bl	8001cc4 <_sbrk>
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	d102      	bne.n	8007dfa <_sbrk_r+0x1a>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	b103      	cbz	r3, 8007dfa <_sbrk_r+0x1a>
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	bd38      	pop	{r3, r4, r5, pc}
 8007dfc:	20010748 	.word	0x20010748

08007e00 <memcpy>:
 8007e00:	440a      	add	r2, r1
 8007e02:	4291      	cmp	r1, r2
 8007e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e08:	d100      	bne.n	8007e0c <memcpy+0xc>
 8007e0a:	4770      	bx	lr
 8007e0c:	b510      	push	{r4, lr}
 8007e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e16:	4291      	cmp	r1, r2
 8007e18:	d1f9      	bne.n	8007e0e <memcpy+0xe>
 8007e1a:	bd10      	pop	{r4, pc}

08007e1c <__assert_func>:
 8007e1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e1e:	4614      	mov	r4, r2
 8007e20:	461a      	mov	r2, r3
 8007e22:	4b09      	ldr	r3, [pc, #36]	; (8007e48 <__assert_func+0x2c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4605      	mov	r5, r0
 8007e28:	68d8      	ldr	r0, [r3, #12]
 8007e2a:	b14c      	cbz	r4, 8007e40 <__assert_func+0x24>
 8007e2c:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <__assert_func+0x30>)
 8007e2e:	9100      	str	r1, [sp, #0]
 8007e30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e34:	4906      	ldr	r1, [pc, #24]	; (8007e50 <__assert_func+0x34>)
 8007e36:	462b      	mov	r3, r5
 8007e38:	f000 f844 	bl	8007ec4 <fiprintf>
 8007e3c:	f000 f854 	bl	8007ee8 <abort>
 8007e40:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <__assert_func+0x38>)
 8007e42:	461c      	mov	r4, r3
 8007e44:	e7f3      	b.n	8007e2e <__assert_func+0x12>
 8007e46:	bf00      	nop
 8007e48:	200000fc 	.word	0x200000fc
 8007e4c:	0800868e 	.word	0x0800868e
 8007e50:	0800869b 	.word	0x0800869b
 8007e54:	080086c9 	.word	0x080086c9

08007e58 <_calloc_r>:
 8007e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e5a:	fba1 2402 	umull	r2, r4, r1, r2
 8007e5e:	b94c      	cbnz	r4, 8007e74 <_calloc_r+0x1c>
 8007e60:	4611      	mov	r1, r2
 8007e62:	9201      	str	r2, [sp, #4]
 8007e64:	f7ff fb06 	bl	8007474 <_malloc_r>
 8007e68:	9a01      	ldr	r2, [sp, #4]
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	b930      	cbnz	r0, 8007e7c <_calloc_r+0x24>
 8007e6e:	4628      	mov	r0, r5
 8007e70:	b003      	add	sp, #12
 8007e72:	bd30      	pop	{r4, r5, pc}
 8007e74:	220c      	movs	r2, #12
 8007e76:	6002      	str	r2, [r0, #0]
 8007e78:	2500      	movs	r5, #0
 8007e7a:	e7f8      	b.n	8007e6e <_calloc_r+0x16>
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	f7fe fb88 	bl	8006592 <memset>
 8007e82:	e7f4      	b.n	8007e6e <_calloc_r+0x16>

08007e84 <__ascii_mbtowc>:
 8007e84:	b082      	sub	sp, #8
 8007e86:	b901      	cbnz	r1, 8007e8a <__ascii_mbtowc+0x6>
 8007e88:	a901      	add	r1, sp, #4
 8007e8a:	b142      	cbz	r2, 8007e9e <__ascii_mbtowc+0x1a>
 8007e8c:	b14b      	cbz	r3, 8007ea2 <__ascii_mbtowc+0x1e>
 8007e8e:	7813      	ldrb	r3, [r2, #0]
 8007e90:	600b      	str	r3, [r1, #0]
 8007e92:	7812      	ldrb	r2, [r2, #0]
 8007e94:	1e10      	subs	r0, r2, #0
 8007e96:	bf18      	it	ne
 8007e98:	2001      	movne	r0, #1
 8007e9a:	b002      	add	sp, #8
 8007e9c:	4770      	bx	lr
 8007e9e:	4610      	mov	r0, r2
 8007ea0:	e7fb      	b.n	8007e9a <__ascii_mbtowc+0x16>
 8007ea2:	f06f 0001 	mvn.w	r0, #1
 8007ea6:	e7f8      	b.n	8007e9a <__ascii_mbtowc+0x16>

08007ea8 <__ascii_wctomb>:
 8007ea8:	b149      	cbz	r1, 8007ebe <__ascii_wctomb+0x16>
 8007eaa:	2aff      	cmp	r2, #255	; 0xff
 8007eac:	bf85      	ittet	hi
 8007eae:	238a      	movhi	r3, #138	; 0x8a
 8007eb0:	6003      	strhi	r3, [r0, #0]
 8007eb2:	700a      	strbls	r2, [r1, #0]
 8007eb4:	f04f 30ff 	movhi.w	r0, #4294967295
 8007eb8:	bf98      	it	ls
 8007eba:	2001      	movls	r0, #1
 8007ebc:	4770      	bx	lr
 8007ebe:	4608      	mov	r0, r1
 8007ec0:	4770      	bx	lr
	...

08007ec4 <fiprintf>:
 8007ec4:	b40e      	push	{r1, r2, r3}
 8007ec6:	b503      	push	{r0, r1, lr}
 8007ec8:	4601      	mov	r1, r0
 8007eca:	ab03      	add	r3, sp, #12
 8007ecc:	4805      	ldr	r0, [pc, #20]	; (8007ee4 <fiprintf+0x20>)
 8007ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ed2:	6800      	ldr	r0, [r0, #0]
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	f000 f837 	bl	8007f48 <_vfiprintf_r>
 8007eda:	b002      	add	sp, #8
 8007edc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ee0:	b003      	add	sp, #12
 8007ee2:	4770      	bx	lr
 8007ee4:	200000fc 	.word	0x200000fc

08007ee8 <abort>:
 8007ee8:	b508      	push	{r3, lr}
 8007eea:	2006      	movs	r0, #6
 8007eec:	f000 fa04 	bl	80082f8 <raise>
 8007ef0:	2001      	movs	r0, #1
 8007ef2:	f7f9 fe6f 	bl	8001bd4 <_exit>

08007ef6 <__sfputc_r>:
 8007ef6:	6893      	ldr	r3, [r2, #8]
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	b410      	push	{r4}
 8007efe:	6093      	str	r3, [r2, #8]
 8007f00:	da08      	bge.n	8007f14 <__sfputc_r+0x1e>
 8007f02:	6994      	ldr	r4, [r2, #24]
 8007f04:	42a3      	cmp	r3, r4
 8007f06:	db01      	blt.n	8007f0c <__sfputc_r+0x16>
 8007f08:	290a      	cmp	r1, #10
 8007f0a:	d103      	bne.n	8007f14 <__sfputc_r+0x1e>
 8007f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f10:	f000 b934 	b.w	800817c <__swbuf_r>
 8007f14:	6813      	ldr	r3, [r2, #0]
 8007f16:	1c58      	adds	r0, r3, #1
 8007f18:	6010      	str	r0, [r2, #0]
 8007f1a:	7019      	strb	r1, [r3, #0]
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <__sfputs_r>:
 8007f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f26:	4606      	mov	r6, r0
 8007f28:	460f      	mov	r7, r1
 8007f2a:	4614      	mov	r4, r2
 8007f2c:	18d5      	adds	r5, r2, r3
 8007f2e:	42ac      	cmp	r4, r5
 8007f30:	d101      	bne.n	8007f36 <__sfputs_r+0x12>
 8007f32:	2000      	movs	r0, #0
 8007f34:	e007      	b.n	8007f46 <__sfputs_r+0x22>
 8007f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f3a:	463a      	mov	r2, r7
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	f7ff ffda 	bl	8007ef6 <__sfputc_r>
 8007f42:	1c43      	adds	r3, r0, #1
 8007f44:	d1f3      	bne.n	8007f2e <__sfputs_r+0xa>
 8007f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f48 <_vfiprintf_r>:
 8007f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	460d      	mov	r5, r1
 8007f4e:	b09d      	sub	sp, #116	; 0x74
 8007f50:	4614      	mov	r4, r2
 8007f52:	4698      	mov	r8, r3
 8007f54:	4606      	mov	r6, r0
 8007f56:	b118      	cbz	r0, 8007f60 <_vfiprintf_r+0x18>
 8007f58:	6a03      	ldr	r3, [r0, #32]
 8007f5a:	b90b      	cbnz	r3, 8007f60 <_vfiprintf_r+0x18>
 8007f5c:	f7fe faa0 	bl	80064a0 <__sinit>
 8007f60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f62:	07d9      	lsls	r1, r3, #31
 8007f64:	d405      	bmi.n	8007f72 <_vfiprintf_r+0x2a>
 8007f66:	89ab      	ldrh	r3, [r5, #12]
 8007f68:	059a      	lsls	r2, r3, #22
 8007f6a:	d402      	bmi.n	8007f72 <_vfiprintf_r+0x2a>
 8007f6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f6e:	f7fe fb8e 	bl	800668e <__retarget_lock_acquire_recursive>
 8007f72:	89ab      	ldrh	r3, [r5, #12]
 8007f74:	071b      	lsls	r3, r3, #28
 8007f76:	d501      	bpl.n	8007f7c <_vfiprintf_r+0x34>
 8007f78:	692b      	ldr	r3, [r5, #16]
 8007f7a:	b99b      	cbnz	r3, 8007fa4 <_vfiprintf_r+0x5c>
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	4630      	mov	r0, r6
 8007f80:	f000 f93a 	bl	80081f8 <__swsetup_r>
 8007f84:	b170      	cbz	r0, 8007fa4 <_vfiprintf_r+0x5c>
 8007f86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f88:	07dc      	lsls	r4, r3, #31
 8007f8a:	d504      	bpl.n	8007f96 <_vfiprintf_r+0x4e>
 8007f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f90:	b01d      	add	sp, #116	; 0x74
 8007f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f96:	89ab      	ldrh	r3, [r5, #12]
 8007f98:	0598      	lsls	r0, r3, #22
 8007f9a:	d4f7      	bmi.n	8007f8c <_vfiprintf_r+0x44>
 8007f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f9e:	f7fe fb77 	bl	8006690 <__retarget_lock_release_recursive>
 8007fa2:	e7f3      	b.n	8007f8c <_vfiprintf_r+0x44>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa8:	2320      	movs	r3, #32
 8007faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fae:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fb2:	2330      	movs	r3, #48	; 0x30
 8007fb4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008168 <_vfiprintf_r+0x220>
 8007fb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fbc:	f04f 0901 	mov.w	r9, #1
 8007fc0:	4623      	mov	r3, r4
 8007fc2:	469a      	mov	sl, r3
 8007fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fc8:	b10a      	cbz	r2, 8007fce <_vfiprintf_r+0x86>
 8007fca:	2a25      	cmp	r2, #37	; 0x25
 8007fcc:	d1f9      	bne.n	8007fc2 <_vfiprintf_r+0x7a>
 8007fce:	ebba 0b04 	subs.w	fp, sl, r4
 8007fd2:	d00b      	beq.n	8007fec <_vfiprintf_r+0xa4>
 8007fd4:	465b      	mov	r3, fp
 8007fd6:	4622      	mov	r2, r4
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f7ff ffa2 	bl	8007f24 <__sfputs_r>
 8007fe0:	3001      	adds	r0, #1
 8007fe2:	f000 80a9 	beq.w	8008138 <_vfiprintf_r+0x1f0>
 8007fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fe8:	445a      	add	r2, fp
 8007fea:	9209      	str	r2, [sp, #36]	; 0x24
 8007fec:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f000 80a1 	beq.w	8008138 <_vfiprintf_r+0x1f0>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008000:	f10a 0a01 	add.w	sl, sl, #1
 8008004:	9304      	str	r3, [sp, #16]
 8008006:	9307      	str	r3, [sp, #28]
 8008008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800800c:	931a      	str	r3, [sp, #104]	; 0x68
 800800e:	4654      	mov	r4, sl
 8008010:	2205      	movs	r2, #5
 8008012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008016:	4854      	ldr	r0, [pc, #336]	; (8008168 <_vfiprintf_r+0x220>)
 8008018:	f7f8 f8e2 	bl	80001e0 <memchr>
 800801c:	9a04      	ldr	r2, [sp, #16]
 800801e:	b9d8      	cbnz	r0, 8008058 <_vfiprintf_r+0x110>
 8008020:	06d1      	lsls	r1, r2, #27
 8008022:	bf44      	itt	mi
 8008024:	2320      	movmi	r3, #32
 8008026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800802a:	0713      	lsls	r3, r2, #28
 800802c:	bf44      	itt	mi
 800802e:	232b      	movmi	r3, #43	; 0x2b
 8008030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008034:	f89a 3000 	ldrb.w	r3, [sl]
 8008038:	2b2a      	cmp	r3, #42	; 0x2a
 800803a:	d015      	beq.n	8008068 <_vfiprintf_r+0x120>
 800803c:	9a07      	ldr	r2, [sp, #28]
 800803e:	4654      	mov	r4, sl
 8008040:	2000      	movs	r0, #0
 8008042:	f04f 0c0a 	mov.w	ip, #10
 8008046:	4621      	mov	r1, r4
 8008048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800804c:	3b30      	subs	r3, #48	; 0x30
 800804e:	2b09      	cmp	r3, #9
 8008050:	d94d      	bls.n	80080ee <_vfiprintf_r+0x1a6>
 8008052:	b1b0      	cbz	r0, 8008082 <_vfiprintf_r+0x13a>
 8008054:	9207      	str	r2, [sp, #28]
 8008056:	e014      	b.n	8008082 <_vfiprintf_r+0x13a>
 8008058:	eba0 0308 	sub.w	r3, r0, r8
 800805c:	fa09 f303 	lsl.w	r3, r9, r3
 8008060:	4313      	orrs	r3, r2
 8008062:	9304      	str	r3, [sp, #16]
 8008064:	46a2      	mov	sl, r4
 8008066:	e7d2      	b.n	800800e <_vfiprintf_r+0xc6>
 8008068:	9b03      	ldr	r3, [sp, #12]
 800806a:	1d19      	adds	r1, r3, #4
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	9103      	str	r1, [sp, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	bfbb      	ittet	lt
 8008074:	425b      	neglt	r3, r3
 8008076:	f042 0202 	orrlt.w	r2, r2, #2
 800807a:	9307      	strge	r3, [sp, #28]
 800807c:	9307      	strlt	r3, [sp, #28]
 800807e:	bfb8      	it	lt
 8008080:	9204      	strlt	r2, [sp, #16]
 8008082:	7823      	ldrb	r3, [r4, #0]
 8008084:	2b2e      	cmp	r3, #46	; 0x2e
 8008086:	d10c      	bne.n	80080a2 <_vfiprintf_r+0x15a>
 8008088:	7863      	ldrb	r3, [r4, #1]
 800808a:	2b2a      	cmp	r3, #42	; 0x2a
 800808c:	d134      	bne.n	80080f8 <_vfiprintf_r+0x1b0>
 800808e:	9b03      	ldr	r3, [sp, #12]
 8008090:	1d1a      	adds	r2, r3, #4
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	9203      	str	r2, [sp, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	bfb8      	it	lt
 800809a:	f04f 33ff 	movlt.w	r3, #4294967295
 800809e:	3402      	adds	r4, #2
 80080a0:	9305      	str	r3, [sp, #20]
 80080a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008178 <_vfiprintf_r+0x230>
 80080a6:	7821      	ldrb	r1, [r4, #0]
 80080a8:	2203      	movs	r2, #3
 80080aa:	4650      	mov	r0, sl
 80080ac:	f7f8 f898 	bl	80001e0 <memchr>
 80080b0:	b138      	cbz	r0, 80080c2 <_vfiprintf_r+0x17a>
 80080b2:	9b04      	ldr	r3, [sp, #16]
 80080b4:	eba0 000a 	sub.w	r0, r0, sl
 80080b8:	2240      	movs	r2, #64	; 0x40
 80080ba:	4082      	lsls	r2, r0
 80080bc:	4313      	orrs	r3, r2
 80080be:	3401      	adds	r4, #1
 80080c0:	9304      	str	r3, [sp, #16]
 80080c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c6:	4829      	ldr	r0, [pc, #164]	; (800816c <_vfiprintf_r+0x224>)
 80080c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080cc:	2206      	movs	r2, #6
 80080ce:	f7f8 f887 	bl	80001e0 <memchr>
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d03f      	beq.n	8008156 <_vfiprintf_r+0x20e>
 80080d6:	4b26      	ldr	r3, [pc, #152]	; (8008170 <_vfiprintf_r+0x228>)
 80080d8:	bb1b      	cbnz	r3, 8008122 <_vfiprintf_r+0x1da>
 80080da:	9b03      	ldr	r3, [sp, #12]
 80080dc:	3307      	adds	r3, #7
 80080de:	f023 0307 	bic.w	r3, r3, #7
 80080e2:	3308      	adds	r3, #8
 80080e4:	9303      	str	r3, [sp, #12]
 80080e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e8:	443b      	add	r3, r7
 80080ea:	9309      	str	r3, [sp, #36]	; 0x24
 80080ec:	e768      	b.n	8007fc0 <_vfiprintf_r+0x78>
 80080ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80080f2:	460c      	mov	r4, r1
 80080f4:	2001      	movs	r0, #1
 80080f6:	e7a6      	b.n	8008046 <_vfiprintf_r+0xfe>
 80080f8:	2300      	movs	r3, #0
 80080fa:	3401      	adds	r4, #1
 80080fc:	9305      	str	r3, [sp, #20]
 80080fe:	4619      	mov	r1, r3
 8008100:	f04f 0c0a 	mov.w	ip, #10
 8008104:	4620      	mov	r0, r4
 8008106:	f810 2b01 	ldrb.w	r2, [r0], #1
 800810a:	3a30      	subs	r2, #48	; 0x30
 800810c:	2a09      	cmp	r2, #9
 800810e:	d903      	bls.n	8008118 <_vfiprintf_r+0x1d0>
 8008110:	2b00      	cmp	r3, #0
 8008112:	d0c6      	beq.n	80080a2 <_vfiprintf_r+0x15a>
 8008114:	9105      	str	r1, [sp, #20]
 8008116:	e7c4      	b.n	80080a2 <_vfiprintf_r+0x15a>
 8008118:	fb0c 2101 	mla	r1, ip, r1, r2
 800811c:	4604      	mov	r4, r0
 800811e:	2301      	movs	r3, #1
 8008120:	e7f0      	b.n	8008104 <_vfiprintf_r+0x1bc>
 8008122:	ab03      	add	r3, sp, #12
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	462a      	mov	r2, r5
 8008128:	4b12      	ldr	r3, [pc, #72]	; (8008174 <_vfiprintf_r+0x22c>)
 800812a:	a904      	add	r1, sp, #16
 800812c:	4630      	mov	r0, r6
 800812e:	f7fd fd65 	bl	8005bfc <_printf_float>
 8008132:	4607      	mov	r7, r0
 8008134:	1c78      	adds	r0, r7, #1
 8008136:	d1d6      	bne.n	80080e6 <_vfiprintf_r+0x19e>
 8008138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800813a:	07d9      	lsls	r1, r3, #31
 800813c:	d405      	bmi.n	800814a <_vfiprintf_r+0x202>
 800813e:	89ab      	ldrh	r3, [r5, #12]
 8008140:	059a      	lsls	r2, r3, #22
 8008142:	d402      	bmi.n	800814a <_vfiprintf_r+0x202>
 8008144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008146:	f7fe faa3 	bl	8006690 <__retarget_lock_release_recursive>
 800814a:	89ab      	ldrh	r3, [r5, #12]
 800814c:	065b      	lsls	r3, r3, #25
 800814e:	f53f af1d 	bmi.w	8007f8c <_vfiprintf_r+0x44>
 8008152:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008154:	e71c      	b.n	8007f90 <_vfiprintf_r+0x48>
 8008156:	ab03      	add	r3, sp, #12
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	462a      	mov	r2, r5
 800815c:	4b05      	ldr	r3, [pc, #20]	; (8008174 <_vfiprintf_r+0x22c>)
 800815e:	a904      	add	r1, sp, #16
 8008160:	4630      	mov	r0, r6
 8008162:	f7fd ffef 	bl	8006144 <_printf_i>
 8008166:	e7e4      	b.n	8008132 <_vfiprintf_r+0x1ea>
 8008168:	080087cb 	.word	0x080087cb
 800816c:	080087d5 	.word	0x080087d5
 8008170:	08005bfd 	.word	0x08005bfd
 8008174:	08007f25 	.word	0x08007f25
 8008178:	080087d1 	.word	0x080087d1

0800817c <__swbuf_r>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	460e      	mov	r6, r1
 8008180:	4614      	mov	r4, r2
 8008182:	4605      	mov	r5, r0
 8008184:	b118      	cbz	r0, 800818e <__swbuf_r+0x12>
 8008186:	6a03      	ldr	r3, [r0, #32]
 8008188:	b90b      	cbnz	r3, 800818e <__swbuf_r+0x12>
 800818a:	f7fe f989 	bl	80064a0 <__sinit>
 800818e:	69a3      	ldr	r3, [r4, #24]
 8008190:	60a3      	str	r3, [r4, #8]
 8008192:	89a3      	ldrh	r3, [r4, #12]
 8008194:	071a      	lsls	r2, r3, #28
 8008196:	d525      	bpl.n	80081e4 <__swbuf_r+0x68>
 8008198:	6923      	ldr	r3, [r4, #16]
 800819a:	b31b      	cbz	r3, 80081e4 <__swbuf_r+0x68>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	6922      	ldr	r2, [r4, #16]
 80081a0:	1a98      	subs	r0, r3, r2
 80081a2:	6963      	ldr	r3, [r4, #20]
 80081a4:	b2f6      	uxtb	r6, r6
 80081a6:	4283      	cmp	r3, r0
 80081a8:	4637      	mov	r7, r6
 80081aa:	dc04      	bgt.n	80081b6 <__swbuf_r+0x3a>
 80081ac:	4621      	mov	r1, r4
 80081ae:	4628      	mov	r0, r5
 80081b0:	f7ff fdee 	bl	8007d90 <_fflush_r>
 80081b4:	b9e0      	cbnz	r0, 80081f0 <__swbuf_r+0x74>
 80081b6:	68a3      	ldr	r3, [r4, #8]
 80081b8:	3b01      	subs	r3, #1
 80081ba:	60a3      	str	r3, [r4, #8]
 80081bc:	6823      	ldr	r3, [r4, #0]
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	6022      	str	r2, [r4, #0]
 80081c2:	701e      	strb	r6, [r3, #0]
 80081c4:	6962      	ldr	r2, [r4, #20]
 80081c6:	1c43      	adds	r3, r0, #1
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d004      	beq.n	80081d6 <__swbuf_r+0x5a>
 80081cc:	89a3      	ldrh	r3, [r4, #12]
 80081ce:	07db      	lsls	r3, r3, #31
 80081d0:	d506      	bpl.n	80081e0 <__swbuf_r+0x64>
 80081d2:	2e0a      	cmp	r6, #10
 80081d4:	d104      	bne.n	80081e0 <__swbuf_r+0x64>
 80081d6:	4621      	mov	r1, r4
 80081d8:	4628      	mov	r0, r5
 80081da:	f7ff fdd9 	bl	8007d90 <_fflush_r>
 80081de:	b938      	cbnz	r0, 80081f0 <__swbuf_r+0x74>
 80081e0:	4638      	mov	r0, r7
 80081e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081e4:	4621      	mov	r1, r4
 80081e6:	4628      	mov	r0, r5
 80081e8:	f000 f806 	bl	80081f8 <__swsetup_r>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d0d5      	beq.n	800819c <__swbuf_r+0x20>
 80081f0:	f04f 37ff 	mov.w	r7, #4294967295
 80081f4:	e7f4      	b.n	80081e0 <__swbuf_r+0x64>
	...

080081f8 <__swsetup_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4b2a      	ldr	r3, [pc, #168]	; (80082a4 <__swsetup_r+0xac>)
 80081fc:	4605      	mov	r5, r0
 80081fe:	6818      	ldr	r0, [r3, #0]
 8008200:	460c      	mov	r4, r1
 8008202:	b118      	cbz	r0, 800820c <__swsetup_r+0x14>
 8008204:	6a03      	ldr	r3, [r0, #32]
 8008206:	b90b      	cbnz	r3, 800820c <__swsetup_r+0x14>
 8008208:	f7fe f94a 	bl	80064a0 <__sinit>
 800820c:	89a3      	ldrh	r3, [r4, #12]
 800820e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008212:	0718      	lsls	r0, r3, #28
 8008214:	d422      	bmi.n	800825c <__swsetup_r+0x64>
 8008216:	06d9      	lsls	r1, r3, #27
 8008218:	d407      	bmi.n	800822a <__swsetup_r+0x32>
 800821a:	2309      	movs	r3, #9
 800821c:	602b      	str	r3, [r5, #0]
 800821e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008222:	81a3      	strh	r3, [r4, #12]
 8008224:	f04f 30ff 	mov.w	r0, #4294967295
 8008228:	e034      	b.n	8008294 <__swsetup_r+0x9c>
 800822a:	0758      	lsls	r0, r3, #29
 800822c:	d512      	bpl.n	8008254 <__swsetup_r+0x5c>
 800822e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008230:	b141      	cbz	r1, 8008244 <__swsetup_r+0x4c>
 8008232:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008236:	4299      	cmp	r1, r3
 8008238:	d002      	beq.n	8008240 <__swsetup_r+0x48>
 800823a:	4628      	mov	r0, r5
 800823c:	f7ff f8a6 	bl	800738c <_free_r>
 8008240:	2300      	movs	r3, #0
 8008242:	6363      	str	r3, [r4, #52]	; 0x34
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800824a:	81a3      	strh	r3, [r4, #12]
 800824c:	2300      	movs	r3, #0
 800824e:	6063      	str	r3, [r4, #4]
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	6023      	str	r3, [r4, #0]
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	f043 0308 	orr.w	r3, r3, #8
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	6923      	ldr	r3, [r4, #16]
 800825e:	b94b      	cbnz	r3, 8008274 <__swsetup_r+0x7c>
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800826a:	d003      	beq.n	8008274 <__swsetup_r+0x7c>
 800826c:	4621      	mov	r1, r4
 800826e:	4628      	mov	r0, r5
 8008270:	f000 f884 	bl	800837c <__smakebuf_r>
 8008274:	89a0      	ldrh	r0, [r4, #12]
 8008276:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800827a:	f010 0301 	ands.w	r3, r0, #1
 800827e:	d00a      	beq.n	8008296 <__swsetup_r+0x9e>
 8008280:	2300      	movs	r3, #0
 8008282:	60a3      	str	r3, [r4, #8]
 8008284:	6963      	ldr	r3, [r4, #20]
 8008286:	425b      	negs	r3, r3
 8008288:	61a3      	str	r3, [r4, #24]
 800828a:	6923      	ldr	r3, [r4, #16]
 800828c:	b943      	cbnz	r3, 80082a0 <__swsetup_r+0xa8>
 800828e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008292:	d1c4      	bne.n	800821e <__swsetup_r+0x26>
 8008294:	bd38      	pop	{r3, r4, r5, pc}
 8008296:	0781      	lsls	r1, r0, #30
 8008298:	bf58      	it	pl
 800829a:	6963      	ldrpl	r3, [r4, #20]
 800829c:	60a3      	str	r3, [r4, #8]
 800829e:	e7f4      	b.n	800828a <__swsetup_r+0x92>
 80082a0:	2000      	movs	r0, #0
 80082a2:	e7f7      	b.n	8008294 <__swsetup_r+0x9c>
 80082a4:	200000fc 	.word	0x200000fc

080082a8 <_raise_r>:
 80082a8:	291f      	cmp	r1, #31
 80082aa:	b538      	push	{r3, r4, r5, lr}
 80082ac:	4604      	mov	r4, r0
 80082ae:	460d      	mov	r5, r1
 80082b0:	d904      	bls.n	80082bc <_raise_r+0x14>
 80082b2:	2316      	movs	r3, #22
 80082b4:	6003      	str	r3, [r0, #0]
 80082b6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ba:	bd38      	pop	{r3, r4, r5, pc}
 80082bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80082be:	b112      	cbz	r2, 80082c6 <_raise_r+0x1e>
 80082c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082c4:	b94b      	cbnz	r3, 80082da <_raise_r+0x32>
 80082c6:	4620      	mov	r0, r4
 80082c8:	f000 f830 	bl	800832c <_getpid_r>
 80082cc:	462a      	mov	r2, r5
 80082ce:	4601      	mov	r1, r0
 80082d0:	4620      	mov	r0, r4
 80082d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082d6:	f000 b817 	b.w	8008308 <_kill_r>
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d00a      	beq.n	80082f4 <_raise_r+0x4c>
 80082de:	1c59      	adds	r1, r3, #1
 80082e0:	d103      	bne.n	80082ea <_raise_r+0x42>
 80082e2:	2316      	movs	r3, #22
 80082e4:	6003      	str	r3, [r0, #0]
 80082e6:	2001      	movs	r0, #1
 80082e8:	e7e7      	b.n	80082ba <_raise_r+0x12>
 80082ea:	2400      	movs	r4, #0
 80082ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082f0:	4628      	mov	r0, r5
 80082f2:	4798      	blx	r3
 80082f4:	2000      	movs	r0, #0
 80082f6:	e7e0      	b.n	80082ba <_raise_r+0x12>

080082f8 <raise>:
 80082f8:	4b02      	ldr	r3, [pc, #8]	; (8008304 <raise+0xc>)
 80082fa:	4601      	mov	r1, r0
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	f7ff bfd3 	b.w	80082a8 <_raise_r>
 8008302:	bf00      	nop
 8008304:	200000fc 	.word	0x200000fc

08008308 <_kill_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4d07      	ldr	r5, [pc, #28]	; (8008328 <_kill_r+0x20>)
 800830c:	2300      	movs	r3, #0
 800830e:	4604      	mov	r4, r0
 8008310:	4608      	mov	r0, r1
 8008312:	4611      	mov	r1, r2
 8008314:	602b      	str	r3, [r5, #0]
 8008316:	f7f9 fc4d 	bl	8001bb4 <_kill>
 800831a:	1c43      	adds	r3, r0, #1
 800831c:	d102      	bne.n	8008324 <_kill_r+0x1c>
 800831e:	682b      	ldr	r3, [r5, #0]
 8008320:	b103      	cbz	r3, 8008324 <_kill_r+0x1c>
 8008322:	6023      	str	r3, [r4, #0]
 8008324:	bd38      	pop	{r3, r4, r5, pc}
 8008326:	bf00      	nop
 8008328:	20010748 	.word	0x20010748

0800832c <_getpid_r>:
 800832c:	f7f9 bc3a 	b.w	8001ba4 <_getpid>

08008330 <__swhatbuf_r>:
 8008330:	b570      	push	{r4, r5, r6, lr}
 8008332:	460c      	mov	r4, r1
 8008334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008338:	2900      	cmp	r1, #0
 800833a:	b096      	sub	sp, #88	; 0x58
 800833c:	4615      	mov	r5, r2
 800833e:	461e      	mov	r6, r3
 8008340:	da0d      	bge.n	800835e <__swhatbuf_r+0x2e>
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008348:	f04f 0100 	mov.w	r1, #0
 800834c:	bf0c      	ite	eq
 800834e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008352:	2340      	movne	r3, #64	; 0x40
 8008354:	2000      	movs	r0, #0
 8008356:	6031      	str	r1, [r6, #0]
 8008358:	602b      	str	r3, [r5, #0]
 800835a:	b016      	add	sp, #88	; 0x58
 800835c:	bd70      	pop	{r4, r5, r6, pc}
 800835e:	466a      	mov	r2, sp
 8008360:	f000 f848 	bl	80083f4 <_fstat_r>
 8008364:	2800      	cmp	r0, #0
 8008366:	dbec      	blt.n	8008342 <__swhatbuf_r+0x12>
 8008368:	9901      	ldr	r1, [sp, #4]
 800836a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800836e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008372:	4259      	negs	r1, r3
 8008374:	4159      	adcs	r1, r3
 8008376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800837a:	e7eb      	b.n	8008354 <__swhatbuf_r+0x24>

0800837c <__smakebuf_r>:
 800837c:	898b      	ldrh	r3, [r1, #12]
 800837e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008380:	079d      	lsls	r5, r3, #30
 8008382:	4606      	mov	r6, r0
 8008384:	460c      	mov	r4, r1
 8008386:	d507      	bpl.n	8008398 <__smakebuf_r+0x1c>
 8008388:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800838c:	6023      	str	r3, [r4, #0]
 800838e:	6123      	str	r3, [r4, #16]
 8008390:	2301      	movs	r3, #1
 8008392:	6163      	str	r3, [r4, #20]
 8008394:	b002      	add	sp, #8
 8008396:	bd70      	pop	{r4, r5, r6, pc}
 8008398:	ab01      	add	r3, sp, #4
 800839a:	466a      	mov	r2, sp
 800839c:	f7ff ffc8 	bl	8008330 <__swhatbuf_r>
 80083a0:	9900      	ldr	r1, [sp, #0]
 80083a2:	4605      	mov	r5, r0
 80083a4:	4630      	mov	r0, r6
 80083a6:	f7ff f865 	bl	8007474 <_malloc_r>
 80083aa:	b948      	cbnz	r0, 80083c0 <__smakebuf_r+0x44>
 80083ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083b0:	059a      	lsls	r2, r3, #22
 80083b2:	d4ef      	bmi.n	8008394 <__smakebuf_r+0x18>
 80083b4:	f023 0303 	bic.w	r3, r3, #3
 80083b8:	f043 0302 	orr.w	r3, r3, #2
 80083bc:	81a3      	strh	r3, [r4, #12]
 80083be:	e7e3      	b.n	8008388 <__smakebuf_r+0xc>
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	6020      	str	r0, [r4, #0]
 80083c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c8:	81a3      	strh	r3, [r4, #12]
 80083ca:	9b00      	ldr	r3, [sp, #0]
 80083cc:	6163      	str	r3, [r4, #20]
 80083ce:	9b01      	ldr	r3, [sp, #4]
 80083d0:	6120      	str	r0, [r4, #16]
 80083d2:	b15b      	cbz	r3, 80083ec <__smakebuf_r+0x70>
 80083d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083d8:	4630      	mov	r0, r6
 80083da:	f000 f81d 	bl	8008418 <_isatty_r>
 80083de:	b128      	cbz	r0, 80083ec <__smakebuf_r+0x70>
 80083e0:	89a3      	ldrh	r3, [r4, #12]
 80083e2:	f023 0303 	bic.w	r3, r3, #3
 80083e6:	f043 0301 	orr.w	r3, r3, #1
 80083ea:	81a3      	strh	r3, [r4, #12]
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	431d      	orrs	r5, r3
 80083f0:	81a5      	strh	r5, [r4, #12]
 80083f2:	e7cf      	b.n	8008394 <__smakebuf_r+0x18>

080083f4 <_fstat_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	4d07      	ldr	r5, [pc, #28]	; (8008414 <_fstat_r+0x20>)
 80083f8:	2300      	movs	r3, #0
 80083fa:	4604      	mov	r4, r0
 80083fc:	4608      	mov	r0, r1
 80083fe:	4611      	mov	r1, r2
 8008400:	602b      	str	r3, [r5, #0]
 8008402:	f7f9 fc36 	bl	8001c72 <_fstat>
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	d102      	bne.n	8008410 <_fstat_r+0x1c>
 800840a:	682b      	ldr	r3, [r5, #0]
 800840c:	b103      	cbz	r3, 8008410 <_fstat_r+0x1c>
 800840e:	6023      	str	r3, [r4, #0]
 8008410:	bd38      	pop	{r3, r4, r5, pc}
 8008412:	bf00      	nop
 8008414:	20010748 	.word	0x20010748

08008418 <_isatty_r>:
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	4d06      	ldr	r5, [pc, #24]	; (8008434 <_isatty_r+0x1c>)
 800841c:	2300      	movs	r3, #0
 800841e:	4604      	mov	r4, r0
 8008420:	4608      	mov	r0, r1
 8008422:	602b      	str	r3, [r5, #0]
 8008424:	f7f9 fc35 	bl	8001c92 <_isatty>
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	d102      	bne.n	8008432 <_isatty_r+0x1a>
 800842c:	682b      	ldr	r3, [r5, #0]
 800842e:	b103      	cbz	r3, 8008432 <_isatty_r+0x1a>
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	bd38      	pop	{r3, r4, r5, pc}
 8008434:	20010748 	.word	0x20010748

08008438 <_init>:
 8008438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843a:	bf00      	nop
 800843c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843e:	bc08      	pop	{r3}
 8008440:	469e      	mov	lr, r3
 8008442:	4770      	bx	lr

08008444 <_fini>:
 8008444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008446:	bf00      	nop
 8008448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844a:	bc08      	pop	{r3}
 800844c:	469e      	mov	lr, r3
 800844e:	4770      	bx	lr
