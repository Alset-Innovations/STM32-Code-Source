
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f730  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  0800f8d0  0800f8d0  0001f8d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcb4  0800fcb4  000202e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fcb4  0800fcb4  0001fcb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fcbc  0800fcbc  000202e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fcbc  0800fcbc  0001fcbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fcc0  0800fcc0  0001fcc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  0800fcc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ff8  200002e8  0800ffac  000202e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022e0  0800ffac  000222e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d14d  00000000  00000000  0002035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040d7  00000000  00000000  0003d4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a40  00000000  00000000  00041580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001478  00000000  00000000  00042fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c3ae  00000000  00000000  00044438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa32  00000000  00000000  000607e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3b96  00000000  00000000  00080218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008190  00000000  00000000  00123db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0012bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e8 	.word	0x200002e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f8b8 	.word	0x0800f8b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002ec 	.word	0x200002ec
 80001dc:	0800f8b8 	.word	0x0800f8b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <PrepareCommutation>:
static void MX_TIM9_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

HAL_StatusTypeDef PrepareCommutation (char Direction) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]

	// Read IDR for Hall Sensor status
	uint8_t Hall = (GPIOA->IDR & 0b111) - 1;
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <PrepareCommutation+0xb8>)
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]

	// Edit Hall data according to direction.
	switch (Direction) {
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b42      	cmp	r3, #66	; 0x42
 8000ed2:	d010      	beq.n	8000ef6 <PrepareCommutation+0x42>
 8000ed4:	2b46      	cmp	r3, #70	; 0x46
 8000ed6:	d120      	bne.n	8000f1a <PrepareCommutation+0x66>
	case 'F':
		Hall += 1; // Select next value in the array to go forward
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	3301      	adds	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
		Hall %= 6; // If original was 5 it needs to be 0 to we use % 6
 8000ede:	7bfa      	ldrb	r2, [r7, #15]
 8000ee0:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <PrepareCommutation+0xbc>)
 8000ee2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ee6:	0899      	lsrs	r1, r3, #2
 8000ee8:	460b      	mov	r3, r1
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	440b      	add	r3, r1
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	73fb      	strb	r3, [r7, #15]
	break;
 8000ef4:	e013      	b.n	8000f1e <PrepareCommutation+0x6a>
	case 'B':
		Hall += 6; // To not go negative in the next step we add 6
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	3306      	adds	r3, #6
 8000efa:	73fb      	strb	r3, [r7, #15]
		Hall -= 1; // Select previous value to go backwards
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
		Hall %= 6; // If original was 0 it needs to become 5, this also negates the 6 we added previously
 8000f02:	7bfa      	ldrb	r2, [r7, #15]
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <PrepareCommutation+0xbc>)
 8000f06:	fba3 1302 	umull	r1, r3, r3, r2
 8000f0a:	0899      	lsrs	r1, r3, #2
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	440b      	add	r3, r1
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	73fb      	strb	r3, [r7, #15]
	break;
 8000f18:	e001      	b.n	8000f1e <PrepareCommutation+0x6a>
	default:
		return HAL_ERROR; // If F or B is not supplied the function should return with an error
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e020      	b.n	8000f60 <PrepareCommutation+0xac>
	break;
	}

	// Set Registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	4914      	ldr	r1, [pc, #80]	; (8000f74 <PrepareCommutation+0xc0>)
 8000f22:	4613      	mov	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	440b      	add	r3, r1
 8000f2c:	881a      	ldrh	r2, [r3, #0]
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <PrepareCommutation+0xc4>)
 8000f30:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	490f      	ldr	r1, [pc, #60]	; (8000f74 <PrepareCommutation+0xc0>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	440b      	add	r3, r1
 8000f40:	3304      	adds	r3, #4
 8000f42:	881a      	ldrh	r2, [r3, #0]
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <PrepareCommutation+0xc4>)
 8000f46:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 8000f48:	7bfa      	ldrb	r2, [r7, #15]
 8000f4a:	490a      	ldr	r1, [pc, #40]	; (8000f74 <PrepareCommutation+0xc0>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	440b      	add	r3, r1
 8000f56:	3302      	adds	r3, #2
 8000f58:	881a      	ldrh	r2, [r3, #0]
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <PrepareCommutation+0xc4>)
 8000f5c:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 8000f5e:	2300      	movs	r3, #0

}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	aaaaaaab 	.word	0xaaaaaaab
 8000f74:	20000000 	.word	0x20000000
 8000f78:	40010000 	.word	0x40010000

08000f7c <StartupSequence>:

HAL_StatusTypeDef StartupSequence (char Direction) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]

	// Initialize some variables
	Fapb1tclk = HAL_RCC_GetPCLK1Freq() * 2;
 8000f86:	f005 fd59 	bl	8006a3c <HAL_RCC_GetPCLK1Freq>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4a52      	ldr	r2, [pc, #328]	; (80010d8 <StartupSequence+0x15c>)
 8000f90:	6013      	str	r3, [r2, #0]
	Fapb2tclk = HAL_RCC_GetPCLK2Freq() * 2;
 8000f92:	f005 fd67 	bl	8006a64 <HAL_RCC_GetPCLK2Freq>
 8000f96:	4603      	mov	r3, r0
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4a50      	ldr	r2, [pc, #320]	; (80010dc <StartupSequence+0x160>)
 8000f9c:	6013      	str	r3, [r2, #0]
	RPMConst = Fapb2tclk / (TIM9->PSC + 1) * 60;
 8000f9e:	4b4f      	ldr	r3, [pc, #316]	; (80010dc <StartupSequence+0x160>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b4f      	ldr	r3, [pc, #316]	; (80010e0 <StartupSequence+0x164>)
 8000fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000fac:	4613      	mov	r3, r2
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	1a9b      	subs	r3, r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b4b      	ldr	r3, [pc, #300]	; (80010e4 <StartupSequence+0x168>)
 8000fb8:	601a      	str	r2, [r3, #0]

	// Set first commutation state according to Hall sensors
	if (PrepareCommutation (Direction) == HAL_ERROR) {
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff79 	bl	8000eb4 <PrepareCommutation>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d101      	bne.n	8000fcc <StartupSequence+0x50>
		return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e080      	b.n	80010ce <StartupSequence+0x152>
	}

	// Start HallSensor timer
	HAL_TIMEx_HallSensor_Start (&htim2);
 8000fcc:	4846      	ldr	r0, [pc, #280]	; (80010e8 <StartupSequence+0x16c>)
 8000fce:	f007 f867 	bl	80080a0 <HAL_TIMEx_HallSensor_Start>

	// Start all PWM signals on TIM1
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4845      	ldr	r0, [pc, #276]	; (80010ec <StartupSequence+0x170>)
 8000fd6:	f005 ff1b 	bl	8006e10 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 8000fda:	2104      	movs	r1, #4
 8000fdc:	4843      	ldr	r0, [pc, #268]	; (80010ec <StartupSequence+0x170>)
 8000fde:	f005 ff17 	bl	8006e10 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 8000fe2:	2108      	movs	r1, #8
 8000fe4:	4841      	ldr	r0, [pc, #260]	; (80010ec <StartupSequence+0x170>)
 8000fe6:	f005 ff13 	bl	8006e10 <HAL_TIM_PWM_Start>

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 8000fea:	4b41      	ldr	r3, [pc, #260]	; (80010f0 <StartupSequence+0x174>)
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	4a40      	ldr	r2, [pc, #256]	; (80010f0 <StartupSequence+0x174>)
 8000ff0:	f023 0320 	bic.w	r3, r3, #32
 8000ff4:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 8000ff6:	4b3e      	ldr	r3, [pc, #248]	; (80010f0 <StartupSequence+0x174>)
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	4a3d      	ldr	r2, [pc, #244]	; (80010f0 <StartupSequence+0x174>)
 8000ffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001000:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 8001002:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001010:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8001012:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <StartupSequence+0x164>)
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	4a32      	ldr	r2, [pc, #200]	; (80010e0 <StartupSequence+0x164>)
 8001018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800101c:	60d3      	str	r3, [r2, #12]

	// Start Interrupts
	HAL_TIM_Base_Start_IT (&htim1);
 800101e:	4833      	ldr	r0, [pc, #204]	; (80010ec <StartupSequence+0x170>)
 8001020:	f005 fe0c 	bl	8006c3c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim2);
 8001024:	4830      	ldr	r0, [pc, #192]	; (80010e8 <StartupSequence+0x16c>)
 8001026:	f005 fe09 	bl	8006c3c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim9);
 800102a:	4832      	ldr	r0, [pc, #200]	; (80010f4 <StartupSequence+0x178>)
 800102c:	f005 fe06 	bl	8006c3c <HAL_TIM_Base_Start_IT>

	// Clear all interrupt triggers
	TIM1->SR &= ~TIM_SR_COMIF;		// Clear Commutation interrupt flag
 8001030:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <StartupSequence+0x174>)
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	4a2e      	ldr	r2, [pc, #184]	; (80010f0 <StartupSequence+0x174>)
 8001036:	f023 0320 	bic.w	r3, r3, #32
 800103a:	6113      	str	r3, [r2, #16]
	TIM1->SR &= ~TIM_SR_BIF;		// Clear Break interrupt flag
 800103c:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <StartupSequence+0x174>)
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	4a2b      	ldr	r2, [pc, #172]	; (80010f0 <StartupSequence+0x174>)
 8001042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001046:	6113      	str	r3, [r2, #16]
	TIM2->SR &= ~TIM_SR_TIF;		// Clear timer 2 interrupt flag
 8001048:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001056:	6113      	str	r3, [r2, #16]
	TIM9->SR &= ~TIM_SR_TIF;		// Clear timer 9 interrupt flag
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <StartupSequence+0x164>)
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	4a20      	ldr	r2, [pc, #128]	; (80010e0 <StartupSequence+0x164>)
 800105e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001062:	6113      	str	r3, [r2, #16]

	// Enable interrupts
	TIM1->DIER |= TIM_DIER_COMIE;	// Enable Commutation events in DIER register
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <StartupSequence+0x174>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <StartupSequence+0x174>)
 800106a:	f043 0320 	orr.w	r3, r3, #32
 800106e:	60d3      	str	r3, [r2, #12]
	TIM2->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 2
 8001070:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800107a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800107e:	60d3      	str	r3, [r2, #12]
	TIM9->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 9
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <StartupSequence+0x164>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <StartupSequence+0x164>)
 8001086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800108a:	60d3      	str	r3, [r2, #12]

	// Write some registers
	TIM1->CR2  |= TIM_CR2_CCPC; 	// Set CCPC in CR2 to preload CCxE, CCxNE and OCxM bits
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <StartupSequence+0x174>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <StartupSequence+0x174>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6053      	str	r3, [r2, #4]
	TIM1->EGR  |= TIM_EGR_COMG; 	// Set COMG bit in EGR for first commutation
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <StartupSequence+0x174>)
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <StartupSequence+0x174>)
 800109e:	f043 0320 	orr.w	r3, r3, #32
 80010a2:	6153      	str	r3, [r2, #20]
	TIM1->DIER |= TIM_DIER_COMIE; 	// Enable commutation events in DIER register
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <StartupSequence+0x174>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <StartupSequence+0x174>)
 80010aa:	f043 0320 	orr.w	r3, r3, #32
 80010ae:	60d3      	str	r3, [r2, #12]
	TIM1->BDTR &= ~TIM_BDTR_DTG;	// Reset DTG bits
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <StartupSequence+0x174>)
 80010b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b4:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <StartupSequence+0x174>)
 80010b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010ba:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR |= 0x800A;			// Set dead-time to 100ns and make sure to enable MOE bit
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <StartupSequence+0x174>)
 80010be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c0:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <StartupSequence+0x174>)
 80010c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010c6:	f043 030a 	orr.w	r3, r3, #10
 80010ca:	6453      	str	r3, [r2, #68]	; 0x44

	return HAL_OK;
 80010cc:	2300      	movs	r3, #0

}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000574 	.word	0x20000574
 80010dc:	20000578 	.word	0x20000578
 80010e0:	40014000 	.word	0x40014000
 80010e4:	2000057c 	.word	0x2000057c
 80010e8:	20000440 	.word	0x20000440
 80010ec:	200003f8 	.word	0x200003f8
 80010f0:	40010000 	.word	0x40010000
 80010f4:	20000488 	.word	0x20000488

080010f8 <StopSequence>:

HAL_StatusTypeDef StopSequence() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0

	// Stop HallSensor timer
	HAL_TIMEx_HallSensor_Stop (&htim2);
 80010fc:	481e      	ldr	r0, [pc, #120]	; (8001178 <StopSequence+0x80>)
 80010fe:	f007 f84f 	bl	80081a0 <HAL_TIMEx_HallSensor_Stop>

	// Disable all output channels
	TIM1->CCER  = 0x0000;
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <StopSequence+0x84>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = 0x0000;
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <StopSequence+0x84>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = 0x0000;
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <StopSequence+0x84>)
 8001110:	2200      	movs	r2, #0
 8001112:	61da      	str	r2, [r3, #28]

	// Disable commutation events if not already disabled
	if ( (TIM1->DIER & TIM_DIER_COMIE) >= 1 ) { 	// If COMIE bit in DIER is set commutation events are still enabled
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <StopSequence+0x84>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f003 0320 	and.w	r3, r3, #32
 800111c:	2b00      	cmp	r3, #0
 800111e:	d012      	beq.n	8001146 <StopSequence+0x4e>

		TIM1->EGR |= TIM_EGR_COMG; 							// Trigger commutation event
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <StopSequence+0x84>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	4a15      	ldr	r2, [pc, #84]	; (800117c <StopSequence+0x84>)
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	6153      	str	r3, [r2, #20]
		while ( (TIM1->SR & TIM_SR_COMIF) >= 1 ); 	// Wait until commutation event has happened
 800112c:	bf00      	nop
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <StopSequence+0x84>)
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	f003 0320 	and.w	r3, r3, #32
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f9      	bne.n	800112e <StopSequence+0x36>
		TIM1->DIER &= ~TIM_DIER_COMIE; 						// Disable commutation events in DIER register
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <StopSequence+0x84>)
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	4a0f      	ldr	r2, [pc, #60]	; (800117c <StopSequence+0x84>)
 8001140:	f023 0320 	bic.w	r3, r3, #32
 8001144:	60d3      	str	r3, [r2, #12]

	}

	// Stop interrupts
	HAL_TIM_Base_Stop_IT (&htim1);
 8001146:	480e      	ldr	r0, [pc, #56]	; (8001180 <StopSequence+0x88>)
 8001148:	f005 fdda 	bl	8006d00 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim2);
 800114c:	480a      	ldr	r0, [pc, #40]	; (8001178 <StopSequence+0x80>)
 800114e:	f005 fdd7 	bl	8006d00 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim9);
 8001152:	480c      	ldr	r0, [pc, #48]	; (8001184 <StopSequence+0x8c>)
 8001154:	f005 fdd4 	bl	8006d00 <HAL_TIM_Base_Stop_IT>

	// Stop PWM Timers
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_1);
 8001158:	2100      	movs	r1, #0
 800115a:	4809      	ldr	r0, [pc, #36]	; (8001180 <StopSequence+0x88>)
 800115c:	f005 ff08 	bl	8006f70 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_2);
 8001160:	2104      	movs	r1, #4
 8001162:	4807      	ldr	r0, [pc, #28]	; (8001180 <StopSequence+0x88>)
 8001164:	f005 ff04 	bl	8006f70 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_3);
 8001168:	2108      	movs	r1, #8
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <StopSequence+0x88>)
 800116c:	f005 ff00 	bl	8006f70 <HAL_TIM_PWM_Stop>

	return HAL_OK;
 8001170:	2300      	movs	r3, #0

}
 8001172:	4618      	mov	r0, r3
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000440 	.word	0x20000440
 800117c:	40010000 	.word	0x40010000
 8001180:	200003f8 	.word	0x200003f8
 8001184:	20000488 	.word	0x20000488

08001188 <ProcessData>:

void ProcessData (void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0

	StartReg = RxData[0]; 			// Start address of registers to be written
 800118e:	4b35      	ldr	r3, [pc, #212]	; (8001264 <ProcessData+0xdc>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	4b34      	ldr	r3, [pc, #208]	; (8001268 <ProcessData+0xe0>)
 8001196:	601a      	str	r2, [r3, #0]
	NumReg = RxCount - 1; 			// Number of registers to be written
 8001198:	4b34      	ldr	r3, [pc, #208]	; (800126c <ProcessData+0xe4>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	3b01      	subs	r3, #1
 800119e:	4a34      	ldr	r2, [pc, #208]	; (8001270 <ProcessData+0xe8>)
 80011a0:	6013      	str	r3, [r2, #0]
	EndReg = StartReg + NumReg - 1; // Last register to be written
 80011a2:	4b31      	ldr	r3, [pc, #196]	; (8001268 <ProcessData+0xe0>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4b32      	ldr	r3, [pc, #200]	; (8001270 <ProcessData+0xe8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	3b01      	subs	r3, #1
 80011ae:	4a31      	ldr	r2, [pc, #196]	; (8001274 <ProcessData+0xec>)
 80011b0:	6013      	str	r3, [r2, #0]

	// If the last register to be wriiten is larger than the size of the register call the error handler
	if (EndReg > RegSize) {
 80011b2:	4b30      	ldr	r3, [pc, #192]	; (8001274 <ProcessData+0xec>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	dd01      	ble.n	80011be <ProcessData+0x36>
		Error_Handler();
 80011ba:	f000 fc59 	bl	8001a70 <Error_Handler>
	}

	// Write data into the register using a for loop
	for (int i = 1; i < NumReg + 1; i++) {
 80011be:	2301      	movs	r3, #1
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	e00d      	b.n	80011e0 <ProcessData+0x58>
		Registers[StartReg++] = RxData[i];
 80011c4:	4b28      	ldr	r3, [pc, #160]	; (8001268 <ProcessData+0xe0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	1c5a      	adds	r2, r3, #1
 80011ca:	4927      	ldr	r1, [pc, #156]	; (8001268 <ProcessData+0xe0>)
 80011cc:	600a      	str	r2, [r1, #0]
 80011ce:	4925      	ldr	r1, [pc, #148]	; (8001264 <ProcessData+0xdc>)
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	440a      	add	r2, r1
 80011d4:	7811      	ldrb	r1, [r2, #0]
 80011d6:	4a28      	ldr	r2, [pc, #160]	; (8001278 <ProcessData+0xf0>)
 80011d8:	54d1      	strb	r1, [r2, r3]
	for (int i = 1; i < NumReg + 1; i++) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3301      	adds	r3, #1
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <ProcessData+0xe8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	ddec      	ble.n	80011c4 <ProcessData+0x3c>
	}

	// If the PWM is higher than 0 but the motor is not turning then startup
	if ( Registers[PWMReg] > 0 && Registers[RPMReg] <= 0) {
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <ProcessData+0xf0>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d008      	beq.n	8001204 <ProcessData+0x7c>
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <ProcessData+0xf0>)
 80011f4:	78db      	ldrb	r3, [r3, #3]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d104      	bne.n	8001204 <ProcessData+0x7c>
		StartupSequence(Registers[DirReg]);
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <ProcessData+0xf0>)
 80011fc:	785b      	ldrb	r3, [r3, #1]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff febc 	bl	8000f7c <StartupSequence>
	}

	// If the PWM is 0 or negative but the motor is still turning shutdown
	if ( Registers[PWMReg] <= 0 && Registers[RPMReg] > 0 ) {
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <ProcessData+0xf0>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d105      	bne.n	8001218 <ProcessData+0x90>
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <ProcessData+0xf0>)
 800120e:	78db      	ldrb	r3, [r3, #3]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <ProcessData+0x90>
		StopSequence();
 8001214:	f7ff ff70 	bl	80010f8 <StopSequence>
	}

	// Update PWM values
	if ( Registers[PWMReg] >= 0) {

		uint32_t PWM = (Registers[PWMReg] * TIM1->ARR) / 100; // Calculate required CCRx value
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <ProcessData+0xf0>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <ProcessData+0xf4>)
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	fb02 f303 	mul.w	r3, r2, r3
 8001226:	4a16      	ldr	r2, [pc, #88]	; (8001280 <ProcessData+0xf8>)
 8001228:	fba2 2303 	umull	r2, r3, r2, r3
 800122c:	095b      	lsrs	r3, r3, #5
 800122e:	603b      	str	r3, [r7, #0]

		TIM1->CR1 |= TIM_CR1_UDIS; 	// Disable Update Events
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <ProcessData+0xf4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a11      	ldr	r2, [pc, #68]	; (800127c <ProcessData+0xf4>)
 8001236:	f043 0302 	orr.w	r3, r3, #2
 800123a:	6013      	str	r3, [r2, #0]
		TIM1->CCR1 = PWM;	  		// Set new PWM for channel 1
 800123c:	4a0f      	ldr	r2, [pc, #60]	; (800127c <ProcessData+0xf4>)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = PWM;	  		// Set new PWM for channel 2
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <ProcessData+0xf4>)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = PWM;	  		// Set new PWM for channel 3
 8001248:	4a0c      	ldr	r2, [pc, #48]	; (800127c <ProcessData+0xf4>)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM1->CR1 &= ~TIM_CR1_UDIS; // Enable Update Events
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <ProcessData+0xf4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <ProcessData+0xf4>)
 8001254:	f023 0302 	bic.w	r3, r3, #2
 8001258:	6013      	str	r3, [r2, #0]

	}

}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000056c 	.word	0x2000056c
 8001268:	2000055c 	.word	0x2000055c
 800126c:	20000569 	.word	0x20000569
 8001270:	20000560 	.word	0x20000560
 8001274:	20000564 	.word	0x20000564
 8001278:	20000558 	.word	0x20000558
 800127c:	40010000 	.word	0x40010000
 8001280:	51eb851f 	.word	0x51eb851f

08001284 <HAL_I2C_ListenCpltCallback>:

extern void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef *hi2c) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

	HAL_I2C_EnableListen_IT (hi2c);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f002 f869 	bl	8003364 <HAL_I2C_EnableListen_IT>

}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_I2C_AddrCallback>:

extern void HAL_I2C_AddrCallback (I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	70fb      	strb	r3, [r7, #3]
 80012a8:	4613      	mov	r3, r2
 80012aa:	803b      	strh	r3, [r7, #0]

	if ( TransferDirection == I2C_DIRECTION_TRANSMIT ) { // If the master wants to transmit the data
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d112      	bne.n	80012d8 <HAL_I2C_AddrCallback+0x3c>

		RxCount = 0;
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <HAL_I2C_AddrCallback+0x70>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
		memset(RxData, 0, RxSize); // Empty the RxData array
 80012b8:	2206      	movs	r2, #6
 80012ba:	2100      	movs	r1, #0
 80012bc:	4814      	ldr	r0, [pc, #80]	; (8001310 <HAL_I2C_AddrCallback+0x74>)
 80012be:	f00c fa02 	bl	800d6c6 <memset>
		HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_FIRST_FRAME);
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_I2C_AddrCallback+0x70>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HAL_I2C_AddrCallback+0x74>)
 80012ca:	18d1      	adds	r1, r2, r3
 80012cc:	2301      	movs	r3, #1
 80012ce:	2201      	movs	r2, #1
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f001 ffd4 	bl	800327e <HAL_I2C_Slave_Seq_Receive_IT>
		TxCount = 0;
		StartReg = RxData[0];
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, Registers + TxCount + StartReg, 1, I2C_FIRST_FRAME);

	}
}
 80012d6:	e014      	b.n	8001302 <HAL_I2C_AddrCallback+0x66>
		TxCount = 0;
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <HAL_I2C_AddrCallback+0x78>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
		StartReg = RxData[0];
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HAL_I2C_AddrCallback+0x74>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <HAL_I2C_AddrCallback+0x7c>)
 80012e6:	601a      	str	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, Registers + TxCount + StartReg, 1, I2C_FIRST_FRAME);
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_I2C_AddrCallback+0x78>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_I2C_AddrCallback+0x7c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a09      	ldr	r2, [pc, #36]	; (800131c <HAL_I2C_AddrCallback+0x80>)
 80012f6:	1899      	adds	r1, r3, r2
 80012f8:	2301      	movs	r3, #1
 80012fa:	2201      	movs	r2, #1
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f001 ff4b 	bl	8003198 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000569 	.word	0x20000569
 8001310:	2000056c 	.word	0x2000056c
 8001314:	20000568 	.word	0x20000568
 8001318:	2000055c 	.word	0x2000055c
 800131c:	20000558 	.word	0x20000558

08001320 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback (I2C_HandleTypeDef *hi2c) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

	TxCount++;
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_I2C_SlaveTxCpltCallback+0x38>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8001332:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Seq_Transmit_IT (hi2c, Registers + TxCount + StartReg, 1, I2C_NEXT_FRAME);
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_I2C_SlaveTxCpltCallback+0x3c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_I2C_SlaveTxCpltCallback+0x40>)
 8001342:	1899      	adds	r1, r3, r2
 8001344:	2304      	movs	r3, #4
 8001346:	2201      	movs	r2, #1
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f001 ff25 	bl	8003198 <HAL_I2C_Slave_Seq_Transmit_IT>

}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000568 	.word	0x20000568
 800135c:	2000055c 	.word	0x2000055c
 8001360:	20000558 	.word	0x20000558

08001364 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback (I2C_HandleTypeDef *hi2c) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

	RxCount++;
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8001376:	701a      	strb	r2, [r3, #0]

	if ( RxCount < RxSize ) {
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b05      	cmp	r3, #5
 800137e:	d818      	bhi.n	80013b2 <HAL_I2C_SlaveRxCpltCallback+0x4e>

		if (RxCount == RxSize - 1) {
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b05      	cmp	r3, #5
 8001386:	d10a      	bne.n	800139e <HAL_I2C_SlaveRxCpltCallback+0x3a>
			HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_LAST_FRAME);
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8001390:	18d1      	adds	r1, r2, r3
 8001392:	2320      	movs	r3, #32
 8001394:	2201      	movs	r2, #1
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f001 ff71 	bl	800327e <HAL_I2C_Slave_Seq_Receive_IT>
 800139c:	e009      	b.n	80013b2 <HAL_I2C_SlaveRxCpltCallback+0x4e>
		} else {
			HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_NEXT_FRAME);
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80013a6:	18d1      	adds	r1, r2, r3
 80013a8:	2304      	movs	r3, #4
 80013aa:	2201      	movs	r2, #1
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f001 ff66 	bl	800327e <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if ( RxCount == RxSize) {
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d101      	bne.n	80013be <HAL_I2C_SlaveRxCpltCallback+0x5a>
		ProcessData();
 80013ba:	f7ff fee5 	bl	8001188 <ProcessData>
	}

}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000569 	.word	0x20000569
 80013cc:	2000056c 	.word	0x2000056c

080013d0 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback (I2C_HandleTypeDef *hi2c) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

	if ( HAL_I2C_GetError (hi2c) == 4) {
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f002 fa1d 	bl	8003818 <HAL_I2C_GetError>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d111      	bne.n	8001408 <HAL_I2C_ErrorCallback+0x38>

		__HAL_I2C_CLEAR_FLAG (hi2c, I2C_FLAG_AF); 	// Clear AF flag
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80013ec:	615a      	str	r2, [r3, #20]

		if ( TxCount == 0) { 						// Error while recieving
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_I2C_ErrorCallback+0x48>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d102      	bne.n	80013fc <HAL_I2C_ErrorCallback+0x2c>
			ProcessData();
 80013f6:	f7ff fec7 	bl	8001188 <ProcessData>
 80013fa:	e005      	b.n	8001408 <HAL_I2C_ErrorCallback+0x38>
		} else { 									// Error while transmitting
			TxCount--;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_I2C_ErrorCallback+0x48>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	3b01      	subs	r3, #1
 8001402:	b2da      	uxtb	r2, r3
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <HAL_I2C_ErrorCallback+0x48>)
 8001406:	701a      	strb	r2, [r3, #0]
		}

	}

	HAL_I2C_EnableListen_IT(hi2c);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f001 ffab 	bl	8003364 <HAL_I2C_EnableListen_IT>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000568 	.word	0x20000568

0800141c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001420:	f000 ff8e 	bl	8002340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001424:	f000 f832 	bl	800148c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001428:	f000 fac2 	bl	80019b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800142c:	f000 f898 	bl	8001560 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001430:	f000 f94c 	bl	80016cc <MX_TIM1_Init>
  MX_SPI1_Init();
 8001434:	f000 f914 	bl	8001660 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001438:	f000 fa06 	bl	8001848 <MX_TIM2_Init>
  MX_TIM9_Init();
 800143c:	f000 fa4e 	bl	80018dc <MX_TIM9_Init>
  MX_I2C1_Init();
 8001440:	f000 f8e0 	bl	8001604 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001444:	f00a fe90 	bl	800c168 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8001448:	f000 fa88 	bl	800195c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	StartupSequence ('F');
 800144c:	2046      	movs	r0, #70	; 0x46
 800144e:	f7ff fd95 	bl	8000f7c <StartupSequence>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// Transmit RPM value to PC via USB
	len = snprintf(buf, sizeof(buf), "\n\rCurrent RPM: %4d", Registers[RPMReg]);
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <main+0x60>)
 8001454:	78db      	ldrb	r3, [r3, #3]
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <main+0x64>)
 8001458:	2140      	movs	r1, #64	; 0x40
 800145a:	480a      	ldr	r0, [pc, #40]	; (8001484 <main+0x68>)
 800145c:	f00c f8bc 	bl	800d5d8 <sniprintf>
 8001460:	4603      	mov	r3, r0
 8001462:	b29a      	uxth	r2, r3
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <main+0x6c>)
 8001466:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS ((uint8_t *) buf, len);
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <main+0x6c>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <main+0x68>)
 8001470:	f00a ff38 	bl	800c2e4 <CDC_Transmit_FS>

	HAL_Delay(100);
 8001474:	2064      	movs	r0, #100	; 0x64
 8001476:	f000 ffd5 	bl	8002424 <HAL_Delay>
	len = snprintf(buf, sizeof(buf), "\n\rCurrent RPM: %4d", Registers[RPMReg]);
 800147a:	e7ea      	b.n	8001452 <main+0x36>
 800147c:	20000558 	.word	0x20000558
 8001480:	0800f8d0 	.word	0x0800f8d0
 8001484:	20000518 	.word	0x20000518
 8001488:	20000514 	.word	0x20000514

0800148c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b094      	sub	sp, #80	; 0x50
 8001490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001492:	f107 0320 	add.w	r3, r7, #32
 8001496:	2230      	movs	r2, #48	; 0x30
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f00c f913 	bl	800d6c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	4b28      	ldr	r3, [pc, #160]	; (8001558 <SystemClock_Config+0xcc>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a27      	ldr	r2, [pc, #156]	; (8001558 <SystemClock_Config+0xcc>)
 80014ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <SystemClock_Config+0xcc>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <SystemClock_Config+0xd0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a21      	ldr	r2, [pc, #132]	; (800155c <SystemClock_Config+0xd0>)
 80014d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <SystemClock_Config+0xd0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f2:	2302      	movs	r3, #2
 80014f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014fc:	2319      	movs	r3, #25
 80014fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001500:	23c0      	movs	r3, #192	; 0xc0
 8001502:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001504:	2302      	movs	r3, #2
 8001506:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001508:	2304      	movs	r3, #4
 800150a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150c:	f107 0320 	add.w	r3, r7, #32
 8001510:	4618      	mov	r0, r3
 8001512:	f004 fe63 	bl	80061dc <HAL_RCC_OscConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800151c:	f000 faa8 	bl	8001a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001520:	230f      	movs	r3, #15
 8001522:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001524:	2302      	movs	r3, #2
 8001526:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800152c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001530:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001536:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	2103      	movs	r1, #3
 800153e:	4618      	mov	r0, r3
 8001540:	f005 f8c4 	bl	80066cc <HAL_RCC_ClockConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800154a:	f000 fa91 	bl	8001a70 <Error_Handler>
  }
}
 800154e:	bf00      	nop
 8001550:	3750      	adds	r7, #80	; 0x50
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40007000 	.word	0x40007000

08001560 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001566:	463b      	mov	r3, r7
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <MX_ADC1_Init+0x98>)
 8001574:	4a21      	ldr	r2, [pc, #132]	; (80015fc <MX_ADC1_Init+0x9c>)
 8001576:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <MX_ADC1_Init+0x98>)
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <MX_ADC1_Init+0x98>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001584:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <MX_ADC1_Init+0x98>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_ADC1_Init+0x98>)
 800158c:	2200      	movs	r2, #0
 800158e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <MX_ADC1_Init+0x98>)
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <MX_ADC1_Init+0x98>)
 800159a:	2200      	movs	r2, #0
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_ADC1_Init+0x98>)
 80015a0:	4a17      	ldr	r2, [pc, #92]	; (8001600 <MX_ADC1_Init+0xa0>)
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_ADC1_Init+0x98>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <MX_ADC1_Init+0x98>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_ADC1_Init+0x98>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_ADC1_Init+0x98>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015be:	480e      	ldr	r0, [pc, #56]	; (80015f8 <MX_ADC1_Init+0x98>)
 80015c0:	f000 ff54 	bl	800246c <HAL_ADC_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80015ca:	f000 fa51 	bl	8001a70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015ce:	2304      	movs	r3, #4
 80015d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015d2:	2301      	movs	r3, #1
 80015d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015da:	463b      	mov	r3, r7
 80015dc:	4619      	mov	r1, r3
 80015de:	4806      	ldr	r0, [pc, #24]	; (80015f8 <MX_ADC1_Init+0x98>)
 80015e0:	f000 ff88 	bl	80024f4 <HAL_ADC_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80015ea:	f000 fa41 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000304 	.word	0x20000304
 80015fc:	40012000 	.word	0x40012000
 8001600:	0f000001 	.word	0x0f000001

08001604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_I2C1_Init+0x50>)
 800160a:	4a13      	ldr	r2, [pc, #76]	; (8001658 <MX_I2C1_Init+0x54>)
 800160c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_I2C1_Init+0x50>)
 8001610:	4a12      	ldr	r2, [pc, #72]	; (800165c <MX_I2C1_Init+0x58>)
 8001612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_I2C1_Init+0x50>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_I2C1_Init+0x50>)
 800161c:	2220      	movs	r2, #32
 800161e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_I2C1_Init+0x50>)
 8001622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <MX_I2C1_Init+0x50>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_I2C1_Init+0x50>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <MX_I2C1_Init+0x50>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_I2C1_Init+0x50>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <MX_I2C1_Init+0x50>)
 8001642:	f001 fc65 	bl	8002f10 <HAL_I2C_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800164c:	f000 fa10 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	2000034c 	.word	0x2000034c
 8001658:	40005400 	.word	0x40005400
 800165c:	000186a0 	.word	0x000186a0

08001660 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <MX_SPI1_Init+0x64>)
 8001666:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <MX_SPI1_Init+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <MX_SPI1_Init+0x64>)
 800166c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001670:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <MX_SPI1_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <MX_SPI1_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_SPI1_Init+0x64>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <MX_SPI1_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_SPI1_Init+0x64>)
 800168c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001690:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_SPI1_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <MX_SPI1_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_SPI1_Init+0x64>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <MX_SPI1_Init+0x64>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_SPI1_Init+0x64>)
 80016ac:	220a      	movs	r2, #10
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016b0:	4804      	ldr	r0, [pc, #16]	; (80016c4 <MX_SPI1_Init+0x64>)
 80016b2:	f005 f9eb 	bl	8006a8c <HAL_SPI_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016bc:	f000 f9d8 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200003a0 	.word	0x200003a0
 80016c8:	40013000 	.word	0x40013000

080016cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b096      	sub	sp, #88	; 0x58
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80016d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ec:	f107 0320 	add.w	r3, r7, #32
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	615a      	str	r2, [r3, #20]
 80016fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001700:	463b      	mov	r3, r7
 8001702:	2220      	movs	r2, #32
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f00b ffdd 	bl	800d6c6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800170c:	4b4c      	ldr	r3, [pc, #304]	; (8001840 <MX_TIM1_Init+0x174>)
 800170e:	4a4d      	ldr	r2, [pc, #308]	; (8001844 <MX_TIM1_Init+0x178>)
 8001710:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001712:	4b4b      	ldr	r3, [pc, #300]	; (8001840 <MX_TIM1_Init+0x174>)
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b49      	ldr	r3, [pc, #292]	; (8001840 <MX_TIM1_Init+0x174>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 800171e:	4b48      	ldr	r3, [pc, #288]	; (8001840 <MX_TIM1_Init+0x174>)
 8001720:	f240 727f 	movw	r2, #1919	; 0x77f
 8001724:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001726:	4b46      	ldr	r3, [pc, #280]	; (8001840 <MX_TIM1_Init+0x174>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800172c:	4b44      	ldr	r3, [pc, #272]	; (8001840 <MX_TIM1_Init+0x174>)
 800172e:	2200      	movs	r2, #0
 8001730:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001732:	4b43      	ldr	r3, [pc, #268]	; (8001840 <MX_TIM1_Init+0x174>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001738:	4841      	ldr	r0, [pc, #260]	; (8001840 <MX_TIM1_Init+0x174>)
 800173a:	f005 fa30 	bl	8006b9e <HAL_TIM_Base_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001744:	f000 f994 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001748:	483d      	ldr	r0, [pc, #244]	; (8001840 <MX_TIM1_Init+0x174>)
 800174a:	f005 fb08 	bl	8006d5e <HAL_TIM_PWM_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001754:	f000 f98c 	bl	8001a70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001758:	2304      	movs	r3, #4
 800175a:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800175c:	2300      	movs	r3, #0
 800175e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001760:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001764:	4619      	mov	r1, r3
 8001766:	4836      	ldr	r0, [pc, #216]	; (8001840 <MX_TIM1_Init+0x174>)
 8001768:	f005 ff1c 	bl	80075a4 <HAL_TIM_SlaveConfigSynchro>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001772:	f000 f97d 	bl	8001a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800177e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001782:	4619      	mov	r1, r3
 8001784:	482e      	ldr	r0, [pc, #184]	; (8001840 <MX_TIM1_Init+0x174>)
 8001786:	f006 fd43 	bl	8008210 <HAL_TIMEx_MasterConfigSynchronization>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001790:	f000 f96e 	bl	8001a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001794:	2360      	movs	r3, #96	; 0x60
 8001796:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 500;
 8001798:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179e:	2300      	movs	r3, #0
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b2:	f107 0320 	add.w	r3, r7, #32
 80017b6:	2200      	movs	r2, #0
 80017b8:	4619      	mov	r1, r3
 80017ba:	4821      	ldr	r0, [pc, #132]	; (8001840 <MX_TIM1_Init+0x174>)
 80017bc:	f005 fe30 	bl	8007420 <HAL_TIM_PWM_ConfigChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80017c6:	f000 f953 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ca:	f107 0320 	add.w	r3, r7, #32
 80017ce:	2204      	movs	r2, #4
 80017d0:	4619      	mov	r1, r3
 80017d2:	481b      	ldr	r0, [pc, #108]	; (8001840 <MX_TIM1_Init+0x174>)
 80017d4:	f005 fe24 	bl	8007420 <HAL_TIM_PWM_ConfigChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80017de:	f000 f947 	bl	8001a70 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017e6:	f107 0320 	add.w	r3, r7, #32
 80017ea:	2208      	movs	r2, #8
 80017ec:	4619      	mov	r1, r3
 80017ee:	4814      	ldr	r0, [pc, #80]	; (8001840 <MX_TIM1_Init+0x174>)
 80017f0:	f005 fe16 	bl	8007420 <HAL_TIM_PWM_ConfigChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 80017fa:	f000 f939 	bl	8001a70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001816:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800181c:	463b      	mov	r3, r7
 800181e:	4619      	mov	r1, r3
 8001820:	4807      	ldr	r0, [pc, #28]	; (8001840 <MX_TIM1_Init+0x174>)
 8001822:	f006 fd63 	bl	80082ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 800182c:	f000 f920 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <MX_TIM1_Init+0x174>)
 8001832:	f000 fb1d 	bl	8001e70 <HAL_TIM_MspPostInit>

}
 8001836:	bf00      	nop
 8001838:	3758      	adds	r7, #88	; 0x58
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200003f8 	.word	0x200003f8
 8001844:	40010000 	.word	0x40010000

08001848 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185c:	463b      	mov	r3, r7
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001864:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <MX_TIM2_Init+0x90>)
 8001866:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800186a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <MX_TIM2_Init+0x90>)
 800186e:	2200      	movs	r2, #0
 8001870:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001872:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <MX_TIM2_Init+0x90>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <MX_TIM2_Init+0x90>)
 800187a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800187e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <MX_TIM2_Init+0x90>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_TIM2_Init+0x90>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 15;
 8001894:	230f      	movs	r3, #15
 8001896:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 800189c:	f107 0308 	add.w	r3, r7, #8
 80018a0:	4619      	mov	r1, r3
 80018a2:	480d      	ldr	r0, [pc, #52]	; (80018d8 <MX_TIM2_Init+0x90>)
 80018a4:	f006 fb52 	bl	8007f4c <HAL_TIMEx_HallSensor_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80018ae:	f000 f8df 	bl	8001a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80018b2:	2350      	movs	r3, #80	; 0x50
 80018b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ba:	463b      	mov	r3, r7
 80018bc:	4619      	mov	r1, r3
 80018be:	4806      	ldr	r0, [pc, #24]	; (80018d8 <MX_TIM2_Init+0x90>)
 80018c0:	f006 fca6 	bl	8008210 <HAL_TIMEx_MasterConfigSynchronization>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80018ca:	f000 f8d1 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000440 	.word	0x20000440

080018dc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80018e2:	463b      	mov	r3, r7
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <MX_TIM9_Init+0x78>)
 80018f0:	4a19      	ldr	r2, [pc, #100]	; (8001958 <MX_TIM9_Init+0x7c>)
 80018f2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1499;
 80018f4:	4b17      	ldr	r3, [pc, #92]	; (8001954 <MX_TIM9_Init+0x78>)
 80018f6:	f240 52db 	movw	r2, #1499	; 0x5db
 80018fa:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <MX_TIM9_Init+0x78>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 63999;
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <MX_TIM9_Init+0x78>)
 8001904:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001908:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_TIM9_Init+0x78>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <MX_TIM9_Init+0x78>)
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8001916:	480f      	ldr	r0, [pc, #60]	; (8001954 <MX_TIM9_Init+0x78>)
 8001918:	f005 fb8e 	bl	8007038 <HAL_TIM_IC_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001922:	f000 f8a5 	bl	8001a70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800192a:	2301      	movs	r3, #1
 800192c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001932:	230f      	movs	r3, #15
 8001934:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001936:	463b      	mov	r3, r7
 8001938:	2204      	movs	r2, #4
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_TIM9_Init+0x78>)
 800193e:	f005 fcd2 	bl	80072e6 <HAL_TIM_IC_ConfigChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM9_Init+0x70>
  {
    Error_Handler();
 8001948:	f000 f892 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000488 	.word	0x20000488
 8001958:	40014000 	.word	0x40014000

0800195c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <MX_USART1_UART_Init+0x50>)
 8001964:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 8001968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800196c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 8001982:	220c      	movs	r2, #12
 8001984:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 8001994:	f006 fd10 	bl	80083b8 <HAL_UART_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800199e:	f000 f867 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200004d0 	.word	0x200004d0
 80019ac:	40011000 	.word	0x40011000

080019b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <MX_GPIO_Init+0xb8>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a26      	ldr	r2, [pc, #152]	; (8001a68 <MX_GPIO_Init+0xb8>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <MX_GPIO_Init+0xb8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <MX_GPIO_Init+0xb8>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a1f      	ldr	r2, [pc, #124]	; (8001a68 <MX_GPIO_Init+0xb8>)
 80019ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <MX_GPIO_Init+0xb8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <MX_GPIO_Init+0xb8>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a18      	ldr	r2, [pc, #96]	; (8001a68 <MX_GPIO_Init+0xb8>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <MX_GPIO_Init+0xb8>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <MX_GPIO_Init+0xb8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a11      	ldr	r2, [pc, #68]	; (8001a68 <MX_GPIO_Init+0xb8>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_GPIO_Init+0xb8>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001a3c:	480b      	ldr	r0, [pc, #44]	; (8001a6c <MX_GPIO_Init+0xbc>)
 8001a3e:	f001 fa4d 	bl	8002edc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a42:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4804      	ldr	r0, [pc, #16]	; (8001a6c <MX_GPIO_Init+0xbc>)
 8001a5c:	f001 f8ba 	bl	8002bd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020800 	.word	0x40020800

08001a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a74:	b672      	cpsid	i
}
 8001a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <Error_Handler+0x8>
	...

08001a7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a90:	6453      	str	r3, [r2, #68]	; 0x44
 8001a92:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aac:	6413      	str	r3, [r2, #64]	; 0x40
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <HAL_ADC_MspInit+0x7c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d127      	bne.n	8001b3e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <HAL_ADC_MspInit+0x80>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	4a15      	ldr	r2, [pc, #84]	; (8001b4c <HAL_ADC_MspInit+0x80>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afc:	6453      	str	r3, [r2, #68]	; 0x44
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <HAL_ADC_MspInit+0x80>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_ADC_MspInit+0x80>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <HAL_ADC_MspInit+0x80>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_ADC_MspInit+0x80>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b26:	2310      	movs	r3, #16
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	; (8001b50 <HAL_ADC_MspInit+0x84>)
 8001b3a:	f001 f84b 	bl	8002bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b3e:	bf00      	nop
 8001b40:	3728      	adds	r7, #40	; 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40012000 	.word	0x40012000
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020000 	.word	0x40020000

08001b54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a21      	ldr	r2, [pc, #132]	; (8001bf8 <HAL_I2C_MspInit+0xa4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d13b      	bne.n	8001bee <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_I2C_MspInit+0xa8>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <HAL_I2C_MspInit+0xa8>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_I2C_MspInit+0xa8>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b92:	23c0      	movs	r3, #192	; 0xc0
 8001b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b96:	2312      	movs	r3, #18
 8001b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	4814      	ldr	r0, [pc, #80]	; (8001c00 <HAL_I2C_MspInit+0xac>)
 8001bae:	f001 f811 	bl	8002bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_I2C_MspInit+0xa8>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a10      	ldr	r2, [pc, #64]	; (8001bfc <HAL_I2C_MspInit+0xa8>)
 8001bbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <HAL_I2C_MspInit+0xa8>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	201f      	movs	r0, #31
 8001bd4:	f000 ff97 	bl	8002b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001bd8:	201f      	movs	r0, #31
 8001bda:	f000 ffb0 	bl	8002b3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	2020      	movs	r0, #32
 8001be4:	f000 ff8f 	bl	8002b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001be8:	2020      	movs	r0, #32
 8001bea:	f000 ffa8 	bl	8002b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bee:	bf00      	nop
 8001bf0:	3728      	adds	r7, #40	; 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40005400 	.word	0x40005400
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020400 	.word	0x40020400

08001c04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a28      	ldr	r2, [pc, #160]	; (8001cc4 <HAL_SPI_MspInit+0xc0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d149      	bne.n	8001cba <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b27      	ldr	r3, [pc, #156]	; (8001cc8 <HAL_SPI_MspInit+0xc4>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	4a26      	ldr	r2, [pc, #152]	; (8001cc8 <HAL_SPI_MspInit+0xc4>)
 8001c30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c34:	6453      	str	r3, [r2, #68]	; 0x44
 8001c36:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <HAL_SPI_MspInit+0xc4>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <HAL_SPI_MspInit+0xc4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a1f      	ldr	r2, [pc, #124]	; (8001cc8 <HAL_SPI_MspInit+0xc4>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <HAL_SPI_MspInit+0xc4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <HAL_SPI_MspInit+0xc4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <HAL_SPI_MspInit+0xc4>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <HAL_SPI_MspInit+0xc4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c7a:	2360      	movs	r3, #96	; 0x60
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	480d      	ldr	r0, [pc, #52]	; (8001ccc <HAL_SPI_MspInit+0xc8>)
 8001c96:	f000 ff9d 	bl	8002bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c9a:	2320      	movs	r3, #32
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001caa:	2305      	movs	r3, #5
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <HAL_SPI_MspInit+0xcc>)
 8001cb6:	f000 ff8d 	bl	8002bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	; 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40013000 	.word	0x40013000
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40020400 	.word	0x40020400

08001cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <HAL_TIM_Base_MspInit+0x58>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d11d      	bne.n	8001d22 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_TIM_Base_MspInit+0x5c>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	4a10      	ldr	r2, [pc, #64]	; (8001d30 <HAL_TIM_Base_MspInit+0x5c>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_TIM_Base_MspInit+0x5c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	2018      	movs	r0, #24
 8001d08:	f000 fefd 	bl	8002b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001d0c:	2018      	movs	r0, #24
 8001d0e:	f000 ff16 	bl	8002b3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	201a      	movs	r0, #26
 8001d18:	f000 fef5 	bl	8002b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001d1c:	201a      	movs	r0, #26
 8001d1e:	f000 ff0e 	bl	8002b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40010000 	.word	0x40010000
 8001d30:	40023800 	.word	0x40023800

08001d34 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM2)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d54:	d133      	bne.n	8001dbe <HAL_TIMEx_HallSensor_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a1a      	ldr	r2, [pc, #104]	; (8001dc8 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a13      	ldr	r2, [pc, #76]	; (8001dc8 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001d8e:	2307      	movs	r3, #7
 8001d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	4808      	ldr	r0, [pc, #32]	; (8001dcc <HAL_TIMEx_HallSensor_MspInit+0x98>)
 8001daa:	f000 ff13 	bl	8002bd4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	201c      	movs	r0, #28
 8001db4:	f000 fea7 	bl	8002b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001db8:	201c      	movs	r0, #28
 8001dba:	f000 fec0 	bl	8002b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dbe:	bf00      	nop
 8001dc0:	3728      	adds	r7, #40	; 0x28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020000 	.word	0x40020000

08001dd0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM9)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1d      	ldr	r2, [pc, #116]	; (8001e64 <HAL_TIM_IC_MspInit+0x94>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d133      	bne.n	8001e5a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <HAL_TIM_IC_MspInit+0x98>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <HAL_TIM_IC_MspInit+0x98>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_TIM_IC_MspInit+0x98>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <HAL_TIM_IC_MspInit+0x98>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a14      	ldr	r2, [pc, #80]	; (8001e68 <HAL_TIM_IC_MspInit+0x98>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_TIM_IC_MspInit+0x98>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PA3     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e2a:	2308      	movs	r3, #8
 8001e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	4809      	ldr	r0, [pc, #36]	; (8001e6c <HAL_TIM_IC_MspInit+0x9c>)
 8001e46:	f000 fec5 	bl	8002bd4 <HAL_GPIO_Init>

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2018      	movs	r0, #24
 8001e50:	f000 fe59 	bl	8002b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001e54:	2018      	movs	r0, #24
 8001e56:	f000 fe72 	bl	8002b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001e5a:	bf00      	nop
 8001e5c:	3728      	adds	r7, #40	; 0x28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40014000 	.word	0x40014000
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020000 	.word	0x40020000

08001e70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	; 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a22      	ldr	r2, [pc, #136]	; (8001f18 <HAL_TIM_MspPostInit+0xa8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d13d      	bne.n	8001f0e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <HAL_TIM_MspPostInit+0xac>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a20      	ldr	r2, [pc, #128]	; (8001f1c <HAL_TIM_MspPostInit+0xac>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <HAL_TIM_MspPostInit+0xac>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_TIM_MspPostInit+0xac>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a19      	ldr	r2, [pc, #100]	; (8001f1c <HAL_TIM_MspPostInit+0xac>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <HAL_TIM_MspPostInit+0xac>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001eca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	480e      	ldr	r0, [pc, #56]	; (8001f20 <HAL_TIM_MspPostInit+0xb0>)
 8001ee8:	f000 fe74 	bl	8002bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001eec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	4806      	ldr	r0, [pc, #24]	; (8001f24 <HAL_TIM_MspPostInit+0xb4>)
 8001f0a:	f000 fe63 	bl	8002bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3728      	adds	r7, #40	; 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40020000 	.word	0x40020000

08001f28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a28      	ldr	r2, [pc, #160]	; (8001fe8 <HAL_UART_MspInit+0xc0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d14a      	bne.n	8001fe0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	4b27      	ldr	r3, [pc, #156]	; (8001fec <HAL_UART_MspInit+0xc4>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	4a26      	ldr	r2, [pc, #152]	; (8001fec <HAL_UART_MspInit+0xc4>)
 8001f54:	f043 0310 	orr.w	r3, r3, #16
 8001f58:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_UART_MspInit+0xc4>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_UART_MspInit+0xc4>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a1f      	ldr	r2, [pc, #124]	; (8001fec <HAL_UART_MspInit+0xc4>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <HAL_UART_MspInit+0xc4>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	4b19      	ldr	r3, [pc, #100]	; (8001fec <HAL_UART_MspInit+0xc4>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a18      	ldr	r2, [pc, #96]	; (8001fec <HAL_UART_MspInit+0xc4>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <HAL_UART_MspInit+0xc4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fac:	2303      	movs	r3, #3
 8001fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fb0:	2307      	movs	r3, #7
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <HAL_UART_MspInit+0xc8>)
 8001fbc:	f000 fe0a 	bl	8002bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fc0:	2308      	movs	r3, #8
 8001fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fd0:	2307      	movs	r3, #7
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4806      	ldr	r0, [pc, #24]	; (8001ff4 <HAL_UART_MspInit+0xcc>)
 8001fdc:	f000 fdfa 	bl	8002bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fe0:	bf00      	nop
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40011000 	.word	0x40011000
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40020000 	.word	0x40020000
 8001ff4:	40020400 	.word	0x40020400

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <NMI_Handler+0x4>

08001ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <MemManage_Handler+0x4>

0800200a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <UsageFault_Handler+0x4>

08002016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002044:	f000 f9ce 	bl	80023e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}

0800204c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	if ( (TIM9->SR & TIM_SR_CC2IF) >= 1) { // If the CC2IF is set it means a input capture has happened
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <TIM1_BRK_TIM9_IRQHandler+0x40>)
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00c      	beq.n	8002076 <TIM1_BRK_TIM9_IRQHandler+0x2a>
		// uint32_t HallTime = HAL_TIM_ReadCapturedValue (&htim9, TIM_CHANNEL_2); // Original
		// uint16_t HallTime = TIM9->CCR2; // Read the captured value
		Registers[RPMReg] = RPMConst / (64000 + 1);
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <TIM1_BRK_TIM9_IRQHandler+0x44>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <TIM1_BRK_TIM9_IRQHandler+0x48>)
 8002062:	fba3 1302 	umull	r1, r3, r3, r2
 8002066:	1ad2      	subs	r2, r2, r3
 8002068:	0852      	lsrs	r2, r2, #1
 800206a:	4413      	add	r3, r2
 800206c:	0bdb      	lsrs	r3, r3, #15
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <TIM1_BRK_TIM9_IRQHandler+0x4c>)
 8002072:	70da      	strb	r2, [r3, #3]
 8002074:	e002      	b.n	800207c <TIM1_BRK_TIM9_IRQHandler+0x30>
		// If maximum RPM is exceeded -> shutdown
		if ( Registers[RPMReg] > MaximumRPM ) {
			StopSequence();
		}
	} else {
		Registers[RPMReg] = 0; // If the CC2IF was not set it means the timer has overflowed and the motor is thus stationary
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <TIM1_BRK_TIM9_IRQHandler+0x4c>)
 8002078:	2200      	movs	r2, #0
 800207a:	70da      	strb	r2, [r3, #3]
	}


  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800207c:	4807      	ldr	r0, [pc, #28]	; (800209c <TIM1_BRK_TIM9_IRQHandler+0x50>)
 800207e:	f005 f82a 	bl	80070d6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002082:	4807      	ldr	r0, [pc, #28]	; (80020a0 <TIM1_BRK_TIM9_IRQHandler+0x54>)
 8002084:	f005 f827 	bl	80070d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40014000 	.word	0x40014000
 8002090:	2000057c 	.word	0x2000057c
 8002094:	0623d0c1 	.word	0x0623d0c1
 8002098:	20000558 	.word	0x20000558
 800209c:	200003f8 	.word	0x200003f8
 80020a0:	20000488 	.word	0x20000488

080020a4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	PrepareCommutation (Registers[DirReg]); // Set next Commutation states
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 80020aa:	785b      	ldrb	r3, [r3, #1]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe ff01 	bl	8000eb4 <PrepareCommutation>

	TIM1->SR &= ~TIM_SR_COMIF; 				// Reset COMIF in SR register
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	4a05      	ldr	r2, [pc, #20]	; (80020cc <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 80020b8:	f023 0320 	bic.w	r3, r3, #32
 80020bc:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020be:	4804      	ldr	r0, [pc, #16]	; (80020d0 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 80020c0:	f005 f809 	bl	80070d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000558 	.word	0x20000558
 80020cc:	40010000 	.word	0x40010000
 80020d0:	200003f8 	.word	0x200003f8

080020d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
	// TIM1->CCR2 = PWM;	  // Set new PWM for channel 2
	// TIM1->CCR3 = PWM;	  // Set new PWM for channel 3
	// TIM1->CR1 &= ~0x0002; // Enable Update Events

	// Reset Timer 9 counter.
	TIM9->CNT = 0x0;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <TIM2_IRQHandler+0x20>)
 80020da:	2200      	movs	r2, #0
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24

	// Set COMG bit in EGR
	TIM1->EGR |= TIM_EGR_COMG;
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <TIM2_IRQHandler+0x24>)
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <TIM2_IRQHandler+0x24>)
 80020e4:	f043 0320 	orr.w	r3, r3, #32
 80020e8:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020ea:	4804      	ldr	r0, [pc, #16]	; (80020fc <TIM2_IRQHandler+0x28>)
 80020ec:	f004 fff3 	bl	80070d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40014000 	.word	0x40014000
 80020f8:	40010000 	.word	0x40010000
 80020fc:	20000440 	.word	0x20000440

08002100 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <I2C1_EV_IRQHandler+0x10>)
 8002106:	f001 f963 	bl	80033d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000034c 	.word	0x2000034c

08002114 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <I2C1_ER_IRQHandler+0x10>)
 800211a:	f001 faac 	bl	8003676 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	2000034c 	.word	0x2000034c

08002128 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800212c:	4802      	ldr	r0, [pc, #8]	; (8002138 <OTG_FS_IRQHandler+0x10>)
 800212e:	f002 ff28 	bl	8004f82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20001a68 	.word	0x20001a68

0800213c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return 1;
 8002140:	2301      	movs	r3, #1
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <_kill>:

int _kill(int pid, int sig)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002156:	f00b fb09 	bl	800d76c <__errno>
 800215a:	4603      	mov	r3, r0
 800215c:	2216      	movs	r2, #22
 800215e:	601a      	str	r2, [r3, #0]
  return -1;
 8002160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <_exit>:

void _exit (int status)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002174:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ffe7 	bl	800214c <_kill>
  while (1) {}    /* Make sure we hang here */
 800217e:	e7fe      	b.n	800217e <_exit+0x12>

08002180 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	e00a      	b.n	80021a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002192:	f3af 8000 	nop.w
 8002196:	4601      	mov	r1, r0
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	60ba      	str	r2, [r7, #8]
 800219e:	b2ca      	uxtb	r2, r1
 80021a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	3301      	adds	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	dbf0      	blt.n	8002192 <_read+0x12>
  }

  return len;
 80021b0:	687b      	ldr	r3, [r7, #4]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	e009      	b.n	80021e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	60ba      	str	r2, [r7, #8]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dbf1      	blt.n	80021cc <_write+0x12>
  }
  return len;
 80021e8:	687b      	ldr	r3, [r7, #4]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <_close>:

int _close(int file)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800221a:	605a      	str	r2, [r3, #4]
  return 0;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <_isatty>:

int _isatty(int file)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002264:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <_sbrk+0x5c>)
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <_sbrk+0x60>)
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <_sbrk+0x64>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <_sbrk+0x64>)
 800227a:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <_sbrk+0x68>)
 800227c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	429a      	cmp	r2, r3
 800228a:	d207      	bcs.n	800229c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800228c:	f00b fa6e 	bl	800d76c <__errno>
 8002290:	4603      	mov	r3, r0
 8002292:	220c      	movs	r2, #12
 8002294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800229a:	e009      	b.n	80022b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <_sbrk+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <_sbrk+0x64>)
 80022ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ae:	68fb      	ldr	r3, [r7, #12]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20020000 	.word	0x20020000
 80022bc:	00000400 	.word	0x00000400
 80022c0:	20000580 	.word	0x20000580
 80022c4:	200022e0 	.word	0x200022e0

080022c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <SystemInit+0x20>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <SystemInit+0x20>)
 80022d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002324 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022f0:	480d      	ldr	r0, [pc, #52]	; (8002328 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022f2:	490e      	ldr	r1, [pc, #56]	; (800232c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022f4:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f8:	e002      	b.n	8002300 <LoopCopyDataInit>

080022fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fe:	3304      	adds	r3, #4

08002300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002304:	d3f9      	bcc.n	80022fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002306:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002308:	4c0b      	ldr	r4, [pc, #44]	; (8002338 <LoopFillZerobss+0x26>)
  movs r3, #0
 800230a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800230c:	e001      	b.n	8002312 <LoopFillZerobss>

0800230e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002310:	3204      	adds	r2, #4

08002312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002314:	d3fb      	bcc.n	800230e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002316:	f7ff ffd7 	bl	80022c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800231a:	f00b fa2d 	bl	800d778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800231e:	f7ff f87d 	bl	800141c <main>
  bx  lr    
 8002322:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800232c:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8002330:	0800fcc4 	.word	0x0800fcc4
  ldr r2, =_sbss
 8002334:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8002338:	200022e0 	.word	0x200022e0

0800233c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800233c:	e7fe      	b.n	800233c <ADC_IRQHandler>
	...

08002340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <HAL_Init+0x40>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <HAL_Init+0x40>)
 800234a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800234e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_Init+0x40>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <HAL_Init+0x40>)
 8002356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800235a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <HAL_Init+0x40>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a07      	ldr	r2, [pc, #28]	; (8002380 <HAL_Init+0x40>)
 8002362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002368:	2003      	movs	r0, #3
 800236a:	f000 fbc1 	bl	8002af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800236e:	200f      	movs	r0, #15
 8002370:	f000 f808 	bl	8002384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002374:	f7ff fb82 	bl	8001a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023c00 	.word	0x40023c00

08002384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_InitTick+0x54>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_InitTick+0x58>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4619      	mov	r1, r3
 8002396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239a:	fbb3 f3f1 	udiv	r3, r3, r1
 800239e:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fbd9 	bl	8002b5a <HAL_SYSTICK_Config>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00e      	b.n	80023d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b0f      	cmp	r3, #15
 80023b6:	d80a      	bhi.n	80023ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b8:	2200      	movs	r2, #0
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023c0:	f000 fba1 	bl	8002b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c4:	4a06      	ldr	r2, [pc, #24]	; (80023e0 <HAL_InitTick+0x5c>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e000      	b.n	80023d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000024 	.word	0x20000024
 80023dc:	2000002c 	.word	0x2000002c
 80023e0:	20000028 	.word	0x20000028

080023e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_IncTick+0x20>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_IncTick+0x24>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	4a04      	ldr	r2, [pc, #16]	; (8002408 <HAL_IncTick+0x24>)
 80023f6:	6013      	str	r3, [r2, #0]
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	2000002c 	.word	0x2000002c
 8002408:	20000584 	.word	0x20000584

0800240c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return uwTick;
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <HAL_GetTick+0x14>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000584 	.word	0x20000584

08002424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800242c:	f7ff ffee 	bl	800240c <HAL_GetTick>
 8002430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800243c:	d005      	beq.n	800244a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <HAL_Delay+0x44>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4413      	add	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800244a:	bf00      	nop
 800244c:	f7ff ffde 	bl	800240c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	429a      	cmp	r2, r3
 800245a:	d8f7      	bhi.n	800244c <HAL_Delay+0x28>
  {
  }
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	2000002c 	.word	0x2000002c

0800246c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e033      	b.n	80024ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff fb1e 	bl	8001acc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d118      	bne.n	80024dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024b2:	f023 0302 	bic.w	r3, r3, #2
 80024b6:	f043 0202 	orr.w	r2, r3, #2
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f94a 	bl	8002758 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f023 0303 	bic.w	r3, r3, #3
 80024d2:	f043 0201 	orr.w	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40
 80024da:	e001      	b.n	80024e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x1c>
 800250c:	2302      	movs	r3, #2
 800250e:	e113      	b.n	8002738 <HAL_ADC_ConfigChannel+0x244>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b09      	cmp	r3, #9
 800251e:	d925      	bls.n	800256c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68d9      	ldr	r1, [r3, #12]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	3b1e      	subs	r3, #30
 8002536:	2207      	movs	r2, #7
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43da      	mvns	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	400a      	ands	r2, r1
 8002544:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68d9      	ldr	r1, [r3, #12]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	4618      	mov	r0, r3
 8002558:	4603      	mov	r3, r0
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4403      	add	r3, r0
 800255e:	3b1e      	subs	r3, #30
 8002560:	409a      	lsls	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	e022      	b.n	80025b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6919      	ldr	r1, [r3, #16]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	4613      	mov	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4413      	add	r3, r2
 8002580:	2207      	movs	r2, #7
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	400a      	ands	r2, r1
 800258e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6919      	ldr	r1, [r3, #16]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4403      	add	r3, r0
 80025a8:	409a      	lsls	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	d824      	bhi.n	8002604 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	3b05      	subs	r3, #5
 80025cc:	221f      	movs	r2, #31
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43da      	mvns	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	400a      	ands	r2, r1
 80025da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	4618      	mov	r0, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	3b05      	subs	r3, #5
 80025f6:	fa00 f203 	lsl.w	r2, r0, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	635a      	str	r2, [r3, #52]	; 0x34
 8002602:	e04c      	b.n	800269e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b0c      	cmp	r3, #12
 800260a:	d824      	bhi.n	8002656 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	3b23      	subs	r3, #35	; 0x23
 800261e:	221f      	movs	r2, #31
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43da      	mvns	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	400a      	ands	r2, r1
 800262c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	4618      	mov	r0, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	3b23      	subs	r3, #35	; 0x23
 8002648:	fa00 f203 	lsl.w	r2, r0, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
 8002654:	e023      	b.n	800269e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	3b41      	subs	r3, #65	; 0x41
 8002668:	221f      	movs	r2, #31
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	400a      	ands	r2, r1
 8002676:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	b29b      	uxth	r3, r3
 8002684:	4618      	mov	r0, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	3b41      	subs	r3, #65	; 0x41
 8002692:	fa00 f203 	lsl.w	r2, r0, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800269e:	4b29      	ldr	r3, [pc, #164]	; (8002744 <HAL_ADC_ConfigChannel+0x250>)
 80026a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a28      	ldr	r2, [pc, #160]	; (8002748 <HAL_ADC_ConfigChannel+0x254>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d10f      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1d8>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b12      	cmp	r3, #18
 80026b2:	d10b      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1d      	ldr	r2, [pc, #116]	; (8002748 <HAL_ADC_ConfigChannel+0x254>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d12b      	bne.n	800272e <HAL_ADC_ConfigChannel+0x23a>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1c      	ldr	r2, [pc, #112]	; (800274c <HAL_ADC_ConfigChannel+0x258>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d003      	beq.n	80026e8 <HAL_ADC_ConfigChannel+0x1f4>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b11      	cmp	r3, #17
 80026e6:	d122      	bne.n	800272e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a11      	ldr	r2, [pc, #68]	; (800274c <HAL_ADC_ConfigChannel+0x258>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d111      	bne.n	800272e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_ADC_ConfigChannel+0x25c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a11      	ldr	r2, [pc, #68]	; (8002754 <HAL_ADC_ConfigChannel+0x260>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	0c9a      	lsrs	r2, r3, #18
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002720:	e002      	b.n	8002728 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	3b01      	subs	r3, #1
 8002726:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f9      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	40012300 	.word	0x40012300
 8002748:	40012000 	.word	0x40012000
 800274c:	10000012 	.word	0x10000012
 8002750:	20000024 	.word	0x20000024
 8002754:	431bde83 	.word	0x431bde83

08002758 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002760:	4b79      	ldr	r3, [pc, #484]	; (8002948 <ADC_Init+0x1f0>)
 8002762:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	431a      	orrs	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800278c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6859      	ldr	r1, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	021a      	lsls	r2, r3, #8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6859      	ldr	r1, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6899      	ldr	r1, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	4a58      	ldr	r2, [pc, #352]	; (800294c <ADC_Init+0x1f4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d022      	beq.n	8002836 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6899      	ldr	r1, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002820:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6899      	ldr	r1, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	e00f      	b.n	8002856 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002854:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0202 	bic.w	r2, r2, #2
 8002864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6899      	ldr	r1, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	7e1b      	ldrb	r3, [r3, #24]
 8002870:	005a      	lsls	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01b      	beq.n	80028bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002892:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6859      	ldr	r1, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	3b01      	subs	r3, #1
 80028b0:	035a      	lsls	r2, r3, #13
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	e007      	b.n	80028cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	051a      	lsls	r2, r3, #20
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002900:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6899      	ldr	r1, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800290e:	025a      	lsls	r2, r3, #9
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6899      	ldr	r1, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	029a      	lsls	r2, r3, #10
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	609a      	str	r2, [r3, #8]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	40012300 	.word	0x40012300
 800294c:	0f000001 	.word	0x0f000001

08002950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800296c:	4013      	ands	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800297c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002982:	4a04      	ldr	r2, [pc, #16]	; (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	60d3      	str	r3, [r2, #12]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <__NVIC_GetPriorityGrouping+0x18>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	f003 0307 	and.w	r3, r3, #7
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	db0b      	blt.n	80029de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	4907      	ldr	r1, [pc, #28]	; (80029ec <__NVIC_EnableIRQ+0x38>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2001      	movs	r0, #1
 80029d6:	fa00 f202 	lsl.w	r2, r0, r2
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000e100 	.word	0xe000e100

080029f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	db0a      	blt.n	8002a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	490c      	ldr	r1, [pc, #48]	; (8002a3c <__NVIC_SetPriority+0x4c>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	440b      	add	r3, r1
 8002a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a18:	e00a      	b.n	8002a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4908      	ldr	r1, [pc, #32]	; (8002a40 <__NVIC_SetPriority+0x50>)
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	3b04      	subs	r3, #4
 8002a28:	0112      	lsls	r2, r2, #4
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	761a      	strb	r2, [r3, #24]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000e100 	.word	0xe000e100
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f1c3 0307 	rsb	r3, r3, #7
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	bf28      	it	cs
 8002a62:	2304      	movcs	r3, #4
 8002a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d902      	bls.n	8002a74 <NVIC_EncodePriority+0x30>
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3b03      	subs	r3, #3
 8002a72:	e000      	b.n	8002a76 <NVIC_EncodePriority+0x32>
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	401a      	ands	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	43d9      	mvns	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	4313      	orrs	r3, r2
         );
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002abc:	d301      	bcc.n	8002ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00f      	b.n	8002ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <SysTick_Config+0x40>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aca:	210f      	movs	r1, #15
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ad0:	f7ff ff8e 	bl	80029f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <SysTick_Config+0x40>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ada:	4b04      	ldr	r3, [pc, #16]	; (8002aec <SysTick_Config+0x40>)
 8002adc:	2207      	movs	r2, #7
 8002ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	e000e010 	.word	0xe000e010

08002af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff29 	bl	8002950 <__NVIC_SetPriorityGrouping>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b18:	f7ff ff3e 	bl	8002998 <__NVIC_GetPriorityGrouping>
 8002b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	6978      	ldr	r0, [r7, #20]
 8002b24:	f7ff ff8e 	bl	8002a44 <NVIC_EncodePriority>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff5d 	bl	80029f0 <__NVIC_SetPriority>
}
 8002b36:	bf00      	nop
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4603      	mov	r3, r0
 8002b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff31 	bl	80029b4 <__NVIC_EnableIRQ>
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff ffa2 	bl	8002aac <SysTick_Config>
 8002b68:	4603      	mov	r3, r0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d004      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e00c      	b.n	8002baa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2205      	movs	r2, #5
 8002b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc4:	b2db      	uxtb	r3, r3
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b089      	sub	sp, #36	; 0x24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
 8002bee:	e159      	b.n	8002ea4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4013      	ands	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	f040 8148 	bne.w	8002e9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d005      	beq.n	8002c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d130      	bne.n	8002c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	2203      	movs	r2, #3
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 0201 	and.w	r2, r3, #1
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d017      	beq.n	8002cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d123      	bne.n	8002d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	08da      	lsrs	r2, r3, #3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3208      	adds	r2, #8
 8002cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	220f      	movs	r2, #15
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	08da      	lsrs	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3208      	adds	r2, #8
 8002d12:	69b9      	ldr	r1, [r7, #24]
 8002d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	2203      	movs	r2, #3
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0203 	and.w	r2, r3, #3
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80a2 	beq.w	8002e9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	4b57      	ldr	r3, [pc, #348]	; (8002ebc <HAL_GPIO_Init+0x2e8>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	4a56      	ldr	r2, [pc, #344]	; (8002ebc <HAL_GPIO_Init+0x2e8>)
 8002d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d68:	6453      	str	r3, [r2, #68]	; 0x44
 8002d6a:	4b54      	ldr	r3, [pc, #336]	; (8002ebc <HAL_GPIO_Init+0x2e8>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d76:	4a52      	ldr	r2, [pc, #328]	; (8002ec0 <HAL_GPIO_Init+0x2ec>)
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	220f      	movs	r2, #15
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a49      	ldr	r2, [pc, #292]	; (8002ec4 <HAL_GPIO_Init+0x2f0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d019      	beq.n	8002dd6 <HAL_GPIO_Init+0x202>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a48      	ldr	r2, [pc, #288]	; (8002ec8 <HAL_GPIO_Init+0x2f4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <HAL_GPIO_Init+0x1fe>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a47      	ldr	r2, [pc, #284]	; (8002ecc <HAL_GPIO_Init+0x2f8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00d      	beq.n	8002dce <HAL_GPIO_Init+0x1fa>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a46      	ldr	r2, [pc, #280]	; (8002ed0 <HAL_GPIO_Init+0x2fc>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d007      	beq.n	8002dca <HAL_GPIO_Init+0x1f6>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a45      	ldr	r2, [pc, #276]	; (8002ed4 <HAL_GPIO_Init+0x300>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d101      	bne.n	8002dc6 <HAL_GPIO_Init+0x1f2>
 8002dc2:	2304      	movs	r3, #4
 8002dc4:	e008      	b.n	8002dd8 <HAL_GPIO_Init+0x204>
 8002dc6:	2307      	movs	r3, #7
 8002dc8:	e006      	b.n	8002dd8 <HAL_GPIO_Init+0x204>
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e004      	b.n	8002dd8 <HAL_GPIO_Init+0x204>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e002      	b.n	8002dd8 <HAL_GPIO_Init+0x204>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <HAL_GPIO_Init+0x204>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	f002 0203 	and.w	r2, r2, #3
 8002dde:	0092      	lsls	r2, r2, #2
 8002de0:	4093      	lsls	r3, r2
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002de8:	4935      	ldr	r1, [pc, #212]	; (8002ec0 <HAL_GPIO_Init+0x2ec>)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	3302      	adds	r3, #2
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002df6:	4b38      	ldr	r3, [pc, #224]	; (8002ed8 <HAL_GPIO_Init+0x304>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e1a:	4a2f      	ldr	r2, [pc, #188]	; (8002ed8 <HAL_GPIO_Init+0x304>)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e20:	4b2d      	ldr	r3, [pc, #180]	; (8002ed8 <HAL_GPIO_Init+0x304>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e44:	4a24      	ldr	r2, [pc, #144]	; (8002ed8 <HAL_GPIO_Init+0x304>)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e4a:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <HAL_GPIO_Init+0x304>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e6e:	4a1a      	ldr	r2, [pc, #104]	; (8002ed8 <HAL_GPIO_Init+0x304>)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e74:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <HAL_GPIO_Init+0x304>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e98:	4a0f      	ldr	r2, [pc, #60]	; (8002ed8 <HAL_GPIO_Init+0x304>)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b0f      	cmp	r3, #15
 8002ea8:	f67f aea2 	bls.w	8002bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eac:	bf00      	nop
 8002eae:	bf00      	nop
 8002eb0:	3724      	adds	r7, #36	; 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40013800 	.word	0x40013800
 8002ec4:	40020000 	.word	0x40020000
 8002ec8:	40020400 	.word	0x40020400
 8002ecc:	40020800 	.word	0x40020800
 8002ed0:	40020c00 	.word	0x40020c00
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40013c00 	.word	0x40013c00

08002edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	807b      	strh	r3, [r7, #2]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eec:	787b      	ldrb	r3, [r7, #1]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ef2:	887a      	ldrh	r2, [r7, #2]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ef8:	e003      	b.n	8002f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002efa:	887b      	ldrh	r3, [r7, #2]
 8002efc:	041a      	lsls	r2, r3, #16
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	619a      	str	r2, [r3, #24]
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e12b      	b.n	800317a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe fe0c 	bl	8001b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2224      	movs	r2, #36	; 0x24
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0201 	bic.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f74:	f003 fd62 	bl	8006a3c <HAL_RCC_GetPCLK1Freq>
 8002f78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4a81      	ldr	r2, [pc, #516]	; (8003184 <HAL_I2C_Init+0x274>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d807      	bhi.n	8002f94 <HAL_I2C_Init+0x84>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a80      	ldr	r2, [pc, #512]	; (8003188 <HAL_I2C_Init+0x278>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	bf94      	ite	ls
 8002f8c:	2301      	movls	r3, #1
 8002f8e:	2300      	movhi	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	e006      	b.n	8002fa2 <HAL_I2C_Init+0x92>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4a7d      	ldr	r2, [pc, #500]	; (800318c <HAL_I2C_Init+0x27c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	bf94      	ite	ls
 8002f9c:	2301      	movls	r3, #1
 8002f9e:	2300      	movhi	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e0e7      	b.n	800317a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a78      	ldr	r2, [pc, #480]	; (8003190 <HAL_I2C_Init+0x280>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	0c9b      	lsrs	r3, r3, #18
 8002fb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	4a6a      	ldr	r2, [pc, #424]	; (8003184 <HAL_I2C_Init+0x274>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d802      	bhi.n	8002fe4 <HAL_I2C_Init+0xd4>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	e009      	b.n	8002ff8 <HAL_I2C_Init+0xe8>
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	4a69      	ldr	r2, [pc, #420]	; (8003194 <HAL_I2C_Init+0x284>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800300a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	495c      	ldr	r1, [pc, #368]	; (8003184 <HAL_I2C_Init+0x274>)
 8003014:	428b      	cmp	r3, r1
 8003016:	d819      	bhi.n	800304c <HAL_I2C_Init+0x13c>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1e59      	subs	r1, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	fbb1 f3f3 	udiv	r3, r1, r3
 8003026:	1c59      	adds	r1, r3, #1
 8003028:	f640 73fc 	movw	r3, #4092	; 0xffc
 800302c:	400b      	ands	r3, r1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_I2C_Init+0x138>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1e59      	subs	r1, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003040:	3301      	adds	r3, #1
 8003042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003046:	e051      	b.n	80030ec <HAL_I2C_Init+0x1dc>
 8003048:	2304      	movs	r3, #4
 800304a:	e04f      	b.n	80030ec <HAL_I2C_Init+0x1dc>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d111      	bne.n	8003078 <HAL_I2C_Init+0x168>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1e58      	subs	r0, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	440b      	add	r3, r1
 8003062:	fbb0 f3f3 	udiv	r3, r0, r3
 8003066:	3301      	adds	r3, #1
 8003068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e012      	b.n	800309e <HAL_I2C_Init+0x18e>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1e58      	subs	r0, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	0099      	lsls	r1, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	fbb0 f3f3 	udiv	r3, r0, r3
 800308e:	3301      	adds	r3, #1
 8003090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_I2C_Init+0x196>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e022      	b.n	80030ec <HAL_I2C_Init+0x1dc>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10e      	bne.n	80030cc <HAL_I2C_Init+0x1bc>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1e58      	subs	r0, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6859      	ldr	r1, [r3, #4]
 80030b6:	460b      	mov	r3, r1
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	440b      	add	r3, r1
 80030bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ca:	e00f      	b.n	80030ec <HAL_I2C_Init+0x1dc>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1e58      	subs	r0, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6859      	ldr	r1, [r3, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	0099      	lsls	r1, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e2:	3301      	adds	r3, #1
 80030e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	6809      	ldr	r1, [r1, #0]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800311a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6911      	ldr	r1, [r2, #16]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68d2      	ldr	r2, [r2, #12]
 8003126:	4311      	orrs	r1, r2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	430b      	orrs	r3, r1
 800312e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	000186a0 	.word	0x000186a0
 8003188:	001e847f 	.word	0x001e847f
 800318c:	003d08ff 	.word	0x003d08ff
 8003190:	431bde83 	.word	0x431bde83
 8003194:	10624dd3 	.word	0x10624dd3

08003198 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031b4:	2b28      	cmp	r3, #40	; 0x28
 80031b6:	d15b      	bne.n	8003270 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e054      	b.n	8003272 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e04d      	b.n	8003272 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d007      	beq.n	80031fc <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800320a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2229      	movs	r2, #41	; 0x29
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	88fa      	ldrh	r2, [r7, #6]
 800322c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800326a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	e000      	b.n	8003272 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8003270:	2302      	movs	r3, #2
  }
}
 8003272:	4618      	mov	r0, r3
 8003274:	371c      	adds	r7, #28
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800327e:	b480      	push	{r7}
 8003280:	b087      	sub	sp, #28
 8003282:	af00      	add	r7, sp, #0
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	4613      	mov	r3, r2
 800328c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800329a:	2b28      	cmp	r3, #40	; 0x28
 800329c:	d15b      	bne.n	8003356 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e054      	b.n	8003358 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e04d      	b.n	8003358 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d007      	beq.n	80032e2 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	222a      	movs	r2, #42	; 0x2a
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	88fa      	ldrh	r2, [r7, #6]
 8003312:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003350:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e000      	b.n	8003358 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8003356:	2302      	movs	r3, #2
  }
}
 8003358:	4618      	mov	r0, r3
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b20      	cmp	r3, #32
 8003376:	d124      	bne.n	80033c2 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2228      	movs	r2, #40	; 0x28
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d007      	beq.n	800339e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0201 	orr.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033ac:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80033bc:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	e000      	b.n	80033c4 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
  }
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	d003      	beq.n	8003408 <HAL_I2C_EV_IRQHandler+0x38>
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b40      	cmp	r3, #64	; 0x40
 8003404:	f040 80b1 	bne.w	800356a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10d      	bne.n	800343e <HAL_I2C_EV_IRQHandler+0x6e>
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003428:	d003      	beq.n	8003432 <HAL_I2C_EV_IRQHandler+0x62>
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003430:	d101      	bne.n	8003436 <HAL_I2C_EV_IRQHandler+0x66>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <HAL_I2C_EV_IRQHandler+0x68>
 8003436:	2300      	movs	r3, #0
 8003438:	2b01      	cmp	r3, #1
 800343a:	f000 8114 	beq.w	8003666 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00b      	beq.n	8003460 <HAL_I2C_EV_IRQHandler+0x90>
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f001 fc2a 	bl	8004cac <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fd34 	bl	8003ec6 <I2C_Master_SB>
 800345e:	e083      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <HAL_I2C_EV_IRQHandler+0xac>
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fdac 	bl	8003fd2 <I2C_Master_ADD10>
 800347a:	e075      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_I2C_EV_IRQHandler+0xc8>
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fdc8 	bl	8004026 <I2C_Master_ADDR>
 8003496:	e067      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d036      	beq.n	8003510 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b0:	f000 80db 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00d      	beq.n	80034da <HAL_I2C_EV_IRQHandler+0x10a>
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_I2C_EV_IRQHandler+0x10a>
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d103      	bne.n	80034da <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f9ac 	bl	8003830 <I2C_MasterTransmit_TXE>
 80034d8:	e046      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80c2 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x29a>
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80bc 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80034f2:	7bbb      	ldrb	r3, [r7, #14]
 80034f4:	2b21      	cmp	r3, #33	; 0x21
 80034f6:	d103      	bne.n	8003500 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fa35 	bl	8003968 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034fe:	e0b4      	b.n	800366a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	2b40      	cmp	r3, #64	; 0x40
 8003504:	f040 80b1 	bne.w	800366a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 faa3 	bl	8003a54 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800350e:	e0ac      	b.n	800366a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800351a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800351e:	f000 80a4 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <HAL_I2C_EV_IRQHandler+0x178>
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <HAL_I2C_EV_IRQHandler+0x178>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d103      	bne.n	8003548 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fb1b 	bl	8003b7c <I2C_MasterReceive_RXNE>
 8003546:	e00f      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 808b 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x29a>
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 8085 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 fbc6 	bl	8003cf2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003566:	e080      	b.n	800366a <HAL_I2C_EV_IRQHandler+0x29a>
 8003568:	e07f      	b.n	800366a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d004      	beq.n	800357c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	e007      	b.n	800358c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d011      	beq.n	80035ba <HAL_I2C_EV_IRQHandler+0x1ea>
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00c      	beq.n	80035ba <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80035b0:	69b9      	ldr	r1, [r7, #24]
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 ff86 	bl	80044c4 <I2C_Slave_ADDR>
 80035b8:	e05a      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_I2C_EV_IRQHandler+0x206>
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 ffc0 	bl	8004554 <I2C_Slave_STOPF>
 80035d4:	e04c      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035d6:	7bbb      	ldrb	r3, [r7, #14]
 80035d8:	2b21      	cmp	r3, #33	; 0x21
 80035da:	d002      	beq.n	80035e2 <HAL_I2C_EV_IRQHandler+0x212>
 80035dc:	7bbb      	ldrb	r3, [r7, #14]
 80035de:	2b29      	cmp	r3, #41	; 0x29
 80035e0:	d120      	bne.n	8003624 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00d      	beq.n	8003608 <HAL_I2C_EV_IRQHandler+0x238>
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <HAL_I2C_EV_IRQHandler+0x238>
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d103      	bne.n	8003608 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fea1 	bl	8004348 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003606:	e032      	b.n	800366e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	d02d      	beq.n	800366e <HAL_I2C_EV_IRQHandler+0x29e>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003618:	2b00      	cmp	r3, #0
 800361a:	d028      	beq.n	800366e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fed0 	bl	80043c2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003622:	e024      	b.n	800366e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00d      	beq.n	800364a <HAL_I2C_EV_IRQHandler+0x27a>
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_I2C_EV_IRQHandler+0x27a>
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fede 	bl	8004404 <I2C_SlaveReceive_RXNE>
 8003648:	e012      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00d      	beq.n	8003670 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 ff0e 	bl	8004480 <I2C_SlaveReceive_BTF>
 8003664:	e004      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003666:	bf00      	nop
 8003668:	e002      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800366e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b08a      	sub	sp, #40	; 0x28
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800368e:	2300      	movs	r3, #0
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003698:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00d      	beq.n	80036c0 <HAL_I2C_ER_IRQHandler+0x4a>
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036be:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00d      	beq.n	80036e6 <HAL_I2C_ER_IRQHandler+0x70>
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	f043 0302 	orr.w	r3, r3, #2
 80036da:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80036e4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d03e      	beq.n	800376e <HAL_I2C_ER_IRQHandler+0xf8>
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d039      	beq.n	800376e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80036fa:	7efb      	ldrb	r3, [r7, #27]
 80036fc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003714:	7ebb      	ldrb	r3, [r7, #26]
 8003716:	2b20      	cmp	r3, #32
 8003718:	d112      	bne.n	8003740 <HAL_I2C_ER_IRQHandler+0xca>
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10f      	bne.n	8003740 <HAL_I2C_ER_IRQHandler+0xca>
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	2b21      	cmp	r3, #33	; 0x21
 8003724:	d008      	beq.n	8003738 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	2b29      	cmp	r3, #41	; 0x29
 800372a:	d005      	beq.n	8003738 <HAL_I2C_ER_IRQHandler+0xc2>
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b28      	cmp	r3, #40	; 0x28
 8003730:	d106      	bne.n	8003740 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b21      	cmp	r3, #33	; 0x21
 8003736:	d103      	bne.n	8003740 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f001 f83b 	bl	80047b4 <I2C_Slave_AF>
 800373e:	e016      	b.n	800376e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003748:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	f043 0304 	orr.w	r3, r3, #4
 8003750:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003752:	7efb      	ldrb	r3, [r7, #27]
 8003754:	2b10      	cmp	r3, #16
 8003756:	d002      	beq.n	800375e <HAL_I2C_ER_IRQHandler+0xe8>
 8003758:	7efb      	ldrb	r3, [r7, #27]
 800375a:	2b40      	cmp	r3, #64	; 0x40
 800375c:	d107      	bne.n	800376e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00d      	beq.n	8003794 <HAL_I2C_ER_IRQHandler+0x11e>
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	f043 0308 	orr.w	r3, r3, #8
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003792:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f001 f874 	bl	8004894 <I2C_ITError>
  }
}
 80037ac:	bf00      	nop
 80037ae:	3728      	adds	r7, #40	; 0x28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003846:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003852:	2b00      	cmp	r3, #0
 8003854:	d150      	bne.n	80038f8 <I2C_MasterTransmit_TXE+0xc8>
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2b21      	cmp	r3, #33	; 0x21
 800385a:	d14d      	bne.n	80038f8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b08      	cmp	r3, #8
 8003860:	d01d      	beq.n	800389e <I2C_MasterTransmit_TXE+0x6e>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b20      	cmp	r3, #32
 8003866:	d01a      	beq.n	800389e <I2C_MasterTransmit_TXE+0x6e>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800386e:	d016      	beq.n	800389e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800387e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2211      	movs	r2, #17
 8003884:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ff8c 	bl	80037b4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800389c:	e060      	b.n	8003960 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038ac:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038bc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	d107      	bne.n	80038e8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ff7b 	bl	80037dc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038e6:	e03b      	b.n	8003960 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff5f 	bl	80037b4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038f6:	e033      	b.n	8003960 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	2b21      	cmp	r3, #33	; 0x21
 80038fc:	d005      	beq.n	800390a <I2C_MasterTransmit_TXE+0xda>
 80038fe:	7bbb      	ldrb	r3, [r7, #14]
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d12d      	bne.n	8003960 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b22      	cmp	r3, #34	; 0x22
 8003908:	d12a      	bne.n	8003960 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d108      	bne.n	8003926 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003922:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003924:	e01c      	b.n	8003960 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b40      	cmp	r3, #64	; 0x40
 8003930:	d103      	bne.n	800393a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f88e 	bl	8003a54 <I2C_MemoryTransmit_TXE_BTF>
}
 8003938:	e012      	b.n	8003960 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	781a      	ldrb	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800395e:	e7ff      	b.n	8003960 <I2C_MasterTransmit_TXE+0x130>
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b21      	cmp	r3, #33	; 0x21
 8003980:	d164      	bne.n	8003a4c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d012      	beq.n	80039b2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80039b0:	e04c      	b.n	8003a4c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d01d      	beq.n	80039f4 <I2C_MasterTransmit_BTF+0x8c>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d01a      	beq.n	80039f4 <I2C_MasterTransmit_BTF+0x8c>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039c4:	d016      	beq.n	80039f4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039d4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2211      	movs	r2, #17
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff fee1 	bl	80037b4 <HAL_I2C_MasterTxCpltCallback>
}
 80039f2:	e02b      	b.n	8003a4c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a02:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a12:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b40      	cmp	r3, #64	; 0x40
 8003a2c:	d107      	bne.n	8003a3e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff fed0 	bl	80037dc <HAL_I2C_MemTxCpltCallback>
}
 8003a3c:	e006      	b.n	8003a4c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff feb4 	bl	80037b4 <HAL_I2C_MasterTxCpltCallback>
}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d11d      	bne.n	8003aa8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d10b      	bne.n	8003a8c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a84:	1c9a      	adds	r2, r3, #2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003a8a:	e073      	b.n	8003b74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	121b      	asrs	r3, r3, #8
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003aa6:	e065      	b.n	8003b74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d10b      	bne.n	8003ac8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ac6:	e055      	b.n	8003b74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d151      	bne.n	8003b74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	2b22      	cmp	r3, #34	; 0x22
 8003ad4:	d10d      	bne.n	8003af2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003af0:	e040      	b.n	8003b74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d015      	beq.n	8003b28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b21      	cmp	r3, #33	; 0x21
 8003b00:	d112      	bne.n	8003b28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	781a      	ldrb	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b26:	e025      	b.n	8003b74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d120      	bne.n	8003b74 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	2b21      	cmp	r3, #33	; 0x21
 8003b36:	d11d      	bne.n	8003b74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b46:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff fe34 	bl	80037dc <HAL_I2C_MemTxCpltCallback>
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b22      	cmp	r3, #34	; 0x22
 8003b8e:	f040 80ac 	bne.w	8003cea <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d921      	bls.n	8003be4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	f040 808c 	bne.w	8003cea <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003be2:	e082      	b.n	8003cea <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d075      	beq.n	8003cd8 <I2C_MasterReceive_RXNE+0x15c>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d002      	beq.n	8003bf8 <I2C_MasterReceive_RXNE+0x7c>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d16f      	bne.n	8003cd8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f001 f825 	bl	8004c48 <I2C_WaitOnSTOPRequestThroughIT>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d142      	bne.n	8003c8a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c12:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c22:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d10a      	bne.n	8003c74 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff fdbf 	bl	80037f0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c72:	e03a      	b.n	8003cea <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2212      	movs	r2, #18
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff fda0 	bl	80037c8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c88:	e02f      	b.n	8003cea <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c98:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7fd fb7d 	bl	80013d0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cd6:	e008      	b.n	8003cea <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce6:	605a      	str	r2, [r3, #4]
}
 8003ce8:	e7ff      	b.n	8003cea <I2C_MasterReceive_RXNE+0x16e>
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d11b      	bne.n	8003d42 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d18:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003d40:	e0bd      	b.n	8003ebe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d129      	bne.n	8003da0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d00a      	beq.n	8003d78 <I2C_MasterReceive_BTF+0x86>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d007      	beq.n	8003d78 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d76:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d9e:	e08e      	b.n	8003ebe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d176      	bne.n	8003e98 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d002      	beq.n	8003db6 <I2C_MasterReceive_BTF+0xc4>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b10      	cmp	r3, #16
 8003db4:	d108      	bne.n	8003dc8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	e019      	b.n	8003dfc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d002      	beq.n	8003dd4 <I2C_MasterReceive_BTF+0xe2>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d108      	bne.n	8003de6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e00a      	b.n	8003dfc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b10      	cmp	r3, #16
 8003dea:	d007      	beq.n	8003dfc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dfa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691a      	ldr	r2, [r3, #16]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e56:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b40      	cmp	r3, #64	; 0x40
 8003e6a:	d10a      	bne.n	8003e82 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff fcb8 	bl	80037f0 <HAL_I2C_MemRxCpltCallback>
}
 8003e80:	e01d      	b.n	8003ebe <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2212      	movs	r2, #18
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff fc99 	bl	80037c8 <HAL_I2C_MasterRxCpltCallback>
}
 8003e96:	e012      	b.n	8003ebe <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b40      	cmp	r3, #64	; 0x40
 8003ed8:	d117      	bne.n	8003f0a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ef2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003ef4:	e067      	b.n	8003fc6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	611a      	str	r2, [r3, #16]
}
 8003f08:	e05d      	b.n	8003fc6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f12:	d133      	bne.n	8003f7c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b21      	cmp	r3, #33	; 0x21
 8003f1e:	d109      	bne.n	8003f34 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f30:	611a      	str	r2, [r3, #16]
 8003f32:	e008      	b.n	8003f46 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d004      	beq.n	8003f58 <I2C_Master_SB+0x92>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d108      	bne.n	8003f6a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d032      	beq.n	8003fc6 <I2C_Master_SB+0x100>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d02d      	beq.n	8003fc6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f78:	605a      	str	r2, [r3, #4]
}
 8003f7a:	e024      	b.n	8003fc6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10e      	bne.n	8003fa2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	11db      	asrs	r3, r3, #7
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	f003 0306 	and.w	r3, r3, #6
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	f063 030f 	orn	r3, r3, #15
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	611a      	str	r2, [r3, #16]
}
 8003fa0:	e011      	b.n	8003fc6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d10d      	bne.n	8003fc6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	11db      	asrs	r3, r3, #7
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f003 0306 	and.w	r3, r3, #6
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	f063 030e 	orn	r3, r3, #14
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	611a      	str	r2, [r3, #16]
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d004      	beq.n	8003ff8 <I2C_Master_ADD10+0x26>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d108      	bne.n	800400a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00c      	beq.n	800401a <I2C_Master_ADD10+0x48>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d007      	beq.n	800401a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004018:	605a      	str	r2, [r3, #4]
  }
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004026:	b480      	push	{r7}
 8004028:	b091      	sub	sp, #68	; 0x44
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004034:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b22      	cmp	r3, #34	; 0x22
 800404e:	f040 8169 	bne.w	8004324 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10f      	bne.n	800407a <I2C_Master_ADDR+0x54>
 800405a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	d10b      	bne.n	800407a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004062:	2300      	movs	r3, #0
 8004064:	633b      	str	r3, [r7, #48]	; 0x30
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	633b      	str	r3, [r7, #48]	; 0x30
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	633b      	str	r3, [r7, #48]	; 0x30
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	e160      	b.n	800433c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407e:	2b00      	cmp	r3, #0
 8004080:	d11d      	bne.n	80040be <I2C_Master_ADDR+0x98>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800408a:	d118      	bne.n	80040be <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408c:	2300      	movs	r3, #0
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	651a      	str	r2, [r3, #80]	; 0x50
 80040bc:	e13e      	b.n	800433c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d113      	bne.n	80040f0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c8:	2300      	movs	r3, #0
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	62bb      	str	r3, [r7, #40]	; 0x28
 80040dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e115      	b.n	800431c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	f040 808a 	bne.w	8004210 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80040fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004102:	d137      	bne.n	8004174 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004112:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004122:	d113      	bne.n	800414c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004132:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004134:	2300      	movs	r3, #0
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	e0e7      	b.n	800431c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414c:	2300      	movs	r3, #0
 800414e:	623b      	str	r3, [r7, #32]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	623b      	str	r3, [r7, #32]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	623b      	str	r3, [r7, #32]
 8004160:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e0d3      	b.n	800431c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004176:	2b08      	cmp	r3, #8
 8004178:	d02e      	beq.n	80041d8 <I2C_Master_ADDR+0x1b2>
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	2b20      	cmp	r3, #32
 800417e:	d02b      	beq.n	80041d8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004182:	2b12      	cmp	r3, #18
 8004184:	d102      	bne.n	800418c <I2C_Master_ADDR+0x166>
 8004186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004188:	2b01      	cmp	r3, #1
 800418a:	d125      	bne.n	80041d8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418e:	2b04      	cmp	r3, #4
 8004190:	d00e      	beq.n	80041b0 <I2C_Master_ADDR+0x18a>
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	2b02      	cmp	r3, #2
 8004196:	d00b      	beq.n	80041b0 <I2C_Master_ADDR+0x18a>
 8004198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419a:	2b10      	cmp	r3, #16
 800419c:	d008      	beq.n	80041b0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e007      	b.n	80041c0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041be:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	61fb      	str	r3, [r7, #28]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	e0a1      	b.n	800431c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e8:	2300      	movs	r3, #0
 80041ea:	61bb      	str	r3, [r7, #24]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	61bb      	str	r3, [r7, #24]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	61bb      	str	r3, [r7, #24]
 80041fc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e085      	b.n	800431c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d14d      	bne.n	80042b6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800421a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421c:	2b04      	cmp	r3, #4
 800421e:	d016      	beq.n	800424e <I2C_Master_ADDR+0x228>
 8004220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004222:	2b02      	cmp	r3, #2
 8004224:	d013      	beq.n	800424e <I2C_Master_ADDR+0x228>
 8004226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004228:	2b10      	cmp	r3, #16
 800422a:	d010      	beq.n	800424e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800423a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	e007      	b.n	800425e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800425c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426c:	d117      	bne.n	800429e <I2C_Master_ADDR+0x278>
 800426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004270:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004274:	d00b      	beq.n	800428e <I2C_Master_ADDR+0x268>
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	2b01      	cmp	r3, #1
 800427a:	d008      	beq.n	800428e <I2C_Master_ADDR+0x268>
 800427c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427e:	2b08      	cmp	r3, #8
 8004280:	d005      	beq.n	800428e <I2C_Master_ADDR+0x268>
 8004282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004284:	2b10      	cmp	r3, #16
 8004286:	d002      	beq.n	800428e <I2C_Master_ADDR+0x268>
 8004288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428a:	2b20      	cmp	r3, #32
 800428c:	d107      	bne.n	800429e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800429c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	e032      	b.n	800431c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042c4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d4:	d117      	bne.n	8004306 <I2C_Master_ADDR+0x2e0>
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042dc:	d00b      	beq.n	80042f6 <I2C_Master_ADDR+0x2d0>
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d008      	beq.n	80042f6 <I2C_Master_ADDR+0x2d0>
 80042e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d005      	beq.n	80042f6 <I2C_Master_ADDR+0x2d0>
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	2b10      	cmp	r3, #16
 80042ee:	d002      	beq.n	80042f6 <I2C_Master_ADDR+0x2d0>
 80042f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d107      	bne.n	8004306 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004304:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004322:	e00b      	b.n	800433c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
}
 800433a:	e7ff      	b.n	800433c <I2C_Master_ADDR+0x316>
 800433c:	bf00      	nop
 800433e:	3744      	adds	r7, #68	; 0x44
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004356:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d02b      	beq.n	80043ba <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	781a      	ldrb	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d114      	bne.n	80043ba <I2C_SlaveTransmit_TXE+0x72>
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	2b29      	cmp	r3, #41	; 0x29
 8004394:	d111      	bne.n	80043ba <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2221      	movs	r2, #33	; 0x21
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2228      	movs	r2, #40	; 0x28
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7fc ffb3 	bl	8001320 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d011      	beq.n	80043f8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004412:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d02c      	beq.n	8004478 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d114      	bne.n	8004478 <I2C_SlaveReceive_RXNE+0x74>
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b2a      	cmp	r3, #42	; 0x2a
 8004452:	d111      	bne.n	8004478 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004462:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2222      	movs	r2, #34	; 0x22
 8004468:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2228      	movs	r2, #40	; 0x28
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fc ff76 	bl	8001364 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d012      	beq.n	80044b8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044de:	2b28      	cmp	r3, #40	; 0x28
 80044e0:	d125      	bne.n	800452e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004506:	2b00      	cmp	r3, #0
 8004508:	d103      	bne.n	8004512 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	81bb      	strh	r3, [r7, #12]
 8004510:	e002      	b.n	8004518 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004520:	89ba      	ldrh	r2, [r7, #12]
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	4619      	mov	r1, r3
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fc feb8 	bl	800129c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800452c:	e00e      	b.n	800454c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452e:	2300      	movs	r3, #0
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800454c:	bf00      	nop
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004562:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004572:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004574:	2300      	movs	r3, #0
 8004576:	60bb      	str	r3, [r7, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	60bb      	str	r3, [r7, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045b0:	d172      	bne.n	8004698 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	2b22      	cmp	r3, #34	; 0x22
 80045b6:	d002      	beq.n	80045be <I2C_Slave_STOPF+0x6a>
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b2a      	cmp	r3, #42	; 0x2a
 80045bc:	d135      	bne.n	800462a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f043 0204 	orr.w	r2, r3, #4
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe fadd 	bl	8002bb6 <HAL_DMA_GetState>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d049      	beq.n	8004696 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	4a69      	ldr	r2, [pc, #420]	; (80047ac <I2C_Slave_STOPF+0x258>)
 8004608:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe faaf 	bl	8002b72 <HAL_DMA_Abort_IT>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d03d      	beq.n	8004696 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004624:	4610      	mov	r0, r2
 8004626:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004628:	e035      	b.n	8004696 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	b29a      	uxth	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d005      	beq.n	800464e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f043 0204 	orr.w	r2, r3, #4
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800465c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe faa7 	bl	8002bb6 <HAL_DMA_GetState>
 8004668:	4603      	mov	r3, r0
 800466a:	2b01      	cmp	r3, #1
 800466c:	d014      	beq.n	8004698 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004672:	4a4e      	ldr	r2, [pc, #312]	; (80047ac <I2C_Slave_STOPF+0x258>)
 8004674:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467a:	4618      	mov	r0, r3
 800467c:	f7fe fa79 	bl	8002b72 <HAL_DMA_Abort_IT>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d008      	beq.n	8004698 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004690:	4610      	mov	r0, r2
 8004692:	4798      	blx	r3
 8004694:	e000      	b.n	8004698 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004696:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d03e      	beq.n	8004720 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d112      	bne.n	80046d6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b40      	cmp	r3, #64	; 0x40
 80046e2:	d112      	bne.n	800470a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	f043 0204 	orr.w	r2, r3, #4
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f8b3 	bl	8004894 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800472e:	e039      	b.n	80047a4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b2a      	cmp	r3, #42	; 0x2a
 8004734:	d109      	bne.n	800474a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2228      	movs	r2, #40	; 0x28
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7fc fe0d 	bl	8001364 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b28      	cmp	r3, #40	; 0x28
 8004754:	d111      	bne.n	800477a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <I2C_Slave_STOPF+0x25c>)
 800475a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fc fd86 	bl	8001284 <HAL_I2C_ListenCpltCallback>
}
 8004778:	e014      	b.n	80047a4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	2b22      	cmp	r3, #34	; 0x22
 8004780:	d002      	beq.n	8004788 <I2C_Slave_STOPF+0x234>
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	2b22      	cmp	r3, #34	; 0x22
 8004786:	d10d      	bne.n	80047a4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7fc fde0 	bl	8001364 <HAL_I2C_SlaveRxCpltCallback>
}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	08004af9 	.word	0x08004af9
 80047b0:	ffff0000 	.word	0xffff0000

080047b4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d002      	beq.n	80047d6 <I2C_Slave_AF+0x22>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d129      	bne.n	800482a <I2C_Slave_AF+0x76>
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	2b28      	cmp	r3, #40	; 0x28
 80047da:	d126      	bne.n	800482a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a2c      	ldr	r2, [pc, #176]	; (8004890 <I2C_Slave_AF+0xdc>)
 80047e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047f0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047fa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800480a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fc fd2e 	bl	8001284 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004828:	e02e      	b.n	8004888 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	2b21      	cmp	r3, #33	; 0x21
 800482e:	d126      	bne.n	800487e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a17      	ldr	r2, [pc, #92]	; (8004890 <I2C_Slave_AF+0xdc>)
 8004834:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2221      	movs	r2, #33	; 0x21
 800483a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800485a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004864:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004874:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fc fd52 	bl	8001320 <HAL_I2C_SlaveTxCpltCallback>
}
 800487c:	e004      	b.n	8004888 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004886:	615a      	str	r2, [r3, #20]
}
 8004888:	bf00      	nop
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	ffff0000 	.word	0xffff0000

08004894 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80048ac:	7bbb      	ldrb	r3, [r7, #14]
 80048ae:	2b10      	cmp	r3, #16
 80048b0:	d002      	beq.n	80048b8 <I2C_ITError+0x24>
 80048b2:	7bbb      	ldrb	r3, [r7, #14]
 80048b4:	2b40      	cmp	r3, #64	; 0x40
 80048b6:	d10a      	bne.n	80048ce <I2C_ITError+0x3a>
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	2b22      	cmp	r3, #34	; 0x22
 80048bc:	d107      	bne.n	80048ce <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048cc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048d4:	2b28      	cmp	r3, #40	; 0x28
 80048d6:	d107      	bne.n	80048e8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2228      	movs	r2, #40	; 0x28
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048e6:	e015      	b.n	8004914 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f6:	d00a      	beq.n	800490e <I2C_ITError+0x7a>
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	2b60      	cmp	r3, #96	; 0x60
 80048fc:	d007      	beq.n	800490e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800491e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004922:	d162      	bne.n	80049ea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004932:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004938:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b01      	cmp	r3, #1
 8004940:	d020      	beq.n	8004984 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004946:	4a6a      	ldr	r2, [pc, #424]	; (8004af0 <I2C_ITError+0x25c>)
 8004948:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe f90f 	bl	8002b72 <HAL_DMA_Abort_IT>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 8089 	beq.w	8004a6e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0201 	bic.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800497e:	4610      	mov	r0, r2
 8004980:	4798      	blx	r3
 8004982:	e074      	b.n	8004a6e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	4a59      	ldr	r2, [pc, #356]	; (8004af0 <I2C_ITError+0x25c>)
 800498a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	4618      	mov	r0, r3
 8004992:	f7fe f8ee 	bl	8002b72 <HAL_DMA_Abort_IT>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d068      	beq.n	8004a6e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d10b      	bne.n	80049c2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0201 	bic.w	r2, r2, #1
 80049d0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049e4:	4610      	mov	r0, r2
 80049e6:	4798      	blx	r3
 80049e8:	e041      	b.n	8004a6e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b60      	cmp	r3, #96	; 0x60
 80049f4:	d125      	bne.n	8004a42 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	d10b      	bne.n	8004a2a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0201 	bic.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fe fee2 	bl	8003804 <HAL_I2C_AbortCpltCallback>
 8004a40:	e015      	b.n	8004a6e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d10b      	bne.n	8004a68 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7fc fcb1 	bl	80013d0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10e      	bne.n	8004a9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d104      	bne.n	8004a9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d007      	beq.n	8004aac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004aaa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d113      	bne.n	8004ae8 <I2C_ITError+0x254>
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	2b28      	cmp	r3, #40	; 0x28
 8004ac4:	d110      	bne.n	8004ae8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a0a      	ldr	r2, [pc, #40]	; (8004af4 <I2C_ITError+0x260>)
 8004aca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fc fbce 	bl	8001284 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ae8:	bf00      	nop
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	08004af9 	.word	0x08004af9
 8004af4:	ffff0000 	.word	0xffff0000

08004af8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b10:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b12:	4b4b      	ldr	r3, [pc, #300]	; (8004c40 <I2C_DMAAbort+0x148>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	08db      	lsrs	r3, r3, #3
 8004b18:	4a4a      	ldr	r2, [pc, #296]	; (8004c44 <I2C_DMAAbort+0x14c>)
 8004b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1e:	0a1a      	lsrs	r2, r3, #8
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	00da      	lsls	r2, r3, #3
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f043 0220 	orr.w	r2, r3, #32
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004b3e:	e00a      	b.n	8004b56 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b54:	d0ea      	beq.n	8004b2c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b62:	2200      	movs	r2, #0
 8004b64:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b72:	2200      	movs	r2, #0
 8004b74:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b84:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b98:	2200      	movs	r2, #0
 8004b9a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	2200      	movs	r2, #0
 8004baa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0201 	bic.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b60      	cmp	r3, #96	; 0x60
 8004bc6:	d10e      	bne.n	8004be6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004bde:	6978      	ldr	r0, [r7, #20]
 8004be0:	f7fe fe10 	bl	8003804 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004be4:	e027      	b.n	8004c36 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004be6:	7cfb      	ldrb	r3, [r7, #19]
 8004be8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bec:	2b28      	cmp	r3, #40	; 0x28
 8004bee:	d117      	bne.n	8004c20 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c0e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2200      	movs	r2, #0
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2228      	movs	r2, #40	; 0x28
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c1e:	e007      	b.n	8004c30 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004c30:	6978      	ldr	r0, [r7, #20]
 8004c32:	f7fc fbcd 	bl	80013d0 <HAL_I2C_ErrorCallback>
}
 8004c36:	bf00      	nop
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000024 	.word	0x20000024
 8004c44:	14f8b589 	.word	0x14f8b589

08004c48 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c54:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	08db      	lsrs	r3, r3, #3
 8004c5a:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c60:	0a1a      	lsrs	r2, r3, #8
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d107      	bne.n	8004c86 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f043 0220 	orr.w	r2, r3, #32
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e008      	b.n	8004c98 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c94:	d0e9      	beq.n	8004c6a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	20000024 	.word	0x20000024
 8004ca8:	14f8b589 	.word	0x14f8b589

08004cac <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004cbc:	d103      	bne.n	8004cc6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004cc4:	e007      	b.n	8004cd6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cca:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004cce:	d102      	bne.n	8004cd6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ce4:	b08f      	sub	sp, #60	; 0x3c
 8004ce6:	af0a      	add	r7, sp, #40	; 0x28
 8004ce8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e10f      	b.n	8004f14 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f007 fc30 	bl	800c574 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2203      	movs	r2, #3
 8004d18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f003 ff17 	bl	8008b66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	603b      	str	r3, [r7, #0]
 8004d3e:	687e      	ldr	r6, [r7, #4]
 8004d40:	466d      	mov	r5, sp
 8004d42:	f106 0410 	add.w	r4, r6, #16
 8004d46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d52:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d56:	1d33      	adds	r3, r6, #4
 8004d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d5a:	6838      	ldr	r0, [r7, #0]
 8004d5c:	f003 fdee 	bl	800893c <USB_CoreInit>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d005      	beq.n	8004d72 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2202      	movs	r2, #2
 8004d6a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e0d0      	b.n	8004f14 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2100      	movs	r1, #0
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f003 ff05 	bl	8008b88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]
 8004d82:	e04a      	b.n	8004e1a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d84:	7bfa      	ldrb	r2, [r7, #15]
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	333d      	adds	r3, #61	; 0x3d
 8004d94:	2201      	movs	r2, #1
 8004d96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d98:	7bfa      	ldrb	r2, [r7, #15]
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	333c      	adds	r3, #60	; 0x3c
 8004da8:	7bfa      	ldrb	r2, [r7, #15]
 8004daa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004dac:	7bfa      	ldrb	r2, [r7, #15]
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
 8004db0:	b298      	uxth	r0, r3
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	4413      	add	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	3344      	adds	r3, #68	; 0x44
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004dc4:	7bfa      	ldrb	r2, [r7, #15]
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	3340      	adds	r3, #64	; 0x40
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004dd8:	7bfa      	ldrb	r2, [r7, #15]
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	440b      	add	r3, r1
 8004de6:	3348      	adds	r3, #72	; 0x48
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004dec:	7bfa      	ldrb	r2, [r7, #15]
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	4613      	mov	r3, r2
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	334c      	adds	r3, #76	; 0x4c
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e00:	7bfa      	ldrb	r2, [r7, #15]
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	4613      	mov	r3, r2
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	3354      	adds	r3, #84	; 0x54
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	3301      	adds	r3, #1
 8004e18:	73fb      	strb	r3, [r7, #15]
 8004e1a:	7bfa      	ldrb	r2, [r7, #15]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d3af      	bcc.n	8004d84 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e24:	2300      	movs	r3, #0
 8004e26:	73fb      	strb	r3, [r7, #15]
 8004e28:	e044      	b.n	8004eb4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e2a:	7bfa      	ldrb	r2, [r7, #15]
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e40:	7bfa      	ldrb	r2, [r7, #15]
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	4413      	add	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004e52:	7bfa      	ldrb	r2, [r7, #15]
 8004e54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e56:	7bfa      	ldrb	r2, [r7, #15]
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e68:	2200      	movs	r2, #0
 8004e6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e6c:	7bfa      	ldrb	r2, [r7, #15]
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	4613      	mov	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	440b      	add	r3, r1
 8004e7a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e82:	7bfa      	ldrb	r2, [r7, #15]
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	4613      	mov	r3, r2
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	440b      	add	r3, r1
 8004e90:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e98:	7bfa      	ldrb	r2, [r7, #15]
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	4413      	add	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	73fb      	strb	r3, [r7, #15]
 8004eb4:	7bfa      	ldrb	r2, [r7, #15]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d3b5      	bcc.n	8004e2a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	603b      	str	r3, [r7, #0]
 8004ec4:	687e      	ldr	r6, [r7, #4]
 8004ec6:	466d      	mov	r5, sp
 8004ec8:	f106 0410 	add.w	r4, r6, #16
 8004ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ed4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ed8:	e885 0003 	stmia.w	r5, {r0, r1}
 8004edc:	1d33      	adds	r3, r6, #4
 8004ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ee0:	6838      	ldr	r0, [r7, #0]
 8004ee2:	f003 fe9d 	bl	8008c20 <USB_DevInit>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e00d      	b.n	8004f14 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f004 ffec 	bl	8009eea <USB_DevDisconnect>

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_PCD_Start+0x1c>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e020      	b.n	8004f7a <HAL_PCD_Start+0x5e>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d109      	bne.n	8004f5c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d005      	beq.n	8004f5c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f003 fdef 	bl	8008b44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f004 ff9c 	bl	8009ea8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f82:	b590      	push	{r4, r7, lr}
 8004f84:	b08d      	sub	sp, #52	; 0x34
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f005 f85a 	bl	800a052 <USB_GetMode>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f040 848a 	bne.w	80058ba <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f004 ffbe 	bl	8009f2c <USB_ReadInterrupts>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 8480 	beq.w	80058b8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	0a1b      	lsrs	r3, r3, #8
 8004fc2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f004 ffab 	bl	8009f2c <USB_ReadInterrupts>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d107      	bne.n	8004ff0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695a      	ldr	r2, [r3, #20]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f002 0202 	and.w	r2, r2, #2
 8004fee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f004 ff99 	bl	8009f2c <USB_ReadInterrupts>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b10      	cmp	r3, #16
 8005002:	d161      	bne.n	80050c8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0210 	bic.w	r2, r2, #16
 8005012:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f003 020f 	and.w	r2, r3, #15
 8005020:	4613      	mov	r3, r2
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	4413      	add	r3, r2
 8005030:	3304      	adds	r3, #4
 8005032:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	0c5b      	lsrs	r3, r3, #17
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	2b02      	cmp	r3, #2
 800503e:	d124      	bne.n	800508a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005046:	4013      	ands	r3, r2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d035      	beq.n	80050b8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	091b      	lsrs	r3, r3, #4
 8005054:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800505a:	b29b      	uxth	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	6a38      	ldr	r0, [r7, #32]
 8005060:	f004 fdd0 	bl	8009c04 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	091b      	lsrs	r3, r3, #4
 800506c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005070:	441a      	add	r2, r3
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	6a1a      	ldr	r2, [r3, #32]
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	091b      	lsrs	r3, r3, #4
 800507e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005082:	441a      	add	r2, r3
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	621a      	str	r2, [r3, #32]
 8005088:	e016      	b.n	80050b8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	0c5b      	lsrs	r3, r3, #17
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	2b06      	cmp	r3, #6
 8005094:	d110      	bne.n	80050b8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800509c:	2208      	movs	r2, #8
 800509e:	4619      	mov	r1, r3
 80050a0:	6a38      	ldr	r0, [r7, #32]
 80050a2:	f004 fdaf 	bl	8009c04 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	6a1a      	ldr	r2, [r3, #32]
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	091b      	lsrs	r3, r3, #4
 80050ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050b2:	441a      	add	r2, r3
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0210 	orr.w	r2, r2, #16
 80050c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f004 ff2d 	bl	8009f2c <USB_ReadInterrupts>
 80050d2:	4603      	mov	r3, r0
 80050d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050dc:	f040 80a7 	bne.w	800522e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f004 ff32 	bl	8009f52 <USB_ReadDevAllOutEpInterrupt>
 80050ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80050f0:	e099      	b.n	8005226 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 808e 	beq.w	800521a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	4611      	mov	r1, r2
 8005108:	4618      	mov	r0, r3
 800510a:	f004 ff56 	bl	8009fba <USB_ReadDevOutEPInterrupt>
 800510e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00c      	beq.n	8005134 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005126:	461a      	mov	r2, r3
 8005128:	2301      	movs	r3, #1
 800512a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800512c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fec2 	bl	8005eb8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00c      	beq.n	8005158 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514a:	461a      	mov	r2, r3
 800514c:	2308      	movs	r3, #8
 800514e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 ff98 	bl	8006088 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	2b00      	cmp	r3, #0
 8005160:	d008      	beq.n	8005174 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516e:	461a      	mov	r2, r3
 8005170:	2310      	movs	r3, #16
 8005172:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d030      	beq.n	80051e0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005186:	2b80      	cmp	r3, #128	; 0x80
 8005188:	d109      	bne.n	800519e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	69fa      	ldr	r2, [r7, #28]
 8005194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005198:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800519c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800519e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a0:	4613      	mov	r3, r2
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	4413      	add	r3, r2
 80051b0:	3304      	adds	r3, #4
 80051b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	78db      	ldrb	r3, [r3, #3]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d108      	bne.n	80051ce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2200      	movs	r2, #0
 80051c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	4619      	mov	r1, r3
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f007 facf 	bl	800c76c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051da:	461a      	mov	r2, r3
 80051dc:	2302      	movs	r3, #2
 80051de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f6:	461a      	mov	r2, r3
 80051f8:	2320      	movs	r3, #32
 80051fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d009      	beq.n	800521a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005212:	461a      	mov	r2, r3
 8005214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005218:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	3301      	adds	r3, #1
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	085b      	lsrs	r3, r3, #1
 8005224:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	2b00      	cmp	r3, #0
 800522a:	f47f af62 	bne.w	80050f2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f004 fe7a 	bl	8009f2c <USB_ReadInterrupts>
 8005238:	4603      	mov	r3, r0
 800523a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800523e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005242:	f040 80db 	bne.w	80053fc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f004 fe9b 	bl	8009f86 <USB_ReadDevAllInEpInterrupt>
 8005250:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005256:	e0cd      	b.n	80053f4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 80c2 	beq.w	80053e8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	4611      	mov	r1, r2
 800526e:	4618      	mov	r0, r3
 8005270:	f004 fec1 	bl	8009ff6 <USB_ReadDevInEPInterrupt>
 8005274:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d057      	beq.n	8005330 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	2201      	movs	r2, #1
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	43db      	mvns	r3, r3
 800529a:	69f9      	ldr	r1, [r7, #28]
 800529c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052a0:	4013      	ands	r3, r2
 80052a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b0:	461a      	mov	r2, r3
 80052b2:	2301      	movs	r3, #1
 80052b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d132      	bne.n	8005324 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c2:	4613      	mov	r3, r2
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	4413      	add	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	440b      	add	r3, r1
 80052cc:	334c      	adds	r3, #76	; 0x4c
 80052ce:	6819      	ldr	r1, [r3, #0]
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d4:	4613      	mov	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4403      	add	r3, r0
 80052de:	3348      	adds	r3, #72	; 0x48
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4419      	add	r1, r3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e8:	4613      	mov	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4403      	add	r3, r0
 80052f2:	334c      	adds	r3, #76	; 0x4c
 80052f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d113      	bne.n	8005324 <HAL_PCD_IRQHandler+0x3a2>
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005300:	4613      	mov	r3, r2
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	3354      	adds	r3, #84	; 0x54
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d108      	bne.n	8005324 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6818      	ldr	r0, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800531c:	461a      	mov	r2, r3
 800531e:	2101      	movs	r1, #1
 8005320:	f004 fec8 	bl	800a0b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	b2db      	uxtb	r3, r3
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f007 f9a3 	bl	800c676 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d008      	beq.n	800534c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005346:	461a      	mov	r2, r3
 8005348:	2308      	movs	r3, #8
 800534a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005362:	461a      	mov	r2, r3
 8005364:	2310      	movs	r3, #16
 8005366:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	d008      	beq.n	8005384 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537e:	461a      	mov	r2, r3
 8005380:	2340      	movs	r3, #64	; 0x40
 8005382:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d023      	beq.n	80053d6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800538e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005390:	6a38      	ldr	r0, [r7, #32]
 8005392:	f003 fda9 	bl	8008ee8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005398:	4613      	mov	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	3338      	adds	r3, #56	; 0x38
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	4413      	add	r3, r2
 80053a6:	3304      	adds	r3, #4
 80053a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	78db      	ldrb	r3, [r3, #3]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d108      	bne.n	80053c4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2200      	movs	r2, #0
 80053b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	4619      	mov	r1, r3
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f007 f9e6 	bl	800c790 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	461a      	mov	r2, r3
 80053d2:	2302      	movs	r3, #2
 80053d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80053e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fcdb 	bl	8005d9e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	3301      	adds	r3, #1
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f47f af2e 	bne.w	8005258 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f004 fd93 	bl	8009f2c <USB_ReadInterrupts>
 8005406:	4603      	mov	r3, r0
 8005408:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800540c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005410:	d122      	bne.n	8005458 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005420:	f023 0301 	bic.w	r3, r3, #1
 8005424:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800542c:	2b01      	cmp	r3, #1
 800542e:	d108      	bne.n	8005442 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005438:	2100      	movs	r1, #0
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fec2 	bl	80061c4 <HAL_PCDEx_LPM_Callback>
 8005440:	e002      	b.n	8005448 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f007 f984 	bl	800c750 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695a      	ldr	r2, [r3, #20]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005456:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f004 fd65 	bl	8009f2c <USB_ReadInterrupts>
 8005462:	4603      	mov	r3, r0
 8005464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800546c:	d112      	bne.n	8005494 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b01      	cmp	r3, #1
 800547c:	d102      	bne.n	8005484 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f007 f940 	bl	800c704 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695a      	ldr	r2, [r3, #20]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005492:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f004 fd47 	bl	8009f2c <USB_ReadInterrupts>
 800549e:	4603      	mov	r3, r0
 80054a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a8:	f040 80b7 	bne.w	800561a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	69fa      	ldr	r2, [r7, #28]
 80054b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ba:	f023 0301 	bic.w	r3, r3, #1
 80054be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2110      	movs	r1, #16
 80054c6:	4618      	mov	r0, r3
 80054c8:	f003 fd0e 	bl	8008ee8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054cc:	2300      	movs	r3, #0
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054d0:	e046      	b.n	8005560 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80054d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054de:	461a      	mov	r2, r3
 80054e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f6:	0151      	lsls	r1, r2, #5
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	440a      	add	r2, r1
 80054fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005500:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005504:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005512:	461a      	mov	r2, r3
 8005514:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005518:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800552a:	0151      	lsls	r1, r2, #5
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	440a      	add	r2, r1
 8005530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005534:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005538:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800554a:	0151      	lsls	r1, r2, #5
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	440a      	add	r2, r1
 8005550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005554:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005558:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	3301      	adds	r3, #1
 800555e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005566:	429a      	cmp	r2, r3
 8005568:	d3b3      	bcc.n	80054d2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	69fa      	ldr	r2, [r7, #28]
 8005574:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005578:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800557c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	2b00      	cmp	r3, #0
 8005584:	d016      	beq.n	80055b4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005596:	f043 030b 	orr.w	r3, r3, #11
 800559a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ac:	f043 030b 	orr.w	r3, r3, #11
 80055b0:	6453      	str	r3, [r2, #68]	; 0x44
 80055b2:	e015      	b.n	80055e0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80055ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055da:	f043 030b 	orr.w	r3, r3, #11
 80055de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69fa      	ldr	r2, [r7, #28]
 80055ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80055f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005604:	461a      	mov	r2, r3
 8005606:	f004 fd55 	bl	800a0b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695a      	ldr	r2, [r3, #20]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005618:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f004 fc84 	bl	8009f2c <USB_ReadInterrupts>
 8005624:	4603      	mov	r3, r0
 8005626:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800562a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800562e:	d124      	bne.n	800567a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f004 fd1a 	bl	800a06e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f003 fccf 	bl	8008fe2 <USB_GetDevSpeed>
 8005644:	4603      	mov	r3, r0
 8005646:	461a      	mov	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681c      	ldr	r4, [r3, #0]
 8005650:	f001 f9e8 	bl	8006a24 <HAL_RCC_GetHCLKFreq>
 8005654:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800565a:	b2db      	uxtb	r3, r3
 800565c:	461a      	mov	r2, r3
 800565e:	4620      	mov	r0, r4
 8005660:	f003 f9ce 	bl	8008a00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f007 f82e 	bl	800c6c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695a      	ldr	r2, [r3, #20]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005678:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f004 fc54 	bl	8009f2c <USB_ReadInterrupts>
 8005684:	4603      	mov	r3, r0
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b08      	cmp	r3, #8
 800568c:	d10a      	bne.n	80056a4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f007 f80b 	bl	800c6aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695a      	ldr	r2, [r3, #20]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f002 0208 	and.w	r2, r2, #8
 80056a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f004 fc3f 	bl	8009f2c <USB_ReadInterrupts>
 80056ae:	4603      	mov	r3, r0
 80056b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b4:	2b80      	cmp	r3, #128	; 0x80
 80056b6:	d122      	bne.n	80056fe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056c4:	2301      	movs	r3, #1
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
 80056c8:	e014      	b.n	80056f4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ce:	4613      	mov	r3, r2
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	4413      	add	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	440b      	add	r3, r1
 80056d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d105      	bne.n	80056ee <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fb27 	bl	8005d3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	3301      	adds	r3, #1
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d3e5      	bcc.n	80056ca <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f004 fc12 	bl	8009f2c <USB_ReadInterrupts>
 8005708:	4603      	mov	r3, r0
 800570a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800570e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005712:	d13b      	bne.n	800578c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005714:	2301      	movs	r3, #1
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
 8005718:	e02b      	b.n	8005772 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572e:	4613      	mov	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	3340      	adds	r3, #64	; 0x40
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d115      	bne.n	800576c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005740:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005742:	2b00      	cmp	r3, #0
 8005744:	da12      	bge.n	800576c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574a:	4613      	mov	r3, r2
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	440b      	add	r3, r1
 8005754:	333f      	adds	r3, #63	; 0x3f
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	b2db      	uxtb	r3, r3
 800575e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005762:	b2db      	uxtb	r3, r3
 8005764:	4619      	mov	r1, r3
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fae8 	bl	8005d3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	3301      	adds	r3, #1
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005778:	429a      	cmp	r2, r3
 800577a:	d3ce      	bcc.n	800571a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695a      	ldr	r2, [r3, #20]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800578a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4618      	mov	r0, r3
 8005792:	f004 fbcb 	bl	8009f2c <USB_ReadInterrupts>
 8005796:	4603      	mov	r3, r0
 8005798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800579c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057a0:	d155      	bne.n	800584e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057a2:	2301      	movs	r3, #1
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
 80057a6:	e045      	b.n	8005834 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057bc:	4613      	mov	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d12e      	bne.n	800582e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	da2b      	bge.n	800582e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80057e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d121      	bne.n	800582e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ee:	4613      	mov	r3, r2
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80057fc:	2201      	movs	r2, #1
 80057fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	69fa      	ldr	r2, [r7, #28]
 8005822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800582a:	6053      	str	r3, [r2, #4]
            break;
 800582c:	e007      	b.n	800583e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	3301      	adds	r3, #1
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583a:	429a      	cmp	r2, r3
 800583c:	d3b4      	bcc.n	80057a8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695a      	ldr	r2, [r3, #20]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800584c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f004 fb6a 	bl	8009f2c <USB_ReadInterrupts>
 8005858:	4603      	mov	r3, r0
 800585a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800585e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005862:	d10a      	bne.n	800587a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f006 ffa5 	bl	800c7b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4618      	mov	r0, r3
 8005880:	f004 fb54 	bl	8009f2c <USB_ReadInterrupts>
 8005884:	4603      	mov	r3, r0
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b04      	cmp	r3, #4
 800588c:	d115      	bne.n	80058ba <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f006 ff95 	bl	800c7d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6859      	ldr	r1, [r3, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]
 80058b6:	e000      	b.n	80058ba <HAL_PCD_IRQHandler+0x938>
      return;
 80058b8:	bf00      	nop
    }
  }
}
 80058ba:	3734      	adds	r7, #52	; 0x34
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd90      	pop	{r4, r7, pc}

080058c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <HAL_PCD_SetAddress+0x1a>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e013      	b.n	8005902 <HAL_PCD_SetAddress+0x42>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	78fa      	ldrb	r2, [r7, #3]
 80058e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	78fa      	ldrb	r2, [r7, #3]
 80058f0:	4611      	mov	r1, r2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f004 fab2 	bl	8009e5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	4608      	mov	r0, r1
 8005914:	4611      	mov	r1, r2
 8005916:	461a      	mov	r2, r3
 8005918:	4603      	mov	r3, r0
 800591a:	70fb      	strb	r3, [r7, #3]
 800591c:	460b      	mov	r3, r1
 800591e:	803b      	strh	r3, [r7, #0]
 8005920:	4613      	mov	r3, r2
 8005922:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800592c:	2b00      	cmp	r3, #0
 800592e:	da0f      	bge.n	8005950 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	f003 020f 	and.w	r2, r3, #15
 8005936:	4613      	mov	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	3338      	adds	r3, #56	; 0x38
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	4413      	add	r3, r2
 8005944:	3304      	adds	r3, #4
 8005946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2201      	movs	r2, #1
 800594c:	705a      	strb	r2, [r3, #1]
 800594e:	e00f      	b.n	8005970 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	f003 020f 	and.w	r2, r3, #15
 8005956:	4613      	mov	r3, r2
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	4413      	add	r3, r2
 8005966:	3304      	adds	r3, #4
 8005968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	b2da      	uxtb	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800597c:	883a      	ldrh	r2, [r7, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	78ba      	ldrb	r2, [r7, #2]
 8005986:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	785b      	ldrb	r3, [r3, #1]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d004      	beq.n	800599a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800599a:	78bb      	ldrb	r3, [r7, #2]
 800599c:	2b02      	cmp	r3, #2
 800599e:	d102      	bne.n	80059a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d101      	bne.n	80059b4 <HAL_PCD_EP_Open+0xaa>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e00e      	b.n	80059d2 <HAL_PCD_EP_Open+0xc8>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68f9      	ldr	r1, [r7, #12]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f003 fb32 	bl	800902c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80059d0:	7afb      	ldrb	r3, [r7, #11]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	460b      	mov	r3, r1
 80059e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	da0f      	bge.n	8005a0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059ee:	78fb      	ldrb	r3, [r7, #3]
 80059f0:	f003 020f 	and.w	r2, r3, #15
 80059f4:	4613      	mov	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	3338      	adds	r3, #56	; 0x38
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	4413      	add	r3, r2
 8005a02:	3304      	adds	r3, #4
 8005a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	705a      	strb	r2, [r3, #1]
 8005a0c:	e00f      	b.n	8005a2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	f003 020f 	and.w	r2, r3, #15
 8005a14:	4613      	mov	r3, r2
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	4413      	add	r3, r2
 8005a24:	3304      	adds	r3, #4
 8005a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005a2e:	78fb      	ldrb	r3, [r7, #3]
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d101      	bne.n	8005a48 <HAL_PCD_EP_Close+0x6e>
 8005a44:	2302      	movs	r3, #2
 8005a46:	e00e      	b.n	8005a66 <HAL_PCD_EP_Close+0x8c>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68f9      	ldr	r1, [r7, #12]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f003 fb70 	bl	800913c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b086      	sub	sp, #24
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a7e:	7afb      	ldrb	r3, [r7, #11]
 8005a80:	f003 020f 	and.w	r2, r3, #15
 8005a84:	4613      	mov	r3, r2
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	3304      	adds	r3, #4
 8005a96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2200      	movs	r2, #0
 8005aae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ab0:	7afb      	ldrb	r3, [r7, #11]
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d102      	bne.n	8005aca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005aca:	7afb      	ldrb	r3, [r7, #11]
 8005acc:	f003 030f 	and.w	r3, r3, #15
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d109      	bne.n	8005ae8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	6979      	ldr	r1, [r7, #20]
 8005ae2:	f003 fe4f 	bl	8009784 <USB_EP0StartXfer>
 8005ae6:	e008      	b.n	8005afa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	461a      	mov	r2, r3
 8005af4:	6979      	ldr	r1, [r7, #20]
 8005af6:	f003 fbfd 	bl	80092f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	f003 020f 	and.w	r2, r3, #15
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005b26:	681b      	ldr	r3, [r3, #0]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	603b      	str	r3, [r7, #0]
 8005b40:	460b      	mov	r3, r1
 8005b42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b44:	7afb      	ldrb	r3, [r7, #11]
 8005b46:	f003 020f 	and.w	r2, r3, #15
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	3338      	adds	r3, #56	; 0x38
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4413      	add	r3, r2
 8005b58:	3304      	adds	r3, #4
 8005b5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2201      	movs	r2, #1
 8005b72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b74:	7afb      	ldrb	r3, [r7, #11]
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d102      	bne.n	8005b8e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b8e:	7afb      	ldrb	r3, [r7, #11]
 8005b90:	f003 030f 	and.w	r3, r3, #15
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d109      	bne.n	8005bac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	6979      	ldr	r1, [r7, #20]
 8005ba6:	f003 fded 	bl	8009784 <USB_EP0StartXfer>
 8005baa:	e008      	b.n	8005bbe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6818      	ldr	r0, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6979      	ldr	r1, [r7, #20]
 8005bba:	f003 fb9b 	bl	80092f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	f003 020f 	and.w	r2, r3, #15
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d901      	bls.n	8005be6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e050      	b.n	8005c88 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	da0f      	bge.n	8005c0e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	f003 020f 	and.w	r2, r3, #15
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	3338      	adds	r3, #56	; 0x38
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	4413      	add	r3, r2
 8005c02:	3304      	adds	r3, #4
 8005c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	705a      	strb	r2, [r3, #1]
 8005c0c:	e00d      	b.n	8005c2a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c0e:	78fa      	ldrb	r2, [r7, #3]
 8005c10:	4613      	mov	r3, r2
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	4413      	add	r3, r2
 8005c20:	3304      	adds	r3, #4
 8005c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <HAL_PCD_EP_SetStall+0x82>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e01e      	b.n	8005c88 <HAL_PCD_EP_SetStall+0xc0>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68f9      	ldr	r1, [r7, #12]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f004 f82b 	bl	8009cb4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10a      	bne.n	8005c7e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6818      	ldr	r0, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	b2d9      	uxtb	r1, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f004 fa1b 	bl	800a0b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005c9c:	78fb      	ldrb	r3, [r7, #3]
 8005c9e:	f003 020f 	and.w	r2, r3, #15
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d901      	bls.n	8005cae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e042      	b.n	8005d34 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	da0f      	bge.n	8005cd6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cb6:	78fb      	ldrb	r3, [r7, #3]
 8005cb8:	f003 020f 	and.w	r2, r3, #15
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	3338      	adds	r3, #56	; 0x38
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4413      	add	r3, r2
 8005cca:	3304      	adds	r3, #4
 8005ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	705a      	strb	r2, [r3, #1]
 8005cd4:	e00f      	b.n	8005cf6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	f003 020f 	and.w	r2, r3, #15
 8005cdc:	4613      	mov	r3, r2
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	4413      	add	r3, r2
 8005cec:	3304      	adds	r3, #4
 8005cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	f003 030f 	and.w	r3, r3, #15
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <HAL_PCD_EP_ClrStall+0x86>
 8005d12:	2302      	movs	r3, #2
 8005d14:	e00e      	b.n	8005d34 <HAL_PCD_EP_ClrStall+0xa4>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68f9      	ldr	r1, [r7, #12]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f004 f833 	bl	8009d90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	da0c      	bge.n	8005d6a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d50:	78fb      	ldrb	r3, [r7, #3]
 8005d52:	f003 020f 	and.w	r2, r3, #15
 8005d56:	4613      	mov	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	3338      	adds	r3, #56	; 0x38
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	4413      	add	r3, r2
 8005d64:	3304      	adds	r3, #4
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	e00c      	b.n	8005d84 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d6a:	78fb      	ldrb	r3, [r7, #3]
 8005d6c:	f003 020f 	and.w	r2, r3, #15
 8005d70:	4613      	mov	r3, r2
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	4413      	add	r3, r2
 8005d80:	3304      	adds	r3, #4
 8005d82:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68f9      	ldr	r1, [r7, #12]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f003 fe52 	bl	8009a34 <USB_EPStopXfer>
 8005d90:	4603      	mov	r3, r0
 8005d92:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005d94:	7afb      	ldrb	r3, [r7, #11]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b08a      	sub	sp, #40	; 0x28
 8005da2:	af02      	add	r7, sp, #8
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	4613      	mov	r3, r2
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	4413      	add	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	3338      	adds	r3, #56	; 0x38
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a1a      	ldr	r2, [r3, #32]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d901      	bls.n	8005dd6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e06c      	b.n	8005eb0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	699a      	ldr	r2, [r3, #24]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d902      	bls.n	8005df2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	3303      	adds	r3, #3
 8005df6:	089b      	lsrs	r3, r3, #2
 8005df8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005dfa:	e02b      	b.n	8005e54 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	699a      	ldr	r2, [r3, #24]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d902      	bls.n	8005e18 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	3303      	adds	r3, #3
 8005e1c:	089b      	lsrs	r3, r3, #2
 8005e1e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6919      	ldr	r1, [r3, #16]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	4603      	mov	r3, r0
 8005e36:	6978      	ldr	r0, [r7, #20]
 8005e38:	f003 fea6 	bl	8009b88 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	441a      	add	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a1a      	ldr	r2, [r3, #32]
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	441a      	add	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d809      	bhi.n	8005e7e <PCD_WriteEmptyTxFifo+0xe0>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a1a      	ldr	r2, [r3, #32]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d203      	bcs.n	8005e7e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1be      	bne.n	8005dfc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	699a      	ldr	r2, [r3, #24]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d811      	bhi.n	8005eae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	2201      	movs	r2, #1
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	43db      	mvns	r3, r3
 8005ea4:	6939      	ldr	r1, [r7, #16]
 8005ea6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eaa:	4013      	ands	r3, r2
 8005eac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	333c      	adds	r3, #60	; 0x3c
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d17b      	bne.n	8005fe6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f003 0308 	and.w	r3, r3, #8
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d015      	beq.n	8005f24 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	4a61      	ldr	r2, [pc, #388]	; (8006080 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	f240 80b9 	bls.w	8006074 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 80b3 	beq.w	8006074 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f20:	6093      	str	r3, [r2, #8]
 8005f22:	e0a7      	b.n	8006074 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d009      	beq.n	8005f42 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	2320      	movs	r3, #32
 8005f3e:	6093      	str	r3, [r2, #8]
 8005f40:	e098      	b.n	8006074 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f040 8093 	bne.w	8006074 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	4a4b      	ldr	r2, [pc, #300]	; (8006080 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d90f      	bls.n	8005f76 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f72:	6093      	str	r3, [r2, #8]
 8005f74:	e07e      	b.n	8006074 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	4413      	add	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	4413      	add	r3, r2
 8005f88:	3304      	adds	r3, #4
 8005f8a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	69da      	ldr	r2, [r3, #28]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	0159      	lsls	r1, r3, #5
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	440b      	add	r3, r1
 8005f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa2:	1ad2      	subs	r2, r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d114      	bne.n	8005fd8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d109      	bne.n	8005fca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6818      	ldr	r0, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	f004 f876 	bl	800a0b4 <USB_EP0_OutStart>
 8005fc8:	e006      	b.n	8005fd8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	691a      	ldr	r2, [r3, #16]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	441a      	add	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f006 fb2e 	bl	800c640 <HAL_PCD_DataOutStageCallback>
 8005fe4:	e046      	b.n	8006074 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	4a26      	ldr	r2, [pc, #152]	; (8006084 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d124      	bne.n	8006038 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00a      	beq.n	800600e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006004:	461a      	mov	r2, r3
 8006006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600a:	6093      	str	r3, [r2, #8]
 800600c:	e032      	b.n	8006074 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f003 0320 	and.w	r3, r3, #32
 8006014:	2b00      	cmp	r3, #0
 8006016:	d008      	beq.n	800602a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006024:	461a      	mov	r2, r3
 8006026:	2320      	movs	r3, #32
 8006028:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f006 fb05 	bl	800c640 <HAL_PCD_DataOutStageCallback>
 8006036:	e01d      	b.n	8006074 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d114      	bne.n	8006068 <PCD_EP_OutXfrComplete_int+0x1b0>
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	4613      	mov	r3, r2
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	440b      	add	r3, r1
 800604c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d108      	bne.n	8006068 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6818      	ldr	r0, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006060:	461a      	mov	r2, r3
 8006062:	2100      	movs	r1, #0
 8006064:	f004 f826 	bl	800a0b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	b2db      	uxtb	r3, r3
 800606c:	4619      	mov	r1, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f006 fae6 	bl	800c640 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3720      	adds	r7, #32
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	4f54300a 	.word	0x4f54300a
 8006084:	4f54310a 	.word	0x4f54310a

08006088 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	333c      	adds	r3, #60	; 0x3c
 80060a0:	3304      	adds	r3, #4
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4a15      	ldr	r2, [pc, #84]	; (8006110 <PCD_EP_OutSetupPacket_int+0x88>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d90e      	bls.n	80060dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d009      	beq.n	80060dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d4:	461a      	mov	r2, r3
 80060d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f006 fa9d 	bl	800c61c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a0a      	ldr	r2, [pc, #40]	; (8006110 <PCD_EP_OutSetupPacket_int+0x88>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d90c      	bls.n	8006104 <PCD_EP_OutSetupPacket_int+0x7c>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d108      	bne.n	8006104 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6818      	ldr	r0, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80060fc:	461a      	mov	r2, r3
 80060fe:	2101      	movs	r1, #1
 8006100:	f003 ffd8 	bl	800a0b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	4f54300a 	.word	0x4f54300a

08006114 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]
 8006120:	4613      	mov	r3, r2
 8006122:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d107      	bne.n	8006142 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006132:	883b      	ldrh	r3, [r7, #0]
 8006134:	0419      	lsls	r1, r3, #16
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	430a      	orrs	r2, r1
 800613e:	629a      	str	r2, [r3, #40]	; 0x28
 8006140:	e028      	b.n	8006194 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006148:	0c1b      	lsrs	r3, r3, #16
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	4413      	add	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006150:	2300      	movs	r3, #0
 8006152:	73fb      	strb	r3, [r7, #15]
 8006154:	e00d      	b.n	8006172 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	3340      	adds	r3, #64	; 0x40
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	0c1b      	lsrs	r3, r3, #16
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	4413      	add	r3, r2
 800616a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	3301      	adds	r3, #1
 8006170:	73fb      	strb	r3, [r7, #15]
 8006172:	7bfa      	ldrb	r2, [r7, #15]
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	3b01      	subs	r3, #1
 8006178:	429a      	cmp	r2, r3
 800617a:	d3ec      	bcc.n	8006156 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800617c:	883b      	ldrh	r3, [r7, #0]
 800617e:	0418      	lsls	r0, r3, #16
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6819      	ldr	r1, [r3, #0]
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	3b01      	subs	r3, #1
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	4302      	orrs	r2, r0
 800618c:	3340      	adds	r3, #64	; 0x40
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	440b      	add	r3, r1
 8006192:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	460b      	mov	r3, r1
 80061ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	887a      	ldrh	r2, [r7, #2]
 80061b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e267      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d075      	beq.n	80062e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061fa:	4b88      	ldr	r3, [pc, #544]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	2b04      	cmp	r3, #4
 8006204:	d00c      	beq.n	8006220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006206:	4b85      	ldr	r3, [pc, #532]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800620e:	2b08      	cmp	r3, #8
 8006210:	d112      	bne.n	8006238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006212:	4b82      	ldr	r3, [pc, #520]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800621a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800621e:	d10b      	bne.n	8006238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006220:	4b7e      	ldr	r3, [pc, #504]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d05b      	beq.n	80062e4 <HAL_RCC_OscConfig+0x108>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d157      	bne.n	80062e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e242      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006240:	d106      	bne.n	8006250 <HAL_RCC_OscConfig+0x74>
 8006242:	4b76      	ldr	r3, [pc, #472]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a75      	ldr	r2, [pc, #468]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	e01d      	b.n	800628c <HAL_RCC_OscConfig+0xb0>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006258:	d10c      	bne.n	8006274 <HAL_RCC_OscConfig+0x98>
 800625a:	4b70      	ldr	r3, [pc, #448]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a6f      	ldr	r2, [pc, #444]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	4b6d      	ldr	r3, [pc, #436]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a6c      	ldr	r2, [pc, #432]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800626c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	e00b      	b.n	800628c <HAL_RCC_OscConfig+0xb0>
 8006274:	4b69      	ldr	r3, [pc, #420]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a68      	ldr	r2, [pc, #416]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800627a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	4b66      	ldr	r3, [pc, #408]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a65      	ldr	r2, [pc, #404]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800628a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d013      	beq.n	80062bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006294:	f7fc f8ba 	bl	800240c <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800629c:	f7fc f8b6 	bl	800240c <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b64      	cmp	r3, #100	; 0x64
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e207      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ae:	4b5b      	ldr	r3, [pc, #364]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0f0      	beq.n	800629c <HAL_RCC_OscConfig+0xc0>
 80062ba:	e014      	b.n	80062e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062bc:	f7fc f8a6 	bl	800240c <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062c4:	f7fc f8a2 	bl	800240c <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b64      	cmp	r3, #100	; 0x64
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e1f3      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062d6:	4b51      	ldr	r3, [pc, #324]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f0      	bne.n	80062c4 <HAL_RCC_OscConfig+0xe8>
 80062e2:	e000      	b.n	80062e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d063      	beq.n	80063ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062f2:	4b4a      	ldr	r3, [pc, #296]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 030c 	and.w	r3, r3, #12
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00b      	beq.n	8006316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062fe:	4b47      	ldr	r3, [pc, #284]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006306:	2b08      	cmp	r3, #8
 8006308:	d11c      	bne.n	8006344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800630a:	4b44      	ldr	r3, [pc, #272]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d116      	bne.n	8006344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006316:	4b41      	ldr	r3, [pc, #260]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <HAL_RCC_OscConfig+0x152>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d001      	beq.n	800632e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e1c7      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632e:	4b3b      	ldr	r3, [pc, #236]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	4937      	ldr	r1, [pc, #220]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800633e:	4313      	orrs	r3, r2
 8006340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006342:	e03a      	b.n	80063ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d020      	beq.n	800638e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800634c:	4b34      	ldr	r3, [pc, #208]	; (8006420 <HAL_RCC_OscConfig+0x244>)
 800634e:	2201      	movs	r2, #1
 8006350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006352:	f7fc f85b 	bl	800240c <HAL_GetTick>
 8006356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006358:	e008      	b.n	800636c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800635a:	f7fc f857 	bl	800240c <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d901      	bls.n	800636c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e1a8      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800636c:	4b2b      	ldr	r3, [pc, #172]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0f0      	beq.n	800635a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006378:	4b28      	ldr	r3, [pc, #160]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	4925      	ldr	r1, [pc, #148]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006388:	4313      	orrs	r3, r2
 800638a:	600b      	str	r3, [r1, #0]
 800638c:	e015      	b.n	80063ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800638e:	4b24      	ldr	r3, [pc, #144]	; (8006420 <HAL_RCC_OscConfig+0x244>)
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006394:	f7fc f83a 	bl	800240c <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800639c:	f7fc f836 	bl	800240c <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e187      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ae:	4b1b      	ldr	r3, [pc, #108]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1f0      	bne.n	800639c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0308 	and.w	r3, r3, #8
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d036      	beq.n	8006434 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d016      	beq.n	80063fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ce:	4b15      	ldr	r3, [pc, #84]	; (8006424 <HAL_RCC_OscConfig+0x248>)
 80063d0:	2201      	movs	r2, #1
 80063d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d4:	f7fc f81a 	bl	800240c <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063dc:	f7fc f816 	bl	800240c <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e167      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80063f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f0      	beq.n	80063dc <HAL_RCC_OscConfig+0x200>
 80063fa:	e01b      	b.n	8006434 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063fc:	4b09      	ldr	r3, [pc, #36]	; (8006424 <HAL_RCC_OscConfig+0x248>)
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006402:	f7fc f803 	bl	800240c <HAL_GetTick>
 8006406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006408:	e00e      	b.n	8006428 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800640a:	f7fb ffff 	bl	800240c <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d907      	bls.n	8006428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e150      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
 800641c:	40023800 	.word	0x40023800
 8006420:	42470000 	.word	0x42470000
 8006424:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006428:	4b88      	ldr	r3, [pc, #544]	; (800664c <HAL_RCC_OscConfig+0x470>)
 800642a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1ea      	bne.n	800640a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 8097 	beq.w	8006570 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006442:	2300      	movs	r3, #0
 8006444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006446:	4b81      	ldr	r3, [pc, #516]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10f      	bne.n	8006472 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006452:	2300      	movs	r3, #0
 8006454:	60bb      	str	r3, [r7, #8]
 8006456:	4b7d      	ldr	r3, [pc, #500]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	4a7c      	ldr	r2, [pc, #496]	; (800664c <HAL_RCC_OscConfig+0x470>)
 800645c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006460:	6413      	str	r3, [r2, #64]	; 0x40
 8006462:	4b7a      	ldr	r3, [pc, #488]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800646a:	60bb      	str	r3, [r7, #8]
 800646c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800646e:	2301      	movs	r3, #1
 8006470:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006472:	4b77      	ldr	r3, [pc, #476]	; (8006650 <HAL_RCC_OscConfig+0x474>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d118      	bne.n	80064b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800647e:	4b74      	ldr	r3, [pc, #464]	; (8006650 <HAL_RCC_OscConfig+0x474>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a73      	ldr	r2, [pc, #460]	; (8006650 <HAL_RCC_OscConfig+0x474>)
 8006484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800648a:	f7fb ffbf 	bl	800240c <HAL_GetTick>
 800648e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006490:	e008      	b.n	80064a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006492:	f7fb ffbb 	bl	800240c <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d901      	bls.n	80064a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e10c      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064a4:	4b6a      	ldr	r3, [pc, #424]	; (8006650 <HAL_RCC_OscConfig+0x474>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0f0      	beq.n	8006492 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d106      	bne.n	80064c6 <HAL_RCC_OscConfig+0x2ea>
 80064b8:	4b64      	ldr	r3, [pc, #400]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064bc:	4a63      	ldr	r2, [pc, #396]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	6713      	str	r3, [r2, #112]	; 0x70
 80064c4:	e01c      	b.n	8006500 <HAL_RCC_OscConfig+0x324>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	2b05      	cmp	r3, #5
 80064cc:	d10c      	bne.n	80064e8 <HAL_RCC_OscConfig+0x30c>
 80064ce:	4b5f      	ldr	r3, [pc, #380]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d2:	4a5e      	ldr	r2, [pc, #376]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064d4:	f043 0304 	orr.w	r3, r3, #4
 80064d8:	6713      	str	r3, [r2, #112]	; 0x70
 80064da:	4b5c      	ldr	r3, [pc, #368]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064de:	4a5b      	ldr	r2, [pc, #364]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064e0:	f043 0301 	orr.w	r3, r3, #1
 80064e4:	6713      	str	r3, [r2, #112]	; 0x70
 80064e6:	e00b      	b.n	8006500 <HAL_RCC_OscConfig+0x324>
 80064e8:	4b58      	ldr	r3, [pc, #352]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ec:	4a57      	ldr	r2, [pc, #348]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064ee:	f023 0301 	bic.w	r3, r3, #1
 80064f2:	6713      	str	r3, [r2, #112]	; 0x70
 80064f4:	4b55      	ldr	r3, [pc, #340]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f8:	4a54      	ldr	r2, [pc, #336]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064fa:	f023 0304 	bic.w	r3, r3, #4
 80064fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d015      	beq.n	8006534 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006508:	f7fb ff80 	bl	800240c <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800650e:	e00a      	b.n	8006526 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006510:	f7fb ff7c 	bl	800240c <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	f241 3288 	movw	r2, #5000	; 0x1388
 800651e:	4293      	cmp	r3, r2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e0cb      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006526:	4b49      	ldr	r3, [pc, #292]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0ee      	beq.n	8006510 <HAL_RCC_OscConfig+0x334>
 8006532:	e014      	b.n	800655e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006534:	f7fb ff6a 	bl	800240c <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800653a:	e00a      	b.n	8006552 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800653c:	f7fb ff66 	bl	800240c <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	f241 3288 	movw	r2, #5000	; 0x1388
 800654a:	4293      	cmp	r3, r2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e0b5      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006552:	4b3e      	ldr	r3, [pc, #248]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1ee      	bne.n	800653c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800655e:	7dfb      	ldrb	r3, [r7, #23]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d105      	bne.n	8006570 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006564:	4b39      	ldr	r3, [pc, #228]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006568:	4a38      	ldr	r2, [pc, #224]	; (800664c <HAL_RCC_OscConfig+0x470>)
 800656a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800656e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 80a1 	beq.w	80066bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800657a:	4b34      	ldr	r3, [pc, #208]	; (800664c <HAL_RCC_OscConfig+0x470>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 030c 	and.w	r3, r3, #12
 8006582:	2b08      	cmp	r3, #8
 8006584:	d05c      	beq.n	8006640 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d141      	bne.n	8006612 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800658e:	4b31      	ldr	r3, [pc, #196]	; (8006654 <HAL_RCC_OscConfig+0x478>)
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006594:	f7fb ff3a 	bl	800240c <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800659c:	f7fb ff36 	bl	800240c <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e087      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ae:	4b27      	ldr	r3, [pc, #156]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f0      	bne.n	800659c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69da      	ldr	r2, [r3, #28]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	019b      	lsls	r3, r3, #6
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d0:	085b      	lsrs	r3, r3, #1
 80065d2:	3b01      	subs	r3, #1
 80065d4:	041b      	lsls	r3, r3, #16
 80065d6:	431a      	orrs	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	061b      	lsls	r3, r3, #24
 80065de:	491b      	ldr	r1, [pc, #108]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065e4:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <HAL_RCC_OscConfig+0x478>)
 80065e6:	2201      	movs	r2, #1
 80065e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ea:	f7fb ff0f 	bl	800240c <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f0:	e008      	b.n	8006604 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065f2:	f7fb ff0b 	bl	800240c <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e05c      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006604:	4b11      	ldr	r3, [pc, #68]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0f0      	beq.n	80065f2 <HAL_RCC_OscConfig+0x416>
 8006610:	e054      	b.n	80066bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006612:	4b10      	ldr	r3, [pc, #64]	; (8006654 <HAL_RCC_OscConfig+0x478>)
 8006614:	2200      	movs	r2, #0
 8006616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006618:	f7fb fef8 	bl	800240c <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006620:	f7fb fef4 	bl	800240c <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e045      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006632:	4b06      	ldr	r3, [pc, #24]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1f0      	bne.n	8006620 <HAL_RCC_OscConfig+0x444>
 800663e:	e03d      	b.n	80066bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d107      	bne.n	8006658 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e038      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
 800664c:	40023800 	.word	0x40023800
 8006650:	40007000 	.word	0x40007000
 8006654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006658:	4b1b      	ldr	r3, [pc, #108]	; (80066c8 <HAL_RCC_OscConfig+0x4ec>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d028      	beq.n	80066b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006670:	429a      	cmp	r2, r3
 8006672:	d121      	bne.n	80066b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800667e:	429a      	cmp	r2, r3
 8006680:	d11a      	bne.n	80066b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006688:	4013      	ands	r3, r2
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800668e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006690:	4293      	cmp	r3, r2
 8006692:	d111      	bne.n	80066b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669e:	085b      	lsrs	r3, r3, #1
 80066a0:	3b01      	subs	r3, #1
 80066a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d107      	bne.n	80066b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d001      	beq.n	80066bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e000      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	40023800 	.word	0x40023800

080066cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e0cc      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066e0:	4b68      	ldr	r3, [pc, #416]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d90c      	bls.n	8006708 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ee:	4b65      	ldr	r3, [pc, #404]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f6:	4b63      	ldr	r3, [pc, #396]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d001      	beq.n	8006708 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e0b8      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d020      	beq.n	8006756 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006720:	4b59      	ldr	r3, [pc, #356]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	4a58      	ldr	r2, [pc, #352]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006726:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800672a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0308 	and.w	r3, r3, #8
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006738:	4b53      	ldr	r3, [pc, #332]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	4a52      	ldr	r2, [pc, #328]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800673e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006742:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006744:	4b50      	ldr	r3, [pc, #320]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	494d      	ldr	r1, [pc, #308]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006752:	4313      	orrs	r3, r2
 8006754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d044      	beq.n	80067ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d107      	bne.n	800677a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800676a:	4b47      	ldr	r3, [pc, #284]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d119      	bne.n	80067aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e07f      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b02      	cmp	r3, #2
 8006780:	d003      	beq.n	800678a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006786:	2b03      	cmp	r3, #3
 8006788:	d107      	bne.n	800679a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800678a:	4b3f      	ldr	r3, [pc, #252]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d109      	bne.n	80067aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e06f      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800679a:	4b3b      	ldr	r3, [pc, #236]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e067      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067aa:	4b37      	ldr	r3, [pc, #220]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f023 0203 	bic.w	r2, r3, #3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	4934      	ldr	r1, [pc, #208]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067bc:	f7fb fe26 	bl	800240c <HAL_GetTick>
 80067c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067c2:	e00a      	b.n	80067da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067c4:	f7fb fe22 	bl	800240c <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e04f      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067da:	4b2b      	ldr	r3, [pc, #172]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 020c 	and.w	r2, r3, #12
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d1eb      	bne.n	80067c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067ec:	4b25      	ldr	r3, [pc, #148]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d20c      	bcs.n	8006814 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067fa:	4b22      	ldr	r3, [pc, #136]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006802:	4b20      	ldr	r3, [pc, #128]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	429a      	cmp	r2, r3
 800680e:	d001      	beq.n	8006814 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e032      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006820:	4b19      	ldr	r3, [pc, #100]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	4916      	ldr	r1, [pc, #88]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800682e:	4313      	orrs	r3, r2
 8006830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800683e:	4b12      	ldr	r3, [pc, #72]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	490e      	ldr	r1, [pc, #56]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800684e:	4313      	orrs	r3, r2
 8006850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006852:	f000 f821 	bl	8006898 <HAL_RCC_GetSysClockFreq>
 8006856:	4602      	mov	r2, r0
 8006858:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	091b      	lsrs	r3, r3, #4
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	490a      	ldr	r1, [pc, #40]	; (800688c <HAL_RCC_ClockConfig+0x1c0>)
 8006864:	5ccb      	ldrb	r3, [r1, r3]
 8006866:	fa22 f303 	lsr.w	r3, r2, r3
 800686a:	4a09      	ldr	r2, [pc, #36]	; (8006890 <HAL_RCC_ClockConfig+0x1c4>)
 800686c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800686e:	4b09      	ldr	r3, [pc, #36]	; (8006894 <HAL_RCC_ClockConfig+0x1c8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4618      	mov	r0, r3
 8006874:	f7fb fd86 	bl	8002384 <HAL_InitTick>

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	40023c00 	.word	0x40023c00
 8006888:	40023800 	.word	0x40023800
 800688c:	0800f92c 	.word	0x0800f92c
 8006890:	20000024 	.word	0x20000024
 8006894:	20000028 	.word	0x20000028

08006898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800689c:	b090      	sub	sp, #64	; 0x40
 800689e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	637b      	str	r3, [r7, #52]	; 0x34
 80068a4:	2300      	movs	r3, #0
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a8:	2300      	movs	r3, #0
 80068aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068b0:	4b59      	ldr	r3, [pc, #356]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x180>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 030c 	and.w	r3, r3, #12
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d00d      	beq.n	80068d8 <HAL_RCC_GetSysClockFreq+0x40>
 80068bc:	2b08      	cmp	r3, #8
 80068be:	f200 80a1 	bhi.w	8006a04 <HAL_RCC_GetSysClockFreq+0x16c>
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <HAL_RCC_GetSysClockFreq+0x34>
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d003      	beq.n	80068d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80068ca:	e09b      	b.n	8006a04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068cc:	4b53      	ldr	r3, [pc, #332]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x184>)
 80068ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80068d0:	e09b      	b.n	8006a0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068d2:	4b53      	ldr	r3, [pc, #332]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x188>)
 80068d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80068d6:	e098      	b.n	8006a0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068d8:	4b4f      	ldr	r3, [pc, #316]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x180>)
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068e2:	4b4d      	ldr	r3, [pc, #308]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x180>)
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d028      	beq.n	8006940 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068ee:	4b4a      	ldr	r3, [pc, #296]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x180>)
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	099b      	lsrs	r3, r3, #6
 80068f4:	2200      	movs	r2, #0
 80068f6:	623b      	str	r3, [r7, #32]
 80068f8:	627a      	str	r2, [r7, #36]	; 0x24
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006900:	2100      	movs	r1, #0
 8006902:	4b47      	ldr	r3, [pc, #284]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x188>)
 8006904:	fb03 f201 	mul.w	r2, r3, r1
 8006908:	2300      	movs	r3, #0
 800690a:	fb00 f303 	mul.w	r3, r0, r3
 800690e:	4413      	add	r3, r2
 8006910:	4a43      	ldr	r2, [pc, #268]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x188>)
 8006912:	fba0 1202 	umull	r1, r2, r0, r2
 8006916:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006918:	460a      	mov	r2, r1
 800691a:	62ba      	str	r2, [r7, #40]	; 0x28
 800691c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800691e:	4413      	add	r3, r2
 8006920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006924:	2200      	movs	r2, #0
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	61fa      	str	r2, [r7, #28]
 800692a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800692e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006932:	f7fa f941 	bl	8000bb8 <__aeabi_uldivmod>
 8006936:	4602      	mov	r2, r0
 8006938:	460b      	mov	r3, r1
 800693a:	4613      	mov	r3, r2
 800693c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800693e:	e053      	b.n	80069e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006940:	4b35      	ldr	r3, [pc, #212]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x180>)
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	099b      	lsrs	r3, r3, #6
 8006946:	2200      	movs	r2, #0
 8006948:	613b      	str	r3, [r7, #16]
 800694a:	617a      	str	r2, [r7, #20]
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006952:	f04f 0b00 	mov.w	fp, #0
 8006956:	4652      	mov	r2, sl
 8006958:	465b      	mov	r3, fp
 800695a:	f04f 0000 	mov.w	r0, #0
 800695e:	f04f 0100 	mov.w	r1, #0
 8006962:	0159      	lsls	r1, r3, #5
 8006964:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006968:	0150      	lsls	r0, r2, #5
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	ebb2 080a 	subs.w	r8, r2, sl
 8006972:	eb63 090b 	sbc.w	r9, r3, fp
 8006976:	f04f 0200 	mov.w	r2, #0
 800697a:	f04f 0300 	mov.w	r3, #0
 800697e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006982:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006986:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800698a:	ebb2 0408 	subs.w	r4, r2, r8
 800698e:	eb63 0509 	sbc.w	r5, r3, r9
 8006992:	f04f 0200 	mov.w	r2, #0
 8006996:	f04f 0300 	mov.w	r3, #0
 800699a:	00eb      	lsls	r3, r5, #3
 800699c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069a0:	00e2      	lsls	r2, r4, #3
 80069a2:	4614      	mov	r4, r2
 80069a4:	461d      	mov	r5, r3
 80069a6:	eb14 030a 	adds.w	r3, r4, sl
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	eb45 030b 	adc.w	r3, r5, fp
 80069b0:	607b      	str	r3, [r7, #4]
 80069b2:	f04f 0200 	mov.w	r2, #0
 80069b6:	f04f 0300 	mov.w	r3, #0
 80069ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069be:	4629      	mov	r1, r5
 80069c0:	028b      	lsls	r3, r1, #10
 80069c2:	4621      	mov	r1, r4
 80069c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069c8:	4621      	mov	r1, r4
 80069ca:	028a      	lsls	r2, r1, #10
 80069cc:	4610      	mov	r0, r2
 80069ce:	4619      	mov	r1, r3
 80069d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d2:	2200      	movs	r2, #0
 80069d4:	60bb      	str	r3, [r7, #8]
 80069d6:	60fa      	str	r2, [r7, #12]
 80069d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069dc:	f7fa f8ec 	bl	8000bb8 <__aeabi_uldivmod>
 80069e0:	4602      	mov	r2, r0
 80069e2:	460b      	mov	r3, r1
 80069e4:	4613      	mov	r3, r2
 80069e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069e8:	4b0b      	ldr	r3, [pc, #44]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x180>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	0c1b      	lsrs	r3, r3, #16
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	3301      	adds	r3, #1
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80069f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a02:	e002      	b.n	8006a0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a04:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x184>)
 8006a06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3740      	adds	r7, #64	; 0x40
 8006a10:	46bd      	mov	sp, r7
 8006a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a16:	bf00      	nop
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	00f42400 	.word	0x00f42400
 8006a20:	017d7840 	.word	0x017d7840

08006a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a28:	4b03      	ldr	r3, [pc, #12]	; (8006a38 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	20000024 	.word	0x20000024

08006a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a40:	f7ff fff0 	bl	8006a24 <HAL_RCC_GetHCLKFreq>
 8006a44:	4602      	mov	r2, r0
 8006a46:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	0a9b      	lsrs	r3, r3, #10
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	4903      	ldr	r1, [pc, #12]	; (8006a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a52:	5ccb      	ldrb	r3, [r1, r3]
 8006a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	40023800 	.word	0x40023800
 8006a60:	0800f93c 	.word	0x0800f93c

08006a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a68:	f7ff ffdc 	bl	8006a24 <HAL_RCC_GetHCLKFreq>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	0b5b      	lsrs	r3, r3, #13
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	4903      	ldr	r1, [pc, #12]	; (8006a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a7a:	5ccb      	ldrb	r3, [r1, r3]
 8006a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	40023800 	.word	0x40023800
 8006a88:	0800f93c 	.word	0x0800f93c

08006a8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e07b      	b.n	8006b96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d108      	bne.n	8006ab8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aae:	d009      	beq.n	8006ac4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	61da      	str	r2, [r3, #28]
 8006ab6:	e005      	b.n	8006ac4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d106      	bne.n	8006ae4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fb f890 	bl	8001c04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006afa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b16:	431a      	orrs	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	431a      	orrs	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b34:	431a      	orrs	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b48:	ea42 0103 	orr.w	r1, r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	0c1b      	lsrs	r3, r3, #16
 8006b62:	f003 0104 	and.w	r1, r3, #4
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6a:	f003 0210 	and.w	r2, r3, #16
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	69da      	ldr	r2, [r3, #28]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e041      	b.n	8006c34 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d106      	bne.n	8006bca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7fb f885 	bl	8001cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3304      	adds	r3, #4
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4610      	mov	r0, r2
 8006bde:	f000 fd55 	bl	800768c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d001      	beq.n	8006c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e044      	b.n	8006cde <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 0201 	orr.w	r2, r2, #1
 8006c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a1e      	ldr	r2, [pc, #120]	; (8006cec <HAL_TIM_Base_Start_IT+0xb0>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d018      	beq.n	8006ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c7e:	d013      	beq.n	8006ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a1a      	ldr	r2, [pc, #104]	; (8006cf0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d00e      	beq.n	8006ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a19      	ldr	r2, [pc, #100]	; (8006cf4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d009      	beq.n	8006ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a17      	ldr	r2, [pc, #92]	; (8006cf8 <HAL_TIM_Base_Start_IT+0xbc>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d004      	beq.n	8006ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a16      	ldr	r2, [pc, #88]	; (8006cfc <HAL_TIM_Base_Start_IT+0xc0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d111      	bne.n	8006ccc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f003 0307 	and.w	r3, r3, #7
 8006cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2b06      	cmp	r3, #6
 8006cb8:	d010      	beq.n	8006cdc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f042 0201 	orr.w	r2, r2, #1
 8006cc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cca:	e007      	b.n	8006cdc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f042 0201 	orr.w	r2, r2, #1
 8006cda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40010000 	.word	0x40010000
 8006cf0:	40000400 	.word	0x40000400
 8006cf4:	40000800 	.word	0x40000800
 8006cf8:	40000c00 	.word	0x40000c00
 8006cfc:	40014000 	.word	0x40014000

08006d00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68da      	ldr	r2, [r3, #12]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0201 	bic.w	r2, r2, #1
 8006d16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6a1a      	ldr	r2, [r3, #32]
 8006d1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d22:	4013      	ands	r3, r2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10f      	bne.n	8006d48 <HAL_TIM_Base_Stop_IT+0x48>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6a1a      	ldr	r2, [r3, #32]
 8006d2e:	f240 4344 	movw	r3, #1092	; 0x444
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d107      	bne.n	8006d48 <HAL_TIM_Base_Stop_IT+0x48>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0201 	bic.w	r2, r2, #1
 8006d46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e041      	b.n	8006df4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d106      	bne.n	8006d8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f839 	bl	8006dfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	f000 fc75 	bl	800768c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d109      	bne.n	8006e34 <HAL_TIM_PWM_Start+0x24>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	bf14      	ite	ne
 8006e2c:	2301      	movne	r3, #1
 8006e2e:	2300      	moveq	r3, #0
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	e022      	b.n	8006e7a <HAL_TIM_PWM_Start+0x6a>
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d109      	bne.n	8006e4e <HAL_TIM_PWM_Start+0x3e>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	bf14      	ite	ne
 8006e46:	2301      	movne	r3, #1
 8006e48:	2300      	moveq	r3, #0
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	e015      	b.n	8006e7a <HAL_TIM_PWM_Start+0x6a>
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b08      	cmp	r3, #8
 8006e52:	d109      	bne.n	8006e68 <HAL_TIM_PWM_Start+0x58>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	bf14      	ite	ne
 8006e60:	2301      	movne	r3, #1
 8006e62:	2300      	moveq	r3, #0
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	e008      	b.n	8006e7a <HAL_TIM_PWM_Start+0x6a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	bf14      	ite	ne
 8006e74:	2301      	movne	r3, #1
 8006e76:	2300      	moveq	r3, #0
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e068      	b.n	8006f54 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d104      	bne.n	8006e92 <HAL_TIM_PWM_Start+0x82>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e90:	e013      	b.n	8006eba <HAL_TIM_PWM_Start+0xaa>
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d104      	bne.n	8006ea2 <HAL_TIM_PWM_Start+0x92>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ea0:	e00b      	b.n	8006eba <HAL_TIM_PWM_Start+0xaa>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b08      	cmp	r3, #8
 8006ea6:	d104      	bne.n	8006eb2 <HAL_TIM_PWM_Start+0xa2>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006eb0:	e003      	b.n	8006eba <HAL_TIM_PWM_Start+0xaa>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 f81d 	bl	8007f02 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a23      	ldr	r2, [pc, #140]	; (8006f5c <HAL_TIM_PWM_Start+0x14c>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d107      	bne.n	8006ee2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ee0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a1d      	ldr	r2, [pc, #116]	; (8006f5c <HAL_TIM_PWM_Start+0x14c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d018      	beq.n	8006f1e <HAL_TIM_PWM_Start+0x10e>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef4:	d013      	beq.n	8006f1e <HAL_TIM_PWM_Start+0x10e>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a19      	ldr	r2, [pc, #100]	; (8006f60 <HAL_TIM_PWM_Start+0x150>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00e      	beq.n	8006f1e <HAL_TIM_PWM_Start+0x10e>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a17      	ldr	r2, [pc, #92]	; (8006f64 <HAL_TIM_PWM_Start+0x154>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d009      	beq.n	8006f1e <HAL_TIM_PWM_Start+0x10e>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a16      	ldr	r2, [pc, #88]	; (8006f68 <HAL_TIM_PWM_Start+0x158>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d004      	beq.n	8006f1e <HAL_TIM_PWM_Start+0x10e>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a14      	ldr	r2, [pc, #80]	; (8006f6c <HAL_TIM_PWM_Start+0x15c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d111      	bne.n	8006f42 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 0307 	and.w	r3, r3, #7
 8006f28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b06      	cmp	r3, #6
 8006f2e:	d010      	beq.n	8006f52 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0201 	orr.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f40:	e007      	b.n	8006f52 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f042 0201 	orr.w	r2, r2, #1
 8006f50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40010000 	.word	0x40010000
 8006f60:	40000400 	.word	0x40000400
 8006f64:	40000800 	.word	0x40000800
 8006f68:	40000c00 	.word	0x40000c00
 8006f6c:	40014000 	.word	0x40014000

08006f70 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 ffbd 	bl	8007f02 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a29      	ldr	r2, [pc, #164]	; (8007034 <HAL_TIM_PWM_Stop+0xc4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d117      	bne.n	8006fc2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6a1a      	ldr	r2, [r3, #32]
 8006f98:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10f      	bne.n	8006fc2 <HAL_TIM_PWM_Stop+0x52>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6a1a      	ldr	r2, [r3, #32]
 8006fa8:	f240 4344 	movw	r3, #1092	; 0x444
 8006fac:	4013      	ands	r3, r2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d107      	bne.n	8006fc2 <HAL_TIM_PWM_Stop+0x52>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6a1a      	ldr	r2, [r3, #32]
 8006fc8:	f241 1311 	movw	r3, #4369	; 0x1111
 8006fcc:	4013      	ands	r3, r2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10f      	bne.n	8006ff2 <HAL_TIM_PWM_Stop+0x82>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6a1a      	ldr	r2, [r3, #32]
 8006fd8:	f240 4344 	movw	r3, #1092	; 0x444
 8006fdc:	4013      	ands	r3, r2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d107      	bne.n	8006ff2 <HAL_TIM_PWM_Stop+0x82>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0201 	bic.w	r2, r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d104      	bne.n	8007002 <HAL_TIM_PWM_Stop+0x92>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007000:	e013      	b.n	800702a <HAL_TIM_PWM_Stop+0xba>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b04      	cmp	r3, #4
 8007006:	d104      	bne.n	8007012 <HAL_TIM_PWM_Stop+0xa2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007010:	e00b      	b.n	800702a <HAL_TIM_PWM_Stop+0xba>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b08      	cmp	r3, #8
 8007016:	d104      	bne.n	8007022 <HAL_TIM_PWM_Stop+0xb2>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007020:	e003      	b.n	800702a <HAL_TIM_PWM_Stop+0xba>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40010000 	.word	0x40010000

08007038 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e041      	b.n	80070ce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d106      	bne.n	8007064 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7fa feb6 	bl	8001dd0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	3304      	adds	r3, #4
 8007074:	4619      	mov	r1, r3
 8007076:	4610      	mov	r0, r2
 8007078:	f000 fb08 	bl	800768c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d122      	bne.n	8007132 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d11b      	bne.n	8007132 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f06f 0202 	mvn.w	r2, #2
 8007102:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	f003 0303 	and.w	r3, r3, #3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d003      	beq.n	8007120 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fa99 	bl	8007650 <HAL_TIM_IC_CaptureCallback>
 800711e:	e005      	b.n	800712c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fa8b 	bl	800763c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fa9c 	bl	8007664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b04      	cmp	r3, #4
 800713e:	d122      	bne.n	8007186 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f003 0304 	and.w	r3, r3, #4
 800714a:	2b04      	cmp	r3, #4
 800714c:	d11b      	bne.n	8007186 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f06f 0204 	mvn.w	r2, #4
 8007156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fa6f 	bl	8007650 <HAL_TIM_IC_CaptureCallback>
 8007172:	e005      	b.n	8007180 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fa61 	bl	800763c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fa72 	bl	8007664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	2b08      	cmp	r3, #8
 8007192:	d122      	bne.n	80071da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	f003 0308 	and.w	r3, r3, #8
 800719e:	2b08      	cmp	r3, #8
 80071a0:	d11b      	bne.n	80071da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f06f 0208 	mvn.w	r2, #8
 80071aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2204      	movs	r2, #4
 80071b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	f003 0303 	and.w	r3, r3, #3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fa45 	bl	8007650 <HAL_TIM_IC_CaptureCallback>
 80071c6:	e005      	b.n	80071d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fa37 	bl	800763c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fa48 	bl	8007664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	f003 0310 	and.w	r3, r3, #16
 80071e4:	2b10      	cmp	r3, #16
 80071e6:	d122      	bne.n	800722e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	f003 0310 	and.w	r3, r3, #16
 80071f2:	2b10      	cmp	r3, #16
 80071f4:	d11b      	bne.n	800722e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f06f 0210 	mvn.w	r2, #16
 80071fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2208      	movs	r2, #8
 8007204:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fa1b 	bl	8007650 <HAL_TIM_IC_CaptureCallback>
 800721a:	e005      	b.n	8007228 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fa0d 	bl	800763c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fa1e 	bl	8007664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b01      	cmp	r3, #1
 800723a:	d10e      	bne.n	800725a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b01      	cmp	r3, #1
 8007248:	d107      	bne.n	800725a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f06f 0201 	mvn.w	r2, #1
 8007252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f9e7 	bl	8007628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007264:	2b80      	cmp	r3, #128	; 0x80
 8007266:	d10e      	bne.n	8007286 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007272:	2b80      	cmp	r3, #128	; 0x80
 8007274:	d107      	bne.n	8007286 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800727e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 f88f 	bl	80083a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007290:	2b40      	cmp	r3, #64	; 0x40
 8007292:	d10e      	bne.n	80072b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729e:	2b40      	cmp	r3, #64	; 0x40
 80072a0:	d107      	bne.n	80072b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f9e3 	bl	8007678 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f003 0320 	and.w	r3, r3, #32
 80072bc:	2b20      	cmp	r3, #32
 80072be:	d10e      	bne.n	80072de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	f003 0320 	and.w	r3, r3, #32
 80072ca:	2b20      	cmp	r3, #32
 80072cc:	d107      	bne.n	80072de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f06f 0220 	mvn.w	r2, #32
 80072d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f001 f859 	bl	8008390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b086      	sub	sp, #24
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d101      	bne.n	8007304 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007300:	2302      	movs	r3, #2
 8007302:	e088      	b.n	8007416 <HAL_TIM_IC_ConfigChannel+0x130>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d11b      	bne.n	800734a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6818      	ldr	r0, [r3, #0]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	6819      	ldr	r1, [r3, #0]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f000 fc51 	bl	8007bc8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	699a      	ldr	r2, [r3, #24]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 020c 	bic.w	r2, r2, #12
 8007334:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6999      	ldr	r1, [r3, #24]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	430a      	orrs	r2, r1
 8007346:	619a      	str	r2, [r3, #24]
 8007348:	e060      	b.n	800740c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b04      	cmp	r3, #4
 800734e:	d11c      	bne.n	800738a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6818      	ldr	r0, [r3, #0]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	6819      	ldr	r1, [r3, #0]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f000 fcc9 	bl	8007cf6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699a      	ldr	r2, [r3, #24]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007372:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6999      	ldr	r1, [r3, #24]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	021a      	lsls	r2, r3, #8
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	619a      	str	r2, [r3, #24]
 8007388:	e040      	b.n	800740c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b08      	cmp	r3, #8
 800738e:	d11b      	bne.n	80073c8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6818      	ldr	r0, [r3, #0]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	6819      	ldr	r1, [r3, #0]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f000 fd16 	bl	8007dd0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	69da      	ldr	r2, [r3, #28]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 020c 	bic.w	r2, r2, #12
 80073b2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	69d9      	ldr	r1, [r3, #28]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	61da      	str	r2, [r3, #28]
 80073c6:	e021      	b.n	800740c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b0c      	cmp	r3, #12
 80073cc:	d11c      	bne.n	8007408 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6818      	ldr	r0, [r3, #0]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	6819      	ldr	r1, [r3, #0]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	f000 fd33 	bl	8007e48 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69da      	ldr	r2, [r3, #28]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80073f0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69d9      	ldr	r1, [r3, #28]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	021a      	lsls	r2, r3, #8
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	61da      	str	r2, [r3, #28]
 8007406:	e001      	b.n	800740c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007414:	7dfb      	ldrb	r3, [r7, #23]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007436:	2b01      	cmp	r3, #1
 8007438:	d101      	bne.n	800743e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800743a:	2302      	movs	r3, #2
 800743c:	e0ae      	b.n	800759c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b0c      	cmp	r3, #12
 800744a:	f200 809f 	bhi.w	800758c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800744e:	a201      	add	r2, pc, #4	; (adr r2, 8007454 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007454:	08007489 	.word	0x08007489
 8007458:	0800758d 	.word	0x0800758d
 800745c:	0800758d 	.word	0x0800758d
 8007460:	0800758d 	.word	0x0800758d
 8007464:	080074c9 	.word	0x080074c9
 8007468:	0800758d 	.word	0x0800758d
 800746c:	0800758d 	.word	0x0800758d
 8007470:	0800758d 	.word	0x0800758d
 8007474:	0800750b 	.word	0x0800750b
 8007478:	0800758d 	.word	0x0800758d
 800747c:	0800758d 	.word	0x0800758d
 8007480:	0800758d 	.word	0x0800758d
 8007484:	0800754b 	.word	0x0800754b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68b9      	ldr	r1, [r7, #8]
 800748e:	4618      	mov	r0, r3
 8007490:	f000 f97c 	bl	800778c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	699a      	ldr	r2, [r3, #24]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f042 0208 	orr.w	r2, r2, #8
 80074a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	699a      	ldr	r2, [r3, #24]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0204 	bic.w	r2, r2, #4
 80074b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6999      	ldr	r1, [r3, #24]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	691a      	ldr	r2, [r3, #16]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	619a      	str	r2, [r3, #24]
      break;
 80074c6:	e064      	b.n	8007592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68b9      	ldr	r1, [r7, #8]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 f9c2 	bl	8007858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	699a      	ldr	r2, [r3, #24]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699a      	ldr	r2, [r3, #24]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6999      	ldr	r1, [r3, #24]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	021a      	lsls	r2, r3, #8
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	619a      	str	r2, [r3, #24]
      break;
 8007508:	e043      	b.n	8007592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68b9      	ldr	r1, [r7, #8]
 8007510:	4618      	mov	r0, r3
 8007512:	f000 fa0d 	bl	8007930 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	69da      	ldr	r2, [r3, #28]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f042 0208 	orr.w	r2, r2, #8
 8007524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69da      	ldr	r2, [r3, #28]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0204 	bic.w	r2, r2, #4
 8007534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69d9      	ldr	r1, [r3, #28]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	691a      	ldr	r2, [r3, #16]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	61da      	str	r2, [r3, #28]
      break;
 8007548:	e023      	b.n	8007592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fa57 	bl	8007a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	69da      	ldr	r2, [r3, #28]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69da      	ldr	r2, [r3, #28]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69d9      	ldr	r1, [r3, #28]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	021a      	lsls	r2, r3, #8
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	61da      	str	r2, [r3, #28]
      break;
 800758a:	e002      	b.n	8007592 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	75fb      	strb	r3, [r7, #23]
      break;
 8007590:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800759a:	7dfb      	ldrb	r3, [r7, #23]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3718      	adds	r7, #24
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d101      	bne.n	80075bc <HAL_TIM_SlaveConfigSynchro+0x18>
 80075b8:	2302      	movs	r3, #2
 80075ba:	e031      	b.n	8007620 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fa68 	bl	8007aa4 <TIM_SlaveTimer_SetConfig>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d009      	beq.n	80075ee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e018      	b.n	8007620 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075fc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68da      	ldr	r2, [r3, #12]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800760c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a34      	ldr	r2, [pc, #208]	; (8007770 <TIM_Base_SetConfig+0xe4>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d00f      	beq.n	80076c4 <TIM_Base_SetConfig+0x38>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076aa:	d00b      	beq.n	80076c4 <TIM_Base_SetConfig+0x38>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a31      	ldr	r2, [pc, #196]	; (8007774 <TIM_Base_SetConfig+0xe8>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d007      	beq.n	80076c4 <TIM_Base_SetConfig+0x38>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a30      	ldr	r2, [pc, #192]	; (8007778 <TIM_Base_SetConfig+0xec>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d003      	beq.n	80076c4 <TIM_Base_SetConfig+0x38>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a2f      	ldr	r2, [pc, #188]	; (800777c <TIM_Base_SetConfig+0xf0>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d108      	bne.n	80076d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a25      	ldr	r2, [pc, #148]	; (8007770 <TIM_Base_SetConfig+0xe4>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d01b      	beq.n	8007716 <TIM_Base_SetConfig+0x8a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e4:	d017      	beq.n	8007716 <TIM_Base_SetConfig+0x8a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a22      	ldr	r2, [pc, #136]	; (8007774 <TIM_Base_SetConfig+0xe8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d013      	beq.n	8007716 <TIM_Base_SetConfig+0x8a>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a21      	ldr	r2, [pc, #132]	; (8007778 <TIM_Base_SetConfig+0xec>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d00f      	beq.n	8007716 <TIM_Base_SetConfig+0x8a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a20      	ldr	r2, [pc, #128]	; (800777c <TIM_Base_SetConfig+0xf0>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d00b      	beq.n	8007716 <TIM_Base_SetConfig+0x8a>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a1f      	ldr	r2, [pc, #124]	; (8007780 <TIM_Base_SetConfig+0xf4>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d007      	beq.n	8007716 <TIM_Base_SetConfig+0x8a>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a1e      	ldr	r2, [pc, #120]	; (8007784 <TIM_Base_SetConfig+0xf8>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d003      	beq.n	8007716 <TIM_Base_SetConfig+0x8a>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a1d      	ldr	r2, [pc, #116]	; (8007788 <TIM_Base_SetConfig+0xfc>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d108      	bne.n	8007728 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800771c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	4313      	orrs	r3, r2
 8007726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	4313      	orrs	r3, r2
 8007734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a08      	ldr	r2, [pc, #32]	; (8007770 <TIM_Base_SetConfig+0xe4>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d103      	bne.n	800775c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	691a      	ldr	r2, [r3, #16]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	615a      	str	r2, [r3, #20]
}
 8007762:	bf00      	nop
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	40010000 	.word	0x40010000
 8007774:	40000400 	.word	0x40000400
 8007778:	40000800 	.word	0x40000800
 800777c:	40000c00 	.word	0x40000c00
 8007780:	40014000 	.word	0x40014000
 8007784:	40014400 	.word	0x40014400
 8007788:	40014800 	.word	0x40014800

0800778c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	f023 0201 	bic.w	r2, r3, #1
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f023 0303 	bic.w	r3, r3, #3
 80077c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f023 0302 	bic.w	r3, r3, #2
 80077d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a1c      	ldr	r2, [pc, #112]	; (8007854 <TIM_OC1_SetConfig+0xc8>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d10c      	bne.n	8007802 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f023 0308 	bic.w	r3, r3, #8
 80077ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f023 0304 	bic.w	r3, r3, #4
 8007800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a13      	ldr	r2, [pc, #76]	; (8007854 <TIM_OC1_SetConfig+0xc8>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d111      	bne.n	800782e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	4313      	orrs	r3, r2
 8007822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	4313      	orrs	r3, r2
 800782c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	621a      	str	r2, [r3, #32]
}
 8007848:	bf00      	nop
 800784a:	371c      	adds	r7, #28
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	40010000 	.word	0x40010000

08007858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007858:	b480      	push	{r7}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	f023 0210 	bic.w	r2, r3, #16
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800788e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	021b      	lsls	r3, r3, #8
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4313      	orrs	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	f023 0320 	bic.w	r3, r3, #32
 80078a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	011b      	lsls	r3, r3, #4
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a1e      	ldr	r2, [pc, #120]	; (800792c <TIM_OC2_SetConfig+0xd4>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d10d      	bne.n	80078d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	011b      	lsls	r3, r3, #4
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a15      	ldr	r2, [pc, #84]	; (800792c <TIM_OC2_SetConfig+0xd4>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d113      	bne.n	8007904 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	4313      	orrs	r3, r2
 8007902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	621a      	str	r2, [r3, #32]
}
 800791e:	bf00      	nop
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40010000 	.word	0x40010000

08007930 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800795e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f023 0303 	bic.w	r3, r3, #3
 8007966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	021b      	lsls	r3, r3, #8
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	4313      	orrs	r3, r2
 8007984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a1d      	ldr	r2, [pc, #116]	; (8007a00 <TIM_OC3_SetConfig+0xd0>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d10d      	bne.n	80079aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	021b      	lsls	r3, r3, #8
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	4313      	orrs	r3, r2
 80079a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a14      	ldr	r2, [pc, #80]	; (8007a00 <TIM_OC3_SetConfig+0xd0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d113      	bne.n	80079da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	011b      	lsls	r3, r3, #4
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	621a      	str	r2, [r3, #32]
}
 80079f4:	bf00      	nop
 80079f6:	371c      	adds	r7, #28
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	40010000 	.word	0x40010000

08007a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	021b      	lsls	r3, r3, #8
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	031b      	lsls	r3, r3, #12
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a10      	ldr	r2, [pc, #64]	; (8007aa0 <TIM_OC4_SetConfig+0x9c>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d109      	bne.n	8007a78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	019b      	lsls	r3, r3, #6
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	621a      	str	r2, [r3, #32]
}
 8007a92:	bf00      	nop
 8007a94:	371c      	adds	r7, #28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	40010000 	.word	0x40010000

08007aa4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f023 0307 	bic.w	r3, r3, #7
 8007ad2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	2b70      	cmp	r3, #112	; 0x70
 8007aec:	d01a      	beq.n	8007b24 <TIM_SlaveTimer_SetConfig+0x80>
 8007aee:	2b70      	cmp	r3, #112	; 0x70
 8007af0:	d860      	bhi.n	8007bb4 <TIM_SlaveTimer_SetConfig+0x110>
 8007af2:	2b60      	cmp	r3, #96	; 0x60
 8007af4:	d054      	beq.n	8007ba0 <TIM_SlaveTimer_SetConfig+0xfc>
 8007af6:	2b60      	cmp	r3, #96	; 0x60
 8007af8:	d85c      	bhi.n	8007bb4 <TIM_SlaveTimer_SetConfig+0x110>
 8007afa:	2b50      	cmp	r3, #80	; 0x50
 8007afc:	d046      	beq.n	8007b8c <TIM_SlaveTimer_SetConfig+0xe8>
 8007afe:	2b50      	cmp	r3, #80	; 0x50
 8007b00:	d858      	bhi.n	8007bb4 <TIM_SlaveTimer_SetConfig+0x110>
 8007b02:	2b40      	cmp	r3, #64	; 0x40
 8007b04:	d019      	beq.n	8007b3a <TIM_SlaveTimer_SetConfig+0x96>
 8007b06:	2b40      	cmp	r3, #64	; 0x40
 8007b08:	d854      	bhi.n	8007bb4 <TIM_SlaveTimer_SetConfig+0x110>
 8007b0a:	2b30      	cmp	r3, #48	; 0x30
 8007b0c:	d055      	beq.n	8007bba <TIM_SlaveTimer_SetConfig+0x116>
 8007b0e:	2b30      	cmp	r3, #48	; 0x30
 8007b10:	d850      	bhi.n	8007bb4 <TIM_SlaveTimer_SetConfig+0x110>
 8007b12:	2b20      	cmp	r3, #32
 8007b14:	d051      	beq.n	8007bba <TIM_SlaveTimer_SetConfig+0x116>
 8007b16:	2b20      	cmp	r3, #32
 8007b18:	d84c      	bhi.n	8007bb4 <TIM_SlaveTimer_SetConfig+0x110>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d04d      	beq.n	8007bba <TIM_SlaveTimer_SetConfig+0x116>
 8007b1e:	2b10      	cmp	r3, #16
 8007b20:	d04b      	beq.n	8007bba <TIM_SlaveTimer_SetConfig+0x116>
 8007b22:	e047      	b.n	8007bb4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	68d9      	ldr	r1, [r3, #12]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	f000 f9c5 	bl	8007ec2 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007b38:	e040      	b.n	8007bbc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b05      	cmp	r3, #5
 8007b40:	d101      	bne.n	8007b46 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e03b      	b.n	8007bbe <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6a1a      	ldr	r2, [r3, #32]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 0201 	bic.w	r2, r2, #1
 8007b5c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b6c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	011b      	lsls	r3, r3, #4
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	621a      	str	r2, [r3, #32]
      break;
 8007b8a:	e017      	b.n	8007bbc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6818      	ldr	r0, [r3, #0]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	6899      	ldr	r1, [r3, #8]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	f000 f87d 	bl	8007c98 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007b9e:	e00d      	b.n	8007bbc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6818      	ldr	r0, [r3, #0]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	6899      	ldr	r1, [r3, #8]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	461a      	mov	r2, r3
 8007bae:	f000 f8df 	bl	8007d70 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007bb2:	e003      	b.n	8007bbc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb8:	e000      	b.n	8007bbc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007bba:	bf00      	nop
  }

  return status;
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3718      	adds	r7, #24
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
	...

08007bc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
 8007bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	f023 0201 	bic.w	r2, r3, #1
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4a24      	ldr	r2, [pc, #144]	; (8007c84 <TIM_TI1_SetConfig+0xbc>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d013      	beq.n	8007c1e <TIM_TI1_SetConfig+0x56>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bfc:	d00f      	beq.n	8007c1e <TIM_TI1_SetConfig+0x56>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4a21      	ldr	r2, [pc, #132]	; (8007c88 <TIM_TI1_SetConfig+0xc0>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d00b      	beq.n	8007c1e <TIM_TI1_SetConfig+0x56>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4a20      	ldr	r2, [pc, #128]	; (8007c8c <TIM_TI1_SetConfig+0xc4>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d007      	beq.n	8007c1e <TIM_TI1_SetConfig+0x56>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4a1f      	ldr	r2, [pc, #124]	; (8007c90 <TIM_TI1_SetConfig+0xc8>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d003      	beq.n	8007c1e <TIM_TI1_SetConfig+0x56>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4a1e      	ldr	r2, [pc, #120]	; (8007c94 <TIM_TI1_SetConfig+0xcc>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d101      	bne.n	8007c22 <TIM_TI1_SetConfig+0x5a>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e000      	b.n	8007c24 <TIM_TI1_SetConfig+0x5c>
 8007c22:	2300      	movs	r3, #0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d008      	beq.n	8007c3a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	f023 0303 	bic.w	r3, r3, #3
 8007c2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	e003      	b.n	8007c42 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f043 0301 	orr.w	r3, r3, #1
 8007c40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	011b      	lsls	r3, r3, #4
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f023 030a 	bic.w	r3, r3, #10
 8007c5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	f003 030a 	and.w	r3, r3, #10
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	621a      	str	r2, [r3, #32]
}
 8007c76:	bf00      	nop
 8007c78:	371c      	adds	r7, #28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	40010000 	.word	0x40010000
 8007c88:	40000400 	.word	0x40000400
 8007c8c:	40000800 	.word	0x40000800
 8007c90:	40000c00 	.word	0x40000c00
 8007c94:	40014000 	.word	0x40014000

08007c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
 8007ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	f023 0201 	bic.w	r2, r3, #1
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f023 030a 	bic.w	r3, r3, #10
 8007cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	621a      	str	r2, [r3, #32]
}
 8007cea:	bf00      	nop
 8007cec:	371c      	adds	r7, #28
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b087      	sub	sp, #28
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	607a      	str	r2, [r7, #4]
 8007d02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	f023 0210 	bic.w	r2, r3, #16
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	021b      	lsls	r3, r3, #8
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	031b      	lsls	r3, r3, #12
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d48:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	011b      	lsls	r3, r3, #4
 8007d4e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	621a      	str	r2, [r3, #32]
}
 8007d64:	bf00      	nop
 8007d66:	371c      	adds	r7, #28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	f023 0210 	bic.w	r2, r3, #16
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	031b      	lsls	r3, r3, #12
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	011b      	lsls	r3, r3, #4
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	621a      	str	r2, [r3, #32]
}
 8007dc4:	bf00      	nop
 8007dc6:	371c      	adds	r7, #28
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	f023 0303 	bic.w	r3, r3, #3
 8007dfc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	011b      	lsls	r3, r3, #4
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007e20:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	021b      	lsls	r3, r3, #8
 8007e26:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	621a      	str	r2, [r3, #32]
}
 8007e3c:	bf00      	nop
 8007e3e:	371c      	adds	r7, #28
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
 8007e54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	021b      	lsls	r3, r3, #8
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	031b      	lsls	r3, r3, #12
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007e9a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	031b      	lsls	r3, r3, #12
 8007ea0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	621a      	str	r2, [r3, #32]
}
 8007eb6:	bf00      	nop
 8007eb8:	371c      	adds	r7, #28
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b087      	sub	sp, #28
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	60b9      	str	r1, [r7, #8]
 8007ecc:	607a      	str	r2, [r7, #4]
 8007ece:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007edc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	021a      	lsls	r2, r3, #8
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	609a      	str	r2, [r3, #8]
}
 8007ef6:	bf00      	nop
 8007ef8:	371c      	adds	r7, #28
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b087      	sub	sp, #28
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f003 031f 	and.w	r3, r3, #31
 8007f14:	2201      	movs	r2, #1
 8007f16:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a1a      	ldr	r2, [r3, #32]
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	43db      	mvns	r3, r3
 8007f24:	401a      	ands	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6a1a      	ldr	r2, [r3, #32]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f003 031f 	and.w	r3, r3, #31
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	fa01 f303 	lsl.w	r3, r1, r3
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	621a      	str	r2, [r3, #32]
}
 8007f40:	bf00      	nop
 8007f42:	371c      	adds	r7, #28
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08a      	sub	sp, #40	; 0x28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e09a      	b.n	8008096 <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d106      	bne.n	8007f7a <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7f9 fedd 	bl	8001d34 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	3304      	adds	r3, #4
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	f7ff fb7d 	bl	800768c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6818      	ldr	r0, [r3, #0]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	6819      	ldr	r1, [r3, #0]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	2203      	movs	r2, #3
 8007fa0:	f7ff fe12 	bl	8007bc8 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699a      	ldr	r2, [r3, #24]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 020c 	bic.w	r2, r2, #12
 8007fb2:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6999      	ldr	r1, [r3, #24]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007fd4:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689a      	ldr	r2, [r3, #8]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007fe4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689a      	ldr	r2, [r3, #8]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ff4:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0207 	bic.w	r2, r2, #7
 8008004:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f042 0204 	orr.w	r2, r2, #4
 8008014:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8008016:	2300      	movs	r3, #0
 8008018:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800801a:	2300      	movs	r3, #0
 800801c:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800801e:	2370      	movs	r3, #112	; 0x70
 8008020:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008022:	2300      	movs	r3, #0
 8008024:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008026:	2300      	movs	r3, #0
 8008028:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800802a:	2300      	movs	r3, #0
 800802c:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f107 020c 	add.w	r2, r7, #12
 800803c:	4611      	mov	r1, r2
 800803e:	4618      	mov	r0, r3
 8008040:	f7ff fc0a 	bl	8007858 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008052:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8008062:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3728      	adds	r7, #40	; 0x28
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
	...

080080a0 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080ae:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080b6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80080be:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80080c6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d108      	bne.n	80080e0 <HAL_TIMEx_HallSensor_Start+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d105      	bne.n	80080e0 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080d4:	7b7b      	ldrb	r3, [r7, #13]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d102      	bne.n	80080e0 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80080da:	7b3b      	ldrb	r3, [r7, #12]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d001      	beq.n	80080e4 <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e04f      	b.n	8008184 <HAL_TIMEx_HallSensor_Start+0xe4>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2202      	movs	r2, #2
 80080f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2201      	movs	r2, #1
 800810a:	2100      	movs	r1, #0
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff fef8 	bl	8007f02 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a1d      	ldr	r2, [pc, #116]	; (800818c <HAL_TIMEx_HallSensor_Start+0xec>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d018      	beq.n	800814e <HAL_TIMEx_HallSensor_Start+0xae>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008124:	d013      	beq.n	800814e <HAL_TIMEx_HallSensor_Start+0xae>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a19      	ldr	r2, [pc, #100]	; (8008190 <HAL_TIMEx_HallSensor_Start+0xf0>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d00e      	beq.n	800814e <HAL_TIMEx_HallSensor_Start+0xae>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a17      	ldr	r2, [pc, #92]	; (8008194 <HAL_TIMEx_HallSensor_Start+0xf4>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d009      	beq.n	800814e <HAL_TIMEx_HallSensor_Start+0xae>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a16      	ldr	r2, [pc, #88]	; (8008198 <HAL_TIMEx_HallSensor_Start+0xf8>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d004      	beq.n	800814e <HAL_TIMEx_HallSensor_Start+0xae>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a14      	ldr	r2, [pc, #80]	; (800819c <HAL_TIMEx_HallSensor_Start+0xfc>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d111      	bne.n	8008172 <HAL_TIMEx_HallSensor_Start+0xd2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f003 0307 	and.w	r3, r3, #7
 8008158:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2b06      	cmp	r3, #6
 800815e:	d010      	beq.n	8008182 <HAL_TIMEx_HallSensor_Start+0xe2>
    {
      __HAL_TIM_ENABLE(htim);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f042 0201 	orr.w	r2, r2, #1
 800816e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008170:	e007      	b.n	8008182 <HAL_TIMEx_HallSensor_Start+0xe2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f042 0201 	orr.w	r2, r2, #1
 8008180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	40010000 	.word	0x40010000
 8008190:	40000400 	.word	0x40000400
 8008194:	40000800 	.word	0x40000800
 8008198:	40000c00 	.word	0x40000c00
 800819c:	40014000 	.word	0x40014000

080081a0 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2200      	movs	r2, #0
 80081ae:	2100      	movs	r1, #0
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff fea6 	bl	8007f02 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6a1a      	ldr	r2, [r3, #32]
 80081bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80081c0:	4013      	ands	r3, r2
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10f      	bne.n	80081e6 <HAL_TIMEx_HallSensor_Stop+0x46>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	6a1a      	ldr	r2, [r3, #32]
 80081cc:	f240 4344 	movw	r3, #1092	; 0x444
 80081d0:	4013      	ands	r3, r2
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d107      	bne.n	80081e6 <HAL_TIMEx_HallSensor_Stop+0x46>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 0201 	bic.w	r2, r2, #1
 80081e4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008220:	2b01      	cmp	r3, #1
 8008222:	d101      	bne.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008224:	2302      	movs	r3, #2
 8008226:	e050      	b.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2202      	movs	r2, #2
 8008234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800824e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a1c      	ldr	r2, [pc, #112]	; (80082d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d018      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008274:	d013      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a18      	ldr	r2, [pc, #96]	; (80082dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d00e      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a16      	ldr	r2, [pc, #88]	; (80082e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d009      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a15      	ldr	r2, [pc, #84]	; (80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d004      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a13      	ldr	r2, [pc, #76]	; (80082e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d10c      	bne.n	80082b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	40010000 	.word	0x40010000
 80082dc:	40000400 	.word	0x40000400
 80082e0:	40000800 	.word	0x40000800
 80082e4:	40000c00 	.word	0x40000c00
 80082e8:	40014000 	.word	0x40014000

080082ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008300:	2b01      	cmp	r3, #1
 8008302:	d101      	bne.n	8008308 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008304:	2302      	movs	r3, #2
 8008306:	e03d      	b.n	8008384 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	4313      	orrs	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	4313      	orrs	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4313      	orrs	r3, r2
 8008346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	4313      	orrs	r3, r2
 8008354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	695b      	ldr	r3, [r3, #20]
 8008360:	4313      	orrs	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	69db      	ldr	r3, [r3, #28]
 800836e:	4313      	orrs	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e03f      	b.n	800844a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d106      	bne.n	80083e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7f9 fda2 	bl	8001f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2224      	movs	r2, #36	; 0x24
 80083e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f829 	bl	8008454 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	691a      	ldr	r2, [r3, #16]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008410:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	695a      	ldr	r2, [r3, #20]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008420:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68da      	ldr	r2, [r3, #12]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008430:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2220      	movs	r2, #32
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2220      	movs	r2, #32
 8008444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008458:	b0c0      	sub	sp, #256	; 0x100
 800845a:	af00      	add	r7, sp, #0
 800845c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800846c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008470:	68d9      	ldr	r1, [r3, #12]
 8008472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	ea40 0301 	orr.w	r3, r0, r1
 800847c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800847e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	431a      	orrs	r2, r3
 800848c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	431a      	orrs	r2, r3
 8008494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008498:	69db      	ldr	r3, [r3, #28]
 800849a:	4313      	orrs	r3, r2
 800849c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80084ac:	f021 010c 	bic.w	r1, r1, #12
 80084b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084ba:	430b      	orrs	r3, r1
 80084bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80084ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ce:	6999      	ldr	r1, [r3, #24]
 80084d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	ea40 0301 	orr.w	r3, r0, r1
 80084da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	4b8f      	ldr	r3, [pc, #572]	; (8008720 <UART_SetConfig+0x2cc>)
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d005      	beq.n	80084f4 <UART_SetConfig+0xa0>
 80084e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	4b8d      	ldr	r3, [pc, #564]	; (8008724 <UART_SetConfig+0x2d0>)
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d104      	bne.n	80084fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80084f4:	f7fe fab6 	bl	8006a64 <HAL_RCC_GetPCLK2Freq>
 80084f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80084fc:	e003      	b.n	8008506 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084fe:	f7fe fa9d 	bl	8006a3c <HAL_RCC_GetPCLK1Freq>
 8008502:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850a:	69db      	ldr	r3, [r3, #28]
 800850c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008510:	f040 810c 	bne.w	800872c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008518:	2200      	movs	r2, #0
 800851a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800851e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008522:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008526:	4622      	mov	r2, r4
 8008528:	462b      	mov	r3, r5
 800852a:	1891      	adds	r1, r2, r2
 800852c:	65b9      	str	r1, [r7, #88]	; 0x58
 800852e:	415b      	adcs	r3, r3
 8008530:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008532:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008536:	4621      	mov	r1, r4
 8008538:	eb12 0801 	adds.w	r8, r2, r1
 800853c:	4629      	mov	r1, r5
 800853e:	eb43 0901 	adc.w	r9, r3, r1
 8008542:	f04f 0200 	mov.w	r2, #0
 8008546:	f04f 0300 	mov.w	r3, #0
 800854a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800854e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008556:	4690      	mov	r8, r2
 8008558:	4699      	mov	r9, r3
 800855a:	4623      	mov	r3, r4
 800855c:	eb18 0303 	adds.w	r3, r8, r3
 8008560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008564:	462b      	mov	r3, r5
 8008566:	eb49 0303 	adc.w	r3, r9, r3
 800856a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800856e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800857a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800857e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008582:	460b      	mov	r3, r1
 8008584:	18db      	adds	r3, r3, r3
 8008586:	653b      	str	r3, [r7, #80]	; 0x50
 8008588:	4613      	mov	r3, r2
 800858a:	eb42 0303 	adc.w	r3, r2, r3
 800858e:	657b      	str	r3, [r7, #84]	; 0x54
 8008590:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008594:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008598:	f7f8 fb0e 	bl	8000bb8 <__aeabi_uldivmod>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	4b61      	ldr	r3, [pc, #388]	; (8008728 <UART_SetConfig+0x2d4>)
 80085a2:	fba3 2302 	umull	r2, r3, r3, r2
 80085a6:	095b      	lsrs	r3, r3, #5
 80085a8:	011c      	lsls	r4, r3, #4
 80085aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085ae:	2200      	movs	r2, #0
 80085b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80085b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80085bc:	4642      	mov	r2, r8
 80085be:	464b      	mov	r3, r9
 80085c0:	1891      	adds	r1, r2, r2
 80085c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80085c4:	415b      	adcs	r3, r3
 80085c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80085cc:	4641      	mov	r1, r8
 80085ce:	eb12 0a01 	adds.w	sl, r2, r1
 80085d2:	4649      	mov	r1, r9
 80085d4:	eb43 0b01 	adc.w	fp, r3, r1
 80085d8:	f04f 0200 	mov.w	r2, #0
 80085dc:	f04f 0300 	mov.w	r3, #0
 80085e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80085e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80085e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085ec:	4692      	mov	sl, r2
 80085ee:	469b      	mov	fp, r3
 80085f0:	4643      	mov	r3, r8
 80085f2:	eb1a 0303 	adds.w	r3, sl, r3
 80085f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085fa:	464b      	mov	r3, r9
 80085fc:	eb4b 0303 	adc.w	r3, fp, r3
 8008600:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008610:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008614:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008618:	460b      	mov	r3, r1
 800861a:	18db      	adds	r3, r3, r3
 800861c:	643b      	str	r3, [r7, #64]	; 0x40
 800861e:	4613      	mov	r3, r2
 8008620:	eb42 0303 	adc.w	r3, r2, r3
 8008624:	647b      	str	r3, [r7, #68]	; 0x44
 8008626:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800862a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800862e:	f7f8 fac3 	bl	8000bb8 <__aeabi_uldivmod>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	4611      	mov	r1, r2
 8008638:	4b3b      	ldr	r3, [pc, #236]	; (8008728 <UART_SetConfig+0x2d4>)
 800863a:	fba3 2301 	umull	r2, r3, r3, r1
 800863e:	095b      	lsrs	r3, r3, #5
 8008640:	2264      	movs	r2, #100	; 0x64
 8008642:	fb02 f303 	mul.w	r3, r2, r3
 8008646:	1acb      	subs	r3, r1, r3
 8008648:	00db      	lsls	r3, r3, #3
 800864a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800864e:	4b36      	ldr	r3, [pc, #216]	; (8008728 <UART_SetConfig+0x2d4>)
 8008650:	fba3 2302 	umull	r2, r3, r3, r2
 8008654:	095b      	lsrs	r3, r3, #5
 8008656:	005b      	lsls	r3, r3, #1
 8008658:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800865c:	441c      	add	r4, r3
 800865e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008662:	2200      	movs	r2, #0
 8008664:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008668:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800866c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008670:	4642      	mov	r2, r8
 8008672:	464b      	mov	r3, r9
 8008674:	1891      	adds	r1, r2, r2
 8008676:	63b9      	str	r1, [r7, #56]	; 0x38
 8008678:	415b      	adcs	r3, r3
 800867a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800867c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008680:	4641      	mov	r1, r8
 8008682:	1851      	adds	r1, r2, r1
 8008684:	6339      	str	r1, [r7, #48]	; 0x30
 8008686:	4649      	mov	r1, r9
 8008688:	414b      	adcs	r3, r1
 800868a:	637b      	str	r3, [r7, #52]	; 0x34
 800868c:	f04f 0200 	mov.w	r2, #0
 8008690:	f04f 0300 	mov.w	r3, #0
 8008694:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008698:	4659      	mov	r1, fp
 800869a:	00cb      	lsls	r3, r1, #3
 800869c:	4651      	mov	r1, sl
 800869e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086a2:	4651      	mov	r1, sl
 80086a4:	00ca      	lsls	r2, r1, #3
 80086a6:	4610      	mov	r0, r2
 80086a8:	4619      	mov	r1, r3
 80086aa:	4603      	mov	r3, r0
 80086ac:	4642      	mov	r2, r8
 80086ae:	189b      	adds	r3, r3, r2
 80086b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086b4:	464b      	mov	r3, r9
 80086b6:	460a      	mov	r2, r1
 80086b8:	eb42 0303 	adc.w	r3, r2, r3
 80086bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80086cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80086d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80086d4:	460b      	mov	r3, r1
 80086d6:	18db      	adds	r3, r3, r3
 80086d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80086da:	4613      	mov	r3, r2
 80086dc:	eb42 0303 	adc.w	r3, r2, r3
 80086e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80086ea:	f7f8 fa65 	bl	8000bb8 <__aeabi_uldivmod>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	4b0d      	ldr	r3, [pc, #52]	; (8008728 <UART_SetConfig+0x2d4>)
 80086f4:	fba3 1302 	umull	r1, r3, r3, r2
 80086f8:	095b      	lsrs	r3, r3, #5
 80086fa:	2164      	movs	r1, #100	; 0x64
 80086fc:	fb01 f303 	mul.w	r3, r1, r3
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	00db      	lsls	r3, r3, #3
 8008704:	3332      	adds	r3, #50	; 0x32
 8008706:	4a08      	ldr	r2, [pc, #32]	; (8008728 <UART_SetConfig+0x2d4>)
 8008708:	fba2 2303 	umull	r2, r3, r2, r3
 800870c:	095b      	lsrs	r3, r3, #5
 800870e:	f003 0207 	and.w	r2, r3, #7
 8008712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4422      	add	r2, r4
 800871a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800871c:	e106      	b.n	800892c <UART_SetConfig+0x4d8>
 800871e:	bf00      	nop
 8008720:	40011000 	.word	0x40011000
 8008724:	40011400 	.word	0x40011400
 8008728:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800872c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008730:	2200      	movs	r2, #0
 8008732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008736:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800873a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800873e:	4642      	mov	r2, r8
 8008740:	464b      	mov	r3, r9
 8008742:	1891      	adds	r1, r2, r2
 8008744:	6239      	str	r1, [r7, #32]
 8008746:	415b      	adcs	r3, r3
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
 800874a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800874e:	4641      	mov	r1, r8
 8008750:	1854      	adds	r4, r2, r1
 8008752:	4649      	mov	r1, r9
 8008754:	eb43 0501 	adc.w	r5, r3, r1
 8008758:	f04f 0200 	mov.w	r2, #0
 800875c:	f04f 0300 	mov.w	r3, #0
 8008760:	00eb      	lsls	r3, r5, #3
 8008762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008766:	00e2      	lsls	r2, r4, #3
 8008768:	4614      	mov	r4, r2
 800876a:	461d      	mov	r5, r3
 800876c:	4643      	mov	r3, r8
 800876e:	18e3      	adds	r3, r4, r3
 8008770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008774:	464b      	mov	r3, r9
 8008776:	eb45 0303 	adc.w	r3, r5, r3
 800877a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800877e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800878a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800878e:	f04f 0200 	mov.w	r2, #0
 8008792:	f04f 0300 	mov.w	r3, #0
 8008796:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800879a:	4629      	mov	r1, r5
 800879c:	008b      	lsls	r3, r1, #2
 800879e:	4621      	mov	r1, r4
 80087a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087a4:	4621      	mov	r1, r4
 80087a6:	008a      	lsls	r2, r1, #2
 80087a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80087ac:	f7f8 fa04 	bl	8000bb8 <__aeabi_uldivmod>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	4b60      	ldr	r3, [pc, #384]	; (8008938 <UART_SetConfig+0x4e4>)
 80087b6:	fba3 2302 	umull	r2, r3, r3, r2
 80087ba:	095b      	lsrs	r3, r3, #5
 80087bc:	011c      	lsls	r4, r3, #4
 80087be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087c2:	2200      	movs	r2, #0
 80087c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80087c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80087cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80087d0:	4642      	mov	r2, r8
 80087d2:	464b      	mov	r3, r9
 80087d4:	1891      	adds	r1, r2, r2
 80087d6:	61b9      	str	r1, [r7, #24]
 80087d8:	415b      	adcs	r3, r3
 80087da:	61fb      	str	r3, [r7, #28]
 80087dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087e0:	4641      	mov	r1, r8
 80087e2:	1851      	adds	r1, r2, r1
 80087e4:	6139      	str	r1, [r7, #16]
 80087e6:	4649      	mov	r1, r9
 80087e8:	414b      	adcs	r3, r1
 80087ea:	617b      	str	r3, [r7, #20]
 80087ec:	f04f 0200 	mov.w	r2, #0
 80087f0:	f04f 0300 	mov.w	r3, #0
 80087f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80087f8:	4659      	mov	r1, fp
 80087fa:	00cb      	lsls	r3, r1, #3
 80087fc:	4651      	mov	r1, sl
 80087fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008802:	4651      	mov	r1, sl
 8008804:	00ca      	lsls	r2, r1, #3
 8008806:	4610      	mov	r0, r2
 8008808:	4619      	mov	r1, r3
 800880a:	4603      	mov	r3, r0
 800880c:	4642      	mov	r2, r8
 800880e:	189b      	adds	r3, r3, r2
 8008810:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008814:	464b      	mov	r3, r9
 8008816:	460a      	mov	r2, r1
 8008818:	eb42 0303 	adc.w	r3, r2, r3
 800881c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	67bb      	str	r3, [r7, #120]	; 0x78
 800882a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800882c:	f04f 0200 	mov.w	r2, #0
 8008830:	f04f 0300 	mov.w	r3, #0
 8008834:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008838:	4649      	mov	r1, r9
 800883a:	008b      	lsls	r3, r1, #2
 800883c:	4641      	mov	r1, r8
 800883e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008842:	4641      	mov	r1, r8
 8008844:	008a      	lsls	r2, r1, #2
 8008846:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800884a:	f7f8 f9b5 	bl	8000bb8 <__aeabi_uldivmod>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	4611      	mov	r1, r2
 8008854:	4b38      	ldr	r3, [pc, #224]	; (8008938 <UART_SetConfig+0x4e4>)
 8008856:	fba3 2301 	umull	r2, r3, r3, r1
 800885a:	095b      	lsrs	r3, r3, #5
 800885c:	2264      	movs	r2, #100	; 0x64
 800885e:	fb02 f303 	mul.w	r3, r2, r3
 8008862:	1acb      	subs	r3, r1, r3
 8008864:	011b      	lsls	r3, r3, #4
 8008866:	3332      	adds	r3, #50	; 0x32
 8008868:	4a33      	ldr	r2, [pc, #204]	; (8008938 <UART_SetConfig+0x4e4>)
 800886a:	fba2 2303 	umull	r2, r3, r2, r3
 800886e:	095b      	lsrs	r3, r3, #5
 8008870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008874:	441c      	add	r4, r3
 8008876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800887a:	2200      	movs	r2, #0
 800887c:	673b      	str	r3, [r7, #112]	; 0x70
 800887e:	677a      	str	r2, [r7, #116]	; 0x74
 8008880:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008884:	4642      	mov	r2, r8
 8008886:	464b      	mov	r3, r9
 8008888:	1891      	adds	r1, r2, r2
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	415b      	adcs	r3, r3
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008894:	4641      	mov	r1, r8
 8008896:	1851      	adds	r1, r2, r1
 8008898:	6039      	str	r1, [r7, #0]
 800889a:	4649      	mov	r1, r9
 800889c:	414b      	adcs	r3, r1
 800889e:	607b      	str	r3, [r7, #4]
 80088a0:	f04f 0200 	mov.w	r2, #0
 80088a4:	f04f 0300 	mov.w	r3, #0
 80088a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088ac:	4659      	mov	r1, fp
 80088ae:	00cb      	lsls	r3, r1, #3
 80088b0:	4651      	mov	r1, sl
 80088b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088b6:	4651      	mov	r1, sl
 80088b8:	00ca      	lsls	r2, r1, #3
 80088ba:	4610      	mov	r0, r2
 80088bc:	4619      	mov	r1, r3
 80088be:	4603      	mov	r3, r0
 80088c0:	4642      	mov	r2, r8
 80088c2:	189b      	adds	r3, r3, r2
 80088c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80088c6:	464b      	mov	r3, r9
 80088c8:	460a      	mov	r2, r1
 80088ca:	eb42 0303 	adc.w	r3, r2, r3
 80088ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	663b      	str	r3, [r7, #96]	; 0x60
 80088da:	667a      	str	r2, [r7, #100]	; 0x64
 80088dc:	f04f 0200 	mov.w	r2, #0
 80088e0:	f04f 0300 	mov.w	r3, #0
 80088e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80088e8:	4649      	mov	r1, r9
 80088ea:	008b      	lsls	r3, r1, #2
 80088ec:	4641      	mov	r1, r8
 80088ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088f2:	4641      	mov	r1, r8
 80088f4:	008a      	lsls	r2, r1, #2
 80088f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80088fa:	f7f8 f95d 	bl	8000bb8 <__aeabi_uldivmod>
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	4b0d      	ldr	r3, [pc, #52]	; (8008938 <UART_SetConfig+0x4e4>)
 8008904:	fba3 1302 	umull	r1, r3, r3, r2
 8008908:	095b      	lsrs	r3, r3, #5
 800890a:	2164      	movs	r1, #100	; 0x64
 800890c:	fb01 f303 	mul.w	r3, r1, r3
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	011b      	lsls	r3, r3, #4
 8008914:	3332      	adds	r3, #50	; 0x32
 8008916:	4a08      	ldr	r2, [pc, #32]	; (8008938 <UART_SetConfig+0x4e4>)
 8008918:	fba2 2303 	umull	r2, r3, r2, r3
 800891c:	095b      	lsrs	r3, r3, #5
 800891e:	f003 020f 	and.w	r2, r3, #15
 8008922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4422      	add	r2, r4
 800892a:	609a      	str	r2, [r3, #8]
}
 800892c:	bf00      	nop
 800892e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008932:	46bd      	mov	sp, r7
 8008934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008938:	51eb851f 	.word	0x51eb851f

0800893c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800893c:	b084      	sub	sp, #16
 800893e:	b580      	push	{r7, lr}
 8008940:	b084      	sub	sp, #16
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	f107 001c 	add.w	r0, r7, #28
 800894a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	2b01      	cmp	r3, #1
 8008952:	d122      	bne.n	800899a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008958:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800897c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800897e:	2b01      	cmp	r3, #1
 8008980:	d105      	bne.n	800898e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f001 fbee 	bl	800a170 <USB_CoreReset>
 8008994:	4603      	mov	r3, r0
 8008996:	73fb      	strb	r3, [r7, #15]
 8008998:	e01a      	b.n	80089d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f001 fbe2 	bl	800a170 <USB_CoreReset>
 80089ac:	4603      	mov	r3, r0
 80089ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80089b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d106      	bne.n	80089c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	639a      	str	r2, [r3, #56]	; 0x38
 80089c2:	e005      	b.n	80089d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80089d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d10b      	bne.n	80089ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	f043 0206 	orr.w	r2, r3, #6
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f043 0220 	orr.w	r2, r3, #32
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80089ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089fa:	b004      	add	sp, #16
 80089fc:	4770      	bx	lr
	...

08008a00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b087      	sub	sp, #28
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008a0e:	79fb      	ldrb	r3, [r7, #7]
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d165      	bne.n	8008ae0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	4a41      	ldr	r2, [pc, #260]	; (8008b1c <USB_SetTurnaroundTime+0x11c>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d906      	bls.n	8008a2a <USB_SetTurnaroundTime+0x2a>
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	4a40      	ldr	r2, [pc, #256]	; (8008b20 <USB_SetTurnaroundTime+0x120>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d202      	bcs.n	8008a2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008a24:	230f      	movs	r3, #15
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	e062      	b.n	8008af0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	4a3c      	ldr	r2, [pc, #240]	; (8008b20 <USB_SetTurnaroundTime+0x120>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d306      	bcc.n	8008a40 <USB_SetTurnaroundTime+0x40>
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	4a3b      	ldr	r2, [pc, #236]	; (8008b24 <USB_SetTurnaroundTime+0x124>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d202      	bcs.n	8008a40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008a3a:	230e      	movs	r3, #14
 8008a3c:	617b      	str	r3, [r7, #20]
 8008a3e:	e057      	b.n	8008af0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	4a38      	ldr	r2, [pc, #224]	; (8008b24 <USB_SetTurnaroundTime+0x124>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d306      	bcc.n	8008a56 <USB_SetTurnaroundTime+0x56>
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	4a37      	ldr	r2, [pc, #220]	; (8008b28 <USB_SetTurnaroundTime+0x128>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d202      	bcs.n	8008a56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008a50:	230d      	movs	r3, #13
 8008a52:	617b      	str	r3, [r7, #20]
 8008a54:	e04c      	b.n	8008af0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	4a33      	ldr	r2, [pc, #204]	; (8008b28 <USB_SetTurnaroundTime+0x128>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d306      	bcc.n	8008a6c <USB_SetTurnaroundTime+0x6c>
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	4a32      	ldr	r2, [pc, #200]	; (8008b2c <USB_SetTurnaroundTime+0x12c>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d802      	bhi.n	8008a6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008a66:	230c      	movs	r3, #12
 8008a68:	617b      	str	r3, [r7, #20]
 8008a6a:	e041      	b.n	8008af0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	4a2f      	ldr	r2, [pc, #188]	; (8008b2c <USB_SetTurnaroundTime+0x12c>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d906      	bls.n	8008a82 <USB_SetTurnaroundTime+0x82>
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	4a2e      	ldr	r2, [pc, #184]	; (8008b30 <USB_SetTurnaroundTime+0x130>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d802      	bhi.n	8008a82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008a7c:	230b      	movs	r3, #11
 8008a7e:	617b      	str	r3, [r7, #20]
 8008a80:	e036      	b.n	8008af0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	4a2a      	ldr	r2, [pc, #168]	; (8008b30 <USB_SetTurnaroundTime+0x130>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d906      	bls.n	8008a98 <USB_SetTurnaroundTime+0x98>
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	4a29      	ldr	r2, [pc, #164]	; (8008b34 <USB_SetTurnaroundTime+0x134>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d802      	bhi.n	8008a98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008a92:	230a      	movs	r3, #10
 8008a94:	617b      	str	r3, [r7, #20]
 8008a96:	e02b      	b.n	8008af0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	4a26      	ldr	r2, [pc, #152]	; (8008b34 <USB_SetTurnaroundTime+0x134>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d906      	bls.n	8008aae <USB_SetTurnaroundTime+0xae>
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	4a25      	ldr	r2, [pc, #148]	; (8008b38 <USB_SetTurnaroundTime+0x138>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d202      	bcs.n	8008aae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008aa8:	2309      	movs	r3, #9
 8008aaa:	617b      	str	r3, [r7, #20]
 8008aac:	e020      	b.n	8008af0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	4a21      	ldr	r2, [pc, #132]	; (8008b38 <USB_SetTurnaroundTime+0x138>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d306      	bcc.n	8008ac4 <USB_SetTurnaroundTime+0xc4>
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	4a20      	ldr	r2, [pc, #128]	; (8008b3c <USB_SetTurnaroundTime+0x13c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d802      	bhi.n	8008ac4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008abe:	2308      	movs	r3, #8
 8008ac0:	617b      	str	r3, [r7, #20]
 8008ac2:	e015      	b.n	8008af0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	4a1d      	ldr	r2, [pc, #116]	; (8008b3c <USB_SetTurnaroundTime+0x13c>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d906      	bls.n	8008ada <USB_SetTurnaroundTime+0xda>
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	4a1c      	ldr	r2, [pc, #112]	; (8008b40 <USB_SetTurnaroundTime+0x140>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d202      	bcs.n	8008ada <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008ad4:	2307      	movs	r3, #7
 8008ad6:	617b      	str	r3, [r7, #20]
 8008ad8:	e00a      	b.n	8008af0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008ada:	2306      	movs	r3, #6
 8008adc:	617b      	str	r3, [r7, #20]
 8008ade:	e007      	b.n	8008af0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008ae0:	79fb      	ldrb	r3, [r7, #7]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d102      	bne.n	8008aec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008ae6:	2309      	movs	r3, #9
 8008ae8:	617b      	str	r3, [r7, #20]
 8008aea:	e001      	b.n	8008af0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008aec:	2309      	movs	r3, #9
 8008aee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	68da      	ldr	r2, [r3, #12]
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	029b      	lsls	r3, r3, #10
 8008b04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	371c      	adds	r7, #28
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	00d8acbf 	.word	0x00d8acbf
 8008b20:	00e4e1c0 	.word	0x00e4e1c0
 8008b24:	00f42400 	.word	0x00f42400
 8008b28:	01067380 	.word	0x01067380
 8008b2c:	011a499f 	.word	0x011a499f
 8008b30:	01312cff 	.word	0x01312cff
 8008b34:	014ca43f 	.word	0x014ca43f
 8008b38:	016e3600 	.word	0x016e3600
 8008b3c:	01a6ab1f 	.word	0x01a6ab1f
 8008b40:	01e84800 	.word	0x01e84800

08008b44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f043 0201 	orr.w	r2, r3, #1
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b083      	sub	sp, #12
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	f023 0201 	bic.w	r2, r3, #1
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008b94:	2300      	movs	r3, #0
 8008b96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ba4:	78fb      	ldrb	r3, [r7, #3]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d115      	bne.n	8008bd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008bb6:	2001      	movs	r0, #1
 8008bb8:	f7f9 fc34 	bl	8002424 <HAL_Delay>
      ms++;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f001 fa45 	bl	800a052 <USB_GetMode>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d01e      	beq.n	8008c0c <USB_SetCurrentMode+0x84>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b31      	cmp	r3, #49	; 0x31
 8008bd2:	d9f0      	bls.n	8008bb6 <USB_SetCurrentMode+0x2e>
 8008bd4:	e01a      	b.n	8008c0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008bd6:	78fb      	ldrb	r3, [r7, #3]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d115      	bne.n	8008c08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008be8:	2001      	movs	r0, #1
 8008bea:	f7f9 fc1b 	bl	8002424 <HAL_Delay>
      ms++;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f001 fa2c 	bl	800a052 <USB_GetMode>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d005      	beq.n	8008c0c <USB_SetCurrentMode+0x84>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2b31      	cmp	r3, #49	; 0x31
 8008c04:	d9f0      	bls.n	8008be8 <USB_SetCurrentMode+0x60>
 8008c06:	e001      	b.n	8008c0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e005      	b.n	8008c18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b32      	cmp	r3, #50	; 0x32
 8008c10:	d101      	bne.n	8008c16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e000      	b.n	8008c18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c20:	b084      	sub	sp, #16
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b086      	sub	sp, #24
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008c2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	613b      	str	r3, [r7, #16]
 8008c3e:	e009      	b.n	8008c54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	3340      	adds	r3, #64	; 0x40
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4413      	add	r3, r2
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	3301      	adds	r3, #1
 8008c52:	613b      	str	r3, [r7, #16]
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	2b0e      	cmp	r3, #14
 8008c58:	d9f2      	bls.n	8008c40 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d11c      	bne.n	8008c9a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c6e:	f043 0302 	orr.w	r3, r3, #2
 8008c72:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c84:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c90:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	639a      	str	r2, [r3, #56]	; 0x38
 8008c98:	e00b      	b.n	8008cb2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008caa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cb8:	461a      	mov	r2, r3
 8008cba:	2300      	movs	r3, #0
 8008cbc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ccc:	461a      	mov	r2, r3
 8008cce:	680b      	ldr	r3, [r1, #0]
 8008cd0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d10c      	bne.n	8008cf2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008cde:	2100      	movs	r1, #0
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f965 	bl	8008fb0 <USB_SetDevSpeed>
 8008ce6:	e008      	b.n	8008cfa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008ce8:	2101      	movs	r1, #1
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f960 	bl	8008fb0 <USB_SetDevSpeed>
 8008cf0:	e003      	b.n	8008cfa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008cf2:	2103      	movs	r1, #3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f95b 	bl	8008fb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008cfa:	2110      	movs	r1, #16
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f8f3 	bl	8008ee8 <USB_FlushTxFifo>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f91f 	bl	8008f50 <USB_FlushRxFifo>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d22:	461a      	mov	r2, r3
 8008d24:	2300      	movs	r3, #0
 8008d26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d2e:	461a      	mov	r2, r3
 8008d30:	2300      	movs	r3, #0
 8008d32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d40:	2300      	movs	r3, #0
 8008d42:	613b      	str	r3, [r7, #16]
 8008d44:	e043      	b.n	8008dce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d5c:	d118      	bne.n	8008d90 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10a      	bne.n	8008d7a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d70:	461a      	mov	r2, r3
 8008d72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	e013      	b.n	8008da2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	015a      	lsls	r2, r3, #5
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4413      	add	r3, r2
 8008d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d86:	461a      	mov	r2, r3
 8008d88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d8c:	6013      	str	r3, [r2, #0]
 8008d8e:	e008      	b.n	8008da2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	2300      	movs	r3, #0
 8008da0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dae:	461a      	mov	r2, r3
 8008db0:	2300      	movs	r3, #0
 8008db2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008dc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	613b      	str	r3, [r7, #16]
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d3b7      	bcc.n	8008d46 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	613b      	str	r3, [r7, #16]
 8008dda:	e043      	b.n	8008e64 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008df2:	d118      	bne.n	8008e26 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10a      	bne.n	8008e10 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	015a      	lsls	r2, r3, #5
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e06:	461a      	mov	r2, r3
 8008e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e0c:	6013      	str	r3, [r2, #0]
 8008e0e:	e013      	b.n	8008e38 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	015a      	lsls	r2, r3, #5
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4413      	add	r3, r2
 8008e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e22:	6013      	str	r3, [r2, #0]
 8008e24:	e008      	b.n	8008e38 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e32:	461a      	mov	r2, r3
 8008e34:	2300      	movs	r3, #0
 8008e36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	015a      	lsls	r2, r3, #5
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	4413      	add	r3, r2
 8008e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e44:	461a      	mov	r2, r3
 8008e46:	2300      	movs	r3, #0
 8008e48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	015a      	lsls	r2, r3, #5
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	4413      	add	r3, r2
 8008e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e56:	461a      	mov	r2, r3
 8008e58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	3301      	adds	r3, #1
 8008e62:	613b      	str	r3, [r7, #16]
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d3b7      	bcc.n	8008ddc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008e8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d105      	bne.n	8008ea0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	f043 0210 	orr.w	r2, r3, #16
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	699a      	ldr	r2, [r3, #24]
 8008ea4:	4b0f      	ldr	r3, [pc, #60]	; (8008ee4 <USB_DevInit+0x2c4>)
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d005      	beq.n	8008ebe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	f043 0208 	orr.w	r2, r3, #8
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d107      	bne.n	8008ed4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ecc:	f043 0304 	orr.w	r3, r3, #4
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ee0:	b004      	add	sp, #16
 8008ee2:	4770      	bx	lr
 8008ee4:	803c3800 	.word	0x803c3800

08008ee8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4a13      	ldr	r2, [pc, #76]	; (8008f4c <USB_FlushTxFifo+0x64>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d901      	bls.n	8008f08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e01b      	b.n	8008f40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	daf2      	bge.n	8008ef6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	019b      	lsls	r3, r3, #6
 8008f18:	f043 0220 	orr.w	r2, r3, #32
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	3301      	adds	r3, #1
 8008f24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4a08      	ldr	r2, [pc, #32]	; (8008f4c <USB_FlushTxFifo+0x64>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d901      	bls.n	8008f32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e006      	b.n	8008f40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	f003 0320 	and.w	r3, r3, #32
 8008f3a:	2b20      	cmp	r3, #32
 8008f3c:	d0f0      	beq.n	8008f20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	00030d40 	.word	0x00030d40

08008f50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4a11      	ldr	r2, [pc, #68]	; (8008fac <USB_FlushRxFifo+0x5c>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d901      	bls.n	8008f6e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e018      	b.n	8008fa0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	daf2      	bge.n	8008f5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2210      	movs	r2, #16
 8008f7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3301      	adds	r3, #1
 8008f84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	4a08      	ldr	r2, [pc, #32]	; (8008fac <USB_FlushRxFifo+0x5c>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d901      	bls.n	8008f92 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e006      	b.n	8008fa0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	f003 0310 	and.w	r3, r3, #16
 8008f9a:	2b10      	cmp	r3, #16
 8008f9c:	d0f0      	beq.n	8008f80 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	00030d40 	.word	0x00030d40

08008fb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	78fb      	ldrb	r3, [r7, #3]
 8008fca:	68f9      	ldr	r1, [r7, #12]
 8008fcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b087      	sub	sp, #28
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f003 0306 	and.w	r3, r3, #6
 8008ffa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d102      	bne.n	8009008 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009002:	2300      	movs	r3, #0
 8009004:	75fb      	strb	r3, [r7, #23]
 8009006:	e00a      	b.n	800901e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2b02      	cmp	r3, #2
 800900c:	d002      	beq.n	8009014 <USB_GetDevSpeed+0x32>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2b06      	cmp	r3, #6
 8009012:	d102      	bne.n	800901a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009014:	2302      	movs	r3, #2
 8009016:	75fb      	strb	r3, [r7, #23]
 8009018:	e001      	b.n	800901e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800901a:	230f      	movs	r3, #15
 800901c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800901e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009020:	4618      	mov	r0, r3
 8009022:	371c      	adds	r7, #28
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	785b      	ldrb	r3, [r3, #1]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d13a      	bne.n	80090be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800904e:	69da      	ldr	r2, [r3, #28]
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	f003 030f 	and.w	r3, r3, #15
 8009058:	2101      	movs	r1, #1
 800905a:	fa01 f303 	lsl.w	r3, r1, r3
 800905e:	b29b      	uxth	r3, r3
 8009060:	68f9      	ldr	r1, [r7, #12]
 8009062:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009066:	4313      	orrs	r3, r2
 8009068:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	015a      	lsls	r2, r3, #5
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	4413      	add	r3, r2
 8009072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800907c:	2b00      	cmp	r3, #0
 800907e:	d155      	bne.n	800912c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	015a      	lsls	r2, r3, #5
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	4413      	add	r3, r2
 8009088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	791b      	ldrb	r3, [r3, #4]
 800909a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800909c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	059b      	lsls	r3, r3, #22
 80090a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090a4:	4313      	orrs	r3, r2
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	0151      	lsls	r1, r2, #5
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	440a      	add	r2, r1
 80090ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ba:	6013      	str	r3, [r2, #0]
 80090bc:	e036      	b.n	800912c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090c4:	69da      	ldr	r2, [r3, #28]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	f003 030f 	and.w	r3, r3, #15
 80090ce:	2101      	movs	r1, #1
 80090d0:	fa01 f303 	lsl.w	r3, r1, r3
 80090d4:	041b      	lsls	r3, r3, #16
 80090d6:	68f9      	ldr	r1, [r7, #12]
 80090d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090dc:	4313      	orrs	r3, r2
 80090de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d11a      	bne.n	800912c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	791b      	ldrb	r3, [r3, #4]
 8009110:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009112:	430b      	orrs	r3, r1
 8009114:	4313      	orrs	r3, r2
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	0151      	lsls	r1, r2, #5
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	440a      	add	r2, r1
 800911e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800912a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3714      	adds	r7, #20
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
	...

0800913c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	785b      	ldrb	r3, [r3, #1]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d161      	bne.n	800921c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800916a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800916e:	d11f      	bne.n	80091b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	015a      	lsls	r2, r3, #5
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	4413      	add	r3, r2
 8009178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	0151      	lsls	r1, r2, #5
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	440a      	add	r2, r1
 8009186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800918a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800918e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4413      	add	r3, r2
 8009198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	0151      	lsls	r1, r2, #5
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	440a      	add	r2, r1
 80091a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	f003 030f 	and.w	r3, r3, #15
 80091c0:	2101      	movs	r1, #1
 80091c2:	fa01 f303 	lsl.w	r3, r1, r3
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	43db      	mvns	r3, r3
 80091ca:	68f9      	ldr	r1, [r7, #12]
 80091cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091d0:	4013      	ands	r3, r2
 80091d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091da:	69da      	ldr	r2, [r3, #28]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	f003 030f 	and.w	r3, r3, #15
 80091e4:	2101      	movs	r1, #1
 80091e6:	fa01 f303 	lsl.w	r3, r1, r3
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	43db      	mvns	r3, r3
 80091ee:	68f9      	ldr	r1, [r7, #12]
 80091f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091f4:	4013      	ands	r3, r2
 80091f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	0159      	lsls	r1, r3, #5
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	440b      	add	r3, r1
 800920e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009212:	4619      	mov	r1, r3
 8009214:	4b35      	ldr	r3, [pc, #212]	; (80092ec <USB_DeactivateEndpoint+0x1b0>)
 8009216:	4013      	ands	r3, r2
 8009218:	600b      	str	r3, [r1, #0]
 800921a:	e060      	b.n	80092de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800922e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009232:	d11f      	bne.n	8009274 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	015a      	lsls	r2, r3, #5
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4413      	add	r3, r2
 800923c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68ba      	ldr	r2, [r7, #8]
 8009244:	0151      	lsls	r1, r2, #5
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	440a      	add	r2, r1
 800924a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800924e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009252:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	015a      	lsls	r2, r3, #5
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4413      	add	r3, r2
 800925c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	0151      	lsls	r1, r2, #5
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	440a      	add	r2, r1
 800926a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800926e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009272:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800927a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	f003 030f 	and.w	r3, r3, #15
 8009284:	2101      	movs	r1, #1
 8009286:	fa01 f303 	lsl.w	r3, r1, r3
 800928a:	041b      	lsls	r3, r3, #16
 800928c:	43db      	mvns	r3, r3
 800928e:	68f9      	ldr	r1, [r7, #12]
 8009290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009294:	4013      	ands	r3, r2
 8009296:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800929e:	69da      	ldr	r2, [r3, #28]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	f003 030f 	and.w	r3, r3, #15
 80092a8:	2101      	movs	r1, #1
 80092aa:	fa01 f303 	lsl.w	r3, r1, r3
 80092ae:	041b      	lsls	r3, r3, #16
 80092b0:	43db      	mvns	r3, r3
 80092b2:	68f9      	ldr	r1, [r7, #12]
 80092b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092b8:	4013      	ands	r3, r2
 80092ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	015a      	lsls	r2, r3, #5
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	4413      	add	r3, r2
 80092c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	0159      	lsls	r1, r3, #5
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	440b      	add	r3, r1
 80092d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d6:	4619      	mov	r1, r3
 80092d8:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <USB_DeactivateEndpoint+0x1b4>)
 80092da:	4013      	ands	r3, r2
 80092dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	ec337800 	.word	0xec337800
 80092f0:	eff37800 	.word	0xeff37800

080092f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b08a      	sub	sp, #40	; 0x28
 80092f8:	af02      	add	r7, sp, #8
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	4613      	mov	r3, r2
 8009300:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	785b      	ldrb	r3, [r3, #1]
 8009310:	2b01      	cmp	r3, #1
 8009312:	f040 815c 	bne.w	80095ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d132      	bne.n	8009384 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	015a      	lsls	r2, r3, #5
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	4413      	add	r3, r2
 8009326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	69ba      	ldr	r2, [r7, #24]
 800932e:	0151      	lsls	r1, r2, #5
 8009330:	69fa      	ldr	r2, [r7, #28]
 8009332:	440a      	add	r2, r1
 8009334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009338:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800933c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009340:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	015a      	lsls	r2, r3, #5
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	4413      	add	r3, r2
 800934a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	69ba      	ldr	r2, [r7, #24]
 8009352:	0151      	lsls	r1, r2, #5
 8009354:	69fa      	ldr	r2, [r7, #28]
 8009356:	440a      	add	r2, r1
 8009358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800935c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009360:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	015a      	lsls	r2, r3, #5
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	4413      	add	r3, r2
 800936a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	0151      	lsls	r1, r2, #5
 8009374:	69fa      	ldr	r2, [r7, #28]
 8009376:	440a      	add	r2, r1
 8009378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800937c:	0cdb      	lsrs	r3, r3, #19
 800937e:	04db      	lsls	r3, r3, #19
 8009380:	6113      	str	r3, [r2, #16]
 8009382:	e074      	b.n	800946e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	4413      	add	r3, r2
 800938c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	69ba      	ldr	r2, [r7, #24]
 8009394:	0151      	lsls	r1, r2, #5
 8009396:	69fa      	ldr	r2, [r7, #28]
 8009398:	440a      	add	r2, r1
 800939a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800939e:	0cdb      	lsrs	r3, r3, #19
 80093a0:	04db      	lsls	r3, r3, #19
 80093a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	69ba      	ldr	r2, [r7, #24]
 80093b4:	0151      	lsls	r1, r2, #5
 80093b6:	69fa      	ldr	r2, [r7, #28]
 80093b8:	440a      	add	r2, r1
 80093ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	015a      	lsls	r2, r3, #5
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	6999      	ldr	r1, [r3, #24]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	440b      	add	r3, r1
 80093e0:	1e59      	subs	r1, r3, #1
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80093ea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80093ec:	4b9d      	ldr	r3, [pc, #628]	; (8009664 <USB_EPStartXfer+0x370>)
 80093ee:	400b      	ands	r3, r1
 80093f0:	69b9      	ldr	r1, [r7, #24]
 80093f2:	0148      	lsls	r0, r1, #5
 80093f4:	69f9      	ldr	r1, [r7, #28]
 80093f6:	4401      	add	r1, r0
 80093f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093fc:	4313      	orrs	r3, r2
 80093fe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	015a      	lsls	r2, r3, #5
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	4413      	add	r3, r2
 8009408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800940c:	691a      	ldr	r2, [r3, #16]
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009416:	69b9      	ldr	r1, [r7, #24]
 8009418:	0148      	lsls	r0, r1, #5
 800941a:	69f9      	ldr	r1, [r7, #28]
 800941c:	4401      	add	r1, r0
 800941e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009422:	4313      	orrs	r3, r2
 8009424:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	791b      	ldrb	r3, [r3, #4]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d11f      	bne.n	800946e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	015a      	lsls	r2, r3, #5
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	4413      	add	r3, r2
 8009436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	69ba      	ldr	r2, [r7, #24]
 800943e:	0151      	lsls	r1, r2, #5
 8009440:	69fa      	ldr	r2, [r7, #28]
 8009442:	440a      	add	r2, r1
 8009444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009448:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800944c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	015a      	lsls	r2, r3, #5
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	4413      	add	r3, r2
 8009456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	69ba      	ldr	r2, [r7, #24]
 800945e:	0151      	lsls	r1, r2, #5
 8009460:	69fa      	ldr	r2, [r7, #28]
 8009462:	440a      	add	r2, r1
 8009464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009468:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800946c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800946e:	79fb      	ldrb	r3, [r7, #7]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d14b      	bne.n	800950c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d009      	beq.n	8009490 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	015a      	lsls	r2, r3, #5
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	4413      	add	r3, r2
 8009484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009488:	461a      	mov	r2, r3
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	791b      	ldrb	r3, [r3, #4]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d128      	bne.n	80094ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d110      	bne.n	80094ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	015a      	lsls	r2, r3, #5
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	4413      	add	r3, r2
 80094b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	69ba      	ldr	r2, [r7, #24]
 80094b8:	0151      	lsls	r1, r2, #5
 80094ba:	69fa      	ldr	r2, [r7, #28]
 80094bc:	440a      	add	r2, r1
 80094be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	e00f      	b.n	80094ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	69ba      	ldr	r2, [r7, #24]
 80094da:	0151      	lsls	r1, r2, #5
 80094dc:	69fa      	ldr	r2, [r7, #28]
 80094de:	440a      	add	r2, r1
 80094e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	015a      	lsls	r2, r3, #5
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	4413      	add	r3, r2
 80094f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	69ba      	ldr	r2, [r7, #24]
 80094fa:	0151      	lsls	r1, r2, #5
 80094fc:	69fa      	ldr	r2, [r7, #28]
 80094fe:	440a      	add	r2, r1
 8009500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009504:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009508:	6013      	str	r3, [r2, #0]
 800950a:	e133      	b.n	8009774 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	015a      	lsls	r2, r3, #5
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	4413      	add	r3, r2
 8009514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	69ba      	ldr	r2, [r7, #24]
 800951c:	0151      	lsls	r1, r2, #5
 800951e:	69fa      	ldr	r2, [r7, #28]
 8009520:	440a      	add	r2, r1
 8009522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009526:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800952a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	791b      	ldrb	r3, [r3, #4]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d015      	beq.n	8009560 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 811b 	beq.w	8009774 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	f003 030f 	and.w	r3, r3, #15
 800954e:	2101      	movs	r1, #1
 8009550:	fa01 f303 	lsl.w	r3, r1, r3
 8009554:	69f9      	ldr	r1, [r7, #28]
 8009556:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800955a:	4313      	orrs	r3, r2
 800955c:	634b      	str	r3, [r1, #52]	; 0x34
 800955e:	e109      	b.n	8009774 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800956c:	2b00      	cmp	r3, #0
 800956e:	d110      	bne.n	8009592 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	69ba      	ldr	r2, [r7, #24]
 8009580:	0151      	lsls	r1, r2, #5
 8009582:	69fa      	ldr	r2, [r7, #28]
 8009584:	440a      	add	r2, r1
 8009586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800958a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800958e:	6013      	str	r3, [r2, #0]
 8009590:	e00f      	b.n	80095b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	4413      	add	r3, r2
 800959a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	0151      	lsls	r1, r2, #5
 80095a4:	69fa      	ldr	r2, [r7, #28]
 80095a6:	440a      	add	r2, r1
 80095a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	6919      	ldr	r1, [r3, #16]
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	781a      	ldrb	r2, [r3, #0]
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	b298      	uxth	r0, r3
 80095c0:	79fb      	ldrb	r3, [r7, #7]
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	4603      	mov	r3, r0
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f000 fade 	bl	8009b88 <USB_WritePacket>
 80095cc:	e0d2      	b.n	8009774 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	69ba      	ldr	r2, [r7, #24]
 80095de:	0151      	lsls	r1, r2, #5
 80095e0:	69fa      	ldr	r2, [r7, #28]
 80095e2:	440a      	add	r2, r1
 80095e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095e8:	0cdb      	lsrs	r3, r3, #19
 80095ea:	04db      	lsls	r3, r3, #19
 80095ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	015a      	lsls	r2, r3, #5
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	4413      	add	r3, r2
 80095f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	69ba      	ldr	r2, [r7, #24]
 80095fe:	0151      	lsls	r1, r2, #5
 8009600:	69fa      	ldr	r2, [r7, #28]
 8009602:	440a      	add	r2, r1
 8009604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009608:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800960c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009610:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d126      	bne.n	8009668 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	015a      	lsls	r2, r3, #5
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	4413      	add	r3, r2
 8009622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009626:	691a      	ldr	r2, [r3, #16]
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009630:	69b9      	ldr	r1, [r7, #24]
 8009632:	0148      	lsls	r0, r1, #5
 8009634:	69f9      	ldr	r1, [r7, #28]
 8009636:	4401      	add	r1, r0
 8009638:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800963c:	4313      	orrs	r3, r2
 800963e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	015a      	lsls	r2, r3, #5
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	4413      	add	r3, r2
 8009648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	69ba      	ldr	r2, [r7, #24]
 8009650:	0151      	lsls	r1, r2, #5
 8009652:	69fa      	ldr	r2, [r7, #28]
 8009654:	440a      	add	r2, r1
 8009656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800965a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800965e:	6113      	str	r3, [r2, #16]
 8009660:	e03a      	b.n	80096d8 <USB_EPStartXfer+0x3e4>
 8009662:	bf00      	nop
 8009664:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	699a      	ldr	r2, [r3, #24]
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	4413      	add	r3, r2
 8009672:	1e5a      	subs	r2, r3, #1
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	fbb2 f3f3 	udiv	r3, r2, r3
 800967c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	8afa      	ldrh	r2, [r7, #22]
 8009684:	fb03 f202 	mul.w	r2, r3, r2
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009698:	691a      	ldr	r2, [r3, #16]
 800969a:	8afb      	ldrh	r3, [r7, #22]
 800969c:	04d9      	lsls	r1, r3, #19
 800969e:	4b38      	ldr	r3, [pc, #224]	; (8009780 <USB_EPStartXfer+0x48c>)
 80096a0:	400b      	ands	r3, r1
 80096a2:	69b9      	ldr	r1, [r7, #24]
 80096a4:	0148      	lsls	r0, r1, #5
 80096a6:	69f9      	ldr	r1, [r7, #28]
 80096a8:	4401      	add	r1, r0
 80096aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096ae:	4313      	orrs	r3, r2
 80096b0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	015a      	lsls	r2, r3, #5
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	4413      	add	r3, r2
 80096ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096be:	691a      	ldr	r2, [r3, #16]
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096c8:	69b9      	ldr	r1, [r7, #24]
 80096ca:	0148      	lsls	r0, r1, #5
 80096cc:	69f9      	ldr	r1, [r7, #28]
 80096ce:	4401      	add	r1, r0
 80096d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096d4:	4313      	orrs	r3, r2
 80096d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80096d8:	79fb      	ldrb	r3, [r7, #7]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d10d      	bne.n	80096fa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d009      	beq.n	80096fa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	6919      	ldr	r1, [r3, #16]
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	015a      	lsls	r2, r3, #5
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	4413      	add	r3, r2
 80096f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f6:	460a      	mov	r2, r1
 80096f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	791b      	ldrb	r3, [r3, #4]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d128      	bne.n	8009754 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800970e:	2b00      	cmp	r3, #0
 8009710:	d110      	bne.n	8009734 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	015a      	lsls	r2, r3, #5
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	4413      	add	r3, r2
 800971a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	69ba      	ldr	r2, [r7, #24]
 8009722:	0151      	lsls	r1, r2, #5
 8009724:	69fa      	ldr	r2, [r7, #28]
 8009726:	440a      	add	r2, r1
 8009728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800972c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009730:	6013      	str	r3, [r2, #0]
 8009732:	e00f      	b.n	8009754 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	015a      	lsls	r2, r3, #5
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	4413      	add	r3, r2
 800973c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	69ba      	ldr	r2, [r7, #24]
 8009744:	0151      	lsls	r1, r2, #5
 8009746:	69fa      	ldr	r2, [r7, #28]
 8009748:	440a      	add	r2, r1
 800974a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800974e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009752:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	015a      	lsls	r2, r3, #5
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	4413      	add	r3, r2
 800975c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	69ba      	ldr	r2, [r7, #24]
 8009764:	0151      	lsls	r1, r2, #5
 8009766:	69fa      	ldr	r2, [r7, #28]
 8009768:	440a      	add	r2, r1
 800976a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800976e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009772:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3720      	adds	r7, #32
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	1ff80000 	.word	0x1ff80000

08009784 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	4613      	mov	r3, r2
 8009790:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	785b      	ldrb	r3, [r3, #1]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	f040 80ce 	bne.w	8009942 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d132      	bne.n	8009814 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	015a      	lsls	r2, r3, #5
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	4413      	add	r3, r2
 80097b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	0151      	lsls	r1, r2, #5
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	440a      	add	r2, r1
 80097c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	0151      	lsls	r1, r2, #5
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	440a      	add	r2, r1
 80097e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	0151      	lsls	r1, r2, #5
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	440a      	add	r2, r1
 8009808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800980c:	0cdb      	lsrs	r3, r3, #19
 800980e:	04db      	lsls	r3, r3, #19
 8009810:	6113      	str	r3, [r2, #16]
 8009812:	e04e      	b.n	80098b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	015a      	lsls	r2, r3, #5
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	4413      	add	r3, r2
 800981c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	0151      	lsls	r1, r2, #5
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	440a      	add	r2, r1
 800982a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800982e:	0cdb      	lsrs	r3, r3, #19
 8009830:	04db      	lsls	r3, r3, #19
 8009832:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	0151      	lsls	r1, r2, #5
 8009846:	697a      	ldr	r2, [r7, #20]
 8009848:	440a      	add	r2, r1
 800984a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800984e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009852:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009856:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	699a      	ldr	r2, [r3, #24]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	429a      	cmp	r2, r3
 8009862:	d903      	bls.n	800986c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	68da      	ldr	r2, [r3, #12]
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	0151      	lsls	r1, r2, #5
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	440a      	add	r2, r1
 8009882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009886:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800988a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009898:	691a      	ldr	r2, [r3, #16]
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098a2:	6939      	ldr	r1, [r7, #16]
 80098a4:	0148      	lsls	r0, r1, #5
 80098a6:	6979      	ldr	r1, [r7, #20]
 80098a8:	4401      	add	r1, r0
 80098aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80098ae:	4313      	orrs	r3, r2
 80098b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80098b2:	79fb      	ldrb	r3, [r7, #7]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d11e      	bne.n	80098f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d009      	beq.n	80098d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	015a      	lsls	r2, r3, #5
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	4413      	add	r3, r2
 80098c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098cc:	461a      	mov	r2, r3
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	0151      	lsls	r1, r2, #5
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	440a      	add	r2, r1
 80098ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098f2:	6013      	str	r3, [r2, #0]
 80098f4:	e097      	b.n	8009a26 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	015a      	lsls	r2, r3, #5
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	4413      	add	r3, r2
 80098fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	0151      	lsls	r1, r2, #5
 8009908:	697a      	ldr	r2, [r7, #20]
 800990a:	440a      	add	r2, r1
 800990c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009910:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009914:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	2b00      	cmp	r3, #0
 800991c:	f000 8083 	beq.w	8009a26 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	f003 030f 	and.w	r3, r3, #15
 8009930:	2101      	movs	r1, #1
 8009932:	fa01 f303 	lsl.w	r3, r1, r3
 8009936:	6979      	ldr	r1, [r7, #20]
 8009938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800993c:	4313      	orrs	r3, r2
 800993e:	634b      	str	r3, [r1, #52]	; 0x34
 8009940:	e071      	b.n	8009a26 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	4413      	add	r3, r2
 800994a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	693a      	ldr	r2, [r7, #16]
 8009952:	0151      	lsls	r1, r2, #5
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	440a      	add	r2, r1
 8009958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800995c:	0cdb      	lsrs	r3, r3, #19
 800995e:	04db      	lsls	r3, r3, #19
 8009960:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	4413      	add	r3, r2
 800996a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996e:	691b      	ldr	r3, [r3, #16]
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	0151      	lsls	r1, r2, #5
 8009974:	697a      	ldr	r2, [r7, #20]
 8009976:	440a      	add	r2, r1
 8009978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800997c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009980:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009984:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	68da      	ldr	r2, [r3, #12]
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	68da      	ldr	r2, [r3, #12]
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	015a      	lsls	r2, r3, #5
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	4413      	add	r3, r2
 80099a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	0151      	lsls	r1, r2, #5
 80099b0:	697a      	ldr	r2, [r7, #20]
 80099b2:	440a      	add	r2, r1
 80099b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	015a      	lsls	r2, r3, #5
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	4413      	add	r3, r2
 80099c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ca:	691a      	ldr	r2, [r3, #16]
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	69db      	ldr	r3, [r3, #28]
 80099d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099d4:	6939      	ldr	r1, [r7, #16]
 80099d6:	0148      	lsls	r0, r1, #5
 80099d8:	6979      	ldr	r1, [r7, #20]
 80099da:	4401      	add	r1, r0
 80099dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80099e0:	4313      	orrs	r3, r2
 80099e2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80099e4:	79fb      	ldrb	r3, [r7, #7]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d10d      	bne.n	8009a06 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d009      	beq.n	8009a06 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	6919      	ldr	r1, [r3, #16]
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	015a      	lsls	r2, r3, #5
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	4413      	add	r3, r2
 80099fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a02:	460a      	mov	r2, r1
 8009a04:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	0151      	lsls	r1, r2, #5
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	440a      	add	r2, r1
 8009a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	371c      	adds	r7, #28
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b087      	sub	sp, #28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	785b      	ldrb	r3, [r3, #1]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d14a      	bne.n	8009ae8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	015a      	lsls	r2, r3, #5
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a6a:	f040 8086 	bne.w	8009b7a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	7812      	ldrb	r2, [r2, #0]
 8009a82:	0151      	lsls	r1, r2, #5
 8009a84:	693a      	ldr	r2, [r7, #16]
 8009a86:	440a      	add	r2, r1
 8009a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	683a      	ldr	r2, [r7, #0]
 8009aa4:	7812      	ldrb	r2, [r2, #0]
 8009aa6:	0151      	lsls	r1, r2, #5
 8009aa8:	693a      	ldr	r2, [r7, #16]
 8009aaa:	440a      	add	r2, r1
 8009aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ab0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ab4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f242 7210 	movw	r2, #10000	; 0x2710
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d902      	bls.n	8009acc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	75fb      	strb	r3, [r7, #23]
          break;
 8009aca:	e056      	b.n	8009b7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	015a      	lsls	r2, r3, #5
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ae4:	d0e7      	beq.n	8009ab6 <USB_EPStopXfer+0x82>
 8009ae6:	e048      	b.n	8009b7a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	015a      	lsls	r2, r3, #5
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	4413      	add	r3, r2
 8009af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b00:	d13b      	bne.n	8009b7a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	7812      	ldrb	r2, [r2, #0]
 8009b16:	0151      	lsls	r1, r2, #5
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	440a      	add	r2, r1
 8009b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b24:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	015a      	lsls	r2, r3, #5
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	4413      	add	r3, r2
 8009b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	7812      	ldrb	r2, [r2, #0]
 8009b3a:	0151      	lsls	r1, r2, #5
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	440a      	add	r2, r1
 8009b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f242 7210 	movw	r2, #10000	; 0x2710
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d902      	bls.n	8009b60 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	75fb      	strb	r3, [r7, #23]
          break;
 8009b5e:	e00c      	b.n	8009b7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	015a      	lsls	r2, r3, #5
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	4413      	add	r3, r2
 8009b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b78:	d0e7      	beq.n	8009b4a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	371c      	adds	r7, #28
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b089      	sub	sp, #36	; 0x24
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	4611      	mov	r1, r2
 8009b94:	461a      	mov	r2, r3
 8009b96:	460b      	mov	r3, r1
 8009b98:	71fb      	strb	r3, [r7, #7]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009ba6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d123      	bne.n	8009bf6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009bae:	88bb      	ldrh	r3, [r7, #4]
 8009bb0:	3303      	adds	r3, #3
 8009bb2:	089b      	lsrs	r3, r3, #2
 8009bb4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	61bb      	str	r3, [r7, #24]
 8009bba:	e018      	b.n	8009bee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009bbc:	79fb      	ldrb	r3, [r7, #7]
 8009bbe:	031a      	lsls	r2, r3, #12
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc8:	461a      	mov	r2, r3
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	3301      	adds	r3, #1
 8009be0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	3301      	adds	r3, #1
 8009be6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	3301      	adds	r3, #1
 8009bec:	61bb      	str	r3, [r7, #24]
 8009bee:	69ba      	ldr	r2, [r7, #24]
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d3e2      	bcc.n	8009bbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3724      	adds	r7, #36	; 0x24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b08b      	sub	sp, #44	; 0x2c
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009c1a:	88fb      	ldrh	r3, [r7, #6]
 8009c1c:	089b      	lsrs	r3, r3, #2
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009c22:	88fb      	ldrh	r3, [r7, #6]
 8009c24:	f003 0303 	and.w	r3, r3, #3
 8009c28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	623b      	str	r3, [r7, #32]
 8009c2e:	e014      	b.n	8009c5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3e:	3301      	adds	r3, #1
 8009c40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	3301      	adds	r3, #1
 8009c46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	3301      	adds	r3, #1
 8009c52:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	3301      	adds	r3, #1
 8009c58:	623b      	str	r3, [r7, #32]
 8009c5a:	6a3a      	ldr	r2, [r7, #32]
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d3e6      	bcc.n	8009c30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009c62:	8bfb      	ldrh	r3, [r7, #30]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d01e      	beq.n	8009ca6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c72:	461a      	mov	r2, r3
 8009c74:	f107 0310 	add.w	r3, r7, #16
 8009c78:	6812      	ldr	r2, [r2, #0]
 8009c7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009c7c:	693a      	ldr	r2, [r7, #16]
 8009c7e:	6a3b      	ldr	r3, [r7, #32]
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	00db      	lsls	r3, r3, #3
 8009c84:	fa22 f303 	lsr.w	r3, r2, r3
 8009c88:	b2da      	uxtb	r2, r3
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	701a      	strb	r2, [r3, #0]
      i++;
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	3301      	adds	r3, #1
 8009c92:	623b      	str	r3, [r7, #32]
      pDest++;
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	3301      	adds	r3, #1
 8009c98:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009c9a:	8bfb      	ldrh	r3, [r7, #30]
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009ca0:	8bfb      	ldrh	r3, [r7, #30]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1ea      	bne.n	8009c7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	372c      	adds	r7, #44	; 0x2c
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	785b      	ldrb	r3, [r3, #1]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d12c      	bne.n	8009d2a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	db12      	blt.n	8009d08 <USB_EPSetStall+0x54>
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00f      	beq.n	8009d08 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	015a      	lsls	r2, r3, #5
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	0151      	lsls	r1, r2, #5
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	440a      	add	r2, r1
 8009cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d06:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	015a      	lsls	r2, r3, #5
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4413      	add	r3, r2
 8009d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	0151      	lsls	r1, r2, #5
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	440a      	add	r2, r1
 8009d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d26:	6013      	str	r3, [r2, #0]
 8009d28:	e02b      	b.n	8009d82 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	015a      	lsls	r2, r3, #5
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	4413      	add	r3, r2
 8009d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	db12      	blt.n	8009d62 <USB_EPSetStall+0xae>
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00f      	beq.n	8009d62 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	015a      	lsls	r2, r3, #5
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	4413      	add	r3, r2
 8009d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	0151      	lsls	r1, r2, #5
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	440a      	add	r2, r1
 8009d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d60:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	015a      	lsls	r2, r3, #5
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	4413      	add	r3, r2
 8009d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	0151      	lsls	r1, r2, #5
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	440a      	add	r2, r1
 8009d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d80:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3714      	adds	r7, #20
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	785b      	ldrb	r3, [r3, #1]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d128      	bne.n	8009dfe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	015a      	lsls	r2, r3, #5
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4413      	add	r3, r2
 8009db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	0151      	lsls	r1, r2, #5
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	440a      	add	r2, r1
 8009dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009dca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	791b      	ldrb	r3, [r3, #4]
 8009dd0:	2b03      	cmp	r3, #3
 8009dd2:	d003      	beq.n	8009ddc <USB_EPClearStall+0x4c>
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	791b      	ldrb	r3, [r3, #4]
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	d138      	bne.n	8009e4e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	0151      	lsls	r1, r2, #5
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	440a      	add	r2, r1
 8009df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dfa:	6013      	str	r3, [r2, #0]
 8009dfc:	e027      	b.n	8009e4e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	015a      	lsls	r2, r3, #5
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4413      	add	r3, r2
 8009e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	0151      	lsls	r1, r2, #5
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	440a      	add	r2, r1
 8009e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	791b      	ldrb	r3, [r3, #4]
 8009e22:	2b03      	cmp	r3, #3
 8009e24:	d003      	beq.n	8009e2e <USB_EPClearStall+0x9e>
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	791b      	ldrb	r3, [r3, #4]
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d10f      	bne.n	8009e4e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	015a      	lsls	r2, r3, #5
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	4413      	add	r3, r2
 8009e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	0151      	lsls	r1, r2, #5
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	440a      	add	r2, r1
 8009e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e4c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009e7e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	78fb      	ldrb	r3, [r7, #3]
 8009e8a:	011b      	lsls	r3, r3, #4
 8009e8c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009e90:	68f9      	ldr	r1, [r7, #12]
 8009e92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e96:	4313      	orrs	r3, r2
 8009e98:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ec2:	f023 0303 	bic.w	r3, r3, #3
 8009ec6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ed6:	f023 0302 	bic.w	r3, r3, #2
 8009eda:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3714      	adds	r7, #20
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b085      	sub	sp, #20
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f04:	f023 0303 	bic.w	r3, r3, #3
 8009f08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f18:	f043 0302 	orr.w	r3, r3, #2
 8009f1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	695b      	ldr	r3, [r3, #20]
 8009f38:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	699b      	ldr	r3, [r3, #24]
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	4013      	ands	r3, r2
 8009f42:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009f44:	68fb      	ldr	r3, [r7, #12]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3714      	adds	r7, #20
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr

08009f52 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b085      	sub	sp, #20
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f6e:	69db      	ldr	r3, [r3, #28]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	4013      	ands	r3, r2
 8009f74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	0c1b      	lsrs	r3, r3, #16
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr

08009f86 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f86:	b480      	push	{r7}
 8009f88:	b085      	sub	sp, #20
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fa2:	69db      	ldr	r3, [r3, #28]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	b29b      	uxth	r3, r3
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3714      	adds	r7, #20
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b085      	sub	sp, #20
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009fca:	78fb      	ldrb	r3, [r7, #3]
 8009fcc:	015a      	lsls	r2, r3, #5
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009fe8:	68bb      	ldr	r3, [r7, #8]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b087      	sub	sp, #28
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	460b      	mov	r3, r1
 800a000:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a018:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a01a:	78fb      	ldrb	r3, [r7, #3]
 800a01c:	f003 030f 	and.w	r3, r3, #15
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	fa22 f303 	lsr.w	r3, r2, r3
 800a026:	01db      	lsls	r3, r3, #7
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	693a      	ldr	r2, [r7, #16]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a030:	78fb      	ldrb	r3, [r7, #3]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	4413      	add	r3, r2
 800a038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	693a      	ldr	r2, [r7, #16]
 800a040:	4013      	ands	r3, r2
 800a042:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a044:	68bb      	ldr	r3, [r7, #8]
}
 800a046:	4618      	mov	r0, r3
 800a048:	371c      	adds	r7, #28
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a052:	b480      	push	{r7}
 800a054:	b083      	sub	sp, #12
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	695b      	ldr	r3, [r3, #20]
 800a05e:	f003 0301 	and.w	r3, r3, #1
}
 800a062:	4618      	mov	r0, r3
 800a064:	370c      	adds	r7, #12
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr

0800a06e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a06e:	b480      	push	{r7}
 800a070:	b085      	sub	sp, #20
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a088:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a08c:	f023 0307 	bic.w	r3, r3, #7
 800a090:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3714      	adds	r7, #20
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b087      	sub	sp, #28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	607a      	str	r2, [r7, #4]
 800a0c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	333c      	adds	r3, #60	; 0x3c
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	4a26      	ldr	r2, [pc, #152]	; (800a16c <USB_EP0_OutStart+0xb8>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d90a      	bls.n	800a0ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0e8:	d101      	bne.n	800a0ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	e037      	b.n	800a15e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a108:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a10c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	697a      	ldr	r2, [r7, #20]
 800a118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a11c:	f043 0318 	orr.w	r3, r3, #24
 800a120:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	697a      	ldr	r2, [r7, #20]
 800a12c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a130:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a134:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a136:	7afb      	ldrb	r3, [r7, #11]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d10f      	bne.n	800a15c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a142:	461a      	mov	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a156:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a15a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	371c      	adds	r7, #28
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	4f54300a 	.word	0x4f54300a

0800a170 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a178:	2300      	movs	r3, #0
 800a17a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	3301      	adds	r3, #1
 800a180:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	4a13      	ldr	r2, [pc, #76]	; (800a1d4 <USB_CoreReset+0x64>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d901      	bls.n	800a18e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e01b      	b.n	800a1c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	2b00      	cmp	r3, #0
 800a194:	daf2      	bge.n	800a17c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a196:	2300      	movs	r3, #0
 800a198:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	f043 0201 	orr.w	r2, r3, #1
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4a09      	ldr	r2, [pc, #36]	; (800a1d4 <USB_CoreReset+0x64>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d901      	bls.n	800a1b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e006      	b.n	800a1c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	f003 0301 	and.w	r3, r3, #1
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d0f0      	beq.n	800a1a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	00030d40 	.word	0x00030d40

0800a1d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a1e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a1e8:	f002 fc8a 	bl	800cb00 <USBD_static_malloc>
 800a1ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d109      	bne.n	800a208 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	32b0      	adds	r2, #176	; 0xb0
 800a1fe:	2100      	movs	r1, #0
 800a200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a204:	2302      	movs	r3, #2
 800a206:	e0d4      	b.n	800a3b2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a208:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a20c:	2100      	movs	r1, #0
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f003 fa59 	bl	800d6c6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	32b0      	adds	r2, #176	; 0xb0
 800a21e:	68f9      	ldr	r1, [r7, #12]
 800a220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	32b0      	adds	r2, #176	; 0xb0
 800a22e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	7c1b      	ldrb	r3, [r3, #16]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d138      	bne.n	800a2b2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a240:	4b5e      	ldr	r3, [pc, #376]	; (800a3bc <USBD_CDC_Init+0x1e4>)
 800a242:	7819      	ldrb	r1, [r3, #0]
 800a244:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a248:	2202      	movs	r2, #2
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f002 fb35 	bl	800c8ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a250:	4b5a      	ldr	r3, [pc, #360]	; (800a3bc <USBD_CDC_Init+0x1e4>)
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	f003 020f 	and.w	r2, r3, #15
 800a258:	6879      	ldr	r1, [r7, #4]
 800a25a:	4613      	mov	r3, r2
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	4413      	add	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	440b      	add	r3, r1
 800a264:	3324      	adds	r3, #36	; 0x24
 800a266:	2201      	movs	r2, #1
 800a268:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a26a:	4b55      	ldr	r3, [pc, #340]	; (800a3c0 <USBD_CDC_Init+0x1e8>)
 800a26c:	7819      	ldrb	r1, [r3, #0]
 800a26e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a272:	2202      	movs	r2, #2
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f002 fb20 	bl	800c8ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a27a:	4b51      	ldr	r3, [pc, #324]	; (800a3c0 <USBD_CDC_Init+0x1e8>)
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	f003 020f 	and.w	r2, r3, #15
 800a282:	6879      	ldr	r1, [r7, #4]
 800a284:	4613      	mov	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4413      	add	r3, r2
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	440b      	add	r3, r1
 800a28e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a292:	2201      	movs	r2, #1
 800a294:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a296:	4b4b      	ldr	r3, [pc, #300]	; (800a3c4 <USBD_CDC_Init+0x1ec>)
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	f003 020f 	and.w	r2, r3, #15
 800a29e:	6879      	ldr	r1, [r7, #4]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	4413      	add	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	440b      	add	r3, r1
 800a2aa:	3326      	adds	r3, #38	; 0x26
 800a2ac:	2210      	movs	r2, #16
 800a2ae:	801a      	strh	r2, [r3, #0]
 800a2b0:	e035      	b.n	800a31e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a2b2:	4b42      	ldr	r3, [pc, #264]	; (800a3bc <USBD_CDC_Init+0x1e4>)
 800a2b4:	7819      	ldrb	r1, [r3, #0]
 800a2b6:	2340      	movs	r3, #64	; 0x40
 800a2b8:	2202      	movs	r2, #2
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f002 fafd 	bl	800c8ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a2c0:	4b3e      	ldr	r3, [pc, #248]	; (800a3bc <USBD_CDC_Init+0x1e4>)
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	f003 020f 	and.w	r2, r3, #15
 800a2c8:	6879      	ldr	r1, [r7, #4]
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4413      	add	r3, r2
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	440b      	add	r3, r1
 800a2d4:	3324      	adds	r3, #36	; 0x24
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a2da:	4b39      	ldr	r3, [pc, #228]	; (800a3c0 <USBD_CDC_Init+0x1e8>)
 800a2dc:	7819      	ldrb	r1, [r3, #0]
 800a2de:	2340      	movs	r3, #64	; 0x40
 800a2e0:	2202      	movs	r2, #2
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f002 fae9 	bl	800c8ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a2e8:	4b35      	ldr	r3, [pc, #212]	; (800a3c0 <USBD_CDC_Init+0x1e8>)
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	f003 020f 	and.w	r2, r3, #15
 800a2f0:	6879      	ldr	r1, [r7, #4]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	4413      	add	r3, r2
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	440b      	add	r3, r1
 800a2fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a300:	2201      	movs	r2, #1
 800a302:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a304:	4b2f      	ldr	r3, [pc, #188]	; (800a3c4 <USBD_CDC_Init+0x1ec>)
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	f003 020f 	and.w	r2, r3, #15
 800a30c:	6879      	ldr	r1, [r7, #4]
 800a30e:	4613      	mov	r3, r2
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	4413      	add	r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	440b      	add	r3, r1
 800a318:	3326      	adds	r3, #38	; 0x26
 800a31a:	2210      	movs	r2, #16
 800a31c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a31e:	4b29      	ldr	r3, [pc, #164]	; (800a3c4 <USBD_CDC_Init+0x1ec>)
 800a320:	7819      	ldrb	r1, [r3, #0]
 800a322:	2308      	movs	r3, #8
 800a324:	2203      	movs	r2, #3
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f002 fac7 	bl	800c8ba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a32c:	4b25      	ldr	r3, [pc, #148]	; (800a3c4 <USBD_CDC_Init+0x1ec>)
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	f003 020f 	and.w	r2, r3, #15
 800a334:	6879      	ldr	r1, [r7, #4]
 800a336:	4613      	mov	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	440b      	add	r3, r1
 800a340:	3324      	adds	r3, #36	; 0x24
 800a342:	2201      	movs	r2, #1
 800a344:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	33b0      	adds	r3, #176	; 0xb0
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4413      	add	r3, r2
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2200      	movs	r2, #0
 800a366:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a37c:	2302      	movs	r3, #2
 800a37e:	e018      	b.n	800a3b2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	7c1b      	ldrb	r3, [r3, #16]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10a      	bne.n	800a39e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a388:	4b0d      	ldr	r3, [pc, #52]	; (800a3c0 <USBD_CDC_Init+0x1e8>)
 800a38a:	7819      	ldrb	r1, [r3, #0]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a392:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f002 fb7e 	bl	800ca98 <USBD_LL_PrepareReceive>
 800a39c:	e008      	b.n	800a3b0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a39e:	4b08      	ldr	r3, [pc, #32]	; (800a3c0 <USBD_CDC_Init+0x1e8>)
 800a3a0:	7819      	ldrb	r1, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a3a8:	2340      	movs	r3, #64	; 0x40
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f002 fb74 	bl	800ca98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	200000b7 	.word	0x200000b7
 800a3c0:	200000b8 	.word	0x200000b8
 800a3c4:	200000b9 	.word	0x200000b9

0800a3c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a3d4:	4b3a      	ldr	r3, [pc, #232]	; (800a4c0 <USBD_CDC_DeInit+0xf8>)
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	4619      	mov	r1, r3
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f002 fa93 	bl	800c906 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a3e0:	4b37      	ldr	r3, [pc, #220]	; (800a4c0 <USBD_CDC_DeInit+0xf8>)
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	f003 020f 	and.w	r2, r3, #15
 800a3e8:	6879      	ldr	r1, [r7, #4]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	4413      	add	r3, r2
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	440b      	add	r3, r1
 800a3f4:	3324      	adds	r3, #36	; 0x24
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a3fa:	4b32      	ldr	r3, [pc, #200]	; (800a4c4 <USBD_CDC_DeInit+0xfc>)
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	4619      	mov	r1, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f002 fa80 	bl	800c906 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a406:	4b2f      	ldr	r3, [pc, #188]	; (800a4c4 <USBD_CDC_DeInit+0xfc>)
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	f003 020f 	and.w	r2, r3, #15
 800a40e:	6879      	ldr	r1, [r7, #4]
 800a410:	4613      	mov	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	440b      	add	r3, r1
 800a41a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a41e:	2200      	movs	r2, #0
 800a420:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a422:	4b29      	ldr	r3, [pc, #164]	; (800a4c8 <USBD_CDC_DeInit+0x100>)
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	4619      	mov	r1, r3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f002 fa6c 	bl	800c906 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a42e:	4b26      	ldr	r3, [pc, #152]	; (800a4c8 <USBD_CDC_DeInit+0x100>)
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	f003 020f 	and.w	r2, r3, #15
 800a436:	6879      	ldr	r1, [r7, #4]
 800a438:	4613      	mov	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	4413      	add	r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	440b      	add	r3, r1
 800a442:	3324      	adds	r3, #36	; 0x24
 800a444:	2200      	movs	r2, #0
 800a446:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a448:	4b1f      	ldr	r3, [pc, #124]	; (800a4c8 <USBD_CDC_DeInit+0x100>)
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	f003 020f 	and.w	r2, r3, #15
 800a450:	6879      	ldr	r1, [r7, #4]
 800a452:	4613      	mov	r3, r2
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4413      	add	r3, r2
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	440b      	add	r3, r1
 800a45c:	3326      	adds	r3, #38	; 0x26
 800a45e:	2200      	movs	r2, #0
 800a460:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	32b0      	adds	r2, #176	; 0xb0
 800a46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d01f      	beq.n	800a4b4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	33b0      	adds	r3, #176	; 0xb0
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	32b0      	adds	r2, #176	; 0xb0
 800a492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a496:	4618      	mov	r0, r3
 800a498:	f002 fb40 	bl	800cb1c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	32b0      	adds	r2, #176	; 0xb0
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	200000b7 	.word	0x200000b7
 800a4c4:	200000b8 	.word	0x200000b8
 800a4c8:	200000b9 	.word	0x200000b9

0800a4cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	32b0      	adds	r2, #176	; 0xb0
 800a4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	e0bf      	b.n	800a67c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a504:	2b00      	cmp	r3, #0
 800a506:	d050      	beq.n	800a5aa <USBD_CDC_Setup+0xde>
 800a508:	2b20      	cmp	r3, #32
 800a50a:	f040 80af 	bne.w	800a66c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	88db      	ldrh	r3, [r3, #6]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d03a      	beq.n	800a58c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	b25b      	sxtb	r3, r3
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	da1b      	bge.n	800a558 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	33b0      	adds	r3, #176	; 0xb0
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4413      	add	r3, r2
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a536:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a538:	683a      	ldr	r2, [r7, #0]
 800a53a:	88d2      	ldrh	r2, [r2, #6]
 800a53c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	88db      	ldrh	r3, [r3, #6]
 800a542:	2b07      	cmp	r3, #7
 800a544:	bf28      	it	cs
 800a546:	2307      	movcs	r3, #7
 800a548:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	89fa      	ldrh	r2, [r7, #14]
 800a54e:	4619      	mov	r1, r3
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f001 fd89 	bl	800c068 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a556:	e090      	b.n	800a67a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	785a      	ldrb	r2, [r3, #1]
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	88db      	ldrh	r3, [r3, #6]
 800a566:	2b3f      	cmp	r3, #63	; 0x3f
 800a568:	d803      	bhi.n	800a572 <USBD_CDC_Setup+0xa6>
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	88db      	ldrh	r3, [r3, #6]
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	e000      	b.n	800a574 <USBD_CDC_Setup+0xa8>
 800a572:	2240      	movs	r2, #64	; 0x40
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a57a:	6939      	ldr	r1, [r7, #16]
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a582:	461a      	mov	r2, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f001 fd9b 	bl	800c0c0 <USBD_CtlPrepareRx>
      break;
 800a58a:	e076      	b.n	800a67a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	33b0      	adds	r3, #176	; 0xb0
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	4413      	add	r3, r2
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	7850      	ldrb	r0, [r2, #1]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	6839      	ldr	r1, [r7, #0]
 800a5a6:	4798      	blx	r3
      break;
 800a5a8:	e067      	b.n	800a67a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	785b      	ldrb	r3, [r3, #1]
 800a5ae:	2b0b      	cmp	r3, #11
 800a5b0:	d851      	bhi.n	800a656 <USBD_CDC_Setup+0x18a>
 800a5b2:	a201      	add	r2, pc, #4	; (adr r2, 800a5b8 <USBD_CDC_Setup+0xec>)
 800a5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b8:	0800a5e9 	.word	0x0800a5e9
 800a5bc:	0800a665 	.word	0x0800a665
 800a5c0:	0800a657 	.word	0x0800a657
 800a5c4:	0800a657 	.word	0x0800a657
 800a5c8:	0800a657 	.word	0x0800a657
 800a5cc:	0800a657 	.word	0x0800a657
 800a5d0:	0800a657 	.word	0x0800a657
 800a5d4:	0800a657 	.word	0x0800a657
 800a5d8:	0800a657 	.word	0x0800a657
 800a5dc:	0800a657 	.word	0x0800a657
 800a5e0:	0800a613 	.word	0x0800a613
 800a5e4:	0800a63d 	.word	0x0800a63d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d107      	bne.n	800a604 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a5f4:	f107 030a 	add.w	r3, r7, #10
 800a5f8:	2202      	movs	r2, #2
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f001 fd33 	bl	800c068 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a602:	e032      	b.n	800a66a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a604:	6839      	ldr	r1, [r7, #0]
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f001 fcbd 	bl	800bf86 <USBD_CtlError>
            ret = USBD_FAIL;
 800a60c:	2303      	movs	r3, #3
 800a60e:	75fb      	strb	r3, [r7, #23]
          break;
 800a610:	e02b      	b.n	800a66a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	2b03      	cmp	r3, #3
 800a61c:	d107      	bne.n	800a62e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a61e:	f107 030d 	add.w	r3, r7, #13
 800a622:	2201      	movs	r2, #1
 800a624:	4619      	mov	r1, r3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f001 fd1e 	bl	800c068 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a62c:	e01d      	b.n	800a66a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f001 fca8 	bl	800bf86 <USBD_CtlError>
            ret = USBD_FAIL;
 800a636:	2303      	movs	r3, #3
 800a638:	75fb      	strb	r3, [r7, #23]
          break;
 800a63a:	e016      	b.n	800a66a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b03      	cmp	r3, #3
 800a646:	d00f      	beq.n	800a668 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f001 fc9b 	bl	800bf86 <USBD_CtlError>
            ret = USBD_FAIL;
 800a650:	2303      	movs	r3, #3
 800a652:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a654:	e008      	b.n	800a668 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f001 fc94 	bl	800bf86 <USBD_CtlError>
          ret = USBD_FAIL;
 800a65e:	2303      	movs	r3, #3
 800a660:	75fb      	strb	r3, [r7, #23]
          break;
 800a662:	e002      	b.n	800a66a <USBD_CDC_Setup+0x19e>
          break;
 800a664:	bf00      	nop
 800a666:	e008      	b.n	800a67a <USBD_CDC_Setup+0x1ae>
          break;
 800a668:	bf00      	nop
      }
      break;
 800a66a:	e006      	b.n	800a67a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f001 fc89 	bl	800bf86 <USBD_CtlError>
      ret = USBD_FAIL;
 800a674:	2303      	movs	r3, #3
 800a676:	75fb      	strb	r3, [r7, #23]
      break;
 800a678:	bf00      	nop
  }

  return (uint8_t)ret;
 800a67a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3718      	adds	r7, #24
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	460b      	mov	r3, r1
 800a68e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a696:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	32b0      	adds	r2, #176	; 0xb0
 800a6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d101      	bne.n	800a6ae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a6aa:	2303      	movs	r3, #3
 800a6ac:	e065      	b.n	800a77a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	32b0      	adds	r2, #176	; 0xb0
 800a6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a6be:	78fb      	ldrb	r3, [r7, #3]
 800a6c0:	f003 020f 	and.w	r2, r3, #15
 800a6c4:	6879      	ldr	r1, [r7, #4]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	440b      	add	r3, r1
 800a6d0:	3318      	adds	r3, #24
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d02f      	beq.n	800a738 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a6d8:	78fb      	ldrb	r3, [r7, #3]
 800a6da:	f003 020f 	and.w	r2, r3, #15
 800a6de:	6879      	ldr	r1, [r7, #4]
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	4413      	add	r3, r2
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	440b      	add	r3, r1
 800a6ea:	3318      	adds	r3, #24
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	78fb      	ldrb	r3, [r7, #3]
 800a6f0:	f003 010f 	and.w	r1, r3, #15
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	00db      	lsls	r3, r3, #3
 800a6fa:	440b      	add	r3, r1
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4403      	add	r3, r0
 800a700:	3348      	adds	r3, #72	; 0x48
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	fbb2 f1f3 	udiv	r1, r2, r3
 800a708:	fb01 f303 	mul.w	r3, r1, r3
 800a70c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d112      	bne.n	800a738 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a712:	78fb      	ldrb	r3, [r7, #3]
 800a714:	f003 020f 	and.w	r2, r3, #15
 800a718:	6879      	ldr	r1, [r7, #4]
 800a71a:	4613      	mov	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	440b      	add	r3, r1
 800a724:	3318      	adds	r3, #24
 800a726:	2200      	movs	r2, #0
 800a728:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a72a:	78f9      	ldrb	r1, [r7, #3]
 800a72c:	2300      	movs	r3, #0
 800a72e:	2200      	movs	r2, #0
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f002 f990 	bl	800ca56 <USBD_LL_Transmit>
 800a736:	e01f      	b.n	800a778 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	33b0      	adds	r3, #176	; 0xb0
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	4413      	add	r3, r2
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	691b      	ldr	r3, [r3, #16]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d010      	beq.n	800a778 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	33b0      	adds	r3, #176	; 0xb0
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a774:	78fa      	ldrb	r2, [r7, #3]
 800a776:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b084      	sub	sp, #16
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	460b      	mov	r3, r1
 800a78c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	32b0      	adds	r2, #176	; 0xb0
 800a798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a79c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	32b0      	adds	r2, #176	; 0xb0
 800a7a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d101      	bne.n	800a7b4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e01a      	b.n	800a7ea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a7b4:	78fb      	ldrb	r3, [r7, #3]
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f002 f98e 	bl	800cada <USBD_LL_GetRxDataSize>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	33b0      	adds	r3, #176	; 0xb0
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a7de:	68fa      	ldr	r2, [r7, #12]
 800a7e0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b084      	sub	sp, #16
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	32b0      	adds	r2, #176	; 0xb0
 800a804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a808:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d101      	bne.n	800a814 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a810:	2303      	movs	r3, #3
 800a812:	e025      	b.n	800a860 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	33b0      	adds	r3, #176	; 0xb0
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4413      	add	r3, r2
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d01a      	beq.n	800a85e <USBD_CDC_EP0_RxReady+0x6c>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a82e:	2bff      	cmp	r3, #255	; 0xff
 800a830:	d015      	beq.n	800a85e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	33b0      	adds	r3, #176	; 0xb0
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	4413      	add	r3, r2
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a84a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a852:	b292      	uxth	r2, r2
 800a854:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	22ff      	movs	r2, #255	; 0xff
 800a85a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b086      	sub	sp, #24
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a870:	2182      	movs	r1, #130	; 0x82
 800a872:	4818      	ldr	r0, [pc, #96]	; (800a8d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a874:	f000 fd4f 	bl	800b316 <USBD_GetEpDesc>
 800a878:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a87a:	2101      	movs	r1, #1
 800a87c:	4815      	ldr	r0, [pc, #84]	; (800a8d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a87e:	f000 fd4a 	bl	800b316 <USBD_GetEpDesc>
 800a882:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a884:	2181      	movs	r1, #129	; 0x81
 800a886:	4813      	ldr	r0, [pc, #76]	; (800a8d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a888:	f000 fd45 	bl	800b316 <USBD_GetEpDesc>
 800a88c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	2210      	movs	r2, #16
 800a898:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d006      	beq.n	800a8ae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8a8:	711a      	strb	r2, [r3, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d006      	beq.n	800a8c2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8bc:	711a      	strb	r2, [r3, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2243      	movs	r2, #67	; 0x43
 800a8c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a8c8:	4b02      	ldr	r3, [pc, #8]	; (800a8d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3718      	adds	r7, #24
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	20000074 	.word	0x20000074

0800a8d8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b086      	sub	sp, #24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a8e0:	2182      	movs	r1, #130	; 0x82
 800a8e2:	4818      	ldr	r0, [pc, #96]	; (800a944 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a8e4:	f000 fd17 	bl	800b316 <USBD_GetEpDesc>
 800a8e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a8ea:	2101      	movs	r1, #1
 800a8ec:	4815      	ldr	r0, [pc, #84]	; (800a944 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a8ee:	f000 fd12 	bl	800b316 <USBD_GetEpDesc>
 800a8f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a8f4:	2181      	movs	r1, #129	; 0x81
 800a8f6:	4813      	ldr	r0, [pc, #76]	; (800a944 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a8f8:	f000 fd0d 	bl	800b316 <USBD_GetEpDesc>
 800a8fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d002      	beq.n	800a90a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	2210      	movs	r2, #16
 800a908:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d006      	beq.n	800a91e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	2200      	movs	r2, #0
 800a914:	711a      	strb	r2, [r3, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f042 0202 	orr.w	r2, r2, #2
 800a91c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d006      	beq.n	800a932 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2200      	movs	r2, #0
 800a928:	711a      	strb	r2, [r3, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f042 0202 	orr.w	r2, r2, #2
 800a930:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2243      	movs	r2, #67	; 0x43
 800a936:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a938:	4b02      	ldr	r3, [pc, #8]	; (800a944 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3718      	adds	r7, #24
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	20000074 	.word	0x20000074

0800a948 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b086      	sub	sp, #24
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a950:	2182      	movs	r1, #130	; 0x82
 800a952:	4818      	ldr	r0, [pc, #96]	; (800a9b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a954:	f000 fcdf 	bl	800b316 <USBD_GetEpDesc>
 800a958:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a95a:	2101      	movs	r1, #1
 800a95c:	4815      	ldr	r0, [pc, #84]	; (800a9b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a95e:	f000 fcda 	bl	800b316 <USBD_GetEpDesc>
 800a962:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a964:	2181      	movs	r1, #129	; 0x81
 800a966:	4813      	ldr	r0, [pc, #76]	; (800a9b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a968:	f000 fcd5 	bl	800b316 <USBD_GetEpDesc>
 800a96c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d002      	beq.n	800a97a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	2210      	movs	r2, #16
 800a978:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d006      	beq.n	800a98e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	2200      	movs	r2, #0
 800a984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a988:	711a      	strb	r2, [r3, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d006      	beq.n	800a9a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a99c:	711a      	strb	r2, [r3, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2243      	movs	r2, #67	; 0x43
 800a9a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a9a8:	4b02      	ldr	r3, [pc, #8]	; (800a9b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3718      	adds	r7, #24
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	20000074 	.word	0x20000074

0800a9b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	220a      	movs	r2, #10
 800a9c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a9c6:	4b03      	ldr	r3, [pc, #12]	; (800a9d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr
 800a9d4:	20000030 	.word	0x20000030

0800a9d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d101      	bne.n	800a9ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	e009      	b.n	800aa00 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	33b0      	adds	r3, #176	; 0xb0
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4413      	add	r3, r2
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	32b0      	adds	r2, #176	; 0xb0
 800aa22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa26:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d101      	bne.n	800aa32 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	e008      	b.n	800aa44 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	68ba      	ldr	r2, [r7, #8]
 800aa36:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	371c      	adds	r7, #28
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	32b0      	adds	r2, #176	; 0xb0
 800aa64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d101      	bne.n	800aa74 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800aa70:	2303      	movs	r3, #3
 800aa72:	e004      	b.n	800aa7e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	683a      	ldr	r2, [r7, #0]
 800aa78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3714      	adds	r7, #20
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr
	...

0800aa8c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	32b0      	adds	r2, #176	; 0xb0
 800aa9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaa2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	32b0      	adds	r2, #176	; 0xb0
 800aab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d101      	bne.n	800aabe <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800aaba:	2303      	movs	r3, #3
 800aabc:	e025      	b.n	800ab0a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d11f      	bne.n	800ab08 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800aad0:	4b10      	ldr	r3, [pc, #64]	; (800ab14 <USBD_CDC_TransmitPacket+0x88>)
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	f003 020f 	and.w	r2, r3, #15
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	4613      	mov	r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4413      	add	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	4403      	add	r3, r0
 800aaea:	3318      	adds	r3, #24
 800aaec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800aaee:	4b09      	ldr	r3, [pc, #36]	; (800ab14 <USBD_CDC_TransmitPacket+0x88>)
 800aaf0:	7819      	ldrb	r1, [r3, #0]
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f001 ffa9 	bl	800ca56 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ab04:	2300      	movs	r3, #0
 800ab06:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	200000b7 	.word	0x200000b7

0800ab18 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	32b0      	adds	r2, #176	; 0xb0
 800ab2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab2e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	32b0      	adds	r2, #176	; 0xb0
 800ab3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d101      	bne.n	800ab46 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ab42:	2303      	movs	r3, #3
 800ab44:	e018      	b.n	800ab78 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	7c1b      	ldrb	r3, [r3, #16]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10a      	bne.n	800ab64 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab4e:	4b0c      	ldr	r3, [pc, #48]	; (800ab80 <USBD_CDC_ReceivePacket+0x68>)
 800ab50:	7819      	ldrb	r1, [r3, #0]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f001 ff9b 	bl	800ca98 <USBD_LL_PrepareReceive>
 800ab62:	e008      	b.n	800ab76 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab64:	4b06      	ldr	r3, [pc, #24]	; (800ab80 <USBD_CDC_ReceivePacket+0x68>)
 800ab66:	7819      	ldrb	r1, [r3, #0]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab6e:	2340      	movs	r3, #64	; 0x40
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f001 ff91 	bl	800ca98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	200000b8 	.word	0x200000b8

0800ab84 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	4613      	mov	r3, r2
 800ab90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d101      	bne.n	800ab9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e01f      	b.n	800abdc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2200      	movs	r2, #0
 800abb0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d003      	beq.n	800abc2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	68ba      	ldr	r2, [r7, #8]
 800abbe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	79fa      	ldrb	r2, [r7, #7]
 800abce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f001 fe0b 	bl	800c7ec <USBD_LL_Init>
 800abd6:	4603      	mov	r3, r0
 800abd8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800abda:	7dfb      	ldrb	r3, [r7, #23]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3718      	adds	r7, #24
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abee:	2300      	movs	r3, #0
 800abf0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d101      	bne.n	800abfc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800abf8:	2303      	movs	r3, #3
 800abfa:	e025      	b.n	800ac48 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	683a      	ldr	r2, [r7, #0]
 800ac00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	32ae      	adds	r2, #174	; 0xae
 800ac0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00f      	beq.n	800ac38 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	32ae      	adds	r2, #174	; 0xae
 800ac22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac28:	f107 020e 	add.w	r2, r7, #14
 800ac2c:	4610      	mov	r0, r2
 800ac2e:	4798      	blx	r3
 800ac30:	4602      	mov	r2, r0
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ac3e:	1c5a      	adds	r2, r3, #1
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f001 fe13 	bl	800c884 <USBD_LL_Start>
 800ac5e:	4603      	mov	r3, r0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac70:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	370c      	adds	r7, #12
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr

0800ac7e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b084      	sub	sp, #16
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	460b      	mov	r3, r1
 800ac88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d009      	beq.n	800acac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	78fa      	ldrb	r2, [r7, #3]
 800aca2:	4611      	mov	r1, r2
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	4798      	blx	r3
 800aca8:	4603      	mov	r3, r0
 800acaa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800acac:	7bfb      	ldrb	r3, [r7, #15]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b084      	sub	sp, #16
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	460b      	mov	r3, r1
 800acc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800acc2:	2300      	movs	r3, #0
 800acc4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	78fa      	ldrb	r2, [r7, #3]
 800acd0:	4611      	mov	r1, r2
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	4798      	blx	r3
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800acdc:	2303      	movs	r3, #3
 800acde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b084      	sub	sp, #16
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800acfa:	6839      	ldr	r1, [r7, #0]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f001 f908 	bl	800bf12 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2201      	movs	r2, #1
 800ad06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ad10:	461a      	mov	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ad1e:	f003 031f 	and.w	r3, r3, #31
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	d01a      	beq.n	800ad5c <USBD_LL_SetupStage+0x72>
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	d822      	bhi.n	800ad70 <USBD_LL_SetupStage+0x86>
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d002      	beq.n	800ad34 <USBD_LL_SetupStage+0x4a>
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d00a      	beq.n	800ad48 <USBD_LL_SetupStage+0x5e>
 800ad32:	e01d      	b.n	800ad70 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 fb5f 	bl	800b400 <USBD_StdDevReq>
 800ad42:	4603      	mov	r3, r0
 800ad44:	73fb      	strb	r3, [r7, #15]
      break;
 800ad46:	e020      	b.n	800ad8a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 fbc7 	bl	800b4e4 <USBD_StdItfReq>
 800ad56:	4603      	mov	r3, r0
 800ad58:	73fb      	strb	r3, [r7, #15]
      break;
 800ad5a:	e016      	b.n	800ad8a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ad62:	4619      	mov	r1, r3
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 fc29 	bl	800b5bc <USBD_StdEPReq>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ad6e:	e00c      	b.n	800ad8a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ad76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f001 fde0 	bl	800c944 <USBD_LL_StallEP>
 800ad84:	4603      	mov	r3, r0
 800ad86:	73fb      	strb	r3, [r7, #15]
      break;
 800ad88:	bf00      	nop
  }

  return ret;
 800ad8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b086      	sub	sp, #24
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	607a      	str	r2, [r7, #4]
 800ada0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ada2:	2300      	movs	r3, #0
 800ada4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ada6:	7afb      	ldrb	r3, [r7, #11]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d16e      	bne.n	800ae8a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800adb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800adba:	2b03      	cmp	r3, #3
 800adbc:	f040 8098 	bne.w	800aef0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	689a      	ldr	r2, [r3, #8]
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d913      	bls.n	800adf4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	689a      	ldr	r2, [r3, #8]
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	1ad2      	subs	r2, r2, r3
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	68da      	ldr	r2, [r3, #12]
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	4293      	cmp	r3, r2
 800ade4:	bf28      	it	cs
 800ade6:	4613      	movcs	r3, r2
 800ade8:	461a      	mov	r2, r3
 800adea:	6879      	ldr	r1, [r7, #4]
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f001 f984 	bl	800c0fa <USBD_CtlContinueRx>
 800adf2:	e07d      	b.n	800aef0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800adfa:	f003 031f 	and.w	r3, r3, #31
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d014      	beq.n	800ae2c <USBD_LL_DataOutStage+0x98>
 800ae02:	2b02      	cmp	r3, #2
 800ae04:	d81d      	bhi.n	800ae42 <USBD_LL_DataOutStage+0xae>
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d002      	beq.n	800ae10 <USBD_LL_DataOutStage+0x7c>
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d003      	beq.n	800ae16 <USBD_LL_DataOutStage+0x82>
 800ae0e:	e018      	b.n	800ae42 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ae10:	2300      	movs	r3, #0
 800ae12:	75bb      	strb	r3, [r7, #22]
            break;
 800ae14:	e018      	b.n	800ae48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	4619      	mov	r1, r3
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f000 fa5e 	bl	800b2e2 <USBD_CoreFindIF>
 800ae26:	4603      	mov	r3, r0
 800ae28:	75bb      	strb	r3, [r7, #22]
            break;
 800ae2a:	e00d      	b.n	800ae48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	4619      	mov	r1, r3
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f000 fa60 	bl	800b2fc <USBD_CoreFindEP>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	75bb      	strb	r3, [r7, #22]
            break;
 800ae40:	e002      	b.n	800ae48 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ae42:	2300      	movs	r3, #0
 800ae44:	75bb      	strb	r3, [r7, #22]
            break;
 800ae46:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ae48:	7dbb      	ldrb	r3, [r7, #22]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d119      	bne.n	800ae82 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	2b03      	cmp	r3, #3
 800ae58:	d113      	bne.n	800ae82 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ae5a:	7dba      	ldrb	r2, [r7, #22]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	32ae      	adds	r2, #174	; 0xae
 800ae60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00b      	beq.n	800ae82 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ae6a:	7dba      	ldrb	r2, [r7, #22]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ae72:	7dba      	ldrb	r2, [r7, #22]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	32ae      	adds	r2, #174	; 0xae
 800ae78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f001 f94a 	bl	800c11c <USBD_CtlSendStatus>
 800ae88:	e032      	b.n	800aef0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ae8a:	7afb      	ldrb	r3, [r7, #11]
 800ae8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	4619      	mov	r1, r3
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f000 fa31 	bl	800b2fc <USBD_CoreFindEP>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae9e:	7dbb      	ldrb	r3, [r7, #22]
 800aea0:	2bff      	cmp	r3, #255	; 0xff
 800aea2:	d025      	beq.n	800aef0 <USBD_LL_DataOutStage+0x15c>
 800aea4:	7dbb      	ldrb	r3, [r7, #22]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d122      	bne.n	800aef0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	2b03      	cmp	r3, #3
 800aeb4:	d117      	bne.n	800aee6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800aeb6:	7dba      	ldrb	r2, [r7, #22]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	32ae      	adds	r2, #174	; 0xae
 800aebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00f      	beq.n	800aee6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800aec6:	7dba      	ldrb	r2, [r7, #22]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800aece:	7dba      	ldrb	r2, [r7, #22]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	32ae      	adds	r2, #174	; 0xae
 800aed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	7afa      	ldrb	r2, [r7, #11]
 800aedc:	4611      	mov	r1, r2
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	4798      	blx	r3
 800aee2:	4603      	mov	r3, r0
 800aee4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800aee6:	7dfb      	ldrb	r3, [r7, #23]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d001      	beq.n	800aef0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800aeec:	7dfb      	ldrb	r3, [r7, #23]
 800aeee:	e000      	b.n	800aef2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3718      	adds	r7, #24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b086      	sub	sp, #24
 800aefe:	af00      	add	r7, sp, #0
 800af00:	60f8      	str	r0, [r7, #12]
 800af02:	460b      	mov	r3, r1
 800af04:	607a      	str	r2, [r7, #4]
 800af06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800af08:	7afb      	ldrb	r3, [r7, #11]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d16f      	bne.n	800afee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	3314      	adds	r3, #20
 800af12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d15a      	bne.n	800afd4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	689a      	ldr	r2, [r3, #8]
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	429a      	cmp	r2, r3
 800af28:	d914      	bls.n	800af54 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	689a      	ldr	r2, [r3, #8]
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	1ad2      	subs	r2, r2, r3
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	461a      	mov	r2, r3
 800af3e:	6879      	ldr	r1, [r7, #4]
 800af40:	68f8      	ldr	r0, [r7, #12]
 800af42:	f001 f8ac 	bl	800c09e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af46:	2300      	movs	r3, #0
 800af48:	2200      	movs	r2, #0
 800af4a:	2100      	movs	r1, #0
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f001 fda3 	bl	800ca98 <USBD_LL_PrepareReceive>
 800af52:	e03f      	b.n	800afd4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	68da      	ldr	r2, [r3, #12]
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d11c      	bne.n	800af9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	685a      	ldr	r2, [r3, #4]
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800af68:	429a      	cmp	r2, r3
 800af6a:	d316      	bcc.n	800af9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	685a      	ldr	r2, [r3, #4]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800af76:	429a      	cmp	r2, r3
 800af78:	d20f      	bcs.n	800af9a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800af7a:	2200      	movs	r2, #0
 800af7c:	2100      	movs	r1, #0
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f001 f88d 	bl	800c09e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af8c:	2300      	movs	r3, #0
 800af8e:	2200      	movs	r2, #0
 800af90:	2100      	movs	r1, #0
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f001 fd80 	bl	800ca98 <USBD_LL_PrepareReceive>
 800af98:	e01c      	b.n	800afd4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	2b03      	cmp	r3, #3
 800afa4:	d10f      	bne.n	800afc6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d009      	beq.n	800afc6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800afc6:	2180      	movs	r1, #128	; 0x80
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f001 fcbb 	bl	800c944 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f001 f8b7 	bl	800c142 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d03a      	beq.n	800b054 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	f7ff fe42 	bl	800ac68 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800afec:	e032      	b.n	800b054 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800afee:	7afb      	ldrb	r3, [r7, #11]
 800aff0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	4619      	mov	r1, r3
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	f000 f97f 	bl	800b2fc <USBD_CoreFindEP>
 800affe:	4603      	mov	r3, r0
 800b000:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b002:	7dfb      	ldrb	r3, [r7, #23]
 800b004:	2bff      	cmp	r3, #255	; 0xff
 800b006:	d025      	beq.n	800b054 <USBD_LL_DataInStage+0x15a>
 800b008:	7dfb      	ldrb	r3, [r7, #23]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d122      	bne.n	800b054 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b03      	cmp	r3, #3
 800b018:	d11c      	bne.n	800b054 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b01a:	7dfa      	ldrb	r2, [r7, #23]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	32ae      	adds	r2, #174	; 0xae
 800b020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b024:	695b      	ldr	r3, [r3, #20]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d014      	beq.n	800b054 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b02a:	7dfa      	ldrb	r2, [r7, #23]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b032:	7dfa      	ldrb	r2, [r7, #23]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	32ae      	adds	r2, #174	; 0xae
 800b038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b03c:	695b      	ldr	r3, [r3, #20]
 800b03e:	7afa      	ldrb	r2, [r7, #11]
 800b040:	4611      	mov	r1, r2
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	4798      	blx	r3
 800b046:	4603      	mov	r3, r0
 800b048:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b04a:	7dbb      	ldrb	r3, [r7, #22]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b050:	7dbb      	ldrb	r3, [r7, #22]
 800b052:	e000      	b.n	800b056 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3718      	adds	r7, #24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b084      	sub	sp, #16
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b066:	2300      	movs	r3, #0
 800b068:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2201      	movs	r2, #1
 800b06e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b096:	2b00      	cmp	r3, #0
 800b098:	d014      	beq.n	800b0c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00e      	beq.n	800b0c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	6852      	ldr	r2, [r2, #4]
 800b0b2:	b2d2      	uxtb	r2, r2
 800b0b4:	4611      	mov	r1, r2
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	4798      	blx	r3
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b0c0:	2303      	movs	r3, #3
 800b0c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b0c4:	2340      	movs	r3, #64	; 0x40
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f001 fbf5 	bl	800c8ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2240      	movs	r2, #64	; 0x40
 800b0dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b0e0:	2340      	movs	r3, #64	; 0x40
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2180      	movs	r1, #128	; 0x80
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f001 fbe7 	bl	800c8ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2240      	movs	r2, #64	; 0x40
 800b0f6:	621a      	str	r2, [r3, #32]

  return ret;
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b102:	b480      	push	{r7}
 800b104:	b083      	sub	sp, #12
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	460b      	mov	r3, r1
 800b10c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	78fa      	ldrb	r2, [r7, #3]
 800b112:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b122:	b480      	push	{r7}
 800b124:	b083      	sub	sp, #12
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b130:	b2da      	uxtb	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2204      	movs	r2, #4
 800b13c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	370c      	adds	r7, #12
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr

0800b14e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b14e:	b480      	push	{r7}
 800b150:	b083      	sub	sp, #12
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	2b04      	cmp	r3, #4
 800b160:	d106      	bne.n	800b170 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	370c      	adds	r7, #12
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr

0800b17e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b082      	sub	sp, #8
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	2b03      	cmp	r3, #3
 800b190:	d110      	bne.n	800b1b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00b      	beq.n	800b1b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a2:	69db      	ldr	r3, [r3, #28]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d005      	beq.n	800b1b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ae:	69db      	ldr	r3, [r3, #28]
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b1b4:	2300      	movs	r3, #0
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b082      	sub	sp, #8
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	32ae      	adds	r2, #174	; 0xae
 800b1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d101      	bne.n	800b1e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b1dc:	2303      	movs	r3, #3
 800b1de:	e01c      	b.n	800b21a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	2b03      	cmp	r3, #3
 800b1ea:	d115      	bne.n	800b218 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	32ae      	adds	r2, #174	; 0xae
 800b1f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1fa:	6a1b      	ldr	r3, [r3, #32]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d00b      	beq.n	800b218 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	32ae      	adds	r2, #174	; 0xae
 800b20a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b20e:	6a1b      	ldr	r3, [r3, #32]
 800b210:	78fa      	ldrb	r2, [r7, #3]
 800b212:	4611      	mov	r1, r2
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b082      	sub	sp, #8
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
 800b22a:	460b      	mov	r3, r1
 800b22c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	32ae      	adds	r2, #174	; 0xae
 800b238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d101      	bne.n	800b244 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b240:	2303      	movs	r3, #3
 800b242:	e01c      	b.n	800b27e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	2b03      	cmp	r3, #3
 800b24e:	d115      	bne.n	800b27c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	32ae      	adds	r2, #174	; 0xae
 800b25a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b260:	2b00      	cmp	r3, #0
 800b262:	d00b      	beq.n	800b27c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	32ae      	adds	r2, #174	; 0xae
 800b26e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b274:	78fa      	ldrb	r2, [r7, #3]
 800b276:	4611      	mov	r1, r2
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3708      	adds	r7, #8
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b286:	b480      	push	{r7}
 800b288:	b083      	sub	sp, #12
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00e      	beq.n	800b2d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	6852      	ldr	r2, [r2, #4]
 800b2c6:	b2d2      	uxtb	r2, r2
 800b2c8:	4611      	mov	r1, r2
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	4798      	blx	r3
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d001      	beq.n	800b2d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b2e2:	b480      	push	{r7}
 800b2e4:	b083      	sub	sp, #12
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b2ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	460b      	mov	r3, r1
 800b306:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b308:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b086      	sub	sp, #24
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	460b      	mov	r3, r1
 800b320:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b32a:	2300      	movs	r3, #0
 800b32c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	885b      	ldrh	r3, [r3, #2]
 800b332:	b29a      	uxth	r2, r3
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	b29b      	uxth	r3, r3
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d920      	bls.n	800b380 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	b29b      	uxth	r3, r3
 800b344:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b346:	e013      	b.n	800b370 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b348:	f107 030a 	add.w	r3, r7, #10
 800b34c:	4619      	mov	r1, r3
 800b34e:	6978      	ldr	r0, [r7, #20]
 800b350:	f000 f81b 	bl	800b38a <USBD_GetNextDesc>
 800b354:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	785b      	ldrb	r3, [r3, #1]
 800b35a:	2b05      	cmp	r3, #5
 800b35c:	d108      	bne.n	800b370 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	789b      	ldrb	r3, [r3, #2]
 800b366:	78fa      	ldrb	r2, [r7, #3]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d008      	beq.n	800b37e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b36c:	2300      	movs	r3, #0
 800b36e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	885b      	ldrh	r3, [r3, #2]
 800b374:	b29a      	uxth	r2, r3
 800b376:	897b      	ldrh	r3, [r7, #10]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d8e5      	bhi.n	800b348 <USBD_GetEpDesc+0x32>
 800b37c:	e000      	b.n	800b380 <USBD_GetEpDesc+0x6a>
          break;
 800b37e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b380:	693b      	ldr	r3, [r7, #16]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3718      	adds	r7, #24
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b38a:	b480      	push	{r7}
 800b38c:	b085      	sub	sp, #20
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	881a      	ldrh	r2, [r3, #0]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	4413      	add	r3, r2
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b087      	sub	sp, #28
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b3e2:	8a3b      	ldrh	r3, [r7, #16]
 800b3e4:	021b      	lsls	r3, r3, #8
 800b3e6:	b21a      	sxth	r2, r3
 800b3e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	b21b      	sxth	r3, r3
 800b3f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b3f2:	89fb      	ldrh	r3, [r7, #14]
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	371c      	adds	r7, #28
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b40a:	2300      	movs	r3, #0
 800b40c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b416:	2b40      	cmp	r3, #64	; 0x40
 800b418:	d005      	beq.n	800b426 <USBD_StdDevReq+0x26>
 800b41a:	2b40      	cmp	r3, #64	; 0x40
 800b41c:	d857      	bhi.n	800b4ce <USBD_StdDevReq+0xce>
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00f      	beq.n	800b442 <USBD_StdDevReq+0x42>
 800b422:	2b20      	cmp	r3, #32
 800b424:	d153      	bne.n	800b4ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	32ae      	adds	r2, #174	; 0xae
 800b430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	4798      	blx	r3
 800b43c:	4603      	mov	r3, r0
 800b43e:	73fb      	strb	r3, [r7, #15]
      break;
 800b440:	e04a      	b.n	800b4d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	785b      	ldrb	r3, [r3, #1]
 800b446:	2b09      	cmp	r3, #9
 800b448:	d83b      	bhi.n	800b4c2 <USBD_StdDevReq+0xc2>
 800b44a:	a201      	add	r2, pc, #4	; (adr r2, 800b450 <USBD_StdDevReq+0x50>)
 800b44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b450:	0800b4a5 	.word	0x0800b4a5
 800b454:	0800b4b9 	.word	0x0800b4b9
 800b458:	0800b4c3 	.word	0x0800b4c3
 800b45c:	0800b4af 	.word	0x0800b4af
 800b460:	0800b4c3 	.word	0x0800b4c3
 800b464:	0800b483 	.word	0x0800b483
 800b468:	0800b479 	.word	0x0800b479
 800b46c:	0800b4c3 	.word	0x0800b4c3
 800b470:	0800b49b 	.word	0x0800b49b
 800b474:	0800b48d 	.word	0x0800b48d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fa3c 	bl	800b8f8 <USBD_GetDescriptor>
          break;
 800b480:	e024      	b.n	800b4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b482:	6839      	ldr	r1, [r7, #0]
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 fba1 	bl	800bbcc <USBD_SetAddress>
          break;
 800b48a:	e01f      	b.n	800b4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b48c:	6839      	ldr	r1, [r7, #0]
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 fbe0 	bl	800bc54 <USBD_SetConfig>
 800b494:	4603      	mov	r3, r0
 800b496:	73fb      	strb	r3, [r7, #15]
          break;
 800b498:	e018      	b.n	800b4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b49a:	6839      	ldr	r1, [r7, #0]
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fc83 	bl	800bda8 <USBD_GetConfig>
          break;
 800b4a2:	e013      	b.n	800b4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b4a4:	6839      	ldr	r1, [r7, #0]
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 fcb4 	bl	800be14 <USBD_GetStatus>
          break;
 800b4ac:	e00e      	b.n	800b4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fce3 	bl	800be7c <USBD_SetFeature>
          break;
 800b4b6:	e009      	b.n	800b4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b4b8:	6839      	ldr	r1, [r7, #0]
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fd07 	bl	800bece <USBD_ClrFeature>
          break;
 800b4c0:	e004      	b.n	800b4cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b4c2:	6839      	ldr	r1, [r7, #0]
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fd5e 	bl	800bf86 <USBD_CtlError>
          break;
 800b4ca:	bf00      	nop
      }
      break;
 800b4cc:	e004      	b.n	800b4d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b4ce:	6839      	ldr	r1, [r7, #0]
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 fd58 	bl	800bf86 <USBD_CtlError>
      break;
 800b4d6:	bf00      	nop
  }

  return ret;
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop

0800b4e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4fa:	2b40      	cmp	r3, #64	; 0x40
 800b4fc:	d005      	beq.n	800b50a <USBD_StdItfReq+0x26>
 800b4fe:	2b40      	cmp	r3, #64	; 0x40
 800b500:	d852      	bhi.n	800b5a8 <USBD_StdItfReq+0xc4>
 800b502:	2b00      	cmp	r3, #0
 800b504:	d001      	beq.n	800b50a <USBD_StdItfReq+0x26>
 800b506:	2b20      	cmp	r3, #32
 800b508:	d14e      	bne.n	800b5a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b510:	b2db      	uxtb	r3, r3
 800b512:	3b01      	subs	r3, #1
 800b514:	2b02      	cmp	r3, #2
 800b516:	d840      	bhi.n	800b59a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	889b      	ldrh	r3, [r3, #4]
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d836      	bhi.n	800b590 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	889b      	ldrh	r3, [r3, #4]
 800b526:	b2db      	uxtb	r3, r3
 800b528:	4619      	mov	r1, r3
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f7ff fed9 	bl	800b2e2 <USBD_CoreFindIF>
 800b530:	4603      	mov	r3, r0
 800b532:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b534:	7bbb      	ldrb	r3, [r7, #14]
 800b536:	2bff      	cmp	r3, #255	; 0xff
 800b538:	d01d      	beq.n	800b576 <USBD_StdItfReq+0x92>
 800b53a:	7bbb      	ldrb	r3, [r7, #14]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d11a      	bne.n	800b576 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b540:	7bba      	ldrb	r2, [r7, #14]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	32ae      	adds	r2, #174	; 0xae
 800b546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00f      	beq.n	800b570 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b550:	7bba      	ldrb	r2, [r7, #14]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b558:	7bba      	ldrb	r2, [r7, #14]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	32ae      	adds	r2, #174	; 0xae
 800b55e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	6839      	ldr	r1, [r7, #0]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	4798      	blx	r3
 800b56a:	4603      	mov	r3, r0
 800b56c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b56e:	e004      	b.n	800b57a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b570:	2303      	movs	r3, #3
 800b572:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b574:	e001      	b.n	800b57a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b576:	2303      	movs	r3, #3
 800b578:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	88db      	ldrh	r3, [r3, #6]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d110      	bne.n	800b5a4 <USBD_StdItfReq+0xc0>
 800b582:	7bfb      	ldrb	r3, [r7, #15]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d10d      	bne.n	800b5a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 fdc7 	bl	800c11c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b58e:	e009      	b.n	800b5a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b590:	6839      	ldr	r1, [r7, #0]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 fcf7 	bl	800bf86 <USBD_CtlError>
          break;
 800b598:	e004      	b.n	800b5a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b59a:	6839      	ldr	r1, [r7, #0]
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 fcf2 	bl	800bf86 <USBD_CtlError>
          break;
 800b5a2:	e000      	b.n	800b5a6 <USBD_StdItfReq+0xc2>
          break;
 800b5a4:	bf00      	nop
      }
      break;
 800b5a6:	e004      	b.n	800b5b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b5a8:	6839      	ldr	r1, [r7, #0]
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 fceb 	bl	800bf86 <USBD_CtlError>
      break;
 800b5b0:	bf00      	nop
  }

  return ret;
 800b5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	889b      	ldrh	r3, [r3, #4]
 800b5ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b5d8:	2b40      	cmp	r3, #64	; 0x40
 800b5da:	d007      	beq.n	800b5ec <USBD_StdEPReq+0x30>
 800b5dc:	2b40      	cmp	r3, #64	; 0x40
 800b5de:	f200 817f 	bhi.w	800b8e0 <USBD_StdEPReq+0x324>
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d02a      	beq.n	800b63c <USBD_StdEPReq+0x80>
 800b5e6:	2b20      	cmp	r3, #32
 800b5e8:	f040 817a 	bne.w	800b8e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b5ec:	7bbb      	ldrb	r3, [r7, #14]
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f7ff fe83 	bl	800b2fc <USBD_CoreFindEP>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b5fa:	7b7b      	ldrb	r3, [r7, #13]
 800b5fc:	2bff      	cmp	r3, #255	; 0xff
 800b5fe:	f000 8174 	beq.w	800b8ea <USBD_StdEPReq+0x32e>
 800b602:	7b7b      	ldrb	r3, [r7, #13]
 800b604:	2b00      	cmp	r3, #0
 800b606:	f040 8170 	bne.w	800b8ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b60a:	7b7a      	ldrb	r2, [r7, #13]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b612:	7b7a      	ldrb	r2, [r7, #13]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	32ae      	adds	r2, #174	; 0xae
 800b618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f000 8163 	beq.w	800b8ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b624:	7b7a      	ldrb	r2, [r7, #13]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	32ae      	adds	r2, #174	; 0xae
 800b62a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	6839      	ldr	r1, [r7, #0]
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	4798      	blx	r3
 800b636:	4603      	mov	r3, r0
 800b638:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b63a:	e156      	b.n	800b8ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	785b      	ldrb	r3, [r3, #1]
 800b640:	2b03      	cmp	r3, #3
 800b642:	d008      	beq.n	800b656 <USBD_StdEPReq+0x9a>
 800b644:	2b03      	cmp	r3, #3
 800b646:	f300 8145 	bgt.w	800b8d4 <USBD_StdEPReq+0x318>
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	f000 809b 	beq.w	800b786 <USBD_StdEPReq+0x1ca>
 800b650:	2b01      	cmp	r3, #1
 800b652:	d03c      	beq.n	800b6ce <USBD_StdEPReq+0x112>
 800b654:	e13e      	b.n	800b8d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	2b02      	cmp	r3, #2
 800b660:	d002      	beq.n	800b668 <USBD_StdEPReq+0xac>
 800b662:	2b03      	cmp	r3, #3
 800b664:	d016      	beq.n	800b694 <USBD_StdEPReq+0xd8>
 800b666:	e02c      	b.n	800b6c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b668:	7bbb      	ldrb	r3, [r7, #14]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00d      	beq.n	800b68a <USBD_StdEPReq+0xce>
 800b66e:	7bbb      	ldrb	r3, [r7, #14]
 800b670:	2b80      	cmp	r3, #128	; 0x80
 800b672:	d00a      	beq.n	800b68a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b674:	7bbb      	ldrb	r3, [r7, #14]
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f001 f963 	bl	800c944 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b67e:	2180      	movs	r1, #128	; 0x80
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f001 f95f 	bl	800c944 <USBD_LL_StallEP>
 800b686:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b688:	e020      	b.n	800b6cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b68a:	6839      	ldr	r1, [r7, #0]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 fc7a 	bl	800bf86 <USBD_CtlError>
              break;
 800b692:	e01b      	b.n	800b6cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	885b      	ldrh	r3, [r3, #2]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d10e      	bne.n	800b6ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b69c:	7bbb      	ldrb	r3, [r7, #14]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00b      	beq.n	800b6ba <USBD_StdEPReq+0xfe>
 800b6a2:	7bbb      	ldrb	r3, [r7, #14]
 800b6a4:	2b80      	cmp	r3, #128	; 0x80
 800b6a6:	d008      	beq.n	800b6ba <USBD_StdEPReq+0xfe>
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	88db      	ldrh	r3, [r3, #6]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d104      	bne.n	800b6ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b6b0:	7bbb      	ldrb	r3, [r7, #14]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f001 f945 	bl	800c944 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 fd2e 	bl	800c11c <USBD_CtlSendStatus>

              break;
 800b6c0:	e004      	b.n	800b6cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b6c2:	6839      	ldr	r1, [r7, #0]
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 fc5e 	bl	800bf86 <USBD_CtlError>
              break;
 800b6ca:	bf00      	nop
          }
          break;
 800b6cc:	e107      	b.n	800b8de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	d002      	beq.n	800b6e0 <USBD_StdEPReq+0x124>
 800b6da:	2b03      	cmp	r3, #3
 800b6dc:	d016      	beq.n	800b70c <USBD_StdEPReq+0x150>
 800b6de:	e04b      	b.n	800b778 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6e0:	7bbb      	ldrb	r3, [r7, #14]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00d      	beq.n	800b702 <USBD_StdEPReq+0x146>
 800b6e6:	7bbb      	ldrb	r3, [r7, #14]
 800b6e8:	2b80      	cmp	r3, #128	; 0x80
 800b6ea:	d00a      	beq.n	800b702 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b6ec:	7bbb      	ldrb	r3, [r7, #14]
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f001 f927 	bl	800c944 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6f6:	2180      	movs	r1, #128	; 0x80
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f001 f923 	bl	800c944 <USBD_LL_StallEP>
 800b6fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b700:	e040      	b.n	800b784 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b702:	6839      	ldr	r1, [r7, #0]
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 fc3e 	bl	800bf86 <USBD_CtlError>
              break;
 800b70a:	e03b      	b.n	800b784 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	885b      	ldrh	r3, [r3, #2]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d136      	bne.n	800b782 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b714:	7bbb      	ldrb	r3, [r7, #14]
 800b716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d004      	beq.n	800b728 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b71e:	7bbb      	ldrb	r3, [r7, #14]
 800b720:	4619      	mov	r1, r3
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f001 f92d 	bl	800c982 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fcf7 	bl	800c11c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b72e:	7bbb      	ldrb	r3, [r7, #14]
 800b730:	4619      	mov	r1, r3
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f7ff fde2 	bl	800b2fc <USBD_CoreFindEP>
 800b738:	4603      	mov	r3, r0
 800b73a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b73c:	7b7b      	ldrb	r3, [r7, #13]
 800b73e:	2bff      	cmp	r3, #255	; 0xff
 800b740:	d01f      	beq.n	800b782 <USBD_StdEPReq+0x1c6>
 800b742:	7b7b      	ldrb	r3, [r7, #13]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d11c      	bne.n	800b782 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b748:	7b7a      	ldrb	r2, [r7, #13]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b750:	7b7a      	ldrb	r2, [r7, #13]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	32ae      	adds	r2, #174	; 0xae
 800b756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d010      	beq.n	800b782 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b760:	7b7a      	ldrb	r2, [r7, #13]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	32ae      	adds	r2, #174	; 0xae
 800b766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	4798      	blx	r3
 800b772:	4603      	mov	r3, r0
 800b774:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b776:	e004      	b.n	800b782 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b778:	6839      	ldr	r1, [r7, #0]
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fc03 	bl	800bf86 <USBD_CtlError>
              break;
 800b780:	e000      	b.n	800b784 <USBD_StdEPReq+0x1c8>
              break;
 800b782:	bf00      	nop
          }
          break;
 800b784:	e0ab      	b.n	800b8de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	2b02      	cmp	r3, #2
 800b790:	d002      	beq.n	800b798 <USBD_StdEPReq+0x1dc>
 800b792:	2b03      	cmp	r3, #3
 800b794:	d032      	beq.n	800b7fc <USBD_StdEPReq+0x240>
 800b796:	e097      	b.n	800b8c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b798:	7bbb      	ldrb	r3, [r7, #14]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d007      	beq.n	800b7ae <USBD_StdEPReq+0x1f2>
 800b79e:	7bbb      	ldrb	r3, [r7, #14]
 800b7a0:	2b80      	cmp	r3, #128	; 0x80
 800b7a2:	d004      	beq.n	800b7ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b7a4:	6839      	ldr	r1, [r7, #0]
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 fbed 	bl	800bf86 <USBD_CtlError>
                break;
 800b7ac:	e091      	b.n	800b8d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	da0b      	bge.n	800b7ce <USBD_StdEPReq+0x212>
 800b7b6:	7bbb      	ldrb	r3, [r7, #14]
 800b7b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b7bc:	4613      	mov	r3, r2
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	4413      	add	r3, r2
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	3310      	adds	r3, #16
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	3304      	adds	r3, #4
 800b7cc:	e00b      	b.n	800b7e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b7ce:	7bbb      	ldrb	r3, [r7, #14]
 800b7d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	4413      	add	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	3304      	adds	r3, #4
 800b7e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	2202      	movs	r2, #2
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fc37 	bl	800c068 <USBD_CtlSendData>
              break;
 800b7fa:	e06a      	b.n	800b8d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b7fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b800:	2b00      	cmp	r3, #0
 800b802:	da11      	bge.n	800b828 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b804:	7bbb      	ldrb	r3, [r7, #14]
 800b806:	f003 020f 	and.w	r2, r3, #15
 800b80a:	6879      	ldr	r1, [r7, #4]
 800b80c:	4613      	mov	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4413      	add	r3, r2
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	440b      	add	r3, r1
 800b816:	3324      	adds	r3, #36	; 0x24
 800b818:	881b      	ldrh	r3, [r3, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d117      	bne.n	800b84e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b81e:	6839      	ldr	r1, [r7, #0]
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 fbb0 	bl	800bf86 <USBD_CtlError>
                  break;
 800b826:	e054      	b.n	800b8d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b828:	7bbb      	ldrb	r3, [r7, #14]
 800b82a:	f003 020f 	and.w	r2, r3, #15
 800b82e:	6879      	ldr	r1, [r7, #4]
 800b830:	4613      	mov	r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	4413      	add	r3, r2
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	440b      	add	r3, r1
 800b83a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b83e:	881b      	ldrh	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d104      	bne.n	800b84e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b844:	6839      	ldr	r1, [r7, #0]
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 fb9d 	bl	800bf86 <USBD_CtlError>
                  break;
 800b84c:	e041      	b.n	800b8d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b84e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b852:	2b00      	cmp	r3, #0
 800b854:	da0b      	bge.n	800b86e <USBD_StdEPReq+0x2b2>
 800b856:	7bbb      	ldrb	r3, [r7, #14]
 800b858:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b85c:	4613      	mov	r3, r2
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	4413      	add	r3, r2
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	3310      	adds	r3, #16
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	4413      	add	r3, r2
 800b86a:	3304      	adds	r3, #4
 800b86c:	e00b      	b.n	800b886 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b86e:	7bbb      	ldrb	r3, [r7, #14]
 800b870:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b874:	4613      	mov	r3, r2
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	4413      	add	r3, r2
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	4413      	add	r3, r2
 800b884:	3304      	adds	r3, #4
 800b886:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b888:	7bbb      	ldrb	r3, [r7, #14]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d002      	beq.n	800b894 <USBD_StdEPReq+0x2d8>
 800b88e:	7bbb      	ldrb	r3, [r7, #14]
 800b890:	2b80      	cmp	r3, #128	; 0x80
 800b892:	d103      	bne.n	800b89c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	2200      	movs	r2, #0
 800b898:	601a      	str	r2, [r3, #0]
 800b89a:	e00e      	b.n	800b8ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b89c:	7bbb      	ldrb	r3, [r7, #14]
 800b89e:	4619      	mov	r1, r3
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f001 f88d 	bl	800c9c0 <USBD_LL_IsStallEP>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d003      	beq.n	800b8b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	601a      	str	r2, [r3, #0]
 800b8b2:	e002      	b.n	800b8ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	2202      	movs	r2, #2
 800b8be:	4619      	mov	r1, r3
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 fbd1 	bl	800c068 <USBD_CtlSendData>
              break;
 800b8c6:	e004      	b.n	800b8d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b8c8:	6839      	ldr	r1, [r7, #0]
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fb5b 	bl	800bf86 <USBD_CtlError>
              break;
 800b8d0:	bf00      	nop
          }
          break;
 800b8d2:	e004      	b.n	800b8de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b8d4:	6839      	ldr	r1, [r7, #0]
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 fb55 	bl	800bf86 <USBD_CtlError>
          break;
 800b8dc:	bf00      	nop
      }
      break;
 800b8de:	e005      	b.n	800b8ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b8e0:	6839      	ldr	r1, [r7, #0]
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 fb4f 	bl	800bf86 <USBD_CtlError>
      break;
 800b8e8:	e000      	b.n	800b8ec <USBD_StdEPReq+0x330>
      break;
 800b8ea:	bf00      	nop
  }

  return ret;
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
	...

0800b8f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b902:	2300      	movs	r3, #0
 800b904:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b906:	2300      	movs	r3, #0
 800b908:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b90a:	2300      	movs	r3, #0
 800b90c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	885b      	ldrh	r3, [r3, #2]
 800b912:	0a1b      	lsrs	r3, r3, #8
 800b914:	b29b      	uxth	r3, r3
 800b916:	3b01      	subs	r3, #1
 800b918:	2b06      	cmp	r3, #6
 800b91a:	f200 8128 	bhi.w	800bb6e <USBD_GetDescriptor+0x276>
 800b91e:	a201      	add	r2, pc, #4	; (adr r2, 800b924 <USBD_GetDescriptor+0x2c>)
 800b920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b924:	0800b941 	.word	0x0800b941
 800b928:	0800b959 	.word	0x0800b959
 800b92c:	0800b999 	.word	0x0800b999
 800b930:	0800bb6f 	.word	0x0800bb6f
 800b934:	0800bb6f 	.word	0x0800bb6f
 800b938:	0800bb0f 	.word	0x0800bb0f
 800b93c:	0800bb3b 	.word	0x0800bb3b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	7c12      	ldrb	r2, [r2, #16]
 800b94c:	f107 0108 	add.w	r1, r7, #8
 800b950:	4610      	mov	r0, r2
 800b952:	4798      	blx	r3
 800b954:	60f8      	str	r0, [r7, #12]
      break;
 800b956:	e112      	b.n	800bb7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	7c1b      	ldrb	r3, [r3, #16]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d10d      	bne.n	800b97c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b968:	f107 0208 	add.w	r2, r7, #8
 800b96c:	4610      	mov	r0, r2
 800b96e:	4798      	blx	r3
 800b970:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	3301      	adds	r3, #1
 800b976:	2202      	movs	r2, #2
 800b978:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b97a:	e100      	b.n	800bb7e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b984:	f107 0208 	add.w	r2, r7, #8
 800b988:	4610      	mov	r0, r2
 800b98a:	4798      	blx	r3
 800b98c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	3301      	adds	r3, #1
 800b992:	2202      	movs	r2, #2
 800b994:	701a      	strb	r2, [r3, #0]
      break;
 800b996:	e0f2      	b.n	800bb7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	885b      	ldrh	r3, [r3, #2]
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	2b05      	cmp	r3, #5
 800b9a0:	f200 80ac 	bhi.w	800bafc <USBD_GetDescriptor+0x204>
 800b9a4:	a201      	add	r2, pc, #4	; (adr r2, 800b9ac <USBD_GetDescriptor+0xb4>)
 800b9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9aa:	bf00      	nop
 800b9ac:	0800b9c5 	.word	0x0800b9c5
 800b9b0:	0800b9f9 	.word	0x0800b9f9
 800b9b4:	0800ba2d 	.word	0x0800ba2d
 800b9b8:	0800ba61 	.word	0x0800ba61
 800b9bc:	0800ba95 	.word	0x0800ba95
 800b9c0:	0800bac9 	.word	0x0800bac9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00b      	beq.n	800b9e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	7c12      	ldrb	r2, [r2, #16]
 800b9dc:	f107 0108 	add.w	r1, r7, #8
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	4798      	blx	r3
 800b9e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9e6:	e091      	b.n	800bb0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9e8:	6839      	ldr	r1, [r7, #0]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 facb 	bl	800bf86 <USBD_CtlError>
            err++;
 800b9f0:	7afb      	ldrb	r3, [r7, #11]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b9f6:	e089      	b.n	800bb0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d00b      	beq.n	800ba1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	7c12      	ldrb	r2, [r2, #16]
 800ba10:	f107 0108 	add.w	r1, r7, #8
 800ba14:	4610      	mov	r0, r2
 800ba16:	4798      	blx	r3
 800ba18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba1a:	e077      	b.n	800bb0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba1c:	6839      	ldr	r1, [r7, #0]
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 fab1 	bl	800bf86 <USBD_CtlError>
            err++;
 800ba24:	7afb      	ldrb	r3, [r7, #11]
 800ba26:	3301      	adds	r3, #1
 800ba28:	72fb      	strb	r3, [r7, #11]
          break;
 800ba2a:	e06f      	b.n	800bb0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00b      	beq.n	800ba50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	7c12      	ldrb	r2, [r2, #16]
 800ba44:	f107 0108 	add.w	r1, r7, #8
 800ba48:	4610      	mov	r0, r2
 800ba4a:	4798      	blx	r3
 800ba4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba4e:	e05d      	b.n	800bb0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba50:	6839      	ldr	r1, [r7, #0]
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 fa97 	bl	800bf86 <USBD_CtlError>
            err++;
 800ba58:	7afb      	ldrb	r3, [r7, #11]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	72fb      	strb	r3, [r7, #11]
          break;
 800ba5e:	e055      	b.n	800bb0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba66:	691b      	ldr	r3, [r3, #16]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00b      	beq.n	800ba84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	7c12      	ldrb	r2, [r2, #16]
 800ba78:	f107 0108 	add.w	r1, r7, #8
 800ba7c:	4610      	mov	r0, r2
 800ba7e:	4798      	blx	r3
 800ba80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba82:	e043      	b.n	800bb0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba84:	6839      	ldr	r1, [r7, #0]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 fa7d 	bl	800bf86 <USBD_CtlError>
            err++;
 800ba8c:	7afb      	ldrb	r3, [r7, #11]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	72fb      	strb	r3, [r7, #11]
          break;
 800ba92:	e03b      	b.n	800bb0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba9a:	695b      	ldr	r3, [r3, #20]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00b      	beq.n	800bab8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baa6:	695b      	ldr	r3, [r3, #20]
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	7c12      	ldrb	r2, [r2, #16]
 800baac:	f107 0108 	add.w	r1, r7, #8
 800bab0:	4610      	mov	r0, r2
 800bab2:	4798      	blx	r3
 800bab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bab6:	e029      	b.n	800bb0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bab8:	6839      	ldr	r1, [r7, #0]
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 fa63 	bl	800bf86 <USBD_CtlError>
            err++;
 800bac0:	7afb      	ldrb	r3, [r7, #11]
 800bac2:	3301      	adds	r3, #1
 800bac4:	72fb      	strb	r3, [r7, #11]
          break;
 800bac6:	e021      	b.n	800bb0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bace:	699b      	ldr	r3, [r3, #24]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d00b      	beq.n	800baec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bada:	699b      	ldr	r3, [r3, #24]
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	7c12      	ldrb	r2, [r2, #16]
 800bae0:	f107 0108 	add.w	r1, r7, #8
 800bae4:	4610      	mov	r0, r2
 800bae6:	4798      	blx	r3
 800bae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800baea:	e00f      	b.n	800bb0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800baec:	6839      	ldr	r1, [r7, #0]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 fa49 	bl	800bf86 <USBD_CtlError>
            err++;
 800baf4:	7afb      	ldrb	r3, [r7, #11]
 800baf6:	3301      	adds	r3, #1
 800baf8:	72fb      	strb	r3, [r7, #11]
          break;
 800bafa:	e007      	b.n	800bb0c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bafc:	6839      	ldr	r1, [r7, #0]
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 fa41 	bl	800bf86 <USBD_CtlError>
          err++;
 800bb04:	7afb      	ldrb	r3, [r7, #11]
 800bb06:	3301      	adds	r3, #1
 800bb08:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bb0a:	bf00      	nop
      }
      break;
 800bb0c:	e037      	b.n	800bb7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	7c1b      	ldrb	r3, [r3, #16]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d109      	bne.n	800bb2a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb1e:	f107 0208 	add.w	r2, r7, #8
 800bb22:	4610      	mov	r0, r2
 800bb24:	4798      	blx	r3
 800bb26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb28:	e029      	b.n	800bb7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 fa2a 	bl	800bf86 <USBD_CtlError>
        err++;
 800bb32:	7afb      	ldrb	r3, [r7, #11]
 800bb34:	3301      	adds	r3, #1
 800bb36:	72fb      	strb	r3, [r7, #11]
      break;
 800bb38:	e021      	b.n	800bb7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	7c1b      	ldrb	r3, [r3, #16]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10d      	bne.n	800bb5e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb4a:	f107 0208 	add.w	r2, r7, #8
 800bb4e:	4610      	mov	r0, r2
 800bb50:	4798      	blx	r3
 800bb52:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	3301      	adds	r3, #1
 800bb58:	2207      	movs	r2, #7
 800bb5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb5c:	e00f      	b.n	800bb7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 fa10 	bl	800bf86 <USBD_CtlError>
        err++;
 800bb66:	7afb      	ldrb	r3, [r7, #11]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	72fb      	strb	r3, [r7, #11]
      break;
 800bb6c:	e007      	b.n	800bb7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bb6e:	6839      	ldr	r1, [r7, #0]
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 fa08 	bl	800bf86 <USBD_CtlError>
      err++;
 800bb76:	7afb      	ldrb	r3, [r7, #11]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	72fb      	strb	r3, [r7, #11]
      break;
 800bb7c:	bf00      	nop
  }

  if (err != 0U)
 800bb7e:	7afb      	ldrb	r3, [r7, #11]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d11e      	bne.n	800bbc2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	88db      	ldrh	r3, [r3, #6]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d016      	beq.n	800bbba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bb8c:	893b      	ldrh	r3, [r7, #8]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00e      	beq.n	800bbb0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	88da      	ldrh	r2, [r3, #6]
 800bb96:	893b      	ldrh	r3, [r7, #8]
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	bf28      	it	cs
 800bb9c:	4613      	movcs	r3, r2
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bba2:	893b      	ldrh	r3, [r7, #8]
 800bba4:	461a      	mov	r2, r3
 800bba6:	68f9      	ldr	r1, [r7, #12]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 fa5d 	bl	800c068 <USBD_CtlSendData>
 800bbae:	e009      	b.n	800bbc4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bbb0:	6839      	ldr	r1, [r7, #0]
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f9e7 	bl	800bf86 <USBD_CtlError>
 800bbb8:	e004      	b.n	800bbc4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 faae 	bl	800c11c <USBD_CtlSendStatus>
 800bbc0:	e000      	b.n	800bbc4 <USBD_GetDescriptor+0x2cc>
    return;
 800bbc2:	bf00      	nop
  }
}
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop

0800bbcc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	889b      	ldrh	r3, [r3, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d131      	bne.n	800bc42 <USBD_SetAddress+0x76>
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	88db      	ldrh	r3, [r3, #6]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d12d      	bne.n	800bc42 <USBD_SetAddress+0x76>
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	885b      	ldrh	r3, [r3, #2]
 800bbea:	2b7f      	cmp	r3, #127	; 0x7f
 800bbec:	d829      	bhi.n	800bc42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	885b      	ldrh	r3, [r3, #2]
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	2b03      	cmp	r3, #3
 800bc04:	d104      	bne.n	800bc10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bc06:	6839      	ldr	r1, [r7, #0]
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f9bc 	bl	800bf86 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc0e:	e01d      	b.n	800bc4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	7bfa      	ldrb	r2, [r7, #15]
 800bc14:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bc18:	7bfb      	ldrb	r3, [r7, #15]
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 fefb 	bl	800ca18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 fa7a 	bl	800c11c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d004      	beq.n	800bc38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2202      	movs	r2, #2
 800bc32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc36:	e009      	b.n	800bc4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc40:	e004      	b.n	800bc4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bc42:	6839      	ldr	r1, [r7, #0]
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 f99e 	bl	800bf86 <USBD_CtlError>
  }
}
 800bc4a:	bf00      	nop
 800bc4c:	bf00      	nop
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	885b      	ldrh	r3, [r3, #2]
 800bc66:	b2da      	uxtb	r2, r3
 800bc68:	4b4e      	ldr	r3, [pc, #312]	; (800bda4 <USBD_SetConfig+0x150>)
 800bc6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bc6c:	4b4d      	ldr	r3, [pc, #308]	; (800bda4 <USBD_SetConfig+0x150>)
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d905      	bls.n	800bc80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bc74:	6839      	ldr	r1, [r7, #0]
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 f985 	bl	800bf86 <USBD_CtlError>
    return USBD_FAIL;
 800bc7c:	2303      	movs	r3, #3
 800bc7e:	e08c      	b.n	800bd9a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	d002      	beq.n	800bc92 <USBD_SetConfig+0x3e>
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	d029      	beq.n	800bce4 <USBD_SetConfig+0x90>
 800bc90:	e075      	b.n	800bd7e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bc92:	4b44      	ldr	r3, [pc, #272]	; (800bda4 <USBD_SetConfig+0x150>)
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d020      	beq.n	800bcdc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bc9a:	4b42      	ldr	r3, [pc, #264]	; (800bda4 <USBD_SetConfig+0x150>)
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bca4:	4b3f      	ldr	r3, [pc, #252]	; (800bda4 <USBD_SetConfig+0x150>)
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	4619      	mov	r1, r3
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f7fe ffe7 	bl	800ac7e <USBD_SetClassConfig>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bcb4:	7bfb      	ldrb	r3, [r7, #15]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d008      	beq.n	800bccc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bcba:	6839      	ldr	r1, [r7, #0]
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 f962 	bl	800bf86 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2202      	movs	r2, #2
 800bcc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bcca:	e065      	b.n	800bd98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 fa25 	bl	800c11c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2203      	movs	r2, #3
 800bcd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bcda:	e05d      	b.n	800bd98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 fa1d 	bl	800c11c <USBD_CtlSendStatus>
      break;
 800bce2:	e059      	b.n	800bd98 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bce4:	4b2f      	ldr	r3, [pc, #188]	; (800bda4 <USBD_SetConfig+0x150>)
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d112      	bne.n	800bd12 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2202      	movs	r2, #2
 800bcf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bcf4:	4b2b      	ldr	r3, [pc, #172]	; (800bda4 <USBD_SetConfig+0x150>)
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bcfe:	4b29      	ldr	r3, [pc, #164]	; (800bda4 <USBD_SetConfig+0x150>)
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	4619      	mov	r1, r3
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f7fe ffd6 	bl	800acb6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 fa06 	bl	800c11c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bd10:	e042      	b.n	800bd98 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bd12:	4b24      	ldr	r3, [pc, #144]	; (800bda4 <USBD_SetConfig+0x150>)
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	461a      	mov	r2, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d02a      	beq.n	800bd76 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	4619      	mov	r1, r3
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f7fe ffc4 	bl	800acb6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bd2e:	4b1d      	ldr	r3, [pc, #116]	; (800bda4 <USBD_SetConfig+0x150>)
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	461a      	mov	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bd38:	4b1a      	ldr	r3, [pc, #104]	; (800bda4 <USBD_SetConfig+0x150>)
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f7fe ff9d 	bl	800ac7e <USBD_SetClassConfig>
 800bd44:	4603      	mov	r3, r0
 800bd46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00f      	beq.n	800bd6e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bd4e:	6839      	ldr	r1, [r7, #0]
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 f918 	bl	800bf86 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f7fe ffa9 	bl	800acb6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2202      	movs	r2, #2
 800bd68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bd6c:	e014      	b.n	800bd98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 f9d4 	bl	800c11c <USBD_CtlSendStatus>
      break;
 800bd74:	e010      	b.n	800bd98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 f9d0 	bl	800c11c <USBD_CtlSendStatus>
      break;
 800bd7c:	e00c      	b.n	800bd98 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bd7e:	6839      	ldr	r1, [r7, #0]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 f900 	bl	800bf86 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bd86:	4b07      	ldr	r3, [pc, #28]	; (800bda4 <USBD_SetConfig+0x150>)
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f7fe ff92 	bl	800acb6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bd92:	2303      	movs	r3, #3
 800bd94:	73fb      	strb	r3, [r7, #15]
      break;
 800bd96:	bf00      	nop
  }

  return ret;
 800bd98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	20000588 	.word	0x20000588

0800bda8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	88db      	ldrh	r3, [r3, #6]
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d004      	beq.n	800bdc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bdba:	6839      	ldr	r1, [r7, #0]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 f8e2 	bl	800bf86 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bdc2:	e023      	b.n	800be0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	2b02      	cmp	r3, #2
 800bdce:	dc02      	bgt.n	800bdd6 <USBD_GetConfig+0x2e>
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	dc03      	bgt.n	800bddc <USBD_GetConfig+0x34>
 800bdd4:	e015      	b.n	800be02 <USBD_GetConfig+0x5a>
 800bdd6:	2b03      	cmp	r3, #3
 800bdd8:	d00b      	beq.n	800bdf2 <USBD_GetConfig+0x4a>
 800bdda:	e012      	b.n	800be02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	3308      	adds	r3, #8
 800bde6:	2201      	movs	r2, #1
 800bde8:	4619      	mov	r1, r3
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 f93c 	bl	800c068 <USBD_CtlSendData>
        break;
 800bdf0:	e00c      	b.n	800be0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 f934 	bl	800c068 <USBD_CtlSendData>
        break;
 800be00:	e004      	b.n	800be0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800be02:	6839      	ldr	r1, [r7, #0]
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 f8be 	bl	800bf86 <USBD_CtlError>
        break;
 800be0a:	bf00      	nop
}
 800be0c:	bf00      	nop
 800be0e:	3708      	adds	r7, #8
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be24:	b2db      	uxtb	r3, r3
 800be26:	3b01      	subs	r3, #1
 800be28:	2b02      	cmp	r3, #2
 800be2a:	d81e      	bhi.n	800be6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	88db      	ldrh	r3, [r3, #6]
 800be30:	2b02      	cmp	r3, #2
 800be32:	d004      	beq.n	800be3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f8a5 	bl	800bf86 <USBD_CtlError>
        break;
 800be3c:	e01a      	b.n	800be74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2201      	movs	r2, #1
 800be42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d005      	beq.n	800be5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	f043 0202 	orr.w	r2, r3, #2
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	330c      	adds	r3, #12
 800be5e:	2202      	movs	r2, #2
 800be60:	4619      	mov	r1, r3
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 f900 	bl	800c068 <USBD_CtlSendData>
      break;
 800be68:	e004      	b.n	800be74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800be6a:	6839      	ldr	r1, [r7, #0]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 f88a 	bl	800bf86 <USBD_CtlError>
      break;
 800be72:	bf00      	nop
  }
}
 800be74:	bf00      	nop
 800be76:	3708      	adds	r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	885b      	ldrh	r3, [r3, #2]
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d107      	bne.n	800be9e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2201      	movs	r2, #1
 800be92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 f940 	bl	800c11c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800be9c:	e013      	b.n	800bec6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	885b      	ldrh	r3, [r3, #2]
 800bea2:	2b02      	cmp	r3, #2
 800bea4:	d10b      	bne.n	800bebe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	889b      	ldrh	r3, [r3, #4]
 800beaa:	0a1b      	lsrs	r3, r3, #8
 800beac:	b29b      	uxth	r3, r3
 800beae:	b2da      	uxtb	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 f930 	bl	800c11c <USBD_CtlSendStatus>
}
 800bebc:	e003      	b.n	800bec6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bebe:	6839      	ldr	r1, [r7, #0]
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 f860 	bl	800bf86 <USBD_CtlError>
}
 800bec6:	bf00      	nop
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b082      	sub	sp, #8
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
 800bed6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	3b01      	subs	r3, #1
 800bee2:	2b02      	cmp	r3, #2
 800bee4:	d80b      	bhi.n	800befe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	885b      	ldrh	r3, [r3, #2]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d10c      	bne.n	800bf08 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f910 	bl	800c11c <USBD_CtlSendStatus>
      }
      break;
 800befc:	e004      	b.n	800bf08 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800befe:	6839      	ldr	r1, [r7, #0]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 f840 	bl	800bf86 <USBD_CtlError>
      break;
 800bf06:	e000      	b.n	800bf0a <USBD_ClrFeature+0x3c>
      break;
 800bf08:	bf00      	nop
  }
}
 800bf0a:	bf00      	nop
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b084      	sub	sp, #16
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	781a      	ldrb	r2, [r3, #0]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	781a      	ldrb	r2, [r3, #0]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	3301      	adds	r3, #1
 800bf3a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bf3c:	68f8      	ldr	r0, [r7, #12]
 800bf3e:	f7ff fa41 	bl	800b3c4 <SWAPBYTE>
 800bf42:	4603      	mov	r3, r0
 800bf44:	461a      	mov	r2, r3
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	3301      	adds	r3, #1
 800bf54:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bf56:	68f8      	ldr	r0, [r7, #12]
 800bf58:	f7ff fa34 	bl	800b3c4 <SWAPBYTE>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	461a      	mov	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	3301      	adds	r3, #1
 800bf68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f7ff fa27 	bl	800b3c4 <SWAPBYTE>
 800bf76:	4603      	mov	r3, r0
 800bf78:	461a      	mov	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	80da      	strh	r2, [r3, #6]
}
 800bf7e:	bf00      	nop
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b082      	sub	sp, #8
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
 800bf8e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf90:	2180      	movs	r1, #128	; 0x80
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 fcd6 	bl	800c944 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bf98:	2100      	movs	r1, #0
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fcd2 	bl	800c944 <USBD_LL_StallEP>
}
 800bfa0:	bf00      	nop
 800bfa2:	3708      	adds	r7, #8
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b086      	sub	sp, #24
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d036      	beq.n	800c02c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bfc2:	6938      	ldr	r0, [r7, #16]
 800bfc4:	f000 f836 	bl	800c034 <USBD_GetLen>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	3301      	adds	r3, #1
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	005b      	lsls	r3, r3, #1
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bfd6:	7dfb      	ldrb	r3, [r7, #23]
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	4413      	add	r3, r2
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	7812      	ldrb	r2, [r2, #0]
 800bfe0:	701a      	strb	r2, [r3, #0]
  idx++;
 800bfe2:	7dfb      	ldrb	r3, [r7, #23]
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bfe8:	7dfb      	ldrb	r3, [r7, #23]
 800bfea:	68ba      	ldr	r2, [r7, #8]
 800bfec:	4413      	add	r3, r2
 800bfee:	2203      	movs	r2, #3
 800bff0:	701a      	strb	r2, [r3, #0]
  idx++;
 800bff2:	7dfb      	ldrb	r3, [r7, #23]
 800bff4:	3301      	adds	r3, #1
 800bff6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bff8:	e013      	b.n	800c022 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bffa:	7dfb      	ldrb	r3, [r7, #23]
 800bffc:	68ba      	ldr	r2, [r7, #8]
 800bffe:	4413      	add	r3, r2
 800c000:	693a      	ldr	r2, [r7, #16]
 800c002:	7812      	ldrb	r2, [r2, #0]
 800c004:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	3301      	adds	r3, #1
 800c00a:	613b      	str	r3, [r7, #16]
    idx++;
 800c00c:	7dfb      	ldrb	r3, [r7, #23]
 800c00e:	3301      	adds	r3, #1
 800c010:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c012:	7dfb      	ldrb	r3, [r7, #23]
 800c014:	68ba      	ldr	r2, [r7, #8]
 800c016:	4413      	add	r3, r2
 800c018:	2200      	movs	r2, #0
 800c01a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c01c:	7dfb      	ldrb	r3, [r7, #23]
 800c01e:	3301      	adds	r3, #1
 800c020:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1e7      	bne.n	800bffa <USBD_GetString+0x52>
 800c02a:	e000      	b.n	800c02e <USBD_GetString+0x86>
    return;
 800c02c:	bf00      	nop
  }
}
 800c02e:	3718      	adds	r7, #24
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c03c:	2300      	movs	r3, #0
 800c03e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c044:	e005      	b.n	800c052 <USBD_GetLen+0x1e>
  {
    len++;
 800c046:	7bfb      	ldrb	r3, [r7, #15]
 800c048:	3301      	adds	r3, #1
 800c04a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	3301      	adds	r3, #1
 800c050:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1f5      	bne.n	800c046 <USBD_GetLen+0x12>
  }

  return len;
 800c05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3714      	adds	r7, #20
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2202      	movs	r2, #2
 800c078:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	68ba      	ldr	r2, [r7, #8]
 800c08c:	2100      	movs	r1, #0
 800c08e:	68f8      	ldr	r0, [r7, #12]
 800c090:	f000 fce1 	bl	800ca56 <USBD_LL_Transmit>

  return USBD_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b084      	sub	sp, #16
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	60f8      	str	r0, [r7, #12]
 800c0a6:	60b9      	str	r1, [r7, #8]
 800c0a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	68ba      	ldr	r2, [r7, #8]
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f000 fcd0 	bl	800ca56 <USBD_LL_Transmit>

  return USBD_OK;
 800c0b6:	2300      	movs	r3, #0
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2203      	movs	r2, #3
 800c0d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	68ba      	ldr	r2, [r7, #8]
 800c0e8:	2100      	movs	r1, #0
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	f000 fcd4 	bl	800ca98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c0f0:	2300      	movs	r3, #0
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b084      	sub	sp, #16
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	60f8      	str	r0, [r7, #12]
 800c102:	60b9      	str	r1, [r7, #8]
 800c104:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	68ba      	ldr	r2, [r7, #8]
 800c10a:	2100      	movs	r1, #0
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f000 fcc3 	bl	800ca98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3710      	adds	r7, #16
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2204      	movs	r2, #4
 800c128:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c12c:	2300      	movs	r3, #0
 800c12e:	2200      	movs	r2, #0
 800c130:	2100      	movs	r1, #0
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 fc8f 	bl	800ca56 <USBD_LL_Transmit>

  return USBD_OK;
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b082      	sub	sp, #8
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2205      	movs	r2, #5
 800c14e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c152:	2300      	movs	r3, #0
 800c154:	2200      	movs	r2, #0
 800c156:	2100      	movs	r1, #0
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 fc9d 	bl	800ca98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c15e:	2300      	movs	r3, #0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c16c:	2200      	movs	r2, #0
 800c16e:	4912      	ldr	r1, [pc, #72]	; (800c1b8 <MX_USB_DEVICE_Init+0x50>)
 800c170:	4812      	ldr	r0, [pc, #72]	; (800c1bc <MX_USB_DEVICE_Init+0x54>)
 800c172:	f7fe fd07 	bl	800ab84 <USBD_Init>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d001      	beq.n	800c180 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c17c:	f7f5 fc78 	bl	8001a70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c180:	490f      	ldr	r1, [pc, #60]	; (800c1c0 <MX_USB_DEVICE_Init+0x58>)
 800c182:	480e      	ldr	r0, [pc, #56]	; (800c1bc <MX_USB_DEVICE_Init+0x54>)
 800c184:	f7fe fd2e 	bl	800abe4 <USBD_RegisterClass>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d001      	beq.n	800c192 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c18e:	f7f5 fc6f 	bl	8001a70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c192:	490c      	ldr	r1, [pc, #48]	; (800c1c4 <MX_USB_DEVICE_Init+0x5c>)
 800c194:	4809      	ldr	r0, [pc, #36]	; (800c1bc <MX_USB_DEVICE_Init+0x54>)
 800c196:	f7fe fc1f 	bl	800a9d8 <USBD_CDC_RegisterInterface>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d001      	beq.n	800c1a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c1a0:	f7f5 fc66 	bl	8001a70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c1a4:	4805      	ldr	r0, [pc, #20]	; (800c1bc <MX_USB_DEVICE_Init+0x54>)
 800c1a6:	f7fe fd53 	bl	800ac50 <USBD_Start>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d001      	beq.n	800c1b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c1b0:	f7f5 fc5e 	bl	8001a70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c1b4:	bf00      	nop
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	200000d0 	.word	0x200000d0
 800c1bc:	2000058c 	.word	0x2000058c
 800c1c0:	2000003c 	.word	0x2000003c
 800c1c4:	200000bc 	.word	0x200000bc

0800c1c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	4905      	ldr	r1, [pc, #20]	; (800c1e4 <CDC_Init_FS+0x1c>)
 800c1d0:	4805      	ldr	r0, [pc, #20]	; (800c1e8 <CDC_Init_FS+0x20>)
 800c1d2:	f7fe fc1b 	bl	800aa0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c1d6:	4905      	ldr	r1, [pc, #20]	; (800c1ec <CDC_Init_FS+0x24>)
 800c1d8:	4803      	ldr	r0, [pc, #12]	; (800c1e8 <CDC_Init_FS+0x20>)
 800c1da:	f7fe fc39 	bl	800aa50 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c1de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	20001068 	.word	0x20001068
 800c1e8:	2000058c 	.word	0x2000058c
 800c1ec:	20000868 	.word	0x20000868

0800c1f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c1f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	4603      	mov	r3, r0
 800c208:	6039      	str	r1, [r7, #0]
 800c20a:	71fb      	strb	r3, [r7, #7]
 800c20c:	4613      	mov	r3, r2
 800c20e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c210:	79fb      	ldrb	r3, [r7, #7]
 800c212:	2b23      	cmp	r3, #35	; 0x23
 800c214:	d84a      	bhi.n	800c2ac <CDC_Control_FS+0xac>
 800c216:	a201      	add	r2, pc, #4	; (adr r2, 800c21c <CDC_Control_FS+0x1c>)
 800c218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c21c:	0800c2ad 	.word	0x0800c2ad
 800c220:	0800c2ad 	.word	0x0800c2ad
 800c224:	0800c2ad 	.word	0x0800c2ad
 800c228:	0800c2ad 	.word	0x0800c2ad
 800c22c:	0800c2ad 	.word	0x0800c2ad
 800c230:	0800c2ad 	.word	0x0800c2ad
 800c234:	0800c2ad 	.word	0x0800c2ad
 800c238:	0800c2ad 	.word	0x0800c2ad
 800c23c:	0800c2ad 	.word	0x0800c2ad
 800c240:	0800c2ad 	.word	0x0800c2ad
 800c244:	0800c2ad 	.word	0x0800c2ad
 800c248:	0800c2ad 	.word	0x0800c2ad
 800c24c:	0800c2ad 	.word	0x0800c2ad
 800c250:	0800c2ad 	.word	0x0800c2ad
 800c254:	0800c2ad 	.word	0x0800c2ad
 800c258:	0800c2ad 	.word	0x0800c2ad
 800c25c:	0800c2ad 	.word	0x0800c2ad
 800c260:	0800c2ad 	.word	0x0800c2ad
 800c264:	0800c2ad 	.word	0x0800c2ad
 800c268:	0800c2ad 	.word	0x0800c2ad
 800c26c:	0800c2ad 	.word	0x0800c2ad
 800c270:	0800c2ad 	.word	0x0800c2ad
 800c274:	0800c2ad 	.word	0x0800c2ad
 800c278:	0800c2ad 	.word	0x0800c2ad
 800c27c:	0800c2ad 	.word	0x0800c2ad
 800c280:	0800c2ad 	.word	0x0800c2ad
 800c284:	0800c2ad 	.word	0x0800c2ad
 800c288:	0800c2ad 	.word	0x0800c2ad
 800c28c:	0800c2ad 	.word	0x0800c2ad
 800c290:	0800c2ad 	.word	0x0800c2ad
 800c294:	0800c2ad 	.word	0x0800c2ad
 800c298:	0800c2ad 	.word	0x0800c2ad
 800c29c:	0800c2ad 	.word	0x0800c2ad
 800c2a0:	0800c2ad 	.word	0x0800c2ad
 800c2a4:	0800c2ad 	.word	0x0800c2ad
 800c2a8:	0800c2ad 	.word	0x0800c2ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c2ac:	bf00      	nop
  }

  return (USBD_OK);
 800c2ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c2c6:	6879      	ldr	r1, [r7, #4]
 800c2c8:	4805      	ldr	r0, [pc, #20]	; (800c2e0 <CDC_Receive_FS+0x24>)
 800c2ca:	f7fe fbc1 	bl	800aa50 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c2ce:	4804      	ldr	r0, [pc, #16]	; (800c2e0 <CDC_Receive_FS+0x24>)
 800c2d0:	f7fe fc22 	bl	800ab18 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c2d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3708      	adds	r7, #8
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	2000058c 	.word	0x2000058c

0800c2e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c2f4:	4b0d      	ldr	r3, [pc, #52]	; (800c32c <CDC_Transmit_FS+0x48>)
 800c2f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c302:	2b00      	cmp	r3, #0
 800c304:	d001      	beq.n	800c30a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c306:	2301      	movs	r3, #1
 800c308:	e00b      	b.n	800c322 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c30a:	887b      	ldrh	r3, [r7, #2]
 800c30c:	461a      	mov	r2, r3
 800c30e:	6879      	ldr	r1, [r7, #4]
 800c310:	4806      	ldr	r0, [pc, #24]	; (800c32c <CDC_Transmit_FS+0x48>)
 800c312:	f7fe fb7b 	bl	800aa0c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c316:	4805      	ldr	r0, [pc, #20]	; (800c32c <CDC_Transmit_FS+0x48>)
 800c318:	f7fe fbb8 	bl	800aa8c <USBD_CDC_TransmitPacket>
 800c31c:	4603      	mov	r3, r0
 800c31e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c320:	7bfb      	ldrb	r3, [r7, #15]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	2000058c 	.word	0x2000058c

0800c330 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c330:	b480      	push	{r7}
 800c332:	b087      	sub	sp, #28
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	4613      	mov	r3, r2
 800c33c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c33e:	2300      	movs	r3, #0
 800c340:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c342:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c346:	4618      	mov	r0, r3
 800c348:	371c      	adds	r7, #28
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr
	...

0800c354 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	4603      	mov	r3, r0
 800c35c:	6039      	str	r1, [r7, #0]
 800c35e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	2212      	movs	r2, #18
 800c364:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c366:	4b03      	ldr	r3, [pc, #12]	; (800c374 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c368:	4618      	mov	r0, r3
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr
 800c374:	200000ec 	.word	0x200000ec

0800c378 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	4603      	mov	r3, r0
 800c380:	6039      	str	r1, [r7, #0]
 800c382:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	2204      	movs	r2, #4
 800c388:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c38a:	4b03      	ldr	r3, [pc, #12]	; (800c398 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	370c      	adds	r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr
 800c398:	20000100 	.word	0x20000100

0800c39c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	6039      	str	r1, [r7, #0]
 800c3a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c3a8:	79fb      	ldrb	r3, [r7, #7]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d105      	bne.n	800c3ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c3ae:	683a      	ldr	r2, [r7, #0]
 800c3b0:	4907      	ldr	r1, [pc, #28]	; (800c3d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c3b2:	4808      	ldr	r0, [pc, #32]	; (800c3d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c3b4:	f7ff fdf8 	bl	800bfa8 <USBD_GetString>
 800c3b8:	e004      	b.n	800c3c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c3ba:	683a      	ldr	r2, [r7, #0]
 800c3bc:	4904      	ldr	r1, [pc, #16]	; (800c3d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c3be:	4805      	ldr	r0, [pc, #20]	; (800c3d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c3c0:	f7ff fdf2 	bl	800bfa8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c3c4:	4b02      	ldr	r3, [pc, #8]	; (800c3d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3708      	adds	r7, #8
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	20001868 	.word	0x20001868
 800c3d4:	0800f8e4 	.word	0x0800f8e4

0800c3d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	6039      	str	r1, [r7, #0]
 800c3e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c3e4:	683a      	ldr	r2, [r7, #0]
 800c3e6:	4904      	ldr	r1, [pc, #16]	; (800c3f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c3e8:	4804      	ldr	r0, [pc, #16]	; (800c3fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c3ea:	f7ff fddd 	bl	800bfa8 <USBD_GetString>
  return USBD_StrDesc;
 800c3ee:	4b02      	ldr	r3, [pc, #8]	; (800c3f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	20001868 	.word	0x20001868
 800c3fc:	0800f8fc 	.word	0x0800f8fc

0800c400 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	4603      	mov	r3, r0
 800c408:	6039      	str	r1, [r7, #0]
 800c40a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	221a      	movs	r2, #26
 800c410:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c412:	f000 f843 	bl	800c49c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c416:	4b02      	ldr	r3, [pc, #8]	; (800c420 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	20000104 	.word	0x20000104

0800c424 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	4603      	mov	r3, r0
 800c42c:	6039      	str	r1, [r7, #0]
 800c42e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c430:	79fb      	ldrb	r3, [r7, #7]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d105      	bne.n	800c442 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c436:	683a      	ldr	r2, [r7, #0]
 800c438:	4907      	ldr	r1, [pc, #28]	; (800c458 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c43a:	4808      	ldr	r0, [pc, #32]	; (800c45c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c43c:	f7ff fdb4 	bl	800bfa8 <USBD_GetString>
 800c440:	e004      	b.n	800c44c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c442:	683a      	ldr	r2, [r7, #0]
 800c444:	4904      	ldr	r1, [pc, #16]	; (800c458 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c446:	4805      	ldr	r0, [pc, #20]	; (800c45c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c448:	f7ff fdae 	bl	800bfa8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c44c:	4b02      	ldr	r3, [pc, #8]	; (800c458 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3708      	adds	r7, #8
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	20001868 	.word	0x20001868
 800c45c:	0800f910 	.word	0x0800f910

0800c460 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
 800c466:	4603      	mov	r3, r0
 800c468:	6039      	str	r1, [r7, #0]
 800c46a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c46c:	79fb      	ldrb	r3, [r7, #7]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d105      	bne.n	800c47e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c472:	683a      	ldr	r2, [r7, #0]
 800c474:	4907      	ldr	r1, [pc, #28]	; (800c494 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c476:	4808      	ldr	r0, [pc, #32]	; (800c498 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c478:	f7ff fd96 	bl	800bfa8 <USBD_GetString>
 800c47c:	e004      	b.n	800c488 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c47e:	683a      	ldr	r2, [r7, #0]
 800c480:	4904      	ldr	r1, [pc, #16]	; (800c494 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c482:	4805      	ldr	r0, [pc, #20]	; (800c498 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c484:	f7ff fd90 	bl	800bfa8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c488:	4b02      	ldr	r3, [pc, #8]	; (800c494 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	20001868 	.word	0x20001868
 800c498:	0800f91c 	.word	0x0800f91c

0800c49c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c4a2:	4b0f      	ldr	r3, [pc, #60]	; (800c4e0 <Get_SerialNum+0x44>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c4a8:	4b0e      	ldr	r3, [pc, #56]	; (800c4e4 <Get_SerialNum+0x48>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c4ae:	4b0e      	ldr	r3, [pc, #56]	; (800c4e8 <Get_SerialNum+0x4c>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d009      	beq.n	800c4d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c4c2:	2208      	movs	r2, #8
 800c4c4:	4909      	ldr	r1, [pc, #36]	; (800c4ec <Get_SerialNum+0x50>)
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f000 f814 	bl	800c4f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c4cc:	2204      	movs	r2, #4
 800c4ce:	4908      	ldr	r1, [pc, #32]	; (800c4f0 <Get_SerialNum+0x54>)
 800c4d0:	68b8      	ldr	r0, [r7, #8]
 800c4d2:	f000 f80f 	bl	800c4f4 <IntToUnicode>
  }
}
 800c4d6:	bf00      	nop
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	1fff7a10 	.word	0x1fff7a10
 800c4e4:	1fff7a14 	.word	0x1fff7a14
 800c4e8:	1fff7a18 	.word	0x1fff7a18
 800c4ec:	20000106 	.word	0x20000106
 800c4f0:	20000116 	.word	0x20000116

0800c4f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b087      	sub	sp, #28
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	4613      	mov	r3, r2
 800c500:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c502:	2300      	movs	r3, #0
 800c504:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c506:	2300      	movs	r3, #0
 800c508:	75fb      	strb	r3, [r7, #23]
 800c50a:	e027      	b.n	800c55c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	0f1b      	lsrs	r3, r3, #28
 800c510:	2b09      	cmp	r3, #9
 800c512:	d80b      	bhi.n	800c52c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	0f1b      	lsrs	r3, r3, #28
 800c518:	b2da      	uxtb	r2, r3
 800c51a:	7dfb      	ldrb	r3, [r7, #23]
 800c51c:	005b      	lsls	r3, r3, #1
 800c51e:	4619      	mov	r1, r3
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	440b      	add	r3, r1
 800c524:	3230      	adds	r2, #48	; 0x30
 800c526:	b2d2      	uxtb	r2, r2
 800c528:	701a      	strb	r2, [r3, #0]
 800c52a:	e00a      	b.n	800c542 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	0f1b      	lsrs	r3, r3, #28
 800c530:	b2da      	uxtb	r2, r3
 800c532:	7dfb      	ldrb	r3, [r7, #23]
 800c534:	005b      	lsls	r3, r3, #1
 800c536:	4619      	mov	r1, r3
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	440b      	add	r3, r1
 800c53c:	3237      	adds	r2, #55	; 0x37
 800c53e:	b2d2      	uxtb	r2, r2
 800c540:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	011b      	lsls	r3, r3, #4
 800c546:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c548:	7dfb      	ldrb	r3, [r7, #23]
 800c54a:	005b      	lsls	r3, r3, #1
 800c54c:	3301      	adds	r3, #1
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	4413      	add	r3, r2
 800c552:	2200      	movs	r2, #0
 800c554:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c556:	7dfb      	ldrb	r3, [r7, #23]
 800c558:	3301      	adds	r3, #1
 800c55a:	75fb      	strb	r3, [r7, #23]
 800c55c:	7dfa      	ldrb	r2, [r7, #23]
 800c55e:	79fb      	ldrb	r3, [r7, #7]
 800c560:	429a      	cmp	r2, r3
 800c562:	d3d3      	bcc.n	800c50c <IntToUnicode+0x18>
  }
}
 800c564:	bf00      	nop
 800c566:	bf00      	nop
 800c568:	371c      	adds	r7, #28
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr
	...

0800c574 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b08a      	sub	sp, #40	; 0x28
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c57c:	f107 0314 	add.w	r3, r7, #20
 800c580:	2200      	movs	r2, #0
 800c582:	601a      	str	r2, [r3, #0]
 800c584:	605a      	str	r2, [r3, #4]
 800c586:	609a      	str	r2, [r3, #8]
 800c588:	60da      	str	r2, [r3, #12]
 800c58a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c594:	d13a      	bne.n	800c60c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c596:	2300      	movs	r3, #0
 800c598:	613b      	str	r3, [r7, #16]
 800c59a:	4b1e      	ldr	r3, [pc, #120]	; (800c614 <HAL_PCD_MspInit+0xa0>)
 800c59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c59e:	4a1d      	ldr	r2, [pc, #116]	; (800c614 <HAL_PCD_MspInit+0xa0>)
 800c5a0:	f043 0301 	orr.w	r3, r3, #1
 800c5a4:	6313      	str	r3, [r2, #48]	; 0x30
 800c5a6:	4b1b      	ldr	r3, [pc, #108]	; (800c614 <HAL_PCD_MspInit+0xa0>)
 800c5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5aa:	f003 0301 	and.w	r3, r3, #1
 800c5ae:	613b      	str	r3, [r7, #16]
 800c5b0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c5b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c5b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5b8:	2302      	movs	r3, #2
 800c5ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c5c0:	2303      	movs	r3, #3
 800c5c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c5c4:	230a      	movs	r3, #10
 800c5c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c5c8:	f107 0314 	add.w	r3, r7, #20
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	4812      	ldr	r0, [pc, #72]	; (800c618 <HAL_PCD_MspInit+0xa4>)
 800c5d0:	f7f6 fb00 	bl	8002bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c5d4:	4b0f      	ldr	r3, [pc, #60]	; (800c614 <HAL_PCD_MspInit+0xa0>)
 800c5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d8:	4a0e      	ldr	r2, [pc, #56]	; (800c614 <HAL_PCD_MspInit+0xa0>)
 800c5da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5de:	6353      	str	r3, [r2, #52]	; 0x34
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	60fb      	str	r3, [r7, #12]
 800c5e4:	4b0b      	ldr	r3, [pc, #44]	; (800c614 <HAL_PCD_MspInit+0xa0>)
 800c5e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5e8:	4a0a      	ldr	r2, [pc, #40]	; (800c614 <HAL_PCD_MspInit+0xa0>)
 800c5ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c5ee:	6453      	str	r3, [r2, #68]	; 0x44
 800c5f0:	4b08      	ldr	r3, [pc, #32]	; (800c614 <HAL_PCD_MspInit+0xa0>)
 800c5f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c5f8:	60fb      	str	r3, [r7, #12]
 800c5fa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	2100      	movs	r1, #0
 800c600:	2043      	movs	r0, #67	; 0x43
 800c602:	f7f6 fa80 	bl	8002b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c606:	2043      	movs	r0, #67	; 0x43
 800c608:	f7f6 fa99 	bl	8002b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c60c:	bf00      	nop
 800c60e:	3728      	adds	r7, #40	; 0x28
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	40023800 	.word	0x40023800
 800c618:	40020000 	.word	0x40020000

0800c61c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c630:	4619      	mov	r1, r3
 800c632:	4610      	mov	r0, r2
 800c634:	f7fe fb59 	bl	800acea <USBD_LL_SetupStage>
}
 800c638:	bf00      	nop
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	460b      	mov	r3, r1
 800c64a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c652:	78fa      	ldrb	r2, [r7, #3]
 800c654:	6879      	ldr	r1, [r7, #4]
 800c656:	4613      	mov	r3, r2
 800c658:	00db      	lsls	r3, r3, #3
 800c65a:	4413      	add	r3, r2
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	440b      	add	r3, r1
 800c660:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	78fb      	ldrb	r3, [r7, #3]
 800c668:	4619      	mov	r1, r3
 800c66a:	f7fe fb93 	bl	800ad94 <USBD_LL_DataOutStage>
}
 800c66e:	bf00      	nop
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b082      	sub	sp, #8
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	460b      	mov	r3, r1
 800c680:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c688:	78fa      	ldrb	r2, [r7, #3]
 800c68a:	6879      	ldr	r1, [r7, #4]
 800c68c:	4613      	mov	r3, r2
 800c68e:	00db      	lsls	r3, r3, #3
 800c690:	4413      	add	r3, r2
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	440b      	add	r3, r1
 800c696:	334c      	adds	r3, #76	; 0x4c
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	78fb      	ldrb	r3, [r7, #3]
 800c69c:	4619      	mov	r1, r3
 800c69e:	f7fe fc2c 	bl	800aefa <USBD_LL_DataInStage>
}
 800c6a2:	bf00      	nop
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b082      	sub	sp, #8
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7fe fd60 	bl	800b17e <USBD_LL_SOF>
}
 800c6be:	bf00      	nop
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b084      	sub	sp, #16
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	68db      	ldr	r3, [r3, #12]
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d001      	beq.n	800c6de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c6da:	f7f5 f9c9 	bl	8001a70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c6e4:	7bfa      	ldrb	r2, [r7, #15]
 800c6e6:	4611      	mov	r1, r2
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7fe fd0a 	bl	800b102 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7fe fcb2 	bl	800b05e <USBD_LL_Reset>
}
 800c6fa:	bf00      	nop
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
	...

0800c704 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c712:	4618      	mov	r0, r3
 800c714:	f7fe fd05 	bl	800b122 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	6812      	ldr	r2, [r2, #0]
 800c726:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c72a:	f043 0301 	orr.w	r3, r3, #1
 800c72e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6a1b      	ldr	r3, [r3, #32]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d005      	beq.n	800c744 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c738:	4b04      	ldr	r3, [pc, #16]	; (800c74c <HAL_PCD_SuspendCallback+0x48>)
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	4a03      	ldr	r2, [pc, #12]	; (800c74c <HAL_PCD_SuspendCallback+0x48>)
 800c73e:	f043 0306 	orr.w	r3, r3, #6
 800c742:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c744:	bf00      	nop
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	e000ed00 	.word	0xe000ed00

0800c750 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c75e:	4618      	mov	r0, r3
 800c760:	f7fe fcf5 	bl	800b14e <USBD_LL_Resume>
}
 800c764:	bf00      	nop
 800c766:	3708      	adds	r7, #8
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	460b      	mov	r3, r1
 800c776:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c77e:	78fa      	ldrb	r2, [r7, #3]
 800c780:	4611      	mov	r1, r2
 800c782:	4618      	mov	r0, r3
 800c784:	f7fe fd4d 	bl	800b222 <USBD_LL_IsoOUTIncomplete>
}
 800c788:	bf00      	nop
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	460b      	mov	r3, r1
 800c79a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c7a2:	78fa      	ldrb	r2, [r7, #3]
 800c7a4:	4611      	mov	r1, r2
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7fe fd09 	bl	800b1be <USBD_LL_IsoINIncomplete>
}
 800c7ac:	bf00      	nop
 800c7ae:	3708      	adds	r7, #8
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7fe fd5f 	bl	800b286 <USBD_LL_DevConnected>
}
 800c7c8:	bf00      	nop
 800c7ca:	3708      	adds	r7, #8
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7fe fd5c 	bl	800b29c <USBD_LL_DevDisconnected>
}
 800c7e4:	bf00      	nop
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d13c      	bne.n	800c876 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c7fc:	4a20      	ldr	r2, [pc, #128]	; (800c880 <USBD_LL_Init+0x94>)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4a1e      	ldr	r2, [pc, #120]	; (800c880 <USBD_LL_Init+0x94>)
 800c808:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c80c:	4b1c      	ldr	r3, [pc, #112]	; (800c880 <USBD_LL_Init+0x94>)
 800c80e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c812:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c814:	4b1a      	ldr	r3, [pc, #104]	; (800c880 <USBD_LL_Init+0x94>)
 800c816:	2204      	movs	r2, #4
 800c818:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c81a:	4b19      	ldr	r3, [pc, #100]	; (800c880 <USBD_LL_Init+0x94>)
 800c81c:	2202      	movs	r2, #2
 800c81e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c820:	4b17      	ldr	r3, [pc, #92]	; (800c880 <USBD_LL_Init+0x94>)
 800c822:	2200      	movs	r2, #0
 800c824:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c826:	4b16      	ldr	r3, [pc, #88]	; (800c880 <USBD_LL_Init+0x94>)
 800c828:	2202      	movs	r2, #2
 800c82a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c82c:	4b14      	ldr	r3, [pc, #80]	; (800c880 <USBD_LL_Init+0x94>)
 800c82e:	2200      	movs	r2, #0
 800c830:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c832:	4b13      	ldr	r3, [pc, #76]	; (800c880 <USBD_LL_Init+0x94>)
 800c834:	2200      	movs	r2, #0
 800c836:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c838:	4b11      	ldr	r3, [pc, #68]	; (800c880 <USBD_LL_Init+0x94>)
 800c83a:	2200      	movs	r2, #0
 800c83c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c83e:	4b10      	ldr	r3, [pc, #64]	; (800c880 <USBD_LL_Init+0x94>)
 800c840:	2200      	movs	r2, #0
 800c842:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c844:	4b0e      	ldr	r3, [pc, #56]	; (800c880 <USBD_LL_Init+0x94>)
 800c846:	2200      	movs	r2, #0
 800c848:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c84a:	480d      	ldr	r0, [pc, #52]	; (800c880 <USBD_LL_Init+0x94>)
 800c84c:	f7f8 fa49 	bl	8004ce2 <HAL_PCD_Init>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d001      	beq.n	800c85a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c856:	f7f5 f90b 	bl	8001a70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c85a:	2180      	movs	r1, #128	; 0x80
 800c85c:	4808      	ldr	r0, [pc, #32]	; (800c880 <USBD_LL_Init+0x94>)
 800c85e:	f7f9 fca0 	bl	80061a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c862:	2240      	movs	r2, #64	; 0x40
 800c864:	2100      	movs	r1, #0
 800c866:	4806      	ldr	r0, [pc, #24]	; (800c880 <USBD_LL_Init+0x94>)
 800c868:	f7f9 fc54 	bl	8006114 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c86c:	2280      	movs	r2, #128	; 0x80
 800c86e:	2101      	movs	r1, #1
 800c870:	4803      	ldr	r0, [pc, #12]	; (800c880 <USBD_LL_Init+0x94>)
 800c872:	f7f9 fc4f 	bl	8006114 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3708      	adds	r7, #8
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	20001a68 	.word	0x20001a68

0800c884 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c88c:	2300      	movs	r3, #0
 800c88e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c890:	2300      	movs	r3, #0
 800c892:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7f8 fb3e 	bl	8004f1c <HAL_PCD_Start>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8a4:	7bfb      	ldrb	r3, [r7, #15]
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f000 f942 	bl	800cb30 <USBD_Get_USB_Status>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b084      	sub	sp, #16
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
 800c8c2:	4608      	mov	r0, r1
 800c8c4:	4611      	mov	r1, r2
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	70fb      	strb	r3, [r7, #3]
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	70bb      	strb	r3, [r7, #2]
 800c8d0:	4613      	mov	r3, r2
 800c8d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c8e2:	78bb      	ldrb	r3, [r7, #2]
 800c8e4:	883a      	ldrh	r2, [r7, #0]
 800c8e6:	78f9      	ldrb	r1, [r7, #3]
 800c8e8:	f7f9 f80f 	bl	800590a <HAL_PCD_EP_Open>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8f0:	7bfb      	ldrb	r3, [r7, #15]
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f000 f91c 	bl	800cb30 <USBD_Get_USB_Status>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b084      	sub	sp, #16
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
 800c90e:	460b      	mov	r3, r1
 800c910:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c912:	2300      	movs	r3, #0
 800c914:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c916:	2300      	movs	r3, #0
 800c918:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c920:	78fa      	ldrb	r2, [r7, #3]
 800c922:	4611      	mov	r1, r2
 800c924:	4618      	mov	r0, r3
 800c926:	f7f9 f858 	bl	80059da <HAL_PCD_EP_Close>
 800c92a:	4603      	mov	r3, r0
 800c92c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
 800c930:	4618      	mov	r0, r3
 800c932:	f000 f8fd 	bl	800cb30 <USBD_Get_USB_Status>
 800c936:	4603      	mov	r3, r0
 800c938:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c93a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b084      	sub	sp, #16
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	460b      	mov	r3, r1
 800c94e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c950:	2300      	movs	r3, #0
 800c952:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c954:	2300      	movs	r3, #0
 800c956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c95e:	78fa      	ldrb	r2, [r7, #3]
 800c960:	4611      	mov	r1, r2
 800c962:	4618      	mov	r0, r3
 800c964:	f7f9 f930 	bl	8005bc8 <HAL_PCD_EP_SetStall>
 800c968:	4603      	mov	r3, r0
 800c96a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c96c:	7bfb      	ldrb	r3, [r7, #15]
 800c96e:	4618      	mov	r0, r3
 800c970:	f000 f8de 	bl	800cb30 <USBD_Get_USB_Status>
 800c974:	4603      	mov	r3, r0
 800c976:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c978:	7bbb      	ldrb	r3, [r7, #14]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c982:	b580      	push	{r7, lr}
 800c984:	b084      	sub	sp, #16
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	460b      	mov	r3, r1
 800c98c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c98e:	2300      	movs	r3, #0
 800c990:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c992:	2300      	movs	r3, #0
 800c994:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c99c:	78fa      	ldrb	r2, [r7, #3]
 800c99e:	4611      	mov	r1, r2
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7f9 f975 	bl	8005c90 <HAL_PCD_EP_ClrStall>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9aa:	7bfb      	ldrb	r3, [r7, #15]
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f000 f8bf 	bl	800cb30 <USBD_Get_USB_Status>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b085      	sub	sp, #20
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c9d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c9d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	da0b      	bge.n	800c9f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c9dc:	78fb      	ldrb	r3, [r7, #3]
 800c9de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9e2:	68f9      	ldr	r1, [r7, #12]
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	00db      	lsls	r3, r3, #3
 800c9e8:	4413      	add	r3, r2
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	440b      	add	r3, r1
 800c9ee:	333e      	adds	r3, #62	; 0x3e
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	e00b      	b.n	800ca0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c9f4:	78fb      	ldrb	r3, [r7, #3]
 800c9f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9fa:	68f9      	ldr	r1, [r7, #12]
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	00db      	lsls	r3, r3, #3
 800ca00:	4413      	add	r3, r2
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	440b      	add	r3, r1
 800ca06:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ca0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3714      	adds	r7, #20
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr

0800ca18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	460b      	mov	r3, r1
 800ca22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca24:	2300      	movs	r3, #0
 800ca26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ca32:	78fa      	ldrb	r2, [r7, #3]
 800ca34:	4611      	mov	r1, r2
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7f8 ff42 	bl	80058c0 <HAL_PCD_SetAddress>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca40:	7bfb      	ldrb	r3, [r7, #15]
 800ca42:	4618      	mov	r0, r3
 800ca44:	f000 f874 	bl	800cb30 <USBD_Get_USB_Status>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b086      	sub	sp, #24
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	60f8      	str	r0, [r7, #12]
 800ca5e:	607a      	str	r2, [r7, #4]
 800ca60:	603b      	str	r3, [r7, #0]
 800ca62:	460b      	mov	r3, r1
 800ca64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca66:	2300      	movs	r3, #0
 800ca68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca74:	7af9      	ldrb	r1, [r7, #11]
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	f7f9 f85b 	bl	8005b34 <HAL_PCD_EP_Transmit>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca82:	7dfb      	ldrb	r3, [r7, #23]
 800ca84:	4618      	mov	r0, r3
 800ca86:	f000 f853 	bl	800cb30 <USBD_Get_USB_Status>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ca8e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3718      	adds	r7, #24
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b086      	sub	sp, #24
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	607a      	str	r2, [r7, #4]
 800caa2:	603b      	str	r3, [r7, #0]
 800caa4:	460b      	mov	r3, r1
 800caa6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caa8:	2300      	movs	r3, #0
 800caaa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caac:	2300      	movs	r3, #0
 800caae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cab6:	7af9      	ldrb	r1, [r7, #11]
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	f7f8 ffd7 	bl	8005a6e <HAL_PCD_EP_Receive>
 800cac0:	4603      	mov	r3, r0
 800cac2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cac4:	7dfb      	ldrb	r3, [r7, #23]
 800cac6:	4618      	mov	r0, r3
 800cac8:	f000 f832 	bl	800cb30 <USBD_Get_USB_Status>
 800cacc:	4603      	mov	r3, r0
 800cace:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cad0:	7dbb      	ldrb	r3, [r7, #22]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3718      	adds	r7, #24
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b082      	sub	sp, #8
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	460b      	mov	r3, r1
 800cae4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800caec:	78fa      	ldrb	r2, [r7, #3]
 800caee:	4611      	mov	r1, r2
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7f9 f807 	bl	8005b04 <HAL_PCD_EP_GetRxCount>
 800caf6:	4603      	mov	r3, r0
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3708      	adds	r7, #8
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cb08:	4b03      	ldr	r3, [pc, #12]	; (800cb18 <USBD_static_malloc+0x18>)
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	370c      	adds	r7, #12
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	20001f74 	.word	0x20001f74

0800cb1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b083      	sub	sp, #12
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]

}
 800cb24:	bf00      	nop
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	4603      	mov	r3, r0
 800cb38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb3e:	79fb      	ldrb	r3, [r7, #7]
 800cb40:	2b03      	cmp	r3, #3
 800cb42:	d817      	bhi.n	800cb74 <USBD_Get_USB_Status+0x44>
 800cb44:	a201      	add	r2, pc, #4	; (adr r2, 800cb4c <USBD_Get_USB_Status+0x1c>)
 800cb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb4a:	bf00      	nop
 800cb4c:	0800cb5d 	.word	0x0800cb5d
 800cb50:	0800cb63 	.word	0x0800cb63
 800cb54:	0800cb69 	.word	0x0800cb69
 800cb58:	0800cb6f 	.word	0x0800cb6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb60:	e00b      	b.n	800cb7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb62:	2303      	movs	r3, #3
 800cb64:	73fb      	strb	r3, [r7, #15]
    break;
 800cb66:	e008      	b.n	800cb7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb6c:	e005      	b.n	800cb7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb6e:	2303      	movs	r3, #3
 800cb70:	73fb      	strb	r3, [r7, #15]
    break;
 800cb72:	e002      	b.n	800cb7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cb74:	2303      	movs	r3, #3
 800cb76:	73fb      	strb	r3, [r7, #15]
    break;
 800cb78:	bf00      	nop
  }
  return usb_status;
 800cb7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3714      	adds	r7, #20
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <__cvt>:
 800cb88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb8c:	ec55 4b10 	vmov	r4, r5, d0
 800cb90:	2d00      	cmp	r5, #0
 800cb92:	460e      	mov	r6, r1
 800cb94:	4619      	mov	r1, r3
 800cb96:	462b      	mov	r3, r5
 800cb98:	bfbb      	ittet	lt
 800cb9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cb9e:	461d      	movlt	r5, r3
 800cba0:	2300      	movge	r3, #0
 800cba2:	232d      	movlt	r3, #45	; 0x2d
 800cba4:	700b      	strb	r3, [r1, #0]
 800cba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cba8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cbac:	4691      	mov	r9, r2
 800cbae:	f023 0820 	bic.w	r8, r3, #32
 800cbb2:	bfbc      	itt	lt
 800cbb4:	4622      	movlt	r2, r4
 800cbb6:	4614      	movlt	r4, r2
 800cbb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cbbc:	d005      	beq.n	800cbca <__cvt+0x42>
 800cbbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cbc2:	d100      	bne.n	800cbc6 <__cvt+0x3e>
 800cbc4:	3601      	adds	r6, #1
 800cbc6:	2102      	movs	r1, #2
 800cbc8:	e000      	b.n	800cbcc <__cvt+0x44>
 800cbca:	2103      	movs	r1, #3
 800cbcc:	ab03      	add	r3, sp, #12
 800cbce:	9301      	str	r3, [sp, #4]
 800cbd0:	ab02      	add	r3, sp, #8
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	ec45 4b10 	vmov	d0, r4, r5
 800cbd8:	4653      	mov	r3, sl
 800cbda:	4632      	mov	r2, r6
 800cbdc:	f000 fe7c 	bl	800d8d8 <_dtoa_r>
 800cbe0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cbe4:	4607      	mov	r7, r0
 800cbe6:	d102      	bne.n	800cbee <__cvt+0x66>
 800cbe8:	f019 0f01 	tst.w	r9, #1
 800cbec:	d022      	beq.n	800cc34 <__cvt+0xac>
 800cbee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cbf2:	eb07 0906 	add.w	r9, r7, r6
 800cbf6:	d110      	bne.n	800cc1a <__cvt+0x92>
 800cbf8:	783b      	ldrb	r3, [r7, #0]
 800cbfa:	2b30      	cmp	r3, #48	; 0x30
 800cbfc:	d10a      	bne.n	800cc14 <__cvt+0x8c>
 800cbfe:	2200      	movs	r2, #0
 800cc00:	2300      	movs	r3, #0
 800cc02:	4620      	mov	r0, r4
 800cc04:	4629      	mov	r1, r5
 800cc06:	f7f3 ff67 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc0a:	b918      	cbnz	r0, 800cc14 <__cvt+0x8c>
 800cc0c:	f1c6 0601 	rsb	r6, r6, #1
 800cc10:	f8ca 6000 	str.w	r6, [sl]
 800cc14:	f8da 3000 	ldr.w	r3, [sl]
 800cc18:	4499      	add	r9, r3
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	4620      	mov	r0, r4
 800cc20:	4629      	mov	r1, r5
 800cc22:	f7f3 ff59 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc26:	b108      	cbz	r0, 800cc2c <__cvt+0xa4>
 800cc28:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc2c:	2230      	movs	r2, #48	; 0x30
 800cc2e:	9b03      	ldr	r3, [sp, #12]
 800cc30:	454b      	cmp	r3, r9
 800cc32:	d307      	bcc.n	800cc44 <__cvt+0xbc>
 800cc34:	9b03      	ldr	r3, [sp, #12]
 800cc36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc38:	1bdb      	subs	r3, r3, r7
 800cc3a:	4638      	mov	r0, r7
 800cc3c:	6013      	str	r3, [r2, #0]
 800cc3e:	b004      	add	sp, #16
 800cc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc44:	1c59      	adds	r1, r3, #1
 800cc46:	9103      	str	r1, [sp, #12]
 800cc48:	701a      	strb	r2, [r3, #0]
 800cc4a:	e7f0      	b.n	800cc2e <__cvt+0xa6>

0800cc4c <__exponent>:
 800cc4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2900      	cmp	r1, #0
 800cc52:	bfb8      	it	lt
 800cc54:	4249      	neglt	r1, r1
 800cc56:	f803 2b02 	strb.w	r2, [r3], #2
 800cc5a:	bfb4      	ite	lt
 800cc5c:	222d      	movlt	r2, #45	; 0x2d
 800cc5e:	222b      	movge	r2, #43	; 0x2b
 800cc60:	2909      	cmp	r1, #9
 800cc62:	7042      	strb	r2, [r0, #1]
 800cc64:	dd2a      	ble.n	800ccbc <__exponent+0x70>
 800cc66:	f10d 0207 	add.w	r2, sp, #7
 800cc6a:	4617      	mov	r7, r2
 800cc6c:	260a      	movs	r6, #10
 800cc6e:	4694      	mov	ip, r2
 800cc70:	fb91 f5f6 	sdiv	r5, r1, r6
 800cc74:	fb06 1415 	mls	r4, r6, r5, r1
 800cc78:	3430      	adds	r4, #48	; 0x30
 800cc7a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cc7e:	460c      	mov	r4, r1
 800cc80:	2c63      	cmp	r4, #99	; 0x63
 800cc82:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800cc86:	4629      	mov	r1, r5
 800cc88:	dcf1      	bgt.n	800cc6e <__exponent+0x22>
 800cc8a:	3130      	adds	r1, #48	; 0x30
 800cc8c:	f1ac 0402 	sub.w	r4, ip, #2
 800cc90:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cc94:	1c41      	adds	r1, r0, #1
 800cc96:	4622      	mov	r2, r4
 800cc98:	42ba      	cmp	r2, r7
 800cc9a:	d30a      	bcc.n	800ccb2 <__exponent+0x66>
 800cc9c:	f10d 0209 	add.w	r2, sp, #9
 800cca0:	eba2 020c 	sub.w	r2, r2, ip
 800cca4:	42bc      	cmp	r4, r7
 800cca6:	bf88      	it	hi
 800cca8:	2200      	movhi	r2, #0
 800ccaa:	4413      	add	r3, r2
 800ccac:	1a18      	subs	r0, r3, r0
 800ccae:	b003      	add	sp, #12
 800ccb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccb2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ccb6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ccba:	e7ed      	b.n	800cc98 <__exponent+0x4c>
 800ccbc:	2330      	movs	r3, #48	; 0x30
 800ccbe:	3130      	adds	r1, #48	; 0x30
 800ccc0:	7083      	strb	r3, [r0, #2]
 800ccc2:	70c1      	strb	r1, [r0, #3]
 800ccc4:	1d03      	adds	r3, r0, #4
 800ccc6:	e7f1      	b.n	800ccac <__exponent+0x60>

0800ccc8 <_printf_float>:
 800ccc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cccc:	ed2d 8b02 	vpush	{d8}
 800ccd0:	b08d      	sub	sp, #52	; 0x34
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ccd8:	4616      	mov	r6, r2
 800ccda:	461f      	mov	r7, r3
 800ccdc:	4605      	mov	r5, r0
 800ccde:	f000 fcfb 	bl	800d6d8 <_localeconv_r>
 800cce2:	f8d0 a000 	ldr.w	sl, [r0]
 800cce6:	4650      	mov	r0, sl
 800cce8:	f7f3 faca 	bl	8000280 <strlen>
 800ccec:	2300      	movs	r3, #0
 800ccee:	930a      	str	r3, [sp, #40]	; 0x28
 800ccf0:	6823      	ldr	r3, [r4, #0]
 800ccf2:	9305      	str	r3, [sp, #20]
 800ccf4:	f8d8 3000 	ldr.w	r3, [r8]
 800ccf8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ccfc:	3307      	adds	r3, #7
 800ccfe:	f023 0307 	bic.w	r3, r3, #7
 800cd02:	f103 0208 	add.w	r2, r3, #8
 800cd06:	f8c8 2000 	str.w	r2, [r8]
 800cd0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cd12:	9307      	str	r3, [sp, #28]
 800cd14:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd18:	ee08 0a10 	vmov	s16, r0
 800cd1c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cd20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd24:	4b9e      	ldr	r3, [pc, #632]	; (800cfa0 <_printf_float+0x2d8>)
 800cd26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd2a:	f7f3 ff07 	bl	8000b3c <__aeabi_dcmpun>
 800cd2e:	bb88      	cbnz	r0, 800cd94 <_printf_float+0xcc>
 800cd30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd34:	4b9a      	ldr	r3, [pc, #616]	; (800cfa0 <_printf_float+0x2d8>)
 800cd36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd3a:	f7f3 fee1 	bl	8000b00 <__aeabi_dcmple>
 800cd3e:	bb48      	cbnz	r0, 800cd94 <_printf_float+0xcc>
 800cd40:	2200      	movs	r2, #0
 800cd42:	2300      	movs	r3, #0
 800cd44:	4640      	mov	r0, r8
 800cd46:	4649      	mov	r1, r9
 800cd48:	f7f3 fed0 	bl	8000aec <__aeabi_dcmplt>
 800cd4c:	b110      	cbz	r0, 800cd54 <_printf_float+0x8c>
 800cd4e:	232d      	movs	r3, #45	; 0x2d
 800cd50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd54:	4a93      	ldr	r2, [pc, #588]	; (800cfa4 <_printf_float+0x2dc>)
 800cd56:	4b94      	ldr	r3, [pc, #592]	; (800cfa8 <_printf_float+0x2e0>)
 800cd58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cd5c:	bf94      	ite	ls
 800cd5e:	4690      	movls	r8, r2
 800cd60:	4698      	movhi	r8, r3
 800cd62:	2303      	movs	r3, #3
 800cd64:	6123      	str	r3, [r4, #16]
 800cd66:	9b05      	ldr	r3, [sp, #20]
 800cd68:	f023 0304 	bic.w	r3, r3, #4
 800cd6c:	6023      	str	r3, [r4, #0]
 800cd6e:	f04f 0900 	mov.w	r9, #0
 800cd72:	9700      	str	r7, [sp, #0]
 800cd74:	4633      	mov	r3, r6
 800cd76:	aa0b      	add	r2, sp, #44	; 0x2c
 800cd78:	4621      	mov	r1, r4
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	f000 f9da 	bl	800d134 <_printf_common>
 800cd80:	3001      	adds	r0, #1
 800cd82:	f040 8090 	bne.w	800cea6 <_printf_float+0x1de>
 800cd86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd8a:	b00d      	add	sp, #52	; 0x34
 800cd8c:	ecbd 8b02 	vpop	{d8}
 800cd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd94:	4642      	mov	r2, r8
 800cd96:	464b      	mov	r3, r9
 800cd98:	4640      	mov	r0, r8
 800cd9a:	4649      	mov	r1, r9
 800cd9c:	f7f3 fece 	bl	8000b3c <__aeabi_dcmpun>
 800cda0:	b140      	cbz	r0, 800cdb4 <_printf_float+0xec>
 800cda2:	464b      	mov	r3, r9
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	bfbc      	itt	lt
 800cda8:	232d      	movlt	r3, #45	; 0x2d
 800cdaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cdae:	4a7f      	ldr	r2, [pc, #508]	; (800cfac <_printf_float+0x2e4>)
 800cdb0:	4b7f      	ldr	r3, [pc, #508]	; (800cfb0 <_printf_float+0x2e8>)
 800cdb2:	e7d1      	b.n	800cd58 <_printf_float+0x90>
 800cdb4:	6863      	ldr	r3, [r4, #4]
 800cdb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cdba:	9206      	str	r2, [sp, #24]
 800cdbc:	1c5a      	adds	r2, r3, #1
 800cdbe:	d13f      	bne.n	800ce40 <_printf_float+0x178>
 800cdc0:	2306      	movs	r3, #6
 800cdc2:	6063      	str	r3, [r4, #4]
 800cdc4:	9b05      	ldr	r3, [sp, #20]
 800cdc6:	6861      	ldr	r1, [r4, #4]
 800cdc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cdcc:	2300      	movs	r3, #0
 800cdce:	9303      	str	r3, [sp, #12]
 800cdd0:	ab0a      	add	r3, sp, #40	; 0x28
 800cdd2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cdd6:	ab09      	add	r3, sp, #36	; 0x24
 800cdd8:	ec49 8b10 	vmov	d0, r8, r9
 800cddc:	9300      	str	r3, [sp, #0]
 800cdde:	6022      	str	r2, [r4, #0]
 800cde0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cde4:	4628      	mov	r0, r5
 800cde6:	f7ff fecf 	bl	800cb88 <__cvt>
 800cdea:	9b06      	ldr	r3, [sp, #24]
 800cdec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cdee:	2b47      	cmp	r3, #71	; 0x47
 800cdf0:	4680      	mov	r8, r0
 800cdf2:	d108      	bne.n	800ce06 <_printf_float+0x13e>
 800cdf4:	1cc8      	adds	r0, r1, #3
 800cdf6:	db02      	blt.n	800cdfe <_printf_float+0x136>
 800cdf8:	6863      	ldr	r3, [r4, #4]
 800cdfa:	4299      	cmp	r1, r3
 800cdfc:	dd41      	ble.n	800ce82 <_printf_float+0x1ba>
 800cdfe:	f1ab 0302 	sub.w	r3, fp, #2
 800ce02:	fa5f fb83 	uxtb.w	fp, r3
 800ce06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ce0a:	d820      	bhi.n	800ce4e <_printf_float+0x186>
 800ce0c:	3901      	subs	r1, #1
 800ce0e:	465a      	mov	r2, fp
 800ce10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ce14:	9109      	str	r1, [sp, #36]	; 0x24
 800ce16:	f7ff ff19 	bl	800cc4c <__exponent>
 800ce1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce1c:	1813      	adds	r3, r2, r0
 800ce1e:	2a01      	cmp	r2, #1
 800ce20:	4681      	mov	r9, r0
 800ce22:	6123      	str	r3, [r4, #16]
 800ce24:	dc02      	bgt.n	800ce2c <_printf_float+0x164>
 800ce26:	6822      	ldr	r2, [r4, #0]
 800ce28:	07d2      	lsls	r2, r2, #31
 800ce2a:	d501      	bpl.n	800ce30 <_printf_float+0x168>
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	6123      	str	r3, [r4, #16]
 800ce30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d09c      	beq.n	800cd72 <_printf_float+0xaa>
 800ce38:	232d      	movs	r3, #45	; 0x2d
 800ce3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce3e:	e798      	b.n	800cd72 <_printf_float+0xaa>
 800ce40:	9a06      	ldr	r2, [sp, #24]
 800ce42:	2a47      	cmp	r2, #71	; 0x47
 800ce44:	d1be      	bne.n	800cdc4 <_printf_float+0xfc>
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d1bc      	bne.n	800cdc4 <_printf_float+0xfc>
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e7b9      	b.n	800cdc2 <_printf_float+0xfa>
 800ce4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ce52:	d118      	bne.n	800ce86 <_printf_float+0x1be>
 800ce54:	2900      	cmp	r1, #0
 800ce56:	6863      	ldr	r3, [r4, #4]
 800ce58:	dd0b      	ble.n	800ce72 <_printf_float+0x1aa>
 800ce5a:	6121      	str	r1, [r4, #16]
 800ce5c:	b913      	cbnz	r3, 800ce64 <_printf_float+0x19c>
 800ce5e:	6822      	ldr	r2, [r4, #0]
 800ce60:	07d0      	lsls	r0, r2, #31
 800ce62:	d502      	bpl.n	800ce6a <_printf_float+0x1a2>
 800ce64:	3301      	adds	r3, #1
 800ce66:	440b      	add	r3, r1
 800ce68:	6123      	str	r3, [r4, #16]
 800ce6a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ce6c:	f04f 0900 	mov.w	r9, #0
 800ce70:	e7de      	b.n	800ce30 <_printf_float+0x168>
 800ce72:	b913      	cbnz	r3, 800ce7a <_printf_float+0x1b2>
 800ce74:	6822      	ldr	r2, [r4, #0]
 800ce76:	07d2      	lsls	r2, r2, #31
 800ce78:	d501      	bpl.n	800ce7e <_printf_float+0x1b6>
 800ce7a:	3302      	adds	r3, #2
 800ce7c:	e7f4      	b.n	800ce68 <_printf_float+0x1a0>
 800ce7e:	2301      	movs	r3, #1
 800ce80:	e7f2      	b.n	800ce68 <_printf_float+0x1a0>
 800ce82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ce86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce88:	4299      	cmp	r1, r3
 800ce8a:	db05      	blt.n	800ce98 <_printf_float+0x1d0>
 800ce8c:	6823      	ldr	r3, [r4, #0]
 800ce8e:	6121      	str	r1, [r4, #16]
 800ce90:	07d8      	lsls	r0, r3, #31
 800ce92:	d5ea      	bpl.n	800ce6a <_printf_float+0x1a2>
 800ce94:	1c4b      	adds	r3, r1, #1
 800ce96:	e7e7      	b.n	800ce68 <_printf_float+0x1a0>
 800ce98:	2900      	cmp	r1, #0
 800ce9a:	bfd4      	ite	le
 800ce9c:	f1c1 0202 	rsble	r2, r1, #2
 800cea0:	2201      	movgt	r2, #1
 800cea2:	4413      	add	r3, r2
 800cea4:	e7e0      	b.n	800ce68 <_printf_float+0x1a0>
 800cea6:	6823      	ldr	r3, [r4, #0]
 800cea8:	055a      	lsls	r2, r3, #21
 800ceaa:	d407      	bmi.n	800cebc <_printf_float+0x1f4>
 800ceac:	6923      	ldr	r3, [r4, #16]
 800ceae:	4642      	mov	r2, r8
 800ceb0:	4631      	mov	r1, r6
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	47b8      	blx	r7
 800ceb6:	3001      	adds	r0, #1
 800ceb8:	d12c      	bne.n	800cf14 <_printf_float+0x24c>
 800ceba:	e764      	b.n	800cd86 <_printf_float+0xbe>
 800cebc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cec0:	f240 80e0 	bls.w	800d084 <_printf_float+0x3bc>
 800cec4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cec8:	2200      	movs	r2, #0
 800ceca:	2300      	movs	r3, #0
 800cecc:	f7f3 fe04 	bl	8000ad8 <__aeabi_dcmpeq>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d034      	beq.n	800cf3e <_printf_float+0x276>
 800ced4:	4a37      	ldr	r2, [pc, #220]	; (800cfb4 <_printf_float+0x2ec>)
 800ced6:	2301      	movs	r3, #1
 800ced8:	4631      	mov	r1, r6
 800ceda:	4628      	mov	r0, r5
 800cedc:	47b8      	blx	r7
 800cede:	3001      	adds	r0, #1
 800cee0:	f43f af51 	beq.w	800cd86 <_printf_float+0xbe>
 800cee4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cee8:	429a      	cmp	r2, r3
 800ceea:	db02      	blt.n	800cef2 <_printf_float+0x22a>
 800ceec:	6823      	ldr	r3, [r4, #0]
 800ceee:	07d8      	lsls	r0, r3, #31
 800cef0:	d510      	bpl.n	800cf14 <_printf_float+0x24c>
 800cef2:	ee18 3a10 	vmov	r3, s16
 800cef6:	4652      	mov	r2, sl
 800cef8:	4631      	mov	r1, r6
 800cefa:	4628      	mov	r0, r5
 800cefc:	47b8      	blx	r7
 800cefe:	3001      	adds	r0, #1
 800cf00:	f43f af41 	beq.w	800cd86 <_printf_float+0xbe>
 800cf04:	f04f 0800 	mov.w	r8, #0
 800cf08:	f104 091a 	add.w	r9, r4, #26
 800cf0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	4543      	cmp	r3, r8
 800cf12:	dc09      	bgt.n	800cf28 <_printf_float+0x260>
 800cf14:	6823      	ldr	r3, [r4, #0]
 800cf16:	079b      	lsls	r3, r3, #30
 800cf18:	f100 8107 	bmi.w	800d12a <_printf_float+0x462>
 800cf1c:	68e0      	ldr	r0, [r4, #12]
 800cf1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf20:	4298      	cmp	r0, r3
 800cf22:	bfb8      	it	lt
 800cf24:	4618      	movlt	r0, r3
 800cf26:	e730      	b.n	800cd8a <_printf_float+0xc2>
 800cf28:	2301      	movs	r3, #1
 800cf2a:	464a      	mov	r2, r9
 800cf2c:	4631      	mov	r1, r6
 800cf2e:	4628      	mov	r0, r5
 800cf30:	47b8      	blx	r7
 800cf32:	3001      	adds	r0, #1
 800cf34:	f43f af27 	beq.w	800cd86 <_printf_float+0xbe>
 800cf38:	f108 0801 	add.w	r8, r8, #1
 800cf3c:	e7e6      	b.n	800cf0c <_printf_float+0x244>
 800cf3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	dc39      	bgt.n	800cfb8 <_printf_float+0x2f0>
 800cf44:	4a1b      	ldr	r2, [pc, #108]	; (800cfb4 <_printf_float+0x2ec>)
 800cf46:	2301      	movs	r3, #1
 800cf48:	4631      	mov	r1, r6
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	47b8      	blx	r7
 800cf4e:	3001      	adds	r0, #1
 800cf50:	f43f af19 	beq.w	800cd86 <_printf_float+0xbe>
 800cf54:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	d102      	bne.n	800cf62 <_printf_float+0x29a>
 800cf5c:	6823      	ldr	r3, [r4, #0]
 800cf5e:	07d9      	lsls	r1, r3, #31
 800cf60:	d5d8      	bpl.n	800cf14 <_printf_float+0x24c>
 800cf62:	ee18 3a10 	vmov	r3, s16
 800cf66:	4652      	mov	r2, sl
 800cf68:	4631      	mov	r1, r6
 800cf6a:	4628      	mov	r0, r5
 800cf6c:	47b8      	blx	r7
 800cf6e:	3001      	adds	r0, #1
 800cf70:	f43f af09 	beq.w	800cd86 <_printf_float+0xbe>
 800cf74:	f04f 0900 	mov.w	r9, #0
 800cf78:	f104 0a1a 	add.w	sl, r4, #26
 800cf7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf7e:	425b      	negs	r3, r3
 800cf80:	454b      	cmp	r3, r9
 800cf82:	dc01      	bgt.n	800cf88 <_printf_float+0x2c0>
 800cf84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf86:	e792      	b.n	800ceae <_printf_float+0x1e6>
 800cf88:	2301      	movs	r3, #1
 800cf8a:	4652      	mov	r2, sl
 800cf8c:	4631      	mov	r1, r6
 800cf8e:	4628      	mov	r0, r5
 800cf90:	47b8      	blx	r7
 800cf92:	3001      	adds	r0, #1
 800cf94:	f43f aef7 	beq.w	800cd86 <_printf_float+0xbe>
 800cf98:	f109 0901 	add.w	r9, r9, #1
 800cf9c:	e7ee      	b.n	800cf7c <_printf_float+0x2b4>
 800cf9e:	bf00      	nop
 800cfa0:	7fefffff 	.word	0x7fefffff
 800cfa4:	0800f944 	.word	0x0800f944
 800cfa8:	0800f948 	.word	0x0800f948
 800cfac:	0800f94c 	.word	0x0800f94c
 800cfb0:	0800f950 	.word	0x0800f950
 800cfb4:	0800f954 	.word	0x0800f954
 800cfb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	bfa8      	it	ge
 800cfc0:	461a      	movge	r2, r3
 800cfc2:	2a00      	cmp	r2, #0
 800cfc4:	4691      	mov	r9, r2
 800cfc6:	dc37      	bgt.n	800d038 <_printf_float+0x370>
 800cfc8:	f04f 0b00 	mov.w	fp, #0
 800cfcc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfd0:	f104 021a 	add.w	r2, r4, #26
 800cfd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cfd6:	9305      	str	r3, [sp, #20]
 800cfd8:	eba3 0309 	sub.w	r3, r3, r9
 800cfdc:	455b      	cmp	r3, fp
 800cfde:	dc33      	bgt.n	800d048 <_printf_float+0x380>
 800cfe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	db3b      	blt.n	800d060 <_printf_float+0x398>
 800cfe8:	6823      	ldr	r3, [r4, #0]
 800cfea:	07da      	lsls	r2, r3, #31
 800cfec:	d438      	bmi.n	800d060 <_printf_float+0x398>
 800cfee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cff2:	eba2 0903 	sub.w	r9, r2, r3
 800cff6:	9b05      	ldr	r3, [sp, #20]
 800cff8:	1ad2      	subs	r2, r2, r3
 800cffa:	4591      	cmp	r9, r2
 800cffc:	bfa8      	it	ge
 800cffe:	4691      	movge	r9, r2
 800d000:	f1b9 0f00 	cmp.w	r9, #0
 800d004:	dc35      	bgt.n	800d072 <_printf_float+0x3aa>
 800d006:	f04f 0800 	mov.w	r8, #0
 800d00a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d00e:	f104 0a1a 	add.w	sl, r4, #26
 800d012:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d016:	1a9b      	subs	r3, r3, r2
 800d018:	eba3 0309 	sub.w	r3, r3, r9
 800d01c:	4543      	cmp	r3, r8
 800d01e:	f77f af79 	ble.w	800cf14 <_printf_float+0x24c>
 800d022:	2301      	movs	r3, #1
 800d024:	4652      	mov	r2, sl
 800d026:	4631      	mov	r1, r6
 800d028:	4628      	mov	r0, r5
 800d02a:	47b8      	blx	r7
 800d02c:	3001      	adds	r0, #1
 800d02e:	f43f aeaa 	beq.w	800cd86 <_printf_float+0xbe>
 800d032:	f108 0801 	add.w	r8, r8, #1
 800d036:	e7ec      	b.n	800d012 <_printf_float+0x34a>
 800d038:	4613      	mov	r3, r2
 800d03a:	4631      	mov	r1, r6
 800d03c:	4642      	mov	r2, r8
 800d03e:	4628      	mov	r0, r5
 800d040:	47b8      	blx	r7
 800d042:	3001      	adds	r0, #1
 800d044:	d1c0      	bne.n	800cfc8 <_printf_float+0x300>
 800d046:	e69e      	b.n	800cd86 <_printf_float+0xbe>
 800d048:	2301      	movs	r3, #1
 800d04a:	4631      	mov	r1, r6
 800d04c:	4628      	mov	r0, r5
 800d04e:	9205      	str	r2, [sp, #20]
 800d050:	47b8      	blx	r7
 800d052:	3001      	adds	r0, #1
 800d054:	f43f ae97 	beq.w	800cd86 <_printf_float+0xbe>
 800d058:	9a05      	ldr	r2, [sp, #20]
 800d05a:	f10b 0b01 	add.w	fp, fp, #1
 800d05e:	e7b9      	b.n	800cfd4 <_printf_float+0x30c>
 800d060:	ee18 3a10 	vmov	r3, s16
 800d064:	4652      	mov	r2, sl
 800d066:	4631      	mov	r1, r6
 800d068:	4628      	mov	r0, r5
 800d06a:	47b8      	blx	r7
 800d06c:	3001      	adds	r0, #1
 800d06e:	d1be      	bne.n	800cfee <_printf_float+0x326>
 800d070:	e689      	b.n	800cd86 <_printf_float+0xbe>
 800d072:	9a05      	ldr	r2, [sp, #20]
 800d074:	464b      	mov	r3, r9
 800d076:	4442      	add	r2, r8
 800d078:	4631      	mov	r1, r6
 800d07a:	4628      	mov	r0, r5
 800d07c:	47b8      	blx	r7
 800d07e:	3001      	adds	r0, #1
 800d080:	d1c1      	bne.n	800d006 <_printf_float+0x33e>
 800d082:	e680      	b.n	800cd86 <_printf_float+0xbe>
 800d084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d086:	2a01      	cmp	r2, #1
 800d088:	dc01      	bgt.n	800d08e <_printf_float+0x3c6>
 800d08a:	07db      	lsls	r3, r3, #31
 800d08c:	d53a      	bpl.n	800d104 <_printf_float+0x43c>
 800d08e:	2301      	movs	r3, #1
 800d090:	4642      	mov	r2, r8
 800d092:	4631      	mov	r1, r6
 800d094:	4628      	mov	r0, r5
 800d096:	47b8      	blx	r7
 800d098:	3001      	adds	r0, #1
 800d09a:	f43f ae74 	beq.w	800cd86 <_printf_float+0xbe>
 800d09e:	ee18 3a10 	vmov	r3, s16
 800d0a2:	4652      	mov	r2, sl
 800d0a4:	4631      	mov	r1, r6
 800d0a6:	4628      	mov	r0, r5
 800d0a8:	47b8      	blx	r7
 800d0aa:	3001      	adds	r0, #1
 800d0ac:	f43f ae6b 	beq.w	800cd86 <_printf_float+0xbe>
 800d0b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d0bc:	f7f3 fd0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0c0:	b9d8      	cbnz	r0, 800d0fa <_printf_float+0x432>
 800d0c2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d0c6:	f108 0201 	add.w	r2, r8, #1
 800d0ca:	4631      	mov	r1, r6
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	47b8      	blx	r7
 800d0d0:	3001      	adds	r0, #1
 800d0d2:	d10e      	bne.n	800d0f2 <_printf_float+0x42a>
 800d0d4:	e657      	b.n	800cd86 <_printf_float+0xbe>
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	4652      	mov	r2, sl
 800d0da:	4631      	mov	r1, r6
 800d0dc:	4628      	mov	r0, r5
 800d0de:	47b8      	blx	r7
 800d0e0:	3001      	adds	r0, #1
 800d0e2:	f43f ae50 	beq.w	800cd86 <_printf_float+0xbe>
 800d0e6:	f108 0801 	add.w	r8, r8, #1
 800d0ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0ec:	3b01      	subs	r3, #1
 800d0ee:	4543      	cmp	r3, r8
 800d0f0:	dcf1      	bgt.n	800d0d6 <_printf_float+0x40e>
 800d0f2:	464b      	mov	r3, r9
 800d0f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d0f8:	e6da      	b.n	800ceb0 <_printf_float+0x1e8>
 800d0fa:	f04f 0800 	mov.w	r8, #0
 800d0fe:	f104 0a1a 	add.w	sl, r4, #26
 800d102:	e7f2      	b.n	800d0ea <_printf_float+0x422>
 800d104:	2301      	movs	r3, #1
 800d106:	4642      	mov	r2, r8
 800d108:	e7df      	b.n	800d0ca <_printf_float+0x402>
 800d10a:	2301      	movs	r3, #1
 800d10c:	464a      	mov	r2, r9
 800d10e:	4631      	mov	r1, r6
 800d110:	4628      	mov	r0, r5
 800d112:	47b8      	blx	r7
 800d114:	3001      	adds	r0, #1
 800d116:	f43f ae36 	beq.w	800cd86 <_printf_float+0xbe>
 800d11a:	f108 0801 	add.w	r8, r8, #1
 800d11e:	68e3      	ldr	r3, [r4, #12]
 800d120:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d122:	1a5b      	subs	r3, r3, r1
 800d124:	4543      	cmp	r3, r8
 800d126:	dcf0      	bgt.n	800d10a <_printf_float+0x442>
 800d128:	e6f8      	b.n	800cf1c <_printf_float+0x254>
 800d12a:	f04f 0800 	mov.w	r8, #0
 800d12e:	f104 0919 	add.w	r9, r4, #25
 800d132:	e7f4      	b.n	800d11e <_printf_float+0x456>

0800d134 <_printf_common>:
 800d134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d138:	4616      	mov	r6, r2
 800d13a:	4699      	mov	r9, r3
 800d13c:	688a      	ldr	r2, [r1, #8]
 800d13e:	690b      	ldr	r3, [r1, #16]
 800d140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d144:	4293      	cmp	r3, r2
 800d146:	bfb8      	it	lt
 800d148:	4613      	movlt	r3, r2
 800d14a:	6033      	str	r3, [r6, #0]
 800d14c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d150:	4607      	mov	r7, r0
 800d152:	460c      	mov	r4, r1
 800d154:	b10a      	cbz	r2, 800d15a <_printf_common+0x26>
 800d156:	3301      	adds	r3, #1
 800d158:	6033      	str	r3, [r6, #0]
 800d15a:	6823      	ldr	r3, [r4, #0]
 800d15c:	0699      	lsls	r1, r3, #26
 800d15e:	bf42      	ittt	mi
 800d160:	6833      	ldrmi	r3, [r6, #0]
 800d162:	3302      	addmi	r3, #2
 800d164:	6033      	strmi	r3, [r6, #0]
 800d166:	6825      	ldr	r5, [r4, #0]
 800d168:	f015 0506 	ands.w	r5, r5, #6
 800d16c:	d106      	bne.n	800d17c <_printf_common+0x48>
 800d16e:	f104 0a19 	add.w	sl, r4, #25
 800d172:	68e3      	ldr	r3, [r4, #12]
 800d174:	6832      	ldr	r2, [r6, #0]
 800d176:	1a9b      	subs	r3, r3, r2
 800d178:	42ab      	cmp	r3, r5
 800d17a:	dc26      	bgt.n	800d1ca <_printf_common+0x96>
 800d17c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d180:	1e13      	subs	r3, r2, #0
 800d182:	6822      	ldr	r2, [r4, #0]
 800d184:	bf18      	it	ne
 800d186:	2301      	movne	r3, #1
 800d188:	0692      	lsls	r2, r2, #26
 800d18a:	d42b      	bmi.n	800d1e4 <_printf_common+0xb0>
 800d18c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d190:	4649      	mov	r1, r9
 800d192:	4638      	mov	r0, r7
 800d194:	47c0      	blx	r8
 800d196:	3001      	adds	r0, #1
 800d198:	d01e      	beq.n	800d1d8 <_printf_common+0xa4>
 800d19a:	6823      	ldr	r3, [r4, #0]
 800d19c:	6922      	ldr	r2, [r4, #16]
 800d19e:	f003 0306 	and.w	r3, r3, #6
 800d1a2:	2b04      	cmp	r3, #4
 800d1a4:	bf02      	ittt	eq
 800d1a6:	68e5      	ldreq	r5, [r4, #12]
 800d1a8:	6833      	ldreq	r3, [r6, #0]
 800d1aa:	1aed      	subeq	r5, r5, r3
 800d1ac:	68a3      	ldr	r3, [r4, #8]
 800d1ae:	bf0c      	ite	eq
 800d1b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1b4:	2500      	movne	r5, #0
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	bfc4      	itt	gt
 800d1ba:	1a9b      	subgt	r3, r3, r2
 800d1bc:	18ed      	addgt	r5, r5, r3
 800d1be:	2600      	movs	r6, #0
 800d1c0:	341a      	adds	r4, #26
 800d1c2:	42b5      	cmp	r5, r6
 800d1c4:	d11a      	bne.n	800d1fc <_printf_common+0xc8>
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	e008      	b.n	800d1dc <_printf_common+0xa8>
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	4652      	mov	r2, sl
 800d1ce:	4649      	mov	r1, r9
 800d1d0:	4638      	mov	r0, r7
 800d1d2:	47c0      	blx	r8
 800d1d4:	3001      	adds	r0, #1
 800d1d6:	d103      	bne.n	800d1e0 <_printf_common+0xac>
 800d1d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e0:	3501      	adds	r5, #1
 800d1e2:	e7c6      	b.n	800d172 <_printf_common+0x3e>
 800d1e4:	18e1      	adds	r1, r4, r3
 800d1e6:	1c5a      	adds	r2, r3, #1
 800d1e8:	2030      	movs	r0, #48	; 0x30
 800d1ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d1ee:	4422      	add	r2, r4
 800d1f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d1f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d1f8:	3302      	adds	r3, #2
 800d1fa:	e7c7      	b.n	800d18c <_printf_common+0x58>
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	4622      	mov	r2, r4
 800d200:	4649      	mov	r1, r9
 800d202:	4638      	mov	r0, r7
 800d204:	47c0      	blx	r8
 800d206:	3001      	adds	r0, #1
 800d208:	d0e6      	beq.n	800d1d8 <_printf_common+0xa4>
 800d20a:	3601      	adds	r6, #1
 800d20c:	e7d9      	b.n	800d1c2 <_printf_common+0x8e>
	...

0800d210 <_printf_i>:
 800d210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d214:	7e0f      	ldrb	r7, [r1, #24]
 800d216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d218:	2f78      	cmp	r7, #120	; 0x78
 800d21a:	4691      	mov	r9, r2
 800d21c:	4680      	mov	r8, r0
 800d21e:	460c      	mov	r4, r1
 800d220:	469a      	mov	sl, r3
 800d222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d226:	d807      	bhi.n	800d238 <_printf_i+0x28>
 800d228:	2f62      	cmp	r7, #98	; 0x62
 800d22a:	d80a      	bhi.n	800d242 <_printf_i+0x32>
 800d22c:	2f00      	cmp	r7, #0
 800d22e:	f000 80d4 	beq.w	800d3da <_printf_i+0x1ca>
 800d232:	2f58      	cmp	r7, #88	; 0x58
 800d234:	f000 80c0 	beq.w	800d3b8 <_printf_i+0x1a8>
 800d238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d23c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d240:	e03a      	b.n	800d2b8 <_printf_i+0xa8>
 800d242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d246:	2b15      	cmp	r3, #21
 800d248:	d8f6      	bhi.n	800d238 <_printf_i+0x28>
 800d24a:	a101      	add	r1, pc, #4	; (adr r1, 800d250 <_printf_i+0x40>)
 800d24c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d250:	0800d2a9 	.word	0x0800d2a9
 800d254:	0800d2bd 	.word	0x0800d2bd
 800d258:	0800d239 	.word	0x0800d239
 800d25c:	0800d239 	.word	0x0800d239
 800d260:	0800d239 	.word	0x0800d239
 800d264:	0800d239 	.word	0x0800d239
 800d268:	0800d2bd 	.word	0x0800d2bd
 800d26c:	0800d239 	.word	0x0800d239
 800d270:	0800d239 	.word	0x0800d239
 800d274:	0800d239 	.word	0x0800d239
 800d278:	0800d239 	.word	0x0800d239
 800d27c:	0800d3c1 	.word	0x0800d3c1
 800d280:	0800d2e9 	.word	0x0800d2e9
 800d284:	0800d37b 	.word	0x0800d37b
 800d288:	0800d239 	.word	0x0800d239
 800d28c:	0800d239 	.word	0x0800d239
 800d290:	0800d3e3 	.word	0x0800d3e3
 800d294:	0800d239 	.word	0x0800d239
 800d298:	0800d2e9 	.word	0x0800d2e9
 800d29c:	0800d239 	.word	0x0800d239
 800d2a0:	0800d239 	.word	0x0800d239
 800d2a4:	0800d383 	.word	0x0800d383
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	1d1a      	adds	r2, r3, #4
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	602a      	str	r2, [r5, #0]
 800d2b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e09f      	b.n	800d3fc <_printf_i+0x1ec>
 800d2bc:	6820      	ldr	r0, [r4, #0]
 800d2be:	682b      	ldr	r3, [r5, #0]
 800d2c0:	0607      	lsls	r7, r0, #24
 800d2c2:	f103 0104 	add.w	r1, r3, #4
 800d2c6:	6029      	str	r1, [r5, #0]
 800d2c8:	d501      	bpl.n	800d2ce <_printf_i+0xbe>
 800d2ca:	681e      	ldr	r6, [r3, #0]
 800d2cc:	e003      	b.n	800d2d6 <_printf_i+0xc6>
 800d2ce:	0646      	lsls	r6, r0, #25
 800d2d0:	d5fb      	bpl.n	800d2ca <_printf_i+0xba>
 800d2d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d2d6:	2e00      	cmp	r6, #0
 800d2d8:	da03      	bge.n	800d2e2 <_printf_i+0xd2>
 800d2da:	232d      	movs	r3, #45	; 0x2d
 800d2dc:	4276      	negs	r6, r6
 800d2de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2e2:	485a      	ldr	r0, [pc, #360]	; (800d44c <_printf_i+0x23c>)
 800d2e4:	230a      	movs	r3, #10
 800d2e6:	e012      	b.n	800d30e <_printf_i+0xfe>
 800d2e8:	682b      	ldr	r3, [r5, #0]
 800d2ea:	6820      	ldr	r0, [r4, #0]
 800d2ec:	1d19      	adds	r1, r3, #4
 800d2ee:	6029      	str	r1, [r5, #0]
 800d2f0:	0605      	lsls	r5, r0, #24
 800d2f2:	d501      	bpl.n	800d2f8 <_printf_i+0xe8>
 800d2f4:	681e      	ldr	r6, [r3, #0]
 800d2f6:	e002      	b.n	800d2fe <_printf_i+0xee>
 800d2f8:	0641      	lsls	r1, r0, #25
 800d2fa:	d5fb      	bpl.n	800d2f4 <_printf_i+0xe4>
 800d2fc:	881e      	ldrh	r6, [r3, #0]
 800d2fe:	4853      	ldr	r0, [pc, #332]	; (800d44c <_printf_i+0x23c>)
 800d300:	2f6f      	cmp	r7, #111	; 0x6f
 800d302:	bf0c      	ite	eq
 800d304:	2308      	moveq	r3, #8
 800d306:	230a      	movne	r3, #10
 800d308:	2100      	movs	r1, #0
 800d30a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d30e:	6865      	ldr	r5, [r4, #4]
 800d310:	60a5      	str	r5, [r4, #8]
 800d312:	2d00      	cmp	r5, #0
 800d314:	bfa2      	ittt	ge
 800d316:	6821      	ldrge	r1, [r4, #0]
 800d318:	f021 0104 	bicge.w	r1, r1, #4
 800d31c:	6021      	strge	r1, [r4, #0]
 800d31e:	b90e      	cbnz	r6, 800d324 <_printf_i+0x114>
 800d320:	2d00      	cmp	r5, #0
 800d322:	d04b      	beq.n	800d3bc <_printf_i+0x1ac>
 800d324:	4615      	mov	r5, r2
 800d326:	fbb6 f1f3 	udiv	r1, r6, r3
 800d32a:	fb03 6711 	mls	r7, r3, r1, r6
 800d32e:	5dc7      	ldrb	r7, [r0, r7]
 800d330:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d334:	4637      	mov	r7, r6
 800d336:	42bb      	cmp	r3, r7
 800d338:	460e      	mov	r6, r1
 800d33a:	d9f4      	bls.n	800d326 <_printf_i+0x116>
 800d33c:	2b08      	cmp	r3, #8
 800d33e:	d10b      	bne.n	800d358 <_printf_i+0x148>
 800d340:	6823      	ldr	r3, [r4, #0]
 800d342:	07de      	lsls	r6, r3, #31
 800d344:	d508      	bpl.n	800d358 <_printf_i+0x148>
 800d346:	6923      	ldr	r3, [r4, #16]
 800d348:	6861      	ldr	r1, [r4, #4]
 800d34a:	4299      	cmp	r1, r3
 800d34c:	bfde      	ittt	le
 800d34e:	2330      	movle	r3, #48	; 0x30
 800d350:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d354:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d358:	1b52      	subs	r2, r2, r5
 800d35a:	6122      	str	r2, [r4, #16]
 800d35c:	f8cd a000 	str.w	sl, [sp]
 800d360:	464b      	mov	r3, r9
 800d362:	aa03      	add	r2, sp, #12
 800d364:	4621      	mov	r1, r4
 800d366:	4640      	mov	r0, r8
 800d368:	f7ff fee4 	bl	800d134 <_printf_common>
 800d36c:	3001      	adds	r0, #1
 800d36e:	d14a      	bne.n	800d406 <_printf_i+0x1f6>
 800d370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d374:	b004      	add	sp, #16
 800d376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d37a:	6823      	ldr	r3, [r4, #0]
 800d37c:	f043 0320 	orr.w	r3, r3, #32
 800d380:	6023      	str	r3, [r4, #0]
 800d382:	4833      	ldr	r0, [pc, #204]	; (800d450 <_printf_i+0x240>)
 800d384:	2778      	movs	r7, #120	; 0x78
 800d386:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d38a:	6823      	ldr	r3, [r4, #0]
 800d38c:	6829      	ldr	r1, [r5, #0]
 800d38e:	061f      	lsls	r7, r3, #24
 800d390:	f851 6b04 	ldr.w	r6, [r1], #4
 800d394:	d402      	bmi.n	800d39c <_printf_i+0x18c>
 800d396:	065f      	lsls	r7, r3, #25
 800d398:	bf48      	it	mi
 800d39a:	b2b6      	uxthmi	r6, r6
 800d39c:	07df      	lsls	r7, r3, #31
 800d39e:	bf48      	it	mi
 800d3a0:	f043 0320 	orrmi.w	r3, r3, #32
 800d3a4:	6029      	str	r1, [r5, #0]
 800d3a6:	bf48      	it	mi
 800d3a8:	6023      	strmi	r3, [r4, #0]
 800d3aa:	b91e      	cbnz	r6, 800d3b4 <_printf_i+0x1a4>
 800d3ac:	6823      	ldr	r3, [r4, #0]
 800d3ae:	f023 0320 	bic.w	r3, r3, #32
 800d3b2:	6023      	str	r3, [r4, #0]
 800d3b4:	2310      	movs	r3, #16
 800d3b6:	e7a7      	b.n	800d308 <_printf_i+0xf8>
 800d3b8:	4824      	ldr	r0, [pc, #144]	; (800d44c <_printf_i+0x23c>)
 800d3ba:	e7e4      	b.n	800d386 <_printf_i+0x176>
 800d3bc:	4615      	mov	r5, r2
 800d3be:	e7bd      	b.n	800d33c <_printf_i+0x12c>
 800d3c0:	682b      	ldr	r3, [r5, #0]
 800d3c2:	6826      	ldr	r6, [r4, #0]
 800d3c4:	6961      	ldr	r1, [r4, #20]
 800d3c6:	1d18      	adds	r0, r3, #4
 800d3c8:	6028      	str	r0, [r5, #0]
 800d3ca:	0635      	lsls	r5, r6, #24
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	d501      	bpl.n	800d3d4 <_printf_i+0x1c4>
 800d3d0:	6019      	str	r1, [r3, #0]
 800d3d2:	e002      	b.n	800d3da <_printf_i+0x1ca>
 800d3d4:	0670      	lsls	r0, r6, #25
 800d3d6:	d5fb      	bpl.n	800d3d0 <_printf_i+0x1c0>
 800d3d8:	8019      	strh	r1, [r3, #0]
 800d3da:	2300      	movs	r3, #0
 800d3dc:	6123      	str	r3, [r4, #16]
 800d3de:	4615      	mov	r5, r2
 800d3e0:	e7bc      	b.n	800d35c <_printf_i+0x14c>
 800d3e2:	682b      	ldr	r3, [r5, #0]
 800d3e4:	1d1a      	adds	r2, r3, #4
 800d3e6:	602a      	str	r2, [r5, #0]
 800d3e8:	681d      	ldr	r5, [r3, #0]
 800d3ea:	6862      	ldr	r2, [r4, #4]
 800d3ec:	2100      	movs	r1, #0
 800d3ee:	4628      	mov	r0, r5
 800d3f0:	f7f2 fef6 	bl	80001e0 <memchr>
 800d3f4:	b108      	cbz	r0, 800d3fa <_printf_i+0x1ea>
 800d3f6:	1b40      	subs	r0, r0, r5
 800d3f8:	6060      	str	r0, [r4, #4]
 800d3fa:	6863      	ldr	r3, [r4, #4]
 800d3fc:	6123      	str	r3, [r4, #16]
 800d3fe:	2300      	movs	r3, #0
 800d400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d404:	e7aa      	b.n	800d35c <_printf_i+0x14c>
 800d406:	6923      	ldr	r3, [r4, #16]
 800d408:	462a      	mov	r2, r5
 800d40a:	4649      	mov	r1, r9
 800d40c:	4640      	mov	r0, r8
 800d40e:	47d0      	blx	sl
 800d410:	3001      	adds	r0, #1
 800d412:	d0ad      	beq.n	800d370 <_printf_i+0x160>
 800d414:	6823      	ldr	r3, [r4, #0]
 800d416:	079b      	lsls	r3, r3, #30
 800d418:	d413      	bmi.n	800d442 <_printf_i+0x232>
 800d41a:	68e0      	ldr	r0, [r4, #12]
 800d41c:	9b03      	ldr	r3, [sp, #12]
 800d41e:	4298      	cmp	r0, r3
 800d420:	bfb8      	it	lt
 800d422:	4618      	movlt	r0, r3
 800d424:	e7a6      	b.n	800d374 <_printf_i+0x164>
 800d426:	2301      	movs	r3, #1
 800d428:	4632      	mov	r2, r6
 800d42a:	4649      	mov	r1, r9
 800d42c:	4640      	mov	r0, r8
 800d42e:	47d0      	blx	sl
 800d430:	3001      	adds	r0, #1
 800d432:	d09d      	beq.n	800d370 <_printf_i+0x160>
 800d434:	3501      	adds	r5, #1
 800d436:	68e3      	ldr	r3, [r4, #12]
 800d438:	9903      	ldr	r1, [sp, #12]
 800d43a:	1a5b      	subs	r3, r3, r1
 800d43c:	42ab      	cmp	r3, r5
 800d43e:	dcf2      	bgt.n	800d426 <_printf_i+0x216>
 800d440:	e7eb      	b.n	800d41a <_printf_i+0x20a>
 800d442:	2500      	movs	r5, #0
 800d444:	f104 0619 	add.w	r6, r4, #25
 800d448:	e7f5      	b.n	800d436 <_printf_i+0x226>
 800d44a:	bf00      	nop
 800d44c:	0800f956 	.word	0x0800f956
 800d450:	0800f967 	.word	0x0800f967

0800d454 <std>:
 800d454:	2300      	movs	r3, #0
 800d456:	b510      	push	{r4, lr}
 800d458:	4604      	mov	r4, r0
 800d45a:	e9c0 3300 	strd	r3, r3, [r0]
 800d45e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d462:	6083      	str	r3, [r0, #8]
 800d464:	8181      	strh	r1, [r0, #12]
 800d466:	6643      	str	r3, [r0, #100]	; 0x64
 800d468:	81c2      	strh	r2, [r0, #14]
 800d46a:	6183      	str	r3, [r0, #24]
 800d46c:	4619      	mov	r1, r3
 800d46e:	2208      	movs	r2, #8
 800d470:	305c      	adds	r0, #92	; 0x5c
 800d472:	f000 f928 	bl	800d6c6 <memset>
 800d476:	4b0d      	ldr	r3, [pc, #52]	; (800d4ac <std+0x58>)
 800d478:	6263      	str	r3, [r4, #36]	; 0x24
 800d47a:	4b0d      	ldr	r3, [pc, #52]	; (800d4b0 <std+0x5c>)
 800d47c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d47e:	4b0d      	ldr	r3, [pc, #52]	; (800d4b4 <std+0x60>)
 800d480:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d482:	4b0d      	ldr	r3, [pc, #52]	; (800d4b8 <std+0x64>)
 800d484:	6323      	str	r3, [r4, #48]	; 0x30
 800d486:	4b0d      	ldr	r3, [pc, #52]	; (800d4bc <std+0x68>)
 800d488:	6224      	str	r4, [r4, #32]
 800d48a:	429c      	cmp	r4, r3
 800d48c:	d006      	beq.n	800d49c <std+0x48>
 800d48e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d492:	4294      	cmp	r4, r2
 800d494:	d002      	beq.n	800d49c <std+0x48>
 800d496:	33d0      	adds	r3, #208	; 0xd0
 800d498:	429c      	cmp	r4, r3
 800d49a:	d105      	bne.n	800d4a8 <std+0x54>
 800d49c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4a4:	f000 b98c 	b.w	800d7c0 <__retarget_lock_init_recursive>
 800d4a8:	bd10      	pop	{r4, pc}
 800d4aa:	bf00      	nop
 800d4ac:	0800d641 	.word	0x0800d641
 800d4b0:	0800d663 	.word	0x0800d663
 800d4b4:	0800d69b 	.word	0x0800d69b
 800d4b8:	0800d6bf 	.word	0x0800d6bf
 800d4bc:	20002194 	.word	0x20002194

0800d4c0 <stdio_exit_handler>:
 800d4c0:	4a02      	ldr	r2, [pc, #8]	; (800d4cc <stdio_exit_handler+0xc>)
 800d4c2:	4903      	ldr	r1, [pc, #12]	; (800d4d0 <stdio_exit_handler+0x10>)
 800d4c4:	4803      	ldr	r0, [pc, #12]	; (800d4d4 <stdio_exit_handler+0x14>)
 800d4c6:	f000 b869 	b.w	800d59c <_fwalk_sglue>
 800d4ca:	bf00      	nop
 800d4cc:	20000120 	.word	0x20000120
 800d4d0:	0800f171 	.word	0x0800f171
 800d4d4:	2000012c 	.word	0x2000012c

0800d4d8 <cleanup_stdio>:
 800d4d8:	6841      	ldr	r1, [r0, #4]
 800d4da:	4b0c      	ldr	r3, [pc, #48]	; (800d50c <cleanup_stdio+0x34>)
 800d4dc:	4299      	cmp	r1, r3
 800d4de:	b510      	push	{r4, lr}
 800d4e0:	4604      	mov	r4, r0
 800d4e2:	d001      	beq.n	800d4e8 <cleanup_stdio+0x10>
 800d4e4:	f001 fe44 	bl	800f170 <_fflush_r>
 800d4e8:	68a1      	ldr	r1, [r4, #8]
 800d4ea:	4b09      	ldr	r3, [pc, #36]	; (800d510 <cleanup_stdio+0x38>)
 800d4ec:	4299      	cmp	r1, r3
 800d4ee:	d002      	beq.n	800d4f6 <cleanup_stdio+0x1e>
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	f001 fe3d 	bl	800f170 <_fflush_r>
 800d4f6:	68e1      	ldr	r1, [r4, #12]
 800d4f8:	4b06      	ldr	r3, [pc, #24]	; (800d514 <cleanup_stdio+0x3c>)
 800d4fa:	4299      	cmp	r1, r3
 800d4fc:	d004      	beq.n	800d508 <cleanup_stdio+0x30>
 800d4fe:	4620      	mov	r0, r4
 800d500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d504:	f001 be34 	b.w	800f170 <_fflush_r>
 800d508:	bd10      	pop	{r4, pc}
 800d50a:	bf00      	nop
 800d50c:	20002194 	.word	0x20002194
 800d510:	200021fc 	.word	0x200021fc
 800d514:	20002264 	.word	0x20002264

0800d518 <global_stdio_init.part.0>:
 800d518:	b510      	push	{r4, lr}
 800d51a:	4b0b      	ldr	r3, [pc, #44]	; (800d548 <global_stdio_init.part.0+0x30>)
 800d51c:	4c0b      	ldr	r4, [pc, #44]	; (800d54c <global_stdio_init.part.0+0x34>)
 800d51e:	4a0c      	ldr	r2, [pc, #48]	; (800d550 <global_stdio_init.part.0+0x38>)
 800d520:	601a      	str	r2, [r3, #0]
 800d522:	4620      	mov	r0, r4
 800d524:	2200      	movs	r2, #0
 800d526:	2104      	movs	r1, #4
 800d528:	f7ff ff94 	bl	800d454 <std>
 800d52c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d530:	2201      	movs	r2, #1
 800d532:	2109      	movs	r1, #9
 800d534:	f7ff ff8e 	bl	800d454 <std>
 800d538:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d53c:	2202      	movs	r2, #2
 800d53e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d542:	2112      	movs	r1, #18
 800d544:	f7ff bf86 	b.w	800d454 <std>
 800d548:	200022cc 	.word	0x200022cc
 800d54c:	20002194 	.word	0x20002194
 800d550:	0800d4c1 	.word	0x0800d4c1

0800d554 <__sfp_lock_acquire>:
 800d554:	4801      	ldr	r0, [pc, #4]	; (800d55c <__sfp_lock_acquire+0x8>)
 800d556:	f000 b934 	b.w	800d7c2 <__retarget_lock_acquire_recursive>
 800d55a:	bf00      	nop
 800d55c:	200022d5 	.word	0x200022d5

0800d560 <__sfp_lock_release>:
 800d560:	4801      	ldr	r0, [pc, #4]	; (800d568 <__sfp_lock_release+0x8>)
 800d562:	f000 b92f 	b.w	800d7c4 <__retarget_lock_release_recursive>
 800d566:	bf00      	nop
 800d568:	200022d5 	.word	0x200022d5

0800d56c <__sinit>:
 800d56c:	b510      	push	{r4, lr}
 800d56e:	4604      	mov	r4, r0
 800d570:	f7ff fff0 	bl	800d554 <__sfp_lock_acquire>
 800d574:	6a23      	ldr	r3, [r4, #32]
 800d576:	b11b      	cbz	r3, 800d580 <__sinit+0x14>
 800d578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d57c:	f7ff bff0 	b.w	800d560 <__sfp_lock_release>
 800d580:	4b04      	ldr	r3, [pc, #16]	; (800d594 <__sinit+0x28>)
 800d582:	6223      	str	r3, [r4, #32]
 800d584:	4b04      	ldr	r3, [pc, #16]	; (800d598 <__sinit+0x2c>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d1f5      	bne.n	800d578 <__sinit+0xc>
 800d58c:	f7ff ffc4 	bl	800d518 <global_stdio_init.part.0>
 800d590:	e7f2      	b.n	800d578 <__sinit+0xc>
 800d592:	bf00      	nop
 800d594:	0800d4d9 	.word	0x0800d4d9
 800d598:	200022cc 	.word	0x200022cc

0800d59c <_fwalk_sglue>:
 800d59c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5a0:	4607      	mov	r7, r0
 800d5a2:	4688      	mov	r8, r1
 800d5a4:	4614      	mov	r4, r2
 800d5a6:	2600      	movs	r6, #0
 800d5a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d5ac:	f1b9 0901 	subs.w	r9, r9, #1
 800d5b0:	d505      	bpl.n	800d5be <_fwalk_sglue+0x22>
 800d5b2:	6824      	ldr	r4, [r4, #0]
 800d5b4:	2c00      	cmp	r4, #0
 800d5b6:	d1f7      	bne.n	800d5a8 <_fwalk_sglue+0xc>
 800d5b8:	4630      	mov	r0, r6
 800d5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5be:	89ab      	ldrh	r3, [r5, #12]
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d907      	bls.n	800d5d4 <_fwalk_sglue+0x38>
 800d5c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5c8:	3301      	adds	r3, #1
 800d5ca:	d003      	beq.n	800d5d4 <_fwalk_sglue+0x38>
 800d5cc:	4629      	mov	r1, r5
 800d5ce:	4638      	mov	r0, r7
 800d5d0:	47c0      	blx	r8
 800d5d2:	4306      	orrs	r6, r0
 800d5d4:	3568      	adds	r5, #104	; 0x68
 800d5d6:	e7e9      	b.n	800d5ac <_fwalk_sglue+0x10>

0800d5d8 <sniprintf>:
 800d5d8:	b40c      	push	{r2, r3}
 800d5da:	b530      	push	{r4, r5, lr}
 800d5dc:	4b17      	ldr	r3, [pc, #92]	; (800d63c <sniprintf+0x64>)
 800d5de:	1e0c      	subs	r4, r1, #0
 800d5e0:	681d      	ldr	r5, [r3, #0]
 800d5e2:	b09d      	sub	sp, #116	; 0x74
 800d5e4:	da08      	bge.n	800d5f8 <sniprintf+0x20>
 800d5e6:	238b      	movs	r3, #139	; 0x8b
 800d5e8:	602b      	str	r3, [r5, #0]
 800d5ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5ee:	b01d      	add	sp, #116	; 0x74
 800d5f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d5f4:	b002      	add	sp, #8
 800d5f6:	4770      	bx	lr
 800d5f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d5fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d600:	bf14      	ite	ne
 800d602:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d606:	4623      	moveq	r3, r4
 800d608:	9304      	str	r3, [sp, #16]
 800d60a:	9307      	str	r3, [sp, #28]
 800d60c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d610:	9002      	str	r0, [sp, #8]
 800d612:	9006      	str	r0, [sp, #24]
 800d614:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d618:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d61a:	ab21      	add	r3, sp, #132	; 0x84
 800d61c:	a902      	add	r1, sp, #8
 800d61e:	4628      	mov	r0, r5
 800d620:	9301      	str	r3, [sp, #4]
 800d622:	f001 fc21 	bl	800ee68 <_svfiprintf_r>
 800d626:	1c43      	adds	r3, r0, #1
 800d628:	bfbc      	itt	lt
 800d62a:	238b      	movlt	r3, #139	; 0x8b
 800d62c:	602b      	strlt	r3, [r5, #0]
 800d62e:	2c00      	cmp	r4, #0
 800d630:	d0dd      	beq.n	800d5ee <sniprintf+0x16>
 800d632:	9b02      	ldr	r3, [sp, #8]
 800d634:	2200      	movs	r2, #0
 800d636:	701a      	strb	r2, [r3, #0]
 800d638:	e7d9      	b.n	800d5ee <sniprintf+0x16>
 800d63a:	bf00      	nop
 800d63c:	20000178 	.word	0x20000178

0800d640 <__sread>:
 800d640:	b510      	push	{r4, lr}
 800d642:	460c      	mov	r4, r1
 800d644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d648:	f000 f86c 	bl	800d724 <_read_r>
 800d64c:	2800      	cmp	r0, #0
 800d64e:	bfab      	itete	ge
 800d650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d652:	89a3      	ldrhlt	r3, [r4, #12]
 800d654:	181b      	addge	r3, r3, r0
 800d656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d65a:	bfac      	ite	ge
 800d65c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d65e:	81a3      	strhlt	r3, [r4, #12]
 800d660:	bd10      	pop	{r4, pc}

0800d662 <__swrite>:
 800d662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d666:	461f      	mov	r7, r3
 800d668:	898b      	ldrh	r3, [r1, #12]
 800d66a:	05db      	lsls	r3, r3, #23
 800d66c:	4605      	mov	r5, r0
 800d66e:	460c      	mov	r4, r1
 800d670:	4616      	mov	r6, r2
 800d672:	d505      	bpl.n	800d680 <__swrite+0x1e>
 800d674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d678:	2302      	movs	r3, #2
 800d67a:	2200      	movs	r2, #0
 800d67c:	f000 f840 	bl	800d700 <_lseek_r>
 800d680:	89a3      	ldrh	r3, [r4, #12]
 800d682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d68a:	81a3      	strh	r3, [r4, #12]
 800d68c:	4632      	mov	r2, r6
 800d68e:	463b      	mov	r3, r7
 800d690:	4628      	mov	r0, r5
 800d692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d696:	f000 b857 	b.w	800d748 <_write_r>

0800d69a <__sseek>:
 800d69a:	b510      	push	{r4, lr}
 800d69c:	460c      	mov	r4, r1
 800d69e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6a2:	f000 f82d 	bl	800d700 <_lseek_r>
 800d6a6:	1c43      	adds	r3, r0, #1
 800d6a8:	89a3      	ldrh	r3, [r4, #12]
 800d6aa:	bf15      	itete	ne
 800d6ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800d6ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d6b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d6b6:	81a3      	strheq	r3, [r4, #12]
 800d6b8:	bf18      	it	ne
 800d6ba:	81a3      	strhne	r3, [r4, #12]
 800d6bc:	bd10      	pop	{r4, pc}

0800d6be <__sclose>:
 800d6be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6c2:	f000 b80d 	b.w	800d6e0 <_close_r>

0800d6c6 <memset>:
 800d6c6:	4402      	add	r2, r0
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d100      	bne.n	800d6d0 <memset+0xa>
 800d6ce:	4770      	bx	lr
 800d6d0:	f803 1b01 	strb.w	r1, [r3], #1
 800d6d4:	e7f9      	b.n	800d6ca <memset+0x4>
	...

0800d6d8 <_localeconv_r>:
 800d6d8:	4800      	ldr	r0, [pc, #0]	; (800d6dc <_localeconv_r+0x4>)
 800d6da:	4770      	bx	lr
 800d6dc:	2000026c 	.word	0x2000026c

0800d6e0 <_close_r>:
 800d6e0:	b538      	push	{r3, r4, r5, lr}
 800d6e2:	4d06      	ldr	r5, [pc, #24]	; (800d6fc <_close_r+0x1c>)
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	4608      	mov	r0, r1
 800d6ea:	602b      	str	r3, [r5, #0]
 800d6ec:	f7f4 fd81 	bl	80021f2 <_close>
 800d6f0:	1c43      	adds	r3, r0, #1
 800d6f2:	d102      	bne.n	800d6fa <_close_r+0x1a>
 800d6f4:	682b      	ldr	r3, [r5, #0]
 800d6f6:	b103      	cbz	r3, 800d6fa <_close_r+0x1a>
 800d6f8:	6023      	str	r3, [r4, #0]
 800d6fa:	bd38      	pop	{r3, r4, r5, pc}
 800d6fc:	200022d0 	.word	0x200022d0

0800d700 <_lseek_r>:
 800d700:	b538      	push	{r3, r4, r5, lr}
 800d702:	4d07      	ldr	r5, [pc, #28]	; (800d720 <_lseek_r+0x20>)
 800d704:	4604      	mov	r4, r0
 800d706:	4608      	mov	r0, r1
 800d708:	4611      	mov	r1, r2
 800d70a:	2200      	movs	r2, #0
 800d70c:	602a      	str	r2, [r5, #0]
 800d70e:	461a      	mov	r2, r3
 800d710:	f7f4 fd96 	bl	8002240 <_lseek>
 800d714:	1c43      	adds	r3, r0, #1
 800d716:	d102      	bne.n	800d71e <_lseek_r+0x1e>
 800d718:	682b      	ldr	r3, [r5, #0]
 800d71a:	b103      	cbz	r3, 800d71e <_lseek_r+0x1e>
 800d71c:	6023      	str	r3, [r4, #0]
 800d71e:	bd38      	pop	{r3, r4, r5, pc}
 800d720:	200022d0 	.word	0x200022d0

0800d724 <_read_r>:
 800d724:	b538      	push	{r3, r4, r5, lr}
 800d726:	4d07      	ldr	r5, [pc, #28]	; (800d744 <_read_r+0x20>)
 800d728:	4604      	mov	r4, r0
 800d72a:	4608      	mov	r0, r1
 800d72c:	4611      	mov	r1, r2
 800d72e:	2200      	movs	r2, #0
 800d730:	602a      	str	r2, [r5, #0]
 800d732:	461a      	mov	r2, r3
 800d734:	f7f4 fd24 	bl	8002180 <_read>
 800d738:	1c43      	adds	r3, r0, #1
 800d73a:	d102      	bne.n	800d742 <_read_r+0x1e>
 800d73c:	682b      	ldr	r3, [r5, #0]
 800d73e:	b103      	cbz	r3, 800d742 <_read_r+0x1e>
 800d740:	6023      	str	r3, [r4, #0]
 800d742:	bd38      	pop	{r3, r4, r5, pc}
 800d744:	200022d0 	.word	0x200022d0

0800d748 <_write_r>:
 800d748:	b538      	push	{r3, r4, r5, lr}
 800d74a:	4d07      	ldr	r5, [pc, #28]	; (800d768 <_write_r+0x20>)
 800d74c:	4604      	mov	r4, r0
 800d74e:	4608      	mov	r0, r1
 800d750:	4611      	mov	r1, r2
 800d752:	2200      	movs	r2, #0
 800d754:	602a      	str	r2, [r5, #0]
 800d756:	461a      	mov	r2, r3
 800d758:	f7f4 fd2f 	bl	80021ba <_write>
 800d75c:	1c43      	adds	r3, r0, #1
 800d75e:	d102      	bne.n	800d766 <_write_r+0x1e>
 800d760:	682b      	ldr	r3, [r5, #0]
 800d762:	b103      	cbz	r3, 800d766 <_write_r+0x1e>
 800d764:	6023      	str	r3, [r4, #0]
 800d766:	bd38      	pop	{r3, r4, r5, pc}
 800d768:	200022d0 	.word	0x200022d0

0800d76c <__errno>:
 800d76c:	4b01      	ldr	r3, [pc, #4]	; (800d774 <__errno+0x8>)
 800d76e:	6818      	ldr	r0, [r3, #0]
 800d770:	4770      	bx	lr
 800d772:	bf00      	nop
 800d774:	20000178 	.word	0x20000178

0800d778 <__libc_init_array>:
 800d778:	b570      	push	{r4, r5, r6, lr}
 800d77a:	4d0d      	ldr	r5, [pc, #52]	; (800d7b0 <__libc_init_array+0x38>)
 800d77c:	4c0d      	ldr	r4, [pc, #52]	; (800d7b4 <__libc_init_array+0x3c>)
 800d77e:	1b64      	subs	r4, r4, r5
 800d780:	10a4      	asrs	r4, r4, #2
 800d782:	2600      	movs	r6, #0
 800d784:	42a6      	cmp	r6, r4
 800d786:	d109      	bne.n	800d79c <__libc_init_array+0x24>
 800d788:	4d0b      	ldr	r5, [pc, #44]	; (800d7b8 <__libc_init_array+0x40>)
 800d78a:	4c0c      	ldr	r4, [pc, #48]	; (800d7bc <__libc_init_array+0x44>)
 800d78c:	f002 f894 	bl	800f8b8 <_init>
 800d790:	1b64      	subs	r4, r4, r5
 800d792:	10a4      	asrs	r4, r4, #2
 800d794:	2600      	movs	r6, #0
 800d796:	42a6      	cmp	r6, r4
 800d798:	d105      	bne.n	800d7a6 <__libc_init_array+0x2e>
 800d79a:	bd70      	pop	{r4, r5, r6, pc}
 800d79c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7a0:	4798      	blx	r3
 800d7a2:	3601      	adds	r6, #1
 800d7a4:	e7ee      	b.n	800d784 <__libc_init_array+0xc>
 800d7a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7aa:	4798      	blx	r3
 800d7ac:	3601      	adds	r6, #1
 800d7ae:	e7f2      	b.n	800d796 <__libc_init_array+0x1e>
 800d7b0:	0800fcbc 	.word	0x0800fcbc
 800d7b4:	0800fcbc 	.word	0x0800fcbc
 800d7b8:	0800fcbc 	.word	0x0800fcbc
 800d7bc:	0800fcc0 	.word	0x0800fcc0

0800d7c0 <__retarget_lock_init_recursive>:
 800d7c0:	4770      	bx	lr

0800d7c2 <__retarget_lock_acquire_recursive>:
 800d7c2:	4770      	bx	lr

0800d7c4 <__retarget_lock_release_recursive>:
 800d7c4:	4770      	bx	lr

0800d7c6 <quorem>:
 800d7c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ca:	6903      	ldr	r3, [r0, #16]
 800d7cc:	690c      	ldr	r4, [r1, #16]
 800d7ce:	42a3      	cmp	r3, r4
 800d7d0:	4607      	mov	r7, r0
 800d7d2:	db7e      	blt.n	800d8d2 <quorem+0x10c>
 800d7d4:	3c01      	subs	r4, #1
 800d7d6:	f101 0814 	add.w	r8, r1, #20
 800d7da:	f100 0514 	add.w	r5, r0, #20
 800d7de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d7e2:	9301      	str	r3, [sp, #4]
 800d7e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d7e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d7f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d7f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d7fc:	d331      	bcc.n	800d862 <quorem+0x9c>
 800d7fe:	f04f 0e00 	mov.w	lr, #0
 800d802:	4640      	mov	r0, r8
 800d804:	46ac      	mov	ip, r5
 800d806:	46f2      	mov	sl, lr
 800d808:	f850 2b04 	ldr.w	r2, [r0], #4
 800d80c:	b293      	uxth	r3, r2
 800d80e:	fb06 e303 	mla	r3, r6, r3, lr
 800d812:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d816:	0c1a      	lsrs	r2, r3, #16
 800d818:	b29b      	uxth	r3, r3
 800d81a:	ebaa 0303 	sub.w	r3, sl, r3
 800d81e:	f8dc a000 	ldr.w	sl, [ip]
 800d822:	fa13 f38a 	uxtah	r3, r3, sl
 800d826:	fb06 220e 	mla	r2, r6, lr, r2
 800d82a:	9300      	str	r3, [sp, #0]
 800d82c:	9b00      	ldr	r3, [sp, #0]
 800d82e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d832:	b292      	uxth	r2, r2
 800d834:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d838:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d83c:	f8bd 3000 	ldrh.w	r3, [sp]
 800d840:	4581      	cmp	r9, r0
 800d842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d846:	f84c 3b04 	str.w	r3, [ip], #4
 800d84a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d84e:	d2db      	bcs.n	800d808 <quorem+0x42>
 800d850:	f855 300b 	ldr.w	r3, [r5, fp]
 800d854:	b92b      	cbnz	r3, 800d862 <quorem+0x9c>
 800d856:	9b01      	ldr	r3, [sp, #4]
 800d858:	3b04      	subs	r3, #4
 800d85a:	429d      	cmp	r5, r3
 800d85c:	461a      	mov	r2, r3
 800d85e:	d32c      	bcc.n	800d8ba <quorem+0xf4>
 800d860:	613c      	str	r4, [r7, #16]
 800d862:	4638      	mov	r0, r7
 800d864:	f001 f9a6 	bl	800ebb4 <__mcmp>
 800d868:	2800      	cmp	r0, #0
 800d86a:	db22      	blt.n	800d8b2 <quorem+0xec>
 800d86c:	3601      	adds	r6, #1
 800d86e:	4629      	mov	r1, r5
 800d870:	2000      	movs	r0, #0
 800d872:	f858 2b04 	ldr.w	r2, [r8], #4
 800d876:	f8d1 c000 	ldr.w	ip, [r1]
 800d87a:	b293      	uxth	r3, r2
 800d87c:	1ac3      	subs	r3, r0, r3
 800d87e:	0c12      	lsrs	r2, r2, #16
 800d880:	fa13 f38c 	uxtah	r3, r3, ip
 800d884:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d888:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d892:	45c1      	cmp	r9, r8
 800d894:	f841 3b04 	str.w	r3, [r1], #4
 800d898:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d89c:	d2e9      	bcs.n	800d872 <quorem+0xac>
 800d89e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8a6:	b922      	cbnz	r2, 800d8b2 <quorem+0xec>
 800d8a8:	3b04      	subs	r3, #4
 800d8aa:	429d      	cmp	r5, r3
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	d30a      	bcc.n	800d8c6 <quorem+0x100>
 800d8b0:	613c      	str	r4, [r7, #16]
 800d8b2:	4630      	mov	r0, r6
 800d8b4:	b003      	add	sp, #12
 800d8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ba:	6812      	ldr	r2, [r2, #0]
 800d8bc:	3b04      	subs	r3, #4
 800d8be:	2a00      	cmp	r2, #0
 800d8c0:	d1ce      	bne.n	800d860 <quorem+0x9a>
 800d8c2:	3c01      	subs	r4, #1
 800d8c4:	e7c9      	b.n	800d85a <quorem+0x94>
 800d8c6:	6812      	ldr	r2, [r2, #0]
 800d8c8:	3b04      	subs	r3, #4
 800d8ca:	2a00      	cmp	r2, #0
 800d8cc:	d1f0      	bne.n	800d8b0 <quorem+0xea>
 800d8ce:	3c01      	subs	r4, #1
 800d8d0:	e7eb      	b.n	800d8aa <quorem+0xe4>
 800d8d2:	2000      	movs	r0, #0
 800d8d4:	e7ee      	b.n	800d8b4 <quorem+0xee>
	...

0800d8d8 <_dtoa_r>:
 800d8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8dc:	ed2d 8b04 	vpush	{d8-d9}
 800d8e0:	69c5      	ldr	r5, [r0, #28]
 800d8e2:	b093      	sub	sp, #76	; 0x4c
 800d8e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d8e8:	ec57 6b10 	vmov	r6, r7, d0
 800d8ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d8f0:	9107      	str	r1, [sp, #28]
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	920a      	str	r2, [sp, #40]	; 0x28
 800d8f6:	930d      	str	r3, [sp, #52]	; 0x34
 800d8f8:	b975      	cbnz	r5, 800d918 <_dtoa_r+0x40>
 800d8fa:	2010      	movs	r0, #16
 800d8fc:	f000 fe2a 	bl	800e554 <malloc>
 800d900:	4602      	mov	r2, r0
 800d902:	61e0      	str	r0, [r4, #28]
 800d904:	b920      	cbnz	r0, 800d910 <_dtoa_r+0x38>
 800d906:	4bae      	ldr	r3, [pc, #696]	; (800dbc0 <_dtoa_r+0x2e8>)
 800d908:	21ef      	movs	r1, #239	; 0xef
 800d90a:	48ae      	ldr	r0, [pc, #696]	; (800dbc4 <_dtoa_r+0x2ec>)
 800d90c:	f001 fc90 	bl	800f230 <__assert_func>
 800d910:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d914:	6005      	str	r5, [r0, #0]
 800d916:	60c5      	str	r5, [r0, #12]
 800d918:	69e3      	ldr	r3, [r4, #28]
 800d91a:	6819      	ldr	r1, [r3, #0]
 800d91c:	b151      	cbz	r1, 800d934 <_dtoa_r+0x5c>
 800d91e:	685a      	ldr	r2, [r3, #4]
 800d920:	604a      	str	r2, [r1, #4]
 800d922:	2301      	movs	r3, #1
 800d924:	4093      	lsls	r3, r2
 800d926:	608b      	str	r3, [r1, #8]
 800d928:	4620      	mov	r0, r4
 800d92a:	f000 ff07 	bl	800e73c <_Bfree>
 800d92e:	69e3      	ldr	r3, [r4, #28]
 800d930:	2200      	movs	r2, #0
 800d932:	601a      	str	r2, [r3, #0]
 800d934:	1e3b      	subs	r3, r7, #0
 800d936:	bfbb      	ittet	lt
 800d938:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d93c:	9303      	strlt	r3, [sp, #12]
 800d93e:	2300      	movge	r3, #0
 800d940:	2201      	movlt	r2, #1
 800d942:	bfac      	ite	ge
 800d944:	f8c8 3000 	strge.w	r3, [r8]
 800d948:	f8c8 2000 	strlt.w	r2, [r8]
 800d94c:	4b9e      	ldr	r3, [pc, #632]	; (800dbc8 <_dtoa_r+0x2f0>)
 800d94e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d952:	ea33 0308 	bics.w	r3, r3, r8
 800d956:	d11b      	bne.n	800d990 <_dtoa_r+0xb8>
 800d958:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d95a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d95e:	6013      	str	r3, [r2, #0]
 800d960:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d964:	4333      	orrs	r3, r6
 800d966:	f000 8593 	beq.w	800e490 <_dtoa_r+0xbb8>
 800d96a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d96c:	b963      	cbnz	r3, 800d988 <_dtoa_r+0xb0>
 800d96e:	4b97      	ldr	r3, [pc, #604]	; (800dbcc <_dtoa_r+0x2f4>)
 800d970:	e027      	b.n	800d9c2 <_dtoa_r+0xea>
 800d972:	4b97      	ldr	r3, [pc, #604]	; (800dbd0 <_dtoa_r+0x2f8>)
 800d974:	9300      	str	r3, [sp, #0]
 800d976:	3308      	adds	r3, #8
 800d978:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d97a:	6013      	str	r3, [r2, #0]
 800d97c:	9800      	ldr	r0, [sp, #0]
 800d97e:	b013      	add	sp, #76	; 0x4c
 800d980:	ecbd 8b04 	vpop	{d8-d9}
 800d984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d988:	4b90      	ldr	r3, [pc, #576]	; (800dbcc <_dtoa_r+0x2f4>)
 800d98a:	9300      	str	r3, [sp, #0]
 800d98c:	3303      	adds	r3, #3
 800d98e:	e7f3      	b.n	800d978 <_dtoa_r+0xa0>
 800d990:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d994:	2200      	movs	r2, #0
 800d996:	ec51 0b17 	vmov	r0, r1, d7
 800d99a:	eeb0 8a47 	vmov.f32	s16, s14
 800d99e:	eef0 8a67 	vmov.f32	s17, s15
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	f7f3 f898 	bl	8000ad8 <__aeabi_dcmpeq>
 800d9a8:	4681      	mov	r9, r0
 800d9aa:	b160      	cbz	r0, 800d9c6 <_dtoa_r+0xee>
 800d9ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	6013      	str	r3, [r2, #0]
 800d9b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	f000 8568 	beq.w	800e48a <_dtoa_r+0xbb2>
 800d9ba:	4b86      	ldr	r3, [pc, #536]	; (800dbd4 <_dtoa_r+0x2fc>)
 800d9bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d9be:	6013      	str	r3, [r2, #0]
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	9300      	str	r3, [sp, #0]
 800d9c4:	e7da      	b.n	800d97c <_dtoa_r+0xa4>
 800d9c6:	aa10      	add	r2, sp, #64	; 0x40
 800d9c8:	a911      	add	r1, sp, #68	; 0x44
 800d9ca:	4620      	mov	r0, r4
 800d9cc:	eeb0 0a48 	vmov.f32	s0, s16
 800d9d0:	eef0 0a68 	vmov.f32	s1, s17
 800d9d4:	f001 f994 	bl	800ed00 <__d2b>
 800d9d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d9dc:	4682      	mov	sl, r0
 800d9de:	2d00      	cmp	r5, #0
 800d9e0:	d07f      	beq.n	800dae2 <_dtoa_r+0x20a>
 800d9e2:	ee18 3a90 	vmov	r3, s17
 800d9e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d9ee:	ec51 0b18 	vmov	r0, r1, d8
 800d9f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d9f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d9fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d9fe:	4619      	mov	r1, r3
 800da00:	2200      	movs	r2, #0
 800da02:	4b75      	ldr	r3, [pc, #468]	; (800dbd8 <_dtoa_r+0x300>)
 800da04:	f7f2 fc48 	bl	8000298 <__aeabi_dsub>
 800da08:	a367      	add	r3, pc, #412	; (adr r3, 800dba8 <_dtoa_r+0x2d0>)
 800da0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0e:	f7f2 fdfb 	bl	8000608 <__aeabi_dmul>
 800da12:	a367      	add	r3, pc, #412	; (adr r3, 800dbb0 <_dtoa_r+0x2d8>)
 800da14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da18:	f7f2 fc40 	bl	800029c <__adddf3>
 800da1c:	4606      	mov	r6, r0
 800da1e:	4628      	mov	r0, r5
 800da20:	460f      	mov	r7, r1
 800da22:	f7f2 fd87 	bl	8000534 <__aeabi_i2d>
 800da26:	a364      	add	r3, pc, #400	; (adr r3, 800dbb8 <_dtoa_r+0x2e0>)
 800da28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da2c:	f7f2 fdec 	bl	8000608 <__aeabi_dmul>
 800da30:	4602      	mov	r2, r0
 800da32:	460b      	mov	r3, r1
 800da34:	4630      	mov	r0, r6
 800da36:	4639      	mov	r1, r7
 800da38:	f7f2 fc30 	bl	800029c <__adddf3>
 800da3c:	4606      	mov	r6, r0
 800da3e:	460f      	mov	r7, r1
 800da40:	f7f3 f892 	bl	8000b68 <__aeabi_d2iz>
 800da44:	2200      	movs	r2, #0
 800da46:	4683      	mov	fp, r0
 800da48:	2300      	movs	r3, #0
 800da4a:	4630      	mov	r0, r6
 800da4c:	4639      	mov	r1, r7
 800da4e:	f7f3 f84d 	bl	8000aec <__aeabi_dcmplt>
 800da52:	b148      	cbz	r0, 800da68 <_dtoa_r+0x190>
 800da54:	4658      	mov	r0, fp
 800da56:	f7f2 fd6d 	bl	8000534 <__aeabi_i2d>
 800da5a:	4632      	mov	r2, r6
 800da5c:	463b      	mov	r3, r7
 800da5e:	f7f3 f83b 	bl	8000ad8 <__aeabi_dcmpeq>
 800da62:	b908      	cbnz	r0, 800da68 <_dtoa_r+0x190>
 800da64:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800da68:	f1bb 0f16 	cmp.w	fp, #22
 800da6c:	d857      	bhi.n	800db1e <_dtoa_r+0x246>
 800da6e:	4b5b      	ldr	r3, [pc, #364]	; (800dbdc <_dtoa_r+0x304>)
 800da70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800da74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da78:	ec51 0b18 	vmov	r0, r1, d8
 800da7c:	f7f3 f836 	bl	8000aec <__aeabi_dcmplt>
 800da80:	2800      	cmp	r0, #0
 800da82:	d04e      	beq.n	800db22 <_dtoa_r+0x24a>
 800da84:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800da88:	2300      	movs	r3, #0
 800da8a:	930c      	str	r3, [sp, #48]	; 0x30
 800da8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da8e:	1b5b      	subs	r3, r3, r5
 800da90:	1e5a      	subs	r2, r3, #1
 800da92:	bf45      	ittet	mi
 800da94:	f1c3 0301 	rsbmi	r3, r3, #1
 800da98:	9305      	strmi	r3, [sp, #20]
 800da9a:	2300      	movpl	r3, #0
 800da9c:	2300      	movmi	r3, #0
 800da9e:	9206      	str	r2, [sp, #24]
 800daa0:	bf54      	ite	pl
 800daa2:	9305      	strpl	r3, [sp, #20]
 800daa4:	9306      	strmi	r3, [sp, #24]
 800daa6:	f1bb 0f00 	cmp.w	fp, #0
 800daaa:	db3c      	blt.n	800db26 <_dtoa_r+0x24e>
 800daac:	9b06      	ldr	r3, [sp, #24]
 800daae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800dab2:	445b      	add	r3, fp
 800dab4:	9306      	str	r3, [sp, #24]
 800dab6:	2300      	movs	r3, #0
 800dab8:	9308      	str	r3, [sp, #32]
 800daba:	9b07      	ldr	r3, [sp, #28]
 800dabc:	2b09      	cmp	r3, #9
 800dabe:	d868      	bhi.n	800db92 <_dtoa_r+0x2ba>
 800dac0:	2b05      	cmp	r3, #5
 800dac2:	bfc4      	itt	gt
 800dac4:	3b04      	subgt	r3, #4
 800dac6:	9307      	strgt	r3, [sp, #28]
 800dac8:	9b07      	ldr	r3, [sp, #28]
 800daca:	f1a3 0302 	sub.w	r3, r3, #2
 800dace:	bfcc      	ite	gt
 800dad0:	2500      	movgt	r5, #0
 800dad2:	2501      	movle	r5, #1
 800dad4:	2b03      	cmp	r3, #3
 800dad6:	f200 8085 	bhi.w	800dbe4 <_dtoa_r+0x30c>
 800dada:	e8df f003 	tbb	[pc, r3]
 800dade:	3b2e      	.short	0x3b2e
 800dae0:	5839      	.short	0x5839
 800dae2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dae6:	441d      	add	r5, r3
 800dae8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800daec:	2b20      	cmp	r3, #32
 800daee:	bfc1      	itttt	gt
 800daf0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800daf4:	fa08 f803 	lslgt.w	r8, r8, r3
 800daf8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800dafc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800db00:	bfd6      	itet	le
 800db02:	f1c3 0320 	rsble	r3, r3, #32
 800db06:	ea48 0003 	orrgt.w	r0, r8, r3
 800db0a:	fa06 f003 	lslle.w	r0, r6, r3
 800db0e:	f7f2 fd01 	bl	8000514 <__aeabi_ui2d>
 800db12:	2201      	movs	r2, #1
 800db14:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800db18:	3d01      	subs	r5, #1
 800db1a:	920e      	str	r2, [sp, #56]	; 0x38
 800db1c:	e76f      	b.n	800d9fe <_dtoa_r+0x126>
 800db1e:	2301      	movs	r3, #1
 800db20:	e7b3      	b.n	800da8a <_dtoa_r+0x1b2>
 800db22:	900c      	str	r0, [sp, #48]	; 0x30
 800db24:	e7b2      	b.n	800da8c <_dtoa_r+0x1b4>
 800db26:	9b05      	ldr	r3, [sp, #20]
 800db28:	eba3 030b 	sub.w	r3, r3, fp
 800db2c:	9305      	str	r3, [sp, #20]
 800db2e:	f1cb 0300 	rsb	r3, fp, #0
 800db32:	9308      	str	r3, [sp, #32]
 800db34:	2300      	movs	r3, #0
 800db36:	930b      	str	r3, [sp, #44]	; 0x2c
 800db38:	e7bf      	b.n	800daba <_dtoa_r+0x1e2>
 800db3a:	2300      	movs	r3, #0
 800db3c:	9309      	str	r3, [sp, #36]	; 0x24
 800db3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db40:	2b00      	cmp	r3, #0
 800db42:	dc52      	bgt.n	800dbea <_dtoa_r+0x312>
 800db44:	2301      	movs	r3, #1
 800db46:	9301      	str	r3, [sp, #4]
 800db48:	9304      	str	r3, [sp, #16]
 800db4a:	461a      	mov	r2, r3
 800db4c:	920a      	str	r2, [sp, #40]	; 0x28
 800db4e:	e00b      	b.n	800db68 <_dtoa_r+0x290>
 800db50:	2301      	movs	r3, #1
 800db52:	e7f3      	b.n	800db3c <_dtoa_r+0x264>
 800db54:	2300      	movs	r3, #0
 800db56:	9309      	str	r3, [sp, #36]	; 0x24
 800db58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db5a:	445b      	add	r3, fp
 800db5c:	9301      	str	r3, [sp, #4]
 800db5e:	3301      	adds	r3, #1
 800db60:	2b01      	cmp	r3, #1
 800db62:	9304      	str	r3, [sp, #16]
 800db64:	bfb8      	it	lt
 800db66:	2301      	movlt	r3, #1
 800db68:	69e0      	ldr	r0, [r4, #28]
 800db6a:	2100      	movs	r1, #0
 800db6c:	2204      	movs	r2, #4
 800db6e:	f102 0614 	add.w	r6, r2, #20
 800db72:	429e      	cmp	r6, r3
 800db74:	d93d      	bls.n	800dbf2 <_dtoa_r+0x31a>
 800db76:	6041      	str	r1, [r0, #4]
 800db78:	4620      	mov	r0, r4
 800db7a:	f000 fd9f 	bl	800e6bc <_Balloc>
 800db7e:	9000      	str	r0, [sp, #0]
 800db80:	2800      	cmp	r0, #0
 800db82:	d139      	bne.n	800dbf8 <_dtoa_r+0x320>
 800db84:	4b16      	ldr	r3, [pc, #88]	; (800dbe0 <_dtoa_r+0x308>)
 800db86:	4602      	mov	r2, r0
 800db88:	f240 11af 	movw	r1, #431	; 0x1af
 800db8c:	e6bd      	b.n	800d90a <_dtoa_r+0x32>
 800db8e:	2301      	movs	r3, #1
 800db90:	e7e1      	b.n	800db56 <_dtoa_r+0x27e>
 800db92:	2501      	movs	r5, #1
 800db94:	2300      	movs	r3, #0
 800db96:	9307      	str	r3, [sp, #28]
 800db98:	9509      	str	r5, [sp, #36]	; 0x24
 800db9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db9e:	9301      	str	r3, [sp, #4]
 800dba0:	9304      	str	r3, [sp, #16]
 800dba2:	2200      	movs	r2, #0
 800dba4:	2312      	movs	r3, #18
 800dba6:	e7d1      	b.n	800db4c <_dtoa_r+0x274>
 800dba8:	636f4361 	.word	0x636f4361
 800dbac:	3fd287a7 	.word	0x3fd287a7
 800dbb0:	8b60c8b3 	.word	0x8b60c8b3
 800dbb4:	3fc68a28 	.word	0x3fc68a28
 800dbb8:	509f79fb 	.word	0x509f79fb
 800dbbc:	3fd34413 	.word	0x3fd34413
 800dbc0:	0800f985 	.word	0x0800f985
 800dbc4:	0800f99c 	.word	0x0800f99c
 800dbc8:	7ff00000 	.word	0x7ff00000
 800dbcc:	0800f981 	.word	0x0800f981
 800dbd0:	0800f978 	.word	0x0800f978
 800dbd4:	0800f955 	.word	0x0800f955
 800dbd8:	3ff80000 	.word	0x3ff80000
 800dbdc:	0800fa88 	.word	0x0800fa88
 800dbe0:	0800f9f4 	.word	0x0800f9f4
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	9309      	str	r3, [sp, #36]	; 0x24
 800dbe8:	e7d7      	b.n	800db9a <_dtoa_r+0x2c2>
 800dbea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbec:	9301      	str	r3, [sp, #4]
 800dbee:	9304      	str	r3, [sp, #16]
 800dbf0:	e7ba      	b.n	800db68 <_dtoa_r+0x290>
 800dbf2:	3101      	adds	r1, #1
 800dbf4:	0052      	lsls	r2, r2, #1
 800dbf6:	e7ba      	b.n	800db6e <_dtoa_r+0x296>
 800dbf8:	69e3      	ldr	r3, [r4, #28]
 800dbfa:	9a00      	ldr	r2, [sp, #0]
 800dbfc:	601a      	str	r2, [r3, #0]
 800dbfe:	9b04      	ldr	r3, [sp, #16]
 800dc00:	2b0e      	cmp	r3, #14
 800dc02:	f200 80a8 	bhi.w	800dd56 <_dtoa_r+0x47e>
 800dc06:	2d00      	cmp	r5, #0
 800dc08:	f000 80a5 	beq.w	800dd56 <_dtoa_r+0x47e>
 800dc0c:	f1bb 0f00 	cmp.w	fp, #0
 800dc10:	dd38      	ble.n	800dc84 <_dtoa_r+0x3ac>
 800dc12:	4bc0      	ldr	r3, [pc, #768]	; (800df14 <_dtoa_r+0x63c>)
 800dc14:	f00b 020f 	and.w	r2, fp, #15
 800dc18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc1c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dc20:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dc24:	ea4f 182b 	mov.w	r8, fp, asr #4
 800dc28:	d019      	beq.n	800dc5e <_dtoa_r+0x386>
 800dc2a:	4bbb      	ldr	r3, [pc, #748]	; (800df18 <_dtoa_r+0x640>)
 800dc2c:	ec51 0b18 	vmov	r0, r1, d8
 800dc30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dc34:	f7f2 fe12 	bl	800085c <__aeabi_ddiv>
 800dc38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc3c:	f008 080f 	and.w	r8, r8, #15
 800dc40:	2503      	movs	r5, #3
 800dc42:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800df18 <_dtoa_r+0x640>
 800dc46:	f1b8 0f00 	cmp.w	r8, #0
 800dc4a:	d10a      	bne.n	800dc62 <_dtoa_r+0x38a>
 800dc4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc50:	4632      	mov	r2, r6
 800dc52:	463b      	mov	r3, r7
 800dc54:	f7f2 fe02 	bl	800085c <__aeabi_ddiv>
 800dc58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc5c:	e02b      	b.n	800dcb6 <_dtoa_r+0x3de>
 800dc5e:	2502      	movs	r5, #2
 800dc60:	e7ef      	b.n	800dc42 <_dtoa_r+0x36a>
 800dc62:	f018 0f01 	tst.w	r8, #1
 800dc66:	d008      	beq.n	800dc7a <_dtoa_r+0x3a2>
 800dc68:	4630      	mov	r0, r6
 800dc6a:	4639      	mov	r1, r7
 800dc6c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dc70:	f7f2 fcca 	bl	8000608 <__aeabi_dmul>
 800dc74:	3501      	adds	r5, #1
 800dc76:	4606      	mov	r6, r0
 800dc78:	460f      	mov	r7, r1
 800dc7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dc7e:	f109 0908 	add.w	r9, r9, #8
 800dc82:	e7e0      	b.n	800dc46 <_dtoa_r+0x36e>
 800dc84:	f000 809f 	beq.w	800ddc6 <_dtoa_r+0x4ee>
 800dc88:	f1cb 0600 	rsb	r6, fp, #0
 800dc8c:	4ba1      	ldr	r3, [pc, #644]	; (800df14 <_dtoa_r+0x63c>)
 800dc8e:	4fa2      	ldr	r7, [pc, #648]	; (800df18 <_dtoa_r+0x640>)
 800dc90:	f006 020f 	and.w	r2, r6, #15
 800dc94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9c:	ec51 0b18 	vmov	r0, r1, d8
 800dca0:	f7f2 fcb2 	bl	8000608 <__aeabi_dmul>
 800dca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dca8:	1136      	asrs	r6, r6, #4
 800dcaa:	2300      	movs	r3, #0
 800dcac:	2502      	movs	r5, #2
 800dcae:	2e00      	cmp	r6, #0
 800dcb0:	d17e      	bne.n	800ddb0 <_dtoa_r+0x4d8>
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1d0      	bne.n	800dc58 <_dtoa_r+0x380>
 800dcb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcb8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	f000 8084 	beq.w	800ddca <_dtoa_r+0x4f2>
 800dcc2:	4b96      	ldr	r3, [pc, #600]	; (800df1c <_dtoa_r+0x644>)
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	4640      	mov	r0, r8
 800dcc8:	4649      	mov	r1, r9
 800dcca:	f7f2 ff0f 	bl	8000aec <__aeabi_dcmplt>
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	d07b      	beq.n	800ddca <_dtoa_r+0x4f2>
 800dcd2:	9b04      	ldr	r3, [sp, #16]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d078      	beq.n	800ddca <_dtoa_r+0x4f2>
 800dcd8:	9b01      	ldr	r3, [sp, #4]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	dd39      	ble.n	800dd52 <_dtoa_r+0x47a>
 800dcde:	4b90      	ldr	r3, [pc, #576]	; (800df20 <_dtoa_r+0x648>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	4640      	mov	r0, r8
 800dce4:	4649      	mov	r1, r9
 800dce6:	f7f2 fc8f 	bl	8000608 <__aeabi_dmul>
 800dcea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcee:	9e01      	ldr	r6, [sp, #4]
 800dcf0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800dcf4:	3501      	adds	r5, #1
 800dcf6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	f7f2 fc1a 	bl	8000534 <__aeabi_i2d>
 800dd00:	4642      	mov	r2, r8
 800dd02:	464b      	mov	r3, r9
 800dd04:	f7f2 fc80 	bl	8000608 <__aeabi_dmul>
 800dd08:	4b86      	ldr	r3, [pc, #536]	; (800df24 <_dtoa_r+0x64c>)
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f7f2 fac6 	bl	800029c <__adddf3>
 800dd10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dd14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd18:	9303      	str	r3, [sp, #12]
 800dd1a:	2e00      	cmp	r6, #0
 800dd1c:	d158      	bne.n	800ddd0 <_dtoa_r+0x4f8>
 800dd1e:	4b82      	ldr	r3, [pc, #520]	; (800df28 <_dtoa_r+0x650>)
 800dd20:	2200      	movs	r2, #0
 800dd22:	4640      	mov	r0, r8
 800dd24:	4649      	mov	r1, r9
 800dd26:	f7f2 fab7 	bl	8000298 <__aeabi_dsub>
 800dd2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd2e:	4680      	mov	r8, r0
 800dd30:	4689      	mov	r9, r1
 800dd32:	f7f2 fef9 	bl	8000b28 <__aeabi_dcmpgt>
 800dd36:	2800      	cmp	r0, #0
 800dd38:	f040 8296 	bne.w	800e268 <_dtoa_r+0x990>
 800dd3c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dd40:	4640      	mov	r0, r8
 800dd42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd46:	4649      	mov	r1, r9
 800dd48:	f7f2 fed0 	bl	8000aec <__aeabi_dcmplt>
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	f040 8289 	bne.w	800e264 <_dtoa_r+0x98c>
 800dd52:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dd56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	f2c0 814e 	blt.w	800dffa <_dtoa_r+0x722>
 800dd5e:	f1bb 0f0e 	cmp.w	fp, #14
 800dd62:	f300 814a 	bgt.w	800dffa <_dtoa_r+0x722>
 800dd66:	4b6b      	ldr	r3, [pc, #428]	; (800df14 <_dtoa_r+0x63c>)
 800dd68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dd6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	f280 80dc 	bge.w	800df30 <_dtoa_r+0x658>
 800dd78:	9b04      	ldr	r3, [sp, #16]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	f300 80d8 	bgt.w	800df30 <_dtoa_r+0x658>
 800dd80:	f040 826f 	bne.w	800e262 <_dtoa_r+0x98a>
 800dd84:	4b68      	ldr	r3, [pc, #416]	; (800df28 <_dtoa_r+0x650>)
 800dd86:	2200      	movs	r2, #0
 800dd88:	4640      	mov	r0, r8
 800dd8a:	4649      	mov	r1, r9
 800dd8c:	f7f2 fc3c 	bl	8000608 <__aeabi_dmul>
 800dd90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd94:	f7f2 febe 	bl	8000b14 <__aeabi_dcmpge>
 800dd98:	9e04      	ldr	r6, [sp, #16]
 800dd9a:	4637      	mov	r7, r6
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	f040 8245 	bne.w	800e22c <_dtoa_r+0x954>
 800dda2:	9d00      	ldr	r5, [sp, #0]
 800dda4:	2331      	movs	r3, #49	; 0x31
 800dda6:	f805 3b01 	strb.w	r3, [r5], #1
 800ddaa:	f10b 0b01 	add.w	fp, fp, #1
 800ddae:	e241      	b.n	800e234 <_dtoa_r+0x95c>
 800ddb0:	07f2      	lsls	r2, r6, #31
 800ddb2:	d505      	bpl.n	800ddc0 <_dtoa_r+0x4e8>
 800ddb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddb8:	f7f2 fc26 	bl	8000608 <__aeabi_dmul>
 800ddbc:	3501      	adds	r5, #1
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	1076      	asrs	r6, r6, #1
 800ddc2:	3708      	adds	r7, #8
 800ddc4:	e773      	b.n	800dcae <_dtoa_r+0x3d6>
 800ddc6:	2502      	movs	r5, #2
 800ddc8:	e775      	b.n	800dcb6 <_dtoa_r+0x3de>
 800ddca:	9e04      	ldr	r6, [sp, #16]
 800ddcc:	465f      	mov	r7, fp
 800ddce:	e792      	b.n	800dcf6 <_dtoa_r+0x41e>
 800ddd0:	9900      	ldr	r1, [sp, #0]
 800ddd2:	4b50      	ldr	r3, [pc, #320]	; (800df14 <_dtoa_r+0x63c>)
 800ddd4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ddd8:	4431      	add	r1, r6
 800ddda:	9102      	str	r1, [sp, #8]
 800dddc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ddde:	eeb0 9a47 	vmov.f32	s18, s14
 800dde2:	eef0 9a67 	vmov.f32	s19, s15
 800dde6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ddea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ddee:	2900      	cmp	r1, #0
 800ddf0:	d044      	beq.n	800de7c <_dtoa_r+0x5a4>
 800ddf2:	494e      	ldr	r1, [pc, #312]	; (800df2c <_dtoa_r+0x654>)
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	f7f2 fd31 	bl	800085c <__aeabi_ddiv>
 800ddfa:	ec53 2b19 	vmov	r2, r3, d9
 800ddfe:	f7f2 fa4b 	bl	8000298 <__aeabi_dsub>
 800de02:	9d00      	ldr	r5, [sp, #0]
 800de04:	ec41 0b19 	vmov	d9, r0, r1
 800de08:	4649      	mov	r1, r9
 800de0a:	4640      	mov	r0, r8
 800de0c:	f7f2 feac 	bl	8000b68 <__aeabi_d2iz>
 800de10:	4606      	mov	r6, r0
 800de12:	f7f2 fb8f 	bl	8000534 <__aeabi_i2d>
 800de16:	4602      	mov	r2, r0
 800de18:	460b      	mov	r3, r1
 800de1a:	4640      	mov	r0, r8
 800de1c:	4649      	mov	r1, r9
 800de1e:	f7f2 fa3b 	bl	8000298 <__aeabi_dsub>
 800de22:	3630      	adds	r6, #48	; 0x30
 800de24:	f805 6b01 	strb.w	r6, [r5], #1
 800de28:	ec53 2b19 	vmov	r2, r3, d9
 800de2c:	4680      	mov	r8, r0
 800de2e:	4689      	mov	r9, r1
 800de30:	f7f2 fe5c 	bl	8000aec <__aeabi_dcmplt>
 800de34:	2800      	cmp	r0, #0
 800de36:	d164      	bne.n	800df02 <_dtoa_r+0x62a>
 800de38:	4642      	mov	r2, r8
 800de3a:	464b      	mov	r3, r9
 800de3c:	4937      	ldr	r1, [pc, #220]	; (800df1c <_dtoa_r+0x644>)
 800de3e:	2000      	movs	r0, #0
 800de40:	f7f2 fa2a 	bl	8000298 <__aeabi_dsub>
 800de44:	ec53 2b19 	vmov	r2, r3, d9
 800de48:	f7f2 fe50 	bl	8000aec <__aeabi_dcmplt>
 800de4c:	2800      	cmp	r0, #0
 800de4e:	f040 80b6 	bne.w	800dfbe <_dtoa_r+0x6e6>
 800de52:	9b02      	ldr	r3, [sp, #8]
 800de54:	429d      	cmp	r5, r3
 800de56:	f43f af7c 	beq.w	800dd52 <_dtoa_r+0x47a>
 800de5a:	4b31      	ldr	r3, [pc, #196]	; (800df20 <_dtoa_r+0x648>)
 800de5c:	ec51 0b19 	vmov	r0, r1, d9
 800de60:	2200      	movs	r2, #0
 800de62:	f7f2 fbd1 	bl	8000608 <__aeabi_dmul>
 800de66:	4b2e      	ldr	r3, [pc, #184]	; (800df20 <_dtoa_r+0x648>)
 800de68:	ec41 0b19 	vmov	d9, r0, r1
 800de6c:	2200      	movs	r2, #0
 800de6e:	4640      	mov	r0, r8
 800de70:	4649      	mov	r1, r9
 800de72:	f7f2 fbc9 	bl	8000608 <__aeabi_dmul>
 800de76:	4680      	mov	r8, r0
 800de78:	4689      	mov	r9, r1
 800de7a:	e7c5      	b.n	800de08 <_dtoa_r+0x530>
 800de7c:	ec51 0b17 	vmov	r0, r1, d7
 800de80:	f7f2 fbc2 	bl	8000608 <__aeabi_dmul>
 800de84:	9b02      	ldr	r3, [sp, #8]
 800de86:	9d00      	ldr	r5, [sp, #0]
 800de88:	930f      	str	r3, [sp, #60]	; 0x3c
 800de8a:	ec41 0b19 	vmov	d9, r0, r1
 800de8e:	4649      	mov	r1, r9
 800de90:	4640      	mov	r0, r8
 800de92:	f7f2 fe69 	bl	8000b68 <__aeabi_d2iz>
 800de96:	4606      	mov	r6, r0
 800de98:	f7f2 fb4c 	bl	8000534 <__aeabi_i2d>
 800de9c:	3630      	adds	r6, #48	; 0x30
 800de9e:	4602      	mov	r2, r0
 800dea0:	460b      	mov	r3, r1
 800dea2:	4640      	mov	r0, r8
 800dea4:	4649      	mov	r1, r9
 800dea6:	f7f2 f9f7 	bl	8000298 <__aeabi_dsub>
 800deaa:	f805 6b01 	strb.w	r6, [r5], #1
 800deae:	9b02      	ldr	r3, [sp, #8]
 800deb0:	429d      	cmp	r5, r3
 800deb2:	4680      	mov	r8, r0
 800deb4:	4689      	mov	r9, r1
 800deb6:	f04f 0200 	mov.w	r2, #0
 800deba:	d124      	bne.n	800df06 <_dtoa_r+0x62e>
 800debc:	4b1b      	ldr	r3, [pc, #108]	; (800df2c <_dtoa_r+0x654>)
 800debe:	ec51 0b19 	vmov	r0, r1, d9
 800dec2:	f7f2 f9eb 	bl	800029c <__adddf3>
 800dec6:	4602      	mov	r2, r0
 800dec8:	460b      	mov	r3, r1
 800deca:	4640      	mov	r0, r8
 800decc:	4649      	mov	r1, r9
 800dece:	f7f2 fe2b 	bl	8000b28 <__aeabi_dcmpgt>
 800ded2:	2800      	cmp	r0, #0
 800ded4:	d173      	bne.n	800dfbe <_dtoa_r+0x6e6>
 800ded6:	ec53 2b19 	vmov	r2, r3, d9
 800deda:	4914      	ldr	r1, [pc, #80]	; (800df2c <_dtoa_r+0x654>)
 800dedc:	2000      	movs	r0, #0
 800dede:	f7f2 f9db 	bl	8000298 <__aeabi_dsub>
 800dee2:	4602      	mov	r2, r0
 800dee4:	460b      	mov	r3, r1
 800dee6:	4640      	mov	r0, r8
 800dee8:	4649      	mov	r1, r9
 800deea:	f7f2 fdff 	bl	8000aec <__aeabi_dcmplt>
 800deee:	2800      	cmp	r0, #0
 800def0:	f43f af2f 	beq.w	800dd52 <_dtoa_r+0x47a>
 800def4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800def6:	1e6b      	subs	r3, r5, #1
 800def8:	930f      	str	r3, [sp, #60]	; 0x3c
 800defa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800defe:	2b30      	cmp	r3, #48	; 0x30
 800df00:	d0f8      	beq.n	800def4 <_dtoa_r+0x61c>
 800df02:	46bb      	mov	fp, r7
 800df04:	e04a      	b.n	800df9c <_dtoa_r+0x6c4>
 800df06:	4b06      	ldr	r3, [pc, #24]	; (800df20 <_dtoa_r+0x648>)
 800df08:	f7f2 fb7e 	bl	8000608 <__aeabi_dmul>
 800df0c:	4680      	mov	r8, r0
 800df0e:	4689      	mov	r9, r1
 800df10:	e7bd      	b.n	800de8e <_dtoa_r+0x5b6>
 800df12:	bf00      	nop
 800df14:	0800fa88 	.word	0x0800fa88
 800df18:	0800fa60 	.word	0x0800fa60
 800df1c:	3ff00000 	.word	0x3ff00000
 800df20:	40240000 	.word	0x40240000
 800df24:	401c0000 	.word	0x401c0000
 800df28:	40140000 	.word	0x40140000
 800df2c:	3fe00000 	.word	0x3fe00000
 800df30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800df34:	9d00      	ldr	r5, [sp, #0]
 800df36:	4642      	mov	r2, r8
 800df38:	464b      	mov	r3, r9
 800df3a:	4630      	mov	r0, r6
 800df3c:	4639      	mov	r1, r7
 800df3e:	f7f2 fc8d 	bl	800085c <__aeabi_ddiv>
 800df42:	f7f2 fe11 	bl	8000b68 <__aeabi_d2iz>
 800df46:	9001      	str	r0, [sp, #4]
 800df48:	f7f2 faf4 	bl	8000534 <__aeabi_i2d>
 800df4c:	4642      	mov	r2, r8
 800df4e:	464b      	mov	r3, r9
 800df50:	f7f2 fb5a 	bl	8000608 <__aeabi_dmul>
 800df54:	4602      	mov	r2, r0
 800df56:	460b      	mov	r3, r1
 800df58:	4630      	mov	r0, r6
 800df5a:	4639      	mov	r1, r7
 800df5c:	f7f2 f99c 	bl	8000298 <__aeabi_dsub>
 800df60:	9e01      	ldr	r6, [sp, #4]
 800df62:	9f04      	ldr	r7, [sp, #16]
 800df64:	3630      	adds	r6, #48	; 0x30
 800df66:	f805 6b01 	strb.w	r6, [r5], #1
 800df6a:	9e00      	ldr	r6, [sp, #0]
 800df6c:	1bae      	subs	r6, r5, r6
 800df6e:	42b7      	cmp	r7, r6
 800df70:	4602      	mov	r2, r0
 800df72:	460b      	mov	r3, r1
 800df74:	d134      	bne.n	800dfe0 <_dtoa_r+0x708>
 800df76:	f7f2 f991 	bl	800029c <__adddf3>
 800df7a:	4642      	mov	r2, r8
 800df7c:	464b      	mov	r3, r9
 800df7e:	4606      	mov	r6, r0
 800df80:	460f      	mov	r7, r1
 800df82:	f7f2 fdd1 	bl	8000b28 <__aeabi_dcmpgt>
 800df86:	b9c8      	cbnz	r0, 800dfbc <_dtoa_r+0x6e4>
 800df88:	4642      	mov	r2, r8
 800df8a:	464b      	mov	r3, r9
 800df8c:	4630      	mov	r0, r6
 800df8e:	4639      	mov	r1, r7
 800df90:	f7f2 fda2 	bl	8000ad8 <__aeabi_dcmpeq>
 800df94:	b110      	cbz	r0, 800df9c <_dtoa_r+0x6c4>
 800df96:	9b01      	ldr	r3, [sp, #4]
 800df98:	07db      	lsls	r3, r3, #31
 800df9a:	d40f      	bmi.n	800dfbc <_dtoa_r+0x6e4>
 800df9c:	4651      	mov	r1, sl
 800df9e:	4620      	mov	r0, r4
 800dfa0:	f000 fbcc 	bl	800e73c <_Bfree>
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dfa8:	702b      	strb	r3, [r5, #0]
 800dfaa:	f10b 0301 	add.w	r3, fp, #1
 800dfae:	6013      	str	r3, [r2, #0]
 800dfb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	f43f ace2 	beq.w	800d97c <_dtoa_r+0xa4>
 800dfb8:	601d      	str	r5, [r3, #0]
 800dfba:	e4df      	b.n	800d97c <_dtoa_r+0xa4>
 800dfbc:	465f      	mov	r7, fp
 800dfbe:	462b      	mov	r3, r5
 800dfc0:	461d      	mov	r5, r3
 800dfc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfc6:	2a39      	cmp	r2, #57	; 0x39
 800dfc8:	d106      	bne.n	800dfd8 <_dtoa_r+0x700>
 800dfca:	9a00      	ldr	r2, [sp, #0]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d1f7      	bne.n	800dfc0 <_dtoa_r+0x6e8>
 800dfd0:	9900      	ldr	r1, [sp, #0]
 800dfd2:	2230      	movs	r2, #48	; 0x30
 800dfd4:	3701      	adds	r7, #1
 800dfd6:	700a      	strb	r2, [r1, #0]
 800dfd8:	781a      	ldrb	r2, [r3, #0]
 800dfda:	3201      	adds	r2, #1
 800dfdc:	701a      	strb	r2, [r3, #0]
 800dfde:	e790      	b.n	800df02 <_dtoa_r+0x62a>
 800dfe0:	4ba3      	ldr	r3, [pc, #652]	; (800e270 <_dtoa_r+0x998>)
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	f7f2 fb10 	bl	8000608 <__aeabi_dmul>
 800dfe8:	2200      	movs	r2, #0
 800dfea:	2300      	movs	r3, #0
 800dfec:	4606      	mov	r6, r0
 800dfee:	460f      	mov	r7, r1
 800dff0:	f7f2 fd72 	bl	8000ad8 <__aeabi_dcmpeq>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d09e      	beq.n	800df36 <_dtoa_r+0x65e>
 800dff8:	e7d0      	b.n	800df9c <_dtoa_r+0x6c4>
 800dffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dffc:	2a00      	cmp	r2, #0
 800dffe:	f000 80ca 	beq.w	800e196 <_dtoa_r+0x8be>
 800e002:	9a07      	ldr	r2, [sp, #28]
 800e004:	2a01      	cmp	r2, #1
 800e006:	f300 80ad 	bgt.w	800e164 <_dtoa_r+0x88c>
 800e00a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e00c:	2a00      	cmp	r2, #0
 800e00e:	f000 80a5 	beq.w	800e15c <_dtoa_r+0x884>
 800e012:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e016:	9e08      	ldr	r6, [sp, #32]
 800e018:	9d05      	ldr	r5, [sp, #20]
 800e01a:	9a05      	ldr	r2, [sp, #20]
 800e01c:	441a      	add	r2, r3
 800e01e:	9205      	str	r2, [sp, #20]
 800e020:	9a06      	ldr	r2, [sp, #24]
 800e022:	2101      	movs	r1, #1
 800e024:	441a      	add	r2, r3
 800e026:	4620      	mov	r0, r4
 800e028:	9206      	str	r2, [sp, #24]
 800e02a:	f000 fc3d 	bl	800e8a8 <__i2b>
 800e02e:	4607      	mov	r7, r0
 800e030:	b165      	cbz	r5, 800e04c <_dtoa_r+0x774>
 800e032:	9b06      	ldr	r3, [sp, #24]
 800e034:	2b00      	cmp	r3, #0
 800e036:	dd09      	ble.n	800e04c <_dtoa_r+0x774>
 800e038:	42ab      	cmp	r3, r5
 800e03a:	9a05      	ldr	r2, [sp, #20]
 800e03c:	bfa8      	it	ge
 800e03e:	462b      	movge	r3, r5
 800e040:	1ad2      	subs	r2, r2, r3
 800e042:	9205      	str	r2, [sp, #20]
 800e044:	9a06      	ldr	r2, [sp, #24]
 800e046:	1aed      	subs	r5, r5, r3
 800e048:	1ad3      	subs	r3, r2, r3
 800e04a:	9306      	str	r3, [sp, #24]
 800e04c:	9b08      	ldr	r3, [sp, #32]
 800e04e:	b1f3      	cbz	r3, 800e08e <_dtoa_r+0x7b6>
 800e050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e052:	2b00      	cmp	r3, #0
 800e054:	f000 80a3 	beq.w	800e19e <_dtoa_r+0x8c6>
 800e058:	2e00      	cmp	r6, #0
 800e05a:	dd10      	ble.n	800e07e <_dtoa_r+0x7a6>
 800e05c:	4639      	mov	r1, r7
 800e05e:	4632      	mov	r2, r6
 800e060:	4620      	mov	r0, r4
 800e062:	f000 fce1 	bl	800ea28 <__pow5mult>
 800e066:	4652      	mov	r2, sl
 800e068:	4601      	mov	r1, r0
 800e06a:	4607      	mov	r7, r0
 800e06c:	4620      	mov	r0, r4
 800e06e:	f000 fc31 	bl	800e8d4 <__multiply>
 800e072:	4651      	mov	r1, sl
 800e074:	4680      	mov	r8, r0
 800e076:	4620      	mov	r0, r4
 800e078:	f000 fb60 	bl	800e73c <_Bfree>
 800e07c:	46c2      	mov	sl, r8
 800e07e:	9b08      	ldr	r3, [sp, #32]
 800e080:	1b9a      	subs	r2, r3, r6
 800e082:	d004      	beq.n	800e08e <_dtoa_r+0x7b6>
 800e084:	4651      	mov	r1, sl
 800e086:	4620      	mov	r0, r4
 800e088:	f000 fcce 	bl	800ea28 <__pow5mult>
 800e08c:	4682      	mov	sl, r0
 800e08e:	2101      	movs	r1, #1
 800e090:	4620      	mov	r0, r4
 800e092:	f000 fc09 	bl	800e8a8 <__i2b>
 800e096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e098:	2b00      	cmp	r3, #0
 800e09a:	4606      	mov	r6, r0
 800e09c:	f340 8081 	ble.w	800e1a2 <_dtoa_r+0x8ca>
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	4601      	mov	r1, r0
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	f000 fcbf 	bl	800ea28 <__pow5mult>
 800e0aa:	9b07      	ldr	r3, [sp, #28]
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	4606      	mov	r6, r0
 800e0b0:	dd7a      	ble.n	800e1a8 <_dtoa_r+0x8d0>
 800e0b2:	f04f 0800 	mov.w	r8, #0
 800e0b6:	6933      	ldr	r3, [r6, #16]
 800e0b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e0bc:	6918      	ldr	r0, [r3, #16]
 800e0be:	f000 fba5 	bl	800e80c <__hi0bits>
 800e0c2:	f1c0 0020 	rsb	r0, r0, #32
 800e0c6:	9b06      	ldr	r3, [sp, #24]
 800e0c8:	4418      	add	r0, r3
 800e0ca:	f010 001f 	ands.w	r0, r0, #31
 800e0ce:	f000 8094 	beq.w	800e1fa <_dtoa_r+0x922>
 800e0d2:	f1c0 0320 	rsb	r3, r0, #32
 800e0d6:	2b04      	cmp	r3, #4
 800e0d8:	f340 8085 	ble.w	800e1e6 <_dtoa_r+0x90e>
 800e0dc:	9b05      	ldr	r3, [sp, #20]
 800e0de:	f1c0 001c 	rsb	r0, r0, #28
 800e0e2:	4403      	add	r3, r0
 800e0e4:	9305      	str	r3, [sp, #20]
 800e0e6:	9b06      	ldr	r3, [sp, #24]
 800e0e8:	4403      	add	r3, r0
 800e0ea:	4405      	add	r5, r0
 800e0ec:	9306      	str	r3, [sp, #24]
 800e0ee:	9b05      	ldr	r3, [sp, #20]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	dd05      	ble.n	800e100 <_dtoa_r+0x828>
 800e0f4:	4651      	mov	r1, sl
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	f000 fcef 	bl	800eadc <__lshift>
 800e0fe:	4682      	mov	sl, r0
 800e100:	9b06      	ldr	r3, [sp, #24]
 800e102:	2b00      	cmp	r3, #0
 800e104:	dd05      	ble.n	800e112 <_dtoa_r+0x83a>
 800e106:	4631      	mov	r1, r6
 800e108:	461a      	mov	r2, r3
 800e10a:	4620      	mov	r0, r4
 800e10c:	f000 fce6 	bl	800eadc <__lshift>
 800e110:	4606      	mov	r6, r0
 800e112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e114:	2b00      	cmp	r3, #0
 800e116:	d072      	beq.n	800e1fe <_dtoa_r+0x926>
 800e118:	4631      	mov	r1, r6
 800e11a:	4650      	mov	r0, sl
 800e11c:	f000 fd4a 	bl	800ebb4 <__mcmp>
 800e120:	2800      	cmp	r0, #0
 800e122:	da6c      	bge.n	800e1fe <_dtoa_r+0x926>
 800e124:	2300      	movs	r3, #0
 800e126:	4651      	mov	r1, sl
 800e128:	220a      	movs	r2, #10
 800e12a:	4620      	mov	r0, r4
 800e12c:	f000 fb28 	bl	800e780 <__multadd>
 800e130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e132:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e136:	4682      	mov	sl, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	f000 81b0 	beq.w	800e49e <_dtoa_r+0xbc6>
 800e13e:	2300      	movs	r3, #0
 800e140:	4639      	mov	r1, r7
 800e142:	220a      	movs	r2, #10
 800e144:	4620      	mov	r0, r4
 800e146:	f000 fb1b 	bl	800e780 <__multadd>
 800e14a:	9b01      	ldr	r3, [sp, #4]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	4607      	mov	r7, r0
 800e150:	f300 8096 	bgt.w	800e280 <_dtoa_r+0x9a8>
 800e154:	9b07      	ldr	r3, [sp, #28]
 800e156:	2b02      	cmp	r3, #2
 800e158:	dc59      	bgt.n	800e20e <_dtoa_r+0x936>
 800e15a:	e091      	b.n	800e280 <_dtoa_r+0x9a8>
 800e15c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e15e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e162:	e758      	b.n	800e016 <_dtoa_r+0x73e>
 800e164:	9b04      	ldr	r3, [sp, #16]
 800e166:	1e5e      	subs	r6, r3, #1
 800e168:	9b08      	ldr	r3, [sp, #32]
 800e16a:	42b3      	cmp	r3, r6
 800e16c:	bfbf      	itttt	lt
 800e16e:	9b08      	ldrlt	r3, [sp, #32]
 800e170:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e172:	9608      	strlt	r6, [sp, #32]
 800e174:	1af3      	sublt	r3, r6, r3
 800e176:	bfb4      	ite	lt
 800e178:	18d2      	addlt	r2, r2, r3
 800e17a:	1b9e      	subge	r6, r3, r6
 800e17c:	9b04      	ldr	r3, [sp, #16]
 800e17e:	bfbc      	itt	lt
 800e180:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e182:	2600      	movlt	r6, #0
 800e184:	2b00      	cmp	r3, #0
 800e186:	bfb7      	itett	lt
 800e188:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e18c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e190:	1a9d      	sublt	r5, r3, r2
 800e192:	2300      	movlt	r3, #0
 800e194:	e741      	b.n	800e01a <_dtoa_r+0x742>
 800e196:	9e08      	ldr	r6, [sp, #32]
 800e198:	9d05      	ldr	r5, [sp, #20]
 800e19a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e19c:	e748      	b.n	800e030 <_dtoa_r+0x758>
 800e19e:	9a08      	ldr	r2, [sp, #32]
 800e1a0:	e770      	b.n	800e084 <_dtoa_r+0x7ac>
 800e1a2:	9b07      	ldr	r3, [sp, #28]
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	dc19      	bgt.n	800e1dc <_dtoa_r+0x904>
 800e1a8:	9b02      	ldr	r3, [sp, #8]
 800e1aa:	b9bb      	cbnz	r3, 800e1dc <_dtoa_r+0x904>
 800e1ac:	9b03      	ldr	r3, [sp, #12]
 800e1ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e1b2:	b99b      	cbnz	r3, 800e1dc <_dtoa_r+0x904>
 800e1b4:	9b03      	ldr	r3, [sp, #12]
 800e1b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e1ba:	0d1b      	lsrs	r3, r3, #20
 800e1bc:	051b      	lsls	r3, r3, #20
 800e1be:	b183      	cbz	r3, 800e1e2 <_dtoa_r+0x90a>
 800e1c0:	9b05      	ldr	r3, [sp, #20]
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	9305      	str	r3, [sp, #20]
 800e1c6:	9b06      	ldr	r3, [sp, #24]
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	9306      	str	r3, [sp, #24]
 800e1cc:	f04f 0801 	mov.w	r8, #1
 800e1d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	f47f af6f 	bne.w	800e0b6 <_dtoa_r+0x7de>
 800e1d8:	2001      	movs	r0, #1
 800e1da:	e774      	b.n	800e0c6 <_dtoa_r+0x7ee>
 800e1dc:	f04f 0800 	mov.w	r8, #0
 800e1e0:	e7f6      	b.n	800e1d0 <_dtoa_r+0x8f8>
 800e1e2:	4698      	mov	r8, r3
 800e1e4:	e7f4      	b.n	800e1d0 <_dtoa_r+0x8f8>
 800e1e6:	d082      	beq.n	800e0ee <_dtoa_r+0x816>
 800e1e8:	9a05      	ldr	r2, [sp, #20]
 800e1ea:	331c      	adds	r3, #28
 800e1ec:	441a      	add	r2, r3
 800e1ee:	9205      	str	r2, [sp, #20]
 800e1f0:	9a06      	ldr	r2, [sp, #24]
 800e1f2:	441a      	add	r2, r3
 800e1f4:	441d      	add	r5, r3
 800e1f6:	9206      	str	r2, [sp, #24]
 800e1f8:	e779      	b.n	800e0ee <_dtoa_r+0x816>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	e7f4      	b.n	800e1e8 <_dtoa_r+0x910>
 800e1fe:	9b04      	ldr	r3, [sp, #16]
 800e200:	2b00      	cmp	r3, #0
 800e202:	dc37      	bgt.n	800e274 <_dtoa_r+0x99c>
 800e204:	9b07      	ldr	r3, [sp, #28]
 800e206:	2b02      	cmp	r3, #2
 800e208:	dd34      	ble.n	800e274 <_dtoa_r+0x99c>
 800e20a:	9b04      	ldr	r3, [sp, #16]
 800e20c:	9301      	str	r3, [sp, #4]
 800e20e:	9b01      	ldr	r3, [sp, #4]
 800e210:	b963      	cbnz	r3, 800e22c <_dtoa_r+0x954>
 800e212:	4631      	mov	r1, r6
 800e214:	2205      	movs	r2, #5
 800e216:	4620      	mov	r0, r4
 800e218:	f000 fab2 	bl	800e780 <__multadd>
 800e21c:	4601      	mov	r1, r0
 800e21e:	4606      	mov	r6, r0
 800e220:	4650      	mov	r0, sl
 800e222:	f000 fcc7 	bl	800ebb4 <__mcmp>
 800e226:	2800      	cmp	r0, #0
 800e228:	f73f adbb 	bgt.w	800dda2 <_dtoa_r+0x4ca>
 800e22c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e22e:	9d00      	ldr	r5, [sp, #0]
 800e230:	ea6f 0b03 	mvn.w	fp, r3
 800e234:	f04f 0800 	mov.w	r8, #0
 800e238:	4631      	mov	r1, r6
 800e23a:	4620      	mov	r0, r4
 800e23c:	f000 fa7e 	bl	800e73c <_Bfree>
 800e240:	2f00      	cmp	r7, #0
 800e242:	f43f aeab 	beq.w	800df9c <_dtoa_r+0x6c4>
 800e246:	f1b8 0f00 	cmp.w	r8, #0
 800e24a:	d005      	beq.n	800e258 <_dtoa_r+0x980>
 800e24c:	45b8      	cmp	r8, r7
 800e24e:	d003      	beq.n	800e258 <_dtoa_r+0x980>
 800e250:	4641      	mov	r1, r8
 800e252:	4620      	mov	r0, r4
 800e254:	f000 fa72 	bl	800e73c <_Bfree>
 800e258:	4639      	mov	r1, r7
 800e25a:	4620      	mov	r0, r4
 800e25c:	f000 fa6e 	bl	800e73c <_Bfree>
 800e260:	e69c      	b.n	800df9c <_dtoa_r+0x6c4>
 800e262:	2600      	movs	r6, #0
 800e264:	4637      	mov	r7, r6
 800e266:	e7e1      	b.n	800e22c <_dtoa_r+0x954>
 800e268:	46bb      	mov	fp, r7
 800e26a:	4637      	mov	r7, r6
 800e26c:	e599      	b.n	800dda2 <_dtoa_r+0x4ca>
 800e26e:	bf00      	nop
 800e270:	40240000 	.word	0x40240000
 800e274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e276:	2b00      	cmp	r3, #0
 800e278:	f000 80c8 	beq.w	800e40c <_dtoa_r+0xb34>
 800e27c:	9b04      	ldr	r3, [sp, #16]
 800e27e:	9301      	str	r3, [sp, #4]
 800e280:	2d00      	cmp	r5, #0
 800e282:	dd05      	ble.n	800e290 <_dtoa_r+0x9b8>
 800e284:	4639      	mov	r1, r7
 800e286:	462a      	mov	r2, r5
 800e288:	4620      	mov	r0, r4
 800e28a:	f000 fc27 	bl	800eadc <__lshift>
 800e28e:	4607      	mov	r7, r0
 800e290:	f1b8 0f00 	cmp.w	r8, #0
 800e294:	d05b      	beq.n	800e34e <_dtoa_r+0xa76>
 800e296:	6879      	ldr	r1, [r7, #4]
 800e298:	4620      	mov	r0, r4
 800e29a:	f000 fa0f 	bl	800e6bc <_Balloc>
 800e29e:	4605      	mov	r5, r0
 800e2a0:	b928      	cbnz	r0, 800e2ae <_dtoa_r+0x9d6>
 800e2a2:	4b83      	ldr	r3, [pc, #524]	; (800e4b0 <_dtoa_r+0xbd8>)
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e2aa:	f7ff bb2e 	b.w	800d90a <_dtoa_r+0x32>
 800e2ae:	693a      	ldr	r2, [r7, #16]
 800e2b0:	3202      	adds	r2, #2
 800e2b2:	0092      	lsls	r2, r2, #2
 800e2b4:	f107 010c 	add.w	r1, r7, #12
 800e2b8:	300c      	adds	r0, #12
 800e2ba:	f000 ffab 	bl	800f214 <memcpy>
 800e2be:	2201      	movs	r2, #1
 800e2c0:	4629      	mov	r1, r5
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	f000 fc0a 	bl	800eadc <__lshift>
 800e2c8:	9b00      	ldr	r3, [sp, #0]
 800e2ca:	3301      	adds	r3, #1
 800e2cc:	9304      	str	r3, [sp, #16]
 800e2ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2d2:	4413      	add	r3, r2
 800e2d4:	9308      	str	r3, [sp, #32]
 800e2d6:	9b02      	ldr	r3, [sp, #8]
 800e2d8:	f003 0301 	and.w	r3, r3, #1
 800e2dc:	46b8      	mov	r8, r7
 800e2de:	9306      	str	r3, [sp, #24]
 800e2e0:	4607      	mov	r7, r0
 800e2e2:	9b04      	ldr	r3, [sp, #16]
 800e2e4:	4631      	mov	r1, r6
 800e2e6:	3b01      	subs	r3, #1
 800e2e8:	4650      	mov	r0, sl
 800e2ea:	9301      	str	r3, [sp, #4]
 800e2ec:	f7ff fa6b 	bl	800d7c6 <quorem>
 800e2f0:	4641      	mov	r1, r8
 800e2f2:	9002      	str	r0, [sp, #8]
 800e2f4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e2f8:	4650      	mov	r0, sl
 800e2fa:	f000 fc5b 	bl	800ebb4 <__mcmp>
 800e2fe:	463a      	mov	r2, r7
 800e300:	9005      	str	r0, [sp, #20]
 800e302:	4631      	mov	r1, r6
 800e304:	4620      	mov	r0, r4
 800e306:	f000 fc71 	bl	800ebec <__mdiff>
 800e30a:	68c2      	ldr	r2, [r0, #12]
 800e30c:	4605      	mov	r5, r0
 800e30e:	bb02      	cbnz	r2, 800e352 <_dtoa_r+0xa7a>
 800e310:	4601      	mov	r1, r0
 800e312:	4650      	mov	r0, sl
 800e314:	f000 fc4e 	bl	800ebb4 <__mcmp>
 800e318:	4602      	mov	r2, r0
 800e31a:	4629      	mov	r1, r5
 800e31c:	4620      	mov	r0, r4
 800e31e:	9209      	str	r2, [sp, #36]	; 0x24
 800e320:	f000 fa0c 	bl	800e73c <_Bfree>
 800e324:	9b07      	ldr	r3, [sp, #28]
 800e326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e328:	9d04      	ldr	r5, [sp, #16]
 800e32a:	ea43 0102 	orr.w	r1, r3, r2
 800e32e:	9b06      	ldr	r3, [sp, #24]
 800e330:	4319      	orrs	r1, r3
 800e332:	d110      	bne.n	800e356 <_dtoa_r+0xa7e>
 800e334:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e338:	d029      	beq.n	800e38e <_dtoa_r+0xab6>
 800e33a:	9b05      	ldr	r3, [sp, #20]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	dd02      	ble.n	800e346 <_dtoa_r+0xa6e>
 800e340:	9b02      	ldr	r3, [sp, #8]
 800e342:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e346:	9b01      	ldr	r3, [sp, #4]
 800e348:	f883 9000 	strb.w	r9, [r3]
 800e34c:	e774      	b.n	800e238 <_dtoa_r+0x960>
 800e34e:	4638      	mov	r0, r7
 800e350:	e7ba      	b.n	800e2c8 <_dtoa_r+0x9f0>
 800e352:	2201      	movs	r2, #1
 800e354:	e7e1      	b.n	800e31a <_dtoa_r+0xa42>
 800e356:	9b05      	ldr	r3, [sp, #20]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	db04      	blt.n	800e366 <_dtoa_r+0xa8e>
 800e35c:	9907      	ldr	r1, [sp, #28]
 800e35e:	430b      	orrs	r3, r1
 800e360:	9906      	ldr	r1, [sp, #24]
 800e362:	430b      	orrs	r3, r1
 800e364:	d120      	bne.n	800e3a8 <_dtoa_r+0xad0>
 800e366:	2a00      	cmp	r2, #0
 800e368:	dded      	ble.n	800e346 <_dtoa_r+0xa6e>
 800e36a:	4651      	mov	r1, sl
 800e36c:	2201      	movs	r2, #1
 800e36e:	4620      	mov	r0, r4
 800e370:	f000 fbb4 	bl	800eadc <__lshift>
 800e374:	4631      	mov	r1, r6
 800e376:	4682      	mov	sl, r0
 800e378:	f000 fc1c 	bl	800ebb4 <__mcmp>
 800e37c:	2800      	cmp	r0, #0
 800e37e:	dc03      	bgt.n	800e388 <_dtoa_r+0xab0>
 800e380:	d1e1      	bne.n	800e346 <_dtoa_r+0xa6e>
 800e382:	f019 0f01 	tst.w	r9, #1
 800e386:	d0de      	beq.n	800e346 <_dtoa_r+0xa6e>
 800e388:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e38c:	d1d8      	bne.n	800e340 <_dtoa_r+0xa68>
 800e38e:	9a01      	ldr	r2, [sp, #4]
 800e390:	2339      	movs	r3, #57	; 0x39
 800e392:	7013      	strb	r3, [r2, #0]
 800e394:	462b      	mov	r3, r5
 800e396:	461d      	mov	r5, r3
 800e398:	3b01      	subs	r3, #1
 800e39a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e39e:	2a39      	cmp	r2, #57	; 0x39
 800e3a0:	d06c      	beq.n	800e47c <_dtoa_r+0xba4>
 800e3a2:	3201      	adds	r2, #1
 800e3a4:	701a      	strb	r2, [r3, #0]
 800e3a6:	e747      	b.n	800e238 <_dtoa_r+0x960>
 800e3a8:	2a00      	cmp	r2, #0
 800e3aa:	dd07      	ble.n	800e3bc <_dtoa_r+0xae4>
 800e3ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e3b0:	d0ed      	beq.n	800e38e <_dtoa_r+0xab6>
 800e3b2:	9a01      	ldr	r2, [sp, #4]
 800e3b4:	f109 0301 	add.w	r3, r9, #1
 800e3b8:	7013      	strb	r3, [r2, #0]
 800e3ba:	e73d      	b.n	800e238 <_dtoa_r+0x960>
 800e3bc:	9b04      	ldr	r3, [sp, #16]
 800e3be:	9a08      	ldr	r2, [sp, #32]
 800e3c0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d043      	beq.n	800e450 <_dtoa_r+0xb78>
 800e3c8:	4651      	mov	r1, sl
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	220a      	movs	r2, #10
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	f000 f9d6 	bl	800e780 <__multadd>
 800e3d4:	45b8      	cmp	r8, r7
 800e3d6:	4682      	mov	sl, r0
 800e3d8:	f04f 0300 	mov.w	r3, #0
 800e3dc:	f04f 020a 	mov.w	r2, #10
 800e3e0:	4641      	mov	r1, r8
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	d107      	bne.n	800e3f6 <_dtoa_r+0xb1e>
 800e3e6:	f000 f9cb 	bl	800e780 <__multadd>
 800e3ea:	4680      	mov	r8, r0
 800e3ec:	4607      	mov	r7, r0
 800e3ee:	9b04      	ldr	r3, [sp, #16]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	9304      	str	r3, [sp, #16]
 800e3f4:	e775      	b.n	800e2e2 <_dtoa_r+0xa0a>
 800e3f6:	f000 f9c3 	bl	800e780 <__multadd>
 800e3fa:	4639      	mov	r1, r7
 800e3fc:	4680      	mov	r8, r0
 800e3fe:	2300      	movs	r3, #0
 800e400:	220a      	movs	r2, #10
 800e402:	4620      	mov	r0, r4
 800e404:	f000 f9bc 	bl	800e780 <__multadd>
 800e408:	4607      	mov	r7, r0
 800e40a:	e7f0      	b.n	800e3ee <_dtoa_r+0xb16>
 800e40c:	9b04      	ldr	r3, [sp, #16]
 800e40e:	9301      	str	r3, [sp, #4]
 800e410:	9d00      	ldr	r5, [sp, #0]
 800e412:	4631      	mov	r1, r6
 800e414:	4650      	mov	r0, sl
 800e416:	f7ff f9d6 	bl	800d7c6 <quorem>
 800e41a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e41e:	9b00      	ldr	r3, [sp, #0]
 800e420:	f805 9b01 	strb.w	r9, [r5], #1
 800e424:	1aea      	subs	r2, r5, r3
 800e426:	9b01      	ldr	r3, [sp, #4]
 800e428:	4293      	cmp	r3, r2
 800e42a:	dd07      	ble.n	800e43c <_dtoa_r+0xb64>
 800e42c:	4651      	mov	r1, sl
 800e42e:	2300      	movs	r3, #0
 800e430:	220a      	movs	r2, #10
 800e432:	4620      	mov	r0, r4
 800e434:	f000 f9a4 	bl	800e780 <__multadd>
 800e438:	4682      	mov	sl, r0
 800e43a:	e7ea      	b.n	800e412 <_dtoa_r+0xb3a>
 800e43c:	9b01      	ldr	r3, [sp, #4]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	bfc8      	it	gt
 800e442:	461d      	movgt	r5, r3
 800e444:	9b00      	ldr	r3, [sp, #0]
 800e446:	bfd8      	it	le
 800e448:	2501      	movle	r5, #1
 800e44a:	441d      	add	r5, r3
 800e44c:	f04f 0800 	mov.w	r8, #0
 800e450:	4651      	mov	r1, sl
 800e452:	2201      	movs	r2, #1
 800e454:	4620      	mov	r0, r4
 800e456:	f000 fb41 	bl	800eadc <__lshift>
 800e45a:	4631      	mov	r1, r6
 800e45c:	4682      	mov	sl, r0
 800e45e:	f000 fba9 	bl	800ebb4 <__mcmp>
 800e462:	2800      	cmp	r0, #0
 800e464:	dc96      	bgt.n	800e394 <_dtoa_r+0xabc>
 800e466:	d102      	bne.n	800e46e <_dtoa_r+0xb96>
 800e468:	f019 0f01 	tst.w	r9, #1
 800e46c:	d192      	bne.n	800e394 <_dtoa_r+0xabc>
 800e46e:	462b      	mov	r3, r5
 800e470:	461d      	mov	r5, r3
 800e472:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e476:	2a30      	cmp	r2, #48	; 0x30
 800e478:	d0fa      	beq.n	800e470 <_dtoa_r+0xb98>
 800e47a:	e6dd      	b.n	800e238 <_dtoa_r+0x960>
 800e47c:	9a00      	ldr	r2, [sp, #0]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d189      	bne.n	800e396 <_dtoa_r+0xabe>
 800e482:	f10b 0b01 	add.w	fp, fp, #1
 800e486:	2331      	movs	r3, #49	; 0x31
 800e488:	e796      	b.n	800e3b8 <_dtoa_r+0xae0>
 800e48a:	4b0a      	ldr	r3, [pc, #40]	; (800e4b4 <_dtoa_r+0xbdc>)
 800e48c:	f7ff ba99 	b.w	800d9c2 <_dtoa_r+0xea>
 800e490:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e492:	2b00      	cmp	r3, #0
 800e494:	f47f aa6d 	bne.w	800d972 <_dtoa_r+0x9a>
 800e498:	4b07      	ldr	r3, [pc, #28]	; (800e4b8 <_dtoa_r+0xbe0>)
 800e49a:	f7ff ba92 	b.w	800d9c2 <_dtoa_r+0xea>
 800e49e:	9b01      	ldr	r3, [sp, #4]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	dcb5      	bgt.n	800e410 <_dtoa_r+0xb38>
 800e4a4:	9b07      	ldr	r3, [sp, #28]
 800e4a6:	2b02      	cmp	r3, #2
 800e4a8:	f73f aeb1 	bgt.w	800e20e <_dtoa_r+0x936>
 800e4ac:	e7b0      	b.n	800e410 <_dtoa_r+0xb38>
 800e4ae:	bf00      	nop
 800e4b0:	0800f9f4 	.word	0x0800f9f4
 800e4b4:	0800f954 	.word	0x0800f954
 800e4b8:	0800f978 	.word	0x0800f978

0800e4bc <_free_r>:
 800e4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4be:	2900      	cmp	r1, #0
 800e4c0:	d044      	beq.n	800e54c <_free_r+0x90>
 800e4c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4c6:	9001      	str	r0, [sp, #4]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f1a1 0404 	sub.w	r4, r1, #4
 800e4ce:	bfb8      	it	lt
 800e4d0:	18e4      	addlt	r4, r4, r3
 800e4d2:	f000 f8e7 	bl	800e6a4 <__malloc_lock>
 800e4d6:	4a1e      	ldr	r2, [pc, #120]	; (800e550 <_free_r+0x94>)
 800e4d8:	9801      	ldr	r0, [sp, #4]
 800e4da:	6813      	ldr	r3, [r2, #0]
 800e4dc:	b933      	cbnz	r3, 800e4ec <_free_r+0x30>
 800e4de:	6063      	str	r3, [r4, #4]
 800e4e0:	6014      	str	r4, [r2, #0]
 800e4e2:	b003      	add	sp, #12
 800e4e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4e8:	f000 b8e2 	b.w	800e6b0 <__malloc_unlock>
 800e4ec:	42a3      	cmp	r3, r4
 800e4ee:	d908      	bls.n	800e502 <_free_r+0x46>
 800e4f0:	6825      	ldr	r5, [r4, #0]
 800e4f2:	1961      	adds	r1, r4, r5
 800e4f4:	428b      	cmp	r3, r1
 800e4f6:	bf01      	itttt	eq
 800e4f8:	6819      	ldreq	r1, [r3, #0]
 800e4fa:	685b      	ldreq	r3, [r3, #4]
 800e4fc:	1949      	addeq	r1, r1, r5
 800e4fe:	6021      	streq	r1, [r4, #0]
 800e500:	e7ed      	b.n	800e4de <_free_r+0x22>
 800e502:	461a      	mov	r2, r3
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	b10b      	cbz	r3, 800e50c <_free_r+0x50>
 800e508:	42a3      	cmp	r3, r4
 800e50a:	d9fa      	bls.n	800e502 <_free_r+0x46>
 800e50c:	6811      	ldr	r1, [r2, #0]
 800e50e:	1855      	adds	r5, r2, r1
 800e510:	42a5      	cmp	r5, r4
 800e512:	d10b      	bne.n	800e52c <_free_r+0x70>
 800e514:	6824      	ldr	r4, [r4, #0]
 800e516:	4421      	add	r1, r4
 800e518:	1854      	adds	r4, r2, r1
 800e51a:	42a3      	cmp	r3, r4
 800e51c:	6011      	str	r1, [r2, #0]
 800e51e:	d1e0      	bne.n	800e4e2 <_free_r+0x26>
 800e520:	681c      	ldr	r4, [r3, #0]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	6053      	str	r3, [r2, #4]
 800e526:	440c      	add	r4, r1
 800e528:	6014      	str	r4, [r2, #0]
 800e52a:	e7da      	b.n	800e4e2 <_free_r+0x26>
 800e52c:	d902      	bls.n	800e534 <_free_r+0x78>
 800e52e:	230c      	movs	r3, #12
 800e530:	6003      	str	r3, [r0, #0]
 800e532:	e7d6      	b.n	800e4e2 <_free_r+0x26>
 800e534:	6825      	ldr	r5, [r4, #0]
 800e536:	1961      	adds	r1, r4, r5
 800e538:	428b      	cmp	r3, r1
 800e53a:	bf04      	itt	eq
 800e53c:	6819      	ldreq	r1, [r3, #0]
 800e53e:	685b      	ldreq	r3, [r3, #4]
 800e540:	6063      	str	r3, [r4, #4]
 800e542:	bf04      	itt	eq
 800e544:	1949      	addeq	r1, r1, r5
 800e546:	6021      	streq	r1, [r4, #0]
 800e548:	6054      	str	r4, [r2, #4]
 800e54a:	e7ca      	b.n	800e4e2 <_free_r+0x26>
 800e54c:	b003      	add	sp, #12
 800e54e:	bd30      	pop	{r4, r5, pc}
 800e550:	200022d8 	.word	0x200022d8

0800e554 <malloc>:
 800e554:	4b02      	ldr	r3, [pc, #8]	; (800e560 <malloc+0xc>)
 800e556:	4601      	mov	r1, r0
 800e558:	6818      	ldr	r0, [r3, #0]
 800e55a:	f000 b823 	b.w	800e5a4 <_malloc_r>
 800e55e:	bf00      	nop
 800e560:	20000178 	.word	0x20000178

0800e564 <sbrk_aligned>:
 800e564:	b570      	push	{r4, r5, r6, lr}
 800e566:	4e0e      	ldr	r6, [pc, #56]	; (800e5a0 <sbrk_aligned+0x3c>)
 800e568:	460c      	mov	r4, r1
 800e56a:	6831      	ldr	r1, [r6, #0]
 800e56c:	4605      	mov	r5, r0
 800e56e:	b911      	cbnz	r1, 800e576 <sbrk_aligned+0x12>
 800e570:	f000 fe40 	bl	800f1f4 <_sbrk_r>
 800e574:	6030      	str	r0, [r6, #0]
 800e576:	4621      	mov	r1, r4
 800e578:	4628      	mov	r0, r5
 800e57a:	f000 fe3b 	bl	800f1f4 <_sbrk_r>
 800e57e:	1c43      	adds	r3, r0, #1
 800e580:	d00a      	beq.n	800e598 <sbrk_aligned+0x34>
 800e582:	1cc4      	adds	r4, r0, #3
 800e584:	f024 0403 	bic.w	r4, r4, #3
 800e588:	42a0      	cmp	r0, r4
 800e58a:	d007      	beq.n	800e59c <sbrk_aligned+0x38>
 800e58c:	1a21      	subs	r1, r4, r0
 800e58e:	4628      	mov	r0, r5
 800e590:	f000 fe30 	bl	800f1f4 <_sbrk_r>
 800e594:	3001      	adds	r0, #1
 800e596:	d101      	bne.n	800e59c <sbrk_aligned+0x38>
 800e598:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e59c:	4620      	mov	r0, r4
 800e59e:	bd70      	pop	{r4, r5, r6, pc}
 800e5a0:	200022dc 	.word	0x200022dc

0800e5a4 <_malloc_r>:
 800e5a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5a8:	1ccd      	adds	r5, r1, #3
 800e5aa:	f025 0503 	bic.w	r5, r5, #3
 800e5ae:	3508      	adds	r5, #8
 800e5b0:	2d0c      	cmp	r5, #12
 800e5b2:	bf38      	it	cc
 800e5b4:	250c      	movcc	r5, #12
 800e5b6:	2d00      	cmp	r5, #0
 800e5b8:	4607      	mov	r7, r0
 800e5ba:	db01      	blt.n	800e5c0 <_malloc_r+0x1c>
 800e5bc:	42a9      	cmp	r1, r5
 800e5be:	d905      	bls.n	800e5cc <_malloc_r+0x28>
 800e5c0:	230c      	movs	r3, #12
 800e5c2:	603b      	str	r3, [r7, #0]
 800e5c4:	2600      	movs	r6, #0
 800e5c6:	4630      	mov	r0, r6
 800e5c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e6a0 <_malloc_r+0xfc>
 800e5d0:	f000 f868 	bl	800e6a4 <__malloc_lock>
 800e5d4:	f8d8 3000 	ldr.w	r3, [r8]
 800e5d8:	461c      	mov	r4, r3
 800e5da:	bb5c      	cbnz	r4, 800e634 <_malloc_r+0x90>
 800e5dc:	4629      	mov	r1, r5
 800e5de:	4638      	mov	r0, r7
 800e5e0:	f7ff ffc0 	bl	800e564 <sbrk_aligned>
 800e5e4:	1c43      	adds	r3, r0, #1
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	d155      	bne.n	800e696 <_malloc_r+0xf2>
 800e5ea:	f8d8 4000 	ldr.w	r4, [r8]
 800e5ee:	4626      	mov	r6, r4
 800e5f0:	2e00      	cmp	r6, #0
 800e5f2:	d145      	bne.n	800e680 <_malloc_r+0xdc>
 800e5f4:	2c00      	cmp	r4, #0
 800e5f6:	d048      	beq.n	800e68a <_malloc_r+0xe6>
 800e5f8:	6823      	ldr	r3, [r4, #0]
 800e5fa:	4631      	mov	r1, r6
 800e5fc:	4638      	mov	r0, r7
 800e5fe:	eb04 0903 	add.w	r9, r4, r3
 800e602:	f000 fdf7 	bl	800f1f4 <_sbrk_r>
 800e606:	4581      	cmp	r9, r0
 800e608:	d13f      	bne.n	800e68a <_malloc_r+0xe6>
 800e60a:	6821      	ldr	r1, [r4, #0]
 800e60c:	1a6d      	subs	r5, r5, r1
 800e60e:	4629      	mov	r1, r5
 800e610:	4638      	mov	r0, r7
 800e612:	f7ff ffa7 	bl	800e564 <sbrk_aligned>
 800e616:	3001      	adds	r0, #1
 800e618:	d037      	beq.n	800e68a <_malloc_r+0xe6>
 800e61a:	6823      	ldr	r3, [r4, #0]
 800e61c:	442b      	add	r3, r5
 800e61e:	6023      	str	r3, [r4, #0]
 800e620:	f8d8 3000 	ldr.w	r3, [r8]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d038      	beq.n	800e69a <_malloc_r+0xf6>
 800e628:	685a      	ldr	r2, [r3, #4]
 800e62a:	42a2      	cmp	r2, r4
 800e62c:	d12b      	bne.n	800e686 <_malloc_r+0xe2>
 800e62e:	2200      	movs	r2, #0
 800e630:	605a      	str	r2, [r3, #4]
 800e632:	e00f      	b.n	800e654 <_malloc_r+0xb0>
 800e634:	6822      	ldr	r2, [r4, #0]
 800e636:	1b52      	subs	r2, r2, r5
 800e638:	d41f      	bmi.n	800e67a <_malloc_r+0xd6>
 800e63a:	2a0b      	cmp	r2, #11
 800e63c:	d917      	bls.n	800e66e <_malloc_r+0xca>
 800e63e:	1961      	adds	r1, r4, r5
 800e640:	42a3      	cmp	r3, r4
 800e642:	6025      	str	r5, [r4, #0]
 800e644:	bf18      	it	ne
 800e646:	6059      	strne	r1, [r3, #4]
 800e648:	6863      	ldr	r3, [r4, #4]
 800e64a:	bf08      	it	eq
 800e64c:	f8c8 1000 	streq.w	r1, [r8]
 800e650:	5162      	str	r2, [r4, r5]
 800e652:	604b      	str	r3, [r1, #4]
 800e654:	4638      	mov	r0, r7
 800e656:	f104 060b 	add.w	r6, r4, #11
 800e65a:	f000 f829 	bl	800e6b0 <__malloc_unlock>
 800e65e:	f026 0607 	bic.w	r6, r6, #7
 800e662:	1d23      	adds	r3, r4, #4
 800e664:	1af2      	subs	r2, r6, r3
 800e666:	d0ae      	beq.n	800e5c6 <_malloc_r+0x22>
 800e668:	1b9b      	subs	r3, r3, r6
 800e66a:	50a3      	str	r3, [r4, r2]
 800e66c:	e7ab      	b.n	800e5c6 <_malloc_r+0x22>
 800e66e:	42a3      	cmp	r3, r4
 800e670:	6862      	ldr	r2, [r4, #4]
 800e672:	d1dd      	bne.n	800e630 <_malloc_r+0x8c>
 800e674:	f8c8 2000 	str.w	r2, [r8]
 800e678:	e7ec      	b.n	800e654 <_malloc_r+0xb0>
 800e67a:	4623      	mov	r3, r4
 800e67c:	6864      	ldr	r4, [r4, #4]
 800e67e:	e7ac      	b.n	800e5da <_malloc_r+0x36>
 800e680:	4634      	mov	r4, r6
 800e682:	6876      	ldr	r6, [r6, #4]
 800e684:	e7b4      	b.n	800e5f0 <_malloc_r+0x4c>
 800e686:	4613      	mov	r3, r2
 800e688:	e7cc      	b.n	800e624 <_malloc_r+0x80>
 800e68a:	230c      	movs	r3, #12
 800e68c:	603b      	str	r3, [r7, #0]
 800e68e:	4638      	mov	r0, r7
 800e690:	f000 f80e 	bl	800e6b0 <__malloc_unlock>
 800e694:	e797      	b.n	800e5c6 <_malloc_r+0x22>
 800e696:	6025      	str	r5, [r4, #0]
 800e698:	e7dc      	b.n	800e654 <_malloc_r+0xb0>
 800e69a:	605b      	str	r3, [r3, #4]
 800e69c:	deff      	udf	#255	; 0xff
 800e69e:	bf00      	nop
 800e6a0:	200022d8 	.word	0x200022d8

0800e6a4 <__malloc_lock>:
 800e6a4:	4801      	ldr	r0, [pc, #4]	; (800e6ac <__malloc_lock+0x8>)
 800e6a6:	f7ff b88c 	b.w	800d7c2 <__retarget_lock_acquire_recursive>
 800e6aa:	bf00      	nop
 800e6ac:	200022d4 	.word	0x200022d4

0800e6b0 <__malloc_unlock>:
 800e6b0:	4801      	ldr	r0, [pc, #4]	; (800e6b8 <__malloc_unlock+0x8>)
 800e6b2:	f7ff b887 	b.w	800d7c4 <__retarget_lock_release_recursive>
 800e6b6:	bf00      	nop
 800e6b8:	200022d4 	.word	0x200022d4

0800e6bc <_Balloc>:
 800e6bc:	b570      	push	{r4, r5, r6, lr}
 800e6be:	69c6      	ldr	r6, [r0, #28]
 800e6c0:	4604      	mov	r4, r0
 800e6c2:	460d      	mov	r5, r1
 800e6c4:	b976      	cbnz	r6, 800e6e4 <_Balloc+0x28>
 800e6c6:	2010      	movs	r0, #16
 800e6c8:	f7ff ff44 	bl	800e554 <malloc>
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	61e0      	str	r0, [r4, #28]
 800e6d0:	b920      	cbnz	r0, 800e6dc <_Balloc+0x20>
 800e6d2:	4b18      	ldr	r3, [pc, #96]	; (800e734 <_Balloc+0x78>)
 800e6d4:	4818      	ldr	r0, [pc, #96]	; (800e738 <_Balloc+0x7c>)
 800e6d6:	216b      	movs	r1, #107	; 0x6b
 800e6d8:	f000 fdaa 	bl	800f230 <__assert_func>
 800e6dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e6e0:	6006      	str	r6, [r0, #0]
 800e6e2:	60c6      	str	r6, [r0, #12]
 800e6e4:	69e6      	ldr	r6, [r4, #28]
 800e6e6:	68f3      	ldr	r3, [r6, #12]
 800e6e8:	b183      	cbz	r3, 800e70c <_Balloc+0x50>
 800e6ea:	69e3      	ldr	r3, [r4, #28]
 800e6ec:	68db      	ldr	r3, [r3, #12]
 800e6ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e6f2:	b9b8      	cbnz	r0, 800e724 <_Balloc+0x68>
 800e6f4:	2101      	movs	r1, #1
 800e6f6:	fa01 f605 	lsl.w	r6, r1, r5
 800e6fa:	1d72      	adds	r2, r6, #5
 800e6fc:	0092      	lsls	r2, r2, #2
 800e6fe:	4620      	mov	r0, r4
 800e700:	f000 fdb4 	bl	800f26c <_calloc_r>
 800e704:	b160      	cbz	r0, 800e720 <_Balloc+0x64>
 800e706:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e70a:	e00e      	b.n	800e72a <_Balloc+0x6e>
 800e70c:	2221      	movs	r2, #33	; 0x21
 800e70e:	2104      	movs	r1, #4
 800e710:	4620      	mov	r0, r4
 800e712:	f000 fdab 	bl	800f26c <_calloc_r>
 800e716:	69e3      	ldr	r3, [r4, #28]
 800e718:	60f0      	str	r0, [r6, #12]
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d1e4      	bne.n	800e6ea <_Balloc+0x2e>
 800e720:	2000      	movs	r0, #0
 800e722:	bd70      	pop	{r4, r5, r6, pc}
 800e724:	6802      	ldr	r2, [r0, #0]
 800e726:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e72a:	2300      	movs	r3, #0
 800e72c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e730:	e7f7      	b.n	800e722 <_Balloc+0x66>
 800e732:	bf00      	nop
 800e734:	0800f985 	.word	0x0800f985
 800e738:	0800fa05 	.word	0x0800fa05

0800e73c <_Bfree>:
 800e73c:	b570      	push	{r4, r5, r6, lr}
 800e73e:	69c6      	ldr	r6, [r0, #28]
 800e740:	4605      	mov	r5, r0
 800e742:	460c      	mov	r4, r1
 800e744:	b976      	cbnz	r6, 800e764 <_Bfree+0x28>
 800e746:	2010      	movs	r0, #16
 800e748:	f7ff ff04 	bl	800e554 <malloc>
 800e74c:	4602      	mov	r2, r0
 800e74e:	61e8      	str	r0, [r5, #28]
 800e750:	b920      	cbnz	r0, 800e75c <_Bfree+0x20>
 800e752:	4b09      	ldr	r3, [pc, #36]	; (800e778 <_Bfree+0x3c>)
 800e754:	4809      	ldr	r0, [pc, #36]	; (800e77c <_Bfree+0x40>)
 800e756:	218f      	movs	r1, #143	; 0x8f
 800e758:	f000 fd6a 	bl	800f230 <__assert_func>
 800e75c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e760:	6006      	str	r6, [r0, #0]
 800e762:	60c6      	str	r6, [r0, #12]
 800e764:	b13c      	cbz	r4, 800e776 <_Bfree+0x3a>
 800e766:	69eb      	ldr	r3, [r5, #28]
 800e768:	6862      	ldr	r2, [r4, #4]
 800e76a:	68db      	ldr	r3, [r3, #12]
 800e76c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e770:	6021      	str	r1, [r4, #0]
 800e772:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e776:	bd70      	pop	{r4, r5, r6, pc}
 800e778:	0800f985 	.word	0x0800f985
 800e77c:	0800fa05 	.word	0x0800fa05

0800e780 <__multadd>:
 800e780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e784:	690d      	ldr	r5, [r1, #16]
 800e786:	4607      	mov	r7, r0
 800e788:	460c      	mov	r4, r1
 800e78a:	461e      	mov	r6, r3
 800e78c:	f101 0c14 	add.w	ip, r1, #20
 800e790:	2000      	movs	r0, #0
 800e792:	f8dc 3000 	ldr.w	r3, [ip]
 800e796:	b299      	uxth	r1, r3
 800e798:	fb02 6101 	mla	r1, r2, r1, r6
 800e79c:	0c1e      	lsrs	r6, r3, #16
 800e79e:	0c0b      	lsrs	r3, r1, #16
 800e7a0:	fb02 3306 	mla	r3, r2, r6, r3
 800e7a4:	b289      	uxth	r1, r1
 800e7a6:	3001      	adds	r0, #1
 800e7a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e7ac:	4285      	cmp	r5, r0
 800e7ae:	f84c 1b04 	str.w	r1, [ip], #4
 800e7b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e7b6:	dcec      	bgt.n	800e792 <__multadd+0x12>
 800e7b8:	b30e      	cbz	r6, 800e7fe <__multadd+0x7e>
 800e7ba:	68a3      	ldr	r3, [r4, #8]
 800e7bc:	42ab      	cmp	r3, r5
 800e7be:	dc19      	bgt.n	800e7f4 <__multadd+0x74>
 800e7c0:	6861      	ldr	r1, [r4, #4]
 800e7c2:	4638      	mov	r0, r7
 800e7c4:	3101      	adds	r1, #1
 800e7c6:	f7ff ff79 	bl	800e6bc <_Balloc>
 800e7ca:	4680      	mov	r8, r0
 800e7cc:	b928      	cbnz	r0, 800e7da <__multadd+0x5a>
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	4b0c      	ldr	r3, [pc, #48]	; (800e804 <__multadd+0x84>)
 800e7d2:	480d      	ldr	r0, [pc, #52]	; (800e808 <__multadd+0x88>)
 800e7d4:	21ba      	movs	r1, #186	; 0xba
 800e7d6:	f000 fd2b 	bl	800f230 <__assert_func>
 800e7da:	6922      	ldr	r2, [r4, #16]
 800e7dc:	3202      	adds	r2, #2
 800e7de:	f104 010c 	add.w	r1, r4, #12
 800e7e2:	0092      	lsls	r2, r2, #2
 800e7e4:	300c      	adds	r0, #12
 800e7e6:	f000 fd15 	bl	800f214 <memcpy>
 800e7ea:	4621      	mov	r1, r4
 800e7ec:	4638      	mov	r0, r7
 800e7ee:	f7ff ffa5 	bl	800e73c <_Bfree>
 800e7f2:	4644      	mov	r4, r8
 800e7f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e7f8:	3501      	adds	r5, #1
 800e7fa:	615e      	str	r6, [r3, #20]
 800e7fc:	6125      	str	r5, [r4, #16]
 800e7fe:	4620      	mov	r0, r4
 800e800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e804:	0800f9f4 	.word	0x0800f9f4
 800e808:	0800fa05 	.word	0x0800fa05

0800e80c <__hi0bits>:
 800e80c:	0c03      	lsrs	r3, r0, #16
 800e80e:	041b      	lsls	r3, r3, #16
 800e810:	b9d3      	cbnz	r3, 800e848 <__hi0bits+0x3c>
 800e812:	0400      	lsls	r0, r0, #16
 800e814:	2310      	movs	r3, #16
 800e816:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e81a:	bf04      	itt	eq
 800e81c:	0200      	lsleq	r0, r0, #8
 800e81e:	3308      	addeq	r3, #8
 800e820:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e824:	bf04      	itt	eq
 800e826:	0100      	lsleq	r0, r0, #4
 800e828:	3304      	addeq	r3, #4
 800e82a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e82e:	bf04      	itt	eq
 800e830:	0080      	lsleq	r0, r0, #2
 800e832:	3302      	addeq	r3, #2
 800e834:	2800      	cmp	r0, #0
 800e836:	db05      	blt.n	800e844 <__hi0bits+0x38>
 800e838:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e83c:	f103 0301 	add.w	r3, r3, #1
 800e840:	bf08      	it	eq
 800e842:	2320      	moveq	r3, #32
 800e844:	4618      	mov	r0, r3
 800e846:	4770      	bx	lr
 800e848:	2300      	movs	r3, #0
 800e84a:	e7e4      	b.n	800e816 <__hi0bits+0xa>

0800e84c <__lo0bits>:
 800e84c:	6803      	ldr	r3, [r0, #0]
 800e84e:	f013 0207 	ands.w	r2, r3, #7
 800e852:	d00c      	beq.n	800e86e <__lo0bits+0x22>
 800e854:	07d9      	lsls	r1, r3, #31
 800e856:	d422      	bmi.n	800e89e <__lo0bits+0x52>
 800e858:	079a      	lsls	r2, r3, #30
 800e85a:	bf49      	itett	mi
 800e85c:	085b      	lsrmi	r3, r3, #1
 800e85e:	089b      	lsrpl	r3, r3, #2
 800e860:	6003      	strmi	r3, [r0, #0]
 800e862:	2201      	movmi	r2, #1
 800e864:	bf5c      	itt	pl
 800e866:	6003      	strpl	r3, [r0, #0]
 800e868:	2202      	movpl	r2, #2
 800e86a:	4610      	mov	r0, r2
 800e86c:	4770      	bx	lr
 800e86e:	b299      	uxth	r1, r3
 800e870:	b909      	cbnz	r1, 800e876 <__lo0bits+0x2a>
 800e872:	0c1b      	lsrs	r3, r3, #16
 800e874:	2210      	movs	r2, #16
 800e876:	b2d9      	uxtb	r1, r3
 800e878:	b909      	cbnz	r1, 800e87e <__lo0bits+0x32>
 800e87a:	3208      	adds	r2, #8
 800e87c:	0a1b      	lsrs	r3, r3, #8
 800e87e:	0719      	lsls	r1, r3, #28
 800e880:	bf04      	itt	eq
 800e882:	091b      	lsreq	r3, r3, #4
 800e884:	3204      	addeq	r2, #4
 800e886:	0799      	lsls	r1, r3, #30
 800e888:	bf04      	itt	eq
 800e88a:	089b      	lsreq	r3, r3, #2
 800e88c:	3202      	addeq	r2, #2
 800e88e:	07d9      	lsls	r1, r3, #31
 800e890:	d403      	bmi.n	800e89a <__lo0bits+0x4e>
 800e892:	085b      	lsrs	r3, r3, #1
 800e894:	f102 0201 	add.w	r2, r2, #1
 800e898:	d003      	beq.n	800e8a2 <__lo0bits+0x56>
 800e89a:	6003      	str	r3, [r0, #0]
 800e89c:	e7e5      	b.n	800e86a <__lo0bits+0x1e>
 800e89e:	2200      	movs	r2, #0
 800e8a0:	e7e3      	b.n	800e86a <__lo0bits+0x1e>
 800e8a2:	2220      	movs	r2, #32
 800e8a4:	e7e1      	b.n	800e86a <__lo0bits+0x1e>
	...

0800e8a8 <__i2b>:
 800e8a8:	b510      	push	{r4, lr}
 800e8aa:	460c      	mov	r4, r1
 800e8ac:	2101      	movs	r1, #1
 800e8ae:	f7ff ff05 	bl	800e6bc <_Balloc>
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	b928      	cbnz	r0, 800e8c2 <__i2b+0x1a>
 800e8b6:	4b05      	ldr	r3, [pc, #20]	; (800e8cc <__i2b+0x24>)
 800e8b8:	4805      	ldr	r0, [pc, #20]	; (800e8d0 <__i2b+0x28>)
 800e8ba:	f240 1145 	movw	r1, #325	; 0x145
 800e8be:	f000 fcb7 	bl	800f230 <__assert_func>
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	6144      	str	r4, [r0, #20]
 800e8c6:	6103      	str	r3, [r0, #16]
 800e8c8:	bd10      	pop	{r4, pc}
 800e8ca:	bf00      	nop
 800e8cc:	0800f9f4 	.word	0x0800f9f4
 800e8d0:	0800fa05 	.word	0x0800fa05

0800e8d4 <__multiply>:
 800e8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d8:	4691      	mov	r9, r2
 800e8da:	690a      	ldr	r2, [r1, #16]
 800e8dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	bfb8      	it	lt
 800e8e4:	460b      	movlt	r3, r1
 800e8e6:	460c      	mov	r4, r1
 800e8e8:	bfbc      	itt	lt
 800e8ea:	464c      	movlt	r4, r9
 800e8ec:	4699      	movlt	r9, r3
 800e8ee:	6927      	ldr	r7, [r4, #16]
 800e8f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e8f4:	68a3      	ldr	r3, [r4, #8]
 800e8f6:	6861      	ldr	r1, [r4, #4]
 800e8f8:	eb07 060a 	add.w	r6, r7, sl
 800e8fc:	42b3      	cmp	r3, r6
 800e8fe:	b085      	sub	sp, #20
 800e900:	bfb8      	it	lt
 800e902:	3101      	addlt	r1, #1
 800e904:	f7ff feda 	bl	800e6bc <_Balloc>
 800e908:	b930      	cbnz	r0, 800e918 <__multiply+0x44>
 800e90a:	4602      	mov	r2, r0
 800e90c:	4b44      	ldr	r3, [pc, #272]	; (800ea20 <__multiply+0x14c>)
 800e90e:	4845      	ldr	r0, [pc, #276]	; (800ea24 <__multiply+0x150>)
 800e910:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e914:	f000 fc8c 	bl	800f230 <__assert_func>
 800e918:	f100 0514 	add.w	r5, r0, #20
 800e91c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e920:	462b      	mov	r3, r5
 800e922:	2200      	movs	r2, #0
 800e924:	4543      	cmp	r3, r8
 800e926:	d321      	bcc.n	800e96c <__multiply+0x98>
 800e928:	f104 0314 	add.w	r3, r4, #20
 800e92c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e930:	f109 0314 	add.w	r3, r9, #20
 800e934:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e938:	9202      	str	r2, [sp, #8]
 800e93a:	1b3a      	subs	r2, r7, r4
 800e93c:	3a15      	subs	r2, #21
 800e93e:	f022 0203 	bic.w	r2, r2, #3
 800e942:	3204      	adds	r2, #4
 800e944:	f104 0115 	add.w	r1, r4, #21
 800e948:	428f      	cmp	r7, r1
 800e94a:	bf38      	it	cc
 800e94c:	2204      	movcc	r2, #4
 800e94e:	9201      	str	r2, [sp, #4]
 800e950:	9a02      	ldr	r2, [sp, #8]
 800e952:	9303      	str	r3, [sp, #12]
 800e954:	429a      	cmp	r2, r3
 800e956:	d80c      	bhi.n	800e972 <__multiply+0x9e>
 800e958:	2e00      	cmp	r6, #0
 800e95a:	dd03      	ble.n	800e964 <__multiply+0x90>
 800e95c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e960:	2b00      	cmp	r3, #0
 800e962:	d05b      	beq.n	800ea1c <__multiply+0x148>
 800e964:	6106      	str	r6, [r0, #16]
 800e966:	b005      	add	sp, #20
 800e968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e96c:	f843 2b04 	str.w	r2, [r3], #4
 800e970:	e7d8      	b.n	800e924 <__multiply+0x50>
 800e972:	f8b3 a000 	ldrh.w	sl, [r3]
 800e976:	f1ba 0f00 	cmp.w	sl, #0
 800e97a:	d024      	beq.n	800e9c6 <__multiply+0xf2>
 800e97c:	f104 0e14 	add.w	lr, r4, #20
 800e980:	46a9      	mov	r9, r5
 800e982:	f04f 0c00 	mov.w	ip, #0
 800e986:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e98a:	f8d9 1000 	ldr.w	r1, [r9]
 800e98e:	fa1f fb82 	uxth.w	fp, r2
 800e992:	b289      	uxth	r1, r1
 800e994:	fb0a 110b 	mla	r1, sl, fp, r1
 800e998:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e99c:	f8d9 2000 	ldr.w	r2, [r9]
 800e9a0:	4461      	add	r1, ip
 800e9a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e9a6:	fb0a c20b 	mla	r2, sl, fp, ip
 800e9aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e9ae:	b289      	uxth	r1, r1
 800e9b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e9b4:	4577      	cmp	r7, lr
 800e9b6:	f849 1b04 	str.w	r1, [r9], #4
 800e9ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e9be:	d8e2      	bhi.n	800e986 <__multiply+0xb2>
 800e9c0:	9a01      	ldr	r2, [sp, #4]
 800e9c2:	f845 c002 	str.w	ip, [r5, r2]
 800e9c6:	9a03      	ldr	r2, [sp, #12]
 800e9c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e9cc:	3304      	adds	r3, #4
 800e9ce:	f1b9 0f00 	cmp.w	r9, #0
 800e9d2:	d021      	beq.n	800ea18 <__multiply+0x144>
 800e9d4:	6829      	ldr	r1, [r5, #0]
 800e9d6:	f104 0c14 	add.w	ip, r4, #20
 800e9da:	46ae      	mov	lr, r5
 800e9dc:	f04f 0a00 	mov.w	sl, #0
 800e9e0:	f8bc b000 	ldrh.w	fp, [ip]
 800e9e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e9e8:	fb09 220b 	mla	r2, r9, fp, r2
 800e9ec:	4452      	add	r2, sl
 800e9ee:	b289      	uxth	r1, r1
 800e9f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e9f4:	f84e 1b04 	str.w	r1, [lr], #4
 800e9f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e9fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ea00:	f8be 1000 	ldrh.w	r1, [lr]
 800ea04:	fb09 110a 	mla	r1, r9, sl, r1
 800ea08:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ea0c:	4567      	cmp	r7, ip
 800ea0e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ea12:	d8e5      	bhi.n	800e9e0 <__multiply+0x10c>
 800ea14:	9a01      	ldr	r2, [sp, #4]
 800ea16:	50a9      	str	r1, [r5, r2]
 800ea18:	3504      	adds	r5, #4
 800ea1a:	e799      	b.n	800e950 <__multiply+0x7c>
 800ea1c:	3e01      	subs	r6, #1
 800ea1e:	e79b      	b.n	800e958 <__multiply+0x84>
 800ea20:	0800f9f4 	.word	0x0800f9f4
 800ea24:	0800fa05 	.word	0x0800fa05

0800ea28 <__pow5mult>:
 800ea28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea2c:	4615      	mov	r5, r2
 800ea2e:	f012 0203 	ands.w	r2, r2, #3
 800ea32:	4606      	mov	r6, r0
 800ea34:	460f      	mov	r7, r1
 800ea36:	d007      	beq.n	800ea48 <__pow5mult+0x20>
 800ea38:	4c25      	ldr	r4, [pc, #148]	; (800ead0 <__pow5mult+0xa8>)
 800ea3a:	3a01      	subs	r2, #1
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ea42:	f7ff fe9d 	bl	800e780 <__multadd>
 800ea46:	4607      	mov	r7, r0
 800ea48:	10ad      	asrs	r5, r5, #2
 800ea4a:	d03d      	beq.n	800eac8 <__pow5mult+0xa0>
 800ea4c:	69f4      	ldr	r4, [r6, #28]
 800ea4e:	b97c      	cbnz	r4, 800ea70 <__pow5mult+0x48>
 800ea50:	2010      	movs	r0, #16
 800ea52:	f7ff fd7f 	bl	800e554 <malloc>
 800ea56:	4602      	mov	r2, r0
 800ea58:	61f0      	str	r0, [r6, #28]
 800ea5a:	b928      	cbnz	r0, 800ea68 <__pow5mult+0x40>
 800ea5c:	4b1d      	ldr	r3, [pc, #116]	; (800ead4 <__pow5mult+0xac>)
 800ea5e:	481e      	ldr	r0, [pc, #120]	; (800ead8 <__pow5mult+0xb0>)
 800ea60:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ea64:	f000 fbe4 	bl	800f230 <__assert_func>
 800ea68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ea6c:	6004      	str	r4, [r0, #0]
 800ea6e:	60c4      	str	r4, [r0, #12]
 800ea70:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ea74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ea78:	b94c      	cbnz	r4, 800ea8e <__pow5mult+0x66>
 800ea7a:	f240 2171 	movw	r1, #625	; 0x271
 800ea7e:	4630      	mov	r0, r6
 800ea80:	f7ff ff12 	bl	800e8a8 <__i2b>
 800ea84:	2300      	movs	r3, #0
 800ea86:	f8c8 0008 	str.w	r0, [r8, #8]
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	6003      	str	r3, [r0, #0]
 800ea8e:	f04f 0900 	mov.w	r9, #0
 800ea92:	07eb      	lsls	r3, r5, #31
 800ea94:	d50a      	bpl.n	800eaac <__pow5mult+0x84>
 800ea96:	4639      	mov	r1, r7
 800ea98:	4622      	mov	r2, r4
 800ea9a:	4630      	mov	r0, r6
 800ea9c:	f7ff ff1a 	bl	800e8d4 <__multiply>
 800eaa0:	4639      	mov	r1, r7
 800eaa2:	4680      	mov	r8, r0
 800eaa4:	4630      	mov	r0, r6
 800eaa6:	f7ff fe49 	bl	800e73c <_Bfree>
 800eaaa:	4647      	mov	r7, r8
 800eaac:	106d      	asrs	r5, r5, #1
 800eaae:	d00b      	beq.n	800eac8 <__pow5mult+0xa0>
 800eab0:	6820      	ldr	r0, [r4, #0]
 800eab2:	b938      	cbnz	r0, 800eac4 <__pow5mult+0x9c>
 800eab4:	4622      	mov	r2, r4
 800eab6:	4621      	mov	r1, r4
 800eab8:	4630      	mov	r0, r6
 800eaba:	f7ff ff0b 	bl	800e8d4 <__multiply>
 800eabe:	6020      	str	r0, [r4, #0]
 800eac0:	f8c0 9000 	str.w	r9, [r0]
 800eac4:	4604      	mov	r4, r0
 800eac6:	e7e4      	b.n	800ea92 <__pow5mult+0x6a>
 800eac8:	4638      	mov	r0, r7
 800eaca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eace:	bf00      	nop
 800ead0:	0800fb50 	.word	0x0800fb50
 800ead4:	0800f985 	.word	0x0800f985
 800ead8:	0800fa05 	.word	0x0800fa05

0800eadc <__lshift>:
 800eadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eae0:	460c      	mov	r4, r1
 800eae2:	6849      	ldr	r1, [r1, #4]
 800eae4:	6923      	ldr	r3, [r4, #16]
 800eae6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eaea:	68a3      	ldr	r3, [r4, #8]
 800eaec:	4607      	mov	r7, r0
 800eaee:	4691      	mov	r9, r2
 800eaf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eaf4:	f108 0601 	add.w	r6, r8, #1
 800eaf8:	42b3      	cmp	r3, r6
 800eafa:	db0b      	blt.n	800eb14 <__lshift+0x38>
 800eafc:	4638      	mov	r0, r7
 800eafe:	f7ff fddd 	bl	800e6bc <_Balloc>
 800eb02:	4605      	mov	r5, r0
 800eb04:	b948      	cbnz	r0, 800eb1a <__lshift+0x3e>
 800eb06:	4602      	mov	r2, r0
 800eb08:	4b28      	ldr	r3, [pc, #160]	; (800ebac <__lshift+0xd0>)
 800eb0a:	4829      	ldr	r0, [pc, #164]	; (800ebb0 <__lshift+0xd4>)
 800eb0c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800eb10:	f000 fb8e 	bl	800f230 <__assert_func>
 800eb14:	3101      	adds	r1, #1
 800eb16:	005b      	lsls	r3, r3, #1
 800eb18:	e7ee      	b.n	800eaf8 <__lshift+0x1c>
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	f100 0114 	add.w	r1, r0, #20
 800eb20:	f100 0210 	add.w	r2, r0, #16
 800eb24:	4618      	mov	r0, r3
 800eb26:	4553      	cmp	r3, sl
 800eb28:	db33      	blt.n	800eb92 <__lshift+0xb6>
 800eb2a:	6920      	ldr	r0, [r4, #16]
 800eb2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eb30:	f104 0314 	add.w	r3, r4, #20
 800eb34:	f019 091f 	ands.w	r9, r9, #31
 800eb38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eb3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eb40:	d02b      	beq.n	800eb9a <__lshift+0xbe>
 800eb42:	f1c9 0e20 	rsb	lr, r9, #32
 800eb46:	468a      	mov	sl, r1
 800eb48:	2200      	movs	r2, #0
 800eb4a:	6818      	ldr	r0, [r3, #0]
 800eb4c:	fa00 f009 	lsl.w	r0, r0, r9
 800eb50:	4310      	orrs	r0, r2
 800eb52:	f84a 0b04 	str.w	r0, [sl], #4
 800eb56:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb5a:	459c      	cmp	ip, r3
 800eb5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800eb60:	d8f3      	bhi.n	800eb4a <__lshift+0x6e>
 800eb62:	ebac 0304 	sub.w	r3, ip, r4
 800eb66:	3b15      	subs	r3, #21
 800eb68:	f023 0303 	bic.w	r3, r3, #3
 800eb6c:	3304      	adds	r3, #4
 800eb6e:	f104 0015 	add.w	r0, r4, #21
 800eb72:	4584      	cmp	ip, r0
 800eb74:	bf38      	it	cc
 800eb76:	2304      	movcc	r3, #4
 800eb78:	50ca      	str	r2, [r1, r3]
 800eb7a:	b10a      	cbz	r2, 800eb80 <__lshift+0xa4>
 800eb7c:	f108 0602 	add.w	r6, r8, #2
 800eb80:	3e01      	subs	r6, #1
 800eb82:	4638      	mov	r0, r7
 800eb84:	612e      	str	r6, [r5, #16]
 800eb86:	4621      	mov	r1, r4
 800eb88:	f7ff fdd8 	bl	800e73c <_Bfree>
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb92:	f842 0f04 	str.w	r0, [r2, #4]!
 800eb96:	3301      	adds	r3, #1
 800eb98:	e7c5      	b.n	800eb26 <__lshift+0x4a>
 800eb9a:	3904      	subs	r1, #4
 800eb9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800eba0:	f841 2f04 	str.w	r2, [r1, #4]!
 800eba4:	459c      	cmp	ip, r3
 800eba6:	d8f9      	bhi.n	800eb9c <__lshift+0xc0>
 800eba8:	e7ea      	b.n	800eb80 <__lshift+0xa4>
 800ebaa:	bf00      	nop
 800ebac:	0800f9f4 	.word	0x0800f9f4
 800ebb0:	0800fa05 	.word	0x0800fa05

0800ebb4 <__mcmp>:
 800ebb4:	b530      	push	{r4, r5, lr}
 800ebb6:	6902      	ldr	r2, [r0, #16]
 800ebb8:	690c      	ldr	r4, [r1, #16]
 800ebba:	1b12      	subs	r2, r2, r4
 800ebbc:	d10e      	bne.n	800ebdc <__mcmp+0x28>
 800ebbe:	f100 0314 	add.w	r3, r0, #20
 800ebc2:	3114      	adds	r1, #20
 800ebc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ebc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ebcc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ebd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ebd4:	42a5      	cmp	r5, r4
 800ebd6:	d003      	beq.n	800ebe0 <__mcmp+0x2c>
 800ebd8:	d305      	bcc.n	800ebe6 <__mcmp+0x32>
 800ebda:	2201      	movs	r2, #1
 800ebdc:	4610      	mov	r0, r2
 800ebde:	bd30      	pop	{r4, r5, pc}
 800ebe0:	4283      	cmp	r3, r0
 800ebe2:	d3f3      	bcc.n	800ebcc <__mcmp+0x18>
 800ebe4:	e7fa      	b.n	800ebdc <__mcmp+0x28>
 800ebe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebea:	e7f7      	b.n	800ebdc <__mcmp+0x28>

0800ebec <__mdiff>:
 800ebec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf0:	460c      	mov	r4, r1
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	4611      	mov	r1, r2
 800ebf6:	4620      	mov	r0, r4
 800ebf8:	4690      	mov	r8, r2
 800ebfa:	f7ff ffdb 	bl	800ebb4 <__mcmp>
 800ebfe:	1e05      	subs	r5, r0, #0
 800ec00:	d110      	bne.n	800ec24 <__mdiff+0x38>
 800ec02:	4629      	mov	r1, r5
 800ec04:	4630      	mov	r0, r6
 800ec06:	f7ff fd59 	bl	800e6bc <_Balloc>
 800ec0a:	b930      	cbnz	r0, 800ec1a <__mdiff+0x2e>
 800ec0c:	4b3a      	ldr	r3, [pc, #232]	; (800ecf8 <__mdiff+0x10c>)
 800ec0e:	4602      	mov	r2, r0
 800ec10:	f240 2137 	movw	r1, #567	; 0x237
 800ec14:	4839      	ldr	r0, [pc, #228]	; (800ecfc <__mdiff+0x110>)
 800ec16:	f000 fb0b 	bl	800f230 <__assert_func>
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ec20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec24:	bfa4      	itt	ge
 800ec26:	4643      	movge	r3, r8
 800ec28:	46a0      	movge	r8, r4
 800ec2a:	4630      	mov	r0, r6
 800ec2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ec30:	bfa6      	itte	ge
 800ec32:	461c      	movge	r4, r3
 800ec34:	2500      	movge	r5, #0
 800ec36:	2501      	movlt	r5, #1
 800ec38:	f7ff fd40 	bl	800e6bc <_Balloc>
 800ec3c:	b920      	cbnz	r0, 800ec48 <__mdiff+0x5c>
 800ec3e:	4b2e      	ldr	r3, [pc, #184]	; (800ecf8 <__mdiff+0x10c>)
 800ec40:	4602      	mov	r2, r0
 800ec42:	f240 2145 	movw	r1, #581	; 0x245
 800ec46:	e7e5      	b.n	800ec14 <__mdiff+0x28>
 800ec48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ec4c:	6926      	ldr	r6, [r4, #16]
 800ec4e:	60c5      	str	r5, [r0, #12]
 800ec50:	f104 0914 	add.w	r9, r4, #20
 800ec54:	f108 0514 	add.w	r5, r8, #20
 800ec58:	f100 0e14 	add.w	lr, r0, #20
 800ec5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ec60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ec64:	f108 0210 	add.w	r2, r8, #16
 800ec68:	46f2      	mov	sl, lr
 800ec6a:	2100      	movs	r1, #0
 800ec6c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ec70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ec74:	fa11 f88b 	uxtah	r8, r1, fp
 800ec78:	b299      	uxth	r1, r3
 800ec7a:	0c1b      	lsrs	r3, r3, #16
 800ec7c:	eba8 0801 	sub.w	r8, r8, r1
 800ec80:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ec84:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ec88:	fa1f f888 	uxth.w	r8, r8
 800ec8c:	1419      	asrs	r1, r3, #16
 800ec8e:	454e      	cmp	r6, r9
 800ec90:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ec94:	f84a 3b04 	str.w	r3, [sl], #4
 800ec98:	d8e8      	bhi.n	800ec6c <__mdiff+0x80>
 800ec9a:	1b33      	subs	r3, r6, r4
 800ec9c:	3b15      	subs	r3, #21
 800ec9e:	f023 0303 	bic.w	r3, r3, #3
 800eca2:	3304      	adds	r3, #4
 800eca4:	3415      	adds	r4, #21
 800eca6:	42a6      	cmp	r6, r4
 800eca8:	bf38      	it	cc
 800ecaa:	2304      	movcc	r3, #4
 800ecac:	441d      	add	r5, r3
 800ecae:	4473      	add	r3, lr
 800ecb0:	469e      	mov	lr, r3
 800ecb2:	462e      	mov	r6, r5
 800ecb4:	4566      	cmp	r6, ip
 800ecb6:	d30e      	bcc.n	800ecd6 <__mdiff+0xea>
 800ecb8:	f10c 0203 	add.w	r2, ip, #3
 800ecbc:	1b52      	subs	r2, r2, r5
 800ecbe:	f022 0203 	bic.w	r2, r2, #3
 800ecc2:	3d03      	subs	r5, #3
 800ecc4:	45ac      	cmp	ip, r5
 800ecc6:	bf38      	it	cc
 800ecc8:	2200      	movcc	r2, #0
 800ecca:	4413      	add	r3, r2
 800eccc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ecd0:	b17a      	cbz	r2, 800ecf2 <__mdiff+0x106>
 800ecd2:	6107      	str	r7, [r0, #16]
 800ecd4:	e7a4      	b.n	800ec20 <__mdiff+0x34>
 800ecd6:	f856 8b04 	ldr.w	r8, [r6], #4
 800ecda:	fa11 f288 	uxtah	r2, r1, r8
 800ecde:	1414      	asrs	r4, r2, #16
 800ece0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ece4:	b292      	uxth	r2, r2
 800ece6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ecea:	f84e 2b04 	str.w	r2, [lr], #4
 800ecee:	1421      	asrs	r1, r4, #16
 800ecf0:	e7e0      	b.n	800ecb4 <__mdiff+0xc8>
 800ecf2:	3f01      	subs	r7, #1
 800ecf4:	e7ea      	b.n	800eccc <__mdiff+0xe0>
 800ecf6:	bf00      	nop
 800ecf8:	0800f9f4 	.word	0x0800f9f4
 800ecfc:	0800fa05 	.word	0x0800fa05

0800ed00 <__d2b>:
 800ed00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ed04:	460f      	mov	r7, r1
 800ed06:	2101      	movs	r1, #1
 800ed08:	ec59 8b10 	vmov	r8, r9, d0
 800ed0c:	4616      	mov	r6, r2
 800ed0e:	f7ff fcd5 	bl	800e6bc <_Balloc>
 800ed12:	4604      	mov	r4, r0
 800ed14:	b930      	cbnz	r0, 800ed24 <__d2b+0x24>
 800ed16:	4602      	mov	r2, r0
 800ed18:	4b24      	ldr	r3, [pc, #144]	; (800edac <__d2b+0xac>)
 800ed1a:	4825      	ldr	r0, [pc, #148]	; (800edb0 <__d2b+0xb0>)
 800ed1c:	f240 310f 	movw	r1, #783	; 0x30f
 800ed20:	f000 fa86 	bl	800f230 <__assert_func>
 800ed24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ed28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed2c:	bb2d      	cbnz	r5, 800ed7a <__d2b+0x7a>
 800ed2e:	9301      	str	r3, [sp, #4]
 800ed30:	f1b8 0300 	subs.w	r3, r8, #0
 800ed34:	d026      	beq.n	800ed84 <__d2b+0x84>
 800ed36:	4668      	mov	r0, sp
 800ed38:	9300      	str	r3, [sp, #0]
 800ed3a:	f7ff fd87 	bl	800e84c <__lo0bits>
 800ed3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ed42:	b1e8      	cbz	r0, 800ed80 <__d2b+0x80>
 800ed44:	f1c0 0320 	rsb	r3, r0, #32
 800ed48:	fa02 f303 	lsl.w	r3, r2, r3
 800ed4c:	430b      	orrs	r3, r1
 800ed4e:	40c2      	lsrs	r2, r0
 800ed50:	6163      	str	r3, [r4, #20]
 800ed52:	9201      	str	r2, [sp, #4]
 800ed54:	9b01      	ldr	r3, [sp, #4]
 800ed56:	61a3      	str	r3, [r4, #24]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	bf14      	ite	ne
 800ed5c:	2202      	movne	r2, #2
 800ed5e:	2201      	moveq	r2, #1
 800ed60:	6122      	str	r2, [r4, #16]
 800ed62:	b1bd      	cbz	r5, 800ed94 <__d2b+0x94>
 800ed64:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ed68:	4405      	add	r5, r0
 800ed6a:	603d      	str	r5, [r7, #0]
 800ed6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ed70:	6030      	str	r0, [r6, #0]
 800ed72:	4620      	mov	r0, r4
 800ed74:	b003      	add	sp, #12
 800ed76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed7e:	e7d6      	b.n	800ed2e <__d2b+0x2e>
 800ed80:	6161      	str	r1, [r4, #20]
 800ed82:	e7e7      	b.n	800ed54 <__d2b+0x54>
 800ed84:	a801      	add	r0, sp, #4
 800ed86:	f7ff fd61 	bl	800e84c <__lo0bits>
 800ed8a:	9b01      	ldr	r3, [sp, #4]
 800ed8c:	6163      	str	r3, [r4, #20]
 800ed8e:	3020      	adds	r0, #32
 800ed90:	2201      	movs	r2, #1
 800ed92:	e7e5      	b.n	800ed60 <__d2b+0x60>
 800ed94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ed9c:	6038      	str	r0, [r7, #0]
 800ed9e:	6918      	ldr	r0, [r3, #16]
 800eda0:	f7ff fd34 	bl	800e80c <__hi0bits>
 800eda4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eda8:	e7e2      	b.n	800ed70 <__d2b+0x70>
 800edaa:	bf00      	nop
 800edac:	0800f9f4 	.word	0x0800f9f4
 800edb0:	0800fa05 	.word	0x0800fa05

0800edb4 <__ssputs_r>:
 800edb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edb8:	688e      	ldr	r6, [r1, #8]
 800edba:	461f      	mov	r7, r3
 800edbc:	42be      	cmp	r6, r7
 800edbe:	680b      	ldr	r3, [r1, #0]
 800edc0:	4682      	mov	sl, r0
 800edc2:	460c      	mov	r4, r1
 800edc4:	4690      	mov	r8, r2
 800edc6:	d82c      	bhi.n	800ee22 <__ssputs_r+0x6e>
 800edc8:	898a      	ldrh	r2, [r1, #12]
 800edca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800edce:	d026      	beq.n	800ee1e <__ssputs_r+0x6a>
 800edd0:	6965      	ldr	r5, [r4, #20]
 800edd2:	6909      	ldr	r1, [r1, #16]
 800edd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800edd8:	eba3 0901 	sub.w	r9, r3, r1
 800eddc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ede0:	1c7b      	adds	r3, r7, #1
 800ede2:	444b      	add	r3, r9
 800ede4:	106d      	asrs	r5, r5, #1
 800ede6:	429d      	cmp	r5, r3
 800ede8:	bf38      	it	cc
 800edea:	461d      	movcc	r5, r3
 800edec:	0553      	lsls	r3, r2, #21
 800edee:	d527      	bpl.n	800ee40 <__ssputs_r+0x8c>
 800edf0:	4629      	mov	r1, r5
 800edf2:	f7ff fbd7 	bl	800e5a4 <_malloc_r>
 800edf6:	4606      	mov	r6, r0
 800edf8:	b360      	cbz	r0, 800ee54 <__ssputs_r+0xa0>
 800edfa:	6921      	ldr	r1, [r4, #16]
 800edfc:	464a      	mov	r2, r9
 800edfe:	f000 fa09 	bl	800f214 <memcpy>
 800ee02:	89a3      	ldrh	r3, [r4, #12]
 800ee04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ee08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee0c:	81a3      	strh	r3, [r4, #12]
 800ee0e:	6126      	str	r6, [r4, #16]
 800ee10:	6165      	str	r5, [r4, #20]
 800ee12:	444e      	add	r6, r9
 800ee14:	eba5 0509 	sub.w	r5, r5, r9
 800ee18:	6026      	str	r6, [r4, #0]
 800ee1a:	60a5      	str	r5, [r4, #8]
 800ee1c:	463e      	mov	r6, r7
 800ee1e:	42be      	cmp	r6, r7
 800ee20:	d900      	bls.n	800ee24 <__ssputs_r+0x70>
 800ee22:	463e      	mov	r6, r7
 800ee24:	6820      	ldr	r0, [r4, #0]
 800ee26:	4632      	mov	r2, r6
 800ee28:	4641      	mov	r1, r8
 800ee2a:	f000 f9c9 	bl	800f1c0 <memmove>
 800ee2e:	68a3      	ldr	r3, [r4, #8]
 800ee30:	1b9b      	subs	r3, r3, r6
 800ee32:	60a3      	str	r3, [r4, #8]
 800ee34:	6823      	ldr	r3, [r4, #0]
 800ee36:	4433      	add	r3, r6
 800ee38:	6023      	str	r3, [r4, #0]
 800ee3a:	2000      	movs	r0, #0
 800ee3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee40:	462a      	mov	r2, r5
 800ee42:	f000 fa3b 	bl	800f2bc <_realloc_r>
 800ee46:	4606      	mov	r6, r0
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	d1e0      	bne.n	800ee0e <__ssputs_r+0x5a>
 800ee4c:	6921      	ldr	r1, [r4, #16]
 800ee4e:	4650      	mov	r0, sl
 800ee50:	f7ff fb34 	bl	800e4bc <_free_r>
 800ee54:	230c      	movs	r3, #12
 800ee56:	f8ca 3000 	str.w	r3, [sl]
 800ee5a:	89a3      	ldrh	r3, [r4, #12]
 800ee5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee60:	81a3      	strh	r3, [r4, #12]
 800ee62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee66:	e7e9      	b.n	800ee3c <__ssputs_r+0x88>

0800ee68 <_svfiprintf_r>:
 800ee68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee6c:	4698      	mov	r8, r3
 800ee6e:	898b      	ldrh	r3, [r1, #12]
 800ee70:	061b      	lsls	r3, r3, #24
 800ee72:	b09d      	sub	sp, #116	; 0x74
 800ee74:	4607      	mov	r7, r0
 800ee76:	460d      	mov	r5, r1
 800ee78:	4614      	mov	r4, r2
 800ee7a:	d50e      	bpl.n	800ee9a <_svfiprintf_r+0x32>
 800ee7c:	690b      	ldr	r3, [r1, #16]
 800ee7e:	b963      	cbnz	r3, 800ee9a <_svfiprintf_r+0x32>
 800ee80:	2140      	movs	r1, #64	; 0x40
 800ee82:	f7ff fb8f 	bl	800e5a4 <_malloc_r>
 800ee86:	6028      	str	r0, [r5, #0]
 800ee88:	6128      	str	r0, [r5, #16]
 800ee8a:	b920      	cbnz	r0, 800ee96 <_svfiprintf_r+0x2e>
 800ee8c:	230c      	movs	r3, #12
 800ee8e:	603b      	str	r3, [r7, #0]
 800ee90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee94:	e0d0      	b.n	800f038 <_svfiprintf_r+0x1d0>
 800ee96:	2340      	movs	r3, #64	; 0x40
 800ee98:	616b      	str	r3, [r5, #20]
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ee9e:	2320      	movs	r3, #32
 800eea0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eea4:	f8cd 800c 	str.w	r8, [sp, #12]
 800eea8:	2330      	movs	r3, #48	; 0x30
 800eeaa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f050 <_svfiprintf_r+0x1e8>
 800eeae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eeb2:	f04f 0901 	mov.w	r9, #1
 800eeb6:	4623      	mov	r3, r4
 800eeb8:	469a      	mov	sl, r3
 800eeba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eebe:	b10a      	cbz	r2, 800eec4 <_svfiprintf_r+0x5c>
 800eec0:	2a25      	cmp	r2, #37	; 0x25
 800eec2:	d1f9      	bne.n	800eeb8 <_svfiprintf_r+0x50>
 800eec4:	ebba 0b04 	subs.w	fp, sl, r4
 800eec8:	d00b      	beq.n	800eee2 <_svfiprintf_r+0x7a>
 800eeca:	465b      	mov	r3, fp
 800eecc:	4622      	mov	r2, r4
 800eece:	4629      	mov	r1, r5
 800eed0:	4638      	mov	r0, r7
 800eed2:	f7ff ff6f 	bl	800edb4 <__ssputs_r>
 800eed6:	3001      	adds	r0, #1
 800eed8:	f000 80a9 	beq.w	800f02e <_svfiprintf_r+0x1c6>
 800eedc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eede:	445a      	add	r2, fp
 800eee0:	9209      	str	r2, [sp, #36]	; 0x24
 800eee2:	f89a 3000 	ldrb.w	r3, [sl]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f000 80a1 	beq.w	800f02e <_svfiprintf_r+0x1c6>
 800eeec:	2300      	movs	r3, #0
 800eeee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eef6:	f10a 0a01 	add.w	sl, sl, #1
 800eefa:	9304      	str	r3, [sp, #16]
 800eefc:	9307      	str	r3, [sp, #28]
 800eefe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef02:	931a      	str	r3, [sp, #104]	; 0x68
 800ef04:	4654      	mov	r4, sl
 800ef06:	2205      	movs	r2, #5
 800ef08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef0c:	4850      	ldr	r0, [pc, #320]	; (800f050 <_svfiprintf_r+0x1e8>)
 800ef0e:	f7f1 f967 	bl	80001e0 <memchr>
 800ef12:	9a04      	ldr	r2, [sp, #16]
 800ef14:	b9d8      	cbnz	r0, 800ef4e <_svfiprintf_r+0xe6>
 800ef16:	06d0      	lsls	r0, r2, #27
 800ef18:	bf44      	itt	mi
 800ef1a:	2320      	movmi	r3, #32
 800ef1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef20:	0711      	lsls	r1, r2, #28
 800ef22:	bf44      	itt	mi
 800ef24:	232b      	movmi	r3, #43	; 0x2b
 800ef26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ef2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ef30:	d015      	beq.n	800ef5e <_svfiprintf_r+0xf6>
 800ef32:	9a07      	ldr	r2, [sp, #28]
 800ef34:	4654      	mov	r4, sl
 800ef36:	2000      	movs	r0, #0
 800ef38:	f04f 0c0a 	mov.w	ip, #10
 800ef3c:	4621      	mov	r1, r4
 800ef3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef42:	3b30      	subs	r3, #48	; 0x30
 800ef44:	2b09      	cmp	r3, #9
 800ef46:	d94d      	bls.n	800efe4 <_svfiprintf_r+0x17c>
 800ef48:	b1b0      	cbz	r0, 800ef78 <_svfiprintf_r+0x110>
 800ef4a:	9207      	str	r2, [sp, #28]
 800ef4c:	e014      	b.n	800ef78 <_svfiprintf_r+0x110>
 800ef4e:	eba0 0308 	sub.w	r3, r0, r8
 800ef52:	fa09 f303 	lsl.w	r3, r9, r3
 800ef56:	4313      	orrs	r3, r2
 800ef58:	9304      	str	r3, [sp, #16]
 800ef5a:	46a2      	mov	sl, r4
 800ef5c:	e7d2      	b.n	800ef04 <_svfiprintf_r+0x9c>
 800ef5e:	9b03      	ldr	r3, [sp, #12]
 800ef60:	1d19      	adds	r1, r3, #4
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	9103      	str	r1, [sp, #12]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	bfbb      	ittet	lt
 800ef6a:	425b      	neglt	r3, r3
 800ef6c:	f042 0202 	orrlt.w	r2, r2, #2
 800ef70:	9307      	strge	r3, [sp, #28]
 800ef72:	9307      	strlt	r3, [sp, #28]
 800ef74:	bfb8      	it	lt
 800ef76:	9204      	strlt	r2, [sp, #16]
 800ef78:	7823      	ldrb	r3, [r4, #0]
 800ef7a:	2b2e      	cmp	r3, #46	; 0x2e
 800ef7c:	d10c      	bne.n	800ef98 <_svfiprintf_r+0x130>
 800ef7e:	7863      	ldrb	r3, [r4, #1]
 800ef80:	2b2a      	cmp	r3, #42	; 0x2a
 800ef82:	d134      	bne.n	800efee <_svfiprintf_r+0x186>
 800ef84:	9b03      	ldr	r3, [sp, #12]
 800ef86:	1d1a      	adds	r2, r3, #4
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	9203      	str	r2, [sp, #12]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	bfb8      	it	lt
 800ef90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ef94:	3402      	adds	r4, #2
 800ef96:	9305      	str	r3, [sp, #20]
 800ef98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f060 <_svfiprintf_r+0x1f8>
 800ef9c:	7821      	ldrb	r1, [r4, #0]
 800ef9e:	2203      	movs	r2, #3
 800efa0:	4650      	mov	r0, sl
 800efa2:	f7f1 f91d 	bl	80001e0 <memchr>
 800efa6:	b138      	cbz	r0, 800efb8 <_svfiprintf_r+0x150>
 800efa8:	9b04      	ldr	r3, [sp, #16]
 800efaa:	eba0 000a 	sub.w	r0, r0, sl
 800efae:	2240      	movs	r2, #64	; 0x40
 800efb0:	4082      	lsls	r2, r0
 800efb2:	4313      	orrs	r3, r2
 800efb4:	3401      	adds	r4, #1
 800efb6:	9304      	str	r3, [sp, #16]
 800efb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efbc:	4825      	ldr	r0, [pc, #148]	; (800f054 <_svfiprintf_r+0x1ec>)
 800efbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efc2:	2206      	movs	r2, #6
 800efc4:	f7f1 f90c 	bl	80001e0 <memchr>
 800efc8:	2800      	cmp	r0, #0
 800efca:	d038      	beq.n	800f03e <_svfiprintf_r+0x1d6>
 800efcc:	4b22      	ldr	r3, [pc, #136]	; (800f058 <_svfiprintf_r+0x1f0>)
 800efce:	bb1b      	cbnz	r3, 800f018 <_svfiprintf_r+0x1b0>
 800efd0:	9b03      	ldr	r3, [sp, #12]
 800efd2:	3307      	adds	r3, #7
 800efd4:	f023 0307 	bic.w	r3, r3, #7
 800efd8:	3308      	adds	r3, #8
 800efda:	9303      	str	r3, [sp, #12]
 800efdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efde:	4433      	add	r3, r6
 800efe0:	9309      	str	r3, [sp, #36]	; 0x24
 800efe2:	e768      	b.n	800eeb6 <_svfiprintf_r+0x4e>
 800efe4:	fb0c 3202 	mla	r2, ip, r2, r3
 800efe8:	460c      	mov	r4, r1
 800efea:	2001      	movs	r0, #1
 800efec:	e7a6      	b.n	800ef3c <_svfiprintf_r+0xd4>
 800efee:	2300      	movs	r3, #0
 800eff0:	3401      	adds	r4, #1
 800eff2:	9305      	str	r3, [sp, #20]
 800eff4:	4619      	mov	r1, r3
 800eff6:	f04f 0c0a 	mov.w	ip, #10
 800effa:	4620      	mov	r0, r4
 800effc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f000:	3a30      	subs	r2, #48	; 0x30
 800f002:	2a09      	cmp	r2, #9
 800f004:	d903      	bls.n	800f00e <_svfiprintf_r+0x1a6>
 800f006:	2b00      	cmp	r3, #0
 800f008:	d0c6      	beq.n	800ef98 <_svfiprintf_r+0x130>
 800f00a:	9105      	str	r1, [sp, #20]
 800f00c:	e7c4      	b.n	800ef98 <_svfiprintf_r+0x130>
 800f00e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f012:	4604      	mov	r4, r0
 800f014:	2301      	movs	r3, #1
 800f016:	e7f0      	b.n	800effa <_svfiprintf_r+0x192>
 800f018:	ab03      	add	r3, sp, #12
 800f01a:	9300      	str	r3, [sp, #0]
 800f01c:	462a      	mov	r2, r5
 800f01e:	4b0f      	ldr	r3, [pc, #60]	; (800f05c <_svfiprintf_r+0x1f4>)
 800f020:	a904      	add	r1, sp, #16
 800f022:	4638      	mov	r0, r7
 800f024:	f7fd fe50 	bl	800ccc8 <_printf_float>
 800f028:	1c42      	adds	r2, r0, #1
 800f02a:	4606      	mov	r6, r0
 800f02c:	d1d6      	bne.n	800efdc <_svfiprintf_r+0x174>
 800f02e:	89ab      	ldrh	r3, [r5, #12]
 800f030:	065b      	lsls	r3, r3, #25
 800f032:	f53f af2d 	bmi.w	800ee90 <_svfiprintf_r+0x28>
 800f036:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f038:	b01d      	add	sp, #116	; 0x74
 800f03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f03e:	ab03      	add	r3, sp, #12
 800f040:	9300      	str	r3, [sp, #0]
 800f042:	462a      	mov	r2, r5
 800f044:	4b05      	ldr	r3, [pc, #20]	; (800f05c <_svfiprintf_r+0x1f4>)
 800f046:	a904      	add	r1, sp, #16
 800f048:	4638      	mov	r0, r7
 800f04a:	f7fe f8e1 	bl	800d210 <_printf_i>
 800f04e:	e7eb      	b.n	800f028 <_svfiprintf_r+0x1c0>
 800f050:	0800fb5c 	.word	0x0800fb5c
 800f054:	0800fb66 	.word	0x0800fb66
 800f058:	0800ccc9 	.word	0x0800ccc9
 800f05c:	0800edb5 	.word	0x0800edb5
 800f060:	0800fb62 	.word	0x0800fb62

0800f064 <__sflush_r>:
 800f064:	898a      	ldrh	r2, [r1, #12]
 800f066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f06a:	4605      	mov	r5, r0
 800f06c:	0710      	lsls	r0, r2, #28
 800f06e:	460c      	mov	r4, r1
 800f070:	d458      	bmi.n	800f124 <__sflush_r+0xc0>
 800f072:	684b      	ldr	r3, [r1, #4]
 800f074:	2b00      	cmp	r3, #0
 800f076:	dc05      	bgt.n	800f084 <__sflush_r+0x20>
 800f078:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	dc02      	bgt.n	800f084 <__sflush_r+0x20>
 800f07e:	2000      	movs	r0, #0
 800f080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f086:	2e00      	cmp	r6, #0
 800f088:	d0f9      	beq.n	800f07e <__sflush_r+0x1a>
 800f08a:	2300      	movs	r3, #0
 800f08c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f090:	682f      	ldr	r7, [r5, #0]
 800f092:	6a21      	ldr	r1, [r4, #32]
 800f094:	602b      	str	r3, [r5, #0]
 800f096:	d032      	beq.n	800f0fe <__sflush_r+0x9a>
 800f098:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f09a:	89a3      	ldrh	r3, [r4, #12]
 800f09c:	075a      	lsls	r2, r3, #29
 800f09e:	d505      	bpl.n	800f0ac <__sflush_r+0x48>
 800f0a0:	6863      	ldr	r3, [r4, #4]
 800f0a2:	1ac0      	subs	r0, r0, r3
 800f0a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f0a6:	b10b      	cbz	r3, 800f0ac <__sflush_r+0x48>
 800f0a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0aa:	1ac0      	subs	r0, r0, r3
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0b2:	6a21      	ldr	r1, [r4, #32]
 800f0b4:	4628      	mov	r0, r5
 800f0b6:	47b0      	blx	r6
 800f0b8:	1c43      	adds	r3, r0, #1
 800f0ba:	89a3      	ldrh	r3, [r4, #12]
 800f0bc:	d106      	bne.n	800f0cc <__sflush_r+0x68>
 800f0be:	6829      	ldr	r1, [r5, #0]
 800f0c0:	291d      	cmp	r1, #29
 800f0c2:	d82b      	bhi.n	800f11c <__sflush_r+0xb8>
 800f0c4:	4a29      	ldr	r2, [pc, #164]	; (800f16c <__sflush_r+0x108>)
 800f0c6:	410a      	asrs	r2, r1
 800f0c8:	07d6      	lsls	r6, r2, #31
 800f0ca:	d427      	bmi.n	800f11c <__sflush_r+0xb8>
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	6062      	str	r2, [r4, #4]
 800f0d0:	04d9      	lsls	r1, r3, #19
 800f0d2:	6922      	ldr	r2, [r4, #16]
 800f0d4:	6022      	str	r2, [r4, #0]
 800f0d6:	d504      	bpl.n	800f0e2 <__sflush_r+0x7e>
 800f0d8:	1c42      	adds	r2, r0, #1
 800f0da:	d101      	bne.n	800f0e0 <__sflush_r+0x7c>
 800f0dc:	682b      	ldr	r3, [r5, #0]
 800f0de:	b903      	cbnz	r3, 800f0e2 <__sflush_r+0x7e>
 800f0e0:	6560      	str	r0, [r4, #84]	; 0x54
 800f0e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0e4:	602f      	str	r7, [r5, #0]
 800f0e6:	2900      	cmp	r1, #0
 800f0e8:	d0c9      	beq.n	800f07e <__sflush_r+0x1a>
 800f0ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0ee:	4299      	cmp	r1, r3
 800f0f0:	d002      	beq.n	800f0f8 <__sflush_r+0x94>
 800f0f2:	4628      	mov	r0, r5
 800f0f4:	f7ff f9e2 	bl	800e4bc <_free_r>
 800f0f8:	2000      	movs	r0, #0
 800f0fa:	6360      	str	r0, [r4, #52]	; 0x34
 800f0fc:	e7c0      	b.n	800f080 <__sflush_r+0x1c>
 800f0fe:	2301      	movs	r3, #1
 800f100:	4628      	mov	r0, r5
 800f102:	47b0      	blx	r6
 800f104:	1c41      	adds	r1, r0, #1
 800f106:	d1c8      	bne.n	800f09a <__sflush_r+0x36>
 800f108:	682b      	ldr	r3, [r5, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d0c5      	beq.n	800f09a <__sflush_r+0x36>
 800f10e:	2b1d      	cmp	r3, #29
 800f110:	d001      	beq.n	800f116 <__sflush_r+0xb2>
 800f112:	2b16      	cmp	r3, #22
 800f114:	d101      	bne.n	800f11a <__sflush_r+0xb6>
 800f116:	602f      	str	r7, [r5, #0]
 800f118:	e7b1      	b.n	800f07e <__sflush_r+0x1a>
 800f11a:	89a3      	ldrh	r3, [r4, #12]
 800f11c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f120:	81a3      	strh	r3, [r4, #12]
 800f122:	e7ad      	b.n	800f080 <__sflush_r+0x1c>
 800f124:	690f      	ldr	r7, [r1, #16]
 800f126:	2f00      	cmp	r7, #0
 800f128:	d0a9      	beq.n	800f07e <__sflush_r+0x1a>
 800f12a:	0793      	lsls	r3, r2, #30
 800f12c:	680e      	ldr	r6, [r1, #0]
 800f12e:	bf08      	it	eq
 800f130:	694b      	ldreq	r3, [r1, #20]
 800f132:	600f      	str	r7, [r1, #0]
 800f134:	bf18      	it	ne
 800f136:	2300      	movne	r3, #0
 800f138:	eba6 0807 	sub.w	r8, r6, r7
 800f13c:	608b      	str	r3, [r1, #8]
 800f13e:	f1b8 0f00 	cmp.w	r8, #0
 800f142:	dd9c      	ble.n	800f07e <__sflush_r+0x1a>
 800f144:	6a21      	ldr	r1, [r4, #32]
 800f146:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f148:	4643      	mov	r3, r8
 800f14a:	463a      	mov	r2, r7
 800f14c:	4628      	mov	r0, r5
 800f14e:	47b0      	blx	r6
 800f150:	2800      	cmp	r0, #0
 800f152:	dc06      	bgt.n	800f162 <__sflush_r+0xfe>
 800f154:	89a3      	ldrh	r3, [r4, #12]
 800f156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f15a:	81a3      	strh	r3, [r4, #12]
 800f15c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f160:	e78e      	b.n	800f080 <__sflush_r+0x1c>
 800f162:	4407      	add	r7, r0
 800f164:	eba8 0800 	sub.w	r8, r8, r0
 800f168:	e7e9      	b.n	800f13e <__sflush_r+0xda>
 800f16a:	bf00      	nop
 800f16c:	dfbffffe 	.word	0xdfbffffe

0800f170 <_fflush_r>:
 800f170:	b538      	push	{r3, r4, r5, lr}
 800f172:	690b      	ldr	r3, [r1, #16]
 800f174:	4605      	mov	r5, r0
 800f176:	460c      	mov	r4, r1
 800f178:	b913      	cbnz	r3, 800f180 <_fflush_r+0x10>
 800f17a:	2500      	movs	r5, #0
 800f17c:	4628      	mov	r0, r5
 800f17e:	bd38      	pop	{r3, r4, r5, pc}
 800f180:	b118      	cbz	r0, 800f18a <_fflush_r+0x1a>
 800f182:	6a03      	ldr	r3, [r0, #32]
 800f184:	b90b      	cbnz	r3, 800f18a <_fflush_r+0x1a>
 800f186:	f7fe f9f1 	bl	800d56c <__sinit>
 800f18a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d0f3      	beq.n	800f17a <_fflush_r+0xa>
 800f192:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f194:	07d0      	lsls	r0, r2, #31
 800f196:	d404      	bmi.n	800f1a2 <_fflush_r+0x32>
 800f198:	0599      	lsls	r1, r3, #22
 800f19a:	d402      	bmi.n	800f1a2 <_fflush_r+0x32>
 800f19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f19e:	f7fe fb10 	bl	800d7c2 <__retarget_lock_acquire_recursive>
 800f1a2:	4628      	mov	r0, r5
 800f1a4:	4621      	mov	r1, r4
 800f1a6:	f7ff ff5d 	bl	800f064 <__sflush_r>
 800f1aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1ac:	07da      	lsls	r2, r3, #31
 800f1ae:	4605      	mov	r5, r0
 800f1b0:	d4e4      	bmi.n	800f17c <_fflush_r+0xc>
 800f1b2:	89a3      	ldrh	r3, [r4, #12]
 800f1b4:	059b      	lsls	r3, r3, #22
 800f1b6:	d4e1      	bmi.n	800f17c <_fflush_r+0xc>
 800f1b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1ba:	f7fe fb03 	bl	800d7c4 <__retarget_lock_release_recursive>
 800f1be:	e7dd      	b.n	800f17c <_fflush_r+0xc>

0800f1c0 <memmove>:
 800f1c0:	4288      	cmp	r0, r1
 800f1c2:	b510      	push	{r4, lr}
 800f1c4:	eb01 0402 	add.w	r4, r1, r2
 800f1c8:	d902      	bls.n	800f1d0 <memmove+0x10>
 800f1ca:	4284      	cmp	r4, r0
 800f1cc:	4623      	mov	r3, r4
 800f1ce:	d807      	bhi.n	800f1e0 <memmove+0x20>
 800f1d0:	1e43      	subs	r3, r0, #1
 800f1d2:	42a1      	cmp	r1, r4
 800f1d4:	d008      	beq.n	800f1e8 <memmove+0x28>
 800f1d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f1de:	e7f8      	b.n	800f1d2 <memmove+0x12>
 800f1e0:	4402      	add	r2, r0
 800f1e2:	4601      	mov	r1, r0
 800f1e4:	428a      	cmp	r2, r1
 800f1e6:	d100      	bne.n	800f1ea <memmove+0x2a>
 800f1e8:	bd10      	pop	{r4, pc}
 800f1ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f1ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f1f2:	e7f7      	b.n	800f1e4 <memmove+0x24>

0800f1f4 <_sbrk_r>:
 800f1f4:	b538      	push	{r3, r4, r5, lr}
 800f1f6:	4d06      	ldr	r5, [pc, #24]	; (800f210 <_sbrk_r+0x1c>)
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	4604      	mov	r4, r0
 800f1fc:	4608      	mov	r0, r1
 800f1fe:	602b      	str	r3, [r5, #0]
 800f200:	f7f3 f82c 	bl	800225c <_sbrk>
 800f204:	1c43      	adds	r3, r0, #1
 800f206:	d102      	bne.n	800f20e <_sbrk_r+0x1a>
 800f208:	682b      	ldr	r3, [r5, #0]
 800f20a:	b103      	cbz	r3, 800f20e <_sbrk_r+0x1a>
 800f20c:	6023      	str	r3, [r4, #0]
 800f20e:	bd38      	pop	{r3, r4, r5, pc}
 800f210:	200022d0 	.word	0x200022d0

0800f214 <memcpy>:
 800f214:	440a      	add	r2, r1
 800f216:	4291      	cmp	r1, r2
 800f218:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f21c:	d100      	bne.n	800f220 <memcpy+0xc>
 800f21e:	4770      	bx	lr
 800f220:	b510      	push	{r4, lr}
 800f222:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f226:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f22a:	4291      	cmp	r1, r2
 800f22c:	d1f9      	bne.n	800f222 <memcpy+0xe>
 800f22e:	bd10      	pop	{r4, pc}

0800f230 <__assert_func>:
 800f230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f232:	4614      	mov	r4, r2
 800f234:	461a      	mov	r2, r3
 800f236:	4b09      	ldr	r3, [pc, #36]	; (800f25c <__assert_func+0x2c>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	4605      	mov	r5, r0
 800f23c:	68d8      	ldr	r0, [r3, #12]
 800f23e:	b14c      	cbz	r4, 800f254 <__assert_func+0x24>
 800f240:	4b07      	ldr	r3, [pc, #28]	; (800f260 <__assert_func+0x30>)
 800f242:	9100      	str	r1, [sp, #0]
 800f244:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f248:	4906      	ldr	r1, [pc, #24]	; (800f264 <__assert_func+0x34>)
 800f24a:	462b      	mov	r3, r5
 800f24c:	f000 f872 	bl	800f334 <fiprintf>
 800f250:	f000 f882 	bl	800f358 <abort>
 800f254:	4b04      	ldr	r3, [pc, #16]	; (800f268 <__assert_func+0x38>)
 800f256:	461c      	mov	r4, r3
 800f258:	e7f3      	b.n	800f242 <__assert_func+0x12>
 800f25a:	bf00      	nop
 800f25c:	20000178 	.word	0x20000178
 800f260:	0800fb77 	.word	0x0800fb77
 800f264:	0800fb84 	.word	0x0800fb84
 800f268:	0800fbb2 	.word	0x0800fbb2

0800f26c <_calloc_r>:
 800f26c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f26e:	fba1 2402 	umull	r2, r4, r1, r2
 800f272:	b94c      	cbnz	r4, 800f288 <_calloc_r+0x1c>
 800f274:	4611      	mov	r1, r2
 800f276:	9201      	str	r2, [sp, #4]
 800f278:	f7ff f994 	bl	800e5a4 <_malloc_r>
 800f27c:	9a01      	ldr	r2, [sp, #4]
 800f27e:	4605      	mov	r5, r0
 800f280:	b930      	cbnz	r0, 800f290 <_calloc_r+0x24>
 800f282:	4628      	mov	r0, r5
 800f284:	b003      	add	sp, #12
 800f286:	bd30      	pop	{r4, r5, pc}
 800f288:	220c      	movs	r2, #12
 800f28a:	6002      	str	r2, [r0, #0]
 800f28c:	2500      	movs	r5, #0
 800f28e:	e7f8      	b.n	800f282 <_calloc_r+0x16>
 800f290:	4621      	mov	r1, r4
 800f292:	f7fe fa18 	bl	800d6c6 <memset>
 800f296:	e7f4      	b.n	800f282 <_calloc_r+0x16>

0800f298 <__ascii_mbtowc>:
 800f298:	b082      	sub	sp, #8
 800f29a:	b901      	cbnz	r1, 800f29e <__ascii_mbtowc+0x6>
 800f29c:	a901      	add	r1, sp, #4
 800f29e:	b142      	cbz	r2, 800f2b2 <__ascii_mbtowc+0x1a>
 800f2a0:	b14b      	cbz	r3, 800f2b6 <__ascii_mbtowc+0x1e>
 800f2a2:	7813      	ldrb	r3, [r2, #0]
 800f2a4:	600b      	str	r3, [r1, #0]
 800f2a6:	7812      	ldrb	r2, [r2, #0]
 800f2a8:	1e10      	subs	r0, r2, #0
 800f2aa:	bf18      	it	ne
 800f2ac:	2001      	movne	r0, #1
 800f2ae:	b002      	add	sp, #8
 800f2b0:	4770      	bx	lr
 800f2b2:	4610      	mov	r0, r2
 800f2b4:	e7fb      	b.n	800f2ae <__ascii_mbtowc+0x16>
 800f2b6:	f06f 0001 	mvn.w	r0, #1
 800f2ba:	e7f8      	b.n	800f2ae <__ascii_mbtowc+0x16>

0800f2bc <_realloc_r>:
 800f2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2c0:	4680      	mov	r8, r0
 800f2c2:	4614      	mov	r4, r2
 800f2c4:	460e      	mov	r6, r1
 800f2c6:	b921      	cbnz	r1, 800f2d2 <_realloc_r+0x16>
 800f2c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2cc:	4611      	mov	r1, r2
 800f2ce:	f7ff b969 	b.w	800e5a4 <_malloc_r>
 800f2d2:	b92a      	cbnz	r2, 800f2e0 <_realloc_r+0x24>
 800f2d4:	f7ff f8f2 	bl	800e4bc <_free_r>
 800f2d8:	4625      	mov	r5, r4
 800f2da:	4628      	mov	r0, r5
 800f2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2e0:	f000 f841 	bl	800f366 <_malloc_usable_size_r>
 800f2e4:	4284      	cmp	r4, r0
 800f2e6:	4607      	mov	r7, r0
 800f2e8:	d802      	bhi.n	800f2f0 <_realloc_r+0x34>
 800f2ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f2ee:	d812      	bhi.n	800f316 <_realloc_r+0x5a>
 800f2f0:	4621      	mov	r1, r4
 800f2f2:	4640      	mov	r0, r8
 800f2f4:	f7ff f956 	bl	800e5a4 <_malloc_r>
 800f2f8:	4605      	mov	r5, r0
 800f2fa:	2800      	cmp	r0, #0
 800f2fc:	d0ed      	beq.n	800f2da <_realloc_r+0x1e>
 800f2fe:	42bc      	cmp	r4, r7
 800f300:	4622      	mov	r2, r4
 800f302:	4631      	mov	r1, r6
 800f304:	bf28      	it	cs
 800f306:	463a      	movcs	r2, r7
 800f308:	f7ff ff84 	bl	800f214 <memcpy>
 800f30c:	4631      	mov	r1, r6
 800f30e:	4640      	mov	r0, r8
 800f310:	f7ff f8d4 	bl	800e4bc <_free_r>
 800f314:	e7e1      	b.n	800f2da <_realloc_r+0x1e>
 800f316:	4635      	mov	r5, r6
 800f318:	e7df      	b.n	800f2da <_realloc_r+0x1e>

0800f31a <__ascii_wctomb>:
 800f31a:	b149      	cbz	r1, 800f330 <__ascii_wctomb+0x16>
 800f31c:	2aff      	cmp	r2, #255	; 0xff
 800f31e:	bf85      	ittet	hi
 800f320:	238a      	movhi	r3, #138	; 0x8a
 800f322:	6003      	strhi	r3, [r0, #0]
 800f324:	700a      	strbls	r2, [r1, #0]
 800f326:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f32a:	bf98      	it	ls
 800f32c:	2001      	movls	r0, #1
 800f32e:	4770      	bx	lr
 800f330:	4608      	mov	r0, r1
 800f332:	4770      	bx	lr

0800f334 <fiprintf>:
 800f334:	b40e      	push	{r1, r2, r3}
 800f336:	b503      	push	{r0, r1, lr}
 800f338:	4601      	mov	r1, r0
 800f33a:	ab03      	add	r3, sp, #12
 800f33c:	4805      	ldr	r0, [pc, #20]	; (800f354 <fiprintf+0x20>)
 800f33e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f342:	6800      	ldr	r0, [r0, #0]
 800f344:	9301      	str	r3, [sp, #4]
 800f346:	f000 f83f 	bl	800f3c8 <_vfiprintf_r>
 800f34a:	b002      	add	sp, #8
 800f34c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f350:	b003      	add	sp, #12
 800f352:	4770      	bx	lr
 800f354:	20000178 	.word	0x20000178

0800f358 <abort>:
 800f358:	b508      	push	{r3, lr}
 800f35a:	2006      	movs	r0, #6
 800f35c:	f000 fa0c 	bl	800f778 <raise>
 800f360:	2001      	movs	r0, #1
 800f362:	f7f2 ff03 	bl	800216c <_exit>

0800f366 <_malloc_usable_size_r>:
 800f366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f36a:	1f18      	subs	r0, r3, #4
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	bfbc      	itt	lt
 800f370:	580b      	ldrlt	r3, [r1, r0]
 800f372:	18c0      	addlt	r0, r0, r3
 800f374:	4770      	bx	lr

0800f376 <__sfputc_r>:
 800f376:	6893      	ldr	r3, [r2, #8]
 800f378:	3b01      	subs	r3, #1
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	b410      	push	{r4}
 800f37e:	6093      	str	r3, [r2, #8]
 800f380:	da08      	bge.n	800f394 <__sfputc_r+0x1e>
 800f382:	6994      	ldr	r4, [r2, #24]
 800f384:	42a3      	cmp	r3, r4
 800f386:	db01      	blt.n	800f38c <__sfputc_r+0x16>
 800f388:	290a      	cmp	r1, #10
 800f38a:	d103      	bne.n	800f394 <__sfputc_r+0x1e>
 800f38c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f390:	f000 b934 	b.w	800f5fc <__swbuf_r>
 800f394:	6813      	ldr	r3, [r2, #0]
 800f396:	1c58      	adds	r0, r3, #1
 800f398:	6010      	str	r0, [r2, #0]
 800f39a:	7019      	strb	r1, [r3, #0]
 800f39c:	4608      	mov	r0, r1
 800f39e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3a2:	4770      	bx	lr

0800f3a4 <__sfputs_r>:
 800f3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3a6:	4606      	mov	r6, r0
 800f3a8:	460f      	mov	r7, r1
 800f3aa:	4614      	mov	r4, r2
 800f3ac:	18d5      	adds	r5, r2, r3
 800f3ae:	42ac      	cmp	r4, r5
 800f3b0:	d101      	bne.n	800f3b6 <__sfputs_r+0x12>
 800f3b2:	2000      	movs	r0, #0
 800f3b4:	e007      	b.n	800f3c6 <__sfputs_r+0x22>
 800f3b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3ba:	463a      	mov	r2, r7
 800f3bc:	4630      	mov	r0, r6
 800f3be:	f7ff ffda 	bl	800f376 <__sfputc_r>
 800f3c2:	1c43      	adds	r3, r0, #1
 800f3c4:	d1f3      	bne.n	800f3ae <__sfputs_r+0xa>
 800f3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f3c8 <_vfiprintf_r>:
 800f3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3cc:	460d      	mov	r5, r1
 800f3ce:	b09d      	sub	sp, #116	; 0x74
 800f3d0:	4614      	mov	r4, r2
 800f3d2:	4698      	mov	r8, r3
 800f3d4:	4606      	mov	r6, r0
 800f3d6:	b118      	cbz	r0, 800f3e0 <_vfiprintf_r+0x18>
 800f3d8:	6a03      	ldr	r3, [r0, #32]
 800f3da:	b90b      	cbnz	r3, 800f3e0 <_vfiprintf_r+0x18>
 800f3dc:	f7fe f8c6 	bl	800d56c <__sinit>
 800f3e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3e2:	07d9      	lsls	r1, r3, #31
 800f3e4:	d405      	bmi.n	800f3f2 <_vfiprintf_r+0x2a>
 800f3e6:	89ab      	ldrh	r3, [r5, #12]
 800f3e8:	059a      	lsls	r2, r3, #22
 800f3ea:	d402      	bmi.n	800f3f2 <_vfiprintf_r+0x2a>
 800f3ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3ee:	f7fe f9e8 	bl	800d7c2 <__retarget_lock_acquire_recursive>
 800f3f2:	89ab      	ldrh	r3, [r5, #12]
 800f3f4:	071b      	lsls	r3, r3, #28
 800f3f6:	d501      	bpl.n	800f3fc <_vfiprintf_r+0x34>
 800f3f8:	692b      	ldr	r3, [r5, #16]
 800f3fa:	b99b      	cbnz	r3, 800f424 <_vfiprintf_r+0x5c>
 800f3fc:	4629      	mov	r1, r5
 800f3fe:	4630      	mov	r0, r6
 800f400:	f000 f93a 	bl	800f678 <__swsetup_r>
 800f404:	b170      	cbz	r0, 800f424 <_vfiprintf_r+0x5c>
 800f406:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f408:	07dc      	lsls	r4, r3, #31
 800f40a:	d504      	bpl.n	800f416 <_vfiprintf_r+0x4e>
 800f40c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f410:	b01d      	add	sp, #116	; 0x74
 800f412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f416:	89ab      	ldrh	r3, [r5, #12]
 800f418:	0598      	lsls	r0, r3, #22
 800f41a:	d4f7      	bmi.n	800f40c <_vfiprintf_r+0x44>
 800f41c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f41e:	f7fe f9d1 	bl	800d7c4 <__retarget_lock_release_recursive>
 800f422:	e7f3      	b.n	800f40c <_vfiprintf_r+0x44>
 800f424:	2300      	movs	r3, #0
 800f426:	9309      	str	r3, [sp, #36]	; 0x24
 800f428:	2320      	movs	r3, #32
 800f42a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f42e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f432:	2330      	movs	r3, #48	; 0x30
 800f434:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f5e8 <_vfiprintf_r+0x220>
 800f438:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f43c:	f04f 0901 	mov.w	r9, #1
 800f440:	4623      	mov	r3, r4
 800f442:	469a      	mov	sl, r3
 800f444:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f448:	b10a      	cbz	r2, 800f44e <_vfiprintf_r+0x86>
 800f44a:	2a25      	cmp	r2, #37	; 0x25
 800f44c:	d1f9      	bne.n	800f442 <_vfiprintf_r+0x7a>
 800f44e:	ebba 0b04 	subs.w	fp, sl, r4
 800f452:	d00b      	beq.n	800f46c <_vfiprintf_r+0xa4>
 800f454:	465b      	mov	r3, fp
 800f456:	4622      	mov	r2, r4
 800f458:	4629      	mov	r1, r5
 800f45a:	4630      	mov	r0, r6
 800f45c:	f7ff ffa2 	bl	800f3a4 <__sfputs_r>
 800f460:	3001      	adds	r0, #1
 800f462:	f000 80a9 	beq.w	800f5b8 <_vfiprintf_r+0x1f0>
 800f466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f468:	445a      	add	r2, fp
 800f46a:	9209      	str	r2, [sp, #36]	; 0x24
 800f46c:	f89a 3000 	ldrb.w	r3, [sl]
 800f470:	2b00      	cmp	r3, #0
 800f472:	f000 80a1 	beq.w	800f5b8 <_vfiprintf_r+0x1f0>
 800f476:	2300      	movs	r3, #0
 800f478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f47c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f480:	f10a 0a01 	add.w	sl, sl, #1
 800f484:	9304      	str	r3, [sp, #16]
 800f486:	9307      	str	r3, [sp, #28]
 800f488:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f48c:	931a      	str	r3, [sp, #104]	; 0x68
 800f48e:	4654      	mov	r4, sl
 800f490:	2205      	movs	r2, #5
 800f492:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f496:	4854      	ldr	r0, [pc, #336]	; (800f5e8 <_vfiprintf_r+0x220>)
 800f498:	f7f0 fea2 	bl	80001e0 <memchr>
 800f49c:	9a04      	ldr	r2, [sp, #16]
 800f49e:	b9d8      	cbnz	r0, 800f4d8 <_vfiprintf_r+0x110>
 800f4a0:	06d1      	lsls	r1, r2, #27
 800f4a2:	bf44      	itt	mi
 800f4a4:	2320      	movmi	r3, #32
 800f4a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4aa:	0713      	lsls	r3, r2, #28
 800f4ac:	bf44      	itt	mi
 800f4ae:	232b      	movmi	r3, #43	; 0x2b
 800f4b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4b4:	f89a 3000 	ldrb.w	r3, [sl]
 800f4b8:	2b2a      	cmp	r3, #42	; 0x2a
 800f4ba:	d015      	beq.n	800f4e8 <_vfiprintf_r+0x120>
 800f4bc:	9a07      	ldr	r2, [sp, #28]
 800f4be:	4654      	mov	r4, sl
 800f4c0:	2000      	movs	r0, #0
 800f4c2:	f04f 0c0a 	mov.w	ip, #10
 800f4c6:	4621      	mov	r1, r4
 800f4c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4cc:	3b30      	subs	r3, #48	; 0x30
 800f4ce:	2b09      	cmp	r3, #9
 800f4d0:	d94d      	bls.n	800f56e <_vfiprintf_r+0x1a6>
 800f4d2:	b1b0      	cbz	r0, 800f502 <_vfiprintf_r+0x13a>
 800f4d4:	9207      	str	r2, [sp, #28]
 800f4d6:	e014      	b.n	800f502 <_vfiprintf_r+0x13a>
 800f4d8:	eba0 0308 	sub.w	r3, r0, r8
 800f4dc:	fa09 f303 	lsl.w	r3, r9, r3
 800f4e0:	4313      	orrs	r3, r2
 800f4e2:	9304      	str	r3, [sp, #16]
 800f4e4:	46a2      	mov	sl, r4
 800f4e6:	e7d2      	b.n	800f48e <_vfiprintf_r+0xc6>
 800f4e8:	9b03      	ldr	r3, [sp, #12]
 800f4ea:	1d19      	adds	r1, r3, #4
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	9103      	str	r1, [sp, #12]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	bfbb      	ittet	lt
 800f4f4:	425b      	neglt	r3, r3
 800f4f6:	f042 0202 	orrlt.w	r2, r2, #2
 800f4fa:	9307      	strge	r3, [sp, #28]
 800f4fc:	9307      	strlt	r3, [sp, #28]
 800f4fe:	bfb8      	it	lt
 800f500:	9204      	strlt	r2, [sp, #16]
 800f502:	7823      	ldrb	r3, [r4, #0]
 800f504:	2b2e      	cmp	r3, #46	; 0x2e
 800f506:	d10c      	bne.n	800f522 <_vfiprintf_r+0x15a>
 800f508:	7863      	ldrb	r3, [r4, #1]
 800f50a:	2b2a      	cmp	r3, #42	; 0x2a
 800f50c:	d134      	bne.n	800f578 <_vfiprintf_r+0x1b0>
 800f50e:	9b03      	ldr	r3, [sp, #12]
 800f510:	1d1a      	adds	r2, r3, #4
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	9203      	str	r2, [sp, #12]
 800f516:	2b00      	cmp	r3, #0
 800f518:	bfb8      	it	lt
 800f51a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f51e:	3402      	adds	r4, #2
 800f520:	9305      	str	r3, [sp, #20]
 800f522:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f5f8 <_vfiprintf_r+0x230>
 800f526:	7821      	ldrb	r1, [r4, #0]
 800f528:	2203      	movs	r2, #3
 800f52a:	4650      	mov	r0, sl
 800f52c:	f7f0 fe58 	bl	80001e0 <memchr>
 800f530:	b138      	cbz	r0, 800f542 <_vfiprintf_r+0x17a>
 800f532:	9b04      	ldr	r3, [sp, #16]
 800f534:	eba0 000a 	sub.w	r0, r0, sl
 800f538:	2240      	movs	r2, #64	; 0x40
 800f53a:	4082      	lsls	r2, r0
 800f53c:	4313      	orrs	r3, r2
 800f53e:	3401      	adds	r4, #1
 800f540:	9304      	str	r3, [sp, #16]
 800f542:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f546:	4829      	ldr	r0, [pc, #164]	; (800f5ec <_vfiprintf_r+0x224>)
 800f548:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f54c:	2206      	movs	r2, #6
 800f54e:	f7f0 fe47 	bl	80001e0 <memchr>
 800f552:	2800      	cmp	r0, #0
 800f554:	d03f      	beq.n	800f5d6 <_vfiprintf_r+0x20e>
 800f556:	4b26      	ldr	r3, [pc, #152]	; (800f5f0 <_vfiprintf_r+0x228>)
 800f558:	bb1b      	cbnz	r3, 800f5a2 <_vfiprintf_r+0x1da>
 800f55a:	9b03      	ldr	r3, [sp, #12]
 800f55c:	3307      	adds	r3, #7
 800f55e:	f023 0307 	bic.w	r3, r3, #7
 800f562:	3308      	adds	r3, #8
 800f564:	9303      	str	r3, [sp, #12]
 800f566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f568:	443b      	add	r3, r7
 800f56a:	9309      	str	r3, [sp, #36]	; 0x24
 800f56c:	e768      	b.n	800f440 <_vfiprintf_r+0x78>
 800f56e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f572:	460c      	mov	r4, r1
 800f574:	2001      	movs	r0, #1
 800f576:	e7a6      	b.n	800f4c6 <_vfiprintf_r+0xfe>
 800f578:	2300      	movs	r3, #0
 800f57a:	3401      	adds	r4, #1
 800f57c:	9305      	str	r3, [sp, #20]
 800f57e:	4619      	mov	r1, r3
 800f580:	f04f 0c0a 	mov.w	ip, #10
 800f584:	4620      	mov	r0, r4
 800f586:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f58a:	3a30      	subs	r2, #48	; 0x30
 800f58c:	2a09      	cmp	r2, #9
 800f58e:	d903      	bls.n	800f598 <_vfiprintf_r+0x1d0>
 800f590:	2b00      	cmp	r3, #0
 800f592:	d0c6      	beq.n	800f522 <_vfiprintf_r+0x15a>
 800f594:	9105      	str	r1, [sp, #20]
 800f596:	e7c4      	b.n	800f522 <_vfiprintf_r+0x15a>
 800f598:	fb0c 2101 	mla	r1, ip, r1, r2
 800f59c:	4604      	mov	r4, r0
 800f59e:	2301      	movs	r3, #1
 800f5a0:	e7f0      	b.n	800f584 <_vfiprintf_r+0x1bc>
 800f5a2:	ab03      	add	r3, sp, #12
 800f5a4:	9300      	str	r3, [sp, #0]
 800f5a6:	462a      	mov	r2, r5
 800f5a8:	4b12      	ldr	r3, [pc, #72]	; (800f5f4 <_vfiprintf_r+0x22c>)
 800f5aa:	a904      	add	r1, sp, #16
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	f7fd fb8b 	bl	800ccc8 <_printf_float>
 800f5b2:	4607      	mov	r7, r0
 800f5b4:	1c78      	adds	r0, r7, #1
 800f5b6:	d1d6      	bne.n	800f566 <_vfiprintf_r+0x19e>
 800f5b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5ba:	07d9      	lsls	r1, r3, #31
 800f5bc:	d405      	bmi.n	800f5ca <_vfiprintf_r+0x202>
 800f5be:	89ab      	ldrh	r3, [r5, #12]
 800f5c0:	059a      	lsls	r2, r3, #22
 800f5c2:	d402      	bmi.n	800f5ca <_vfiprintf_r+0x202>
 800f5c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5c6:	f7fe f8fd 	bl	800d7c4 <__retarget_lock_release_recursive>
 800f5ca:	89ab      	ldrh	r3, [r5, #12]
 800f5cc:	065b      	lsls	r3, r3, #25
 800f5ce:	f53f af1d 	bmi.w	800f40c <_vfiprintf_r+0x44>
 800f5d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5d4:	e71c      	b.n	800f410 <_vfiprintf_r+0x48>
 800f5d6:	ab03      	add	r3, sp, #12
 800f5d8:	9300      	str	r3, [sp, #0]
 800f5da:	462a      	mov	r2, r5
 800f5dc:	4b05      	ldr	r3, [pc, #20]	; (800f5f4 <_vfiprintf_r+0x22c>)
 800f5de:	a904      	add	r1, sp, #16
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	f7fd fe15 	bl	800d210 <_printf_i>
 800f5e6:	e7e4      	b.n	800f5b2 <_vfiprintf_r+0x1ea>
 800f5e8:	0800fb5c 	.word	0x0800fb5c
 800f5ec:	0800fb66 	.word	0x0800fb66
 800f5f0:	0800ccc9 	.word	0x0800ccc9
 800f5f4:	0800f3a5 	.word	0x0800f3a5
 800f5f8:	0800fb62 	.word	0x0800fb62

0800f5fc <__swbuf_r>:
 800f5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5fe:	460e      	mov	r6, r1
 800f600:	4614      	mov	r4, r2
 800f602:	4605      	mov	r5, r0
 800f604:	b118      	cbz	r0, 800f60e <__swbuf_r+0x12>
 800f606:	6a03      	ldr	r3, [r0, #32]
 800f608:	b90b      	cbnz	r3, 800f60e <__swbuf_r+0x12>
 800f60a:	f7fd ffaf 	bl	800d56c <__sinit>
 800f60e:	69a3      	ldr	r3, [r4, #24]
 800f610:	60a3      	str	r3, [r4, #8]
 800f612:	89a3      	ldrh	r3, [r4, #12]
 800f614:	071a      	lsls	r2, r3, #28
 800f616:	d525      	bpl.n	800f664 <__swbuf_r+0x68>
 800f618:	6923      	ldr	r3, [r4, #16]
 800f61a:	b31b      	cbz	r3, 800f664 <__swbuf_r+0x68>
 800f61c:	6823      	ldr	r3, [r4, #0]
 800f61e:	6922      	ldr	r2, [r4, #16]
 800f620:	1a98      	subs	r0, r3, r2
 800f622:	6963      	ldr	r3, [r4, #20]
 800f624:	b2f6      	uxtb	r6, r6
 800f626:	4283      	cmp	r3, r0
 800f628:	4637      	mov	r7, r6
 800f62a:	dc04      	bgt.n	800f636 <__swbuf_r+0x3a>
 800f62c:	4621      	mov	r1, r4
 800f62e:	4628      	mov	r0, r5
 800f630:	f7ff fd9e 	bl	800f170 <_fflush_r>
 800f634:	b9e0      	cbnz	r0, 800f670 <__swbuf_r+0x74>
 800f636:	68a3      	ldr	r3, [r4, #8]
 800f638:	3b01      	subs	r3, #1
 800f63a:	60a3      	str	r3, [r4, #8]
 800f63c:	6823      	ldr	r3, [r4, #0]
 800f63e:	1c5a      	adds	r2, r3, #1
 800f640:	6022      	str	r2, [r4, #0]
 800f642:	701e      	strb	r6, [r3, #0]
 800f644:	6962      	ldr	r2, [r4, #20]
 800f646:	1c43      	adds	r3, r0, #1
 800f648:	429a      	cmp	r2, r3
 800f64a:	d004      	beq.n	800f656 <__swbuf_r+0x5a>
 800f64c:	89a3      	ldrh	r3, [r4, #12]
 800f64e:	07db      	lsls	r3, r3, #31
 800f650:	d506      	bpl.n	800f660 <__swbuf_r+0x64>
 800f652:	2e0a      	cmp	r6, #10
 800f654:	d104      	bne.n	800f660 <__swbuf_r+0x64>
 800f656:	4621      	mov	r1, r4
 800f658:	4628      	mov	r0, r5
 800f65a:	f7ff fd89 	bl	800f170 <_fflush_r>
 800f65e:	b938      	cbnz	r0, 800f670 <__swbuf_r+0x74>
 800f660:	4638      	mov	r0, r7
 800f662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f664:	4621      	mov	r1, r4
 800f666:	4628      	mov	r0, r5
 800f668:	f000 f806 	bl	800f678 <__swsetup_r>
 800f66c:	2800      	cmp	r0, #0
 800f66e:	d0d5      	beq.n	800f61c <__swbuf_r+0x20>
 800f670:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f674:	e7f4      	b.n	800f660 <__swbuf_r+0x64>
	...

0800f678 <__swsetup_r>:
 800f678:	b538      	push	{r3, r4, r5, lr}
 800f67a:	4b2a      	ldr	r3, [pc, #168]	; (800f724 <__swsetup_r+0xac>)
 800f67c:	4605      	mov	r5, r0
 800f67e:	6818      	ldr	r0, [r3, #0]
 800f680:	460c      	mov	r4, r1
 800f682:	b118      	cbz	r0, 800f68c <__swsetup_r+0x14>
 800f684:	6a03      	ldr	r3, [r0, #32]
 800f686:	b90b      	cbnz	r3, 800f68c <__swsetup_r+0x14>
 800f688:	f7fd ff70 	bl	800d56c <__sinit>
 800f68c:	89a3      	ldrh	r3, [r4, #12]
 800f68e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f692:	0718      	lsls	r0, r3, #28
 800f694:	d422      	bmi.n	800f6dc <__swsetup_r+0x64>
 800f696:	06d9      	lsls	r1, r3, #27
 800f698:	d407      	bmi.n	800f6aa <__swsetup_r+0x32>
 800f69a:	2309      	movs	r3, #9
 800f69c:	602b      	str	r3, [r5, #0]
 800f69e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f6a2:	81a3      	strh	r3, [r4, #12]
 800f6a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6a8:	e034      	b.n	800f714 <__swsetup_r+0x9c>
 800f6aa:	0758      	lsls	r0, r3, #29
 800f6ac:	d512      	bpl.n	800f6d4 <__swsetup_r+0x5c>
 800f6ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6b0:	b141      	cbz	r1, 800f6c4 <__swsetup_r+0x4c>
 800f6b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6b6:	4299      	cmp	r1, r3
 800f6b8:	d002      	beq.n	800f6c0 <__swsetup_r+0x48>
 800f6ba:	4628      	mov	r0, r5
 800f6bc:	f7fe fefe 	bl	800e4bc <_free_r>
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	6363      	str	r3, [r4, #52]	; 0x34
 800f6c4:	89a3      	ldrh	r3, [r4, #12]
 800f6c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f6ca:	81a3      	strh	r3, [r4, #12]
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	6063      	str	r3, [r4, #4]
 800f6d0:	6923      	ldr	r3, [r4, #16]
 800f6d2:	6023      	str	r3, [r4, #0]
 800f6d4:	89a3      	ldrh	r3, [r4, #12]
 800f6d6:	f043 0308 	orr.w	r3, r3, #8
 800f6da:	81a3      	strh	r3, [r4, #12]
 800f6dc:	6923      	ldr	r3, [r4, #16]
 800f6de:	b94b      	cbnz	r3, 800f6f4 <__swsetup_r+0x7c>
 800f6e0:	89a3      	ldrh	r3, [r4, #12]
 800f6e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f6e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6ea:	d003      	beq.n	800f6f4 <__swsetup_r+0x7c>
 800f6ec:	4621      	mov	r1, r4
 800f6ee:	4628      	mov	r0, r5
 800f6f0:	f000 f884 	bl	800f7fc <__smakebuf_r>
 800f6f4:	89a0      	ldrh	r0, [r4, #12]
 800f6f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f6fa:	f010 0301 	ands.w	r3, r0, #1
 800f6fe:	d00a      	beq.n	800f716 <__swsetup_r+0x9e>
 800f700:	2300      	movs	r3, #0
 800f702:	60a3      	str	r3, [r4, #8]
 800f704:	6963      	ldr	r3, [r4, #20]
 800f706:	425b      	negs	r3, r3
 800f708:	61a3      	str	r3, [r4, #24]
 800f70a:	6923      	ldr	r3, [r4, #16]
 800f70c:	b943      	cbnz	r3, 800f720 <__swsetup_r+0xa8>
 800f70e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f712:	d1c4      	bne.n	800f69e <__swsetup_r+0x26>
 800f714:	bd38      	pop	{r3, r4, r5, pc}
 800f716:	0781      	lsls	r1, r0, #30
 800f718:	bf58      	it	pl
 800f71a:	6963      	ldrpl	r3, [r4, #20]
 800f71c:	60a3      	str	r3, [r4, #8]
 800f71e:	e7f4      	b.n	800f70a <__swsetup_r+0x92>
 800f720:	2000      	movs	r0, #0
 800f722:	e7f7      	b.n	800f714 <__swsetup_r+0x9c>
 800f724:	20000178 	.word	0x20000178

0800f728 <_raise_r>:
 800f728:	291f      	cmp	r1, #31
 800f72a:	b538      	push	{r3, r4, r5, lr}
 800f72c:	4604      	mov	r4, r0
 800f72e:	460d      	mov	r5, r1
 800f730:	d904      	bls.n	800f73c <_raise_r+0x14>
 800f732:	2316      	movs	r3, #22
 800f734:	6003      	str	r3, [r0, #0]
 800f736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f73a:	bd38      	pop	{r3, r4, r5, pc}
 800f73c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f73e:	b112      	cbz	r2, 800f746 <_raise_r+0x1e>
 800f740:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f744:	b94b      	cbnz	r3, 800f75a <_raise_r+0x32>
 800f746:	4620      	mov	r0, r4
 800f748:	f000 f830 	bl	800f7ac <_getpid_r>
 800f74c:	462a      	mov	r2, r5
 800f74e:	4601      	mov	r1, r0
 800f750:	4620      	mov	r0, r4
 800f752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f756:	f000 b817 	b.w	800f788 <_kill_r>
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	d00a      	beq.n	800f774 <_raise_r+0x4c>
 800f75e:	1c59      	adds	r1, r3, #1
 800f760:	d103      	bne.n	800f76a <_raise_r+0x42>
 800f762:	2316      	movs	r3, #22
 800f764:	6003      	str	r3, [r0, #0]
 800f766:	2001      	movs	r0, #1
 800f768:	e7e7      	b.n	800f73a <_raise_r+0x12>
 800f76a:	2400      	movs	r4, #0
 800f76c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f770:	4628      	mov	r0, r5
 800f772:	4798      	blx	r3
 800f774:	2000      	movs	r0, #0
 800f776:	e7e0      	b.n	800f73a <_raise_r+0x12>

0800f778 <raise>:
 800f778:	4b02      	ldr	r3, [pc, #8]	; (800f784 <raise+0xc>)
 800f77a:	4601      	mov	r1, r0
 800f77c:	6818      	ldr	r0, [r3, #0]
 800f77e:	f7ff bfd3 	b.w	800f728 <_raise_r>
 800f782:	bf00      	nop
 800f784:	20000178 	.word	0x20000178

0800f788 <_kill_r>:
 800f788:	b538      	push	{r3, r4, r5, lr}
 800f78a:	4d07      	ldr	r5, [pc, #28]	; (800f7a8 <_kill_r+0x20>)
 800f78c:	2300      	movs	r3, #0
 800f78e:	4604      	mov	r4, r0
 800f790:	4608      	mov	r0, r1
 800f792:	4611      	mov	r1, r2
 800f794:	602b      	str	r3, [r5, #0]
 800f796:	f7f2 fcd9 	bl	800214c <_kill>
 800f79a:	1c43      	adds	r3, r0, #1
 800f79c:	d102      	bne.n	800f7a4 <_kill_r+0x1c>
 800f79e:	682b      	ldr	r3, [r5, #0]
 800f7a0:	b103      	cbz	r3, 800f7a4 <_kill_r+0x1c>
 800f7a2:	6023      	str	r3, [r4, #0]
 800f7a4:	bd38      	pop	{r3, r4, r5, pc}
 800f7a6:	bf00      	nop
 800f7a8:	200022d0 	.word	0x200022d0

0800f7ac <_getpid_r>:
 800f7ac:	f7f2 bcc6 	b.w	800213c <_getpid>

0800f7b0 <__swhatbuf_r>:
 800f7b0:	b570      	push	{r4, r5, r6, lr}
 800f7b2:	460c      	mov	r4, r1
 800f7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7b8:	2900      	cmp	r1, #0
 800f7ba:	b096      	sub	sp, #88	; 0x58
 800f7bc:	4615      	mov	r5, r2
 800f7be:	461e      	mov	r6, r3
 800f7c0:	da0d      	bge.n	800f7de <__swhatbuf_r+0x2e>
 800f7c2:	89a3      	ldrh	r3, [r4, #12]
 800f7c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f7c8:	f04f 0100 	mov.w	r1, #0
 800f7cc:	bf0c      	ite	eq
 800f7ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f7d2:	2340      	movne	r3, #64	; 0x40
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	6031      	str	r1, [r6, #0]
 800f7d8:	602b      	str	r3, [r5, #0]
 800f7da:	b016      	add	sp, #88	; 0x58
 800f7dc:	bd70      	pop	{r4, r5, r6, pc}
 800f7de:	466a      	mov	r2, sp
 800f7e0:	f000 f848 	bl	800f874 <_fstat_r>
 800f7e4:	2800      	cmp	r0, #0
 800f7e6:	dbec      	blt.n	800f7c2 <__swhatbuf_r+0x12>
 800f7e8:	9901      	ldr	r1, [sp, #4]
 800f7ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f7ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f7f2:	4259      	negs	r1, r3
 800f7f4:	4159      	adcs	r1, r3
 800f7f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7fa:	e7eb      	b.n	800f7d4 <__swhatbuf_r+0x24>

0800f7fc <__smakebuf_r>:
 800f7fc:	898b      	ldrh	r3, [r1, #12]
 800f7fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f800:	079d      	lsls	r5, r3, #30
 800f802:	4606      	mov	r6, r0
 800f804:	460c      	mov	r4, r1
 800f806:	d507      	bpl.n	800f818 <__smakebuf_r+0x1c>
 800f808:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f80c:	6023      	str	r3, [r4, #0]
 800f80e:	6123      	str	r3, [r4, #16]
 800f810:	2301      	movs	r3, #1
 800f812:	6163      	str	r3, [r4, #20]
 800f814:	b002      	add	sp, #8
 800f816:	bd70      	pop	{r4, r5, r6, pc}
 800f818:	ab01      	add	r3, sp, #4
 800f81a:	466a      	mov	r2, sp
 800f81c:	f7ff ffc8 	bl	800f7b0 <__swhatbuf_r>
 800f820:	9900      	ldr	r1, [sp, #0]
 800f822:	4605      	mov	r5, r0
 800f824:	4630      	mov	r0, r6
 800f826:	f7fe febd 	bl	800e5a4 <_malloc_r>
 800f82a:	b948      	cbnz	r0, 800f840 <__smakebuf_r+0x44>
 800f82c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f830:	059a      	lsls	r2, r3, #22
 800f832:	d4ef      	bmi.n	800f814 <__smakebuf_r+0x18>
 800f834:	f023 0303 	bic.w	r3, r3, #3
 800f838:	f043 0302 	orr.w	r3, r3, #2
 800f83c:	81a3      	strh	r3, [r4, #12]
 800f83e:	e7e3      	b.n	800f808 <__smakebuf_r+0xc>
 800f840:	89a3      	ldrh	r3, [r4, #12]
 800f842:	6020      	str	r0, [r4, #0]
 800f844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f848:	81a3      	strh	r3, [r4, #12]
 800f84a:	9b00      	ldr	r3, [sp, #0]
 800f84c:	6163      	str	r3, [r4, #20]
 800f84e:	9b01      	ldr	r3, [sp, #4]
 800f850:	6120      	str	r0, [r4, #16]
 800f852:	b15b      	cbz	r3, 800f86c <__smakebuf_r+0x70>
 800f854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f858:	4630      	mov	r0, r6
 800f85a:	f000 f81d 	bl	800f898 <_isatty_r>
 800f85e:	b128      	cbz	r0, 800f86c <__smakebuf_r+0x70>
 800f860:	89a3      	ldrh	r3, [r4, #12]
 800f862:	f023 0303 	bic.w	r3, r3, #3
 800f866:	f043 0301 	orr.w	r3, r3, #1
 800f86a:	81a3      	strh	r3, [r4, #12]
 800f86c:	89a3      	ldrh	r3, [r4, #12]
 800f86e:	431d      	orrs	r5, r3
 800f870:	81a5      	strh	r5, [r4, #12]
 800f872:	e7cf      	b.n	800f814 <__smakebuf_r+0x18>

0800f874 <_fstat_r>:
 800f874:	b538      	push	{r3, r4, r5, lr}
 800f876:	4d07      	ldr	r5, [pc, #28]	; (800f894 <_fstat_r+0x20>)
 800f878:	2300      	movs	r3, #0
 800f87a:	4604      	mov	r4, r0
 800f87c:	4608      	mov	r0, r1
 800f87e:	4611      	mov	r1, r2
 800f880:	602b      	str	r3, [r5, #0]
 800f882:	f7f2 fcc2 	bl	800220a <_fstat>
 800f886:	1c43      	adds	r3, r0, #1
 800f888:	d102      	bne.n	800f890 <_fstat_r+0x1c>
 800f88a:	682b      	ldr	r3, [r5, #0]
 800f88c:	b103      	cbz	r3, 800f890 <_fstat_r+0x1c>
 800f88e:	6023      	str	r3, [r4, #0]
 800f890:	bd38      	pop	{r3, r4, r5, pc}
 800f892:	bf00      	nop
 800f894:	200022d0 	.word	0x200022d0

0800f898 <_isatty_r>:
 800f898:	b538      	push	{r3, r4, r5, lr}
 800f89a:	4d06      	ldr	r5, [pc, #24]	; (800f8b4 <_isatty_r+0x1c>)
 800f89c:	2300      	movs	r3, #0
 800f89e:	4604      	mov	r4, r0
 800f8a0:	4608      	mov	r0, r1
 800f8a2:	602b      	str	r3, [r5, #0]
 800f8a4:	f7f2 fcc1 	bl	800222a <_isatty>
 800f8a8:	1c43      	adds	r3, r0, #1
 800f8aa:	d102      	bne.n	800f8b2 <_isatty_r+0x1a>
 800f8ac:	682b      	ldr	r3, [r5, #0]
 800f8ae:	b103      	cbz	r3, 800f8b2 <_isatty_r+0x1a>
 800f8b0:	6023      	str	r3, [r4, #0]
 800f8b2:	bd38      	pop	{r3, r4, r5, pc}
 800f8b4:	200022d0 	.word	0x200022d0

0800f8b8 <_init>:
 800f8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ba:	bf00      	nop
 800f8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8be:	bc08      	pop	{r3}
 800f8c0:	469e      	mov	lr, r3
 800f8c2:	4770      	bx	lr

0800f8c4 <_fini>:
 800f8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8c6:	bf00      	nop
 800f8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8ca:	bc08      	pop	{r3}
 800f8cc:	469e      	mov	lr, r3
 800f8ce:	4770      	bx	lr
