
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  0800d970  0800d970  0001d970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd5c  0800dd5c  000202e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd5c  0800dd5c  0001dd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd64  0800dd64  000202e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd64  0800dd64  0001dd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd68  0800dd68  0001dd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  0800dd6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fd8  200002e8  0800e054  000202e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200022c0  0800e054  000222c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c2e0  00000000  00000000  0002039e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ee3  00000000  00000000  0003c67e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  00040568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013d7  00000000  00000000  00041ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c12f  00000000  00000000  000432af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f300  00000000  00000000  0005f3de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a38a8  00000000  00000000  0007e6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e68  00000000  00000000  00121f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00129df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e8 	.word	0x200002e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d958 	.word	0x0800d958

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002ec 	.word	0x200002ec
 80001dc:	0800d958 	.word	0x0800d958

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efa:	f001 f877 	bl	8001fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efe:	f000 f87b 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f02:	f000 fb0f 	bl	8001524 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f06:	f000 f8e1 	bl	80010cc <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f0a:	f000 f995 	bl	8001238 <MX_TIM1_Init>
  MX_I2C2_Init();
 8000f0e:	f000 f92f 	bl	8001170 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000f12:	f000 f95b 	bl	80011cc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f16:	f000 fadb 	bl	80014d0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000f1a:	f009 f975 	bl	800a208 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000f1e:	f000 fa49 	bl	80013b4 <MX_TIM2_Init>
  MX_TIM9_Init();
 8000f22:	f000 fa91 	bl	8001448 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  StartupSequence('F');
 8000f26:	2046      	movs	r0, #70	; 0x46
 8000f28:	f000 fb5c 	bl	80015e4 <StartupSequence>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// Read Hall sensor for new PWM calculation
	HAL_ADC_Start(&hadc1);
 8000f2c:	482b      	ldr	r0, [pc, #172]	; (8000fdc <main+0xe8>)
 8000f2e:	f001 f937 	bl	80021a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f32:	f04f 31ff 	mov.w	r1, #4294967295
 8000f36:	4829      	ldr	r0, [pc, #164]	; (8000fdc <main+0xe8>)
 8000f38:	f001 f9e6 	bl	8002308 <HAL_ADC_PollForConversion>
	uint32_t PWM = (HAL_ADC_GetValue(&hadc1) / 4096.0) * TIM1->ARR;
 8000f3c:	4827      	ldr	r0, [pc, #156]	; (8000fdc <main+0xe8>)
 8000f3e:	f001 fa6e 	bl	800241e <HAL_ADC_GetValue>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fae5 	bl	8000514 <__aeabi_ui2d>
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <main+0xec>)
 8000f50:	f7ff fc84 	bl	800085c <__aeabi_ddiv>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4614      	mov	r4, r2
 8000f5a:	461d      	mov	r5, r3
 8000f5c:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <main+0xf0>)
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fad7 	bl	8000514 <__aeabi_ui2d>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	4629      	mov	r1, r5
 8000f6e:	f7ff fb4b 	bl	8000608 <__aeabi_dmul>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f7ff fe1d 	bl	8000bb8 <__aeabi_d2uiz>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	607b      	str	r3, [r7, #4]

	// Update PWM according to temporary potentiometer input
	TIM1->CR1 |= 0x0002;  // Disable Update Events
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <main+0xf0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <main+0xf0>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6013      	str	r3, [r2, #0]
	TIM1->CCR1 = PWM;	  // Set new PWM for channel 1
 8000f8e:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <main+0xf0>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = PWM;	  // Set new PWM for channel 2
 8000f94:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <main+0xf0>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = PWM;	  // Set new PWM for channel 3
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <main+0xf0>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CR1 &= ~0x0002; // Enable Update Events
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <main+0xf0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <main+0xf0>)
 8000fa6:	f023 0302 	bic.w	r3, r3, #2
 8000faa:	6013      	str	r3, [r2, #0]

	len = snprintf(buf, sizeof(buf), "\n\rCurrent RPM: %04.2lf", CurrentRPM);
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <main+0xf4>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	e9cd 2300 	strd	r2, r3, [sp]
 8000fb6:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <main+0xf8>)
 8000fb8:	2140      	movs	r1, #64	; 0x40
 8000fba:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <main+0xfc>)
 8000fbc:	f00a fb5c 	bl	800b678 <sniprintf>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <main+0x100>)
 8000fc6:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS((uint8_t *) buf, len);
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <main+0x100>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <main+0xfc>)
 8000fd0:	f009 f9d8 	bl	800a384 <CDC_Transmit_FS>

	HAL_Delay(10);
 8000fd4:	200a      	movs	r0, #10
 8000fd6:	f001 f87b 	bl	80020d0 <HAL_Delay>
  {
 8000fda:	e7a7      	b.n	8000f2c <main+0x38>
 8000fdc:	20000304 	.word	0x20000304
 8000fe0:	40b00000 	.word	0x40b00000
 8000fe4:	40010000 	.word	0x40010000
 8000fe8:	20000518 	.word	0x20000518
 8000fec:	0800d970 	.word	0x0800d970
 8000ff0:	20000520 	.word	0x20000520
 8000ff4:	20000516 	.word	0x20000516

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	; 0x50
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	2230      	movs	r2, #48	; 0x30
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f00a fbad 	bl	800b766 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <SystemClock_Config+0xcc>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <SystemClock_Config+0xcc>)
 8001026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102a:	6413      	str	r3, [r2, #64]	; 0x40
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <SystemClock_Config+0xcc>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <SystemClock_Config+0xd0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <SystemClock_Config+0xd0>)
 8001042:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <SystemClock_Config+0xd0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001054:	2301      	movs	r3, #1
 8001056:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105e:	2302      	movs	r3, #2
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001062:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001068:	2319      	movs	r3, #25
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800106c:	23c0      	movs	r3, #192	; 0xc0
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001070:	2302      	movs	r3, #2
 8001072:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001074:	2304      	movs	r3, #4
 8001076:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001078:	f107 0320 	add.w	r3, r7, #32
 800107c:	4618      	mov	r0, r3
 800107e:	f003 fa7b 	bl	8004578 <HAL_RCC_OscConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001088:	f000 fb70 	bl	800176c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108c:	230f      	movs	r3, #15
 800108e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001090:	2302      	movs	r3, #2
 8001092:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800109e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2103      	movs	r1, #3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 fcdc 	bl	8004a68 <HAL_RCC_ClockConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010b6:	f000 fb59 	bl	800176c <Error_Handler>
  }
}
 80010ba:	bf00      	nop
 80010bc:	3750      	adds	r7, #80	; 0x50
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d2:	463b      	mov	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <MX_ADC1_Init+0x98>)
 80010e0:	4a21      	ldr	r2, [pc, #132]	; (8001168 <MX_ADC1_Init+0x9c>)
 80010e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <MX_ADC1_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <MX_ADC1_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <MX_ADC1_Init+0x98>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_ADC1_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <MX_ADC1_Init+0x98>)
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <MX_ADC1_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_ADC1_Init+0x98>)
 800110c:	4a17      	ldr	r2, [pc, #92]	; (800116c <MX_ADC1_Init+0xa0>)
 800110e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_ADC1_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_ADC1_Init+0x98>)
 8001118:	2201      	movs	r2, #1
 800111a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_ADC1_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_ADC1_Init+0x98>)
 8001126:	2201      	movs	r2, #1
 8001128:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800112a:	480e      	ldr	r0, [pc, #56]	; (8001164 <MX_ADC1_Init+0x98>)
 800112c:	f000 fff4 	bl	8002118 <HAL_ADC_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001136:	f000 fb19 	bl	800176c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800113a:	2304      	movs	r3, #4
 800113c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800113e:	2301      	movs	r3, #1
 8001140:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_ADC1_Init+0x98>)
 800114c:	f001 f974 	bl	8002438 <HAL_ADC_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001156:	f000 fb09 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000304 	.word	0x20000304
 8001168:	40012000 	.word	0x40012000
 800116c:	0f000001 	.word	0x0f000001

08001170 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MX_I2C2_Init+0x50>)
 8001176:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <MX_I2C2_Init+0x54>)
 8001178:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_I2C2_Init+0x50>)
 800117c:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <MX_I2C2_Init+0x58>)
 800117e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_I2C2_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_I2C2_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_I2C2_Init+0x50>)
 800118e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001192:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <MX_I2C2_Init+0x50>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_I2C2_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a0:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <MX_I2C2_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_I2C2_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <MX_I2C2_Init+0x50>)
 80011ae:	f001 fe21 	bl	8002df4 <HAL_I2C_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011b8:	f000 fad8 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000034c 	.word	0x2000034c
 80011c4:	40005800 	.word	0x40005800
 80011c8:	000186a0 	.word	0x000186a0

080011cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011d0:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_SPI1_Init+0x64>)
 80011d2:	4a18      	ldr	r2, [pc, #96]	; (8001234 <MX_SPI1_Init+0x68>)
 80011d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_SPI1_Init+0x64>)
 80011d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_SPI1_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_SPI1_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_SPI1_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_SPI1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_SPI1_Init+0x64>)
 80011f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_SPI1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_SPI1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_SPI1_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <MX_SPI1_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_SPI1_Init+0x64>)
 8001218:	220a      	movs	r2, #10
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_SPI1_Init+0x64>)
 800121e:	f003 fe03 	bl	8004e28 <HAL_SPI_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001228:	f000 faa0 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200003a0 	.word	0x200003a0
 8001234:	40013000 	.word	0x40013000

08001238 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b096      	sub	sp, #88	; 0x58
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800123e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001258:	f107 0320 	add.w	r3, r7, #32
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	615a      	str	r2, [r3, #20]
 800126a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800126c:	463b      	mov	r3, r7
 800126e:	2220      	movs	r2, #32
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f00a fa77 	bl	800b766 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001278:	4b4c      	ldr	r3, [pc, #304]	; (80013ac <MX_TIM1_Init+0x174>)
 800127a:	4a4d      	ldr	r2, [pc, #308]	; (80013b0 <MX_TIM1_Init+0x178>)
 800127c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800127e:	4b4b      	ldr	r3, [pc, #300]	; (80013ac <MX_TIM1_Init+0x174>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b49      	ldr	r3, [pc, #292]	; (80013ac <MX_TIM1_Init+0x174>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 800128a:	4b48      	ldr	r3, [pc, #288]	; (80013ac <MX_TIM1_Init+0x174>)
 800128c:	f240 727f 	movw	r2, #1919	; 0x77f
 8001290:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b46      	ldr	r3, [pc, #280]	; (80013ac <MX_TIM1_Init+0x174>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001298:	4b44      	ldr	r3, [pc, #272]	; (80013ac <MX_TIM1_Init+0x174>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b43      	ldr	r3, [pc, #268]	; (80013ac <MX_TIM1_Init+0x174>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012a4:	4841      	ldr	r0, [pc, #260]	; (80013ac <MX_TIM1_Init+0x174>)
 80012a6:	f003 fe48 	bl	8004f3a <HAL_TIM_Base_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012b0:	f000 fa5c 	bl	800176c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012b4:	483d      	ldr	r0, [pc, #244]	; (80013ac <MX_TIM1_Init+0x174>)
 80012b6:	f003 ff40 	bl	800513a <HAL_TIM_PWM_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80012c0:	f000 fa54 	bl	800176c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80012c4:	2304      	movs	r3, #4
 80012c6:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80012cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012d0:	4619      	mov	r1, r3
 80012d2:	4836      	ldr	r0, [pc, #216]	; (80013ac <MX_TIM1_Init+0x174>)
 80012d4:	f004 fa60 	bl	8005798 <HAL_TIM_SlaveConfigSynchro>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80012de:	f000 fa45 	bl	800176c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012ee:	4619      	mov	r1, r3
 80012f0:	482e      	ldr	r0, [pc, #184]	; (80013ac <MX_TIM1_Init+0x174>)
 80012f2:	f004 ffdd 	bl	80062b0 <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80012fc:	f000 fa36 	bl	800176c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001300:	2360      	movs	r3, #96	; 0x60
 8001302:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 500;
 8001304:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	2200      	movs	r2, #0
 8001324:	4619      	mov	r1, r3
 8001326:	4821      	ldr	r0, [pc, #132]	; (80013ac <MX_TIM1_Init+0x174>)
 8001328:	f004 f974 	bl	8005614 <HAL_TIM_PWM_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001332:	f000 fa1b 	bl	800176c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001336:	f107 0320 	add.w	r3, r7, #32
 800133a:	2204      	movs	r2, #4
 800133c:	4619      	mov	r1, r3
 800133e:	481b      	ldr	r0, [pc, #108]	; (80013ac <MX_TIM1_Init+0x174>)
 8001340:	f004 f968 	bl	8005614 <HAL_TIM_PWM_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800134a:	f000 fa0f 	bl	800176c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	2208      	movs	r2, #8
 8001358:	4619      	mov	r1, r3
 800135a:	4814      	ldr	r0, [pc, #80]	; (80013ac <MX_TIM1_Init+0x174>)
 800135c:	f004 f95a 	bl	8005614 <HAL_TIM_PWM_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8001366:	f000 fa01 	bl	800176c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800137e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001382:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <MX_TIM1_Init+0x174>)
 800138e:	f004 fffd 	bl	800638c <HAL_TIMEx_ConfigBreakDeadTime>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8001398:	f000 f9e8 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <MX_TIM1_Init+0x174>)
 800139e:	f000 fb9f 	bl	8001ae0 <HAL_TIM_MspPostInit>

}
 80013a2:	bf00      	nop
 80013a4:	3758      	adds	r7, #88	; 0x58
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200003f8 	.word	0x200003f8
 80013b0:	40010000 	.word	0x40010000

080013b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_TIM2_Init+0x90>)
 80013d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_TIM2_Init+0x90>)
 80013da:	2200      	movs	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_TIM2_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_TIM2_Init+0x90>)
 80013e6:	f04f 32ff 	mov.w	r2, #4294967295
 80013ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_TIM2_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_TIM2_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4619      	mov	r1, r3
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_TIM2_Init+0x90>)
 8001410:	f004 fe24 	bl	800605c <HAL_TIMEx_HallSensor_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800141a:	f000 f9a7 	bl	800176c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800141e:	2350      	movs	r3, #80	; 0x50
 8001420:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001426:	463b      	mov	r3, r7
 8001428:	4619      	mov	r1, r3
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <MX_TIM2_Init+0x90>)
 800142c:	f004 ff40 	bl	80062b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001436:	f000 f999 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000440 	.word	0x20000440

08001448 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
 800145c:	615a      	str	r2, [r3, #20]
 800145e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <MX_TIM9_Init+0x80>)
 8001462:	4a1a      	ldr	r2, [pc, #104]	; (80014cc <MX_TIM9_Init+0x84>)
 8001464:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 9999;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_TIM9_Init+0x80>)
 8001468:	f242 720f 	movw	r2, #9999	; 0x270f
 800146c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MX_TIM9_Init+0x80>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9599;
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_TIM9_Init+0x80>)
 8001476:	f242 527f 	movw	r2, #9599	; 0x257f
 800147a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_TIM9_Init+0x80>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_TIM9_Init+0x80>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8001488:	480f      	ldr	r0, [pc, #60]	; (80014c8 <MX_TIM9_Init+0x80>)
 800148a:	f003 fe07 	bl	800509c <HAL_TIM_OC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8001494:	f000 f96a 	bl	800176c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2200      	movs	r2, #0
 80014ac:	4619      	mov	r1, r3
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <MX_TIM9_Init+0x80>)
 80014b0:	f004 f854 	bl	800555c <HAL_TIM_OC_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 80014ba:	f000 f957 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	3720      	adds	r7, #32
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000488 	.word	0x20000488
 80014cc:	40014000 	.word	0x40014000

080014d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_USART1_UART_Init+0x50>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_USART1_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_USART1_UART_Init+0x4c>)
 8001508:	f004 ffa6 	bl	8006458 <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001512:	f000 f92b 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200004d0 	.word	0x200004d0
 8001520:	40011000 	.word	0x40011000

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b27      	ldr	r3, [pc, #156]	; (80015dc <MX_GPIO_Init+0xb8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a26      	ldr	r2, [pc, #152]	; (80015dc <MX_GPIO_Init+0xb8>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <MX_GPIO_Init+0xb8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <MX_GPIO_Init+0xb8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <MX_GPIO_Init+0xb8>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <MX_GPIO_Init+0xb8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <MX_GPIO_Init+0xb8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a18      	ldr	r2, [pc, #96]	; (80015dc <MX_GPIO_Init+0xb8>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_GPIO_Init+0xb8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_GPIO_Init+0xb8>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a11      	ldr	r2, [pc, #68]	; (80015dc <MX_GPIO_Init+0xb8>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_GPIO_Init+0xb8>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80015b0:	480b      	ldr	r0, [pc, #44]	; (80015e0 <MX_GPIO_Init+0xbc>)
 80015b2:	f001 fc05 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80015b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	4804      	ldr	r0, [pc, #16]	; (80015e0 <MX_GPIO_Init+0xbc>)
 80015d0:	f001 fa72 	bl	8002ab8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	; 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020800 	.word	0x40020800

080015e4 <StartupSequence>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef StartupSequence(char Direction) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]

  // Set first commutation state according to Hall sensors
  if (PrepareCommutation(Direction) == HAL_ERROR) {
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 f83d 	bl	8001670 <PrepareCommutation>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <StartupSequence+0x1c>
	  return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e02a      	b.n	8001656 <StartupSequence+0x72>
  }

  // Start HallSensor timer
  HAL_TIMEx_HallSensor_Start(&htim2);
 8001600:	4817      	ldr	r0, [pc, #92]	; (8001660 <StartupSequence+0x7c>)
 8001602:	f004 fdd5 	bl	80061b0 <HAL_TIMEx_HallSensor_Start>

  // Start all PWM signals on TIM1
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001606:	2100      	movs	r1, #0
 8001608:	4816      	ldr	r0, [pc, #88]	; (8001664 <StartupSequence+0x80>)
 800160a:	f003 fdef 	bl	80051ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800160e:	2104      	movs	r1, #4
 8001610:	4814      	ldr	r0, [pc, #80]	; (8001664 <StartupSequence+0x80>)
 8001612:	f003 fdeb 	bl	80051ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001616:	2108      	movs	r1, #8
 8001618:	4812      	ldr	r0, [pc, #72]	; (8001664 <StartupSequence+0x80>)
 800161a:	f003 fde7 	bl	80051ec <HAL_TIM_PWM_Start>

  // Start Interrupts
  HAL_TIM_Base_Start_IT(&htim1);
 800161e:	4811      	ldr	r0, [pc, #68]	; (8001664 <StartupSequence+0x80>)
 8001620:	f003 fcda 	bl	8004fd8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001624:	480e      	ldr	r0, [pc, #56]	; (8001660 <StartupSequence+0x7c>)
 8001626:	f003 fcd7 	bl	8004fd8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 800162a:	480f      	ldr	r0, [pc, #60]	; (8001668 <StartupSequence+0x84>)
 800162c:	f003 fcd4 	bl	8004fd8 <HAL_TIM_Base_Start_IT>

  // Write some registers
  TIM1->CR2  |= 0x0005; 		// Set CCPC 1 and CCUS 1 in CR2
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <StartupSequence+0x88>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4a0d      	ldr	r2, [pc, #52]	; (800166c <StartupSequence+0x88>)
 8001636:	f043 0305 	orr.w	r3, r3, #5
 800163a:	6053      	str	r3, [r2, #4]
  TIM1->EGR  |= TIM_EGR_COMG; 	// Set COMG bit in EGR for first commutation
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <StartupSequence+0x88>)
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	4a0a      	ldr	r2, [pc, #40]	; (800166c <StartupSequence+0x88>)
 8001642:	f043 0320 	orr.w	r3, r3, #32
 8001646:	6153      	str	r3, [r2, #20]
  TIM1->DIER |= TIM_DIER_COMIE; // Enable Commutation events in DIER register
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <StartupSequence+0x88>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <StartupSequence+0x88>)
 800164e:	f043 0320 	orr.w	r3, r3, #32
 8001652:	60d3      	str	r3, [r2, #12]
  // TIM1->BDTR |= TIM_BDTR_OSSR;

  return HAL_OK;
 8001654:	2300      	movs	r3, #0

}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000440 	.word	0x20000440
 8001664:	200003f8 	.word	0x200003f8
 8001668:	20000488 	.word	0x20000488
 800166c:	40010000 	.word	0x40010000

08001670 <PrepareCommutation>:

  return HAL_OK;

}

HAL_StatusTypeDef PrepareCommutation(char Direction) {
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]

  // Read IDR for Hall Sensor status
  Hall = (GPIOA->IDR & 0x0007) - 1;
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <PrepareCommutation+0xe8>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	b2db      	uxtb	r3, r3
 8001686:	3b01      	subs	r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b34      	ldr	r3, [pc, #208]	; (800175c <PrepareCommutation+0xec>)
 800168c:	701a      	strb	r2, [r3, #0]

  // Edit Hall data according to direction.
  switch (Direction) {
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b42      	cmp	r3, #66	; 0x42
 8001692:	d016      	beq.n	80016c2 <PrepareCommutation+0x52>
 8001694:	2b46      	cmp	r3, #70	; 0x46
 8001696:	d12f      	bne.n	80016f8 <PrepareCommutation+0x88>
  case 'F':
  	  Hall += 1; // Select next value in the array to go forward
 8001698:	4b30      	ldr	r3, [pc, #192]	; (800175c <PrepareCommutation+0xec>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b2e      	ldr	r3, [pc, #184]	; (800175c <PrepareCommutation+0xec>)
 80016a2:	701a      	strb	r2, [r3, #0]
	  Hall %= 6; // If original was 5 it needs to be 0 to we use % 6
 80016a4:	4b2d      	ldr	r3, [pc, #180]	; (800175c <PrepareCommutation+0xec>)
 80016a6:	781a      	ldrb	r2, [r3, #0]
 80016a8:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <PrepareCommutation+0xf0>)
 80016aa:	fba3 1302 	umull	r1, r3, r3, r2
 80016ae:	0899      	lsrs	r1, r3, #2
 80016b0:	460b      	mov	r3, r1
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	440b      	add	r3, r1
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b27      	ldr	r3, [pc, #156]	; (800175c <PrepareCommutation+0xec>)
 80016be:	701a      	strb	r2, [r3, #0]
  break;
 80016c0:	e01c      	b.n	80016fc <PrepareCommutation+0x8c>
  case 'B':
	  Hall += 6; // To not go negative in the next step we add 6
 80016c2:	4b26      	ldr	r3, [pc, #152]	; (800175c <PrepareCommutation+0xec>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	3306      	adds	r3, #6
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <PrepareCommutation+0xec>)
 80016cc:	701a      	strb	r2, [r3, #0]
	  Hall -= 1; // Select previous value to go backwards
 80016ce:	4b23      	ldr	r3, [pc, #140]	; (800175c <PrepareCommutation+0xec>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b21      	ldr	r3, [pc, #132]	; (800175c <PrepareCommutation+0xec>)
 80016d8:	701a      	strb	r2, [r3, #0]
	  Hall %= 6; // If original was 0 it needs to become 5, this also negates the 6 we added previously
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <PrepareCommutation+0xec>)
 80016dc:	781a      	ldrb	r2, [r3, #0]
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <PrepareCommutation+0xf0>)
 80016e0:	fba3 1302 	umull	r1, r3, r3, r2
 80016e4:	0899      	lsrs	r1, r3, #2
 80016e6:	460b      	mov	r3, r1
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	440b      	add	r3, r1
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <PrepareCommutation+0xec>)
 80016f4:	701a      	strb	r2, [r3, #0]
  break;
 80016f6:	e001      	b.n	80016fc <PrepareCommutation+0x8c>
  default:
	  // If F or B is not supplied the function should return with an error
	  return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e026      	b.n	800174a <PrepareCommutation+0xda>
  break;
  }

  // Set Registers to required values
  TIM1->CCER  = Commutation[Hall][0];
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <PrepareCommutation+0xec>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	4a18      	ldr	r2, [pc, #96]	; (8001764 <PrepareCommutation+0xf4>)
 8001704:	460b      	mov	r3, r1
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	440b      	add	r3, r1
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	881a      	ldrh	r2, [r3, #0]
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <PrepareCommutation+0xf8>)
 8001712:	621a      	str	r2, [r3, #32]
  TIM1->CCMR1 = Commutation[Hall][2];
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <PrepareCommutation+0xec>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <PrepareCommutation+0xf4>)
 800171c:	460b      	mov	r3, r1
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	440b      	add	r3, r1
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	3304      	adds	r3, #4
 8001728:	881a      	ldrh	r2, [r3, #0]
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <PrepareCommutation+0xf8>)
 800172c:	619a      	str	r2, [r3, #24]
  TIM1->CCMR2 = Commutation[Hall][1];
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <PrepareCommutation+0xec>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4619      	mov	r1, r3
 8001734:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <PrepareCommutation+0xf4>)
 8001736:	460b      	mov	r3, r1
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	440b      	add	r3, r1
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	3302      	adds	r3, #2
 8001742:	881a      	ldrh	r2, [r3, #0]
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <PrepareCommutation+0xf8>)
 8001746:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8001748:	2300      	movs	r3, #0

}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40020000 	.word	0x40020000
 800175c:	20000514 	.word	0x20000514
 8001760:	aaaaaaab 	.word	0xaaaaaaab
 8001764:	20000000 	.word	0x20000000
 8001768:	40010000 	.word	0x40010000

0800176c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001770:	b672      	cpsid	i
}
 8001772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001774:	e7fe      	b.n	8001774 <Error_Handler+0x8>
	...

08001778 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_MspInit+0x4c>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <HAL_MspInit+0x4c>)
 8001788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178c:	6453      	str	r3, [r2, #68]	; 0x44
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HAL_MspInit+0x4c>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_MspInit+0x4c>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <HAL_MspInit+0x4c>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_MspInit+0x4c>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800

080017c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a17      	ldr	r2, [pc, #92]	; (8001844 <HAL_ADC_MspInit+0x7c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d127      	bne.n	800183a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_ADC_MspInit+0x80>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a15      	ldr	r2, [pc, #84]	; (8001848 <HAL_ADC_MspInit+0x80>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <HAL_ADC_MspInit+0x80>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_ADC_MspInit+0x80>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_ADC_MspInit+0x80>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_ADC_MspInit+0x80>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001822:	2310      	movs	r3, #16
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001826:	2303      	movs	r3, #3
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	; (800184c <HAL_ADC_MspInit+0x84>)
 8001836:	f001 f93f 	bl	8002ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800183a:	bf00      	nop
 800183c:	3728      	adds	r7, #40	; 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40012000 	.word	0x40012000
 8001848:	40023800 	.word	0x40023800
 800184c:	40020000 	.word	0x40020000

08001850 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <HAL_I2C_MspInit+0xa8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d13d      	bne.n	80018ee <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	4b21      	ldr	r3, [pc, #132]	; (80018fc <HAL_I2C_MspInit+0xac>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a20      	ldr	r2, [pc, #128]	; (80018fc <HAL_I2C_MspInit+0xac>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <HAL_I2C_MspInit+0xac>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800188e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001894:	2312      	movs	r3, #18
 8001896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189c:	2303      	movs	r3, #3
 800189e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018a0:	2304      	movs	r3, #4
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	4815      	ldr	r0, [pc, #84]	; (8001900 <HAL_I2C_MspInit+0xb0>)
 80018ac:	f001 f904 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b6:	2312      	movs	r3, #18
 80018b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018be:	2303      	movs	r3, #3
 80018c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80018c2:	2309      	movs	r3, #9
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4619      	mov	r1, r3
 80018cc:	480c      	ldr	r0, [pc, #48]	; (8001900 <HAL_I2C_MspInit+0xb0>)
 80018ce:	f001 f8f3 	bl	8002ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_I2C_MspInit+0xac>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	4a08      	ldr	r2, [pc, #32]	; (80018fc <HAL_I2C_MspInit+0xac>)
 80018dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018e0:	6413      	str	r3, [r2, #64]	; 0x40
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_I2C_MspInit+0xac>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018ee:	bf00      	nop
 80018f0:	3728      	adds	r7, #40	; 0x28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40005800 	.word	0x40005800
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020400 	.word	0x40020400

08001904 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a19      	ldr	r2, [pc, #100]	; (8001988 <HAL_SPI_MspInit+0x84>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d12b      	bne.n	800197e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_SPI_MspInit+0x88>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a17      	ldr	r2, [pc, #92]	; (800198c <HAL_SPI_MspInit+0x88>)
 8001930:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_SPI_MspInit+0x88>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <HAL_SPI_MspInit+0x88>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a10      	ldr	r2, [pc, #64]	; (800198c <HAL_SPI_MspInit+0x88>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_SPI_MspInit+0x88>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800195e:	23e0      	movs	r3, #224	; 0xe0
 8001960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800196e:	2305      	movs	r3, #5
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <HAL_SPI_MspInit+0x8c>)
 800197a:	f001 f89d 	bl	8002ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800197e:	bf00      	nop
 8001980:	3728      	adds	r7, #40	; 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40013000 	.word	0x40013000
 800198c:	40023800 	.word	0x40023800
 8001990:	40020000 	.word	0x40020000

08001994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a12      	ldr	r2, [pc, #72]	; (80019ec <HAL_TIM_Base_MspInit+0x58>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d11d      	bne.n	80019e2 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_TIM_Base_MspInit+0x5c>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_TIM_Base_MspInit+0x5c>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_TIM_Base_MspInit+0x5c>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	2018      	movs	r0, #24
 80019c8:	f001 f83f 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80019cc:	2018      	movs	r0, #24
 80019ce:	f001 f858 	bl	8002a82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	201a      	movs	r0, #26
 80019d8:	f001 f837 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80019dc:	201a      	movs	r0, #26
 80019de:	f001 f850 	bl	8002a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40010000 	.word	0x40010000
 80019f0:	40023800 	.word	0x40023800

080019f4 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a14:	d133      	bne.n	8001a7e <HAL_TIMEx_HallSensor_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a1a      	ldr	r2, [pc, #104]	; (8001a88 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001a4e:	2307      	movs	r3, #7
 8001a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	4808      	ldr	r0, [pc, #32]	; (8001a8c <HAL_TIMEx_HallSensor_MspInit+0x98>)
 8001a6a:	f001 f825 	bl	8002ab8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2100      	movs	r1, #0
 8001a72:	201c      	movs	r0, #28
 8001a74:	f000 ffe9 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a78:	201c      	movs	r0, #28
 8001a7a:	f001 f802 	bl	8002a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	; 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020000 	.word	0x40020000

08001a90 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM9)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <HAL_TIM_OC_MspInit+0x48>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d115      	bne.n	8001ace <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <HAL_TIM_OC_MspInit+0x4c>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <HAL_TIM_OC_MspInit+0x4c>)
 8001aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_TIM_OC_MspInit+0x4c>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2018      	movs	r0, #24
 8001ac4:	f000 ffc1 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001ac8:	2018      	movs	r0, #24
 8001aca:	f000 ffda 	bl	8002a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40014000 	.word	0x40014000
 8001adc:	40023800 	.word	0x40023800

08001ae0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <HAL_TIM_MspPostInit+0xa8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d13d      	bne.n	8001b7e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_TIM_MspPostInit+0xac>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a20      	ldr	r2, [pc, #128]	; (8001b8c <HAL_TIM_MspPostInit+0xac>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <HAL_TIM_MspPostInit+0xac>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_TIM_MspPostInit+0xac>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a19      	ldr	r2, [pc, #100]	; (8001b8c <HAL_TIM_MspPostInit+0xac>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_TIM_MspPostInit+0xac>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8001b3a:	f242 0303 	movw	r3, #8195	; 0x2003
 8001b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	480e      	ldr	r0, [pc, #56]	; (8001b90 <HAL_TIM_MspPostInit+0xb0>)
 8001b58:	f000 ffae 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001b5c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4806      	ldr	r0, [pc, #24]	; (8001b94 <HAL_TIM_MspPostInit+0xb4>)
 8001b7a:	f000 ff9d 	bl	8002ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b7e:	bf00      	nop
 8001b80:	3728      	adds	r7, #40	; 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020400 	.word	0x40020400
 8001b94:	40020000 	.word	0x40020000

08001b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a28      	ldr	r2, [pc, #160]	; (8001c58 <HAL_UART_MspInit+0xc0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d14a      	bne.n	8001c50 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <HAL_UART_MspInit+0xc4>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a26      	ldr	r2, [pc, #152]	; (8001c5c <HAL_UART_MspInit+0xc4>)
 8001bc4:	f043 0310 	orr.w	r3, r3, #16
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <HAL_UART_MspInit+0xc4>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_UART_MspInit+0xc4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a1f      	ldr	r2, [pc, #124]	; (8001c5c <HAL_UART_MspInit+0xc4>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_UART_MspInit+0xc4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_UART_MspInit+0xc4>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <HAL_UART_MspInit+0xc4>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_UART_MspInit+0xc4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c20:	2307      	movs	r3, #7
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480d      	ldr	r0, [pc, #52]	; (8001c60 <HAL_UART_MspInit+0xc8>)
 8001c2c:	f000 ff44 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c30:	2308      	movs	r3, #8
 8001c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c40:	2307      	movs	r3, #7
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4806      	ldr	r0, [pc, #24]	; (8001c64 <HAL_UART_MspInit+0xcc>)
 8001c4c:	f000 ff34 	bl	8002ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c50:	bf00      	nop
 8001c52:	3728      	adds	r7, #40	; 0x28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40011000 	.word	0x40011000
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020000 	.word	0x40020000
 8001c64:	40020400 	.word	0x40020400

08001c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <NMI_Handler+0x4>

08001c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <HardFault_Handler+0x4>

08001c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <MemManage_Handler+0x4>

08001c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7e:	e7fe      	b.n	8001c7e <BusFault_Handler+0x4>

08001c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <UsageFault_Handler+0x4>

08001c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb4:	f000 f9ec 	bl	8002090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  CurrentRPM = 0;
 8001cc0:	4907      	ldr	r1, [pc, #28]	; (8001ce0 <TIM1_BRK_TIM9_IRQHandler+0x24>)
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9c1 2300 	strd	r2, r3, [r1]

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cce:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <TIM1_BRK_TIM9_IRQHandler+0x28>)
 8001cd0:	f003 fb3c 	bl	800534c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001cd4:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <TIM1_BRK_TIM9_IRQHandler+0x2c>)
 8001cd6:	f003 fb39 	bl	800534c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000518 	.word	0x20000518
 8001ce4:	200003f8 	.word	0x200003f8
 8001ce8:	20000488 	.word	0x20000488

08001cec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  // Set next Commutation states
  PrepareCommutation('F');
 8001cf0:	2046      	movs	r0, #70	; 0x46
 8001cf2:	f7ff fcbd 	bl	8001670 <PrepareCommutation>

  // Reset COMIF in SR register
  TIM1->SR &= ~TIM_SR_COMIF;
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8001cfc:	f023 0320 	bic.w	r3, r3, #32
 8001d00:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d02:	4803      	ldr	r0, [pc, #12]	; (8001d10 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 8001d04:	f003 fb22 	bl	800534c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	200003f8 	.word	0x200003f8
 8001d14:	00000000 	.word	0x00000000

08001d18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  uint32_t HallTime = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4825      	ldr	r0, [pc, #148]	; (8001db8 <TIM2_IRQHandler+0xa0>)
 8001d22:	f003 fd7b 	bl	800581c <HAL_TIM_ReadCapturedValue>
 8001d26:	6078      	str	r0, [r7, #4]
  if ( HallTime > 0 ) {
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d026      	beq.n	8001d7c <TIM2_IRQHandler+0x64>
	  CurrentRPM = 1 / ((HallTime * 6.0 / Fapb1clk) / 60);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7fe fbf0 	bl	8000514 <__aeabi_ui2d>
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <TIM2_IRQHandler+0xa4>)
 8001d3a:	f7fe fc65 	bl	8000608 <__aeabi_dmul>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	a31a      	add	r3, pc, #104	; (adr r3, 8001db0 <TIM2_IRQHandler+0x98>)
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	f7fe fd86 	bl	800085c <__aeabi_ddiv>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <TIM2_IRQHandler+0xa8>)
 8001d5e:	f7fe fd7d 	bl	800085c <__aeabi_ddiv>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	f04f 0000 	mov.w	r0, #0
 8001d6a:	4916      	ldr	r1, [pc, #88]	; (8001dc4 <TIM2_IRQHandler+0xac>)
 8001d6c:	f7fe fd76 	bl	800085c <__aeabi_ddiv>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4914      	ldr	r1, [pc, #80]	; (8001dc8 <TIM2_IRQHandler+0xb0>)
 8001d76:	e9c1 2300 	strd	r2, r3, [r1]
 8001d7a:	e006      	b.n	8001d8a <TIM2_IRQHandler+0x72>
  } else {
	  CurrentRPM = 0;
 8001d7c:	4912      	ldr	r1, [pc, #72]	; (8001dc8 <TIM2_IRQHandler+0xb0>)
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	e9c1 2300 	strd	r2, r3, [r1]
  }

  // Reset Timer 9 counter.
  TIM9->CNT = 0x0;
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <TIM2_IRQHandler+0xb4>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24

  // Set COMG bit in EGR
  TIM1->EGR |= TIM_EGR_COMG;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <TIM2_IRQHandler+0xb8>)
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <TIM2_IRQHandler+0xb8>)
 8001d96:	f043 0320 	orr.w	r3, r3, #32
 8001d9a:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d9c:	4806      	ldr	r0, [pc, #24]	; (8001db8 <TIM2_IRQHandler+0xa0>)
 8001d9e:	f003 fad5 	bl	800534c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	f3af 8000 	nop.w
 8001db0:	00000000 	.word	0x00000000
 8001db4:	4196e360 	.word	0x4196e360
 8001db8:	20000440 	.word	0x20000440
 8001dbc:	40180000 	.word	0x40180000
 8001dc0:	404e0000 	.word	0x404e0000
 8001dc4:	3ff00000 	.word	0x3ff00000
 8001dc8:	20000518 	.word	0x20000518
 8001dcc:	40014000 	.word	0x40014000
 8001dd0:	40010000 	.word	0x40010000

08001dd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <OTG_FS_IRQHandler+0x10>)
 8001dda:	f001 fa9f 	bl	800331c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20001a48 	.word	0x20001a48

08001de8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return 1;
 8001dec:	2301      	movs	r3, #1
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <_kill>:

int _kill(int pid, int sig)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e02:	f009 fd03 	bl	800b80c <__errno>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2216      	movs	r2, #22
 8001e0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_exit>:

void _exit (int status)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ffe7 	bl	8001df8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e2a:	e7fe      	b.n	8001e2a <_exit+0x12>

08001e2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	e00a      	b.n	8001e54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e3e:	f3af 8000 	nop.w
 8001e42:	4601      	mov	r1, r0
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	60ba      	str	r2, [r7, #8]
 8001e4a:	b2ca      	uxtb	r2, r1
 8001e4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	3301      	adds	r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	dbf0      	blt.n	8001e3e <_read+0x12>
  }

  return len;
 8001e5c:	687b      	ldr	r3, [r7, #4]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	e009      	b.n	8001e8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	60ba      	str	r2, [r7, #8]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	dbf1      	blt.n	8001e78 <_write+0x12>
  }
  return len;
 8001e94:	687b      	ldr	r3, [r7, #4]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <_close>:

int _close(int file)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ec6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <_isatty>:

int _isatty(int file)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ede:	2301      	movs	r3, #1
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f10:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <_sbrk+0x5c>)
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <_sbrk+0x60>)
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <_sbrk+0x64>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <_sbrk+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d207      	bcs.n	8001f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f38:	f009 fc68 	bl	800b80c <__errno>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	220c      	movs	r2, #12
 8001f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	e009      	b.n	8001f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4e:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <_sbrk+0x64>)
 8001f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20020000 	.word	0x20020000
 8001f68:	00000400 	.word	0x00000400
 8001f6c:	20000560 	.word	0x20000560
 8001f70:	200022c0 	.word	0x200022c0

08001f74 <SystemInit>:
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <SystemInit+0x20>)
 8001f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7e:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <SystemInit+0x20>)
 8001f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f9c:	480d      	ldr	r0, [pc, #52]	; (8001fd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f9e:	490e      	ldr	r1, [pc, #56]	; (8001fd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fa0:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fb4:	4c0b      	ldr	r4, [pc, #44]	; (8001fe4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fc2:	f7ff ffd7 	bl	8001f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fc6:	f009 fc27 	bl	800b818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fca:	f7fe ff93 	bl	8000ef4 <main>
  bx  lr    
 8001fce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd8:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8001fdc:	0800dd6c 	.word	0x0800dd6c
  ldr r2, =_sbss
 8001fe0:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8001fe4:	200022c0 	.word	0x200022c0

08001fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe8:	e7fe      	b.n	8001fe8 <ADC_IRQHandler>
	...

08001fec <HAL_Init>:
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <HAL_Init+0x40>)
 8001ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_Init+0x40>)
 8002002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <HAL_Init+0x40>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a07      	ldr	r2, [pc, #28]	; (800202c <HAL_Init+0x40>)
 800200e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	2003      	movs	r0, #3
 8002016:	f000 fd0d 	bl	8002a34 <HAL_NVIC_SetPriorityGrouping>
 800201a:	200f      	movs	r0, #15
 800201c:	f000 f808 	bl	8002030 <HAL_InitTick>
 8002020:	f7ff fbaa 	bl	8001778 <HAL_MspInit>
 8002024:	2300      	movs	r3, #0
 8002026:	4618      	mov	r0, r3
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023c00 	.word	0x40023c00

08002030 <HAL_InitTick>:
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_InitTick+0x54>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_InitTick+0x58>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002046:	fbb3 f3f1 	udiv	r3, r3, r1
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fd25 	bl	8002a9e <HAL_SYSTICK_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_InitTick+0x2e>
 800205a:	2301      	movs	r3, #1
 800205c:	e00e      	b.n	800207c <HAL_InitTick+0x4c>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b0f      	cmp	r3, #15
 8002062:	d80a      	bhi.n	800207a <HAL_InitTick+0x4a>
 8002064:	2200      	movs	r2, #0
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f000 fced 	bl	8002a4a <HAL_NVIC_SetPriority>
 8002070:	4a06      	ldr	r2, [pc, #24]	; (800208c <HAL_InitTick+0x5c>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	2300      	movs	r3, #0
 8002078:	e000      	b.n	800207c <HAL_InitTick+0x4c>
 800207a:	2301      	movs	r3, #1
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000024 	.word	0x20000024
 8002088:	2000002c 	.word	0x2000002c
 800208c:	20000028 	.word	0x20000028

08002090 <HAL_IncTick>:
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_IncTick+0x20>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_IncTick+0x24>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_IncTick+0x24>)
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	2000002c 	.word	0x2000002c
 80020b4:	20000564 	.word	0x20000564

080020b8 <HAL_GetTick>:
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_GetTick+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000564 	.word	0x20000564

080020d0 <HAL_Delay>:
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	f7ff ffee 	bl	80020b8 <HAL_GetTick>
 80020dc:	60b8      	str	r0, [r7, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d005      	beq.n	80020f6 <HAL_Delay+0x26>
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_Delay+0x44>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	bf00      	nop
 80020f8:	f7ff ffde 	bl	80020b8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	429a      	cmp	r2, r3
 8002106:	d8f7      	bhi.n	80020f8 <HAL_Delay+0x28>
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	2000002c 	.word	0x2000002c

08002118 <HAL_ADC_Init>:
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_ADC_Init+0x16>
 800212a:	2301      	movs	r3, #1
 800212c:	e033      	b.n	8002196 <HAL_ADC_Init+0x7e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <HAL_ADC_Init+0x32>
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff fb46 	bl	80017c8 <HAL_ADC_MspInit>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	645a      	str	r2, [r3, #68]	; 0x44
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	d118      	bne.n	8002188 <HAL_ADC_Init+0x70>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800215e:	f023 0302 	bic.w	r3, r3, #2
 8002162:	f043 0202 	orr.w	r2, r3, #2
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 fa96 	bl	800269c <ADC_Init>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	645a      	str	r2, [r3, #68]	; 0x44
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f023 0303 	bic.w	r3, r3, #3
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
 8002186:	e001      	b.n	800218c <HAL_ADC_Init+0x74>
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_ADC_Start>:
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_Start+0x1a>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e097      	b.n	80022ea <HAL_ADC_Start+0x14a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d018      	beq.n	8002202 <HAL_ADC_Start+0x62>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	4b45      	ldr	r3, [pc, #276]	; (80022f8 <HAL_ADC_Start+0x158>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a45      	ldr	r2, [pc, #276]	; (80022fc <HAL_ADC_Start+0x15c>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	0c9a      	lsrs	r2, r3, #18
 80021ec:	4613      	mov	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	e002      	b.n	80021fc <HAL_ADC_Start+0x5c>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f9      	bne.n	80021f6 <HAL_ADC_Start+0x56>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d15f      	bne.n	80022d0 <HAL_ADC_Start+0x130>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	641a      	str	r2, [r3, #64]	; 0x40
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <HAL_ADC_Start+0xa2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800223a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800224a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800224e:	d106      	bne.n	800225e <HAL_ADC_Start+0xbe>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002254:	f023 0206 	bic.w	r2, r3, #6
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	645a      	str	r2, [r3, #68]	; 0x44
 800225c:	e002      	b.n	8002264 <HAL_ADC_Start+0xc4>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	645a      	str	r2, [r3, #68]	; 0x44
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800226c:	4b24      	ldr	r3, [pc, #144]	; (8002300 <HAL_ADC_Start+0x160>)
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10f      	bne.n	80022a6 <HAL_ADC_Start+0x106>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d129      	bne.n	80022e8 <HAL_ADC_Start+0x148>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	e020      	b.n	80022e8 <HAL_ADC_Start+0x148>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a16      	ldr	r2, [pc, #88]	; (8002304 <HAL_ADC_Start+0x164>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d11b      	bne.n	80022e8 <HAL_ADC_Start+0x148>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d114      	bne.n	80022e8 <HAL_ADC_Start+0x148>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	e00b      	b.n	80022e8 <HAL_ADC_Start+0x148>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f043 0210 	orr.w	r2, r3, #16
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	641a      	str	r2, [r3, #64]	; 0x40
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	f043 0201 	orr.w	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	645a      	str	r2, [r3, #68]	; 0x44
 80022e8:	2300      	movs	r3, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000024 	.word	0x20000024
 80022fc:	431bde83 	.word	0x431bde83
 8002300:	40012300 	.word	0x40012300
 8002304:	40012000 	.word	0x40012000

08002308 <HAL_ADC_PollForConversion>:
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002324:	d113      	bne.n	800234e <HAL_ADC_PollForConversion+0x46>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002334:	d10b      	bne.n	800234e <HAL_ADC_PollForConversion+0x46>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f043 0220 	orr.w	r2, r3, #32
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800234a:	2301      	movs	r3, #1
 800234c:	e063      	b.n	8002416 <HAL_ADC_PollForConversion+0x10e>
 800234e:	f7ff feb3 	bl	80020b8 <HAL_GetTick>
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	e021      	b.n	800239a <HAL_ADC_PollForConversion+0x92>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d01d      	beq.n	800239a <HAL_ADC_PollForConversion+0x92>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <HAL_ADC_PollForConversion+0x6c>
 8002364:	f7ff fea8 	bl	80020b8 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d212      	bcs.n	800239a <HAL_ADC_PollForConversion+0x92>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b02      	cmp	r3, #2
 8002380:	d00b      	beq.n	800239a <HAL_ADC_PollForConversion+0x92>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f043 0204 	orr.w	r2, r3, #4
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002396:	2303      	movs	r3, #3
 8002398:	e03d      	b.n	8002416 <HAL_ADC_PollForConversion+0x10e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d1d6      	bne.n	8002356 <HAL_ADC_PollForConversion+0x4e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0212 	mvn.w	r2, #18
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d123      	bne.n	8002414 <HAL_ADC_PollForConversion+0x10c>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	7e1b      	ldrb	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d11f      	bne.n	8002414 <HAL_ADC_PollForConversion+0x10c>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d006      	beq.n	80023f0 <HAL_ADC_PollForConversion+0xe8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d111      	bne.n	8002414 <HAL_ADC_PollForConversion+0x10c>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <HAL_ADC_PollForConversion+0x10c>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	f043 0201 	orr.w	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
 8002414:	2300      	movs	r3, #0
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_ADC_GetValue>:
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_ADC_ConfigChannel>:
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x1c>
 8002450:	2302      	movs	r3, #2
 8002452:	e113      	b.n	800267c <HAL_ADC_ConfigChannel+0x244>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b09      	cmp	r3, #9
 8002462:	d925      	bls.n	80024b0 <HAL_ADC_ConfigChannel+0x78>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68d9      	ldr	r1, [r3, #12]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	4613      	mov	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4413      	add	r3, r2
 8002478:	3b1e      	subs	r3, #30
 800247a:	2207      	movs	r2, #7
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43da      	mvns	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	400a      	ands	r2, r1
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68d9      	ldr	r1, [r3, #12]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	b29b      	uxth	r3, r3
 800249a:	4618      	mov	r0, r3
 800249c:	4603      	mov	r3, r0
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4403      	add	r3, r0
 80024a2:	3b1e      	subs	r3, #30
 80024a4:	409a      	lsls	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	e022      	b.n	80024f6 <HAL_ADC_ConfigChannel+0xbe>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6919      	ldr	r1, [r3, #16]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	2207      	movs	r2, #7
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43da      	mvns	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	400a      	ands	r2, r1
 80024d2:	611a      	str	r2, [r3, #16]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6919      	ldr	r1, [r3, #16]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	4618      	mov	r0, r3
 80024e6:	4603      	mov	r3, r0
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4403      	add	r3, r0
 80024ec:	409a      	lsls	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	611a      	str	r2, [r3, #16]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d824      	bhi.n	8002548 <HAL_ADC_ConfigChannel+0x110>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	3b05      	subs	r3, #5
 8002510:	221f      	movs	r2, #31
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	400a      	ands	r2, r1
 800251e:	635a      	str	r2, [r3, #52]	; 0x34
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	4618      	mov	r0, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	3b05      	subs	r3, #5
 800253a:	fa00 f203 	lsl.w	r2, r0, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	635a      	str	r2, [r3, #52]	; 0x34
 8002546:	e04c      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x1aa>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b0c      	cmp	r3, #12
 800254e:	d824      	bhi.n	800259a <HAL_ADC_ConfigChannel+0x162>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	3b23      	subs	r3, #35	; 0x23
 8002562:	221f      	movs	r2, #31
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43da      	mvns	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	400a      	ands	r2, r1
 8002570:	631a      	str	r2, [r3, #48]	; 0x30
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	b29b      	uxth	r3, r3
 800257e:	4618      	mov	r0, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	3b23      	subs	r3, #35	; 0x23
 800258c:	fa00 f203 	lsl.w	r2, r0, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
 8002598:	e023      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x1aa>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	3b41      	subs	r3, #65	; 0x41
 80025ac:	221f      	movs	r2, #31
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	400a      	ands	r2, r1
 80025ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	4618      	mov	r0, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	3b41      	subs	r3, #65	; 0x41
 80025d6:	fa00 f203 	lsl.w	r2, r0, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80025e2:	4b29      	ldr	r3, [pc, #164]	; (8002688 <HAL_ADC_ConfigChannel+0x250>)
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a28      	ldr	r2, [pc, #160]	; (800268c <HAL_ADC_ConfigChannel+0x254>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d10f      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x1d8>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b12      	cmp	r3, #18
 80025f6:	d10b      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x1d8>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	605a      	str	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a1d      	ldr	r2, [pc, #116]	; (800268c <HAL_ADC_ConfigChannel+0x254>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d12b      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x23a>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1c      	ldr	r2, [pc, #112]	; (8002690 <HAL_ADC_ConfigChannel+0x258>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d003      	beq.n	800262c <HAL_ADC_ConfigChannel+0x1f4>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b11      	cmp	r3, #17
 800262a:	d122      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x23a>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a11      	ldr	r2, [pc, #68]	; (8002690 <HAL_ADC_ConfigChannel+0x258>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d111      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x23a>
 800264e:	4b11      	ldr	r3, [pc, #68]	; (8002694 <HAL_ADC_ConfigChannel+0x25c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a11      	ldr	r2, [pc, #68]	; (8002698 <HAL_ADC_ConfigChannel+0x260>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	0c9a      	lsrs	r2, r3, #18
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	e002      	b.n	800266c <HAL_ADC_ConfigChannel+0x234>
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	3b01      	subs	r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f9      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x22e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800267a:	2300      	movs	r3, #0
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	40012300 	.word	0x40012300
 800268c:	40012000 	.word	0x40012000
 8002690:	10000012 	.word	0x10000012
 8002694:	20000024 	.word	0x20000024
 8002698:	431bde83 	.word	0x431bde83

0800269c <ADC_Init>:
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	4b79      	ldr	r3, [pc, #484]	; (800288c <ADC_Init+0x1f0>)
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	431a      	orrs	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	021a      	lsls	r2, r3, #8
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6899      	ldr	r1, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	4a58      	ldr	r2, [pc, #352]	; (8002890 <ADC_Init+0x1f4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d022      	beq.n	800277a <ADC_Init+0xde>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6899      	ldr	r1, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6899      	ldr	r1, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	e00f      	b.n	800279a <ADC_Init+0xfe>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0202 	bic.w	r2, r2, #2
 80027a8:	609a      	str	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6899      	ldr	r1, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7e1b      	ldrb	r3, [r3, #24]
 80027b4:	005a      	lsls	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	609a      	str	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d01b      	beq.n	8002800 <ADC_Init+0x164>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027e6:	605a      	str	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6859      	ldr	r1, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	3b01      	subs	r3, #1
 80027f4:	035a      	lsls	r2, r3, #13
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	e007      	b.n	8002810 <ADC_Init+0x174>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	3b01      	subs	r3, #1
 800282c:	051a      	lsls	r2, r3, #20
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6899      	ldr	r1, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002852:	025a      	lsls	r2, r3, #9
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6899      	ldr	r1, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	029a      	lsls	r2, r3, #10
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40012300 	.word	0x40012300
 8002890:	0f000001 	.word	0x0f000001

08002894 <__NVIC_SetPriorityGrouping>:
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <__NVIC_SetPriorityGrouping+0x44>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b0:	4013      	ands	r3, r2
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	021a      	lsls	r2, r3, #8
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	60d3      	str	r3, [r2, #12]
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_GetPriorityGrouping>:
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <__NVIC_GetPriorityGrouping+0x18>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	0a1b      	lsrs	r3, r3, #8
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_EnableIRQ>:
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	2b00      	cmp	r3, #0
 8002908:	db0b      	blt.n	8002922 <__NVIC_EnableIRQ+0x2a>
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	f003 021f 	and.w	r2, r3, #31
 8002910:	4907      	ldr	r1, [pc, #28]	; (8002930 <__NVIC_EnableIRQ+0x38>)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	2001      	movs	r0, #1
 800291a:	fa00 f202 	lsl.w	r2, r0, r2
 800291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000e100 	.word	0xe000e100

08002934 <__NVIC_SetPriority>:
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	71fb      	strb	r3, [r7, #7]
 8002940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002944:	2b00      	cmp	r3, #0
 8002946:	db0a      	blt.n	800295e <__NVIC_SetPriority+0x2a>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	b2da      	uxtb	r2, r3
 800294c:	490c      	ldr	r1, [pc, #48]	; (8002980 <__NVIC_SetPriority+0x4c>)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	0112      	lsls	r2, r2, #4
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	440b      	add	r3, r1
 8002958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800295c:	e00a      	b.n	8002974 <__NVIC_SetPriority+0x40>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4908      	ldr	r1, [pc, #32]	; (8002984 <__NVIC_SetPriority+0x50>)
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	3b04      	subs	r3, #4
 800296c:	0112      	lsls	r2, r2, #4
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	440b      	add	r3, r1
 8002972:	761a      	strb	r2, [r3, #24]
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000e100 	.word	0xe000e100
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <NVIC_EncodePriority>:
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	; 0x24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f1c3 0307 	rsb	r3, r3, #7
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	bf28      	it	cs
 80029a6:	2304      	movcs	r3, #4
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3304      	adds	r3, #4
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d902      	bls.n	80029b8 <NVIC_EncodePriority+0x30>
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3b03      	subs	r3, #3
 80029b6:	e000      	b.n	80029ba <NVIC_EncodePriority+0x32>
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	f04f 32ff 	mov.w	r2, #4294967295
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43da      	mvns	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	401a      	ands	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	409a      	lsls	r2, r3
 80029d0:	f04f 31ff 	mov.w	r1, #4294967295
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	43d9      	mvns	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	400b      	ands	r3, r1
 80029e0:	4313      	orrs	r3, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	3724      	adds	r7, #36	; 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <SysTick_Config>:
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a00:	d301      	bcc.n	8002a06 <SysTick_Config+0x16>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e00f      	b.n	8002a26 <SysTick_Config+0x36>
 8002a06:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <SysTick_Config+0x40>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	6053      	str	r3, [r2, #4]
 8002a0e:	210f      	movs	r1, #15
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295
 8002a14:	f7ff ff8e 	bl	8002934 <__NVIC_SetPriority>
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <SysTick_Config+0x40>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <SysTick_Config+0x40>)
 8002a20:	2207      	movs	r2, #7
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	2300      	movs	r3, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	e000e010 	.word	0xe000e010

08002a34 <HAL_NVIC_SetPriorityGrouping>:
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff ff29 	bl	8002894 <__NVIC_SetPriorityGrouping>
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_NVIC_SetPriority>:
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b086      	sub	sp, #24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	73fb      	strb	r3, [r7, #15]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	f7ff ff3e 	bl	80028dc <__NVIC_GetPriorityGrouping>
 8002a60:	6178      	str	r0, [r7, #20]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	6978      	ldr	r0, [r7, #20]
 8002a68:	f7ff ff8e 	bl	8002988 <NVIC_EncodePriority>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff ff5d 	bl	8002934 <__NVIC_SetPriority>
 8002a7a:	bf00      	nop
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_NVIC_EnableIRQ>:
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	71fb      	strb	r3, [r7, #7]
 8002a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff31 	bl	80028f8 <__NVIC_EnableIRQ>
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_SYSTICK_Config>:
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff ffa2 	bl	80029f0 <SysTick_Config>
 8002aac:	4603      	mov	r3, r0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_GPIO_Init>:
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	; 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	e159      	b.n	8002d88 <HAL_GPIO_Init+0x2d0>
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	f040 8148 	bne.w	8002d82 <HAL_GPIO_Init+0x2ca>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d005      	beq.n	8002b0a <HAL_GPIO_Init+0x52>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d130      	bne.n	8002b6c <HAL_GPIO_Init+0xb4>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	2201      	movs	r2, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 0201 	and.w	r2, r3, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d017      	beq.n	8002ba8 <HAL_GPIO_Init+0xf0>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	60da      	str	r2, [r3, #12]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d123      	bne.n	8002bfc <HAL_GPIO_Init+0x144>
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	08da      	lsrs	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3208      	adds	r2, #8
 8002bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	220f      	movs	r2, #15
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	08da      	lsrs	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3208      	adds	r2, #8
 8002bf6:	69b9      	ldr	r1, [r7, #24]
 8002bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	2203      	movs	r2, #3
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0203 	and.w	r2, r3, #3
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80a2 	beq.w	8002d82 <HAL_GPIO_Init+0x2ca>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b57      	ldr	r3, [pc, #348]	; (8002da0 <HAL_GPIO_Init+0x2e8>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	4a56      	ldr	r2, [pc, #344]	; (8002da0 <HAL_GPIO_Init+0x2e8>)
 8002c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4e:	4b54      	ldr	r3, [pc, #336]	; (8002da0 <HAL_GPIO_Init+0x2e8>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4a52      	ldr	r2, [pc, #328]	; (8002da4 <HAL_GPIO_Init+0x2ec>)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	3302      	adds	r3, #2
 8002c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c66:	61bb      	str	r3, [r7, #24]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	220f      	movs	r2, #15
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a49      	ldr	r2, [pc, #292]	; (8002da8 <HAL_GPIO_Init+0x2f0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d019      	beq.n	8002cba <HAL_GPIO_Init+0x202>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a48      	ldr	r2, [pc, #288]	; (8002dac <HAL_GPIO_Init+0x2f4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_GPIO_Init+0x1fe>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a47      	ldr	r2, [pc, #284]	; (8002db0 <HAL_GPIO_Init+0x2f8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00d      	beq.n	8002cb2 <HAL_GPIO_Init+0x1fa>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a46      	ldr	r2, [pc, #280]	; (8002db4 <HAL_GPIO_Init+0x2fc>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <HAL_GPIO_Init+0x1f6>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a45      	ldr	r2, [pc, #276]	; (8002db8 <HAL_GPIO_Init+0x300>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <HAL_GPIO_Init+0x1f2>
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	e008      	b.n	8002cbc <HAL_GPIO_Init+0x204>
 8002caa:	2307      	movs	r3, #7
 8002cac:	e006      	b.n	8002cbc <HAL_GPIO_Init+0x204>
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e004      	b.n	8002cbc <HAL_GPIO_Init+0x204>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e002      	b.n	8002cbc <HAL_GPIO_Init+0x204>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_GPIO_Init+0x204>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	f002 0203 	and.w	r2, r2, #3
 8002cc2:	0092      	lsls	r2, r2, #2
 8002cc4:	4093      	lsls	r3, r2
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	4935      	ldr	r1, [pc, #212]	; (8002da4 <HAL_GPIO_Init+0x2ec>)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	089b      	lsrs	r3, r3, #2
 8002cd2:	3302      	adds	r3, #2
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002cda:	4b38      	ldr	r3, [pc, #224]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_Init+0x246>
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	4a2f      	ldr	r2, [pc, #188]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	6093      	str	r3, [r2, #8]
 8002d04:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x270>
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
 8002d28:	4a24      	ldr	r2, [pc, #144]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	60d3      	str	r3, [r2, #12]
 8002d2e:	4b23      	ldr	r3, [pc, #140]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_Init+0x29a>
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	4a1a      	ldr	r2, [pc, #104]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	6053      	str	r3, [r2, #4]
 8002d58:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x2c4>
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
 8002d7c:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3301      	adds	r3, #1
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2b0f      	cmp	r3, #15
 8002d8c:	f67f aea2 	bls.w	8002ad4 <HAL_GPIO_Init+0x1c>
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	3724      	adds	r7, #36	; 0x24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40013800 	.word	0x40013800
 8002da8:	40020000 	.word	0x40020000
 8002dac:	40020400 	.word	0x40020400
 8002db0:	40020800 	.word	0x40020800
 8002db4:	40020c00 	.word	0x40020c00
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40013c00 	.word	0x40013c00

08002dc0 <HAL_GPIO_WritePin>:
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	707b      	strb	r3, [r7, #1]
 8002dd0:	787b      	ldrb	r3, [r7, #1]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_WritePin+0x1e>
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	619a      	str	r2, [r3, #24]
 8002ddc:	e003      	b.n	8002de6 <HAL_GPIO_WritePin+0x26>
 8002dde:	887b      	ldrh	r3, [r7, #2]
 8002de0:	041a      	lsls	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	619a      	str	r2, [r3, #24]
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_I2C_Init>:
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_I2C_Init+0x12>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e12b      	b.n	800305e <HAL_I2C_Init+0x26a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_I2C_Init+0x2c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fe fd18 	bl	8001850 <HAL_I2C_MspInit>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2224      	movs	r2, #36	; 0x24
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f001 ffbe 	bl	8004dd8 <HAL_RCC_GetPCLK1Freq>
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4a81      	ldr	r2, [pc, #516]	; (8003068 <HAL_I2C_Init+0x274>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d807      	bhi.n	8002e78 <HAL_I2C_Init+0x84>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a80      	ldr	r2, [pc, #512]	; (800306c <HAL_I2C_Init+0x278>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	bf94      	ite	ls
 8002e70:	2301      	movls	r3, #1
 8002e72:	2300      	movhi	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e006      	b.n	8002e86 <HAL_I2C_Init+0x92>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4a7d      	ldr	r2, [pc, #500]	; (8003070 <HAL_I2C_Init+0x27c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	bf94      	ite	ls
 8002e80:	2301      	movls	r3, #1
 8002e82:	2300      	movhi	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Init+0x9a>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0e7      	b.n	800305e <HAL_I2C_Init+0x26a>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4a78      	ldr	r2, [pc, #480]	; (8003074 <HAL_I2C_Init+0x280>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	0c9b      	lsrs	r3, r3, #18
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4a6a      	ldr	r2, [pc, #424]	; (8003068 <HAL_I2C_Init+0x274>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d802      	bhi.n	8002ec8 <HAL_I2C_Init+0xd4>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	e009      	b.n	8002edc <HAL_I2C_Init+0xe8>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ece:	fb02 f303 	mul.w	r3, r2, r3
 8002ed2:	4a69      	ldr	r2, [pc, #420]	; (8003078 <HAL_I2C_Init+0x284>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	099b      	lsrs	r3, r3, #6
 8002eda:	3301      	adds	r3, #1
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6213      	str	r3, [r2, #32]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	495c      	ldr	r1, [pc, #368]	; (8003068 <HAL_I2C_Init+0x274>)
 8002ef8:	428b      	cmp	r3, r1
 8002efa:	d819      	bhi.n	8002f30 <HAL_I2C_Init+0x13c>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e59      	subs	r1, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f0a:	1c59      	adds	r1, r3, #1
 8002f0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f10:	400b      	ands	r3, r1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_I2C_Init+0x138>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1e59      	subs	r1, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2a:	e051      	b.n	8002fd0 <HAL_I2C_Init+0x1dc>
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	e04f      	b.n	8002fd0 <HAL_I2C_Init+0x1dc>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d111      	bne.n	8002f5c <HAL_I2C_Init+0x168>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1e58      	subs	r0, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	440b      	add	r3, r1
 8002f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e012      	b.n	8002f82 <HAL_I2C_Init+0x18e>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1e58      	subs	r0, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	0099      	lsls	r1, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_I2C_Init+0x196>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e022      	b.n	8002fd0 <HAL_I2C_Init+0x1dc>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10e      	bne.n	8002fb0 <HAL_I2C_Init+0x1bc>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1e58      	subs	r0, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6859      	ldr	r1, [r3, #4]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	440b      	add	r3, r1
 8002fa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fae:	e00f      	b.n	8002fd0 <HAL_I2C_Init+0x1dc>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1e58      	subs	r0, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	0099      	lsls	r1, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	6809      	ldr	r1, [r1, #0]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61cb      	str	r3, [r1, #28]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69da      	ldr	r2, [r3, #28]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ffe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6911      	ldr	r1, [r2, #16]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68d2      	ldr	r2, [r2, #12]
 800300a:	4311      	orrs	r1, r2
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	430b      	orrs	r3, r1
 8003012:	6093      	str	r3, [r2, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	60da      	str	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0201 	orr.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	641a      	str	r2, [r3, #64]	; 0x40
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800305c:	2300      	movs	r3, #0
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	000186a0 	.word	0x000186a0
 800306c:	001e847f 	.word	0x001e847f
 8003070:	003d08ff 	.word	0x003d08ff
 8003074:	431bde83 	.word	0x431bde83
 8003078:	10624dd3 	.word	0x10624dd3

0800307c <HAL_PCD_Init>:
 800307c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307e:	b08f      	sub	sp, #60	; 0x3c
 8003080:	af0a      	add	r7, sp, #40	; 0x28
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_PCD_Init+0x12>
 800308a:	2301      	movs	r3, #1
 800308c:	e10f      	b.n	80032ae <HAL_PCD_Init+0x232>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d106      	bne.n	80030ae <HAL_PCD_Init+0x32>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f007 fab3 	bl	800a614 <HAL_PCD_MspInit>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2203      	movs	r2, #3
 80030b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d102      	bne.n	80030c8 <HAL_PCD_Init+0x4c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	611a      	str	r2, [r3, #16]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f003 fd9a 	bl	8006c06 <USB_DisableGlobalInt>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	687e      	ldr	r6, [r7, #4]
 80030da:	466d      	mov	r5, sp
 80030dc:	f106 0410 	add.w	r4, r6, #16
 80030e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80030f0:	1d33      	adds	r3, r6, #4
 80030f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030f4:	6838      	ldr	r0, [r7, #0]
 80030f6:	f003 fc71 	bl	80069dc <USB_CoreInit>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_PCD_Init+0x90>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8003108:	2301      	movs	r3, #1
 800310a:	e0d0      	b.n	80032ae <HAL_PCD_Init+0x232>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f003 fd88 	bl	8006c28 <USB_SetCurrentMode>
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	e04a      	b.n	80031b4 <HAL_PCD_Init+0x138>
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	333d      	adds	r3, #61	; 0x3d
 800312e:	2201      	movs	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	333c      	adds	r3, #60	; 0x3c
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	b298      	uxth	r0, r3
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	3344      	adds	r3, #68	; 0x44
 800315a:	4602      	mov	r2, r0
 800315c:	801a      	strh	r2, [r3, #0]
 800315e:	7bfa      	ldrb	r2, [r7, #15]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	3340      	adds	r3, #64	; 0x40
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	3348      	adds	r3, #72	; 0x48
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	334c      	adds	r3, #76	; 0x4c
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	3354      	adds	r3, #84	; 0x54
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	3301      	adds	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d3af      	bcc.n	800311e <HAL_PCD_Init+0xa2>
 80031be:	2300      	movs	r3, #0
 80031c0:	73fb      	strb	r3, [r7, #15]
 80031c2:	e044      	b.n	800324e <HAL_PCD_Init+0x1d2>
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	7bfa      	ldrb	r2, [r7, #15]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	701a      	strb	r2, [r3, #0]
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	3301      	adds	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
 800324e:	7bfa      	ldrb	r2, [r7, #15]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	d3b5      	bcc.n	80031c4 <HAL_PCD_Init+0x148>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	687e      	ldr	r6, [r7, #4]
 8003260:	466d      	mov	r5, sp
 8003262:	f106 0410 	add.w	r4, r6, #16
 8003266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800326a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800326c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800326e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003272:	e885 0003 	stmia.w	r5, {r0, r1}
 8003276:	1d33      	adds	r3, r6, #4
 8003278:	cb0e      	ldmia	r3, {r1, r2, r3}
 800327a:	6838      	ldr	r0, [r7, #0]
 800327c:	f003 fd20 	bl	8006cc0 <USB_DevInit>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_PCD_Init+0x216>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2202      	movs	r2, #2
 800328a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 800328e:	2301      	movs	r3, #1
 8003290:	e00d      	b.n	80032ae <HAL_PCD_Init+0x232>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 fe6f 	bl	8007f8a <USB_DevDisconnect>
 80032ac:	2300      	movs	r3, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032b6 <HAL_PCD_Start>:
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_PCD_Start+0x1c>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e020      	b.n	8003314 <HAL_PCD_Start+0x5e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d109      	bne.n	80032f6 <HAL_PCD_Start+0x40>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d005      	beq.n	80032f6 <HAL_PCD_Start+0x40>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	639a      	str	r2, [r3, #56]	; 0x38
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f003 fc72 	bl	8006be4 <USB_EnableGlobalInt>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f004 fe1f 	bl	8007f48 <USB_DevConnect>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003312:	2300      	movs	r3, #0
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_PCD_IRQHandler>:
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b08d      	sub	sp, #52	; 0x34
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	623b      	str	r3, [r7, #32]
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f004 fedd 	bl	80080f2 <USB_GetMode>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	f040 848a 	bne.w	8003c54 <HAL_PCD_IRQHandler+0x938>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f004 fe41 	bl	8007fcc <USB_ReadInterrupts>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8480 	beq.w	8003c52 <HAL_PCD_IRQHandler+0x936>
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	0a1b      	lsrs	r3, r3, #8
 800335c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f004 fe2e 	bl	8007fcc <USB_ReadInterrupts>
 8003370:	4603      	mov	r3, r0
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b02      	cmp	r3, #2
 8003378:	d107      	bne.n	800338a <HAL_PCD_IRQHandler+0x6e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f002 0202 	and.w	r2, r2, #2
 8003388:	615a      	str	r2, [r3, #20]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f004 fe1c 	bl	8007fcc <USB_ReadInterrupts>
 8003394:	4603      	mov	r3, r0
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b10      	cmp	r3, #16
 800339c:	d161      	bne.n	8003462 <HAL_PCD_IRQHandler+0x146>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699a      	ldr	r2, [r3, #24]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0210 	bic.w	r2, r2, #16
 80033ac:	619a      	str	r2, [r3, #24]
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	61bb      	str	r3, [r7, #24]
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f003 020f 	and.w	r2, r3, #15
 80033ba:	4613      	mov	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	3304      	adds	r3, #4
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	0c5b      	lsrs	r3, r3, #17
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d124      	bne.n	8003424 <HAL_PCD_IRQHandler+0x108>
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d035      	beq.n	8003452 <HAL_PCD_IRQHandler+0x136>
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	6919      	ldr	r1, [r3, #16]
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	6a38      	ldr	r0, [r7, #32]
 80033fa:	f004 fc53 	bl	8007ca4 <USB_ReadPacket>
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800340a:	441a      	add	r2, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	611a      	str	r2, [r3, #16]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	6a1a      	ldr	r2, [r3, #32]
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800341c:	441a      	add	r2, r3
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	621a      	str	r2, [r3, #32]
 8003422:	e016      	b.n	8003452 <HAL_PCD_IRQHandler+0x136>
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	0c5b      	lsrs	r3, r3, #17
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	2b06      	cmp	r3, #6
 800342e:	d110      	bne.n	8003452 <HAL_PCD_IRQHandler+0x136>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003436:	2208      	movs	r2, #8
 8003438:	4619      	mov	r1, r3
 800343a:	6a38      	ldr	r0, [r7, #32]
 800343c:	f004 fc32 	bl	8007ca4 <USB_ReadPacket>
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	6a1a      	ldr	r2, [r3, #32]
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800344c:	441a      	add	r2, r3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	621a      	str	r2, [r3, #32]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699a      	ldr	r2, [r3, #24]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0210 	orr.w	r2, r2, #16
 8003460:	619a      	str	r2, [r3, #24]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f004 fdb0 	bl	8007fcc <USB_ReadInterrupts>
 800346c:	4603      	mov	r3, r0
 800346e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003472:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003476:	f040 80a7 	bne.w	80035c8 <HAL_PCD_IRQHandler+0x2ac>
 800347a:	2300      	movs	r3, #0
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f004 fdb5 	bl	8007ff2 <USB_ReadDevAllOutEpInterrupt>
 8003488:	62b8      	str	r0, [r7, #40]	; 0x28
 800348a:	e099      	b.n	80035c0 <HAL_PCD_IRQHandler+0x2a4>
 800348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 808e 	beq.w	80035b4 <HAL_PCD_IRQHandler+0x298>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	4611      	mov	r1, r2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f004 fdd9 	bl	800805a <USB_ReadDevOutEPInterrupt>
 80034a8:	6138      	str	r0, [r7, #16]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00c      	beq.n	80034ce <HAL_PCD_IRQHandler+0x1b2>
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c0:	461a      	mov	r2, r3
 80034c2:	2301      	movs	r3, #1
 80034c4:	6093      	str	r3, [r2, #8]
 80034c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fec3 	bl	8004254 <PCD_EP_OutXfrComplete_int>
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00c      	beq.n	80034f2 <HAL_PCD_IRQHandler+0x1d6>
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e4:	461a      	mov	r2, r3
 80034e6:	2308      	movs	r3, #8
 80034e8:	6093      	str	r3, [r2, #8]
 80034ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 ff99 	bl	8004424 <PCD_EP_OutSetupPacket_int>
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_PCD_IRQHandler+0x1f2>
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003508:	461a      	mov	r2, r3
 800350a:	2310      	movs	r3, #16
 800350c:	6093      	str	r3, [r2, #8]
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d030      	beq.n	800357a <HAL_PCD_IRQHandler+0x25e>
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003520:	2b80      	cmp	r3, #128	; 0x80
 8003522:	d109      	bne.n	8003538 <HAL_PCD_IRQHandler+0x21c>
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003536:	6053      	str	r3, [r2, #4]
 8003538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	3304      	adds	r3, #4
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	78db      	ldrb	r3, [r3, #3]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d108      	bne.n	8003568 <HAL_PCD_IRQHandler+0x24c>
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2200      	movs	r2, #0
 800355a:	70da      	strb	r2, [r3, #3]
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	b2db      	uxtb	r3, r3
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f007 f952 	bl	800a80c <HAL_PCD_ISOOUTIncompleteCallback>
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003574:	461a      	mov	r2, r3
 8003576:	2302      	movs	r3, #2
 8003578:	6093      	str	r3, [r2, #8]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_PCD_IRQHandler+0x27a>
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003590:	461a      	mov	r2, r3
 8003592:	2320      	movs	r3, #32
 8003594:	6093      	str	r3, [r2, #8]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d009      	beq.n	80035b4 <HAL_PCD_IRQHandler+0x298>
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ac:	461a      	mov	r2, r3
 80035ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035b2:	6093      	str	r3, [r2, #8]
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	3301      	adds	r3, #1
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
 80035c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f47f af62 	bne.w	800348c <HAL_PCD_IRQHandler+0x170>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f004 fcfd 	bl	8007fcc <USB_ReadInterrupts>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035dc:	f040 80db 	bne.w	8003796 <HAL_PCD_IRQHandler+0x47a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f004 fd1e 	bl	8008026 <USB_ReadDevAllInEpInterrupt>
 80035ea:	62b8      	str	r0, [r7, #40]	; 0x28
 80035ec:	2300      	movs	r3, #0
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
 80035f0:	e0cd      	b.n	800378e <HAL_PCD_IRQHandler+0x472>
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 80c2 	beq.w	8003782 <HAL_PCD_IRQHandler+0x466>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f004 fd44 	bl	8008096 <USB_ReadDevInEPInterrupt>
 800360e:	6138      	str	r0, [r7, #16]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d057      	beq.n	80036ca <HAL_PCD_IRQHandler+0x3ae>
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	2201      	movs	r2, #1
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	43db      	mvns	r3, r3
 8003634:	69f9      	ldr	r1, [r7, #28]
 8003636:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800363a:	4013      	ands	r3, r2
 800363c:	634b      	str	r3, [r1, #52]	; 0x34
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	4413      	add	r3, r2
 8003646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364a:	461a      	mov	r2, r3
 800364c:	2301      	movs	r3, #1
 800364e:	6093      	str	r3, [r2, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d132      	bne.n	80036be <HAL_PCD_IRQHandler+0x3a2>
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	334c      	adds	r3, #76	; 0x4c
 8003668:	6819      	ldr	r1, [r3, #0]
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4403      	add	r3, r0
 8003678:	3348      	adds	r3, #72	; 0x48
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4419      	add	r1, r3
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4403      	add	r3, r0
 800368c:	334c      	adds	r3, #76	; 0x4c
 800368e:	6019      	str	r1, [r3, #0]
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	2b00      	cmp	r3, #0
 8003694:	d113      	bne.n	80036be <HAL_PCD_IRQHandler+0x3a2>
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3354      	adds	r3, #84	; 0x54
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d108      	bne.n	80036be <HAL_PCD_IRQHandler+0x3a2>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036b6:	461a      	mov	r2, r3
 80036b8:	2101      	movs	r1, #1
 80036ba:	f004 fd4b 	bl	8008154 <USB_EP0_OutStart>
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	4619      	mov	r1, r3
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f007 f826 	bl	800a716 <HAL_PCD_DataInStageCallback>
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_PCD_IRQHandler+0x3ca>
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e0:	461a      	mov	r2, r3
 80036e2:	2308      	movs	r3, #8
 80036e4:	6093      	str	r3, [r2, #8]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_PCD_IRQHandler+0x3e6>
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fc:	461a      	mov	r2, r3
 80036fe:	2310      	movs	r3, #16
 8003700:	6093      	str	r3, [r2, #8]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_PCD_IRQHandler+0x402>
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003718:	461a      	mov	r2, r3
 800371a:	2340      	movs	r3, #64	; 0x40
 800371c:	6093      	str	r3, [r2, #8]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d023      	beq.n	8003770 <HAL_PCD_IRQHandler+0x454>
 8003728:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800372a:	6a38      	ldr	r0, [r7, #32]
 800372c:	f003 fc2c 	bl	8006f88 <USB_FlushTxFifo>
 8003730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	3338      	adds	r3, #56	; 0x38
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	4413      	add	r3, r2
 8003740:	3304      	adds	r3, #4
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	78db      	ldrb	r3, [r3, #3]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d108      	bne.n	800375e <HAL_PCD_IRQHandler+0x442>
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2200      	movs	r2, #0
 8003750:	70da      	strb	r2, [r3, #3]
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	b2db      	uxtb	r3, r3
 8003756:	4619      	mov	r1, r3
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f007 f869 	bl	800a830 <HAL_PCD_ISOINIncompleteCallback>
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376a:	461a      	mov	r2, r3
 800376c:	2302      	movs	r3, #2
 800376e:	6093      	str	r3, [r2, #8]
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_PCD_IRQHandler+0x466>
 800377a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 fcdb 	bl	8004138 <PCD_WriteEmptyTxFifo>
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	3301      	adds	r3, #1
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378a:	085b      	lsrs	r3, r3, #1
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	2b00      	cmp	r3, #0
 8003792:	f47f af2e 	bne.w	80035f2 <HAL_PCD_IRQHandler+0x2d6>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f004 fc16 	bl	8007fcc <USB_ReadInterrupts>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037aa:	d122      	bne.n	80037f2 <HAL_PCD_IRQHandler+0x4d6>
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	6053      	str	r3, [r2, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d108      	bne.n	80037dc <HAL_PCD_IRQHandler+0x4c0>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 80037d2:	2100      	movs	r1, #0
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fec3 	bl	8004560 <HAL_PCDEx_LPM_Callback>
 80037da:	e002      	b.n	80037e2 <HAL_PCD_IRQHandler+0x4c6>
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f007 f807 	bl	800a7f0 <HAL_PCD_ResumeCallback>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80037f0:	615a      	str	r2, [r3, #20]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f004 fbe8 	bl	8007fcc <USB_ReadInterrupts>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003806:	d112      	bne.n	800382e <HAL_PCD_IRQHandler+0x512>
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b01      	cmp	r3, #1
 8003816:	d102      	bne.n	800381e <HAL_PCD_IRQHandler+0x502>
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f006 ffc3 	bl	800a7a4 <HAL_PCD_SuspendCallback>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695a      	ldr	r2, [r3, #20]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800382c:	615a      	str	r2, [r3, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f004 fbca 	bl	8007fcc <USB_ReadInterrupts>
 8003838:	4603      	mov	r3, r0
 800383a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800383e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003842:	f040 80b7 	bne.w	80039b4 <HAL_PCD_IRQHandler+0x698>
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	6053      	str	r3, [r2, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2110      	movs	r1, #16
 8003860:	4618      	mov	r0, r3
 8003862:	f003 fb91 	bl	8006f88 <USB_FlushTxFifo>
 8003866:	2300      	movs	r3, #0
 8003868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800386a:	e046      	b.n	80038fa <HAL_PCD_IRQHandler+0x5de>
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003878:	461a      	mov	r2, r3
 800387a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800387e:	6093      	str	r3, [r2, #8]
 8003880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003890:	0151      	lsls	r1, r2, #5
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	440a      	add	r2, r1
 8003896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800389a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ac:	461a      	mov	r2, r3
 80038ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038b2:	6093      	str	r3, [r2, #8]
 80038b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038c4:	0151      	lsls	r1, r2, #5
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	440a      	add	r2, r1
 80038ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038e4:	0151      	lsls	r1, r2, #5
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	440a      	add	r2, r1
 80038ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f6:	3301      	adds	r3, #1
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003900:	429a      	cmp	r2, r3
 8003902:	d3b3      	bcc.n	800386c <HAL_PCD_IRQHandler+0x550>
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003912:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003916:	61d3      	str	r3, [r2, #28]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	2b00      	cmp	r3, #0
 800391e:	d016      	beq.n	800394e <HAL_PCD_IRQHandler+0x632>
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003930:	f043 030b 	orr.w	r3, r3, #11
 8003934:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	69fa      	ldr	r2, [r7, #28]
 8003942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003946:	f043 030b 	orr.w	r3, r3, #11
 800394a:	6453      	str	r3, [r2, #68]	; 0x44
 800394c:	e015      	b.n	800397a <HAL_PCD_IRQHandler+0x65e>
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800395c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003960:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003964:	6153      	str	r3, [r2, #20]
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003974:	f043 030b 	orr.w	r3, r3, #11
 8003978:	6113      	str	r3, [r2, #16]
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003988:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	b2d9      	uxtb	r1, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800399e:	461a      	mov	r2, r3
 80039a0:	f004 fbd8 	bl	8008154 <USB_EP0_OutStart>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80039b2:	615a      	str	r2, [r3, #20]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f004 fb07 	bl	8007fcc <USB_ReadInterrupts>
 80039be:	4603      	mov	r3, r0
 80039c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c8:	d124      	bne.n	8003a14 <HAL_PCD_IRQHandler+0x6f8>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f004 fb9d 	bl	800810e <USB_ActivateSetup>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f003 fb52 	bl	8007082 <USB_GetDevSpeed>
 80039de:	4603      	mov	r3, r0
 80039e0:	461a      	mov	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	60da      	str	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681c      	ldr	r4, [r3, #0]
 80039ea:	f001 f9e9 	bl	8004dc0 <HAL_RCC_GetHCLKFreq>
 80039ee:	4601      	mov	r1, r0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	4620      	mov	r0, r4
 80039fa:	f003 f851 	bl	8006aa0 <USB_SetTurnaroundTime>
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f006 feb1 	bl	800a766 <HAL_PCD_ResetCallback>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695a      	ldr	r2, [r3, #20]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003a12:	615a      	str	r2, [r3, #20]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f004 fad7 	bl	8007fcc <USB_ReadInterrupts>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d10a      	bne.n	8003a3e <HAL_PCD_IRQHandler+0x722>
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f006 fe8e 	bl	800a74a <HAL_PCD_SOFCallback>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695a      	ldr	r2, [r3, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f002 0208 	and.w	r2, r2, #8
 8003a3c:	615a      	str	r2, [r3, #20]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f004 fac2 	bl	8007fcc <USB_ReadInterrupts>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4e:	2b80      	cmp	r3, #128	; 0x80
 8003a50:	d122      	bne.n	8003a98 <HAL_PCD_IRQHandler+0x77c>
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	619a      	str	r2, [r3, #24]
 8003a5e:	2301      	movs	r3, #1
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
 8003a62:	e014      	b.n	8003a8e <HAL_PCD_IRQHandler+0x772>
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d105      	bne.n	8003a88 <HAL_PCD_IRQHandler+0x76c>
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	4619      	mov	r1, r3
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fb27 	bl	80040d6 <HAL_PCD_EP_Abort>
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d3e5      	bcc.n	8003a64 <HAL_PCD_IRQHandler+0x748>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f004 fa95 	bl	8007fcc <USB_ReadInterrupts>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aac:	d13b      	bne.n	8003b26 <HAL_PCD_IRQHandler+0x80a>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab2:	e02b      	b.n	8003b0c <HAL_PCD_IRQHandler+0x7f0>
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	61bb      	str	r3, [r7, #24]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	3340      	adds	r3, #64	; 0x40
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d115      	bne.n	8003b06 <HAL_PCD_IRQHandler+0x7ea>
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	da12      	bge.n	8003b06 <HAL_PCD_IRQHandler+0x7ea>
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	333f      	adds	r3, #63	; 0x3f
 8003af0:	2201      	movs	r2, #1
 8003af2:	701a      	strb	r2, [r3, #0]
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	4619      	mov	r1, r3
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fae8 	bl	80040d6 <HAL_PCD_EP_Abort>
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	3301      	adds	r3, #1
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d3ce      	bcc.n	8003ab4 <HAL_PCD_IRQHandler+0x798>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b24:	615a      	str	r2, [r3, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f004 fa4e 	bl	8007fcc <USB_ReadInterrupts>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b3a:	d155      	bne.n	8003be8 <HAL_PCD_IRQHandler+0x8cc>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b40:	e045      	b.n	8003bce <HAL_PCD_IRQHandler+0x8b2>
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d12e      	bne.n	8003bc8 <HAL_PCD_IRQHandler+0x8ac>
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	da2b      	bge.n	8003bc8 <HAL_PCD_IRQHandler+0x8ac>
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d121      	bne.n	8003bc8 <HAL_PCD_IRQHandler+0x8ac>
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b88:	4613      	mov	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b96:	2201      	movs	r2, #1
 8003b98:	701a      	strb	r2, [r3, #0]
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	619a      	str	r2, [r3, #24]
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <HAL_PCD_IRQHandler+0x8ac>
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bc4:	6053      	str	r3, [r2, #4]
 8003bc6:	e007      	b.n	8003bd8 <HAL_PCD_IRQHandler+0x8bc>
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	3301      	adds	r3, #1
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d3b4      	bcc.n	8003b42 <HAL_PCD_IRQHandler+0x826>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695a      	ldr	r2, [r3, #20]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003be6:	615a      	str	r2, [r3, #20]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f004 f9ed 	bl	8007fcc <USB_ReadInterrupts>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfc:	d10a      	bne.n	8003c14 <HAL_PCD_IRQHandler+0x8f8>
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f006 fe28 	bl	800a854 <HAL_PCD_ConnectCallback>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c12:	615a      	str	r2, [r3, #20]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f004 f9d7 	bl	8007fcc <USB_ReadInterrupts>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d115      	bne.n	8003c54 <HAL_PCD_IRQHandler+0x938>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_PCD_IRQHandler+0x924>
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f006 fe18 	bl	800a870 <HAL_PCD_DisconnectCallback>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6859      	ldr	r1, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	605a      	str	r2, [r3, #4]
 8003c50:	e000      	b.n	8003c54 <HAL_PCD_IRQHandler+0x938>
 8003c52:	bf00      	nop
 8003c54:	3734      	adds	r7, #52	; 0x34
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd90      	pop	{r4, r7, pc}

08003c5a <HAL_PCD_SetAddress>:
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	460b      	mov	r3, r1
 8003c64:	70fb      	strb	r3, [r7, #3]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_PCD_SetAddress+0x1a>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e013      	b.n	8003c9c <HAL_PCD_SetAddress+0x42>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f004 f935 	bl	8007efc <USB_SetDevAddress>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_PCD_EP_Open>:
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	4608      	mov	r0, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	70fb      	strb	r3, [r7, #3]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	803b      	strh	r3, [r7, #0]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	70bb      	strb	r3, [r7, #2]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	72fb      	strb	r3, [r7, #11]
 8003cc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	da0f      	bge.n	8003cea <HAL_PCD_EP_Open+0x46>
 8003cca:	78fb      	ldrb	r3, [r7, #3]
 8003ccc:	f003 020f 	and.w	r2, r3, #15
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	3338      	adds	r3, #56	; 0x38
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	3304      	adds	r3, #4
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	705a      	strb	r2, [r3, #1]
 8003ce8:	e00f      	b.n	8003d0a <HAL_PCD_EP_Open+0x66>
 8003cea:	78fb      	ldrb	r3, [r7, #3]
 8003cec:	f003 020f 	and.w	r2, r3, #15
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	4413      	add	r3, r2
 8003d00:	3304      	adds	r3, #4
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	705a      	strb	r2, [r3, #1]
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	883a      	ldrh	r2, [r7, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	60da      	str	r2, [r3, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	78ba      	ldrb	r2, [r7, #2]
 8003d20:	711a      	strb	r2, [r3, #4]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	785b      	ldrb	r3, [r3, #1]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d004      	beq.n	8003d34 <HAL_PCD_EP_Open+0x90>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	811a      	strh	r2, [r3, #8]
 8003d34:	78bb      	ldrb	r3, [r7, #2]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d102      	bne.n	8003d40 <HAL_PCD_EP_Open+0x9c>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	715a      	strb	r2, [r3, #5]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d101      	bne.n	8003d4e <HAL_PCD_EP_Open+0xaa>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e00e      	b.n	8003d6c <HAL_PCD_EP_Open+0xc8>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68f9      	ldr	r1, [r7, #12]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f003 f9b5 	bl	80070cc <USB_ActivateEndpoint>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003d6a:	7afb      	ldrb	r3, [r7, #11]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_PCD_EP_Close>:
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	70fb      	strb	r3, [r7, #3]
 8003d80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	da0f      	bge.n	8003da8 <HAL_PCD_EP_Close+0x34>
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	f003 020f 	and.w	r2, r3, #15
 8003d8e:	4613      	mov	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	3338      	adds	r3, #56	; 0x38
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	705a      	strb	r2, [r3, #1]
 8003da6:	e00f      	b.n	8003dc8 <HAL_PCD_EP_Close+0x54>
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	f003 020f 	and.w	r2, r3, #15
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	705a      	strb	r2, [r3, #1]
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	701a      	strb	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_PCD_EP_Close+0x6e>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e00e      	b.n	8003e00 <HAL_PCD_EP_Close+0x8c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68f9      	ldr	r1, [r7, #12]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f003 f9f3 	bl	80071dc <USB_DeactivateEndpoint>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003dfe:	2300      	movs	r3, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_PCD_EP_Receive>:
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	607a      	str	r2, [r7, #4]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	460b      	mov	r3, r1
 8003e16:	72fb      	strb	r3, [r7, #11]
 8003e18:	7afb      	ldrb	r3, [r7, #11]
 8003e1a:	f003 020f 	and.w	r2, r3, #15
 8003e1e:	4613      	mov	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3304      	adds	r3, #4
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	611a      	str	r2, [r3, #16]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	619a      	str	r2, [r3, #24]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2200      	movs	r2, #0
 8003e42:	621a      	str	r2, [r3, #32]
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2200      	movs	r2, #0
 8003e48:	705a      	strb	r2, [r3, #1]
 8003e4a:	7afb      	ldrb	r3, [r7, #11]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	701a      	strb	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d102      	bne.n	8003e64 <HAL_PCD_EP_Receive+0x5c>
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	615a      	str	r2, [r3, #20]
 8003e64:	7afb      	ldrb	r3, [r7, #11]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <HAL_PCD_EP_Receive+0x7a>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	461a      	mov	r2, r3
 8003e7a:	6979      	ldr	r1, [r7, #20]
 8003e7c:	f003 fcd2 	bl	8007824 <USB_EP0StartXfer>
 8003e80:	e008      	b.n	8003e94 <HAL_PCD_EP_Receive+0x8c>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	6979      	ldr	r1, [r7, #20]
 8003e90:	f003 fa80 	bl	8007394 <USB_EPStartXfer>
 8003e94:	2300      	movs	r3, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_PCD_EP_GetRxCount>:
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	70fb      	strb	r3, [r7, #3]
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	f003 020f 	and.w	r2, r3, #15
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_PCD_EP_Transmit>:
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b086      	sub	sp, #24
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
 8003eda:	460b      	mov	r3, r1
 8003edc:	72fb      	strb	r3, [r7, #11]
 8003ede:	7afb      	ldrb	r3, [r7, #11]
 8003ee0:	f003 020f 	and.w	r2, r3, #15
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	3338      	adds	r3, #56	; 0x38
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	611a      	str	r2, [r3, #16]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	619a      	str	r2, [r3, #24]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2200      	movs	r2, #0
 8003f06:	621a      	str	r2, [r3, #32]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	705a      	strb	r2, [r3, #1]
 8003f0e:	7afb      	ldrb	r3, [r7, #11]
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	701a      	strb	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d102      	bne.n	8003f28 <HAL_PCD_EP_Transmit+0x5a>
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	615a      	str	r2, [r3, #20]
 8003f28:	7afb      	ldrb	r3, [r7, #11]
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_PCD_EP_Transmit+0x78>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6979      	ldr	r1, [r7, #20]
 8003f40:	f003 fc70 	bl	8007824 <USB_EP0StartXfer>
 8003f44:	e008      	b.n	8003f58 <HAL_PCD_EP_Transmit+0x8a>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	461a      	mov	r2, r3
 8003f52:	6979      	ldr	r1, [r7, #20]
 8003f54:	f003 fa1e 	bl	8007394 <USB_EPStartXfer>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_PCD_EP_SetStall>:
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	70fb      	strb	r3, [r7, #3]
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	f003 020f 	and.w	r2, r3, #15
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d901      	bls.n	8003f80 <HAL_PCD_EP_SetStall+0x1e>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e050      	b.n	8004022 <HAL_PCD_EP_SetStall+0xc0>
 8003f80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	da0f      	bge.n	8003fa8 <HAL_PCD_EP_SetStall+0x46>
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	f003 020f 	and.w	r2, r3, #15
 8003f8e:	4613      	mov	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	3338      	adds	r3, #56	; 0x38
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	705a      	strb	r2, [r3, #1]
 8003fa6:	e00d      	b.n	8003fc4 <HAL_PCD_EP_SetStall+0x62>
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	4613      	mov	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	4413      	add	r3, r2
 8003fba:	3304      	adds	r3, #4
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	705a      	strb	r2, [r3, #1]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	709a      	strb	r2, [r3, #2]
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_PCD_EP_SetStall+0x82>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e01e      	b.n	8004022 <HAL_PCD_EP_SetStall+0xc0>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68f9      	ldr	r1, [r7, #12]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f003 feae 	bl	8007d54 <USB_EPSetStall>
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10a      	bne.n	8004018 <HAL_PCD_EP_SetStall+0xb6>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	b2d9      	uxtb	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004012:	461a      	mov	r2, r3
 8004014:	f004 f89e 	bl	8008154 <USB_EP0_OutStart>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004020:	2300      	movs	r3, #0
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_PCD_EP_ClrStall>:
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	460b      	mov	r3, r1
 8004034:	70fb      	strb	r3, [r7, #3]
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	f003 020f 	and.w	r2, r3, #15
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	429a      	cmp	r2, r3
 8004042:	d901      	bls.n	8004048 <HAL_PCD_EP_ClrStall+0x1e>
 8004044:	2301      	movs	r3, #1
 8004046:	e042      	b.n	80040ce <HAL_PCD_EP_ClrStall+0xa4>
 8004048:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800404c:	2b00      	cmp	r3, #0
 800404e:	da0f      	bge.n	8004070 <HAL_PCD_EP_ClrStall+0x46>
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	f003 020f 	and.w	r2, r3, #15
 8004056:	4613      	mov	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	3338      	adds	r3, #56	; 0x38
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	4413      	add	r3, r2
 8004064:	3304      	adds	r3, #4
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	705a      	strb	r2, [r3, #1]
 800406e:	e00f      	b.n	8004090 <HAL_PCD_EP_ClrStall+0x66>
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	f003 020f 	and.w	r2, r3, #15
 8004076:	4613      	mov	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4413      	add	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4413      	add	r3, r2
 8004086:	3304      	adds	r3, #4
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	705a      	strb	r2, [r3, #1]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	709a      	strb	r2, [r3, #2]
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	b2da      	uxtb	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_PCD_EP_ClrStall+0x86>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e00e      	b.n	80040ce <HAL_PCD_EP_ClrStall+0xa4>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68f9      	ldr	r1, [r7, #12]
 80040be:	4618      	mov	r0, r3
 80040c0:	f003 feb6 	bl	8007e30 <USB_EPClearStall>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80040cc:	2300      	movs	r3, #0
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_PCD_EP_Abort>:
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	460b      	mov	r3, r1
 80040e0:	70fb      	strb	r3, [r7, #3]
 80040e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	da0c      	bge.n	8004104 <HAL_PCD_EP_Abort+0x2e>
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	f003 020f 	and.w	r2, r3, #15
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	3338      	adds	r3, #56	; 0x38
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	3304      	adds	r3, #4
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	e00c      	b.n	800411e <HAL_PCD_EP_Abort+0x48>
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	f003 020f 	and.w	r2, r3, #15
 800410a:	4613      	mov	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	4413      	add	r3, r2
 800411a:	3304      	adds	r3, #4
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68f9      	ldr	r1, [r7, #12]
 8004124:	4618      	mov	r0, r3
 8004126:	f003 fcd5 	bl	8007ad4 <USB_EPStopXfer>
 800412a:	4603      	mov	r3, r0
 800412c:	72fb      	strb	r3, [r7, #11]
 800412e:	7afb      	ldrb	r3, [r7, #11]
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <PCD_WriteEmptyTxFifo>:
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af02      	add	r7, sp, #8
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	4613      	mov	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	3338      	adds	r3, #56	; 0x38
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4413      	add	r3, r2
 800415c:	3304      	adds	r3, #4
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1a      	ldr	r2, [r3, #32]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	429a      	cmp	r2, r3
 800416a:	d901      	bls.n	8004170 <PCD_WriteEmptyTxFifo+0x38>
 800416c:	2301      	movs	r3, #1
 800416e:	e06c      	b.n	800424a <PCD_WriteEmptyTxFifo+0x112>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	699a      	ldr	r2, [r3, #24]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	429a      	cmp	r2, r3
 8004184:	d902      	bls.n	800418c <PCD_WriteEmptyTxFifo+0x54>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	3303      	adds	r3, #3
 8004190:	089b      	lsrs	r3, r3, #2
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	e02b      	b.n	80041ee <PCD_WriteEmptyTxFifo+0xb6>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d902      	bls.n	80041b2 <PCD_WriteEmptyTxFifo+0x7a>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	3303      	adds	r3, #3
 80041b6:	089b      	lsrs	r3, r3, #2
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6919      	ldr	r1, [r3, #16]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	b298      	uxth	r0, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	4603      	mov	r3, r0
 80041d0:	6978      	ldr	r0, [r7, #20]
 80041d2:	f003 fd29 	bl	8007c28 <USB_WritePacket>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	441a      	add	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	611a      	str	r2, [r3, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1a      	ldr	r2, [r3, #32]
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	441a      	add	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	621a      	str	r2, [r3, #32]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	429a      	cmp	r2, r3
 8004202:	d809      	bhi.n	8004218 <PCD_WriteEmptyTxFifo+0xe0>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a1a      	ldr	r2, [r3, #32]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	429a      	cmp	r2, r3
 800420e:	d203      	bcs.n	8004218 <PCD_WriteEmptyTxFifo+0xe0>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1be      	bne.n	8004196 <PCD_WriteEmptyTxFifo+0x5e>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	699a      	ldr	r2, [r3, #24]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	429a      	cmp	r2, r3
 8004222:	d811      	bhi.n	8004248 <PCD_WriteEmptyTxFifo+0x110>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	2201      	movs	r2, #1
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	43db      	mvns	r3, r3
 800423e:	6939      	ldr	r1, [r7, #16]
 8004240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004244:	4013      	ands	r3, r2
 8004246:	634b      	str	r3, [r1, #52]	; 0x34
 8004248:	2300      	movs	r3, #0
 800424a:	4618      	mov	r0, r3
 800424c:	3720      	adds	r7, #32
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <PCD_EP_OutXfrComplete_int>:
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	61fb      	str	r3, [r7, #28]
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	61bb      	str	r3, [r7, #24]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	333c      	adds	r3, #60	; 0x3c
 800426c:	3304      	adds	r3, #4
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d17b      	bne.n	8004382 <PCD_EP_OutXfrComplete_int+0x12e>
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d015      	beq.n	80042c0 <PCD_EP_OutXfrComplete_int+0x6c>
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	4a61      	ldr	r2, [pc, #388]	; (800441c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	f240 80b9 	bls.w	8004410 <PCD_EP_OutXfrComplete_int+0x1bc>
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 80b3 	beq.w	8004410 <PCD_EP_OutXfrComplete_int+0x1bc>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b6:	461a      	mov	r2, r3
 80042b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042bc:	6093      	str	r3, [r2, #8]
 80042be:	e0a7      	b.n	8004410 <PCD_EP_OutXfrComplete_int+0x1bc>
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d009      	beq.n	80042de <PCD_EP_OutXfrComplete_int+0x8a>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d6:	461a      	mov	r2, r3
 80042d8:	2320      	movs	r3, #32
 80042da:	6093      	str	r3, [r2, #8]
 80042dc:	e098      	b.n	8004410 <PCD_EP_OutXfrComplete_int+0x1bc>
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f040 8093 	bne.w	8004410 <PCD_EP_OutXfrComplete_int+0x1bc>
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	4a4b      	ldr	r2, [pc, #300]	; (800441c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d90f      	bls.n	8004312 <PCD_EP_OutXfrComplete_int+0xbe>
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <PCD_EP_OutXfrComplete_int+0xbe>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004308:	461a      	mov	r2, r3
 800430a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800430e:	6093      	str	r3, [r2, #8]
 8004310:	e07e      	b.n	8004410 <PCD_EP_OutXfrComplete_int+0x1bc>
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	4413      	add	r3, r2
 8004324:	3304      	adds	r3, #4
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	0159      	lsls	r1, r3, #5
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	440b      	add	r3, r1
 8004334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800433e:	1ad2      	subs	r2, r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	621a      	str	r2, [r3, #32]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d114      	bne.n	8004374 <PCD_EP_OutXfrComplete_int+0x120>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <PCD_EP_OutXfrComplete_int+0x112>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800435c:	461a      	mov	r2, r3
 800435e:	2101      	movs	r1, #1
 8004360:	f003 fef8 	bl	8008154 <USB_EP0_OutStart>
 8004364:	e006      	b.n	8004374 <PCD_EP_OutXfrComplete_int+0x120>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	691a      	ldr	r2, [r3, #16]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	441a      	add	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	611a      	str	r2, [r3, #16]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	4619      	mov	r1, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f006 f9b0 	bl	800a6e0 <HAL_PCD_DataOutStageCallback>
 8004380:	e046      	b.n	8004410 <PCD_EP_OutXfrComplete_int+0x1bc>
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	4a26      	ldr	r2, [pc, #152]	; (8004420 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d124      	bne.n	80043d4 <PCD_EP_OutXfrComplete_int+0x180>
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <PCD_EP_OutXfrComplete_int+0x156>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a0:	461a      	mov	r2, r3
 80043a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a6:	6093      	str	r3, [r2, #8]
 80043a8:	e032      	b.n	8004410 <PCD_EP_OutXfrComplete_int+0x1bc>
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <PCD_EP_OutXfrComplete_int+0x172>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c0:	461a      	mov	r2, r3
 80043c2:	2320      	movs	r3, #32
 80043c4:	6093      	str	r3, [r2, #8]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	4619      	mov	r1, r3
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f006 f987 	bl	800a6e0 <HAL_PCD_DataOutStageCallback>
 80043d2:	e01d      	b.n	8004410 <PCD_EP_OutXfrComplete_int+0x1bc>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d114      	bne.n	8004404 <PCD_EP_OutXfrComplete_int+0x1b0>
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	4613      	mov	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d108      	bne.n	8004404 <PCD_EP_OutXfrComplete_int+0x1b0>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043fc:	461a      	mov	r2, r3
 80043fe:	2100      	movs	r1, #0
 8004400:	f003 fea8 	bl	8008154 <USB_EP0_OutStart>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f006 f968 	bl	800a6e0 <HAL_PCD_DataOutStageCallback>
 8004410:	2300      	movs	r3, #0
 8004412:	4618      	mov	r0, r3
 8004414:	3720      	adds	r7, #32
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	4f54300a 	.word	0x4f54300a
 8004420:	4f54310a 	.word	0x4f54310a

08004424 <PCD_EP_OutSetupPacket_int>:
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	333c      	adds	r3, #60	; 0x3c
 800443c:	3304      	adds	r3, #4
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	60bb      	str	r3, [r7, #8]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4a15      	ldr	r2, [pc, #84]	; (80044ac <PCD_EP_OutSetupPacket_int+0x88>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d90e      	bls.n	8004478 <PCD_EP_OutSetupPacket_int+0x54>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d009      	beq.n	8004478 <PCD_EP_OutSetupPacket_int+0x54>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004470:	461a      	mov	r2, r3
 8004472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004476:	6093      	str	r3, [r2, #8]
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f006 f91f 	bl	800a6bc <HAL_PCD_SetupStageCallback>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4a0a      	ldr	r2, [pc, #40]	; (80044ac <PCD_EP_OutSetupPacket_int+0x88>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d90c      	bls.n	80044a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d108      	bne.n	80044a0 <PCD_EP_OutSetupPacket_int+0x7c>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004498:	461a      	mov	r2, r3
 800449a:	2101      	movs	r1, #1
 800449c:	f003 fe5a 	bl	8008154 <USB_EP0_OutStart>
 80044a0:	2300      	movs	r3, #0
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	4f54300a 	.word	0x4f54300a

080044b0 <HAL_PCDEx_SetTxFiFo>:
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	70fb      	strb	r3, [r7, #3]
 80044bc:	4613      	mov	r3, r2
 80044be:	803b      	strh	r3, [r7, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	60bb      	str	r3, [r7, #8]
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d107      	bne.n	80044de <HAL_PCDEx_SetTxFiFo+0x2e>
 80044ce:	883b      	ldrh	r3, [r7, #0]
 80044d0:	0419      	lsls	r1, r3, #16
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	430a      	orrs	r2, r1
 80044da:	629a      	str	r2, [r3, #40]	; 0x28
 80044dc:	e028      	b.n	8004530 <HAL_PCDEx_SetTxFiFo+0x80>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	4413      	add	r3, r2
 80044ea:	60bb      	str	r3, [r7, #8]
 80044ec:	2300      	movs	r3, #0
 80044ee:	73fb      	strb	r3, [r7, #15]
 80044f0:	e00d      	b.n	800450e <HAL_PCDEx_SetTxFiFo+0x5e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	3340      	adds	r3, #64	; 0x40
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	0c1b      	lsrs	r3, r3, #16
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	4413      	add	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	3301      	adds	r3, #1
 800450c:	73fb      	strb	r3, [r7, #15]
 800450e:	7bfa      	ldrb	r2, [r7, #15]
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	3b01      	subs	r3, #1
 8004514:	429a      	cmp	r2, r3
 8004516:	d3ec      	bcc.n	80044f2 <HAL_PCDEx_SetTxFiFo+0x42>
 8004518:	883b      	ldrh	r3, [r7, #0]
 800451a:	0418      	lsls	r0, r3, #16
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6819      	ldr	r1, [r3, #0]
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	3b01      	subs	r3, #1
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	4302      	orrs	r2, r0
 8004528:	3340      	adds	r3, #64	; 0x40
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	605a      	str	r2, [r3, #4]
 8004530:	2300      	movs	r3, #0
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <HAL_PCDEx_SetRxFiFo>:
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	460b      	mov	r3, r1
 8004548:	807b      	strh	r3, [r7, #2]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	887a      	ldrh	r2, [r7, #2]
 8004550:	625a      	str	r2, [r3, #36]	; 0x24
 8004552:	2300      	movs	r3, #0
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_PCDEx_LPM_Callback>:
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_RCC_OscConfig>:
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_RCC_OscConfig+0x12>
 8004586:	2301      	movs	r3, #1
 8004588:	e267      	b.n	8004a5a <HAL_RCC_OscConfig+0x4e2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d075      	beq.n	8004682 <HAL_RCC_OscConfig+0x10a>
 8004596:	4b88      	ldr	r3, [pc, #544]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 030c 	and.w	r3, r3, #12
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d00c      	beq.n	80045bc <HAL_RCC_OscConfig+0x44>
 80045a2:	4b85      	ldr	r3, [pc, #532]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d112      	bne.n	80045d4 <HAL_RCC_OscConfig+0x5c>
 80045ae:	4b82      	ldr	r3, [pc, #520]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ba:	d10b      	bne.n	80045d4 <HAL_RCC_OscConfig+0x5c>
 80045bc:	4b7e      	ldr	r3, [pc, #504]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d05b      	beq.n	8004680 <HAL_RCC_OscConfig+0x108>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d157      	bne.n	8004680 <HAL_RCC_OscConfig+0x108>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e242      	b.n	8004a5a <HAL_RCC_OscConfig+0x4e2>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045dc:	d106      	bne.n	80045ec <HAL_RCC_OscConfig+0x74>
 80045de:	4b76      	ldr	r3, [pc, #472]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a75      	ldr	r2, [pc, #468]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 80045e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e01d      	b.n	8004628 <HAL_RCC_OscConfig+0xb0>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045f4:	d10c      	bne.n	8004610 <HAL_RCC_OscConfig+0x98>
 80045f6:	4b70      	ldr	r3, [pc, #448]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a6f      	ldr	r2, [pc, #444]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 80045fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	4b6d      	ldr	r3, [pc, #436]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a6c      	ldr	r2, [pc, #432]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 8004608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	e00b      	b.n	8004628 <HAL_RCC_OscConfig+0xb0>
 8004610:	4b69      	ldr	r3, [pc, #420]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a68      	ldr	r2, [pc, #416]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 8004616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	4b66      	ldr	r3, [pc, #408]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a65      	ldr	r2, [pc, #404]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 8004622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d013      	beq.n	8004658 <HAL_RCC_OscConfig+0xe0>
 8004630:	f7fd fd42 	bl	80020b8 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0xd2>
 8004638:	f7fd fd3e 	bl	80020b8 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b64      	cmp	r3, #100	; 0x64
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0xd2>
 8004646:	2303      	movs	r3, #3
 8004648:	e207      	b.n	8004a5a <HAL_RCC_OscConfig+0x4e2>
 800464a:	4b5b      	ldr	r3, [pc, #364]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0f0      	beq.n	8004638 <HAL_RCC_OscConfig+0xc0>
 8004656:	e014      	b.n	8004682 <HAL_RCC_OscConfig+0x10a>
 8004658:	f7fd fd2e 	bl	80020b8 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0xfa>
 8004660:	f7fd fd2a 	bl	80020b8 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b64      	cmp	r3, #100	; 0x64
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0xfa>
 800466e:	2303      	movs	r3, #3
 8004670:	e1f3      	b.n	8004a5a <HAL_RCC_OscConfig+0x4e2>
 8004672:	4b51      	ldr	r3, [pc, #324]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0xe8>
 800467e:	e000      	b.n	8004682 <HAL_RCC_OscConfig+0x10a>
 8004680:	bf00      	nop
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d063      	beq.n	8004756 <HAL_RCC_OscConfig+0x1de>
 800468e:	4b4a      	ldr	r3, [pc, #296]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 030c 	and.w	r3, r3, #12
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00b      	beq.n	80046b2 <HAL_RCC_OscConfig+0x13a>
 800469a:	4b47      	ldr	r3, [pc, #284]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d11c      	bne.n	80046e0 <HAL_RCC_OscConfig+0x168>
 80046a6:	4b44      	ldr	r3, [pc, #272]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d116      	bne.n	80046e0 <HAL_RCC_OscConfig+0x168>
 80046b2:	4b41      	ldr	r3, [pc, #260]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <HAL_RCC_OscConfig+0x152>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d001      	beq.n	80046ca <HAL_RCC_OscConfig+0x152>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e1c7      	b.n	8004a5a <HAL_RCC_OscConfig+0x4e2>
 80046ca:	4b3b      	ldr	r3, [pc, #236]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4937      	ldr	r1, [pc, #220]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]
 80046de:	e03a      	b.n	8004756 <HAL_RCC_OscConfig+0x1de>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d020      	beq.n	800472a <HAL_RCC_OscConfig+0x1b2>
 80046e8:	4b34      	ldr	r3, [pc, #208]	; (80047bc <HAL_RCC_OscConfig+0x244>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	f7fd fce3 	bl	80020b8 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x190>
 80046f6:	f7fd fcdf 	bl	80020b8 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x190>
 8004704:	2303      	movs	r3, #3
 8004706:	e1a8      	b.n	8004a5a <HAL_RCC_OscConfig+0x4e2>
 8004708:	4b2b      	ldr	r3, [pc, #172]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f0      	beq.n	80046f6 <HAL_RCC_OscConfig+0x17e>
 8004714:	4b28      	ldr	r3, [pc, #160]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4925      	ldr	r1, [pc, #148]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 8004724:	4313      	orrs	r3, r2
 8004726:	600b      	str	r3, [r1, #0]
 8004728:	e015      	b.n	8004756 <HAL_RCC_OscConfig+0x1de>
 800472a:	4b24      	ldr	r3, [pc, #144]	; (80047bc <HAL_RCC_OscConfig+0x244>)
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	f7fd fcc2 	bl	80020b8 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x1d2>
 8004738:	f7fd fcbe 	bl	80020b8 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x1d2>
 8004746:	2303      	movs	r3, #3
 8004748:	e187      	b.n	8004a5a <HAL_RCC_OscConfig+0x4e2>
 800474a:	4b1b      	ldr	r3, [pc, #108]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0x1c0>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d036      	beq.n	80047d0 <HAL_RCC_OscConfig+0x258>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d016      	beq.n	8004798 <HAL_RCC_OscConfig+0x220>
 800476a:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <HAL_RCC_OscConfig+0x248>)
 800476c:	2201      	movs	r2, #1
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	f7fd fca2 	bl	80020b8 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x212>
 8004778:	f7fd fc9e 	bl	80020b8 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x212>
 8004786:	2303      	movs	r3, #3
 8004788:	e167      	b.n	8004a5a <HAL_RCC_OscConfig+0x4e2>
 800478a:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <HAL_RCC_OscConfig+0x240>)
 800478c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <HAL_RCC_OscConfig+0x200>
 8004796:	e01b      	b.n	80047d0 <HAL_RCC_OscConfig+0x258>
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <HAL_RCC_OscConfig+0x248>)
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	f7fd fc8b 	bl	80020b8 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]
 80047a4:	e00e      	b.n	80047c4 <HAL_RCC_OscConfig+0x24c>
 80047a6:	f7fd fc87 	bl	80020b8 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d907      	bls.n	80047c4 <HAL_RCC_OscConfig+0x24c>
 80047b4:	2303      	movs	r3, #3
 80047b6:	e150      	b.n	8004a5a <HAL_RCC_OscConfig+0x4e2>
 80047b8:	40023800 	.word	0x40023800
 80047bc:	42470000 	.word	0x42470000
 80047c0:	42470e80 	.word	0x42470e80
 80047c4:	4b88      	ldr	r3, [pc, #544]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 80047c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1ea      	bne.n	80047a6 <HAL_RCC_OscConfig+0x22e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 8097 	beq.w	800490c <HAL_RCC_OscConfig+0x394>
 80047de:	2300      	movs	r3, #0
 80047e0:	75fb      	strb	r3, [r7, #23]
 80047e2:	4b81      	ldr	r3, [pc, #516]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10f      	bne.n	800480e <HAL_RCC_OscConfig+0x296>
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	4b7d      	ldr	r3, [pc, #500]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	4a7c      	ldr	r2, [pc, #496]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 80047f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fc:	6413      	str	r3, [r2, #64]	; 0x40
 80047fe:	4b7a      	ldr	r3, [pc, #488]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2301      	movs	r3, #1
 800480c:	75fb      	strb	r3, [r7, #23]
 800480e:	4b77      	ldr	r3, [pc, #476]	; (80049ec <HAL_RCC_OscConfig+0x474>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d118      	bne.n	800484c <HAL_RCC_OscConfig+0x2d4>
 800481a:	4b74      	ldr	r3, [pc, #464]	; (80049ec <HAL_RCC_OscConfig+0x474>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a73      	ldr	r2, [pc, #460]	; (80049ec <HAL_RCC_OscConfig+0x474>)
 8004820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	f7fd fc47 	bl	80020b8 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x2c8>
 800482e:	f7fd fc43 	bl	80020b8 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x2c8>
 800483c:	2303      	movs	r3, #3
 800483e:	e10c      	b.n	8004a5a <HAL_RCC_OscConfig+0x4e2>
 8004840:	4b6a      	ldr	r3, [pc, #424]	; (80049ec <HAL_RCC_OscConfig+0x474>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <HAL_RCC_OscConfig+0x2b6>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d106      	bne.n	8004862 <HAL_RCC_OscConfig+0x2ea>
 8004854:	4b64      	ldr	r3, [pc, #400]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 8004856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004858:	4a63      	ldr	r2, [pc, #396]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	6713      	str	r3, [r2, #112]	; 0x70
 8004860:	e01c      	b.n	800489c <HAL_RCC_OscConfig+0x324>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b05      	cmp	r3, #5
 8004868:	d10c      	bne.n	8004884 <HAL_RCC_OscConfig+0x30c>
 800486a:	4b5f      	ldr	r3, [pc, #380]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 800486c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486e:	4a5e      	ldr	r2, [pc, #376]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 8004870:	f043 0304 	orr.w	r3, r3, #4
 8004874:	6713      	str	r3, [r2, #112]	; 0x70
 8004876:	4b5c      	ldr	r3, [pc, #368]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 8004878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487a:	4a5b      	ldr	r2, [pc, #364]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 800487c:	f043 0301 	orr.w	r3, r3, #1
 8004880:	6713      	str	r3, [r2, #112]	; 0x70
 8004882:	e00b      	b.n	800489c <HAL_RCC_OscConfig+0x324>
 8004884:	4b58      	ldr	r3, [pc, #352]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 8004886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004888:	4a57      	ldr	r2, [pc, #348]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 800488a:	f023 0301 	bic.w	r3, r3, #1
 800488e:	6713      	str	r3, [r2, #112]	; 0x70
 8004890:	4b55      	ldr	r3, [pc, #340]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 8004892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004894:	4a54      	ldr	r2, [pc, #336]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 8004896:	f023 0304 	bic.w	r3, r3, #4
 800489a:	6713      	str	r3, [r2, #112]	; 0x70
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d015      	beq.n	80048d0 <HAL_RCC_OscConfig+0x358>
 80048a4:	f7fd fc08 	bl	80020b8 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]
 80048aa:	e00a      	b.n	80048c2 <HAL_RCC_OscConfig+0x34a>
 80048ac:	f7fd fc04 	bl	80020b8 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x34a>
 80048be:	2303      	movs	r3, #3
 80048c0:	e0cb      	b.n	8004a5a <HAL_RCC_OscConfig+0x4e2>
 80048c2:	4b49      	ldr	r3, [pc, #292]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 80048c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0ee      	beq.n	80048ac <HAL_RCC_OscConfig+0x334>
 80048ce:	e014      	b.n	80048fa <HAL_RCC_OscConfig+0x382>
 80048d0:	f7fd fbf2 	bl	80020b8 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]
 80048d6:	e00a      	b.n	80048ee <HAL_RCC_OscConfig+0x376>
 80048d8:	f7fd fbee 	bl	80020b8 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x376>
 80048ea:	2303      	movs	r3, #3
 80048ec:	e0b5      	b.n	8004a5a <HAL_RCC_OscConfig+0x4e2>
 80048ee:	4b3e      	ldr	r3, [pc, #248]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1ee      	bne.n	80048d8 <HAL_RCC_OscConfig+0x360>
 80048fa:	7dfb      	ldrb	r3, [r7, #23]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d105      	bne.n	800490c <HAL_RCC_OscConfig+0x394>
 8004900:	4b39      	ldr	r3, [pc, #228]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	4a38      	ldr	r2, [pc, #224]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 8004906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800490a:	6413      	str	r3, [r2, #64]	; 0x40
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 80a1 	beq.w	8004a58 <HAL_RCC_OscConfig+0x4e0>
 8004916:	4b34      	ldr	r3, [pc, #208]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 030c 	and.w	r3, r3, #12
 800491e:	2b08      	cmp	r3, #8
 8004920:	d05c      	beq.n	80049dc <HAL_RCC_OscConfig+0x464>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d141      	bne.n	80049ae <HAL_RCC_OscConfig+0x436>
 800492a:	4b31      	ldr	r3, [pc, #196]	; (80049f0 <HAL_RCC_OscConfig+0x478>)
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	f7fd fbc2 	bl	80020b8 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x3d2>
 8004938:	f7fd fbbe 	bl	80020b8 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x3d2>
 8004946:	2303      	movs	r3, #3
 8004948:	e087      	b.n	8004a5a <HAL_RCC_OscConfig+0x4e2>
 800494a:	4b27      	ldr	r3, [pc, #156]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0x3c0>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69da      	ldr	r2, [r3, #28]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	019b      	lsls	r3, r3, #6
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	3b01      	subs	r3, #1
 8004970:	041b      	lsls	r3, r3, #16
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	061b      	lsls	r3, r3, #24
 800497a:	491b      	ldr	r1, [pc, #108]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 800497c:	4313      	orrs	r3, r2
 800497e:	604b      	str	r3, [r1, #4]
 8004980:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <HAL_RCC_OscConfig+0x478>)
 8004982:	2201      	movs	r2, #1
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	f7fd fb97 	bl	80020b8 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x428>
 800498e:	f7fd fb93 	bl	80020b8 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x428>
 800499c:	2303      	movs	r3, #3
 800499e:	e05c      	b.n	8004a5a <HAL_RCC_OscConfig+0x4e2>
 80049a0:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0f0      	beq.n	800498e <HAL_RCC_OscConfig+0x416>
 80049ac:	e054      	b.n	8004a58 <HAL_RCC_OscConfig+0x4e0>
 80049ae:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <HAL_RCC_OscConfig+0x478>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	f7fd fb80 	bl	80020b8 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x456>
 80049bc:	f7fd fb7c 	bl	80020b8 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x456>
 80049ca:	2303      	movs	r3, #3
 80049cc:	e045      	b.n	8004a5a <HAL_RCC_OscConfig+0x4e2>
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <HAL_RCC_OscConfig+0x470>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x444>
 80049da:	e03d      	b.n	8004a58 <HAL_RCC_OscConfig+0x4e0>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d107      	bne.n	80049f4 <HAL_RCC_OscConfig+0x47c>
 80049e4:	2301      	movs	r3, #1
 80049e6:	e038      	b.n	8004a5a <HAL_RCC_OscConfig+0x4e2>
 80049e8:	40023800 	.word	0x40023800
 80049ec:	40007000 	.word	0x40007000
 80049f0:	42470060 	.word	0x42470060
 80049f4:	4b1b      	ldr	r3, [pc, #108]	; (8004a64 <HAL_RCC_OscConfig+0x4ec>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d028      	beq.n	8004a54 <HAL_RCC_OscConfig+0x4dc>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d121      	bne.n	8004a54 <HAL_RCC_OscConfig+0x4dc>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d11a      	bne.n	8004a54 <HAL_RCC_OscConfig+0x4dc>
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a24:	4013      	ands	r3, r2
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a2a:	0192      	lsls	r2, r2, #6
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d111      	bne.n	8004a54 <HAL_RCC_OscConfig+0x4dc>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	041b      	lsls	r3, r3, #16
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d107      	bne.n	8004a54 <HAL_RCC_OscConfig+0x4dc>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	061b      	lsls	r3, r3, #24
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d001      	beq.n	8004a58 <HAL_RCC_OscConfig+0x4e0>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <HAL_RCC_OscConfig+0x4e2>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	40023800 	.word	0x40023800

08004a68 <HAL_RCC_ClockConfig>:
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_RCC_ClockConfig+0x14>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0cc      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
 8004a7c:	4b68      	ldr	r3, [pc, #416]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d90c      	bls.n	8004aa4 <HAL_RCC_ClockConfig+0x3c>
 8004a8a:	4b65      	ldr	r3, [pc, #404]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	4b63      	ldr	r3, [pc, #396]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x3c>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0b8      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d020      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x8a>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x60>
 8004abc:	4b59      	ldr	r3, [pc, #356]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4a58      	ldr	r2, [pc, #352]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ac6:	6093      	str	r3, [r2, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x78>
 8004ad4:	4b53      	ldr	r3, [pc, #332]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4a52      	ldr	r2, [pc, #328]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ade:	6093      	str	r3, [r2, #8]
 8004ae0:	4b50      	ldr	r3, [pc, #320]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	494d      	ldr	r1, [pc, #308]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d044      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x120>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xae>
 8004b06:	4b47      	ldr	r3, [pc, #284]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d119      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xde>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e07f      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d003      	beq.n	8004b26 <HAL_RCC_ClockConfig+0xbe>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d107      	bne.n	8004b36 <HAL_RCC_ClockConfig+0xce>
 8004b26:	4b3f      	ldr	r3, [pc, #252]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d109      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xde>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e06f      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
 8004b36:	4b3b      	ldr	r3, [pc, #236]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xde>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e067      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
 8004b46:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f023 0203 	bic.w	r2, r3, #3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	4934      	ldr	r1, [pc, #208]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	608b      	str	r3, [r1, #8]
 8004b58:	f7fd faae 	bl	80020b8 <HAL_GetTick>
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	e00a      	b.n	8004b76 <HAL_RCC_ClockConfig+0x10e>
 8004b60:	f7fd faaa 	bl	80020b8 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_ClockConfig+0x10e>
 8004b72:	2303      	movs	r3, #3
 8004b74:	e04f      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
 8004b76:	4b2b      	ldr	r3, [pc, #172]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 020c 	and.w	r2, r3, #12
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d1eb      	bne.n	8004b60 <HAL_RCC_ClockConfig+0xf8>
 8004b88:	4b25      	ldr	r3, [pc, #148]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d20c      	bcs.n	8004bb0 <HAL_RCC_ClockConfig+0x148>
 8004b96:	4b22      	ldr	r3, [pc, #136]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d001      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x148>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e032      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <HAL_RCC_ClockConfig+0x166>
 8004bbc:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4916      	ldr	r1, [pc, #88]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	608b      	str	r3, [r1, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d009      	beq.n	8004bee <HAL_RCC_ClockConfig+0x186>
 8004bda:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	490e      	ldr	r1, [pc, #56]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	608b      	str	r3, [r1, #8]
 8004bee:	f000 f821 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	490a      	ldr	r1, [pc, #40]	; (8004c28 <HAL_RCC_ClockConfig+0x1c0>)
 8004c00:	5ccb      	ldrb	r3, [r1, r3]
 8004c02:	fa22 f303 	lsr.w	r3, r2, r3
 8004c06:	4a09      	ldr	r2, [pc, #36]	; (8004c2c <HAL_RCC_ClockConfig+0x1c4>)
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <HAL_RCC_ClockConfig+0x1c8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fd fa0e 	bl	8002030 <HAL_InitTick>
 8004c14:	2300      	movs	r3, #0
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40023c00 	.word	0x40023c00
 8004c24:	40023800 	.word	0x40023800
 8004c28:	0800d9d0 	.word	0x0800d9d0
 8004c2c:	20000024 	.word	0x20000024
 8004c30:	20000028 	.word	0x20000028

08004c34 <HAL_RCC_GetSysClockFreq>:
 8004c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c38:	b090      	sub	sp, #64	; 0x40
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c40:	2300      	movs	r3, #0
 8004c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c44:	2300      	movs	r3, #0
 8004c46:	633b      	str	r3, [r7, #48]	; 0x30
 8004c48:	2300      	movs	r3, #0
 8004c4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c4c:	4b59      	ldr	r3, [pc, #356]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 030c 	and.w	r3, r3, #12
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d00d      	beq.n	8004c74 <HAL_RCC_GetSysClockFreq+0x40>
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	f200 80a1 	bhi.w	8004da0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <HAL_RCC_GetSysClockFreq+0x34>
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d003      	beq.n	8004c6e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c66:	e09b      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c68:	4b53      	ldr	r3, [pc, #332]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c6c:	e09b      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x172>
 8004c6e:	4b53      	ldr	r3, [pc, #332]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x188>)
 8004c70:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c72:	e098      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x172>
 8004c74:	4b4f      	ldr	r3, [pc, #316]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c7e:	4b4d      	ldr	r3, [pc, #308]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d028      	beq.n	8004cdc <HAL_RCC_GetSysClockFreq+0xa8>
 8004c8a:	4b4a      	ldr	r3, [pc, #296]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	099b      	lsrs	r3, r3, #6
 8004c90:	2200      	movs	r2, #0
 8004c92:	623b      	str	r3, [r7, #32]
 8004c94:	627a      	str	r2, [r7, #36]	; 0x24
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	4b47      	ldr	r3, [pc, #284]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x188>)
 8004ca0:	fb03 f201 	mul.w	r2, r3, r1
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	fb00 f303 	mul.w	r3, r0, r3
 8004caa:	4413      	add	r3, r2
 8004cac:	4a43      	ldr	r2, [pc, #268]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x188>)
 8004cae:	fba0 1202 	umull	r1, r2, r0, r2
 8004cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cb4:	460a      	mov	r2, r1
 8004cb6:	62ba      	str	r2, [r7, #40]	; 0x28
 8004cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cba:	4413      	add	r3, r2
 8004cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	61bb      	str	r3, [r7, #24]
 8004cc4:	61fa      	str	r2, [r7, #28]
 8004cc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004cce:	f7fb ff93 	bl	8000bf8 <__aeabi_uldivmod>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cda:	e053      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0x150>
 8004cdc:	4b35      	ldr	r3, [pc, #212]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	099b      	lsrs	r3, r3, #6
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	617a      	str	r2, [r7, #20]
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cee:	f04f 0b00 	mov.w	fp, #0
 8004cf2:	4652      	mov	r2, sl
 8004cf4:	465b      	mov	r3, fp
 8004cf6:	f04f 0000 	mov.w	r0, #0
 8004cfa:	f04f 0100 	mov.w	r1, #0
 8004cfe:	0159      	lsls	r1, r3, #5
 8004d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d04:	0150      	lsls	r0, r2, #5
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	ebb2 080a 	subs.w	r8, r2, sl
 8004d0e:	eb63 090b 	sbc.w	r9, r3, fp
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d26:	ebb2 0408 	subs.w	r4, r2, r8
 8004d2a:	eb63 0509 	sbc.w	r5, r3, r9
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	00eb      	lsls	r3, r5, #3
 8004d38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d3c:	00e2      	lsls	r2, r4, #3
 8004d3e:	4614      	mov	r4, r2
 8004d40:	461d      	mov	r5, r3
 8004d42:	eb14 030a 	adds.w	r3, r4, sl
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	eb45 030b 	adc.w	r3, r5, fp
 8004d4c:	607b      	str	r3, [r7, #4]
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d5a:	4629      	mov	r1, r5
 8004d5c:	028b      	lsls	r3, r1, #10
 8004d5e:	4621      	mov	r1, r4
 8004d60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d64:	4621      	mov	r1, r4
 8004d66:	028a      	lsls	r2, r1, #10
 8004d68:	4610      	mov	r0, r2
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6e:	2200      	movs	r2, #0
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	60fa      	str	r2, [r7, #12]
 8004d74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d78:	f7fb ff3e 	bl	8000bf8 <__aeabi_uldivmod>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	4613      	mov	r3, r2
 8004d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d84:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	0c1b      	lsrs	r3, r3, #16
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	3301      	adds	r3, #1
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	633b      	str	r3, [r7, #48]	; 0x30
 8004d94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d9e:	e002      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x172>
 8004da0:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004da2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004da4:	bf00      	nop
 8004da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da8:	4618      	mov	r0, r3
 8004daa:	3740      	adds	r7, #64	; 0x40
 8004dac:	46bd      	mov	sp, r7
 8004dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004db2:	bf00      	nop
 8004db4:	40023800 	.word	0x40023800
 8004db8:	00f42400 	.word	0x00f42400
 8004dbc:	017d7840 	.word	0x017d7840

08004dc0 <HAL_RCC_GetHCLKFreq>:
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	4b03      	ldr	r3, [pc, #12]	; (8004dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20000024 	.word	0x20000024

08004dd8 <HAL_RCC_GetPCLK1Freq>:
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	f7ff fff0 	bl	8004dc0 <HAL_RCC_GetHCLKFreq>
 8004de0:	4602      	mov	r2, r0
 8004de2:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	0a9b      	lsrs	r3, r3, #10
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	4903      	ldr	r1, [pc, #12]	; (8004dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dee:	5ccb      	ldrb	r3, [r1, r3]
 8004df0:	fa22 f303 	lsr.w	r3, r2, r3
 8004df4:	4618      	mov	r0, r3
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	0800d9e0 	.word	0x0800d9e0

08004e00 <HAL_RCC_GetPCLK2Freq>:
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	f7ff ffdc 	bl	8004dc0 <HAL_RCC_GetHCLKFreq>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	0b5b      	lsrs	r3, r3, #13
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	4903      	ldr	r1, [pc, #12]	; (8004e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e16:	5ccb      	ldrb	r3, [r1, r3]
 8004e18:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40023800 	.word	0x40023800
 8004e24:	0800d9e0 	.word	0x0800d9e0

08004e28 <HAL_SPI_Init>:
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_SPI_Init+0x12>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e07b      	b.n	8004f32 <HAL_SPI_Init+0x10a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d108      	bne.n	8004e54 <HAL_SPI_Init+0x2c>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e4a:	d009      	beq.n	8004e60 <HAL_SPI_Init+0x38>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	61da      	str	r2, [r3, #28]
 8004e52:	e005      	b.n	8004e60 <HAL_SPI_Init+0x38>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	611a      	str	r2, [r3, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	615a      	str	r2, [r3, #20]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	629a      	str	r2, [r3, #40]	; 0x28
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <HAL_SPI_Init+0x58>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fc fd42 	bl	8001904 <HAL_SPI_MspInit>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee4:	ea42 0103 	orr.w	r1, r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	0c1b      	lsrs	r3, r3, #16
 8004efe:	f003 0104 	and.w	r1, r3, #4
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	f003 0210 	and.w	r2, r3, #16
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f20:	61da      	str	r2, [r3, #28]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004f30:	2300      	movs	r3, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_TIM_Base_Init>:
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_TIM_Base_Init+0x12>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e041      	b.n	8004fd0 <HAL_TIM_Base_Init+0x96>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d106      	bne.n	8004f66 <HAL_TIM_Base_Init+0x2c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7fc fd17 	bl	8001994 <HAL_TIM_Base_MspInit>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2202      	movs	r2, #2
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3304      	adds	r3, #4
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f000 fcc5 	bl	8005908 <TIM_Base_SetConfig>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fce:	2300      	movs	r3, #0
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_TIM_Base_Start_IT>:
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d001      	beq.n	8004ff0 <HAL_TIM_Base_Start_IT+0x18>
 8004fec:	2301      	movs	r3, #1
 8004fee:	e044      	b.n	800507a <HAL_TIM_Base_Start_IT+0xa2>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	60da      	str	r2, [r3, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1e      	ldr	r2, [pc, #120]	; (8005088 <HAL_TIM_Base_Start_IT+0xb0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d018      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x6c>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501a:	d013      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x6c>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1a      	ldr	r2, [pc, #104]	; (800508c <HAL_TIM_Base_Start_IT+0xb4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00e      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x6c>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a19      	ldr	r2, [pc, #100]	; (8005090 <HAL_TIM_Base_Start_IT+0xb8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d009      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x6c>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a17      	ldr	r2, [pc, #92]	; (8005094 <HAL_TIM_Base_Start_IT+0xbc>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d004      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x6c>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a16      	ldr	r2, [pc, #88]	; (8005098 <HAL_TIM_Base_Start_IT+0xc0>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d111      	bne.n	8005068 <HAL_TIM_Base_Start_IT+0x90>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b06      	cmp	r3, #6
 8005054:	d010      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0xa0>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0201 	orr.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	e007      	b.n	8005078 <HAL_TIM_Base_Start_IT+0xa0>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	2300      	movs	r3, #0
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40010000 	.word	0x40010000
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40014000 	.word	0x40014000

0800509c <HAL_TIM_OC_Init>:
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_TIM_OC_Init+0x12>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e041      	b.n	8005132 <HAL_TIM_OC_Init+0x96>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <HAL_TIM_OC_Init+0x2c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fc fce4 	bl	8001a90 <HAL_TIM_OC_MspInit>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3304      	adds	r3, #4
 80050d8:	4619      	mov	r1, r3
 80050da:	4610      	mov	r0, r2
 80050dc:	f000 fc14 	bl	8005908 <TIM_Base_SetConfig>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005130:	2300      	movs	r3, #0
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_TIM_PWM_Init>:
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_TIM_PWM_Init+0x12>
 8005148:	2301      	movs	r3, #1
 800514a:	e041      	b.n	80051d0 <HAL_TIM_PWM_Init+0x96>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d106      	bne.n	8005166 <HAL_TIM_PWM_Init+0x2c>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f839 	bl	80051d8 <HAL_TIM_PWM_MspInit>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2202      	movs	r2, #2
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	3304      	adds	r3, #4
 8005176:	4619      	mov	r1, r3
 8005178:	4610      	mov	r0, r2
 800517a:	f000 fbc5 	bl	8005908 <TIM_Base_SetConfig>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80051ce:	2300      	movs	r3, #0
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_TIM_PWM_MspInit>:
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_TIM_PWM_Start>:
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d109      	bne.n	8005210 <HAL_TIM_PWM_Start+0x24>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	bf14      	ite	ne
 8005208:	2301      	movne	r3, #1
 800520a:	2300      	moveq	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	e022      	b.n	8005256 <HAL_TIM_PWM_Start+0x6a>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2b04      	cmp	r3, #4
 8005214:	d109      	bne.n	800522a <HAL_TIM_PWM_Start+0x3e>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b01      	cmp	r3, #1
 8005220:	bf14      	ite	ne
 8005222:	2301      	movne	r3, #1
 8005224:	2300      	moveq	r3, #0
 8005226:	b2db      	uxtb	r3, r3
 8005228:	e015      	b.n	8005256 <HAL_TIM_PWM_Start+0x6a>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b08      	cmp	r3, #8
 800522e:	d109      	bne.n	8005244 <HAL_TIM_PWM_Start+0x58>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b01      	cmp	r3, #1
 800523a:	bf14      	ite	ne
 800523c:	2301      	movne	r3, #1
 800523e:	2300      	moveq	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	e008      	b.n	8005256 <HAL_TIM_PWM_Start+0x6a>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	bf14      	ite	ne
 8005250:	2301      	movne	r3, #1
 8005252:	2300      	moveq	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_TIM_PWM_Start+0x72>
 800525a:	2301      	movs	r3, #1
 800525c:	e068      	b.n	8005330 <HAL_TIM_PWM_Start+0x144>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d104      	bne.n	800526e <HAL_TIM_PWM_Start+0x82>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800526c:	e013      	b.n	8005296 <HAL_TIM_PWM_Start+0xaa>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b04      	cmp	r3, #4
 8005272:	d104      	bne.n	800527e <HAL_TIM_PWM_Start+0x92>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800527c:	e00b      	b.n	8005296 <HAL_TIM_PWM_Start+0xaa>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b08      	cmp	r3, #8
 8005282:	d104      	bne.n	800528e <HAL_TIM_PWM_Start+0xa2>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800528c:	e003      	b.n	8005296 <HAL_TIM_PWM_Start+0xaa>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2202      	movs	r2, #2
 8005292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2201      	movs	r2, #1
 800529c:	6839      	ldr	r1, [r7, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 feb7 	bl	8006012 <TIM_CCxChannelCmd>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a23      	ldr	r2, [pc, #140]	; (8005338 <HAL_TIM_PWM_Start+0x14c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d107      	bne.n	80052be <HAL_TIM_PWM_Start+0xd2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052bc:	645a      	str	r2, [r3, #68]	; 0x44
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1d      	ldr	r2, [pc, #116]	; (8005338 <HAL_TIM_PWM_Start+0x14c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d018      	beq.n	80052fa <HAL_TIM_PWM_Start+0x10e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d0:	d013      	beq.n	80052fa <HAL_TIM_PWM_Start+0x10e>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a19      	ldr	r2, [pc, #100]	; (800533c <HAL_TIM_PWM_Start+0x150>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00e      	beq.n	80052fa <HAL_TIM_PWM_Start+0x10e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a17      	ldr	r2, [pc, #92]	; (8005340 <HAL_TIM_PWM_Start+0x154>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d009      	beq.n	80052fa <HAL_TIM_PWM_Start+0x10e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a16      	ldr	r2, [pc, #88]	; (8005344 <HAL_TIM_PWM_Start+0x158>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d004      	beq.n	80052fa <HAL_TIM_PWM_Start+0x10e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a14      	ldr	r2, [pc, #80]	; (8005348 <HAL_TIM_PWM_Start+0x15c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d111      	bne.n	800531e <HAL_TIM_PWM_Start+0x132>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b06      	cmp	r3, #6
 800530a:	d010      	beq.n	800532e <HAL_TIM_PWM_Start+0x142>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	e007      	b.n	800532e <HAL_TIM_PWM_Start+0x142>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0201 	orr.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	2300      	movs	r3, #0
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40010000 	.word	0x40010000
 800533c:	40000400 	.word	0x40000400
 8005340:	40000800 	.word	0x40000800
 8005344:	40000c00 	.word	0x40000c00
 8005348:	40014000 	.word	0x40014000

0800534c <HAL_TIM_IRQHandler>:
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b02      	cmp	r3, #2
 8005360:	d122      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x5c>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b02      	cmp	r3, #2
 800536e:	d11b      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x5c>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0202 	mvn.w	r2, #2
 8005378:	611a      	str	r2, [r3, #16]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	771a      	strb	r2, [r3, #28]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_TIM_IRQHandler+0x4a>
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fa9c 	bl	80058cc <HAL_TIM_IC_CaptureCallback>
 8005394:	e005      	b.n	80053a2 <HAL_TIM_IRQHandler+0x56>
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fa8e 	bl	80058b8 <HAL_TIM_OC_DelayElapsedCallback>
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 fa9f 	bl	80058e0 <HAL_TIM_PWM_PulseFinishedCallback>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	771a      	strb	r2, [r3, #28]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d122      	bne.n	80053fc <HAL_TIM_IRQHandler+0xb0>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d11b      	bne.n	80053fc <HAL_TIM_IRQHandler+0xb0>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0204 	mvn.w	r2, #4
 80053cc:	611a      	str	r2, [r3, #16]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2202      	movs	r2, #2
 80053d2:	771a      	strb	r2, [r3, #28]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_TIM_IRQHandler+0x9e>
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fa72 	bl	80058cc <HAL_TIM_IC_CaptureCallback>
 80053e8:	e005      	b.n	80053f6 <HAL_TIM_IRQHandler+0xaa>
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa64 	bl	80058b8 <HAL_TIM_OC_DelayElapsedCallback>
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fa75 	bl	80058e0 <HAL_TIM_PWM_PulseFinishedCallback>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	771a      	strb	r2, [r3, #28]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0308 	and.w	r3, r3, #8
 8005406:	2b08      	cmp	r3, #8
 8005408:	d122      	bne.n	8005450 <HAL_TIM_IRQHandler+0x104>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b08      	cmp	r3, #8
 8005416:	d11b      	bne.n	8005450 <HAL_TIM_IRQHandler+0x104>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0208 	mvn.w	r2, #8
 8005420:	611a      	str	r2, [r3, #16]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2204      	movs	r2, #4
 8005426:	771a      	strb	r2, [r3, #28]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_TIM_IRQHandler+0xf2>
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fa48 	bl	80058cc <HAL_TIM_IC_CaptureCallback>
 800543c:	e005      	b.n	800544a <HAL_TIM_IRQHandler+0xfe>
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fa3a 	bl	80058b8 <HAL_TIM_OC_DelayElapsedCallback>
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fa4b 	bl	80058e0 <HAL_TIM_PWM_PulseFinishedCallback>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	771a      	strb	r2, [r3, #28]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0310 	and.w	r3, r3, #16
 800545a:	2b10      	cmp	r3, #16
 800545c:	d122      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x158>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0310 	and.w	r3, r3, #16
 8005468:	2b10      	cmp	r3, #16
 800546a:	d11b      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x158>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0210 	mvn.w	r2, #16
 8005474:	611a      	str	r2, [r3, #16]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2208      	movs	r2, #8
 800547a:	771a      	strb	r2, [r3, #28]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_TIM_IRQHandler+0x146>
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fa1e 	bl	80058cc <HAL_TIM_IC_CaptureCallback>
 8005490:	e005      	b.n	800549e <HAL_TIM_IRQHandler+0x152>
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fa10 	bl	80058b8 <HAL_TIM_OC_DelayElapsedCallback>
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fa21 	bl	80058e0 <HAL_TIM_PWM_PulseFinishedCallback>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	771a      	strb	r2, [r3, #28]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d10e      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x184>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d107      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x184>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0201 	mvn.w	r2, #1
 80054c8:	611a      	str	r2, [r3, #16]
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f9ea 	bl	80058a4 <HAL_TIM_PeriodElapsedCallback>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054da:	2b80      	cmp	r3, #128	; 0x80
 80054dc:	d10e      	bne.n	80054fc <HAL_TIM_IRQHandler+0x1b0>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e8:	2b80      	cmp	r3, #128	; 0x80
 80054ea:	d107      	bne.n	80054fc <HAL_TIM_IRQHandler+0x1b0>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054f4:	611a      	str	r2, [r3, #16]
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 ffa4 	bl	8006444 <HAL_TIMEx_BreakCallback>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005506:	2b40      	cmp	r3, #64	; 0x40
 8005508:	d10e      	bne.n	8005528 <HAL_TIM_IRQHandler+0x1dc>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005514:	2b40      	cmp	r3, #64	; 0x40
 8005516:	d107      	bne.n	8005528 <HAL_TIM_IRQHandler+0x1dc>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005520:	611a      	str	r2, [r3, #16]
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f9e6 	bl	80058f4 <HAL_TIM_TriggerCallback>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b20      	cmp	r3, #32
 8005534:	d10e      	bne.n	8005554 <HAL_TIM_IRQHandler+0x208>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b20      	cmp	r3, #32
 8005542:	d107      	bne.n	8005554 <HAL_TIM_IRQHandler+0x208>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0220 	mvn.w	r2, #32
 800554c:	611a      	str	r2, [r3, #16]
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 ff6e 	bl	8006430 <HAL_TIMEx_CommutCallback>
 8005554:	bf00      	nop
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_TIM_OC_ConfigChannel>:
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	2300      	movs	r3, #0
 800556a:	75fb      	strb	r3, [r7, #23]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005576:	2302      	movs	r3, #2
 8005578:	e048      	b.n	800560c <HAL_TIM_OC_ConfigChannel+0xb0>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b0c      	cmp	r3, #12
 8005586:	d839      	bhi.n	80055fc <HAL_TIM_OC_ConfigChannel+0xa0>
 8005588:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <HAL_TIM_OC_ConfigChannel+0x34>)
 800558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558e:	bf00      	nop
 8005590:	080055c5 	.word	0x080055c5
 8005594:	080055fd 	.word	0x080055fd
 8005598:	080055fd 	.word	0x080055fd
 800559c:	080055fd 	.word	0x080055fd
 80055a0:	080055d3 	.word	0x080055d3
 80055a4:	080055fd 	.word	0x080055fd
 80055a8:	080055fd 	.word	0x080055fd
 80055ac:	080055fd 	.word	0x080055fd
 80055b0:	080055e1 	.word	0x080055e1
 80055b4:	080055fd 	.word	0x080055fd
 80055b8:	080055fd 	.word	0x080055fd
 80055bc:	080055fd 	.word	0x080055fd
 80055c0:	080055ef 	.word	0x080055ef
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fa1c 	bl	8005a08 <TIM_OC1_SetConfig>
 80055d0:	e017      	b.n	8005602 <HAL_TIM_OC_ConfigChannel+0xa6>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 fa7b 	bl	8005ad4 <TIM_OC2_SetConfig>
 80055de:	e010      	b.n	8005602 <HAL_TIM_OC_ConfigChannel+0xa6>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68b9      	ldr	r1, [r7, #8]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fae0 	bl	8005bac <TIM_OC3_SetConfig>
 80055ec:	e009      	b.n	8005602 <HAL_TIM_OC_ConfigChannel+0xa6>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fb43 	bl	8005c80 <TIM_OC4_SetConfig>
 80055fa:	e002      	b.n	8005602 <HAL_TIM_OC_ConfigChannel+0xa6>
 80055fc:	2301      	movs	r3, #1
 80055fe:	75fb      	strb	r3, [r7, #23]
 8005600:	bf00      	nop
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800560a:	7dfb      	ldrb	r3, [r7, #23]
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_TIM_PWM_ConfigChannel>:
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	2300      	movs	r3, #0
 8005622:	75fb      	strb	r3, [r7, #23]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800562e:	2302      	movs	r3, #2
 8005630:	e0ae      	b.n	8005790 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b0c      	cmp	r3, #12
 800563e:	f200 809f 	bhi.w	8005780 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005642:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	0800567d 	.word	0x0800567d
 800564c:	08005781 	.word	0x08005781
 8005650:	08005781 	.word	0x08005781
 8005654:	08005781 	.word	0x08005781
 8005658:	080056bd 	.word	0x080056bd
 800565c:	08005781 	.word	0x08005781
 8005660:	08005781 	.word	0x08005781
 8005664:	08005781 	.word	0x08005781
 8005668:	080056ff 	.word	0x080056ff
 800566c:	08005781 	.word	0x08005781
 8005670:	08005781 	.word	0x08005781
 8005674:	08005781 	.word	0x08005781
 8005678:	0800573f 	.word	0x0800573f
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 f9c0 	bl	8005a08 <TIM_OC1_SetConfig>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0208 	orr.w	r2, r2, #8
 8005696:	619a      	str	r2, [r3, #24]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0204 	bic.w	r2, r2, #4
 80056a6:	619a      	str	r2, [r3, #24]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6999      	ldr	r1, [r3, #24]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	619a      	str	r2, [r3, #24]
 80056ba:	e064      	b.n	8005786 <HAL_TIM_PWM_ConfigChannel+0x172>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fa06 	bl	8005ad4 <TIM_OC2_SetConfig>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d6:	619a      	str	r2, [r3, #24]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e6:	619a      	str	r2, [r3, #24]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6999      	ldr	r1, [r3, #24]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	021a      	lsls	r2, r3, #8
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	619a      	str	r2, [r3, #24]
 80056fc:	e043      	b.n	8005786 <HAL_TIM_PWM_ConfigChannel+0x172>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fa51 	bl	8005bac <TIM_OC3_SetConfig>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69da      	ldr	r2, [r3, #28]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f042 0208 	orr.w	r2, r2, #8
 8005718:	61da      	str	r2, [r3, #28]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69da      	ldr	r2, [r3, #28]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0204 	bic.w	r2, r2, #4
 8005728:	61da      	str	r2, [r3, #28]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69d9      	ldr	r1, [r3, #28]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	691a      	ldr	r2, [r3, #16]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	61da      	str	r2, [r3, #28]
 800573c:	e023      	b.n	8005786 <HAL_TIM_PWM_ConfigChannel+0x172>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fa9b 	bl	8005c80 <TIM_OC4_SetConfig>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005758:	61da      	str	r2, [r3, #28]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69da      	ldr	r2, [r3, #28]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005768:	61da      	str	r2, [r3, #28]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69d9      	ldr	r1, [r3, #28]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	021a      	lsls	r2, r3, #8
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	61da      	str	r2, [r3, #28]
 800577e:	e002      	b.n	8005786 <HAL_TIM_PWM_ConfigChannel+0x172>
 8005780:	2301      	movs	r3, #1
 8005782:	75fb      	strb	r3, [r7, #23]
 8005784:	bf00      	nop
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800578e:	7dfb      	ldrb	r3, [r7, #23]
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_TIM_SlaveConfigSynchro>:
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e031      	b.n	8005814 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80057c0:	6839      	ldr	r1, [r7, #0]
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 faac 	bl	8005d20 <TIM_SlaveTimer_SetConfig>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d009      	beq.n	80057e2 <HAL_TIM_SlaveConfigSynchro+0x4a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057de:	2301      	movs	r3, #1
 80057e0:	e018      	b.n	8005814 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68da      	ldr	r2, [r3, #12]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057f0:	60da      	str	r2, [r3, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005800:	60da      	str	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005812:	2300      	movs	r3, #0
 8005814:	4618      	mov	r0, r3
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_TIM_ReadCapturedValue>:
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b0c      	cmp	r3, #12
 800582e:	d831      	bhi.n	8005894 <HAL_TIM_ReadCapturedValue+0x78>
 8005830:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	0800586d 	.word	0x0800586d
 800583c:	08005895 	.word	0x08005895
 8005840:	08005895 	.word	0x08005895
 8005844:	08005895 	.word	0x08005895
 8005848:	08005877 	.word	0x08005877
 800584c:	08005895 	.word	0x08005895
 8005850:	08005895 	.word	0x08005895
 8005854:	08005895 	.word	0x08005895
 8005858:	08005881 	.word	0x08005881
 800585c:	08005895 	.word	0x08005895
 8005860:	08005895 	.word	0x08005895
 8005864:	08005895 	.word	0x08005895
 8005868:	0800588b 	.word	0x0800588b
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	e00f      	b.n	8005896 <HAL_TIM_ReadCapturedValue+0x7a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	e00a      	b.n	8005896 <HAL_TIM_ReadCapturedValue+0x7a>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	e005      	b.n	8005896 <HAL_TIM_ReadCapturedValue+0x7a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	e000      	b.n	8005896 <HAL_TIM_ReadCapturedValue+0x7a>
 8005894:	bf00      	nop
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_TIM_PeriodElapsedCallback>:
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_TIM_OC_DelayElapsedCallback>:
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_TIM_IC_CaptureCallback>:
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_TIM_TriggerCallback>:
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <TIM_Base_SetConfig>:
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a34      	ldr	r2, [pc, #208]	; (80059ec <TIM_Base_SetConfig+0xe4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00f      	beq.n	8005940 <TIM_Base_SetConfig+0x38>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005926:	d00b      	beq.n	8005940 <TIM_Base_SetConfig+0x38>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a31      	ldr	r2, [pc, #196]	; (80059f0 <TIM_Base_SetConfig+0xe8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d007      	beq.n	8005940 <TIM_Base_SetConfig+0x38>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a30      	ldr	r2, [pc, #192]	; (80059f4 <TIM_Base_SetConfig+0xec>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d003      	beq.n	8005940 <TIM_Base_SetConfig+0x38>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a2f      	ldr	r2, [pc, #188]	; (80059f8 <TIM_Base_SetConfig+0xf0>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d108      	bne.n	8005952 <TIM_Base_SetConfig+0x4a>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a25      	ldr	r2, [pc, #148]	; (80059ec <TIM_Base_SetConfig+0xe4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d01b      	beq.n	8005992 <TIM_Base_SetConfig+0x8a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005960:	d017      	beq.n	8005992 <TIM_Base_SetConfig+0x8a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a22      	ldr	r2, [pc, #136]	; (80059f0 <TIM_Base_SetConfig+0xe8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d013      	beq.n	8005992 <TIM_Base_SetConfig+0x8a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a21      	ldr	r2, [pc, #132]	; (80059f4 <TIM_Base_SetConfig+0xec>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00f      	beq.n	8005992 <TIM_Base_SetConfig+0x8a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a20      	ldr	r2, [pc, #128]	; (80059f8 <TIM_Base_SetConfig+0xf0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00b      	beq.n	8005992 <TIM_Base_SetConfig+0x8a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a1f      	ldr	r2, [pc, #124]	; (80059fc <TIM_Base_SetConfig+0xf4>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d007      	beq.n	8005992 <TIM_Base_SetConfig+0x8a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a1e      	ldr	r2, [pc, #120]	; (8005a00 <TIM_Base_SetConfig+0xf8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d003      	beq.n	8005992 <TIM_Base_SetConfig+0x8a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a1d      	ldr	r2, [pc, #116]	; (8005a04 <TIM_Base_SetConfig+0xfc>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d108      	bne.n	80059a4 <TIM_Base_SetConfig+0x9c>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	62da      	str	r2, [r3, #44]	; 0x2c
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	629a      	str	r2, [r3, #40]	; 0x28
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a08      	ldr	r2, [pc, #32]	; (80059ec <TIM_Base_SetConfig+0xe4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d103      	bne.n	80059d8 <TIM_Base_SetConfig+0xd0>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	631a      	str	r2, [r3, #48]	; 0x30
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	615a      	str	r2, [r3, #20]
 80059de:	bf00      	nop
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40010000 	.word	0x40010000
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40000800 	.word	0x40000800
 80059f8:	40000c00 	.word	0x40000c00
 80059fc:	40014000 	.word	0x40014000
 8005a00:	40014400 	.word	0x40014400
 8005a04:	40014800 	.word	0x40014800

08005a08 <TIM_OC1_SetConfig>:
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	f023 0201 	bic.w	r2, r3, #1
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	621a      	str	r2, [r3, #32]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0303 	bic.w	r3, r3, #3
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f023 0302 	bic.w	r3, r3, #2
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a1c      	ldr	r2, [pc, #112]	; (8005ad0 <TIM_OC1_SetConfig+0xc8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d10c      	bne.n	8005a7e <TIM_OC1_SetConfig+0x76>
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f023 0308 	bic.w	r3, r3, #8
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f023 0304 	bic.w	r3, r3, #4
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a13      	ldr	r2, [pc, #76]	; (8005ad0 <TIM_OC1_SetConfig+0xc8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d111      	bne.n	8005aaa <TIM_OC1_SetConfig+0xa2>
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a8c:	613b      	str	r3, [r7, #16]
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a94:	613b      	str	r3, [r7, #16]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	605a      	str	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	619a      	str	r2, [r3, #24]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	635a      	str	r2, [r3, #52]	; 0x34
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	621a      	str	r2, [r3, #32]
 8005ac4:	bf00      	nop
 8005ac6:	371c      	adds	r7, #28
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	40010000 	.word	0x40010000

08005ad4 <TIM_OC2_SetConfig>:
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f023 0210 	bic.w	r2, r3, #16
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	621a      	str	r2, [r3, #32]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	021b      	lsls	r3, r3, #8
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f023 0320 	bic.w	r3, r3, #32
 8005b1e:	617b      	str	r3, [r7, #20]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <TIM_OC2_SetConfig+0xd4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d10d      	bne.n	8005b50 <TIM_OC2_SetConfig+0x7c>
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	011b      	lsls	r3, r3, #4
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a15      	ldr	r2, [pc, #84]	; (8005ba8 <TIM_OC2_SetConfig+0xd4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d113      	bne.n	8005b80 <TIM_OC2_SetConfig+0xac>
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b5e:	613b      	str	r3, [r7, #16]
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b66:	613b      	str	r3, [r7, #16]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	605a      	str	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	619a      	str	r2, [r3, #24]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	639a      	str	r2, [r3, #56]	; 0x38
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	621a      	str	r2, [r3, #32]
 8005b9a:	bf00      	nop
 8005b9c:	371c      	adds	r7, #28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	40010000 	.word	0x40010000

08005bac <TIM_OC3_SetConfig>:
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	621a      	str	r2, [r3, #32]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0303 	bic.w	r3, r3, #3
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	021b      	lsls	r3, r3, #8
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a1d      	ldr	r2, [pc, #116]	; (8005c7c <TIM_OC3_SetConfig+0xd0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d10d      	bne.n	8005c26 <TIM_OC3_SetConfig+0x7a>
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	021b      	lsls	r3, r3, #8
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a14      	ldr	r2, [pc, #80]	; (8005c7c <TIM_OC3_SetConfig+0xd0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d113      	bne.n	8005c56 <TIM_OC3_SetConfig+0xaa>
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c34:	613b      	str	r3, [r7, #16]
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	605a      	str	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	61da      	str	r2, [r3, #28]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	621a      	str	r2, [r3, #32]
 8005c70:	bf00      	nop
 8005c72:	371c      	adds	r7, #28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	40010000 	.word	0x40010000

08005c80 <TIM_OC4_SetConfig>:
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	621a      	str	r2, [r3, #32]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	613b      	str	r3, [r7, #16]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	021b      	lsls	r3, r3, #8
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cca:	613b      	str	r3, [r7, #16]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	031b      	lsls	r3, r3, #12
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a10      	ldr	r2, [pc, #64]	; (8005d1c <TIM_OC4_SetConfig+0x9c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d109      	bne.n	8005cf4 <TIM_OC4_SetConfig+0x74>
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	019b      	lsls	r3, r3, #6
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	61da      	str	r2, [r3, #28]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	641a      	str	r2, [r3, #64]	; 0x40
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	621a      	str	r2, [r3, #32]
 8005d0e:	bf00      	nop
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40010000 	.word	0x40010000

08005d20 <TIM_SlaveTimer_SetConfig>:
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	75fb      	strb	r3, [r7, #23]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	613b      	str	r3, [r7, #16]
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f023 0307 	bic.w	r3, r3, #7
 8005d4e:	613b      	str	r3, [r7, #16]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	609a      	str	r2, [r3, #8]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b70      	cmp	r3, #112	; 0x70
 8005d68:	d01a      	beq.n	8005da0 <TIM_SlaveTimer_SetConfig+0x80>
 8005d6a:	2b70      	cmp	r3, #112	; 0x70
 8005d6c:	d860      	bhi.n	8005e30 <TIM_SlaveTimer_SetConfig+0x110>
 8005d6e:	2b60      	cmp	r3, #96	; 0x60
 8005d70:	d054      	beq.n	8005e1c <TIM_SlaveTimer_SetConfig+0xfc>
 8005d72:	2b60      	cmp	r3, #96	; 0x60
 8005d74:	d85c      	bhi.n	8005e30 <TIM_SlaveTimer_SetConfig+0x110>
 8005d76:	2b50      	cmp	r3, #80	; 0x50
 8005d78:	d046      	beq.n	8005e08 <TIM_SlaveTimer_SetConfig+0xe8>
 8005d7a:	2b50      	cmp	r3, #80	; 0x50
 8005d7c:	d858      	bhi.n	8005e30 <TIM_SlaveTimer_SetConfig+0x110>
 8005d7e:	2b40      	cmp	r3, #64	; 0x40
 8005d80:	d019      	beq.n	8005db6 <TIM_SlaveTimer_SetConfig+0x96>
 8005d82:	2b40      	cmp	r3, #64	; 0x40
 8005d84:	d854      	bhi.n	8005e30 <TIM_SlaveTimer_SetConfig+0x110>
 8005d86:	2b30      	cmp	r3, #48	; 0x30
 8005d88:	d055      	beq.n	8005e36 <TIM_SlaveTimer_SetConfig+0x116>
 8005d8a:	2b30      	cmp	r3, #48	; 0x30
 8005d8c:	d850      	bhi.n	8005e30 <TIM_SlaveTimer_SetConfig+0x110>
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	d051      	beq.n	8005e36 <TIM_SlaveTimer_SetConfig+0x116>
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d84c      	bhi.n	8005e30 <TIM_SlaveTimer_SetConfig+0x110>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d04d      	beq.n	8005e36 <TIM_SlaveTimer_SetConfig+0x116>
 8005d9a:	2b10      	cmp	r3, #16
 8005d9c:	d04b      	beq.n	8005e36 <TIM_SlaveTimer_SetConfig+0x116>
 8005d9e:	e047      	b.n	8005e30 <TIM_SlaveTimer_SetConfig+0x110>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6818      	ldr	r0, [r3, #0]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68d9      	ldr	r1, [r3, #12]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f000 f90f 	bl	8005fd2 <TIM_ETR_SetConfig>
 8005db4:	e040      	b.n	8005e38 <TIM_SlaveTimer_SetConfig+0x118>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b05      	cmp	r3, #5
 8005dbc:	d101      	bne.n	8005dc2 <TIM_SlaveTimer_SetConfig+0xa2>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e03b      	b.n	8005e3a <TIM_SlaveTimer_SetConfig+0x11a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6a1a      	ldr	r2, [r3, #32]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0201 	bic.w	r2, r2, #1
 8005dd8:	621a      	str	r2, [r3, #32]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005de8:	60bb      	str	r3, [r7, #8]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60bb      	str	r3, [r7, #8]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	619a      	str	r2, [r3, #24]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	621a      	str	r2, [r3, #32]
 8005e06:	e017      	b.n	8005e38 <TIM_SlaveTimer_SetConfig+0x118>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	6899      	ldr	r1, [r3, #8]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	461a      	mov	r2, r3
 8005e16:	f000 f87d 	bl	8005f14 <TIM_TI1_ConfigInputStage>
 8005e1a:	e00d      	b.n	8005e38 <TIM_SlaveTimer_SetConfig+0x118>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6818      	ldr	r0, [r3, #0]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	6899      	ldr	r1, [r3, #8]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	f000 f8a2 	bl	8005f72 <TIM_TI2_ConfigInputStage>
 8005e2e:	e003      	b.n	8005e38 <TIM_SlaveTimer_SetConfig+0x118>
 8005e30:	2301      	movs	r3, #1
 8005e32:	75fb      	strb	r3, [r7, #23]
 8005e34:	e000      	b.n	8005e38 <TIM_SlaveTimer_SetConfig+0x118>
 8005e36:	bf00      	nop
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <TIM_TI1_SetConfig>:
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	603b      	str	r3, [r7, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	f023 0201 	bic.w	r2, r3, #1
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	621a      	str	r2, [r3, #32]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	613b      	str	r3, [r7, #16]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4a24      	ldr	r2, [pc, #144]	; (8005f00 <TIM_TI1_SetConfig+0xbc>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <TIM_TI1_SetConfig+0x56>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e78:	d00f      	beq.n	8005e9a <TIM_TI1_SetConfig+0x56>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4a21      	ldr	r2, [pc, #132]	; (8005f04 <TIM_TI1_SetConfig+0xc0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <TIM_TI1_SetConfig+0x56>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4a20      	ldr	r2, [pc, #128]	; (8005f08 <TIM_TI1_SetConfig+0xc4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d007      	beq.n	8005e9a <TIM_TI1_SetConfig+0x56>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4a1f      	ldr	r2, [pc, #124]	; (8005f0c <TIM_TI1_SetConfig+0xc8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <TIM_TI1_SetConfig+0x56>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4a1e      	ldr	r2, [pc, #120]	; (8005f10 <TIM_TI1_SetConfig+0xcc>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d101      	bne.n	8005e9e <TIM_TI1_SetConfig+0x5a>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e000      	b.n	8005ea0 <TIM_TI1_SetConfig+0x5c>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d008      	beq.n	8005eb6 <TIM_TI1_SetConfig+0x72>
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f023 0303 	bic.w	r3, r3, #3
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	e003      	b.n	8005ebe <TIM_TI1_SetConfig+0x7a>
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f043 0301 	orr.w	r3, r3, #1
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f023 030a 	bic.w	r3, r3, #10
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f003 030a 	and.w	r3, r3, #10
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	619a      	str	r2, [r3, #24]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	621a      	str	r2, [r3, #32]
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	40010000 	.word	0x40010000
 8005f04:	40000400 	.word	0x40000400
 8005f08:	40000800 	.word	0x40000800
 8005f0c:	40000c00 	.word	0x40000c00
 8005f10:	40014000 	.word	0x40014000

08005f14 <TIM_TI1_ConfigInputStage>:
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f023 0201 	bic.w	r2, r3, #1
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	621a      	str	r2, [r3, #32]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f3e:	613b      	str	r3, [r7, #16]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f023 030a 	bic.w	r3, r3, #10
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	619a      	str	r2, [r3, #24]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	621a      	str	r2, [r3, #32]
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <TIM_TI2_ConfigInputStage>:
 8005f72:	b480      	push	{r7}
 8005f74:	b087      	sub	sp, #28
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f023 0210 	bic.w	r2, r3, #16
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	621a      	str	r2, [r3, #32]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	613b      	str	r3, [r7, #16]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	031b      	lsls	r3, r3, #12
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fae:	613b      	str	r3, [r7, #16]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	619a      	str	r2, [r3, #24]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	621a      	str	r2, [r3, #32]
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <TIM_ETR_SetConfig>:
 8005fd2:	b480      	push	{r7}
 8005fd4:	b087      	sub	sp, #28
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	607a      	str	r2, [r7, #4]
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	021a      	lsls	r2, r3, #8
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	609a      	str	r2, [r3, #8]
 8006006:	bf00      	nop
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <TIM_CCxChannelCmd>:
 8006012:	b480      	push	{r7}
 8006014:	b087      	sub	sp, #28
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f003 031f 	and.w	r3, r3, #31
 8006024:	2201      	movs	r2, #1
 8006026:	fa02 f303 	lsl.w	r3, r2, r3
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1a      	ldr	r2, [r3, #32]
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	43db      	mvns	r3, r3
 8006034:	401a      	ands	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	621a      	str	r2, [r3, #32]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a1a      	ldr	r2, [r3, #32]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f003 031f 	and.w	r3, r3, #31
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	fa01 f303 	lsl.w	r3, r1, r3
 800604a:	431a      	orrs	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	621a      	str	r2, [r3, #32]
 8006050:	bf00      	nop
 8006052:	371c      	adds	r7, #28
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_TIMEx_HallSensor_Init>:
 800605c:	b580      	push	{r7, lr}
 800605e:	b08a      	sub	sp, #40	; 0x28
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <HAL_TIMEx_HallSensor_Init+0x14>
 800606c:	2301      	movs	r3, #1
 800606e:	e09a      	b.n	80061a6 <HAL_TIMEx_HallSensor_Init+0x14a>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d106      	bne.n	800608a <HAL_TIMEx_HallSensor_Init+0x2e>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7fb fcb5 	bl	80019f4 <HAL_TIMEx_HallSensor_MspInit>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2202      	movs	r2, #2
 800608e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3304      	adds	r3, #4
 800609a:	4619      	mov	r1, r3
 800609c:	4610      	mov	r0, r2
 800609e:	f7ff fc33 	bl	8005908 <TIM_Base_SetConfig>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	6819      	ldr	r1, [r3, #0]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	2203      	movs	r2, #3
 80060b0:	f7ff fec8 	bl	8005e44 <TIM_TI1_SetConfig>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	699a      	ldr	r2, [r3, #24]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 020c 	bic.w	r2, r2, #12
 80060c2:	619a      	str	r2, [r3, #24]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6999      	ldr	r1, [r3, #24]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	619a      	str	r2, [r3, #24]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060e4:	605a      	str	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80060f4:	609a      	str	r2, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006104:	609a      	str	r2, [r3, #8]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0207 	bic.w	r2, r2, #7
 8006114:	609a      	str	r2, [r3, #8]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f042 0204 	orr.w	r2, r2, #4
 8006124:	609a      	str	r2, [r3, #8]
 8006126:	2300      	movs	r3, #0
 8006128:	61fb      	str	r3, [r7, #28]
 800612a:	2300      	movs	r3, #0
 800612c:	623b      	str	r3, [r7, #32]
 800612e:	2370      	movs	r3, #112	; 0x70
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	2300      	movs	r3, #0
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
 8006136:	2300      	movs	r3, #0
 8006138:	61bb      	str	r3, [r7, #24]
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f107 020c 	add.w	r2, r7, #12
 800614c:	4611      	mov	r1, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fcc0 	bl	8005ad4 <TIM_OC2_SetConfig>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006162:	605a      	str	r2, [r3, #4]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8006172:	605a      	str	r2, [r3, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061a4:	2300      	movs	r3, #0
 80061a6:	4618      	mov	r0, r3
 80061a8:	3728      	adds	r7, #40	; 0x28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <HAL_TIMEx_HallSensor_Start>:
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061be:	73fb      	strb	r3, [r7, #15]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061c6:	73bb      	strb	r3, [r7, #14]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061ce:	737b      	strb	r3, [r7, #13]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061d6:	733b      	strb	r3, [r7, #12]
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d108      	bne.n	80061f0 <HAL_TIMEx_HallSensor_Start+0x40>
 80061de:	7bbb      	ldrb	r3, [r7, #14]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d105      	bne.n	80061f0 <HAL_TIMEx_HallSensor_Start+0x40>
 80061e4:	7b7b      	ldrb	r3, [r7, #13]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d102      	bne.n	80061f0 <HAL_TIMEx_HallSensor_Start+0x40>
 80061ea:	7b3b      	ldrb	r3, [r7, #12]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d001      	beq.n	80061f4 <HAL_TIMEx_HallSensor_Start+0x44>
 80061f0:	2301      	movs	r3, #1
 80061f2:	e04f      	b.n	8006294 <HAL_TIMEx_HallSensor_Start+0xe4>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2201      	movs	r2, #1
 800621a:	2100      	movs	r1, #0
 800621c:	4618      	mov	r0, r3
 800621e:	f7ff fef8 	bl	8006012 <TIM_CCxChannelCmd>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a1d      	ldr	r2, [pc, #116]	; (800629c <HAL_TIMEx_HallSensor_Start+0xec>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d018      	beq.n	800625e <HAL_TIMEx_HallSensor_Start+0xae>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006234:	d013      	beq.n	800625e <HAL_TIMEx_HallSensor_Start+0xae>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a19      	ldr	r2, [pc, #100]	; (80062a0 <HAL_TIMEx_HallSensor_Start+0xf0>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00e      	beq.n	800625e <HAL_TIMEx_HallSensor_Start+0xae>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a17      	ldr	r2, [pc, #92]	; (80062a4 <HAL_TIMEx_HallSensor_Start+0xf4>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d009      	beq.n	800625e <HAL_TIMEx_HallSensor_Start+0xae>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a16      	ldr	r2, [pc, #88]	; (80062a8 <HAL_TIMEx_HallSensor_Start+0xf8>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d004      	beq.n	800625e <HAL_TIMEx_HallSensor_Start+0xae>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a14      	ldr	r2, [pc, #80]	; (80062ac <HAL_TIMEx_HallSensor_Start+0xfc>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d111      	bne.n	8006282 <HAL_TIMEx_HallSensor_Start+0xd2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f003 0307 	and.w	r3, r3, #7
 8006268:	60bb      	str	r3, [r7, #8]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b06      	cmp	r3, #6
 800626e:	d010      	beq.n	8006292 <HAL_TIMEx_HallSensor_Start+0xe2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	e007      	b.n	8006292 <HAL_TIMEx_HallSensor_Start+0xe2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f042 0201 	orr.w	r2, r2, #1
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	2300      	movs	r3, #0
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40010000 	.word	0x40010000
 80062a0:	40000400 	.word	0x40000400
 80062a4:	40000800 	.word	0x40000800
 80062a8:	40000c00 	.word	0x40000c00
 80062ac:	40014000 	.word	0x40014000

080062b0 <HAL_TIMEx_MasterConfigSynchronization>:
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e050      	b.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	60bb      	str	r3, [r7, #8]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	605a      	str	r2, [r3, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a1c      	ldr	r2, [pc, #112]	; (8006378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d018      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006314:	d013      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a18      	ldr	r2, [pc, #96]	; (800637c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00e      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a16      	ldr	r2, [pc, #88]	; (8006380 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d009      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a15      	ldr	r2, [pc, #84]	; (8006384 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d004      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a13      	ldr	r2, [pc, #76]	; (8006388 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d10c      	bne.n	8006358 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006344:	60bb      	str	r3, [r7, #8]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	4313      	orrs	r3, r2
 800634e:	60bb      	str	r3, [r7, #8]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	609a      	str	r2, [r3, #8]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006368:	2300      	movs	r3, #0
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	40010000 	.word	0x40010000
 800637c:	40000400 	.word	0x40000400
 8006380:	40000800 	.word	0x40000800
 8006384:	40000c00 	.word	0x40000c00
 8006388:	40014000 	.word	0x40014000

0800638c <HAL_TIMEx_ConfigBreakDeadTime>:
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e03d      	b.n	8006424 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	645a      	str	r2, [r3, #68]	; 0x44
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006422:	2300      	movs	r3, #0
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_TIMEx_CommutCallback>:
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_TIMEx_BreakCallback>:
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_UART_Init>:
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_UART_Init+0x12>
 8006466:	2301      	movs	r3, #1
 8006468:	e03f      	b.n	80064ea <HAL_UART_Init+0x92>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d106      	bne.n	8006484 <HAL_UART_Init+0x2c>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7fb fb8a 	bl	8001b98 <HAL_UART_MspInit>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2224      	movs	r2, #36	; 0x24
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800649a:	60da      	str	r2, [r3, #12]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f829 	bl	80064f4 <UART_SetConfig>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691a      	ldr	r2, [r3, #16]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064b0:	611a      	str	r2, [r3, #16]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695a      	ldr	r2, [r3, #20]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064c0:	615a      	str	r2, [r3, #20]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064d0:	60da      	str	r2, [r3, #12]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	641a      	str	r2, [r3, #64]	; 0x40
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064e8:	2300      	movs	r3, #0
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <UART_SetConfig>:
 80064f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f8:	b0c0      	sub	sp, #256	; 0x100
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8006500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800650c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006510:	68d9      	ldr	r1, [r3, #12]
 8006512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	ea40 0301 	orr.w	r3, r0, r1
 800651c:	6113      	str	r3, [r2, #16]
 800651e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	431a      	orrs	r2, r3
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	431a      	orrs	r2, r3
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	4313      	orrs	r3, r2
 800653c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800654c:	f021 010c 	bic.w	r1, r1, #12
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800655a:	430b      	orrs	r3, r1
 800655c:	60d3      	str	r3, [r2, #12]
 800655e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800656a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800656e:	6999      	ldr	r1, [r3, #24]
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	ea40 0301 	orr.w	r3, r0, r1
 800657a:	6153      	str	r3, [r2, #20]
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	4b8f      	ldr	r3, [pc, #572]	; (80067c0 <UART_SetConfig+0x2cc>)
 8006584:	429a      	cmp	r2, r3
 8006586:	d005      	beq.n	8006594 <UART_SetConfig+0xa0>
 8006588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	4b8d      	ldr	r3, [pc, #564]	; (80067c4 <UART_SetConfig+0x2d0>)
 8006590:	429a      	cmp	r2, r3
 8006592:	d104      	bne.n	800659e <UART_SetConfig+0xaa>
 8006594:	f7fe fc34 	bl	8004e00 <HAL_RCC_GetPCLK2Freq>
 8006598:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800659c:	e003      	b.n	80065a6 <UART_SetConfig+0xb2>
 800659e:	f7fe fc1b 	bl	8004dd8 <HAL_RCC_GetPCLK1Freq>
 80065a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80065a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b0:	f040 810c 	bne.w	80067cc <UART_SetConfig+0x2d8>
 80065b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80065c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80065c6:	4622      	mov	r2, r4
 80065c8:	462b      	mov	r3, r5
 80065ca:	1891      	adds	r1, r2, r2
 80065cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80065ce:	415b      	adcs	r3, r3
 80065d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80065d6:	4621      	mov	r1, r4
 80065d8:	eb12 0801 	adds.w	r8, r2, r1
 80065dc:	4629      	mov	r1, r5
 80065de:	eb43 0901 	adc.w	r9, r3, r1
 80065e2:	f04f 0200 	mov.w	r2, #0
 80065e6:	f04f 0300 	mov.w	r3, #0
 80065ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065f6:	4690      	mov	r8, r2
 80065f8:	4699      	mov	r9, r3
 80065fa:	4623      	mov	r3, r4
 80065fc:	eb18 0303 	adds.w	r3, r8, r3
 8006600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006604:	462b      	mov	r3, r5
 8006606:	eb49 0303 	adc.w	r3, r9, r3
 800660a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800660e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800661a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800661e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006622:	460b      	mov	r3, r1
 8006624:	18db      	adds	r3, r3, r3
 8006626:	653b      	str	r3, [r7, #80]	; 0x50
 8006628:	4613      	mov	r3, r2
 800662a:	eb42 0303 	adc.w	r3, r2, r3
 800662e:	657b      	str	r3, [r7, #84]	; 0x54
 8006630:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006634:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006638:	f7fa fade 	bl	8000bf8 <__aeabi_uldivmod>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4b61      	ldr	r3, [pc, #388]	; (80067c8 <UART_SetConfig+0x2d4>)
 8006642:	fba3 2302 	umull	r2, r3, r3, r2
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	011c      	lsls	r4, r3, #4
 800664a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800664e:	2200      	movs	r2, #0
 8006650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006654:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006658:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800665c:	4642      	mov	r2, r8
 800665e:	464b      	mov	r3, r9
 8006660:	1891      	adds	r1, r2, r2
 8006662:	64b9      	str	r1, [r7, #72]	; 0x48
 8006664:	415b      	adcs	r3, r3
 8006666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006668:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800666c:	4641      	mov	r1, r8
 800666e:	eb12 0a01 	adds.w	sl, r2, r1
 8006672:	4649      	mov	r1, r9
 8006674:	eb43 0b01 	adc.w	fp, r3, r1
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006684:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006688:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800668c:	4692      	mov	sl, r2
 800668e:	469b      	mov	fp, r3
 8006690:	4643      	mov	r3, r8
 8006692:	eb1a 0303 	adds.w	r3, sl, r3
 8006696:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800669a:	464b      	mov	r3, r9
 800669c:	eb4b 0303 	adc.w	r3, fp, r3
 80066a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80066b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80066b8:	460b      	mov	r3, r1
 80066ba:	18db      	adds	r3, r3, r3
 80066bc:	643b      	str	r3, [r7, #64]	; 0x40
 80066be:	4613      	mov	r3, r2
 80066c0:	eb42 0303 	adc.w	r3, r2, r3
 80066c4:	647b      	str	r3, [r7, #68]	; 0x44
 80066c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80066ce:	f7fa fa93 	bl	8000bf8 <__aeabi_uldivmod>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	4611      	mov	r1, r2
 80066d8:	4b3b      	ldr	r3, [pc, #236]	; (80067c8 <UART_SetConfig+0x2d4>)
 80066da:	fba3 2301 	umull	r2, r3, r3, r1
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	2264      	movs	r2, #100	; 0x64
 80066e2:	fb02 f303 	mul.w	r3, r2, r3
 80066e6:	1acb      	subs	r3, r1, r3
 80066e8:	00db      	lsls	r3, r3, #3
 80066ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80066ee:	4b36      	ldr	r3, [pc, #216]	; (80067c8 <UART_SetConfig+0x2d4>)
 80066f0:	fba3 2302 	umull	r2, r3, r3, r2
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066fc:	441c      	add	r4, r3
 80066fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006702:	2200      	movs	r2, #0
 8006704:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006708:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800670c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006710:	4642      	mov	r2, r8
 8006712:	464b      	mov	r3, r9
 8006714:	1891      	adds	r1, r2, r2
 8006716:	63b9      	str	r1, [r7, #56]	; 0x38
 8006718:	415b      	adcs	r3, r3
 800671a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800671c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006720:	4641      	mov	r1, r8
 8006722:	1851      	adds	r1, r2, r1
 8006724:	6339      	str	r1, [r7, #48]	; 0x30
 8006726:	4649      	mov	r1, r9
 8006728:	414b      	adcs	r3, r1
 800672a:	637b      	str	r3, [r7, #52]	; 0x34
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006738:	4659      	mov	r1, fp
 800673a:	00cb      	lsls	r3, r1, #3
 800673c:	4651      	mov	r1, sl
 800673e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006742:	4651      	mov	r1, sl
 8006744:	00ca      	lsls	r2, r1, #3
 8006746:	4610      	mov	r0, r2
 8006748:	4619      	mov	r1, r3
 800674a:	4603      	mov	r3, r0
 800674c:	4642      	mov	r2, r8
 800674e:	189b      	adds	r3, r3, r2
 8006750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006754:	464b      	mov	r3, r9
 8006756:	460a      	mov	r2, r1
 8006758:	eb42 0303 	adc.w	r3, r2, r3
 800675c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800676c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006770:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006774:	460b      	mov	r3, r1
 8006776:	18db      	adds	r3, r3, r3
 8006778:	62bb      	str	r3, [r7, #40]	; 0x28
 800677a:	4613      	mov	r3, r2
 800677c:	eb42 0303 	adc.w	r3, r2, r3
 8006780:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006782:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006786:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800678a:	f7fa fa35 	bl	8000bf8 <__aeabi_uldivmod>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4b0d      	ldr	r3, [pc, #52]	; (80067c8 <UART_SetConfig+0x2d4>)
 8006794:	fba3 1302 	umull	r1, r3, r3, r2
 8006798:	095b      	lsrs	r3, r3, #5
 800679a:	2164      	movs	r1, #100	; 0x64
 800679c:	fb01 f303 	mul.w	r3, r1, r3
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	3332      	adds	r3, #50	; 0x32
 80067a6:	4a08      	ldr	r2, [pc, #32]	; (80067c8 <UART_SetConfig+0x2d4>)
 80067a8:	fba2 2303 	umull	r2, r3, r2, r3
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	f003 0207 	and.w	r2, r3, #7
 80067b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4422      	add	r2, r4
 80067ba:	609a      	str	r2, [r3, #8]
 80067bc:	e106      	b.n	80069cc <UART_SetConfig+0x4d8>
 80067be:	bf00      	nop
 80067c0:	40011000 	.word	0x40011000
 80067c4:	40011400 	.word	0x40011400
 80067c8:	51eb851f 	.word	0x51eb851f
 80067cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067d0:	2200      	movs	r2, #0
 80067d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80067da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80067de:	4642      	mov	r2, r8
 80067e0:	464b      	mov	r3, r9
 80067e2:	1891      	adds	r1, r2, r2
 80067e4:	6239      	str	r1, [r7, #32]
 80067e6:	415b      	adcs	r3, r3
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
 80067ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067ee:	4641      	mov	r1, r8
 80067f0:	1854      	adds	r4, r2, r1
 80067f2:	4649      	mov	r1, r9
 80067f4:	eb43 0501 	adc.w	r5, r3, r1
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	f04f 0300 	mov.w	r3, #0
 8006800:	00eb      	lsls	r3, r5, #3
 8006802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006806:	00e2      	lsls	r2, r4, #3
 8006808:	4614      	mov	r4, r2
 800680a:	461d      	mov	r5, r3
 800680c:	4643      	mov	r3, r8
 800680e:	18e3      	adds	r3, r4, r3
 8006810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006814:	464b      	mov	r3, r9
 8006816:	eb45 0303 	adc.w	r3, r5, r3
 800681a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800681e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800682a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	f04f 0300 	mov.w	r3, #0
 8006836:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800683a:	4629      	mov	r1, r5
 800683c:	008b      	lsls	r3, r1, #2
 800683e:	4621      	mov	r1, r4
 8006840:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006844:	4621      	mov	r1, r4
 8006846:	008a      	lsls	r2, r1, #2
 8006848:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800684c:	f7fa f9d4 	bl	8000bf8 <__aeabi_uldivmod>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4b60      	ldr	r3, [pc, #384]	; (80069d8 <UART_SetConfig+0x4e4>)
 8006856:	fba3 2302 	umull	r2, r3, r3, r2
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	011c      	lsls	r4, r3, #4
 800685e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006862:	2200      	movs	r2, #0
 8006864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006868:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800686c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006870:	4642      	mov	r2, r8
 8006872:	464b      	mov	r3, r9
 8006874:	1891      	adds	r1, r2, r2
 8006876:	61b9      	str	r1, [r7, #24]
 8006878:	415b      	adcs	r3, r3
 800687a:	61fb      	str	r3, [r7, #28]
 800687c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006880:	4641      	mov	r1, r8
 8006882:	1851      	adds	r1, r2, r1
 8006884:	6139      	str	r1, [r7, #16]
 8006886:	4649      	mov	r1, r9
 8006888:	414b      	adcs	r3, r1
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	f04f 0300 	mov.w	r3, #0
 8006894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006898:	4659      	mov	r1, fp
 800689a:	00cb      	lsls	r3, r1, #3
 800689c:	4651      	mov	r1, sl
 800689e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068a2:	4651      	mov	r1, sl
 80068a4:	00ca      	lsls	r2, r1, #3
 80068a6:	4610      	mov	r0, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	4603      	mov	r3, r0
 80068ac:	4642      	mov	r2, r8
 80068ae:	189b      	adds	r3, r3, r2
 80068b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068b4:	464b      	mov	r3, r9
 80068b6:	460a      	mov	r2, r1
 80068b8:	eb42 0303 	adc.w	r3, r2, r3
 80068bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80068ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80068d8:	4649      	mov	r1, r9
 80068da:	008b      	lsls	r3, r1, #2
 80068dc:	4641      	mov	r1, r8
 80068de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068e2:	4641      	mov	r1, r8
 80068e4:	008a      	lsls	r2, r1, #2
 80068e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80068ea:	f7fa f985 	bl	8000bf8 <__aeabi_uldivmod>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	4611      	mov	r1, r2
 80068f4:	4b38      	ldr	r3, [pc, #224]	; (80069d8 <UART_SetConfig+0x4e4>)
 80068f6:	fba3 2301 	umull	r2, r3, r3, r1
 80068fa:	095b      	lsrs	r3, r3, #5
 80068fc:	2264      	movs	r2, #100	; 0x64
 80068fe:	fb02 f303 	mul.w	r3, r2, r3
 8006902:	1acb      	subs	r3, r1, r3
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	3332      	adds	r3, #50	; 0x32
 8006908:	4a33      	ldr	r2, [pc, #204]	; (80069d8 <UART_SetConfig+0x4e4>)
 800690a:	fba2 2303 	umull	r2, r3, r2, r3
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006914:	441c      	add	r4, r3
 8006916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800691a:	2200      	movs	r2, #0
 800691c:	673b      	str	r3, [r7, #112]	; 0x70
 800691e:	677a      	str	r2, [r7, #116]	; 0x74
 8006920:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006924:	4642      	mov	r2, r8
 8006926:	464b      	mov	r3, r9
 8006928:	1891      	adds	r1, r2, r2
 800692a:	60b9      	str	r1, [r7, #8]
 800692c:	415b      	adcs	r3, r3
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006934:	4641      	mov	r1, r8
 8006936:	1851      	adds	r1, r2, r1
 8006938:	6039      	str	r1, [r7, #0]
 800693a:	4649      	mov	r1, r9
 800693c:	414b      	adcs	r3, r1
 800693e:	607b      	str	r3, [r7, #4]
 8006940:	f04f 0200 	mov.w	r2, #0
 8006944:	f04f 0300 	mov.w	r3, #0
 8006948:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800694c:	4659      	mov	r1, fp
 800694e:	00cb      	lsls	r3, r1, #3
 8006950:	4651      	mov	r1, sl
 8006952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006956:	4651      	mov	r1, sl
 8006958:	00ca      	lsls	r2, r1, #3
 800695a:	4610      	mov	r0, r2
 800695c:	4619      	mov	r1, r3
 800695e:	4603      	mov	r3, r0
 8006960:	4642      	mov	r2, r8
 8006962:	189b      	adds	r3, r3, r2
 8006964:	66bb      	str	r3, [r7, #104]	; 0x68
 8006966:	464b      	mov	r3, r9
 8006968:	460a      	mov	r2, r1
 800696a:	eb42 0303 	adc.w	r3, r2, r3
 800696e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	663b      	str	r3, [r7, #96]	; 0x60
 800697a:	667a      	str	r2, [r7, #100]	; 0x64
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006988:	4649      	mov	r1, r9
 800698a:	008b      	lsls	r3, r1, #2
 800698c:	4641      	mov	r1, r8
 800698e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006992:	4641      	mov	r1, r8
 8006994:	008a      	lsls	r2, r1, #2
 8006996:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800699a:	f7fa f92d 	bl	8000bf8 <__aeabi_uldivmod>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4b0d      	ldr	r3, [pc, #52]	; (80069d8 <UART_SetConfig+0x4e4>)
 80069a4:	fba3 1302 	umull	r1, r3, r3, r2
 80069a8:	095b      	lsrs	r3, r3, #5
 80069aa:	2164      	movs	r1, #100	; 0x64
 80069ac:	fb01 f303 	mul.w	r3, r1, r3
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	011b      	lsls	r3, r3, #4
 80069b4:	3332      	adds	r3, #50	; 0x32
 80069b6:	4a08      	ldr	r2, [pc, #32]	; (80069d8 <UART_SetConfig+0x4e4>)
 80069b8:	fba2 2303 	umull	r2, r3, r2, r3
 80069bc:	095b      	lsrs	r3, r3, #5
 80069be:	f003 020f 	and.w	r2, r3, #15
 80069c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4422      	add	r2, r4
 80069ca:	609a      	str	r2, [r3, #8]
 80069cc:	bf00      	nop
 80069ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80069d2:	46bd      	mov	sp, r7
 80069d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069d8:	51eb851f 	.word	0x51eb851f

080069dc <USB_CoreInit>:
 80069dc:	b084      	sub	sp, #16
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	f107 001c 	add.w	r0, r7, #28
 80069ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d122      	bne.n	8006a3a <USB_CoreInit+0x5e>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	639a      	str	r2, [r3, #56]	; 0x38
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	60d3      	str	r3, [r2, #12]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	60da      	str	r2, [r3, #12]
 8006a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d105      	bne.n	8006a2e <USB_CoreInit+0x52>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	60da      	str	r2, [r3, #12]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 fbee 	bl	8008210 <USB_CoreReset>
 8006a34:	4603      	mov	r3, r0
 8006a36:	73fb      	strb	r3, [r7, #15]
 8006a38:	e01a      	b.n	8006a70 <USB_CoreInit+0x94>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	60da      	str	r2, [r3, #12]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 fbe2 	bl	8008210 <USB_CoreReset>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73fb      	strb	r3, [r7, #15]
 8006a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d106      	bne.n	8006a64 <USB_CoreInit+0x88>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	639a      	str	r2, [r3, #56]	; 0x38
 8006a62:	e005      	b.n	8006a70 <USB_CoreInit+0x94>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	639a      	str	r2, [r3, #56]	; 0x38
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d10b      	bne.n	8006a8e <USB_CoreInit+0xb2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f043 0206 	orr.w	r2, r3, #6
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	609a      	str	r2, [r3, #8]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f043 0220 	orr.w	r2, r3, #32
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	609a      	str	r2, [r3, #8]
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a9a:	b004      	add	sp, #16
 8006a9c:	4770      	bx	lr
	...

08006aa0 <USB_SetTurnaroundTime>:
 8006aa0:	b480      	push	{r7}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	71fb      	strb	r3, [r7, #7]
 8006aae:	79fb      	ldrb	r3, [r7, #7]
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d165      	bne.n	8006b80 <USB_SetTurnaroundTime+0xe0>
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4a41      	ldr	r2, [pc, #260]	; (8006bbc <USB_SetTurnaroundTime+0x11c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d906      	bls.n	8006aca <USB_SetTurnaroundTime+0x2a>
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4a40      	ldr	r2, [pc, #256]	; (8006bc0 <USB_SetTurnaroundTime+0x120>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d202      	bcs.n	8006aca <USB_SetTurnaroundTime+0x2a>
 8006ac4:	230f      	movs	r3, #15
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	e062      	b.n	8006b90 <USB_SetTurnaroundTime+0xf0>
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	4a3c      	ldr	r2, [pc, #240]	; (8006bc0 <USB_SetTurnaroundTime+0x120>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d306      	bcc.n	8006ae0 <USB_SetTurnaroundTime+0x40>
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	4a3b      	ldr	r2, [pc, #236]	; (8006bc4 <USB_SetTurnaroundTime+0x124>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d202      	bcs.n	8006ae0 <USB_SetTurnaroundTime+0x40>
 8006ada:	230e      	movs	r3, #14
 8006adc:	617b      	str	r3, [r7, #20]
 8006ade:	e057      	b.n	8006b90 <USB_SetTurnaroundTime+0xf0>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	4a38      	ldr	r2, [pc, #224]	; (8006bc4 <USB_SetTurnaroundTime+0x124>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d306      	bcc.n	8006af6 <USB_SetTurnaroundTime+0x56>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	4a37      	ldr	r2, [pc, #220]	; (8006bc8 <USB_SetTurnaroundTime+0x128>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d202      	bcs.n	8006af6 <USB_SetTurnaroundTime+0x56>
 8006af0:	230d      	movs	r3, #13
 8006af2:	617b      	str	r3, [r7, #20]
 8006af4:	e04c      	b.n	8006b90 <USB_SetTurnaroundTime+0xf0>
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	4a33      	ldr	r2, [pc, #204]	; (8006bc8 <USB_SetTurnaroundTime+0x128>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d306      	bcc.n	8006b0c <USB_SetTurnaroundTime+0x6c>
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	4a32      	ldr	r2, [pc, #200]	; (8006bcc <USB_SetTurnaroundTime+0x12c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d802      	bhi.n	8006b0c <USB_SetTurnaroundTime+0x6c>
 8006b06:	230c      	movs	r3, #12
 8006b08:	617b      	str	r3, [r7, #20]
 8006b0a:	e041      	b.n	8006b90 <USB_SetTurnaroundTime+0xf0>
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	4a2f      	ldr	r2, [pc, #188]	; (8006bcc <USB_SetTurnaroundTime+0x12c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d906      	bls.n	8006b22 <USB_SetTurnaroundTime+0x82>
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	4a2e      	ldr	r2, [pc, #184]	; (8006bd0 <USB_SetTurnaroundTime+0x130>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d802      	bhi.n	8006b22 <USB_SetTurnaroundTime+0x82>
 8006b1c:	230b      	movs	r3, #11
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	e036      	b.n	8006b90 <USB_SetTurnaroundTime+0xf0>
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	4a2a      	ldr	r2, [pc, #168]	; (8006bd0 <USB_SetTurnaroundTime+0x130>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d906      	bls.n	8006b38 <USB_SetTurnaroundTime+0x98>
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	4a29      	ldr	r2, [pc, #164]	; (8006bd4 <USB_SetTurnaroundTime+0x134>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d802      	bhi.n	8006b38 <USB_SetTurnaroundTime+0x98>
 8006b32:	230a      	movs	r3, #10
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	e02b      	b.n	8006b90 <USB_SetTurnaroundTime+0xf0>
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4a26      	ldr	r2, [pc, #152]	; (8006bd4 <USB_SetTurnaroundTime+0x134>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d906      	bls.n	8006b4e <USB_SetTurnaroundTime+0xae>
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	4a25      	ldr	r2, [pc, #148]	; (8006bd8 <USB_SetTurnaroundTime+0x138>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d202      	bcs.n	8006b4e <USB_SetTurnaroundTime+0xae>
 8006b48:	2309      	movs	r3, #9
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	e020      	b.n	8006b90 <USB_SetTurnaroundTime+0xf0>
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	4a21      	ldr	r2, [pc, #132]	; (8006bd8 <USB_SetTurnaroundTime+0x138>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d306      	bcc.n	8006b64 <USB_SetTurnaroundTime+0xc4>
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	4a20      	ldr	r2, [pc, #128]	; (8006bdc <USB_SetTurnaroundTime+0x13c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d802      	bhi.n	8006b64 <USB_SetTurnaroundTime+0xc4>
 8006b5e:	2308      	movs	r3, #8
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	e015      	b.n	8006b90 <USB_SetTurnaroundTime+0xf0>
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4a1d      	ldr	r2, [pc, #116]	; (8006bdc <USB_SetTurnaroundTime+0x13c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d906      	bls.n	8006b7a <USB_SetTurnaroundTime+0xda>
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	4a1c      	ldr	r2, [pc, #112]	; (8006be0 <USB_SetTurnaroundTime+0x140>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d202      	bcs.n	8006b7a <USB_SetTurnaroundTime+0xda>
 8006b74:	2307      	movs	r3, #7
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	e00a      	b.n	8006b90 <USB_SetTurnaroundTime+0xf0>
 8006b7a:	2306      	movs	r3, #6
 8006b7c:	617b      	str	r3, [r7, #20]
 8006b7e:	e007      	b.n	8006b90 <USB_SetTurnaroundTime+0xf0>
 8006b80:	79fb      	ldrb	r3, [r7, #7]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d102      	bne.n	8006b8c <USB_SetTurnaroundTime+0xec>
 8006b86:	2309      	movs	r3, #9
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	e001      	b.n	8006b90 <USB_SetTurnaroundTime+0xf0>
 8006b8c:	2309      	movs	r3, #9
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	60da      	str	r2, [r3, #12]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	029b      	lsls	r3, r3, #10
 8006ba4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	60da      	str	r2, [r3, #12]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	00d8acbf 	.word	0x00d8acbf
 8006bc0:	00e4e1c0 	.word	0x00e4e1c0
 8006bc4:	00f42400 	.word	0x00f42400
 8006bc8:	01067380 	.word	0x01067380
 8006bcc:	011a499f 	.word	0x011a499f
 8006bd0:	01312cff 	.word	0x01312cff
 8006bd4:	014ca43f 	.word	0x014ca43f
 8006bd8:	016e3600 	.word	0x016e3600
 8006bdc:	01a6ab1f 	.word	0x01a6ab1f
 8006be0:	01e84800 	.word	0x01e84800

08006be4 <USB_EnableGlobalInt>:
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f043 0201 	orr.w	r2, r3, #1
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	609a      	str	r2, [r3, #8]
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <USB_DisableGlobalInt>:
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f023 0201 	bic.w	r2, r3, #1
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	609a      	str	r2, [r3, #8]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USB_SetCurrentMode>:
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	70fb      	strb	r3, [r7, #3]
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	60da      	str	r2, [r3, #12]
 8006c44:	78fb      	ldrb	r3, [r7, #3]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d115      	bne.n	8006c76 <USB_SetCurrentMode+0x4e>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60da      	str	r2, [r3, #12]
 8006c56:	2001      	movs	r0, #1
 8006c58:	f7fb fa3a 	bl	80020d0 <HAL_Delay>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 fa45 	bl	80080f2 <USB_GetMode>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d01e      	beq.n	8006cac <USB_SetCurrentMode+0x84>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b31      	cmp	r3, #49	; 0x31
 8006c72:	d9f0      	bls.n	8006c56 <USB_SetCurrentMode+0x2e>
 8006c74:	e01a      	b.n	8006cac <USB_SetCurrentMode+0x84>
 8006c76:	78fb      	ldrb	r3, [r7, #3]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d115      	bne.n	8006ca8 <USB_SetCurrentMode+0x80>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	60da      	str	r2, [r3, #12]
 8006c88:	2001      	movs	r0, #1
 8006c8a:	f7fb fa21 	bl	80020d0 <HAL_Delay>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	3301      	adds	r3, #1
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 fa2c 	bl	80080f2 <USB_GetMode>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d005      	beq.n	8006cac <USB_SetCurrentMode+0x84>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b31      	cmp	r3, #49	; 0x31
 8006ca4:	d9f0      	bls.n	8006c88 <USB_SetCurrentMode+0x60>
 8006ca6:	e001      	b.n	8006cac <USB_SetCurrentMode+0x84>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e005      	b.n	8006cb8 <USB_SetCurrentMode+0x90>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b32      	cmp	r3, #50	; 0x32
 8006cb0:	d101      	bne.n	8006cb6 <USB_SetCurrentMode+0x8e>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e000      	b.n	8006cb8 <USB_SetCurrentMode+0x90>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USB_DevInit>:
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b086      	sub	sp, #24
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006cce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	75fb      	strb	r3, [r7, #23]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	613b      	str	r3, [r7, #16]
 8006cde:	e009      	b.n	8006cf4 <USB_DevInit+0x34>
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	3340      	adds	r3, #64	; 0x40
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	2200      	movs	r2, #0
 8006cec:	605a      	str	r2, [r3, #4]
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	613b      	str	r3, [r7, #16]
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2b0e      	cmp	r3, #14
 8006cf8:	d9f2      	bls.n	8006ce0 <USB_DevInit+0x20>
 8006cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d11c      	bne.n	8006d3a <USB_DevInit+0x7a>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d0e:	f043 0302 	orr.w	r3, r3, #2
 8006d12:	6053      	str	r3, [r2, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	639a      	str	r2, [r3, #56]	; 0x38
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	639a      	str	r2, [r3, #56]	; 0x38
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	639a      	str	r2, [r3, #56]	; 0x38
 8006d38:	e00b      	b.n	8006d52 <USB_DevInit+0x92>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	639a      	str	r2, [r3, #56]	; 0x38
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	639a      	str	r2, [r3, #56]	; 0x38
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d58:	461a      	mov	r2, r3
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d64:	4619      	mov	r1, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	680b      	ldr	r3, [r1, #0]
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d10c      	bne.n	8006d92 <USB_DevInit+0xd2>
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d104      	bne.n	8006d88 <USB_DevInit+0xc8>
 8006d7e:	2100      	movs	r1, #0
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f965 	bl	8007050 <USB_SetDevSpeed>
 8006d86:	e008      	b.n	8006d9a <USB_DevInit+0xda>
 8006d88:	2101      	movs	r1, #1
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f960 	bl	8007050 <USB_SetDevSpeed>
 8006d90:	e003      	b.n	8006d9a <USB_DevInit+0xda>
 8006d92:	2103      	movs	r1, #3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f95b 	bl	8007050 <USB_SetDevSpeed>
 8006d9a:	2110      	movs	r1, #16
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f8f3 	bl	8006f88 <USB_FlushTxFifo>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <USB_DevInit+0xec>
 8006da8:	2301      	movs	r3, #1
 8006daa:	75fb      	strb	r3, [r7, #23]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f91f 	bl	8006ff0 <USB_FlushRxFifo>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <USB_DevInit+0xfc>
 8006db8:	2301      	movs	r3, #1
 8006dba:	75fb      	strb	r3, [r7, #23]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	6113      	str	r3, [r2, #16]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dce:	461a      	mov	r2, r3
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	6153      	str	r3, [r2, #20]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dda:	461a      	mov	r2, r3
 8006ddc:	2300      	movs	r3, #0
 8006dde:	61d3      	str	r3, [r2, #28]
 8006de0:	2300      	movs	r3, #0
 8006de2:	613b      	str	r3, [r7, #16]
 8006de4:	e043      	b.n	8006e6e <USB_DevInit+0x1ae>
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006df8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dfc:	d118      	bne.n	8006e30 <USB_DevInit+0x170>
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10a      	bne.n	8006e1a <USB_DevInit+0x15a>
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e10:	461a      	mov	r2, r3
 8006e12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	e013      	b.n	8006e42 <USB_DevInit+0x182>
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e26:	461a      	mov	r2, r3
 8006e28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	e008      	b.n	8006e42 <USB_DevInit+0x182>
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	2300      	movs	r3, #0
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4e:	461a      	mov	r2, r3
 8006e50:	2300      	movs	r3, #0
 8006e52:	6113      	str	r3, [r2, #16]
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e60:	461a      	mov	r2, r3
 8006e62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e66:	6093      	str	r3, [r2, #8]
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	613b      	str	r3, [r7, #16]
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d3b7      	bcc.n	8006de6 <USB_DevInit+0x126>
 8006e76:	2300      	movs	r3, #0
 8006e78:	613b      	str	r3, [r7, #16]
 8006e7a:	e043      	b.n	8006f04 <USB_DevInit+0x244>
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e92:	d118      	bne.n	8006ec6 <USB_DevInit+0x206>
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10a      	bne.n	8006eb0 <USB_DevInit+0x1f0>
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	e013      	b.n	8006ed8 <USB_DevInit+0x218>
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	e008      	b.n	8006ed8 <USB_DevInit+0x218>
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	6113      	str	r3, [r2, #16]
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006efc:	6093      	str	r3, [r2, #8]
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	3301      	adds	r3, #1
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d3b7      	bcc.n	8006e7c <USB_DevInit+0x1bc>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f1e:	6113      	str	r3, [r2, #16]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	619a      	str	r2, [r3, #24]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f2c:	615a      	str	r2, [r3, #20]
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d105      	bne.n	8006f40 <USB_DevInit+0x280>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	f043 0210 	orr.w	r2, r3, #16
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	619a      	str	r2, [r3, #24]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	699a      	ldr	r2, [r3, #24]
 8006f44:	4b0f      	ldr	r3, [pc, #60]	; (8006f84 <USB_DevInit+0x2c4>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6193      	str	r3, [r2, #24]
 8006f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d005      	beq.n	8006f5e <USB_DevInit+0x29e>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	f043 0208 	orr.w	r2, r3, #8
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	619a      	str	r2, [r3, #24]
 8006f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d107      	bne.n	8006f74 <USB_DevInit+0x2b4>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f6c:	f043 0304 	orr.w	r3, r3, #4
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6193      	str	r3, [r2, #24]
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f80:	b004      	add	sp, #16
 8006f82:	4770      	bx	lr
 8006f84:	803c3800 	.word	0x803c3800

08006f88 <USB_FlushTxFifo>:
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4a13      	ldr	r2, [pc, #76]	; (8006fec <USB_FlushTxFifo+0x64>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d901      	bls.n	8006fa8 <USB_FlushTxFifo+0x20>
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e01b      	b.n	8006fe0 <USB_FlushTxFifo+0x58>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	daf2      	bge.n	8006f96 <USB_FlushTxFifo+0xe>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	019b      	lsls	r3, r3, #6
 8006fb8:	f043 0220 	orr.w	r2, r3, #32
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	611a      	str	r2, [r3, #16]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4a08      	ldr	r2, [pc, #32]	; (8006fec <USB_FlushTxFifo+0x64>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d901      	bls.n	8006fd2 <USB_FlushTxFifo+0x4a>
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e006      	b.n	8006fe0 <USB_FlushTxFifo+0x58>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	f003 0320 	and.w	r3, r3, #32
 8006fda:	2b20      	cmp	r3, #32
 8006fdc:	d0f0      	beq.n	8006fc0 <USB_FlushTxFifo+0x38>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	00030d40 	.word	0x00030d40

08006ff0 <USB_FlushRxFifo>:
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3301      	adds	r3, #1
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4a11      	ldr	r2, [pc, #68]	; (800704c <USB_FlushRxFifo+0x5c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d901      	bls.n	800700e <USB_FlushRxFifo+0x1e>
 800700a:	2303      	movs	r3, #3
 800700c:	e018      	b.n	8007040 <USB_FlushRxFifo+0x50>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	daf2      	bge.n	8006ffc <USB_FlushRxFifo+0xc>
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2210      	movs	r2, #16
 800701e:	611a      	str	r2, [r3, #16]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3301      	adds	r3, #1
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	4a08      	ldr	r2, [pc, #32]	; (800704c <USB_FlushRxFifo+0x5c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d901      	bls.n	8007032 <USB_FlushRxFifo+0x42>
 800702e:	2303      	movs	r3, #3
 8007030:	e006      	b.n	8007040 <USB_FlushRxFifo+0x50>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f003 0310 	and.w	r3, r3, #16
 800703a:	2b10      	cmp	r3, #16
 800703c:	d0f0      	beq.n	8007020 <USB_FlushRxFifo+0x30>
 800703e:	2300      	movs	r3, #0
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	00030d40 	.word	0x00030d40

08007050 <USB_SetDevSpeed>:
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	460b      	mov	r3, r1
 800705a:	70fb      	strb	r3, [r7, #3]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	68f9      	ldr	r1, [r7, #12]
 800706c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007070:	4313      	orrs	r3, r2
 8007072:	600b      	str	r3, [r1, #0]
 8007074:	2300      	movs	r3, #0
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <USB_GetDevSpeed>:
 8007082:	b480      	push	{r7}
 8007084:	b087      	sub	sp, #28
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	613b      	str	r3, [r7, #16]
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f003 0306 	and.w	r3, r3, #6
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d102      	bne.n	80070a8 <USB_GetDevSpeed+0x26>
 80070a2:	2300      	movs	r3, #0
 80070a4:	75fb      	strb	r3, [r7, #23]
 80070a6:	e00a      	b.n	80070be <USB_GetDevSpeed+0x3c>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d002      	beq.n	80070b4 <USB_GetDevSpeed+0x32>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b06      	cmp	r3, #6
 80070b2:	d102      	bne.n	80070ba <USB_GetDevSpeed+0x38>
 80070b4:	2302      	movs	r3, #2
 80070b6:	75fb      	strb	r3, [r7, #23]
 80070b8:	e001      	b.n	80070be <USB_GetDevSpeed+0x3c>
 80070ba:	230f      	movs	r3, #15
 80070bc:	75fb      	strb	r3, [r7, #23]
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	4618      	mov	r0, r3
 80070c2:	371c      	adds	r7, #28
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USB_ActivateEndpoint>:
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	60bb      	str	r3, [r7, #8]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	785b      	ldrb	r3, [r3, #1]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d13a      	bne.n	800715e <USB_ActivateEndpoint+0x92>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ee:	69da      	ldr	r2, [r3, #28]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	f003 030f 	and.w	r3, r3, #15
 80070f8:	2101      	movs	r1, #1
 80070fa:	fa01 f303 	lsl.w	r3, r1, r3
 80070fe:	b29b      	uxth	r3, r3
 8007100:	68f9      	ldr	r1, [r7, #12]
 8007102:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007106:	4313      	orrs	r3, r2
 8007108:	61cb      	str	r3, [r1, #28]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d155      	bne.n	80071cc <USB_ActivateEndpoint+0x100>
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	791b      	ldrb	r3, [r3, #4]
 800713a:	049b      	lsls	r3, r3, #18
 800713c:	4319      	orrs	r1, r3
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	059b      	lsls	r3, r3, #22
 8007142:	430b      	orrs	r3, r1
 8007144:	4313      	orrs	r3, r2
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	0151      	lsls	r1, r2, #5
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	440a      	add	r2, r1
 800714e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	e036      	b.n	80071cc <USB_ActivateEndpoint+0x100>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007164:	69da      	ldr	r2, [r3, #28]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	2101      	movs	r1, #1
 8007170:	fa01 f303 	lsl.w	r3, r1, r3
 8007174:	041b      	lsls	r3, r3, #16
 8007176:	68f9      	ldr	r1, [r7, #12]
 8007178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800717c:	4313      	orrs	r3, r2
 800717e:	61cb      	str	r3, [r1, #28]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4413      	add	r3, r2
 8007188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d11a      	bne.n	80071cc <USB_ActivateEndpoint+0x100>
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	791b      	ldrb	r3, [r3, #4]
 80071b0:	049b      	lsls	r3, r3, #18
 80071b2:	430b      	orrs	r3, r1
 80071b4:	4313      	orrs	r3, r2
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	0151      	lsls	r1, r2, #5
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	440a      	add	r2, r1
 80071be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ca:	6013      	str	r3, [r2, #0]
 80071cc:	2300      	movs	r3, #0
 80071ce:	4618      	mov	r0, r3
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
	...

080071dc <USB_DeactivateEndpoint>:
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	60bb      	str	r3, [r7, #8]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	785b      	ldrb	r3, [r3, #1]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d161      	bne.n	80072bc <USB_DeactivateEndpoint+0xe0>
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800720a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800720e:	d11f      	bne.n	8007250 <USB_DeactivateEndpoint+0x74>
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	0151      	lsls	r1, r2, #5
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	440a      	add	r2, r1
 8007226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800722a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	0151      	lsls	r1, r2, #5
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	440a      	add	r2, r1
 8007246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800724a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	f003 030f 	and.w	r3, r3, #15
 8007260:	2101      	movs	r1, #1
 8007262:	fa01 f303 	lsl.w	r3, r1, r3
 8007266:	b29b      	uxth	r3, r3
 8007268:	43db      	mvns	r3, r3
 800726a:	68f9      	ldr	r1, [r7, #12]
 800726c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007270:	4013      	ands	r3, r2
 8007272:	63cb      	str	r3, [r1, #60]	; 0x3c
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800727a:	69da      	ldr	r2, [r3, #28]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	f003 030f 	and.w	r3, r3, #15
 8007284:	2101      	movs	r1, #1
 8007286:	fa01 f303 	lsl.w	r3, r1, r3
 800728a:	b29b      	uxth	r3, r3
 800728c:	43db      	mvns	r3, r3
 800728e:	68f9      	ldr	r1, [r7, #12]
 8007290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007294:	4013      	ands	r3, r2
 8007296:	61cb      	str	r3, [r1, #28]
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	0159      	lsls	r1, r3, #5
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	440b      	add	r3, r1
 80072ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b2:	4619      	mov	r1, r3
 80072b4:	4b35      	ldr	r3, [pc, #212]	; (800738c <USB_DeactivateEndpoint+0x1b0>)
 80072b6:	4013      	ands	r3, r2
 80072b8:	600b      	str	r3, [r1, #0]
 80072ba:	e060      	b.n	800737e <USB_DeactivateEndpoint+0x1a2>
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072d2:	d11f      	bne.n	8007314 <USB_DeactivateEndpoint+0x138>
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	0151      	lsls	r1, r2, #5
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	440a      	add	r2, r1
 80072ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	0151      	lsls	r1, r2, #5
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	440a      	add	r2, r1
 800730a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800730e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007312:	6013      	str	r3, [r2, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800731a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	2101      	movs	r1, #1
 8007326:	fa01 f303 	lsl.w	r3, r1, r3
 800732a:	041b      	lsls	r3, r3, #16
 800732c:	43db      	mvns	r3, r3
 800732e:	68f9      	ldr	r1, [r7, #12]
 8007330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007334:	4013      	ands	r3, r2
 8007336:	63cb      	str	r3, [r1, #60]	; 0x3c
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733e:	69da      	ldr	r2, [r3, #28]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	f003 030f 	and.w	r3, r3, #15
 8007348:	2101      	movs	r1, #1
 800734a:	fa01 f303 	lsl.w	r3, r1, r3
 800734e:	041b      	lsls	r3, r3, #16
 8007350:	43db      	mvns	r3, r3
 8007352:	68f9      	ldr	r1, [r7, #12]
 8007354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007358:	4013      	ands	r3, r2
 800735a:	61cb      	str	r3, [r1, #28]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	0159      	lsls	r1, r3, #5
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	440b      	add	r3, r1
 8007372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007376:	4619      	mov	r1, r3
 8007378:	4b05      	ldr	r3, [pc, #20]	; (8007390 <USB_DeactivateEndpoint+0x1b4>)
 800737a:	4013      	ands	r3, r2
 800737c:	600b      	str	r3, [r1, #0]
 800737e:	2300      	movs	r3, #0
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	ec337800 	.word	0xec337800
 8007390:	eff37800 	.word	0xeff37800

08007394 <USB_EPStartXfer>:
 8007394:	b580      	push	{r7, lr}
 8007396:	b08a      	sub	sp, #40	; 0x28
 8007398:	af02      	add	r7, sp, #8
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	4613      	mov	r3, r2
 80073a0:	71fb      	strb	r3, [r7, #7]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	61fb      	str	r3, [r7, #28]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	61bb      	str	r3, [r7, #24]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	785b      	ldrb	r3, [r3, #1]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	f040 815c 	bne.w	800766e <USB_EPStartXfer+0x2da>
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d132      	bne.n	8007424 <USB_EPStartXfer+0x90>
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	0151      	lsls	r1, r2, #5
 80073d0:	69fa      	ldr	r2, [r7, #28]
 80073d2:	440a      	add	r2, r1
 80073d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073e0:	6113      	str	r3, [r2, #16]
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	0151      	lsls	r1, r2, #5
 80073f4:	69fa      	ldr	r2, [r7, #28]
 80073f6:	440a      	add	r2, r1
 80073f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007400:	6113      	str	r3, [r2, #16]
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	0151      	lsls	r1, r2, #5
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	440a      	add	r2, r1
 8007418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800741c:	0cdb      	lsrs	r3, r3, #19
 800741e:	04db      	lsls	r3, r3, #19
 8007420:	6113      	str	r3, [r2, #16]
 8007422:	e074      	b.n	800750e <USB_EPStartXfer+0x17a>
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	0151      	lsls	r1, r2, #5
 8007436:	69fa      	ldr	r2, [r7, #28]
 8007438:	440a      	add	r2, r1
 800743a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800743e:	0cdb      	lsrs	r3, r3, #19
 8007440:	04db      	lsls	r3, r3, #19
 8007442:	6113      	str	r3, [r2, #16]
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	0151      	lsls	r1, r2, #5
 8007456:	69fa      	ldr	r2, [r7, #28]
 8007458:	440a      	add	r2, r1
 800745a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800745e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007462:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007466:	6113      	str	r3, [r2, #16]
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007474:	691a      	ldr	r2, [r3, #16]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6999      	ldr	r1, [r3, #24]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	440b      	add	r3, r1
 8007480:	1e59      	subs	r1, r3, #1
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	fbb1 f3f3 	udiv	r3, r1, r3
 800748a:	04d9      	lsls	r1, r3, #19
 800748c:	4b9d      	ldr	r3, [pc, #628]	; (8007704 <USB_EPStartXfer+0x370>)
 800748e:	400b      	ands	r3, r1
 8007490:	69b9      	ldr	r1, [r7, #24]
 8007492:	0148      	lsls	r0, r1, #5
 8007494:	69f9      	ldr	r1, [r7, #28]
 8007496:	4401      	add	r1, r0
 8007498:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800749c:	4313      	orrs	r3, r2
 800749e:	610b      	str	r3, [r1, #16]
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ac:	691a      	ldr	r2, [r3, #16]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074b6:	69b9      	ldr	r1, [r7, #24]
 80074b8:	0148      	lsls	r0, r1, #5
 80074ba:	69f9      	ldr	r1, [r7, #28]
 80074bc:	4401      	add	r1, r0
 80074be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80074c2:	4313      	orrs	r3, r2
 80074c4:	610b      	str	r3, [r1, #16]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	791b      	ldrb	r3, [r3, #4]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d11f      	bne.n	800750e <USB_EPStartXfer+0x17a>
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	015a      	lsls	r2, r3, #5
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	0151      	lsls	r1, r2, #5
 80074e0:	69fa      	ldr	r2, [r7, #28]
 80074e2:	440a      	add	r2, r1
 80074e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80074ec:	6113      	str	r3, [r2, #16]
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	69ba      	ldr	r2, [r7, #24]
 80074fe:	0151      	lsls	r1, r2, #5
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	440a      	add	r2, r1
 8007504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007508:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800750c:	6113      	str	r3, [r2, #16]
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d14b      	bne.n	80075ac <USB_EPStartXfer+0x218>
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d009      	beq.n	8007530 <USB_EPStartXfer+0x19c>
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007528:	461a      	mov	r2, r3
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	6153      	str	r3, [r2, #20]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	791b      	ldrb	r3, [r3, #4]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d128      	bne.n	800758a <USB_EPStartXfer+0x1f6>
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007544:	2b00      	cmp	r3, #0
 8007546:	d110      	bne.n	800756a <USB_EPStartXfer+0x1d6>
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	0151      	lsls	r1, r2, #5
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	440a      	add	r2, r1
 800755e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007562:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	e00f      	b.n	800758a <USB_EPStartXfer+0x1f6>
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	69ba      	ldr	r2, [r7, #24]
 800757a:	0151      	lsls	r1, r2, #5
 800757c:	69fa      	ldr	r2, [r7, #28]
 800757e:	440a      	add	r2, r1
 8007580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	0151      	lsls	r1, r2, #5
 800759c:	69fa      	ldr	r2, [r7, #28]
 800759e:	440a      	add	r2, r1
 80075a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	e133      	b.n	8007814 <USB_EPStartXfer+0x480>
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	0151      	lsls	r1, r2, #5
 80075be:	69fa      	ldr	r2, [r7, #28]
 80075c0:	440a      	add	r2, r1
 80075c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	791b      	ldrb	r3, [r3, #4]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d015      	beq.n	8007600 <USB_EPStartXfer+0x26c>
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 811b 	beq.w	8007814 <USB_EPStartXfer+0x480>
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	2101      	movs	r1, #1
 80075f0:	fa01 f303 	lsl.w	r3, r1, r3
 80075f4:	69f9      	ldr	r1, [r7, #28]
 80075f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075fa:	4313      	orrs	r3, r2
 80075fc:	634b      	str	r3, [r1, #52]	; 0x34
 80075fe:	e109      	b.n	8007814 <USB_EPStartXfer+0x480>
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800760c:	2b00      	cmp	r3, #0
 800760e:	d110      	bne.n	8007632 <USB_EPStartXfer+0x29e>
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	4413      	add	r3, r2
 8007618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	0151      	lsls	r1, r2, #5
 8007622:	69fa      	ldr	r2, [r7, #28]
 8007624:	440a      	add	r2, r1
 8007626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800762a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800762e:	6013      	str	r3, [r2, #0]
 8007630:	e00f      	b.n	8007652 <USB_EPStartXfer+0x2be>
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	4413      	add	r3, r2
 800763a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	0151      	lsls	r1, r2, #5
 8007644:	69fa      	ldr	r2, [r7, #28]
 8007646:	440a      	add	r2, r1
 8007648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800764c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007650:	6013      	str	r3, [r2, #0]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	6919      	ldr	r1, [r3, #16]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	781a      	ldrb	r2, [r3, #0]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	b298      	uxth	r0, r3
 8007660:	79fb      	ldrb	r3, [r7, #7]
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	4603      	mov	r3, r0
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f000 fade 	bl	8007c28 <USB_WritePacket>
 800766c:	e0d2      	b.n	8007814 <USB_EPStartXfer+0x480>
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	0151      	lsls	r1, r2, #5
 8007680:	69fa      	ldr	r2, [r7, #28]
 8007682:	440a      	add	r2, r1
 8007684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007688:	0cdb      	lsrs	r3, r3, #19
 800768a:	04db      	lsls	r3, r3, #19
 800768c:	6113      	str	r3, [r2, #16]
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	0151      	lsls	r1, r2, #5
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	440a      	add	r2, r1
 80076a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076b0:	6113      	str	r3, [r2, #16]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d126      	bne.n	8007708 <USB_EPStartXfer+0x374>
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c6:	691a      	ldr	r2, [r3, #16]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076d0:	69b9      	ldr	r1, [r7, #24]
 80076d2:	0148      	lsls	r0, r1, #5
 80076d4:	69f9      	ldr	r1, [r7, #28]
 80076d6:	4401      	add	r1, r0
 80076d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076dc:	4313      	orrs	r3, r2
 80076de:	610b      	str	r3, [r1, #16]
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	0151      	lsls	r1, r2, #5
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	440a      	add	r2, r1
 80076f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076fe:	6113      	str	r3, [r2, #16]
 8007700:	e03a      	b.n	8007778 <USB_EPStartXfer+0x3e4>
 8007702:	bf00      	nop
 8007704:	1ff80000 	.word	0x1ff80000
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	699a      	ldr	r2, [r3, #24]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	4413      	add	r3, r2
 8007712:	1e5a      	subs	r2, r3, #1
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	fbb2 f3f3 	udiv	r3, r2, r3
 800771c:	82fb      	strh	r3, [r7, #22]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	8afa      	ldrh	r2, [r7, #22]
 8007724:	fb03 f202 	mul.w	r2, r3, r2
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	61da      	str	r2, [r3, #28]
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007738:	691a      	ldr	r2, [r3, #16]
 800773a:	8afb      	ldrh	r3, [r7, #22]
 800773c:	04d9      	lsls	r1, r3, #19
 800773e:	4b38      	ldr	r3, [pc, #224]	; (8007820 <USB_EPStartXfer+0x48c>)
 8007740:	400b      	ands	r3, r1
 8007742:	69b9      	ldr	r1, [r7, #24]
 8007744:	0148      	lsls	r0, r1, #5
 8007746:	69f9      	ldr	r1, [r7, #28]
 8007748:	4401      	add	r1, r0
 800774a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800774e:	4313      	orrs	r3, r2
 8007750:	610b      	str	r3, [r1, #16]
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775e:	691a      	ldr	r2, [r3, #16]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007768:	69b9      	ldr	r1, [r7, #24]
 800776a:	0148      	lsls	r0, r1, #5
 800776c:	69f9      	ldr	r1, [r7, #28]
 800776e:	4401      	add	r1, r0
 8007770:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007774:	4313      	orrs	r3, r2
 8007776:	610b      	str	r3, [r1, #16]
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d10d      	bne.n	800779a <USB_EPStartXfer+0x406>
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d009      	beq.n	800779a <USB_EPStartXfer+0x406>
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	6919      	ldr	r1, [r3, #16]
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	4413      	add	r3, r2
 8007792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007796:	460a      	mov	r2, r1
 8007798:	615a      	str	r2, [r3, #20]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	791b      	ldrb	r3, [r3, #4]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d128      	bne.n	80077f4 <USB_EPStartXfer+0x460>
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d110      	bne.n	80077d4 <USB_EPStartXfer+0x440>
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	0151      	lsls	r1, r2, #5
 80077c4:	69fa      	ldr	r2, [r7, #28]
 80077c6:	440a      	add	r2, r1
 80077c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	e00f      	b.n	80077f4 <USB_EPStartXfer+0x460>
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	0151      	lsls	r1, r2, #5
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	440a      	add	r2, r1
 80077ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	69ba      	ldr	r2, [r7, #24]
 8007804:	0151      	lsls	r1, r2, #5
 8007806:	69fa      	ldr	r2, [r7, #28]
 8007808:	440a      	add	r2, r1
 800780a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800780e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	2300      	movs	r3, #0
 8007816:	4618      	mov	r0, r3
 8007818:	3720      	adds	r7, #32
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	1ff80000 	.word	0x1ff80000

08007824 <USB_EP0StartXfer>:
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	4613      	mov	r3, r2
 8007830:	71fb      	strb	r3, [r7, #7]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	613b      	str	r3, [r7, #16]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	785b      	ldrb	r3, [r3, #1]
 8007840:	2b01      	cmp	r3, #1
 8007842:	f040 80ce 	bne.w	80079e2 <USB_EP0StartXfer+0x1be>
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d132      	bne.n	80078b4 <USB_EP0StartXfer+0x90>
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	4413      	add	r3, r2
 8007856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	0151      	lsls	r1, r2, #5
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	440a      	add	r2, r1
 8007864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007868:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800786c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007870:	6113      	str	r3, [r2, #16]
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	0151      	lsls	r1, r2, #5
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	440a      	add	r2, r1
 8007888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800788c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007890:	6113      	str	r3, [r2, #16]
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	4413      	add	r3, r2
 800789a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	0151      	lsls	r1, r2, #5
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	440a      	add	r2, r1
 80078a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ac:	0cdb      	lsrs	r3, r3, #19
 80078ae:	04db      	lsls	r3, r3, #19
 80078b0:	6113      	str	r3, [r2, #16]
 80078b2:	e04e      	b.n	8007952 <USB_EP0StartXfer+0x12e>
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	0151      	lsls	r1, r2, #5
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	440a      	add	r2, r1
 80078ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ce:	0cdb      	lsrs	r3, r3, #19
 80078d0:	04db      	lsls	r3, r3, #19
 80078d2:	6113      	str	r3, [r2, #16]
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	0151      	lsls	r1, r2, #5
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	440a      	add	r2, r1
 80078ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078f6:	6113      	str	r3, [r2, #16]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	699a      	ldr	r2, [r3, #24]
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	429a      	cmp	r2, r3
 8007902:	d903      	bls.n	800790c <USB_EP0StartXfer+0xe8>
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	68da      	ldr	r2, [r3, #12]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	619a      	str	r2, [r3, #24]
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	0151      	lsls	r1, r2, #5
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	440a      	add	r2, r1
 8007922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007926:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800792a:	6113      	str	r3, [r2, #16]
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007938:	691a      	ldr	r2, [r3, #16]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007942:	6939      	ldr	r1, [r7, #16]
 8007944:	0148      	lsls	r0, r1, #5
 8007946:	6979      	ldr	r1, [r7, #20]
 8007948:	4401      	add	r1, r0
 800794a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800794e:	4313      	orrs	r3, r2
 8007950:	610b      	str	r3, [r1, #16]
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d11e      	bne.n	8007996 <USB_EP0StartXfer+0x172>
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d009      	beq.n	8007974 <USB_EP0StartXfer+0x150>
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796c:	461a      	mov	r2, r3
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	6153      	str	r3, [r2, #20]
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	0151      	lsls	r1, r2, #5
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	440a      	add	r2, r1
 800798a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800798e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	e097      	b.n	8007ac6 <USB_EP0StartXfer+0x2a2>
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	4413      	add	r3, r2
 800799e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	0151      	lsls	r1, r2, #5
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	440a      	add	r2, r1
 80079ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079b4:	6013      	str	r3, [r2, #0]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 8083 	beq.w	8007ac6 <USB_EP0StartXfer+0x2a2>
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	f003 030f 	and.w	r3, r3, #15
 80079d0:	2101      	movs	r1, #1
 80079d2:	fa01 f303 	lsl.w	r3, r1, r3
 80079d6:	6979      	ldr	r1, [r7, #20]
 80079d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079dc:	4313      	orrs	r3, r2
 80079de:	634b      	str	r3, [r1, #52]	; 0x34
 80079e0:	e071      	b.n	8007ac6 <USB_EP0StartXfer+0x2a2>
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	0151      	lsls	r1, r2, #5
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	440a      	add	r2, r1
 80079f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079fc:	0cdb      	lsrs	r3, r3, #19
 80079fe:	04db      	lsls	r3, r3, #19
 8007a00:	6113      	str	r3, [r2, #16]
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	0151      	lsls	r1, r2, #5
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	440a      	add	r2, r1
 8007a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a24:	6113      	str	r3, [r2, #16]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <USB_EP0StartXfer+0x212>
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	68da      	ldr	r2, [r3, #12]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	619a      	str	r2, [r3, #24]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	61da      	str	r2, [r3, #28]
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	0151      	lsls	r1, r2, #5
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	440a      	add	r2, r1
 8007a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a5c:	6113      	str	r3, [r2, #16]
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	015a      	lsls	r2, r3, #5
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	4413      	add	r3, r2
 8007a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a6a:	691a      	ldr	r2, [r3, #16]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	69db      	ldr	r3, [r3, #28]
 8007a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a74:	6939      	ldr	r1, [r7, #16]
 8007a76:	0148      	lsls	r0, r1, #5
 8007a78:	6979      	ldr	r1, [r7, #20]
 8007a7a:	4401      	add	r1, r0
 8007a7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a80:	4313      	orrs	r3, r2
 8007a82:	610b      	str	r3, [r1, #16]
 8007a84:	79fb      	ldrb	r3, [r7, #7]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d10d      	bne.n	8007aa6 <USB_EP0StartXfer+0x282>
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d009      	beq.n	8007aa6 <USB_EP0StartXfer+0x282>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	6919      	ldr	r1, [r3, #16]
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa2:	460a      	mov	r2, r1
 8007aa4:	615a      	str	r2, [r3, #20]
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	0151      	lsls	r1, r2, #5
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	440a      	add	r2, r1
 8007abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ac0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	4618      	mov	r0, r3
 8007aca:	371c      	adds	r7, #28
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <USB_EPStopXfer>:
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	75fb      	strb	r3, [r7, #23]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	613b      	str	r3, [r7, #16]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	785b      	ldrb	r3, [r3, #1]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d14a      	bne.n	8007b88 <USB_EPStopXfer+0xb4>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b0a:	f040 8086 	bne.w	8007c1a <USB_EPStopXfer+0x146>
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	7812      	ldrb	r2, [r2, #0]
 8007b22:	0151      	lsls	r1, r2, #5
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	440a      	add	r2, r1
 8007b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b30:	6013      	str	r3, [r2, #0]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	7812      	ldrb	r2, [r2, #0]
 8007b46:	0151      	lsls	r1, r2, #5
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	440a      	add	r2, r1
 8007b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d902      	bls.n	8007b6c <USB_EPStopXfer+0x98>
 8007b66:	2301      	movs	r3, #1
 8007b68:	75fb      	strb	r3, [r7, #23]
 8007b6a:	e056      	b.n	8007c1a <USB_EPStopXfer+0x146>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b84:	d0e7      	beq.n	8007b56 <USB_EPStopXfer+0x82>
 8007b86:	e048      	b.n	8007c1a <USB_EPStopXfer+0x146>
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ba0:	d13b      	bne.n	8007c1a <USB_EPStopXfer+0x146>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	015a      	lsls	r2, r3, #5
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	7812      	ldrb	r2, [r2, #0]
 8007bb6:	0151      	lsls	r1, r2, #5
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	440a      	add	r2, r1
 8007bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	7812      	ldrb	r2, [r2, #0]
 8007bda:	0151      	lsls	r1, r2, #5
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	440a      	add	r2, r1
 8007be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007be4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3301      	adds	r3, #1
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f242 7210 	movw	r2, #10000	; 0x2710
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d902      	bls.n	8007c00 <USB_EPStopXfer+0x12c>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	75fb      	strb	r3, [r7, #23]
 8007bfe:	e00c      	b.n	8007c1a <USB_EPStopXfer+0x146>
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c18:	d0e7      	beq.n	8007bea <USB_EPStopXfer+0x116>
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	371c      	adds	r7, #28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <USB_WritePacket>:
 8007c28:	b480      	push	{r7}
 8007c2a:	b089      	sub	sp, #36	; 0x24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	4611      	mov	r1, r2
 8007c34:	461a      	mov	r2, r3
 8007c36:	460b      	mov	r3, r1
 8007c38:	71fb      	strb	r3, [r7, #7]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	80bb      	strh	r3, [r7, #4]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	617b      	str	r3, [r7, #20]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	61fb      	str	r3, [r7, #28]
 8007c46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d123      	bne.n	8007c96 <USB_WritePacket+0x6e>
 8007c4e:	88bb      	ldrh	r3, [r7, #4]
 8007c50:	3303      	adds	r3, #3
 8007c52:	089b      	lsrs	r3, r3, #2
 8007c54:	613b      	str	r3, [r7, #16]
 8007c56:	2300      	movs	r3, #0
 8007c58:	61bb      	str	r3, [r7, #24]
 8007c5a:	e018      	b.n	8007c8e <USB_WritePacket+0x66>
 8007c5c:	79fb      	ldrb	r3, [r7, #7]
 8007c5e:	031a      	lsls	r2, r3, #12
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c68:	461a      	mov	r2, r3
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6013      	str	r3, [r2, #0]
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	3301      	adds	r3, #1
 8007c74:	61fb      	str	r3, [r7, #28]
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	61fb      	str	r3, [r7, #28]
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	61fb      	str	r3, [r7, #28]
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	3301      	adds	r3, #1
 8007c86:	61fb      	str	r3, [r7, #28]
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	61bb      	str	r3, [r7, #24]
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d3e2      	bcc.n	8007c5c <USB_WritePacket+0x34>
 8007c96:	2300      	movs	r3, #0
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3724      	adds	r7, #36	; 0x24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <USB_ReadPacket>:
 8007ca4:	b480      	push	{r7}
 8007ca6:	b08b      	sub	sp, #44	; 0x2c
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	80fb      	strh	r3, [r7, #6]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	61bb      	str	r3, [r7, #24]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8007cba:	88fb      	ldrh	r3, [r7, #6]
 8007cbc:	089b      	lsrs	r3, r3, #2
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	88fb      	ldrh	r3, [r7, #6]
 8007cc4:	f003 0303 	and.w	r3, r3, #3
 8007cc8:	83fb      	strh	r3, [r7, #30]
 8007cca:	2300      	movs	r3, #0
 8007ccc:	623b      	str	r3, [r7, #32]
 8007cce:	e014      	b.n	8007cfa <USB_ReadPacket+0x56>
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	3301      	adds	r3, #1
 8007ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	3301      	adds	r3, #1
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	623b      	str	r3, [r7, #32]
 8007cfa:	6a3a      	ldr	r2, [r7, #32]
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d3e6      	bcc.n	8007cd0 <USB_ReadPacket+0x2c>
 8007d02:	8bfb      	ldrh	r3, [r7, #30]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d01e      	beq.n	8007d46 <USB_ReadPacket+0xa2>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	623b      	str	r3, [r7, #32]
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d12:	461a      	mov	r2, r3
 8007d14:	f107 0310 	add.w	r3, r7, #16
 8007d18:	6812      	ldr	r2, [r2, #0]
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	00db      	lsls	r3, r3, #3
 8007d24:	fa22 f303 	lsr.w	r3, r2, r3
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	701a      	strb	r2, [r3, #0]
 8007d2e:	6a3b      	ldr	r3, [r7, #32]
 8007d30:	3301      	adds	r3, #1
 8007d32:	623b      	str	r3, [r7, #32]
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	3301      	adds	r3, #1
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
 8007d3a:	8bfb      	ldrh	r3, [r7, #30]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	83fb      	strh	r3, [r7, #30]
 8007d40:	8bfb      	ldrh	r3, [r7, #30]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1ea      	bne.n	8007d1c <USB_ReadPacket+0x78>
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	4618      	mov	r0, r3
 8007d4a:	372c      	adds	r7, #44	; 0x2c
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <USB_EPSetStall>:
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	60bb      	str	r3, [r7, #8]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	785b      	ldrb	r3, [r3, #1]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d12c      	bne.n	8007dca <USB_EPSetStall+0x76>
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	db12      	blt.n	8007da8 <USB_EPSetStall+0x54>
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00f      	beq.n	8007da8 <USB_EPSetStall+0x54>
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	0151      	lsls	r1, r2, #5
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	440a      	add	r2, r1
 8007d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007da2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	0151      	lsls	r1, r2, #5
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	440a      	add	r2, r1
 8007dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	e02b      	b.n	8007e22 <USB_EPSetStall+0xce>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	db12      	blt.n	8007e02 <USB_EPSetStall+0xae>
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00f      	beq.n	8007e02 <USB_EPSetStall+0xae>
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	0151      	lsls	r1, r2, #5
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	440a      	add	r2, r1
 8007df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e00:	6013      	str	r3, [r2, #0]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	0151      	lsls	r1, r2, #5
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	440a      	add	r2, r1
 8007e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e20:	6013      	str	r3, [r2, #0]
 8007e22:	2300      	movs	r3, #0
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <USB_EPClearStall>:
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	60bb      	str	r3, [r7, #8]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	785b      	ldrb	r3, [r3, #1]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d128      	bne.n	8007e9e <USB_EPClearStall+0x6e>
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	0151      	lsls	r1, r2, #5
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	440a      	add	r2, r1
 8007e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	791b      	ldrb	r3, [r3, #4]
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d003      	beq.n	8007e7c <USB_EPClearStall+0x4c>
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	791b      	ldrb	r3, [r3, #4]
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d138      	bne.n	8007eee <USB_EPClearStall+0xbe>
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	0151      	lsls	r1, r2, #5
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	440a      	add	r2, r1
 8007e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e9a:	6013      	str	r3, [r2, #0]
 8007e9c:	e027      	b.n	8007eee <USB_EPClearStall+0xbe>
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	0151      	lsls	r1, r2, #5
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	440a      	add	r2, r1
 8007eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ebc:	6013      	str	r3, [r2, #0]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	791b      	ldrb	r3, [r3, #4]
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d003      	beq.n	8007ece <USB_EPClearStall+0x9e>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	791b      	ldrb	r3, [r3, #4]
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d10f      	bne.n	8007eee <USB_EPClearStall+0xbe>
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	0151      	lsls	r1, r2, #5
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	440a      	add	r2, r1
 8007ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <USB_SetDevAddress>:
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	460b      	mov	r3, r1
 8007f06:	70fb      	strb	r3, [r7, #3]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	60fb      	str	r3, [r7, #12]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	78fb      	ldrb	r3, [r7, #3]
 8007f2a:	011b      	lsls	r3, r3, #4
 8007f2c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007f30:	68f9      	ldr	r1, [r7, #12]
 8007f32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f36:	4313      	orrs	r3, r2
 8007f38:	600b      	str	r3, [r1, #0]
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USB_DevConnect>:
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f62:	f023 0303 	bic.w	r3, r3, #3
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f76:	f023 0302 	bic.w	r3, r3, #2
 8007f7a:	6053      	str	r3, [r2, #4]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <USB_DevDisconnect>:
 8007f8a:	b480      	push	{r7}
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	60fb      	str	r3, [r7, #12]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fa4:	f023 0303 	bic.w	r3, r3, #3
 8007fa8:	6013      	str	r3, [r2, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fb8:	f043 0302 	orr.w	r3, r3, #2
 8007fbc:	6053      	str	r3, [r2, #4]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USB_ReadInterrupts>:
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	60fb      	str	r3, [r7, #12]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <USB_ReadDevAllOutEpInterrupt>:
 8007ff2:	b480      	push	{r7}
 8007ff4:	b085      	sub	sp, #20
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	60fb      	str	r3, [r7, #12]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	60bb      	str	r3, [r7, #8]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	4013      	ands	r3, r2
 8008014:	60bb      	str	r3, [r7, #8]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	0c1b      	lsrs	r3, r3, #16
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <USB_ReadDevAllInEpInterrupt>:
 8008026:	b480      	push	{r7}
 8008028:	b085      	sub	sp, #20
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	60bb      	str	r3, [r7, #8]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	4013      	ands	r3, r2
 8008048:	60bb      	str	r3, [r7, #8]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	b29b      	uxth	r3, r3
 800804e:	4618      	mov	r0, r3
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <USB_ReadDevOutEPInterrupt>:
 800805a:	b480      	push	{r7}
 800805c:	b085      	sub	sp, #20
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	460b      	mov	r3, r1
 8008064:	70fb      	strb	r3, [r7, #3]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	60fb      	str	r3, [r7, #12]
 800806a:	78fb      	ldrb	r3, [r7, #3]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	60bb      	str	r3, [r7, #8]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	4013      	ands	r3, r2
 8008086:	60bb      	str	r3, [r7, #8]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	4618      	mov	r0, r3
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <USB_ReadDevInEPInterrupt>:
 8008096:	b480      	push	{r7}
 8008098:	b087      	sub	sp, #28
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	70fb      	strb	r3, [r7, #3]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	617b      	str	r3, [r7, #20]
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	613b      	str	r3, [r7, #16]
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	78fb      	ldrb	r3, [r7, #3]
 80080bc:	f003 030f 	and.w	r3, r3, #15
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	fa22 f303 	lsr.w	r3, r2, r3
 80080c6:	01db      	lsls	r3, r3, #7
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	613b      	str	r3, [r7, #16]
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	4013      	ands	r3, r2
 80080e2:	60bb      	str	r3, [r7, #8]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	4618      	mov	r0, r3
 80080e8:	371c      	adds	r7, #28
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <USB_GetMode>:
 80080f2:	b480      	push	{r7}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	4618      	mov	r0, r3
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <USB_ActivateSetup>:
 800810e:	b480      	push	{r7}
 8008110:	b085      	sub	sp, #20
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	60fb      	str	r3, [r7, #12]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008128:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800812c:	f023 0307 	bic.w	r3, r3, #7
 8008130:	6013      	str	r3, [r2, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008144:	6053      	str	r3, [r2, #4]
 8008146:	2300      	movs	r3, #0
 8008148:	4618      	mov	r0, r3
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <USB_EP0_OutStart>:
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	460b      	mov	r3, r1
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	72fb      	strb	r3, [r7, #11]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	333c      	adds	r3, #60	; 0x3c
 800816a:	3304      	adds	r3, #4
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	613b      	str	r3, [r7, #16]
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	4a26      	ldr	r2, [pc, #152]	; (800820c <USB_EP0_OutStart+0xb8>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d90a      	bls.n	800818e <USB_EP0_OutStart+0x3a>
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008188:	d101      	bne.n	800818e <USB_EP0_OutStart+0x3a>
 800818a:	2300      	movs	r3, #0
 800818c:	e037      	b.n	80081fe <USB_EP0_OutStart+0xaa>
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008194:	461a      	mov	r2, r3
 8008196:	2300      	movs	r3, #0
 8008198:	6113      	str	r3, [r2, #16]
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081ac:	6113      	str	r3, [r2, #16]
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081bc:	f043 0318 	orr.w	r3, r3, #24
 80081c0:	6113      	str	r3, [r2, #16]
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80081d4:	6113      	str	r3, [r2, #16]
 80081d6:	7afb      	ldrb	r3, [r7, #11]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d10f      	bne.n	80081fc <USB_EP0_OutStart+0xa8>
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e2:	461a      	mov	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6153      	str	r3, [r2, #20]
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80081fa:	6013      	str	r3, [r2, #0]
 80081fc:	2300      	movs	r3, #0
 80081fe:	4618      	mov	r0, r3
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	4f54300a 	.word	0x4f54300a

08008210 <USB_CoreReset>:
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	2300      	movs	r3, #0
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3301      	adds	r3, #1
 8008220:	60fb      	str	r3, [r7, #12]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	4a13      	ldr	r2, [pc, #76]	; (8008274 <USB_CoreReset+0x64>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d901      	bls.n	800822e <USB_CoreReset+0x1e>
 800822a:	2303      	movs	r3, #3
 800822c:	e01b      	b.n	8008266 <USB_CoreReset+0x56>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	daf2      	bge.n	800821c <USB_CoreReset+0xc>
 8008236:	2300      	movs	r3, #0
 8008238:	60fb      	str	r3, [r7, #12]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	f043 0201 	orr.w	r2, r3, #1
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	611a      	str	r2, [r3, #16]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	3301      	adds	r3, #1
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4a09      	ldr	r2, [pc, #36]	; (8008274 <USB_CoreReset+0x64>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d901      	bls.n	8008258 <USB_CoreReset+0x48>
 8008254:	2303      	movs	r3, #3
 8008256:	e006      	b.n	8008266 <USB_CoreReset+0x56>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b01      	cmp	r3, #1
 8008262:	d0f0      	beq.n	8008246 <USB_CoreReset+0x36>
 8008264:	2300      	movs	r3, #0
 8008266:	4618      	mov	r0, r3
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	00030d40 	.word	0x00030d40

08008278 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008284:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008288:	f002 fc8a 	bl	800aba0 <USBD_static_malloc>
 800828c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d109      	bne.n	80082a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	32b0      	adds	r2, #176	; 0xb0
 800829e:	2100      	movs	r1, #0
 80082a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80082a4:	2302      	movs	r3, #2
 80082a6:	e0d4      	b.n	8008452 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80082a8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80082ac:	2100      	movs	r1, #0
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f003 fa59 	bl	800b766 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	32b0      	adds	r2, #176	; 0xb0
 80082be:	68f9      	ldr	r1, [r7, #12]
 80082c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	32b0      	adds	r2, #176	; 0xb0
 80082ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	7c1b      	ldrb	r3, [r3, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d138      	bne.n	8008352 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80082e0:	4b5e      	ldr	r3, [pc, #376]	; (800845c <USBD_CDC_Init+0x1e4>)
 80082e2:	7819      	ldrb	r1, [r3, #0]
 80082e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082e8:	2202      	movs	r2, #2
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f002 fb35 	bl	800a95a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80082f0:	4b5a      	ldr	r3, [pc, #360]	; (800845c <USBD_CDC_Init+0x1e4>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	f003 020f 	and.w	r2, r3, #15
 80082f8:	6879      	ldr	r1, [r7, #4]
 80082fa:	4613      	mov	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	440b      	add	r3, r1
 8008304:	3324      	adds	r3, #36	; 0x24
 8008306:	2201      	movs	r2, #1
 8008308:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800830a:	4b55      	ldr	r3, [pc, #340]	; (8008460 <USBD_CDC_Init+0x1e8>)
 800830c:	7819      	ldrb	r1, [r3, #0]
 800830e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008312:	2202      	movs	r2, #2
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f002 fb20 	bl	800a95a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800831a:	4b51      	ldr	r3, [pc, #324]	; (8008460 <USBD_CDC_Init+0x1e8>)
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	f003 020f 	and.w	r2, r3, #15
 8008322:	6879      	ldr	r1, [r7, #4]
 8008324:	4613      	mov	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	440b      	add	r3, r1
 800832e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008332:	2201      	movs	r2, #1
 8008334:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008336:	4b4b      	ldr	r3, [pc, #300]	; (8008464 <USBD_CDC_Init+0x1ec>)
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	f003 020f 	and.w	r2, r3, #15
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	4613      	mov	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4413      	add	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	440b      	add	r3, r1
 800834a:	3326      	adds	r3, #38	; 0x26
 800834c:	2210      	movs	r2, #16
 800834e:	801a      	strh	r2, [r3, #0]
 8008350:	e035      	b.n	80083be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008352:	4b42      	ldr	r3, [pc, #264]	; (800845c <USBD_CDC_Init+0x1e4>)
 8008354:	7819      	ldrb	r1, [r3, #0]
 8008356:	2340      	movs	r3, #64	; 0x40
 8008358:	2202      	movs	r2, #2
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f002 fafd 	bl	800a95a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008360:	4b3e      	ldr	r3, [pc, #248]	; (800845c <USBD_CDC_Init+0x1e4>)
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	f003 020f 	and.w	r2, r3, #15
 8008368:	6879      	ldr	r1, [r7, #4]
 800836a:	4613      	mov	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	440b      	add	r3, r1
 8008374:	3324      	adds	r3, #36	; 0x24
 8008376:	2201      	movs	r2, #1
 8008378:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800837a:	4b39      	ldr	r3, [pc, #228]	; (8008460 <USBD_CDC_Init+0x1e8>)
 800837c:	7819      	ldrb	r1, [r3, #0]
 800837e:	2340      	movs	r3, #64	; 0x40
 8008380:	2202      	movs	r2, #2
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f002 fae9 	bl	800a95a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008388:	4b35      	ldr	r3, [pc, #212]	; (8008460 <USBD_CDC_Init+0x1e8>)
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	f003 020f 	and.w	r2, r3, #15
 8008390:	6879      	ldr	r1, [r7, #4]
 8008392:	4613      	mov	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	440b      	add	r3, r1
 800839c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083a0:	2201      	movs	r2, #1
 80083a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80083a4:	4b2f      	ldr	r3, [pc, #188]	; (8008464 <USBD_CDC_Init+0x1ec>)
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	f003 020f 	and.w	r2, r3, #15
 80083ac:	6879      	ldr	r1, [r7, #4]
 80083ae:	4613      	mov	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	440b      	add	r3, r1
 80083b8:	3326      	adds	r3, #38	; 0x26
 80083ba:	2210      	movs	r2, #16
 80083bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80083be:	4b29      	ldr	r3, [pc, #164]	; (8008464 <USBD_CDC_Init+0x1ec>)
 80083c0:	7819      	ldrb	r1, [r3, #0]
 80083c2:	2308      	movs	r3, #8
 80083c4:	2203      	movs	r2, #3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f002 fac7 	bl	800a95a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80083cc:	4b25      	ldr	r3, [pc, #148]	; (8008464 <USBD_CDC_Init+0x1ec>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	f003 020f 	and.w	r2, r3, #15
 80083d4:	6879      	ldr	r1, [r7, #4]
 80083d6:	4613      	mov	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	440b      	add	r3, r1
 80083e0:	3324      	adds	r3, #36	; 0x24
 80083e2:	2201      	movs	r2, #1
 80083e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	33b0      	adds	r3, #176	; 0xb0
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800841c:	2302      	movs	r3, #2
 800841e:	e018      	b.n	8008452 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	7c1b      	ldrb	r3, [r3, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10a      	bne.n	800843e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008428:	4b0d      	ldr	r3, [pc, #52]	; (8008460 <USBD_CDC_Init+0x1e8>)
 800842a:	7819      	ldrb	r1, [r3, #0]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f002 fb7e 	bl	800ab38 <USBD_LL_PrepareReceive>
 800843c:	e008      	b.n	8008450 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800843e:	4b08      	ldr	r3, [pc, #32]	; (8008460 <USBD_CDC_Init+0x1e8>)
 8008440:	7819      	ldrb	r1, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008448:	2340      	movs	r3, #64	; 0x40
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f002 fb74 	bl	800ab38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	200000b7 	.word	0x200000b7
 8008460:	200000b8 	.word	0x200000b8
 8008464:	200000b9 	.word	0x200000b9

08008468 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	460b      	mov	r3, r1
 8008472:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008474:	4b3a      	ldr	r3, [pc, #232]	; (8008560 <USBD_CDC_DeInit+0xf8>)
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	4619      	mov	r1, r3
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f002 fa93 	bl	800a9a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008480:	4b37      	ldr	r3, [pc, #220]	; (8008560 <USBD_CDC_DeInit+0xf8>)
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	f003 020f 	and.w	r2, r3, #15
 8008488:	6879      	ldr	r1, [r7, #4]
 800848a:	4613      	mov	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	440b      	add	r3, r1
 8008494:	3324      	adds	r3, #36	; 0x24
 8008496:	2200      	movs	r2, #0
 8008498:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800849a:	4b32      	ldr	r3, [pc, #200]	; (8008564 <USBD_CDC_DeInit+0xfc>)
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	4619      	mov	r1, r3
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f002 fa80 	bl	800a9a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80084a6:	4b2f      	ldr	r3, [pc, #188]	; (8008564 <USBD_CDC_DeInit+0xfc>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	f003 020f 	and.w	r2, r3, #15
 80084ae:	6879      	ldr	r1, [r7, #4]
 80084b0:	4613      	mov	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	440b      	add	r3, r1
 80084ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084be:	2200      	movs	r2, #0
 80084c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80084c2:	4b29      	ldr	r3, [pc, #164]	; (8008568 <USBD_CDC_DeInit+0x100>)
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f002 fa6c 	bl	800a9a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80084ce:	4b26      	ldr	r3, [pc, #152]	; (8008568 <USBD_CDC_DeInit+0x100>)
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	f003 020f 	and.w	r2, r3, #15
 80084d6:	6879      	ldr	r1, [r7, #4]
 80084d8:	4613      	mov	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	440b      	add	r3, r1
 80084e2:	3324      	adds	r3, #36	; 0x24
 80084e4:	2200      	movs	r2, #0
 80084e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80084e8:	4b1f      	ldr	r3, [pc, #124]	; (8008568 <USBD_CDC_DeInit+0x100>)
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	f003 020f 	and.w	r2, r3, #15
 80084f0:	6879      	ldr	r1, [r7, #4]
 80084f2:	4613      	mov	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4413      	add	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	440b      	add	r3, r1
 80084fc:	3326      	adds	r3, #38	; 0x26
 80084fe:	2200      	movs	r2, #0
 8008500:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	32b0      	adds	r2, #176	; 0xb0
 800850c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d01f      	beq.n	8008554 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	33b0      	adds	r3, #176	; 0xb0
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	32b0      	adds	r2, #176	; 0xb0
 8008532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008536:	4618      	mov	r0, r3
 8008538:	f002 fb40 	bl	800abbc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	32b0      	adds	r2, #176	; 0xb0
 8008546:	2100      	movs	r1, #0
 8008548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	200000b7 	.word	0x200000b7
 8008564:	200000b8 	.word	0x200000b8
 8008568:	200000b9 	.word	0x200000b9

0800856c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	32b0      	adds	r2, #176	; 0xb0
 8008580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008584:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800858a:	2300      	movs	r3, #0
 800858c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008598:	2303      	movs	r3, #3
 800859a:	e0bf      	b.n	800871c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d050      	beq.n	800864a <USBD_CDC_Setup+0xde>
 80085a8:	2b20      	cmp	r3, #32
 80085aa:	f040 80af 	bne.w	800870c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	88db      	ldrh	r3, [r3, #6]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d03a      	beq.n	800862c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	b25b      	sxtb	r3, r3
 80085bc:	2b00      	cmp	r3, #0
 80085be:	da1b      	bge.n	80085f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	33b0      	adds	r3, #176	; 0xb0
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80085d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	88d2      	ldrh	r2, [r2, #6]
 80085dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	88db      	ldrh	r3, [r3, #6]
 80085e2:	2b07      	cmp	r3, #7
 80085e4:	bf28      	it	cs
 80085e6:	2307      	movcs	r3, #7
 80085e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	89fa      	ldrh	r2, [r7, #14]
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 fd89 	bl	800a108 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80085f6:	e090      	b.n	800871a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	785a      	ldrb	r2, [r3, #1]
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	88db      	ldrh	r3, [r3, #6]
 8008606:	2b3f      	cmp	r3, #63	; 0x3f
 8008608:	d803      	bhi.n	8008612 <USBD_CDC_Setup+0xa6>
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	88db      	ldrh	r3, [r3, #6]
 800860e:	b2da      	uxtb	r2, r3
 8008610:	e000      	b.n	8008614 <USBD_CDC_Setup+0xa8>
 8008612:	2240      	movs	r2, #64	; 0x40
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800861a:	6939      	ldr	r1, [r7, #16]
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008622:	461a      	mov	r2, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f001 fd9b 	bl	800a160 <USBD_CtlPrepareRx>
      break;
 800862a:	e076      	b.n	800871a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	33b0      	adds	r3, #176	; 0xb0
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4413      	add	r3, r2
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	7850      	ldrb	r0, [r2, #1]
 8008642:	2200      	movs	r2, #0
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	4798      	blx	r3
      break;
 8008648:	e067      	b.n	800871a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	785b      	ldrb	r3, [r3, #1]
 800864e:	2b0b      	cmp	r3, #11
 8008650:	d851      	bhi.n	80086f6 <USBD_CDC_Setup+0x18a>
 8008652:	a201      	add	r2, pc, #4	; (adr r2, 8008658 <USBD_CDC_Setup+0xec>)
 8008654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008658:	08008689 	.word	0x08008689
 800865c:	08008705 	.word	0x08008705
 8008660:	080086f7 	.word	0x080086f7
 8008664:	080086f7 	.word	0x080086f7
 8008668:	080086f7 	.word	0x080086f7
 800866c:	080086f7 	.word	0x080086f7
 8008670:	080086f7 	.word	0x080086f7
 8008674:	080086f7 	.word	0x080086f7
 8008678:	080086f7 	.word	0x080086f7
 800867c:	080086f7 	.word	0x080086f7
 8008680:	080086b3 	.word	0x080086b3
 8008684:	080086dd 	.word	0x080086dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b03      	cmp	r3, #3
 8008692:	d107      	bne.n	80086a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008694:	f107 030a 	add.w	r3, r7, #10
 8008698:	2202      	movs	r2, #2
 800869a:	4619      	mov	r1, r3
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f001 fd33 	bl	800a108 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086a2:	e032      	b.n	800870a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f001 fcbd 	bl	800a026 <USBD_CtlError>
            ret = USBD_FAIL;
 80086ac:	2303      	movs	r3, #3
 80086ae:	75fb      	strb	r3, [r7, #23]
          break;
 80086b0:	e02b      	b.n	800870a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b03      	cmp	r3, #3
 80086bc:	d107      	bne.n	80086ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80086be:	f107 030d 	add.w	r3, r7, #13
 80086c2:	2201      	movs	r2, #1
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f001 fd1e 	bl	800a108 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086cc:	e01d      	b.n	800870a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f001 fca8 	bl	800a026 <USBD_CtlError>
            ret = USBD_FAIL;
 80086d6:	2303      	movs	r3, #3
 80086d8:	75fb      	strb	r3, [r7, #23]
          break;
 80086da:	e016      	b.n	800870a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b03      	cmp	r3, #3
 80086e6:	d00f      	beq.n	8008708 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f001 fc9b 	bl	800a026 <USBD_CtlError>
            ret = USBD_FAIL;
 80086f0:	2303      	movs	r3, #3
 80086f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80086f4:	e008      	b.n	8008708 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f001 fc94 	bl	800a026 <USBD_CtlError>
          ret = USBD_FAIL;
 80086fe:	2303      	movs	r3, #3
 8008700:	75fb      	strb	r3, [r7, #23]
          break;
 8008702:	e002      	b.n	800870a <USBD_CDC_Setup+0x19e>
          break;
 8008704:	bf00      	nop
 8008706:	e008      	b.n	800871a <USBD_CDC_Setup+0x1ae>
          break;
 8008708:	bf00      	nop
      }
      break;
 800870a:	e006      	b.n	800871a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 fc89 	bl	800a026 <USBD_CtlError>
      ret = USBD_FAIL;
 8008714:	2303      	movs	r3, #3
 8008716:	75fb      	strb	r3, [r7, #23]
      break;
 8008718:	bf00      	nop
  }

  return (uint8_t)ret;
 800871a:	7dfb      	ldrb	r3, [r7, #23]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3718      	adds	r7, #24
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008736:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	32b0      	adds	r2, #176	; 0xb0
 8008742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800874a:	2303      	movs	r3, #3
 800874c:	e065      	b.n	800881a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	32b0      	adds	r2, #176	; 0xb0
 8008758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800875c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800875e:	78fb      	ldrb	r3, [r7, #3]
 8008760:	f003 020f 	and.w	r2, r3, #15
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	4613      	mov	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	440b      	add	r3, r1
 8008770:	3318      	adds	r3, #24
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d02f      	beq.n	80087d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008778:	78fb      	ldrb	r3, [r7, #3]
 800877a:	f003 020f 	and.w	r2, r3, #15
 800877e:	6879      	ldr	r1, [r7, #4]
 8008780:	4613      	mov	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	440b      	add	r3, r1
 800878a:	3318      	adds	r3, #24
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	78fb      	ldrb	r3, [r7, #3]
 8008790:	f003 010f 	and.w	r1, r3, #15
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	460b      	mov	r3, r1
 8008798:	00db      	lsls	r3, r3, #3
 800879a:	440b      	add	r3, r1
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4403      	add	r3, r0
 80087a0:	3348      	adds	r3, #72	; 0x48
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80087a8:	fb01 f303 	mul.w	r3, r1, r3
 80087ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d112      	bne.n	80087d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80087b2:	78fb      	ldrb	r3, [r7, #3]
 80087b4:	f003 020f 	and.w	r2, r3, #15
 80087b8:	6879      	ldr	r1, [r7, #4]
 80087ba:	4613      	mov	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	440b      	add	r3, r1
 80087c4:	3318      	adds	r3, #24
 80087c6:	2200      	movs	r2, #0
 80087c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80087ca:	78f9      	ldrb	r1, [r7, #3]
 80087cc:	2300      	movs	r3, #0
 80087ce:	2200      	movs	r2, #0
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f002 f990 	bl	800aaf6 <USBD_LL_Transmit>
 80087d6:	e01f      	b.n	8008818 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2200      	movs	r2, #0
 80087dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	33b0      	adds	r3, #176	; 0xb0
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d010      	beq.n	8008818 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	33b0      	adds	r3, #176	; 0xb0
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008814:	78fa      	ldrb	r2, [r7, #3]
 8008816:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	460b      	mov	r3, r1
 800882c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	32b0      	adds	r2, #176	; 0xb0
 8008838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	32b0      	adds	r2, #176	; 0xb0
 8008848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008850:	2303      	movs	r3, #3
 8008852:	e01a      	b.n	800888a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008854:	78fb      	ldrb	r3, [r7, #3]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f002 f98e 	bl	800ab7a <USBD_LL_GetRxDataSize>
 800885e:	4602      	mov	r2, r0
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	33b0      	adds	r3, #176	; 0xb0
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008884:	4611      	mov	r1, r2
 8008886:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	32b0      	adds	r2, #176	; 0xb0
 80088a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e025      	b.n	8008900 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	33b0      	adds	r3, #176	; 0xb0
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d01a      	beq.n	80088fe <USBD_CDC_EP0_RxReady+0x6c>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80088ce:	2bff      	cmp	r3, #255	; 0xff
 80088d0:	d015      	beq.n	80088fe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	33b0      	adds	r3, #176	; 0xb0
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4413      	add	r3, r2
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80088ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80088f2:	b292      	uxth	r2, r2
 80088f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	22ff      	movs	r2, #255	; 0xff
 80088fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008910:	2182      	movs	r1, #130	; 0x82
 8008912:	4818      	ldr	r0, [pc, #96]	; (8008974 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008914:	f000 fd4f 	bl	80093b6 <USBD_GetEpDesc>
 8008918:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800891a:	2101      	movs	r1, #1
 800891c:	4815      	ldr	r0, [pc, #84]	; (8008974 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800891e:	f000 fd4a 	bl	80093b6 <USBD_GetEpDesc>
 8008922:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008924:	2181      	movs	r1, #129	; 0x81
 8008926:	4813      	ldr	r0, [pc, #76]	; (8008974 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008928:	f000 fd45 	bl	80093b6 <USBD_GetEpDesc>
 800892c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	2210      	movs	r2, #16
 8008938:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d006      	beq.n	800894e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	2200      	movs	r2, #0
 8008944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008948:	711a      	strb	r2, [r3, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d006      	beq.n	8008962 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800895c:	711a      	strb	r2, [r3, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2243      	movs	r2, #67	; 0x43
 8008966:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008968:	4b02      	ldr	r3, [pc, #8]	; (8008974 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800896a:	4618      	mov	r0, r3
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	20000074 	.word	0x20000074

08008978 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008980:	2182      	movs	r1, #130	; 0x82
 8008982:	4818      	ldr	r0, [pc, #96]	; (80089e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008984:	f000 fd17 	bl	80093b6 <USBD_GetEpDesc>
 8008988:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800898a:	2101      	movs	r1, #1
 800898c:	4815      	ldr	r0, [pc, #84]	; (80089e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800898e:	f000 fd12 	bl	80093b6 <USBD_GetEpDesc>
 8008992:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008994:	2181      	movs	r1, #129	; 0x81
 8008996:	4813      	ldr	r0, [pc, #76]	; (80089e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008998:	f000 fd0d 	bl	80093b6 <USBD_GetEpDesc>
 800899c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	2210      	movs	r2, #16
 80089a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d006      	beq.n	80089be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	2200      	movs	r2, #0
 80089b4:	711a      	strb	r2, [r3, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f042 0202 	orr.w	r2, r2, #2
 80089bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d006      	beq.n	80089d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	711a      	strb	r2, [r3, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f042 0202 	orr.w	r2, r2, #2
 80089d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2243      	movs	r2, #67	; 0x43
 80089d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089d8:	4b02      	ldr	r3, [pc, #8]	; (80089e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	20000074 	.word	0x20000074

080089e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089f0:	2182      	movs	r1, #130	; 0x82
 80089f2:	4818      	ldr	r0, [pc, #96]	; (8008a54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089f4:	f000 fcdf 	bl	80093b6 <USBD_GetEpDesc>
 80089f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089fa:	2101      	movs	r1, #1
 80089fc:	4815      	ldr	r0, [pc, #84]	; (8008a54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089fe:	f000 fcda 	bl	80093b6 <USBD_GetEpDesc>
 8008a02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a04:	2181      	movs	r1, #129	; 0x81
 8008a06:	4813      	ldr	r0, [pc, #76]	; (8008a54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a08:	f000 fcd5 	bl	80093b6 <USBD_GetEpDesc>
 8008a0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d002      	beq.n	8008a1a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2210      	movs	r2, #16
 8008a18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d006      	beq.n	8008a2e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a28:	711a      	strb	r2, [r3, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d006      	beq.n	8008a42 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a3c:	711a      	strb	r2, [r3, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2243      	movs	r2, #67	; 0x43
 8008a46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a48:	4b02      	ldr	r3, [pc, #8]	; (8008a54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3718      	adds	r7, #24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20000074 	.word	0x20000074

08008a58 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	220a      	movs	r2, #10
 8008a64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008a66:	4b03      	ldr	r3, [pc, #12]	; (8008a74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr
 8008a74:	20000030 	.word	0x20000030

08008a78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d101      	bne.n	8008a8c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e009      	b.n	8008aa0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	33b0      	adds	r3, #176	; 0xb0
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4413      	add	r3, r2
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b087      	sub	sp, #28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	32b0      	adds	r2, #176	; 0xb0
 8008ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e008      	b.n	8008ae4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	371c      	adds	r7, #28
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	32b0      	adds	r2, #176	; 0xb0
 8008b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e004      	b.n	8008b1e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
	...

08008b2c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	32b0      	adds	r2, #176	; 0xb0
 8008b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b42:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008b44:	2301      	movs	r3, #1
 8008b46:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	32b0      	adds	r2, #176	; 0xb0
 8008b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e025      	b.n	8008baa <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d11f      	bne.n	8008ba8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008b70:	4b10      	ldr	r3, [pc, #64]	; (8008bb4 <USBD_CDC_TransmitPacket+0x88>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	f003 020f 	and.w	r2, r3, #15
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	4613      	mov	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4403      	add	r3, r0
 8008b8a:	3318      	adds	r3, #24
 8008b8c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008b8e:	4b09      	ldr	r3, [pc, #36]	; (8008bb4 <USBD_CDC_TransmitPacket+0x88>)
 8008b90:	7819      	ldrb	r1, [r3, #0]
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f001 ffa9 	bl	800aaf6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	200000b7 	.word	0x200000b7

08008bb8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	32b0      	adds	r2, #176	; 0xb0
 8008bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	32b0      	adds	r2, #176	; 0xb0
 8008bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d101      	bne.n	8008be6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e018      	b.n	8008c18 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	7c1b      	ldrb	r3, [r3, #16]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10a      	bne.n	8008c04 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008bee:	4b0c      	ldr	r3, [pc, #48]	; (8008c20 <USBD_CDC_ReceivePacket+0x68>)
 8008bf0:	7819      	ldrb	r1, [r3, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f001 ff9b 	bl	800ab38 <USBD_LL_PrepareReceive>
 8008c02:	e008      	b.n	8008c16 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c04:	4b06      	ldr	r3, [pc, #24]	; (8008c20 <USBD_CDC_ReceivePacket+0x68>)
 8008c06:	7819      	ldrb	r1, [r3, #0]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c0e:	2340      	movs	r3, #64	; 0x40
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 ff91 	bl	800ab38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	200000b8 	.word	0x200000b8

08008c24 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e01f      	b.n	8008c7c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	79fa      	ldrb	r2, [r7, #7]
 8008c6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f001 fe0b 	bl	800a88c <USBD_LL_Init>
 8008c76:	4603      	mov	r3, r0
 8008c78:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3718      	adds	r7, #24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e025      	b.n	8008ce8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	32ae      	adds	r2, #174	; 0xae
 8008cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00f      	beq.n	8008cd8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	32ae      	adds	r2, #174	; 0xae
 8008cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc8:	f107 020e 	add.w	r2, r7, #14
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4798      	blx	r3
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008cde:	1c5a      	adds	r2, r3, #1
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 fe13 	bl	800a924 <USBD_LL_Start>
 8008cfe:	4603      	mov	r3, r0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d10:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b084      	sub	sp, #16
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	460b      	mov	r3, r1
 8008d28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d009      	beq.n	8008d4c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	78fa      	ldrb	r2, [r7, #3]
 8008d42:	4611      	mov	r1, r2
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	4798      	blx	r3
 8008d48:	4603      	mov	r3, r0
 8008d4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	78fa      	ldrb	r2, [r7, #3]
 8008d70:	4611      	mov	r1, r2
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	4798      	blx	r3
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f001 f908 	bl	8009fb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008db0:	461a      	mov	r2, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008dbe:	f003 031f 	and.w	r3, r3, #31
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d01a      	beq.n	8008dfc <USBD_LL_SetupStage+0x72>
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d822      	bhi.n	8008e10 <USBD_LL_SetupStage+0x86>
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d002      	beq.n	8008dd4 <USBD_LL_SetupStage+0x4a>
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d00a      	beq.n	8008de8 <USBD_LL_SetupStage+0x5e>
 8008dd2:	e01d      	b.n	8008e10 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008dda:	4619      	mov	r1, r3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fb5f 	bl	80094a0 <USBD_StdDevReq>
 8008de2:	4603      	mov	r3, r0
 8008de4:	73fb      	strb	r3, [r7, #15]
      break;
 8008de6:	e020      	b.n	8008e2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008dee:	4619      	mov	r1, r3
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fbc7 	bl	8009584 <USBD_StdItfReq>
 8008df6:	4603      	mov	r3, r0
 8008df8:	73fb      	strb	r3, [r7, #15]
      break;
 8008dfa:	e016      	b.n	8008e2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fc29 	bl	800965c <USBD_StdEPReq>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e0e:	e00c      	b.n	8008e2a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f001 fde0 	bl	800a9e4 <USBD_LL_StallEP>
 8008e24:	4603      	mov	r3, r0
 8008e26:	73fb      	strb	r3, [r7, #15]
      break;
 8008e28:	bf00      	nop
  }

  return ret;
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	607a      	str	r2, [r7, #4]
 8008e40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008e46:	7afb      	ldrb	r3, [r7, #11]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d16e      	bne.n	8008f2a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008e52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	f040 8098 	bne.w	8008f90 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	689a      	ldr	r2, [r3, #8]
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d913      	bls.n	8008e94 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	689a      	ldr	r2, [r3, #8]
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	1ad2      	subs	r2, r2, r3
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	68da      	ldr	r2, [r3, #12]
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	4293      	cmp	r3, r2
 8008e84:	bf28      	it	cs
 8008e86:	4613      	movcs	r3, r2
 8008e88:	461a      	mov	r2, r3
 8008e8a:	6879      	ldr	r1, [r7, #4]
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f001 f984 	bl	800a19a <USBD_CtlContinueRx>
 8008e92:	e07d      	b.n	8008f90 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e9a:	f003 031f 	and.w	r3, r3, #31
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d014      	beq.n	8008ecc <USBD_LL_DataOutStage+0x98>
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d81d      	bhi.n	8008ee2 <USBD_LL_DataOutStage+0xae>
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <USBD_LL_DataOutStage+0x7c>
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d003      	beq.n	8008eb6 <USBD_LL_DataOutStage+0x82>
 8008eae:	e018      	b.n	8008ee2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	75bb      	strb	r3, [r7, #22]
            break;
 8008eb4:	e018      	b.n	8008ee8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 fa5e 	bl	8009382 <USBD_CoreFindIF>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	75bb      	strb	r3, [r7, #22]
            break;
 8008eca:	e00d      	b.n	8008ee8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f000 fa60 	bl	800939c <USBD_CoreFindEP>
 8008edc:	4603      	mov	r3, r0
 8008ede:	75bb      	strb	r3, [r7, #22]
            break;
 8008ee0:	e002      	b.n	8008ee8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	75bb      	strb	r3, [r7, #22]
            break;
 8008ee6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008ee8:	7dbb      	ldrb	r3, [r7, #22]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d119      	bne.n	8008f22 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d113      	bne.n	8008f22 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008efa:	7dba      	ldrb	r2, [r7, #22]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	32ae      	adds	r2, #174	; 0xae
 8008f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00b      	beq.n	8008f22 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008f0a:	7dba      	ldrb	r2, [r7, #22]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008f12:	7dba      	ldrb	r2, [r7, #22]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	32ae      	adds	r2, #174	; 0xae
 8008f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f001 f94a 	bl	800a1bc <USBD_CtlSendStatus>
 8008f28:	e032      	b.n	8008f90 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008f2a:	7afb      	ldrb	r3, [r7, #11]
 8008f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	4619      	mov	r1, r3
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 fa31 	bl	800939c <USBD_CoreFindEP>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f3e:	7dbb      	ldrb	r3, [r7, #22]
 8008f40:	2bff      	cmp	r3, #255	; 0xff
 8008f42:	d025      	beq.n	8008f90 <USBD_LL_DataOutStage+0x15c>
 8008f44:	7dbb      	ldrb	r3, [r7, #22]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d122      	bne.n	8008f90 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d117      	bne.n	8008f86 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f56:	7dba      	ldrb	r2, [r7, #22]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	32ae      	adds	r2, #174	; 0xae
 8008f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00f      	beq.n	8008f86 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008f66:	7dba      	ldrb	r2, [r7, #22]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f6e:	7dba      	ldrb	r2, [r7, #22]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	32ae      	adds	r2, #174	; 0xae
 8008f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	7afa      	ldrb	r2, [r7, #11]
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	4798      	blx	r3
 8008f82:	4603      	mov	r3, r0
 8008f84:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d001      	beq.n	8008f90 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f8c:	7dfb      	ldrb	r3, [r7, #23]
 8008f8e:	e000      	b.n	8008f92 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b086      	sub	sp, #24
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	60f8      	str	r0, [r7, #12]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	607a      	str	r2, [r7, #4]
 8008fa6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008fa8:	7afb      	ldrb	r3, [r7, #11]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d16f      	bne.n	800908e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3314      	adds	r3, #20
 8008fb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d15a      	bne.n	8009074 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	689a      	ldr	r2, [r3, #8]
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d914      	bls.n	8008ff4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	689a      	ldr	r2, [r3, #8]
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	1ad2      	subs	r2, r2, r3
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	6879      	ldr	r1, [r7, #4]
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f001 f8ac 	bl	800a13e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2100      	movs	r1, #0
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f001 fda3 	bl	800ab38 <USBD_LL_PrepareReceive>
 8008ff2:	e03f      	b.n	8009074 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	68da      	ldr	r2, [r3, #12]
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d11c      	bne.n	800903a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009008:	429a      	cmp	r2, r3
 800900a:	d316      	bcc.n	800903a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009016:	429a      	cmp	r2, r3
 8009018:	d20f      	bcs.n	800903a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800901a:	2200      	movs	r2, #0
 800901c:	2100      	movs	r1, #0
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f001 f88d 	bl	800a13e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800902c:	2300      	movs	r3, #0
 800902e:	2200      	movs	r2, #0
 8009030:	2100      	movs	r1, #0
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f001 fd80 	bl	800ab38 <USBD_LL_PrepareReceive>
 8009038:	e01c      	b.n	8009074 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2b03      	cmp	r3, #3
 8009044:	d10f      	bne.n	8009066 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d009      	beq.n	8009066 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009066:	2180      	movs	r1, #128	; 0x80
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f001 fcbb 	bl	800a9e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f001 f8b7 	bl	800a1e2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d03a      	beq.n	80090f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f7ff fe42 	bl	8008d08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800908c:	e032      	b.n	80090f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800908e:	7afb      	ldrb	r3, [r7, #11]
 8009090:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009094:	b2db      	uxtb	r3, r3
 8009096:	4619      	mov	r1, r3
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f000 f97f 	bl	800939c <USBD_CoreFindEP>
 800909e:	4603      	mov	r3, r0
 80090a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
 80090a4:	2bff      	cmp	r3, #255	; 0xff
 80090a6:	d025      	beq.n	80090f4 <USBD_LL_DataInStage+0x15a>
 80090a8:	7dfb      	ldrb	r3, [r7, #23]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d122      	bne.n	80090f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	d11c      	bne.n	80090f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80090ba:	7dfa      	ldrb	r2, [r7, #23]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	32ae      	adds	r2, #174	; 0xae
 80090c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c4:	695b      	ldr	r3, [r3, #20]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d014      	beq.n	80090f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80090ca:	7dfa      	ldrb	r2, [r7, #23]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80090d2:	7dfa      	ldrb	r2, [r7, #23]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	32ae      	adds	r2, #174	; 0xae
 80090d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090dc:	695b      	ldr	r3, [r3, #20]
 80090de:	7afa      	ldrb	r2, [r7, #11]
 80090e0:	4611      	mov	r1, r2
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	4798      	blx	r3
 80090e6:	4603      	mov	r3, r0
 80090e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80090ea:	7dbb      	ldrb	r3, [r7, #22]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80090f0:	7dbb      	ldrb	r3, [r7, #22]
 80090f2:	e000      	b.n	80090f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3718      	adds	r7, #24
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009136:	2b00      	cmp	r3, #0
 8009138:	d014      	beq.n	8009164 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00e      	beq.n	8009164 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	6852      	ldr	r2, [r2, #4]
 8009152:	b2d2      	uxtb	r2, r2
 8009154:	4611      	mov	r1, r2
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	4798      	blx	r3
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009160:	2303      	movs	r3, #3
 8009162:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009164:	2340      	movs	r3, #64	; 0x40
 8009166:	2200      	movs	r2, #0
 8009168:	2100      	movs	r1, #0
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 fbf5 	bl	800a95a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2240      	movs	r2, #64	; 0x40
 800917c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009180:	2340      	movs	r3, #64	; 0x40
 8009182:	2200      	movs	r2, #0
 8009184:	2180      	movs	r1, #128	; 0x80
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f001 fbe7 	bl	800a95a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2240      	movs	r2, #64	; 0x40
 8009196:	621a      	str	r2, [r3, #32]

  return ret;
 8009198:	7bfb      	ldrb	r3, [r7, #15]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b083      	sub	sp, #12
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	460b      	mov	r3, r1
 80091ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	78fa      	ldrb	r2, [r7, #3]
 80091b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091c2:	b480      	push	{r7}
 80091c4:	b083      	sub	sp, #12
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2204      	movs	r2, #4
 80091dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b083      	sub	sp, #12
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b04      	cmp	r3, #4
 8009200:	d106      	bne.n	8009210 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009208:	b2da      	uxtb	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b082      	sub	sp, #8
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b03      	cmp	r3, #3
 8009230:	d110      	bne.n	8009254 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00b      	beq.n	8009254 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009242:	69db      	ldr	r3, [r3, #28]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d005      	beq.n	8009254 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800924e:	69db      	ldr	r3, [r3, #28]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b082      	sub	sp, #8
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	460b      	mov	r3, r1
 8009268:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	32ae      	adds	r2, #174	; 0xae
 8009274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d101      	bne.n	8009280 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800927c:	2303      	movs	r3, #3
 800927e:	e01c      	b.n	80092ba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b03      	cmp	r3, #3
 800928a:	d115      	bne.n	80092b8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	32ae      	adds	r2, #174	; 0xae
 8009296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800929a:	6a1b      	ldr	r3, [r3, #32]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00b      	beq.n	80092b8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	32ae      	adds	r2, #174	; 0xae
 80092aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ae:	6a1b      	ldr	r3, [r3, #32]
 80092b0:	78fa      	ldrb	r2, [r7, #3]
 80092b2:	4611      	mov	r1, r2
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	460b      	mov	r3, r1
 80092cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	32ae      	adds	r2, #174	; 0xae
 80092d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e01c      	b.n	800931e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b03      	cmp	r3, #3
 80092ee:	d115      	bne.n	800931c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	32ae      	adds	r2, #174	; 0xae
 80092fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00b      	beq.n	800931c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	32ae      	adds	r2, #174	; 0xae
 800930e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009314:	78fa      	ldrb	r2, [r7, #3]
 8009316:	4611      	mov	r1, r2
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009326:	b480      	push	{r7}
 8009328:	b083      	sub	sp, #12
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00e      	beq.n	8009378 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	6852      	ldr	r2, [r2, #4]
 8009366:	b2d2      	uxtb	r2, r2
 8009368:	4611      	mov	r1, r2
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	4798      	blx	r3
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009374:	2303      	movs	r3, #3
 8009376:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009378:	7bfb      	ldrb	r3, [r7, #15]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	460b      	mov	r3, r1
 800938c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800938e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009390:	4618      	mov	r0, r3
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80093a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	370c      	adds	r7, #12
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b086      	sub	sp, #24
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	460b      	mov	r3, r1
 80093c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80093ca:	2300      	movs	r3, #0
 80093cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	885b      	ldrh	r3, [r3, #2]
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	b29b      	uxth	r3, r3
 80093da:	429a      	cmp	r2, r3
 80093dc:	d920      	bls.n	8009420 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80093e6:	e013      	b.n	8009410 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80093e8:	f107 030a 	add.w	r3, r7, #10
 80093ec:	4619      	mov	r1, r3
 80093ee:	6978      	ldr	r0, [r7, #20]
 80093f0:	f000 f81b 	bl	800942a <USBD_GetNextDesc>
 80093f4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	785b      	ldrb	r3, [r3, #1]
 80093fa:	2b05      	cmp	r3, #5
 80093fc:	d108      	bne.n	8009410 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	789b      	ldrb	r3, [r3, #2]
 8009406:	78fa      	ldrb	r2, [r7, #3]
 8009408:	429a      	cmp	r2, r3
 800940a:	d008      	beq.n	800941e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800940c:	2300      	movs	r3, #0
 800940e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	885b      	ldrh	r3, [r3, #2]
 8009414:	b29a      	uxth	r2, r3
 8009416:	897b      	ldrh	r3, [r7, #10]
 8009418:	429a      	cmp	r2, r3
 800941a:	d8e5      	bhi.n	80093e8 <USBD_GetEpDesc+0x32>
 800941c:	e000      	b.n	8009420 <USBD_GetEpDesc+0x6a>
          break;
 800941e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009420:	693b      	ldr	r3, [r7, #16]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3718      	adds	r7, #24
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800942a:	b480      	push	{r7}
 800942c:	b085      	sub	sp, #20
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	881a      	ldrh	r2, [r3, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	b29b      	uxth	r3, r3
 8009442:	4413      	add	r3, r2
 8009444:	b29a      	uxth	r2, r3
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4413      	add	r3, r2
 8009454:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009456:	68fb      	ldr	r3, [r7, #12]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009464:	b480      	push	{r7}
 8009466:	b087      	sub	sp, #28
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	3301      	adds	r3, #1
 800947a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009482:	8a3b      	ldrh	r3, [r7, #16]
 8009484:	021b      	lsls	r3, r3, #8
 8009486:	b21a      	sxth	r2, r3
 8009488:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800948c:	4313      	orrs	r3, r2
 800948e:	b21b      	sxth	r3, r3
 8009490:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009492:	89fb      	ldrh	r3, [r7, #14]
}
 8009494:	4618      	mov	r0, r3
 8009496:	371c      	adds	r7, #28
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094b6:	2b40      	cmp	r3, #64	; 0x40
 80094b8:	d005      	beq.n	80094c6 <USBD_StdDevReq+0x26>
 80094ba:	2b40      	cmp	r3, #64	; 0x40
 80094bc:	d857      	bhi.n	800956e <USBD_StdDevReq+0xce>
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00f      	beq.n	80094e2 <USBD_StdDevReq+0x42>
 80094c2:	2b20      	cmp	r3, #32
 80094c4:	d153      	bne.n	800956e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	32ae      	adds	r2, #174	; 0xae
 80094d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	4798      	blx	r3
 80094dc:	4603      	mov	r3, r0
 80094de:	73fb      	strb	r3, [r7, #15]
      break;
 80094e0:	e04a      	b.n	8009578 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	785b      	ldrb	r3, [r3, #1]
 80094e6:	2b09      	cmp	r3, #9
 80094e8:	d83b      	bhi.n	8009562 <USBD_StdDevReq+0xc2>
 80094ea:	a201      	add	r2, pc, #4	; (adr r2, 80094f0 <USBD_StdDevReq+0x50>)
 80094ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f0:	08009545 	.word	0x08009545
 80094f4:	08009559 	.word	0x08009559
 80094f8:	08009563 	.word	0x08009563
 80094fc:	0800954f 	.word	0x0800954f
 8009500:	08009563 	.word	0x08009563
 8009504:	08009523 	.word	0x08009523
 8009508:	08009519 	.word	0x08009519
 800950c:	08009563 	.word	0x08009563
 8009510:	0800953b 	.word	0x0800953b
 8009514:	0800952d 	.word	0x0800952d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fa3c 	bl	8009998 <USBD_GetDescriptor>
          break;
 8009520:	e024      	b.n	800956c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fba1 	bl	8009c6c <USBD_SetAddress>
          break;
 800952a:	e01f      	b.n	800956c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fbe0 	bl	8009cf4 <USBD_SetConfig>
 8009534:	4603      	mov	r3, r0
 8009536:	73fb      	strb	r3, [r7, #15]
          break;
 8009538:	e018      	b.n	800956c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fc83 	bl	8009e48 <USBD_GetConfig>
          break;
 8009542:	e013      	b.n	800956c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fcb4 	bl	8009eb4 <USBD_GetStatus>
          break;
 800954c:	e00e      	b.n	800956c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fce3 	bl	8009f1c <USBD_SetFeature>
          break;
 8009556:	e009      	b.n	800956c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009558:	6839      	ldr	r1, [r7, #0]
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fd07 	bl	8009f6e <USBD_ClrFeature>
          break;
 8009560:	e004      	b.n	800956c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fd5e 	bl	800a026 <USBD_CtlError>
          break;
 800956a:	bf00      	nop
      }
      break;
 800956c:	e004      	b.n	8009578 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800956e:	6839      	ldr	r1, [r7, #0]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 fd58 	bl	800a026 <USBD_CtlError>
      break;
 8009576:	bf00      	nop
  }

  return ret;
 8009578:	7bfb      	ldrb	r3, [r7, #15]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop

08009584 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800959a:	2b40      	cmp	r3, #64	; 0x40
 800959c:	d005      	beq.n	80095aa <USBD_StdItfReq+0x26>
 800959e:	2b40      	cmp	r3, #64	; 0x40
 80095a0:	d852      	bhi.n	8009648 <USBD_StdItfReq+0xc4>
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d001      	beq.n	80095aa <USBD_StdItfReq+0x26>
 80095a6:	2b20      	cmp	r3, #32
 80095a8:	d14e      	bne.n	8009648 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	3b01      	subs	r3, #1
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d840      	bhi.n	800963a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	889b      	ldrh	r3, [r3, #4]
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d836      	bhi.n	8009630 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	889b      	ldrh	r3, [r3, #4]
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	4619      	mov	r1, r3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff fed9 	bl	8009382 <USBD_CoreFindIF>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
 80095d6:	2bff      	cmp	r3, #255	; 0xff
 80095d8:	d01d      	beq.n	8009616 <USBD_StdItfReq+0x92>
 80095da:	7bbb      	ldrb	r3, [r7, #14]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d11a      	bne.n	8009616 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80095e0:	7bba      	ldrb	r2, [r7, #14]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	32ae      	adds	r2, #174	; 0xae
 80095e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00f      	beq.n	8009610 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80095f0:	7bba      	ldrb	r2, [r7, #14]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095f8:	7bba      	ldrb	r2, [r7, #14]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	32ae      	adds	r2, #174	; 0xae
 80095fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	4798      	blx	r3
 800960a:	4603      	mov	r3, r0
 800960c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800960e:	e004      	b.n	800961a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009610:	2303      	movs	r3, #3
 8009612:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009614:	e001      	b.n	800961a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009616:	2303      	movs	r3, #3
 8009618:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	88db      	ldrh	r3, [r3, #6]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d110      	bne.n	8009644 <USBD_StdItfReq+0xc0>
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10d      	bne.n	8009644 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fdc7 	bl	800a1bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800962e:	e009      	b.n	8009644 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009630:	6839      	ldr	r1, [r7, #0]
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fcf7 	bl	800a026 <USBD_CtlError>
          break;
 8009638:	e004      	b.n	8009644 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800963a:	6839      	ldr	r1, [r7, #0]
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fcf2 	bl	800a026 <USBD_CtlError>
          break;
 8009642:	e000      	b.n	8009646 <USBD_StdItfReq+0xc2>
          break;
 8009644:	bf00      	nop
      }
      break;
 8009646:	e004      	b.n	8009652 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fceb 	bl	800a026 <USBD_CtlError>
      break;
 8009650:	bf00      	nop
  }

  return ret;
 8009652:	7bfb      	ldrb	r3, [r7, #15]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	889b      	ldrh	r3, [r3, #4]
 800966e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009678:	2b40      	cmp	r3, #64	; 0x40
 800967a:	d007      	beq.n	800968c <USBD_StdEPReq+0x30>
 800967c:	2b40      	cmp	r3, #64	; 0x40
 800967e:	f200 817f 	bhi.w	8009980 <USBD_StdEPReq+0x324>
 8009682:	2b00      	cmp	r3, #0
 8009684:	d02a      	beq.n	80096dc <USBD_StdEPReq+0x80>
 8009686:	2b20      	cmp	r3, #32
 8009688:	f040 817a 	bne.w	8009980 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7ff fe83 	bl	800939c <USBD_CoreFindEP>
 8009696:	4603      	mov	r3, r0
 8009698:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800969a:	7b7b      	ldrb	r3, [r7, #13]
 800969c:	2bff      	cmp	r3, #255	; 0xff
 800969e:	f000 8174 	beq.w	800998a <USBD_StdEPReq+0x32e>
 80096a2:	7b7b      	ldrb	r3, [r7, #13]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f040 8170 	bne.w	800998a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80096aa:	7b7a      	ldrb	r2, [r7, #13]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80096b2:	7b7a      	ldrb	r2, [r7, #13]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	32ae      	adds	r2, #174	; 0xae
 80096b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f000 8163 	beq.w	800998a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80096c4:	7b7a      	ldrb	r2, [r7, #13]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	32ae      	adds	r2, #174	; 0xae
 80096ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	4798      	blx	r3
 80096d6:	4603      	mov	r3, r0
 80096d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80096da:	e156      	b.n	800998a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	785b      	ldrb	r3, [r3, #1]
 80096e0:	2b03      	cmp	r3, #3
 80096e2:	d008      	beq.n	80096f6 <USBD_StdEPReq+0x9a>
 80096e4:	2b03      	cmp	r3, #3
 80096e6:	f300 8145 	bgt.w	8009974 <USBD_StdEPReq+0x318>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f000 809b 	beq.w	8009826 <USBD_StdEPReq+0x1ca>
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d03c      	beq.n	800976e <USBD_StdEPReq+0x112>
 80096f4:	e13e      	b.n	8009974 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d002      	beq.n	8009708 <USBD_StdEPReq+0xac>
 8009702:	2b03      	cmp	r3, #3
 8009704:	d016      	beq.n	8009734 <USBD_StdEPReq+0xd8>
 8009706:	e02c      	b.n	8009762 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009708:	7bbb      	ldrb	r3, [r7, #14]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00d      	beq.n	800972a <USBD_StdEPReq+0xce>
 800970e:	7bbb      	ldrb	r3, [r7, #14]
 8009710:	2b80      	cmp	r3, #128	; 0x80
 8009712:	d00a      	beq.n	800972a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009714:	7bbb      	ldrb	r3, [r7, #14]
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f001 f963 	bl	800a9e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800971e:	2180      	movs	r1, #128	; 0x80
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f001 f95f 	bl	800a9e4 <USBD_LL_StallEP>
 8009726:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009728:	e020      	b.n	800976c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fc7a 	bl	800a026 <USBD_CtlError>
              break;
 8009732:	e01b      	b.n	800976c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	885b      	ldrh	r3, [r3, #2]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10e      	bne.n	800975a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800973c:	7bbb      	ldrb	r3, [r7, #14]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00b      	beq.n	800975a <USBD_StdEPReq+0xfe>
 8009742:	7bbb      	ldrb	r3, [r7, #14]
 8009744:	2b80      	cmp	r3, #128	; 0x80
 8009746:	d008      	beq.n	800975a <USBD_StdEPReq+0xfe>
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	88db      	ldrh	r3, [r3, #6]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d104      	bne.n	800975a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009750:	7bbb      	ldrb	r3, [r7, #14]
 8009752:	4619      	mov	r1, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f001 f945 	bl	800a9e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fd2e 	bl	800a1bc <USBD_CtlSendStatus>

              break;
 8009760:	e004      	b.n	800976c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fc5e 	bl	800a026 <USBD_CtlError>
              break;
 800976a:	bf00      	nop
          }
          break;
 800976c:	e107      	b.n	800997e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009774:	b2db      	uxtb	r3, r3
 8009776:	2b02      	cmp	r3, #2
 8009778:	d002      	beq.n	8009780 <USBD_StdEPReq+0x124>
 800977a:	2b03      	cmp	r3, #3
 800977c:	d016      	beq.n	80097ac <USBD_StdEPReq+0x150>
 800977e:	e04b      	b.n	8009818 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00d      	beq.n	80097a2 <USBD_StdEPReq+0x146>
 8009786:	7bbb      	ldrb	r3, [r7, #14]
 8009788:	2b80      	cmp	r3, #128	; 0x80
 800978a:	d00a      	beq.n	80097a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800978c:	7bbb      	ldrb	r3, [r7, #14]
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f001 f927 	bl	800a9e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009796:	2180      	movs	r1, #128	; 0x80
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f001 f923 	bl	800a9e4 <USBD_LL_StallEP>
 800979e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097a0:	e040      	b.n	8009824 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fc3e 	bl	800a026 <USBD_CtlError>
              break;
 80097aa:	e03b      	b.n	8009824 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	885b      	ldrh	r3, [r3, #2]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d136      	bne.n	8009822 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
 80097b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d004      	beq.n	80097c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f001 f92d 	bl	800aa22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fcf7 	bl	800a1bc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
 80097d0:	4619      	mov	r1, r3
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7ff fde2 	bl	800939c <USBD_CoreFindEP>
 80097d8:	4603      	mov	r3, r0
 80097da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097dc:	7b7b      	ldrb	r3, [r7, #13]
 80097de:	2bff      	cmp	r3, #255	; 0xff
 80097e0:	d01f      	beq.n	8009822 <USBD_StdEPReq+0x1c6>
 80097e2:	7b7b      	ldrb	r3, [r7, #13]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d11c      	bne.n	8009822 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80097e8:	7b7a      	ldrb	r2, [r7, #13]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80097f0:	7b7a      	ldrb	r2, [r7, #13]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	32ae      	adds	r2, #174	; 0xae
 80097f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d010      	beq.n	8009822 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009800:	7b7a      	ldrb	r2, [r7, #13]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	32ae      	adds	r2, #174	; 0xae
 8009806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	4798      	blx	r3
 8009812:	4603      	mov	r3, r0
 8009814:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009816:	e004      	b.n	8009822 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fc03 	bl	800a026 <USBD_CtlError>
              break;
 8009820:	e000      	b.n	8009824 <USBD_StdEPReq+0x1c8>
              break;
 8009822:	bf00      	nop
          }
          break;
 8009824:	e0ab      	b.n	800997e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b02      	cmp	r3, #2
 8009830:	d002      	beq.n	8009838 <USBD_StdEPReq+0x1dc>
 8009832:	2b03      	cmp	r3, #3
 8009834:	d032      	beq.n	800989c <USBD_StdEPReq+0x240>
 8009836:	e097      	b.n	8009968 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009838:	7bbb      	ldrb	r3, [r7, #14]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d007      	beq.n	800984e <USBD_StdEPReq+0x1f2>
 800983e:	7bbb      	ldrb	r3, [r7, #14]
 8009840:	2b80      	cmp	r3, #128	; 0x80
 8009842:	d004      	beq.n	800984e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fbed 	bl	800a026 <USBD_CtlError>
                break;
 800984c:	e091      	b.n	8009972 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800984e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009852:	2b00      	cmp	r3, #0
 8009854:	da0b      	bge.n	800986e <USBD_StdEPReq+0x212>
 8009856:	7bbb      	ldrb	r3, [r7, #14]
 8009858:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800985c:	4613      	mov	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	3310      	adds	r3, #16
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	4413      	add	r3, r2
 800986a:	3304      	adds	r3, #4
 800986c:	e00b      	b.n	8009886 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800986e:	7bbb      	ldrb	r3, [r7, #14]
 8009870:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009874:	4613      	mov	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	4413      	add	r3, r2
 8009884:	3304      	adds	r3, #4
 8009886:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	2200      	movs	r2, #0
 800988c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	2202      	movs	r2, #2
 8009892:	4619      	mov	r1, r3
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fc37 	bl	800a108 <USBD_CtlSendData>
              break;
 800989a:	e06a      	b.n	8009972 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800989c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	da11      	bge.n	80098c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	f003 020f 	and.w	r2, r3, #15
 80098aa:	6879      	ldr	r1, [r7, #4]
 80098ac:	4613      	mov	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	440b      	add	r3, r1
 80098b6:	3324      	adds	r3, #36	; 0x24
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d117      	bne.n	80098ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fbb0 	bl	800a026 <USBD_CtlError>
                  break;
 80098c6:	e054      	b.n	8009972 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80098c8:	7bbb      	ldrb	r3, [r7, #14]
 80098ca:	f003 020f 	and.w	r2, r3, #15
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	440b      	add	r3, r1
 80098da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80098de:	881b      	ldrh	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d104      	bne.n	80098ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fb9d 	bl	800a026 <USBD_CtlError>
                  break;
 80098ec:	e041      	b.n	8009972 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	da0b      	bge.n	800990e <USBD_StdEPReq+0x2b2>
 80098f6:	7bbb      	ldrb	r3, [r7, #14]
 80098f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098fc:	4613      	mov	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	3310      	adds	r3, #16
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	4413      	add	r3, r2
 800990a:	3304      	adds	r3, #4
 800990c:	e00b      	b.n	8009926 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009914:	4613      	mov	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	4413      	add	r3, r2
 8009924:	3304      	adds	r3, #4
 8009926:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009928:	7bbb      	ldrb	r3, [r7, #14]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d002      	beq.n	8009934 <USBD_StdEPReq+0x2d8>
 800992e:	7bbb      	ldrb	r3, [r7, #14]
 8009930:	2b80      	cmp	r3, #128	; 0x80
 8009932:	d103      	bne.n	800993c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	2200      	movs	r2, #0
 8009938:	601a      	str	r2, [r3, #0]
 800993a:	e00e      	b.n	800995a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800993c:	7bbb      	ldrb	r3, [r7, #14]
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f001 f88d 	bl	800aa60 <USBD_LL_IsStallEP>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d003      	beq.n	8009954 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	2201      	movs	r2, #1
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	e002      	b.n	800995a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	2200      	movs	r2, #0
 8009958:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	2202      	movs	r2, #2
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 fbd1 	bl	800a108 <USBD_CtlSendData>
              break;
 8009966:	e004      	b.n	8009972 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fb5b 	bl	800a026 <USBD_CtlError>
              break;
 8009970:	bf00      	nop
          }
          break;
 8009972:	e004      	b.n	800997e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009974:	6839      	ldr	r1, [r7, #0]
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fb55 	bl	800a026 <USBD_CtlError>
          break;
 800997c:	bf00      	nop
      }
      break;
 800997e:	e005      	b.n	800998c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009980:	6839      	ldr	r1, [r7, #0]
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fb4f 	bl	800a026 <USBD_CtlError>
      break;
 8009988:	e000      	b.n	800998c <USBD_StdEPReq+0x330>
      break;
 800998a:	bf00      	nop
  }

  return ret;
 800998c:	7bfb      	ldrb	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
	...

08009998 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80099a6:	2300      	movs	r3, #0
 80099a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80099aa:	2300      	movs	r3, #0
 80099ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	885b      	ldrh	r3, [r3, #2]
 80099b2:	0a1b      	lsrs	r3, r3, #8
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	3b01      	subs	r3, #1
 80099b8:	2b06      	cmp	r3, #6
 80099ba:	f200 8128 	bhi.w	8009c0e <USBD_GetDescriptor+0x276>
 80099be:	a201      	add	r2, pc, #4	; (adr r2, 80099c4 <USBD_GetDescriptor+0x2c>)
 80099c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c4:	080099e1 	.word	0x080099e1
 80099c8:	080099f9 	.word	0x080099f9
 80099cc:	08009a39 	.word	0x08009a39
 80099d0:	08009c0f 	.word	0x08009c0f
 80099d4:	08009c0f 	.word	0x08009c0f
 80099d8:	08009baf 	.word	0x08009baf
 80099dc:	08009bdb 	.word	0x08009bdb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	7c12      	ldrb	r2, [r2, #16]
 80099ec:	f107 0108 	add.w	r1, r7, #8
 80099f0:	4610      	mov	r0, r2
 80099f2:	4798      	blx	r3
 80099f4:	60f8      	str	r0, [r7, #12]
      break;
 80099f6:	e112      	b.n	8009c1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	7c1b      	ldrb	r3, [r3, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10d      	bne.n	8009a1c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a08:	f107 0208 	add.w	r2, r7, #8
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	4798      	blx	r3
 8009a10:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	3301      	adds	r3, #1
 8009a16:	2202      	movs	r2, #2
 8009a18:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a1a:	e100      	b.n	8009c1e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a24:	f107 0208 	add.w	r2, r7, #8
 8009a28:	4610      	mov	r0, r2
 8009a2a:	4798      	blx	r3
 8009a2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	3301      	adds	r3, #1
 8009a32:	2202      	movs	r2, #2
 8009a34:	701a      	strb	r2, [r3, #0]
      break;
 8009a36:	e0f2      	b.n	8009c1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	885b      	ldrh	r3, [r3, #2]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b05      	cmp	r3, #5
 8009a40:	f200 80ac 	bhi.w	8009b9c <USBD_GetDescriptor+0x204>
 8009a44:	a201      	add	r2, pc, #4	; (adr r2, 8009a4c <USBD_GetDescriptor+0xb4>)
 8009a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4a:	bf00      	nop
 8009a4c:	08009a65 	.word	0x08009a65
 8009a50:	08009a99 	.word	0x08009a99
 8009a54:	08009acd 	.word	0x08009acd
 8009a58:	08009b01 	.word	0x08009b01
 8009a5c:	08009b35 	.word	0x08009b35
 8009a60:	08009b69 	.word	0x08009b69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00b      	beq.n	8009a88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	7c12      	ldrb	r2, [r2, #16]
 8009a7c:	f107 0108 	add.w	r1, r7, #8
 8009a80:	4610      	mov	r0, r2
 8009a82:	4798      	blx	r3
 8009a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a86:	e091      	b.n	8009bac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 facb 	bl	800a026 <USBD_CtlError>
            err++;
 8009a90:	7afb      	ldrb	r3, [r7, #11]
 8009a92:	3301      	adds	r3, #1
 8009a94:	72fb      	strb	r3, [r7, #11]
          break;
 8009a96:	e089      	b.n	8009bac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00b      	beq.n	8009abc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	7c12      	ldrb	r2, [r2, #16]
 8009ab0:	f107 0108 	add.w	r1, r7, #8
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	4798      	blx	r3
 8009ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aba:	e077      	b.n	8009bac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fab1 	bl	800a026 <USBD_CtlError>
            err++;
 8009ac4:	7afb      	ldrb	r3, [r7, #11]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8009aca:	e06f      	b.n	8009bac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00b      	beq.n	8009af0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	7c12      	ldrb	r2, [r2, #16]
 8009ae4:	f107 0108 	add.w	r1, r7, #8
 8009ae8:	4610      	mov	r0, r2
 8009aea:	4798      	blx	r3
 8009aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aee:	e05d      	b.n	8009bac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fa97 	bl	800a026 <USBD_CtlError>
            err++;
 8009af8:	7afb      	ldrb	r3, [r7, #11]
 8009afa:	3301      	adds	r3, #1
 8009afc:	72fb      	strb	r3, [r7, #11]
          break;
 8009afe:	e055      	b.n	8009bac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00b      	beq.n	8009b24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	7c12      	ldrb	r2, [r2, #16]
 8009b18:	f107 0108 	add.w	r1, r7, #8
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	4798      	blx	r3
 8009b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b22:	e043      	b.n	8009bac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fa7d 	bl	800a026 <USBD_CtlError>
            err++;
 8009b2c:	7afb      	ldrb	r3, [r7, #11]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	72fb      	strb	r3, [r7, #11]
          break;
 8009b32:	e03b      	b.n	8009bac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00b      	beq.n	8009b58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b46:	695b      	ldr	r3, [r3, #20]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	7c12      	ldrb	r2, [r2, #16]
 8009b4c:	f107 0108 	add.w	r1, r7, #8
 8009b50:	4610      	mov	r0, r2
 8009b52:	4798      	blx	r3
 8009b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b56:	e029      	b.n	8009bac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 fa63 	bl	800a026 <USBD_CtlError>
            err++;
 8009b60:	7afb      	ldrb	r3, [r7, #11]
 8009b62:	3301      	adds	r3, #1
 8009b64:	72fb      	strb	r3, [r7, #11]
          break;
 8009b66:	e021      	b.n	8009bac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00b      	beq.n	8009b8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b7a:	699b      	ldr	r3, [r3, #24]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	7c12      	ldrb	r2, [r2, #16]
 8009b80:	f107 0108 	add.w	r1, r7, #8
 8009b84:	4610      	mov	r0, r2
 8009b86:	4798      	blx	r3
 8009b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b8a:	e00f      	b.n	8009bac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fa49 	bl	800a026 <USBD_CtlError>
            err++;
 8009b94:	7afb      	ldrb	r3, [r7, #11]
 8009b96:	3301      	adds	r3, #1
 8009b98:	72fb      	strb	r3, [r7, #11]
          break;
 8009b9a:	e007      	b.n	8009bac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fa41 	bl	800a026 <USBD_CtlError>
          err++;
 8009ba4:	7afb      	ldrb	r3, [r7, #11]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009baa:	bf00      	nop
      }
      break;
 8009bac:	e037      	b.n	8009c1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	7c1b      	ldrb	r3, [r3, #16]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d109      	bne.n	8009bca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bbe:	f107 0208 	add.w	r2, r7, #8
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	4798      	blx	r3
 8009bc6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bc8:	e029      	b.n	8009c1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009bca:	6839      	ldr	r1, [r7, #0]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 fa2a 	bl	800a026 <USBD_CtlError>
        err++;
 8009bd2:	7afb      	ldrb	r3, [r7, #11]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	72fb      	strb	r3, [r7, #11]
      break;
 8009bd8:	e021      	b.n	8009c1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	7c1b      	ldrb	r3, [r3, #16]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10d      	bne.n	8009bfe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bea:	f107 0208 	add.w	r2, r7, #8
 8009bee:	4610      	mov	r0, r2
 8009bf0:	4798      	blx	r3
 8009bf2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	2207      	movs	r2, #7
 8009bfa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bfc:	e00f      	b.n	8009c1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fa10 	bl	800a026 <USBD_CtlError>
        err++;
 8009c06:	7afb      	ldrb	r3, [r7, #11]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c0c:	e007      	b.n	8009c1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fa08 	bl	800a026 <USBD_CtlError>
      err++;
 8009c16:	7afb      	ldrb	r3, [r7, #11]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c1c:	bf00      	nop
  }

  if (err != 0U)
 8009c1e:	7afb      	ldrb	r3, [r7, #11]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d11e      	bne.n	8009c62 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	88db      	ldrh	r3, [r3, #6]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d016      	beq.n	8009c5a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009c2c:	893b      	ldrh	r3, [r7, #8]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00e      	beq.n	8009c50 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	88da      	ldrh	r2, [r3, #6]
 8009c36:	893b      	ldrh	r3, [r7, #8]
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	bf28      	it	cs
 8009c3c:	4613      	movcs	r3, r2
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c42:	893b      	ldrh	r3, [r7, #8]
 8009c44:	461a      	mov	r2, r3
 8009c46:	68f9      	ldr	r1, [r7, #12]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fa5d 	bl	800a108 <USBD_CtlSendData>
 8009c4e:	e009      	b.n	8009c64 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f9e7 	bl	800a026 <USBD_CtlError>
 8009c58:	e004      	b.n	8009c64 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 faae 	bl	800a1bc <USBD_CtlSendStatus>
 8009c60:	e000      	b.n	8009c64 <USBD_GetDescriptor+0x2cc>
    return;
 8009c62:	bf00      	nop
  }
}
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop

08009c6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	889b      	ldrh	r3, [r3, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d131      	bne.n	8009ce2 <USBD_SetAddress+0x76>
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	88db      	ldrh	r3, [r3, #6]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d12d      	bne.n	8009ce2 <USBD_SetAddress+0x76>
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	885b      	ldrh	r3, [r3, #2]
 8009c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8009c8c:	d829      	bhi.n	8009ce2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	885b      	ldrh	r3, [r3, #2]
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b03      	cmp	r3, #3
 8009ca4:	d104      	bne.n	8009cb0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 f9bc 	bl	800a026 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cae:	e01d      	b.n	8009cec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	7bfa      	ldrb	r2, [r7, #15]
 8009cb4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
 8009cba:	4619      	mov	r1, r3
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fefb 	bl	800aab8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fa7a 	bl	800a1bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d004      	beq.n	8009cd8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cd6:	e009      	b.n	8009cec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ce0:	e004      	b.n	8009cec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f99e 	bl	800a026 <USBD_CtlError>
  }
}
 8009cea:	bf00      	nop
 8009cec:	bf00      	nop
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	885b      	ldrh	r3, [r3, #2]
 8009d06:	b2da      	uxtb	r2, r3
 8009d08:	4b4e      	ldr	r3, [pc, #312]	; (8009e44 <USBD_SetConfig+0x150>)
 8009d0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d0c:	4b4d      	ldr	r3, [pc, #308]	; (8009e44 <USBD_SetConfig+0x150>)
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d905      	bls.n	8009d20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f985 	bl	800a026 <USBD_CtlError>
    return USBD_FAIL;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e08c      	b.n	8009e3a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d002      	beq.n	8009d32 <USBD_SetConfig+0x3e>
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d029      	beq.n	8009d84 <USBD_SetConfig+0x90>
 8009d30:	e075      	b.n	8009e1e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009d32:	4b44      	ldr	r3, [pc, #272]	; (8009e44 <USBD_SetConfig+0x150>)
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d020      	beq.n	8009d7c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009d3a:	4b42      	ldr	r3, [pc, #264]	; (8009e44 <USBD_SetConfig+0x150>)
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d44:	4b3f      	ldr	r3, [pc, #252]	; (8009e44 <USBD_SetConfig+0x150>)
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7fe ffe7 	bl	8008d1e <USBD_SetClassConfig>
 8009d50:	4603      	mov	r3, r0
 8009d52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d008      	beq.n	8009d6c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f962 	bl	800a026 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2202      	movs	r2, #2
 8009d66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d6a:	e065      	b.n	8009e38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fa25 	bl	800a1bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2203      	movs	r2, #3
 8009d76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d7a:	e05d      	b.n	8009e38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fa1d 	bl	800a1bc <USBD_CtlSendStatus>
      break;
 8009d82:	e059      	b.n	8009e38 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009d84:	4b2f      	ldr	r3, [pc, #188]	; (8009e44 <USBD_SetConfig+0x150>)
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d112      	bne.n	8009db2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2202      	movs	r2, #2
 8009d90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009d94:	4b2b      	ldr	r3, [pc, #172]	; (8009e44 <USBD_SetConfig+0x150>)
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d9e:	4b29      	ldr	r3, [pc, #164]	; (8009e44 <USBD_SetConfig+0x150>)
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f7fe ffd6 	bl	8008d56 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fa06 	bl	800a1bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009db0:	e042      	b.n	8009e38 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009db2:	4b24      	ldr	r3, [pc, #144]	; (8009e44 <USBD_SetConfig+0x150>)
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	461a      	mov	r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d02a      	beq.n	8009e16 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f7fe ffc4 	bl	8008d56 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009dce:	4b1d      	ldr	r3, [pc, #116]	; (8009e44 <USBD_SetConfig+0x150>)
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009dd8:	4b1a      	ldr	r3, [pc, #104]	; (8009e44 <USBD_SetConfig+0x150>)
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7fe ff9d 	bl	8008d1e <USBD_SetClassConfig>
 8009de4:	4603      	mov	r3, r0
 8009de6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00f      	beq.n	8009e0e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 f918 	bl	800a026 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7fe ffa9 	bl	8008d56 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2202      	movs	r2, #2
 8009e08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e0c:	e014      	b.n	8009e38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f9d4 	bl	800a1bc <USBD_CtlSendStatus>
      break;
 8009e14:	e010      	b.n	8009e38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f9d0 	bl	800a1bc <USBD_CtlSendStatus>
      break;
 8009e1c:	e00c      	b.n	8009e38 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009e1e:	6839      	ldr	r1, [r7, #0]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 f900 	bl	800a026 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e26:	4b07      	ldr	r3, [pc, #28]	; (8009e44 <USBD_SetConfig+0x150>)
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f7fe ff92 	bl	8008d56 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009e32:	2303      	movs	r3, #3
 8009e34:	73fb      	strb	r3, [r7, #15]
      break;
 8009e36:	bf00      	nop
  }

  return ret;
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	20000568 	.word	0x20000568

08009e48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	88db      	ldrh	r3, [r3, #6]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d004      	beq.n	8009e64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f8e2 	bl	800a026 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e62:	e023      	b.n	8009eac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	dc02      	bgt.n	8009e76 <USBD_GetConfig+0x2e>
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	dc03      	bgt.n	8009e7c <USBD_GetConfig+0x34>
 8009e74:	e015      	b.n	8009ea2 <USBD_GetConfig+0x5a>
 8009e76:	2b03      	cmp	r3, #3
 8009e78:	d00b      	beq.n	8009e92 <USBD_GetConfig+0x4a>
 8009e7a:	e012      	b.n	8009ea2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	3308      	adds	r3, #8
 8009e86:	2201      	movs	r2, #1
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 f93c 	bl	800a108 <USBD_CtlSendData>
        break;
 8009e90:	e00c      	b.n	8009eac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	3304      	adds	r3, #4
 8009e96:	2201      	movs	r2, #1
 8009e98:	4619      	mov	r1, r3
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f934 	bl	800a108 <USBD_CtlSendData>
        break;
 8009ea0:	e004      	b.n	8009eac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f8be 	bl	800a026 <USBD_CtlError>
        break;
 8009eaa:	bf00      	nop
}
 8009eac:	bf00      	nop
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d81e      	bhi.n	8009f0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	88db      	ldrh	r3, [r3, #6]
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d004      	beq.n	8009ede <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f8a5 	bl	800a026 <USBD_CtlError>
        break;
 8009edc:	e01a      	b.n	8009f14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d005      	beq.n	8009efa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	f043 0202 	orr.w	r2, r3, #2
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	330c      	adds	r3, #12
 8009efe:	2202      	movs	r2, #2
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f900 	bl	800a108 <USBD_CtlSendData>
      break;
 8009f08:	e004      	b.n	8009f14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f88a 	bl	800a026 <USBD_CtlError>
      break;
 8009f12:	bf00      	nop
  }
}
 8009f14:	bf00      	nop
 8009f16:	3708      	adds	r7, #8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	885b      	ldrh	r3, [r3, #2]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d107      	bne.n	8009f3e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f940 	bl	800a1bc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009f3c:	e013      	b.n	8009f66 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	885b      	ldrh	r3, [r3, #2]
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d10b      	bne.n	8009f5e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	889b      	ldrh	r3, [r3, #4]
 8009f4a:	0a1b      	lsrs	r3, r3, #8
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f930 	bl	800a1bc <USBD_CtlSendStatus>
}
 8009f5c:	e003      	b.n	8009f66 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009f5e:	6839      	ldr	r1, [r7, #0]
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f860 	bl	800a026 <USBD_CtlError>
}
 8009f66:	bf00      	nop
 8009f68:	3708      	adds	r7, #8
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b082      	sub	sp, #8
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	3b01      	subs	r3, #1
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d80b      	bhi.n	8009f9e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	885b      	ldrh	r3, [r3, #2]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d10c      	bne.n	8009fa8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f910 	bl	800a1bc <USBD_CtlSendStatus>
      }
      break;
 8009f9c:	e004      	b.n	8009fa8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f840 	bl	800a026 <USBD_CtlError>
      break;
 8009fa6:	e000      	b.n	8009faa <USBD_ClrFeature+0x3c>
      break;
 8009fa8:	bf00      	nop
  }
}
 8009faa:	bf00      	nop
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
 8009fba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	781a      	ldrb	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	781a      	ldrb	r2, [r3, #0]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f7ff fa41 	bl	8009464 <SWAPBYTE>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	3301      	adds	r3, #1
 8009fee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f7ff fa34 	bl	8009464 <SWAPBYTE>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	461a      	mov	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	3301      	adds	r3, #1
 800a008:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	3301      	adds	r3, #1
 800a00e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f7ff fa27 	bl	8009464 <SWAPBYTE>
 800a016:	4603      	mov	r3, r0
 800a018:	461a      	mov	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	80da      	strh	r2, [r3, #6]
}
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b082      	sub	sp, #8
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a030:	2180      	movs	r1, #128	; 0x80
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fcd6 	bl	800a9e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a038:	2100      	movs	r1, #0
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fcd2 	bl	800a9e4 <USBD_LL_StallEP>
}
 800a040:	bf00      	nop
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b086      	sub	sp, #24
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a054:	2300      	movs	r3, #0
 800a056:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d036      	beq.n	800a0cc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a062:	6938      	ldr	r0, [r7, #16]
 800a064:	f000 f836 	bl	800a0d4 <USBD_GetLen>
 800a068:	4603      	mov	r3, r0
 800a06a:	3301      	adds	r3, #1
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	005b      	lsls	r3, r3, #1
 800a070:	b29a      	uxth	r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a076:	7dfb      	ldrb	r3, [r7, #23]
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	4413      	add	r3, r2
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	7812      	ldrb	r2, [r2, #0]
 800a080:	701a      	strb	r2, [r3, #0]
  idx++;
 800a082:	7dfb      	ldrb	r3, [r7, #23]
 800a084:	3301      	adds	r3, #1
 800a086:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a088:	7dfb      	ldrb	r3, [r7, #23]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	4413      	add	r3, r2
 800a08e:	2203      	movs	r2, #3
 800a090:	701a      	strb	r2, [r3, #0]
  idx++;
 800a092:	7dfb      	ldrb	r3, [r7, #23]
 800a094:	3301      	adds	r3, #1
 800a096:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a098:	e013      	b.n	800a0c2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a09a:	7dfb      	ldrb	r3, [r7, #23]
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	4413      	add	r3, r2
 800a0a0:	693a      	ldr	r2, [r7, #16]
 800a0a2:	7812      	ldrb	r2, [r2, #0]
 800a0a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	613b      	str	r3, [r7, #16]
    idx++;
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a0b2:	7dfb      	ldrb	r3, [r7, #23]
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	701a      	strb	r2, [r3, #0]
    idx++;
 800a0bc:	7dfb      	ldrb	r3, [r7, #23]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1e7      	bne.n	800a09a <USBD_GetString+0x52>
 800a0ca:	e000      	b.n	800a0ce <USBD_GetString+0x86>
    return;
 800a0cc:	bf00      	nop
  }
}
 800a0ce:	3718      	adds	r7, #24
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a0e4:	e005      	b.n	800a0f2 <USBD_GetLen+0x1e>
  {
    len++;
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1f5      	bne.n	800a0e6 <USBD_GetLen+0x12>
  }

  return len;
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3714      	adds	r7, #20
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2202      	movs	r2, #2
 800a118:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	2100      	movs	r1, #0
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f000 fce1 	bl	800aaf6 <USBD_LL_Transmit>

  return USBD_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b084      	sub	sp, #16
 800a142:	af00      	add	r7, sp, #0
 800a144:	60f8      	str	r0, [r7, #12]
 800a146:	60b9      	str	r1, [r7, #8]
 800a148:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	2100      	movs	r1, #0
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f000 fcd0 	bl	800aaf6 <USBD_LL_Transmit>

  return USBD_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2203      	movs	r2, #3
 800a170:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	2100      	movs	r1, #0
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f000 fcd4 	bl	800ab38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b084      	sub	sp, #16
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	60f8      	str	r0, [r7, #12]
 800a1a2:	60b9      	str	r1, [r7, #8]
 800a1a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 fcc3 	bl	800ab38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2204      	movs	r2, #4
 800a1c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fc8f 	bl	800aaf6 <USBD_LL_Transmit>

  return USBD_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b082      	sub	sp, #8
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2205      	movs	r2, #5
 800a1ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fc9d 	bl	800ab38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a20c:	2200      	movs	r2, #0
 800a20e:	4912      	ldr	r1, [pc, #72]	; (800a258 <MX_USB_DEVICE_Init+0x50>)
 800a210:	4812      	ldr	r0, [pc, #72]	; (800a25c <MX_USB_DEVICE_Init+0x54>)
 800a212:	f7fe fd07 	bl	8008c24 <USBD_Init>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d001      	beq.n	800a220 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a21c:	f7f7 faa6 	bl	800176c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a220:	490f      	ldr	r1, [pc, #60]	; (800a260 <MX_USB_DEVICE_Init+0x58>)
 800a222:	480e      	ldr	r0, [pc, #56]	; (800a25c <MX_USB_DEVICE_Init+0x54>)
 800a224:	f7fe fd2e 	bl	8008c84 <USBD_RegisterClass>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d001      	beq.n	800a232 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a22e:	f7f7 fa9d 	bl	800176c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a232:	490c      	ldr	r1, [pc, #48]	; (800a264 <MX_USB_DEVICE_Init+0x5c>)
 800a234:	4809      	ldr	r0, [pc, #36]	; (800a25c <MX_USB_DEVICE_Init+0x54>)
 800a236:	f7fe fc1f 	bl	8008a78 <USBD_CDC_RegisterInterface>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a240:	f7f7 fa94 	bl	800176c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a244:	4805      	ldr	r0, [pc, #20]	; (800a25c <MX_USB_DEVICE_Init+0x54>)
 800a246:	f7fe fd53 	bl	8008cf0 <USBD_Start>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a250:	f7f7 fa8c 	bl	800176c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a254:	bf00      	nop
 800a256:	bd80      	pop	{r7, pc}
 800a258:	200000d0 	.word	0x200000d0
 800a25c:	2000056c 	.word	0x2000056c
 800a260:	2000003c 	.word	0x2000003c
 800a264:	200000bc 	.word	0x200000bc

0800a268 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a26c:	2200      	movs	r2, #0
 800a26e:	4905      	ldr	r1, [pc, #20]	; (800a284 <CDC_Init_FS+0x1c>)
 800a270:	4805      	ldr	r0, [pc, #20]	; (800a288 <CDC_Init_FS+0x20>)
 800a272:	f7fe fc1b 	bl	8008aac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a276:	4905      	ldr	r1, [pc, #20]	; (800a28c <CDC_Init_FS+0x24>)
 800a278:	4803      	ldr	r0, [pc, #12]	; (800a288 <CDC_Init_FS+0x20>)
 800a27a:	f7fe fc39 	bl	8008af0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a27e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a280:	4618      	mov	r0, r3
 800a282:	bd80      	pop	{r7, pc}
 800a284:	20001048 	.word	0x20001048
 800a288:	2000056c 	.word	0x2000056c
 800a28c:	20000848 	.word	0x20000848

0800a290 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a290:	b480      	push	{r7}
 800a292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a294:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a296:	4618      	mov	r0, r3
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	6039      	str	r1, [r7, #0]
 800a2aa:	71fb      	strb	r3, [r7, #7]
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a2b0:	79fb      	ldrb	r3, [r7, #7]
 800a2b2:	2b23      	cmp	r3, #35	; 0x23
 800a2b4:	d84a      	bhi.n	800a34c <CDC_Control_FS+0xac>
 800a2b6:	a201      	add	r2, pc, #4	; (adr r2, 800a2bc <CDC_Control_FS+0x1c>)
 800a2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2bc:	0800a34d 	.word	0x0800a34d
 800a2c0:	0800a34d 	.word	0x0800a34d
 800a2c4:	0800a34d 	.word	0x0800a34d
 800a2c8:	0800a34d 	.word	0x0800a34d
 800a2cc:	0800a34d 	.word	0x0800a34d
 800a2d0:	0800a34d 	.word	0x0800a34d
 800a2d4:	0800a34d 	.word	0x0800a34d
 800a2d8:	0800a34d 	.word	0x0800a34d
 800a2dc:	0800a34d 	.word	0x0800a34d
 800a2e0:	0800a34d 	.word	0x0800a34d
 800a2e4:	0800a34d 	.word	0x0800a34d
 800a2e8:	0800a34d 	.word	0x0800a34d
 800a2ec:	0800a34d 	.word	0x0800a34d
 800a2f0:	0800a34d 	.word	0x0800a34d
 800a2f4:	0800a34d 	.word	0x0800a34d
 800a2f8:	0800a34d 	.word	0x0800a34d
 800a2fc:	0800a34d 	.word	0x0800a34d
 800a300:	0800a34d 	.word	0x0800a34d
 800a304:	0800a34d 	.word	0x0800a34d
 800a308:	0800a34d 	.word	0x0800a34d
 800a30c:	0800a34d 	.word	0x0800a34d
 800a310:	0800a34d 	.word	0x0800a34d
 800a314:	0800a34d 	.word	0x0800a34d
 800a318:	0800a34d 	.word	0x0800a34d
 800a31c:	0800a34d 	.word	0x0800a34d
 800a320:	0800a34d 	.word	0x0800a34d
 800a324:	0800a34d 	.word	0x0800a34d
 800a328:	0800a34d 	.word	0x0800a34d
 800a32c:	0800a34d 	.word	0x0800a34d
 800a330:	0800a34d 	.word	0x0800a34d
 800a334:	0800a34d 	.word	0x0800a34d
 800a338:	0800a34d 	.word	0x0800a34d
 800a33c:	0800a34d 	.word	0x0800a34d
 800a340:	0800a34d 	.word	0x0800a34d
 800a344:	0800a34d 	.word	0x0800a34d
 800a348:	0800a34d 	.word	0x0800a34d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a34c:	bf00      	nop
  }

  return (USBD_OK);
 800a34e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a350:	4618      	mov	r0, r3
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a366:	6879      	ldr	r1, [r7, #4]
 800a368:	4805      	ldr	r0, [pc, #20]	; (800a380 <CDC_Receive_FS+0x24>)
 800a36a:	f7fe fbc1 	bl	8008af0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a36e:	4804      	ldr	r0, [pc, #16]	; (800a380 <CDC_Receive_FS+0x24>)
 800a370:	f7fe fc22 	bl	8008bb8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a374:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a376:	4618      	mov	r0, r3
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	2000056c 	.word	0x2000056c

0800a384 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	460b      	mov	r3, r1
 800a38e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a394:	4b0d      	ldr	r3, [pc, #52]	; (800a3cc <CDC_Transmit_FS+0x48>)
 800a396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a39a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e00b      	b.n	800a3c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a3aa:	887b      	ldrh	r3, [r7, #2]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	6879      	ldr	r1, [r7, #4]
 800a3b0:	4806      	ldr	r0, [pc, #24]	; (800a3cc <CDC_Transmit_FS+0x48>)
 800a3b2:	f7fe fb7b 	bl	8008aac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a3b6:	4805      	ldr	r0, [pc, #20]	; (800a3cc <CDC_Transmit_FS+0x48>)
 800a3b8:	f7fe fbb8 	bl	8008b2c <USBD_CDC_TransmitPacket>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	2000056c 	.word	0x2000056c

0800a3d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b087      	sub	sp, #28
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a3e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	371c      	adds	r7, #28
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
	...

0800a3f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	6039      	str	r1, [r7, #0]
 800a3fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	2212      	movs	r2, #18
 800a404:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a406:	4b03      	ldr	r3, [pc, #12]	; (800a414 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a408:	4618      	mov	r0, r3
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr
 800a414:	200000ec 	.word	0x200000ec

0800a418 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	4603      	mov	r3, r0
 800a420:	6039      	str	r1, [r7, #0]
 800a422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	2204      	movs	r2, #4
 800a428:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a42a:	4b03      	ldr	r3, [pc, #12]	; (800a438 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	20000100 	.word	0x20000100

0800a43c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	4603      	mov	r3, r0
 800a444:	6039      	str	r1, [r7, #0]
 800a446:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a448:	79fb      	ldrb	r3, [r7, #7]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d105      	bne.n	800a45a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	4907      	ldr	r1, [pc, #28]	; (800a470 <USBD_FS_ProductStrDescriptor+0x34>)
 800a452:	4808      	ldr	r0, [pc, #32]	; (800a474 <USBD_FS_ProductStrDescriptor+0x38>)
 800a454:	f7ff fdf8 	bl	800a048 <USBD_GetString>
 800a458:	e004      	b.n	800a464 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	4904      	ldr	r1, [pc, #16]	; (800a470 <USBD_FS_ProductStrDescriptor+0x34>)
 800a45e:	4805      	ldr	r0, [pc, #20]	; (800a474 <USBD_FS_ProductStrDescriptor+0x38>)
 800a460:	f7ff fdf2 	bl	800a048 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a464:	4b02      	ldr	r3, [pc, #8]	; (800a470 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a466:	4618      	mov	r0, r3
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	20001848 	.word	0x20001848
 800a474:	0800d988 	.word	0x0800d988

0800a478 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	4603      	mov	r3, r0
 800a480:	6039      	str	r1, [r7, #0]
 800a482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	4904      	ldr	r1, [pc, #16]	; (800a498 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a488:	4804      	ldr	r0, [pc, #16]	; (800a49c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a48a:	f7ff fddd 	bl	800a048 <USBD_GetString>
  return USBD_StrDesc;
 800a48e:	4b02      	ldr	r3, [pc, #8]	; (800a498 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a490:	4618      	mov	r0, r3
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	20001848 	.word	0x20001848
 800a49c:	0800d9a0 	.word	0x0800d9a0

0800a4a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	6039      	str	r1, [r7, #0]
 800a4aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	221a      	movs	r2, #26
 800a4b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a4b2:	f000 f843 	bl	800a53c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a4b6:	4b02      	ldr	r3, [pc, #8]	; (800a4c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	20000104 	.word	0x20000104

0800a4c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	6039      	str	r1, [r7, #0]
 800a4ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a4d0:	79fb      	ldrb	r3, [r7, #7]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d105      	bne.n	800a4e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	4907      	ldr	r1, [pc, #28]	; (800a4f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4da:	4808      	ldr	r0, [pc, #32]	; (800a4fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4dc:	f7ff fdb4 	bl	800a048 <USBD_GetString>
 800a4e0:	e004      	b.n	800a4ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4e2:	683a      	ldr	r2, [r7, #0]
 800a4e4:	4904      	ldr	r1, [pc, #16]	; (800a4f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4e6:	4805      	ldr	r0, [pc, #20]	; (800a4fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4e8:	f7ff fdae 	bl	800a048 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4ec:	4b02      	ldr	r3, [pc, #8]	; (800a4f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20001848 	.word	0x20001848
 800a4fc:	0800d9b4 	.word	0x0800d9b4

0800a500 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	4603      	mov	r3, r0
 800a508:	6039      	str	r1, [r7, #0]
 800a50a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a50c:	79fb      	ldrb	r3, [r7, #7]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d105      	bne.n	800a51e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	4907      	ldr	r1, [pc, #28]	; (800a534 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a516:	4808      	ldr	r0, [pc, #32]	; (800a538 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a518:	f7ff fd96 	bl	800a048 <USBD_GetString>
 800a51c:	e004      	b.n	800a528 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	4904      	ldr	r1, [pc, #16]	; (800a534 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a522:	4805      	ldr	r0, [pc, #20]	; (800a538 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a524:	f7ff fd90 	bl	800a048 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a528:	4b02      	ldr	r3, [pc, #8]	; (800a534 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	20001848 	.word	0x20001848
 800a538:	0800d9c0 	.word	0x0800d9c0

0800a53c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a542:	4b0f      	ldr	r3, [pc, #60]	; (800a580 <Get_SerialNum+0x44>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a548:	4b0e      	ldr	r3, [pc, #56]	; (800a584 <Get_SerialNum+0x48>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a54e:	4b0e      	ldr	r3, [pc, #56]	; (800a588 <Get_SerialNum+0x4c>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4413      	add	r3, r2
 800a55a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d009      	beq.n	800a576 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a562:	2208      	movs	r2, #8
 800a564:	4909      	ldr	r1, [pc, #36]	; (800a58c <Get_SerialNum+0x50>)
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f000 f814 	bl	800a594 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a56c:	2204      	movs	r2, #4
 800a56e:	4908      	ldr	r1, [pc, #32]	; (800a590 <Get_SerialNum+0x54>)
 800a570:	68b8      	ldr	r0, [r7, #8]
 800a572:	f000 f80f 	bl	800a594 <IntToUnicode>
  }
}
 800a576:	bf00      	nop
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	1fff7a10 	.word	0x1fff7a10
 800a584:	1fff7a14 	.word	0x1fff7a14
 800a588:	1fff7a18 	.word	0x1fff7a18
 800a58c:	20000106 	.word	0x20000106
 800a590:	20000116 	.word	0x20000116

0800a594 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a594:	b480      	push	{r7}
 800a596:	b087      	sub	sp, #28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	75fb      	strb	r3, [r7, #23]
 800a5aa:	e027      	b.n	800a5fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	0f1b      	lsrs	r3, r3, #28
 800a5b0:	2b09      	cmp	r3, #9
 800a5b2:	d80b      	bhi.n	800a5cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	0f1b      	lsrs	r3, r3, #28
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	005b      	lsls	r3, r3, #1
 800a5be:	4619      	mov	r1, r3
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	440b      	add	r3, r1
 800a5c4:	3230      	adds	r2, #48	; 0x30
 800a5c6:	b2d2      	uxtb	r2, r2
 800a5c8:	701a      	strb	r2, [r3, #0]
 800a5ca:	e00a      	b.n	800a5e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	0f1b      	lsrs	r3, r3, #28
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
 800a5d4:	005b      	lsls	r3, r3, #1
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	440b      	add	r3, r1
 800a5dc:	3237      	adds	r2, #55	; 0x37
 800a5de:	b2d2      	uxtb	r2, r2
 800a5e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	011b      	lsls	r3, r3, #4
 800a5e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a5e8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ea:	005b      	lsls	r3, r3, #1
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a5f6:	7dfb      	ldrb	r3, [r7, #23]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	75fb      	strb	r3, [r7, #23]
 800a5fc:	7dfa      	ldrb	r2, [r7, #23]
 800a5fe:	79fb      	ldrb	r3, [r7, #7]
 800a600:	429a      	cmp	r2, r3
 800a602:	d3d3      	bcc.n	800a5ac <IntToUnicode+0x18>
  }
}
 800a604:	bf00      	nop
 800a606:	bf00      	nop
 800a608:	371c      	adds	r7, #28
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
	...

0800a614 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b08a      	sub	sp, #40	; 0x28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a61c:	f107 0314 	add.w	r3, r7, #20
 800a620:	2200      	movs	r2, #0
 800a622:	601a      	str	r2, [r3, #0]
 800a624:	605a      	str	r2, [r3, #4]
 800a626:	609a      	str	r2, [r3, #8]
 800a628:	60da      	str	r2, [r3, #12]
 800a62a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a634:	d13a      	bne.n	800a6ac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a636:	2300      	movs	r3, #0
 800a638:	613b      	str	r3, [r7, #16]
 800a63a:	4b1e      	ldr	r3, [pc, #120]	; (800a6b4 <HAL_PCD_MspInit+0xa0>)
 800a63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a63e:	4a1d      	ldr	r2, [pc, #116]	; (800a6b4 <HAL_PCD_MspInit+0xa0>)
 800a640:	f043 0301 	orr.w	r3, r3, #1
 800a644:	6313      	str	r3, [r2, #48]	; 0x30
 800a646:	4b1b      	ldr	r3, [pc, #108]	; (800a6b4 <HAL_PCD_MspInit+0xa0>)
 800a648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64a:	f003 0301 	and.w	r3, r3, #1
 800a64e:	613b      	str	r3, [r7, #16]
 800a650:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a652:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a658:	2302      	movs	r3, #2
 800a65a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a65c:	2300      	movs	r3, #0
 800a65e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a660:	2303      	movs	r3, #3
 800a662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a664:	230a      	movs	r3, #10
 800a666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a668:	f107 0314 	add.w	r3, r7, #20
 800a66c:	4619      	mov	r1, r3
 800a66e:	4812      	ldr	r0, [pc, #72]	; (800a6b8 <HAL_PCD_MspInit+0xa4>)
 800a670:	f7f8 fa22 	bl	8002ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a674:	4b0f      	ldr	r3, [pc, #60]	; (800a6b4 <HAL_PCD_MspInit+0xa0>)
 800a676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a678:	4a0e      	ldr	r2, [pc, #56]	; (800a6b4 <HAL_PCD_MspInit+0xa0>)
 800a67a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a67e:	6353      	str	r3, [r2, #52]	; 0x34
 800a680:	2300      	movs	r3, #0
 800a682:	60fb      	str	r3, [r7, #12]
 800a684:	4b0b      	ldr	r3, [pc, #44]	; (800a6b4 <HAL_PCD_MspInit+0xa0>)
 800a686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a688:	4a0a      	ldr	r2, [pc, #40]	; (800a6b4 <HAL_PCD_MspInit+0xa0>)
 800a68a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a68e:	6453      	str	r3, [r2, #68]	; 0x44
 800a690:	4b08      	ldr	r3, [pc, #32]	; (800a6b4 <HAL_PCD_MspInit+0xa0>)
 800a692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a698:	60fb      	str	r3, [r7, #12]
 800a69a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a69c:	2200      	movs	r2, #0
 800a69e:	2100      	movs	r1, #0
 800a6a0:	2043      	movs	r0, #67	; 0x43
 800a6a2:	f7f8 f9d2 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a6a6:	2043      	movs	r0, #67	; 0x43
 800a6a8:	f7f8 f9eb 	bl	8002a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a6ac:	bf00      	nop
 800a6ae:	3728      	adds	r7, #40	; 0x28
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	40023800 	.word	0x40023800
 800a6b8:	40020000 	.word	0x40020000

0800a6bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	4610      	mov	r0, r2
 800a6d4:	f7fe fb59 	bl	8008d8a <USBD_LL_SetupStage>
}
 800a6d8:	bf00      	nop
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a6f2:	78fa      	ldrb	r2, [r7, #3]
 800a6f4:	6879      	ldr	r1, [r7, #4]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	00db      	lsls	r3, r3, #3
 800a6fa:	4413      	add	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	440b      	add	r3, r1
 800a700:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	78fb      	ldrb	r3, [r7, #3]
 800a708:	4619      	mov	r1, r3
 800a70a:	f7fe fb93 	bl	8008e34 <USBD_LL_DataOutStage>
}
 800a70e:	bf00      	nop
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b082      	sub	sp, #8
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	460b      	mov	r3, r1
 800a720:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a728:	78fa      	ldrb	r2, [r7, #3]
 800a72a:	6879      	ldr	r1, [r7, #4]
 800a72c:	4613      	mov	r3, r2
 800a72e:	00db      	lsls	r3, r3, #3
 800a730:	4413      	add	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	440b      	add	r3, r1
 800a736:	334c      	adds	r3, #76	; 0x4c
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	78fb      	ldrb	r3, [r7, #3]
 800a73c:	4619      	mov	r1, r3
 800a73e:	f7fe fc2c 	bl	8008f9a <USBD_LL_DataInStage>
}
 800a742:	bf00      	nop
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b082      	sub	sp, #8
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a758:	4618      	mov	r0, r3
 800a75a:	f7fe fd60 	bl	800921e <USBD_LL_SOF>
}
 800a75e:	bf00      	nop
 800a760:	3708      	adds	r7, #8
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b084      	sub	sp, #16
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a76e:	2301      	movs	r3, #1
 800a770:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	2b02      	cmp	r3, #2
 800a778:	d001      	beq.n	800a77e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a77a:	f7f6 fff7 	bl	800176c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a784:	7bfa      	ldrb	r2, [r7, #15]
 800a786:	4611      	mov	r1, r2
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fe fd0a 	bl	80091a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a794:	4618      	mov	r0, r3
 800a796:	f7fe fcb2 	bl	80090fe <USBD_LL_Reset>
}
 800a79a:	bf00      	nop
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
	...

0800a7a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fe fd05 	bl	80091c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	6812      	ldr	r2, [r2, #0]
 800a7c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a7ca:	f043 0301 	orr.w	r3, r3, #1
 800a7ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a1b      	ldr	r3, [r3, #32]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d005      	beq.n	800a7e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7d8:	4b04      	ldr	r3, [pc, #16]	; (800a7ec <HAL_PCD_SuspendCallback+0x48>)
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	4a03      	ldr	r2, [pc, #12]	; (800a7ec <HAL_PCD_SuspendCallback+0x48>)
 800a7de:	f043 0306 	orr.w	r3, r3, #6
 800a7e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a7e4:	bf00      	nop
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	e000ed00 	.word	0xe000ed00

0800a7f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fe fcf5 	bl	80091ee <USBD_LL_Resume>
}
 800a804:	bf00      	nop
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a81e:	78fa      	ldrb	r2, [r7, #3]
 800a820:	4611      	mov	r1, r2
 800a822:	4618      	mov	r0, r3
 800a824:	f7fe fd4d 	bl	80092c2 <USBD_LL_IsoOUTIncomplete>
}
 800a828:	bf00      	nop
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	460b      	mov	r3, r1
 800a83a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a842:	78fa      	ldrb	r2, [r7, #3]
 800a844:	4611      	mov	r1, r2
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe fd09 	bl	800925e <USBD_LL_IsoINIncomplete>
}
 800a84c:	bf00      	nop
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a862:	4618      	mov	r0, r3
 800a864:	f7fe fd5f 	bl	8009326 <USBD_LL_DevConnected>
}
 800a868:	bf00      	nop
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fe fd5c 	bl	800933c <USBD_LL_DevDisconnected>
}
 800a884:	bf00      	nop
 800a886:	3708      	adds	r7, #8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d13c      	bne.n	800a916 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a89c:	4a20      	ldr	r2, [pc, #128]	; (800a920 <USBD_LL_Init+0x94>)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a1e      	ldr	r2, [pc, #120]	; (800a920 <USBD_LL_Init+0x94>)
 800a8a8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a8ac:	4b1c      	ldr	r3, [pc, #112]	; (800a920 <USBD_LL_Init+0x94>)
 800a8ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a8b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a8b4:	4b1a      	ldr	r3, [pc, #104]	; (800a920 <USBD_LL_Init+0x94>)
 800a8b6:	2204      	movs	r2, #4
 800a8b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a8ba:	4b19      	ldr	r3, [pc, #100]	; (800a920 <USBD_LL_Init+0x94>)
 800a8bc:	2202      	movs	r2, #2
 800a8be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a8c0:	4b17      	ldr	r3, [pc, #92]	; (800a920 <USBD_LL_Init+0x94>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a8c6:	4b16      	ldr	r3, [pc, #88]	; (800a920 <USBD_LL_Init+0x94>)
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a8cc:	4b14      	ldr	r3, [pc, #80]	; (800a920 <USBD_LL_Init+0x94>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a8d2:	4b13      	ldr	r3, [pc, #76]	; (800a920 <USBD_LL_Init+0x94>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a8d8:	4b11      	ldr	r3, [pc, #68]	; (800a920 <USBD_LL_Init+0x94>)
 800a8da:	2200      	movs	r2, #0
 800a8dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a8de:	4b10      	ldr	r3, [pc, #64]	; (800a920 <USBD_LL_Init+0x94>)
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a8e4:	4b0e      	ldr	r3, [pc, #56]	; (800a920 <USBD_LL_Init+0x94>)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a8ea:	480d      	ldr	r0, [pc, #52]	; (800a920 <USBD_LL_Init+0x94>)
 800a8ec:	f7f8 fbc6 	bl	800307c <HAL_PCD_Init>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d001      	beq.n	800a8fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a8f6:	f7f6 ff39 	bl	800176c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a8fa:	2180      	movs	r1, #128	; 0x80
 800a8fc:	4808      	ldr	r0, [pc, #32]	; (800a920 <USBD_LL_Init+0x94>)
 800a8fe:	f7f9 fe1e 	bl	800453e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a902:	2240      	movs	r2, #64	; 0x40
 800a904:	2100      	movs	r1, #0
 800a906:	4806      	ldr	r0, [pc, #24]	; (800a920 <USBD_LL_Init+0x94>)
 800a908:	f7f9 fdd2 	bl	80044b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a90c:	2280      	movs	r2, #128	; 0x80
 800a90e:	2101      	movs	r1, #1
 800a910:	4803      	ldr	r0, [pc, #12]	; (800a920 <USBD_LL_Init+0x94>)
 800a912:	f7f9 fdcd 	bl	80044b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	20001a48 	.word	0x20001a48

0800a924 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a930:	2300      	movs	r3, #0
 800a932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7f8 fcbb 	bl	80032b6 <HAL_PCD_Start>
 800a940:	4603      	mov	r3, r0
 800a942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a944:	7bfb      	ldrb	r3, [r7, #15]
 800a946:	4618      	mov	r0, r3
 800a948:	f000 f942 	bl	800abd0 <USBD_Get_USB_Status>
 800a94c:	4603      	mov	r3, r0
 800a94e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a950:	7bbb      	ldrb	r3, [r7, #14]
}
 800a952:	4618      	mov	r0, r3
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b084      	sub	sp, #16
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
 800a962:	4608      	mov	r0, r1
 800a964:	4611      	mov	r1, r2
 800a966:	461a      	mov	r2, r3
 800a968:	4603      	mov	r3, r0
 800a96a:	70fb      	strb	r3, [r7, #3]
 800a96c:	460b      	mov	r3, r1
 800a96e:	70bb      	strb	r3, [r7, #2]
 800a970:	4613      	mov	r3, r2
 800a972:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a982:	78bb      	ldrb	r3, [r7, #2]
 800a984:	883a      	ldrh	r2, [r7, #0]
 800a986:	78f9      	ldrb	r1, [r7, #3]
 800a988:	f7f9 f98c 	bl	8003ca4 <HAL_PCD_EP_Open>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	4618      	mov	r0, r3
 800a994:	f000 f91c 	bl	800abd0 <USBD_Get_USB_Status>
 800a998:	4603      	mov	r3, r0
 800a99a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a99c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b084      	sub	sp, #16
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9c0:	78fa      	ldrb	r2, [r7, #3]
 800a9c2:	4611      	mov	r1, r2
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7f9 f9d5 	bl	8003d74 <HAL_PCD_EP_Close>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ce:	7bfb      	ldrb	r3, [r7, #15]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f000 f8fd 	bl	800abd0 <USBD_Get_USB_Status>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9fe:	78fa      	ldrb	r2, [r7, #3]
 800aa00:	4611      	mov	r1, r2
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7f9 faad 	bl	8003f62 <HAL_PCD_EP_SetStall>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 f8de 	bl	800abd0 <USBD_Get_USB_Status>
 800aa14:	4603      	mov	r3, r0
 800aa16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa18:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b084      	sub	sp, #16
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa32:	2300      	movs	r3, #0
 800aa34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa3c:	78fa      	ldrb	r2, [r7, #3]
 800aa3e:	4611      	mov	r1, r2
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7f9 faf2 	bl	800402a <HAL_PCD_EP_ClrStall>
 800aa46:	4603      	mov	r3, r0
 800aa48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa4a:	7bfb      	ldrb	r3, [r7, #15]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f000 f8bf 	bl	800abd0 <USBD_Get_USB_Status>
 800aa52:	4603      	mov	r3, r0
 800aa54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa56:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	460b      	mov	r3, r1
 800aa6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	da0b      	bge.n	800aa94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa7c:	78fb      	ldrb	r3, [r7, #3]
 800aa7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa82:	68f9      	ldr	r1, [r7, #12]
 800aa84:	4613      	mov	r3, r2
 800aa86:	00db      	lsls	r3, r3, #3
 800aa88:	4413      	add	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	440b      	add	r3, r1
 800aa8e:	333e      	adds	r3, #62	; 0x3e
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	e00b      	b.n	800aaac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa94:	78fb      	ldrb	r3, [r7, #3]
 800aa96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa9a:	68f9      	ldr	r1, [r7, #12]
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	4413      	add	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	440b      	add	r3, r1
 800aaa6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800aaaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	460b      	mov	r3, r1
 800aac2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aac8:	2300      	movs	r3, #0
 800aaca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aad2:	78fa      	ldrb	r2, [r7, #3]
 800aad4:	4611      	mov	r1, r2
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7f9 f8bf 	bl	8003c5a <HAL_PCD_SetAddress>
 800aadc:	4603      	mov	r3, r0
 800aade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aae0:	7bfb      	ldrb	r3, [r7, #15]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 f874 	bl	800abd0 <USBD_Get_USB_Status>
 800aae8:	4603      	mov	r3, r0
 800aaea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaec:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b086      	sub	sp, #24
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	60f8      	str	r0, [r7, #12]
 800aafe:	607a      	str	r2, [r7, #4]
 800ab00:	603b      	str	r3, [r7, #0]
 800ab02:	460b      	mov	r3, r1
 800ab04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab06:	2300      	movs	r3, #0
 800ab08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ab14:	7af9      	ldrb	r1, [r7, #11]
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	f7f9 f9d8 	bl	8003ece <HAL_PCD_EP_Transmit>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 f853 	bl	800abd0 <USBD_Get_USB_Status>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab2e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3718      	adds	r7, #24
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b086      	sub	sp, #24
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	607a      	str	r2, [r7, #4]
 800ab42:	603b      	str	r3, [r7, #0]
 800ab44:	460b      	mov	r3, r1
 800ab46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ab56:	7af9      	ldrb	r1, [r7, #11]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	f7f9 f954 	bl	8003e08 <HAL_PCD_EP_Receive>
 800ab60:	4603      	mov	r3, r0
 800ab62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab64:	7dfb      	ldrb	r3, [r7, #23]
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 f832 	bl	800abd0 <USBD_Get_USB_Status>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab70:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3718      	adds	r7, #24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b082      	sub	sp, #8
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
 800ab82:	460b      	mov	r3, r1
 800ab84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab8c:	78fa      	ldrb	r2, [r7, #3]
 800ab8e:	4611      	mov	r1, r2
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7f9 f984 	bl	8003e9e <HAL_PCD_EP_GetRxCount>
 800ab96:	4603      	mov	r3, r0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aba8:	4b03      	ldr	r3, [pc, #12]	; (800abb8 <USBD_static_malloc+0x18>)
}
 800abaa:	4618      	mov	r0, r3
 800abac:	370c      	adds	r7, #12
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	20001f54 	.word	0x20001f54

0800abbc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]

}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	4603      	mov	r3, r0
 800abd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abde:	79fb      	ldrb	r3, [r7, #7]
 800abe0:	2b03      	cmp	r3, #3
 800abe2:	d817      	bhi.n	800ac14 <USBD_Get_USB_Status+0x44>
 800abe4:	a201      	add	r2, pc, #4	; (adr r2, 800abec <USBD_Get_USB_Status+0x1c>)
 800abe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abea:	bf00      	nop
 800abec:	0800abfd 	.word	0x0800abfd
 800abf0:	0800ac03 	.word	0x0800ac03
 800abf4:	0800ac09 	.word	0x0800ac09
 800abf8:	0800ac0f 	.word	0x0800ac0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800abfc:	2300      	movs	r3, #0
 800abfe:	73fb      	strb	r3, [r7, #15]
    break;
 800ac00:	e00b      	b.n	800ac1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac02:	2303      	movs	r3, #3
 800ac04:	73fb      	strb	r3, [r7, #15]
    break;
 800ac06:	e008      	b.n	800ac1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac0c:	e005      	b.n	800ac1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac0e:	2303      	movs	r3, #3
 800ac10:	73fb      	strb	r3, [r7, #15]
    break;
 800ac12:	e002      	b.n	800ac1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac14:	2303      	movs	r3, #3
 800ac16:	73fb      	strb	r3, [r7, #15]
    break;
 800ac18:	bf00      	nop
  }
  return usb_status;
 800ac1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3714      	adds	r7, #20
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <__cvt>:
 800ac28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac2c:	ec55 4b10 	vmov	r4, r5, d0
 800ac30:	2d00      	cmp	r5, #0
 800ac32:	460e      	mov	r6, r1
 800ac34:	4619      	mov	r1, r3
 800ac36:	462b      	mov	r3, r5
 800ac38:	bfbb      	ittet	lt
 800ac3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ac3e:	461d      	movlt	r5, r3
 800ac40:	2300      	movge	r3, #0
 800ac42:	232d      	movlt	r3, #45	; 0x2d
 800ac44:	700b      	strb	r3, [r1, #0]
 800ac46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ac4c:	4691      	mov	r9, r2
 800ac4e:	f023 0820 	bic.w	r8, r3, #32
 800ac52:	bfbc      	itt	lt
 800ac54:	4622      	movlt	r2, r4
 800ac56:	4614      	movlt	r4, r2
 800ac58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ac5c:	d005      	beq.n	800ac6a <__cvt+0x42>
 800ac5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ac62:	d100      	bne.n	800ac66 <__cvt+0x3e>
 800ac64:	3601      	adds	r6, #1
 800ac66:	2102      	movs	r1, #2
 800ac68:	e000      	b.n	800ac6c <__cvt+0x44>
 800ac6a:	2103      	movs	r1, #3
 800ac6c:	ab03      	add	r3, sp, #12
 800ac6e:	9301      	str	r3, [sp, #4]
 800ac70:	ab02      	add	r3, sp, #8
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	ec45 4b10 	vmov	d0, r4, r5
 800ac78:	4653      	mov	r3, sl
 800ac7a:	4632      	mov	r2, r6
 800ac7c:	f000 fe7c 	bl	800b978 <_dtoa_r>
 800ac80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ac84:	4607      	mov	r7, r0
 800ac86:	d102      	bne.n	800ac8e <__cvt+0x66>
 800ac88:	f019 0f01 	tst.w	r9, #1
 800ac8c:	d022      	beq.n	800acd4 <__cvt+0xac>
 800ac8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ac92:	eb07 0906 	add.w	r9, r7, r6
 800ac96:	d110      	bne.n	800acba <__cvt+0x92>
 800ac98:	783b      	ldrb	r3, [r7, #0]
 800ac9a:	2b30      	cmp	r3, #48	; 0x30
 800ac9c:	d10a      	bne.n	800acb4 <__cvt+0x8c>
 800ac9e:	2200      	movs	r2, #0
 800aca0:	2300      	movs	r3, #0
 800aca2:	4620      	mov	r0, r4
 800aca4:	4629      	mov	r1, r5
 800aca6:	f7f5 ff17 	bl	8000ad8 <__aeabi_dcmpeq>
 800acaa:	b918      	cbnz	r0, 800acb4 <__cvt+0x8c>
 800acac:	f1c6 0601 	rsb	r6, r6, #1
 800acb0:	f8ca 6000 	str.w	r6, [sl]
 800acb4:	f8da 3000 	ldr.w	r3, [sl]
 800acb8:	4499      	add	r9, r3
 800acba:	2200      	movs	r2, #0
 800acbc:	2300      	movs	r3, #0
 800acbe:	4620      	mov	r0, r4
 800acc0:	4629      	mov	r1, r5
 800acc2:	f7f5 ff09 	bl	8000ad8 <__aeabi_dcmpeq>
 800acc6:	b108      	cbz	r0, 800accc <__cvt+0xa4>
 800acc8:	f8cd 900c 	str.w	r9, [sp, #12]
 800accc:	2230      	movs	r2, #48	; 0x30
 800acce:	9b03      	ldr	r3, [sp, #12]
 800acd0:	454b      	cmp	r3, r9
 800acd2:	d307      	bcc.n	800ace4 <__cvt+0xbc>
 800acd4:	9b03      	ldr	r3, [sp, #12]
 800acd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acd8:	1bdb      	subs	r3, r3, r7
 800acda:	4638      	mov	r0, r7
 800acdc:	6013      	str	r3, [r2, #0]
 800acde:	b004      	add	sp, #16
 800ace0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace4:	1c59      	adds	r1, r3, #1
 800ace6:	9103      	str	r1, [sp, #12]
 800ace8:	701a      	strb	r2, [r3, #0]
 800acea:	e7f0      	b.n	800acce <__cvt+0xa6>

0800acec <__exponent>:
 800acec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acee:	4603      	mov	r3, r0
 800acf0:	2900      	cmp	r1, #0
 800acf2:	bfb8      	it	lt
 800acf4:	4249      	neglt	r1, r1
 800acf6:	f803 2b02 	strb.w	r2, [r3], #2
 800acfa:	bfb4      	ite	lt
 800acfc:	222d      	movlt	r2, #45	; 0x2d
 800acfe:	222b      	movge	r2, #43	; 0x2b
 800ad00:	2909      	cmp	r1, #9
 800ad02:	7042      	strb	r2, [r0, #1]
 800ad04:	dd2a      	ble.n	800ad5c <__exponent+0x70>
 800ad06:	f10d 0207 	add.w	r2, sp, #7
 800ad0a:	4617      	mov	r7, r2
 800ad0c:	260a      	movs	r6, #10
 800ad0e:	4694      	mov	ip, r2
 800ad10:	fb91 f5f6 	sdiv	r5, r1, r6
 800ad14:	fb06 1415 	mls	r4, r6, r5, r1
 800ad18:	3430      	adds	r4, #48	; 0x30
 800ad1a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ad1e:	460c      	mov	r4, r1
 800ad20:	2c63      	cmp	r4, #99	; 0x63
 800ad22:	f102 32ff 	add.w	r2, r2, #4294967295
 800ad26:	4629      	mov	r1, r5
 800ad28:	dcf1      	bgt.n	800ad0e <__exponent+0x22>
 800ad2a:	3130      	adds	r1, #48	; 0x30
 800ad2c:	f1ac 0402 	sub.w	r4, ip, #2
 800ad30:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ad34:	1c41      	adds	r1, r0, #1
 800ad36:	4622      	mov	r2, r4
 800ad38:	42ba      	cmp	r2, r7
 800ad3a:	d30a      	bcc.n	800ad52 <__exponent+0x66>
 800ad3c:	f10d 0209 	add.w	r2, sp, #9
 800ad40:	eba2 020c 	sub.w	r2, r2, ip
 800ad44:	42bc      	cmp	r4, r7
 800ad46:	bf88      	it	hi
 800ad48:	2200      	movhi	r2, #0
 800ad4a:	4413      	add	r3, r2
 800ad4c:	1a18      	subs	r0, r3, r0
 800ad4e:	b003      	add	sp, #12
 800ad50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad52:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ad56:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ad5a:	e7ed      	b.n	800ad38 <__exponent+0x4c>
 800ad5c:	2330      	movs	r3, #48	; 0x30
 800ad5e:	3130      	adds	r1, #48	; 0x30
 800ad60:	7083      	strb	r3, [r0, #2]
 800ad62:	70c1      	strb	r1, [r0, #3]
 800ad64:	1d03      	adds	r3, r0, #4
 800ad66:	e7f1      	b.n	800ad4c <__exponent+0x60>

0800ad68 <_printf_float>:
 800ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	ed2d 8b02 	vpush	{d8}
 800ad70:	b08d      	sub	sp, #52	; 0x34
 800ad72:	460c      	mov	r4, r1
 800ad74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ad78:	4616      	mov	r6, r2
 800ad7a:	461f      	mov	r7, r3
 800ad7c:	4605      	mov	r5, r0
 800ad7e:	f000 fcfb 	bl	800b778 <_localeconv_r>
 800ad82:	f8d0 a000 	ldr.w	sl, [r0]
 800ad86:	4650      	mov	r0, sl
 800ad88:	f7f5 fa7a 	bl	8000280 <strlen>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	930a      	str	r3, [sp, #40]	; 0x28
 800ad90:	6823      	ldr	r3, [r4, #0]
 800ad92:	9305      	str	r3, [sp, #20]
 800ad94:	f8d8 3000 	ldr.w	r3, [r8]
 800ad98:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ad9c:	3307      	adds	r3, #7
 800ad9e:	f023 0307 	bic.w	r3, r3, #7
 800ada2:	f103 0208 	add.w	r2, r3, #8
 800ada6:	f8c8 2000 	str.w	r2, [r8]
 800adaa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800adae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800adb2:	9307      	str	r3, [sp, #28]
 800adb4:	f8cd 8018 	str.w	r8, [sp, #24]
 800adb8:	ee08 0a10 	vmov	s16, r0
 800adbc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800adc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adc4:	4b9e      	ldr	r3, [pc, #632]	; (800b040 <_printf_float+0x2d8>)
 800adc6:	f04f 32ff 	mov.w	r2, #4294967295
 800adca:	f7f5 feb7 	bl	8000b3c <__aeabi_dcmpun>
 800adce:	bb88      	cbnz	r0, 800ae34 <_printf_float+0xcc>
 800add0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800add4:	4b9a      	ldr	r3, [pc, #616]	; (800b040 <_printf_float+0x2d8>)
 800add6:	f04f 32ff 	mov.w	r2, #4294967295
 800adda:	f7f5 fe91 	bl	8000b00 <__aeabi_dcmple>
 800adde:	bb48      	cbnz	r0, 800ae34 <_printf_float+0xcc>
 800ade0:	2200      	movs	r2, #0
 800ade2:	2300      	movs	r3, #0
 800ade4:	4640      	mov	r0, r8
 800ade6:	4649      	mov	r1, r9
 800ade8:	f7f5 fe80 	bl	8000aec <__aeabi_dcmplt>
 800adec:	b110      	cbz	r0, 800adf4 <_printf_float+0x8c>
 800adee:	232d      	movs	r3, #45	; 0x2d
 800adf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adf4:	4a93      	ldr	r2, [pc, #588]	; (800b044 <_printf_float+0x2dc>)
 800adf6:	4b94      	ldr	r3, [pc, #592]	; (800b048 <_printf_float+0x2e0>)
 800adf8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800adfc:	bf94      	ite	ls
 800adfe:	4690      	movls	r8, r2
 800ae00:	4698      	movhi	r8, r3
 800ae02:	2303      	movs	r3, #3
 800ae04:	6123      	str	r3, [r4, #16]
 800ae06:	9b05      	ldr	r3, [sp, #20]
 800ae08:	f023 0304 	bic.w	r3, r3, #4
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	f04f 0900 	mov.w	r9, #0
 800ae12:	9700      	str	r7, [sp, #0]
 800ae14:	4633      	mov	r3, r6
 800ae16:	aa0b      	add	r2, sp, #44	; 0x2c
 800ae18:	4621      	mov	r1, r4
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	f000 f9da 	bl	800b1d4 <_printf_common>
 800ae20:	3001      	adds	r0, #1
 800ae22:	f040 8090 	bne.w	800af46 <_printf_float+0x1de>
 800ae26:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2a:	b00d      	add	sp, #52	; 0x34
 800ae2c:	ecbd 8b02 	vpop	{d8}
 800ae30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae34:	4642      	mov	r2, r8
 800ae36:	464b      	mov	r3, r9
 800ae38:	4640      	mov	r0, r8
 800ae3a:	4649      	mov	r1, r9
 800ae3c:	f7f5 fe7e 	bl	8000b3c <__aeabi_dcmpun>
 800ae40:	b140      	cbz	r0, 800ae54 <_printf_float+0xec>
 800ae42:	464b      	mov	r3, r9
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	bfbc      	itt	lt
 800ae48:	232d      	movlt	r3, #45	; 0x2d
 800ae4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ae4e:	4a7f      	ldr	r2, [pc, #508]	; (800b04c <_printf_float+0x2e4>)
 800ae50:	4b7f      	ldr	r3, [pc, #508]	; (800b050 <_printf_float+0x2e8>)
 800ae52:	e7d1      	b.n	800adf8 <_printf_float+0x90>
 800ae54:	6863      	ldr	r3, [r4, #4]
 800ae56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ae5a:	9206      	str	r2, [sp, #24]
 800ae5c:	1c5a      	adds	r2, r3, #1
 800ae5e:	d13f      	bne.n	800aee0 <_printf_float+0x178>
 800ae60:	2306      	movs	r3, #6
 800ae62:	6063      	str	r3, [r4, #4]
 800ae64:	9b05      	ldr	r3, [sp, #20]
 800ae66:	6861      	ldr	r1, [r4, #4]
 800ae68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	9303      	str	r3, [sp, #12]
 800ae70:	ab0a      	add	r3, sp, #40	; 0x28
 800ae72:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ae76:	ab09      	add	r3, sp, #36	; 0x24
 800ae78:	ec49 8b10 	vmov	d0, r8, r9
 800ae7c:	9300      	str	r3, [sp, #0]
 800ae7e:	6022      	str	r2, [r4, #0]
 800ae80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ae84:	4628      	mov	r0, r5
 800ae86:	f7ff fecf 	bl	800ac28 <__cvt>
 800ae8a:	9b06      	ldr	r3, [sp, #24]
 800ae8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae8e:	2b47      	cmp	r3, #71	; 0x47
 800ae90:	4680      	mov	r8, r0
 800ae92:	d108      	bne.n	800aea6 <_printf_float+0x13e>
 800ae94:	1cc8      	adds	r0, r1, #3
 800ae96:	db02      	blt.n	800ae9e <_printf_float+0x136>
 800ae98:	6863      	ldr	r3, [r4, #4]
 800ae9a:	4299      	cmp	r1, r3
 800ae9c:	dd41      	ble.n	800af22 <_printf_float+0x1ba>
 800ae9e:	f1ab 0302 	sub.w	r3, fp, #2
 800aea2:	fa5f fb83 	uxtb.w	fp, r3
 800aea6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aeaa:	d820      	bhi.n	800aeee <_printf_float+0x186>
 800aeac:	3901      	subs	r1, #1
 800aeae:	465a      	mov	r2, fp
 800aeb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aeb4:	9109      	str	r1, [sp, #36]	; 0x24
 800aeb6:	f7ff ff19 	bl	800acec <__exponent>
 800aeba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aebc:	1813      	adds	r3, r2, r0
 800aebe:	2a01      	cmp	r2, #1
 800aec0:	4681      	mov	r9, r0
 800aec2:	6123      	str	r3, [r4, #16]
 800aec4:	dc02      	bgt.n	800aecc <_printf_float+0x164>
 800aec6:	6822      	ldr	r2, [r4, #0]
 800aec8:	07d2      	lsls	r2, r2, #31
 800aeca:	d501      	bpl.n	800aed0 <_printf_float+0x168>
 800aecc:	3301      	adds	r3, #1
 800aece:	6123      	str	r3, [r4, #16]
 800aed0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d09c      	beq.n	800ae12 <_printf_float+0xaa>
 800aed8:	232d      	movs	r3, #45	; 0x2d
 800aeda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aede:	e798      	b.n	800ae12 <_printf_float+0xaa>
 800aee0:	9a06      	ldr	r2, [sp, #24]
 800aee2:	2a47      	cmp	r2, #71	; 0x47
 800aee4:	d1be      	bne.n	800ae64 <_printf_float+0xfc>
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d1bc      	bne.n	800ae64 <_printf_float+0xfc>
 800aeea:	2301      	movs	r3, #1
 800aeec:	e7b9      	b.n	800ae62 <_printf_float+0xfa>
 800aeee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aef2:	d118      	bne.n	800af26 <_printf_float+0x1be>
 800aef4:	2900      	cmp	r1, #0
 800aef6:	6863      	ldr	r3, [r4, #4]
 800aef8:	dd0b      	ble.n	800af12 <_printf_float+0x1aa>
 800aefa:	6121      	str	r1, [r4, #16]
 800aefc:	b913      	cbnz	r3, 800af04 <_printf_float+0x19c>
 800aefe:	6822      	ldr	r2, [r4, #0]
 800af00:	07d0      	lsls	r0, r2, #31
 800af02:	d502      	bpl.n	800af0a <_printf_float+0x1a2>
 800af04:	3301      	adds	r3, #1
 800af06:	440b      	add	r3, r1
 800af08:	6123      	str	r3, [r4, #16]
 800af0a:	65a1      	str	r1, [r4, #88]	; 0x58
 800af0c:	f04f 0900 	mov.w	r9, #0
 800af10:	e7de      	b.n	800aed0 <_printf_float+0x168>
 800af12:	b913      	cbnz	r3, 800af1a <_printf_float+0x1b2>
 800af14:	6822      	ldr	r2, [r4, #0]
 800af16:	07d2      	lsls	r2, r2, #31
 800af18:	d501      	bpl.n	800af1e <_printf_float+0x1b6>
 800af1a:	3302      	adds	r3, #2
 800af1c:	e7f4      	b.n	800af08 <_printf_float+0x1a0>
 800af1e:	2301      	movs	r3, #1
 800af20:	e7f2      	b.n	800af08 <_printf_float+0x1a0>
 800af22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800af26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af28:	4299      	cmp	r1, r3
 800af2a:	db05      	blt.n	800af38 <_printf_float+0x1d0>
 800af2c:	6823      	ldr	r3, [r4, #0]
 800af2e:	6121      	str	r1, [r4, #16]
 800af30:	07d8      	lsls	r0, r3, #31
 800af32:	d5ea      	bpl.n	800af0a <_printf_float+0x1a2>
 800af34:	1c4b      	adds	r3, r1, #1
 800af36:	e7e7      	b.n	800af08 <_printf_float+0x1a0>
 800af38:	2900      	cmp	r1, #0
 800af3a:	bfd4      	ite	le
 800af3c:	f1c1 0202 	rsble	r2, r1, #2
 800af40:	2201      	movgt	r2, #1
 800af42:	4413      	add	r3, r2
 800af44:	e7e0      	b.n	800af08 <_printf_float+0x1a0>
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	055a      	lsls	r2, r3, #21
 800af4a:	d407      	bmi.n	800af5c <_printf_float+0x1f4>
 800af4c:	6923      	ldr	r3, [r4, #16]
 800af4e:	4642      	mov	r2, r8
 800af50:	4631      	mov	r1, r6
 800af52:	4628      	mov	r0, r5
 800af54:	47b8      	blx	r7
 800af56:	3001      	adds	r0, #1
 800af58:	d12c      	bne.n	800afb4 <_printf_float+0x24c>
 800af5a:	e764      	b.n	800ae26 <_printf_float+0xbe>
 800af5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800af60:	f240 80e0 	bls.w	800b124 <_printf_float+0x3bc>
 800af64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af68:	2200      	movs	r2, #0
 800af6a:	2300      	movs	r3, #0
 800af6c:	f7f5 fdb4 	bl	8000ad8 <__aeabi_dcmpeq>
 800af70:	2800      	cmp	r0, #0
 800af72:	d034      	beq.n	800afde <_printf_float+0x276>
 800af74:	4a37      	ldr	r2, [pc, #220]	; (800b054 <_printf_float+0x2ec>)
 800af76:	2301      	movs	r3, #1
 800af78:	4631      	mov	r1, r6
 800af7a:	4628      	mov	r0, r5
 800af7c:	47b8      	blx	r7
 800af7e:	3001      	adds	r0, #1
 800af80:	f43f af51 	beq.w	800ae26 <_printf_float+0xbe>
 800af84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af88:	429a      	cmp	r2, r3
 800af8a:	db02      	blt.n	800af92 <_printf_float+0x22a>
 800af8c:	6823      	ldr	r3, [r4, #0]
 800af8e:	07d8      	lsls	r0, r3, #31
 800af90:	d510      	bpl.n	800afb4 <_printf_float+0x24c>
 800af92:	ee18 3a10 	vmov	r3, s16
 800af96:	4652      	mov	r2, sl
 800af98:	4631      	mov	r1, r6
 800af9a:	4628      	mov	r0, r5
 800af9c:	47b8      	blx	r7
 800af9e:	3001      	adds	r0, #1
 800afa0:	f43f af41 	beq.w	800ae26 <_printf_float+0xbe>
 800afa4:	f04f 0800 	mov.w	r8, #0
 800afa8:	f104 091a 	add.w	r9, r4, #26
 800afac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afae:	3b01      	subs	r3, #1
 800afb0:	4543      	cmp	r3, r8
 800afb2:	dc09      	bgt.n	800afc8 <_printf_float+0x260>
 800afb4:	6823      	ldr	r3, [r4, #0]
 800afb6:	079b      	lsls	r3, r3, #30
 800afb8:	f100 8107 	bmi.w	800b1ca <_printf_float+0x462>
 800afbc:	68e0      	ldr	r0, [r4, #12]
 800afbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afc0:	4298      	cmp	r0, r3
 800afc2:	bfb8      	it	lt
 800afc4:	4618      	movlt	r0, r3
 800afc6:	e730      	b.n	800ae2a <_printf_float+0xc2>
 800afc8:	2301      	movs	r3, #1
 800afca:	464a      	mov	r2, r9
 800afcc:	4631      	mov	r1, r6
 800afce:	4628      	mov	r0, r5
 800afd0:	47b8      	blx	r7
 800afd2:	3001      	adds	r0, #1
 800afd4:	f43f af27 	beq.w	800ae26 <_printf_float+0xbe>
 800afd8:	f108 0801 	add.w	r8, r8, #1
 800afdc:	e7e6      	b.n	800afac <_printf_float+0x244>
 800afde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	dc39      	bgt.n	800b058 <_printf_float+0x2f0>
 800afe4:	4a1b      	ldr	r2, [pc, #108]	; (800b054 <_printf_float+0x2ec>)
 800afe6:	2301      	movs	r3, #1
 800afe8:	4631      	mov	r1, r6
 800afea:	4628      	mov	r0, r5
 800afec:	47b8      	blx	r7
 800afee:	3001      	adds	r0, #1
 800aff0:	f43f af19 	beq.w	800ae26 <_printf_float+0xbe>
 800aff4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aff8:	4313      	orrs	r3, r2
 800affa:	d102      	bne.n	800b002 <_printf_float+0x29a>
 800affc:	6823      	ldr	r3, [r4, #0]
 800affe:	07d9      	lsls	r1, r3, #31
 800b000:	d5d8      	bpl.n	800afb4 <_printf_float+0x24c>
 800b002:	ee18 3a10 	vmov	r3, s16
 800b006:	4652      	mov	r2, sl
 800b008:	4631      	mov	r1, r6
 800b00a:	4628      	mov	r0, r5
 800b00c:	47b8      	blx	r7
 800b00e:	3001      	adds	r0, #1
 800b010:	f43f af09 	beq.w	800ae26 <_printf_float+0xbe>
 800b014:	f04f 0900 	mov.w	r9, #0
 800b018:	f104 0a1a 	add.w	sl, r4, #26
 800b01c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b01e:	425b      	negs	r3, r3
 800b020:	454b      	cmp	r3, r9
 800b022:	dc01      	bgt.n	800b028 <_printf_float+0x2c0>
 800b024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b026:	e792      	b.n	800af4e <_printf_float+0x1e6>
 800b028:	2301      	movs	r3, #1
 800b02a:	4652      	mov	r2, sl
 800b02c:	4631      	mov	r1, r6
 800b02e:	4628      	mov	r0, r5
 800b030:	47b8      	blx	r7
 800b032:	3001      	adds	r0, #1
 800b034:	f43f aef7 	beq.w	800ae26 <_printf_float+0xbe>
 800b038:	f109 0901 	add.w	r9, r9, #1
 800b03c:	e7ee      	b.n	800b01c <_printf_float+0x2b4>
 800b03e:	bf00      	nop
 800b040:	7fefffff 	.word	0x7fefffff
 800b044:	0800d9e8 	.word	0x0800d9e8
 800b048:	0800d9ec 	.word	0x0800d9ec
 800b04c:	0800d9f0 	.word	0x0800d9f0
 800b050:	0800d9f4 	.word	0x0800d9f4
 800b054:	0800d9f8 	.word	0x0800d9f8
 800b058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b05a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b05c:	429a      	cmp	r2, r3
 800b05e:	bfa8      	it	ge
 800b060:	461a      	movge	r2, r3
 800b062:	2a00      	cmp	r2, #0
 800b064:	4691      	mov	r9, r2
 800b066:	dc37      	bgt.n	800b0d8 <_printf_float+0x370>
 800b068:	f04f 0b00 	mov.w	fp, #0
 800b06c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b070:	f104 021a 	add.w	r2, r4, #26
 800b074:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b076:	9305      	str	r3, [sp, #20]
 800b078:	eba3 0309 	sub.w	r3, r3, r9
 800b07c:	455b      	cmp	r3, fp
 800b07e:	dc33      	bgt.n	800b0e8 <_printf_float+0x380>
 800b080:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b084:	429a      	cmp	r2, r3
 800b086:	db3b      	blt.n	800b100 <_printf_float+0x398>
 800b088:	6823      	ldr	r3, [r4, #0]
 800b08a:	07da      	lsls	r2, r3, #31
 800b08c:	d438      	bmi.n	800b100 <_printf_float+0x398>
 800b08e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b092:	eba2 0903 	sub.w	r9, r2, r3
 800b096:	9b05      	ldr	r3, [sp, #20]
 800b098:	1ad2      	subs	r2, r2, r3
 800b09a:	4591      	cmp	r9, r2
 800b09c:	bfa8      	it	ge
 800b09e:	4691      	movge	r9, r2
 800b0a0:	f1b9 0f00 	cmp.w	r9, #0
 800b0a4:	dc35      	bgt.n	800b112 <_printf_float+0x3aa>
 800b0a6:	f04f 0800 	mov.w	r8, #0
 800b0aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0ae:	f104 0a1a 	add.w	sl, r4, #26
 800b0b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0b6:	1a9b      	subs	r3, r3, r2
 800b0b8:	eba3 0309 	sub.w	r3, r3, r9
 800b0bc:	4543      	cmp	r3, r8
 800b0be:	f77f af79 	ble.w	800afb4 <_printf_float+0x24c>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	4652      	mov	r2, sl
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b8      	blx	r7
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	f43f aeaa 	beq.w	800ae26 <_printf_float+0xbe>
 800b0d2:	f108 0801 	add.w	r8, r8, #1
 800b0d6:	e7ec      	b.n	800b0b2 <_printf_float+0x34a>
 800b0d8:	4613      	mov	r3, r2
 800b0da:	4631      	mov	r1, r6
 800b0dc:	4642      	mov	r2, r8
 800b0de:	4628      	mov	r0, r5
 800b0e0:	47b8      	blx	r7
 800b0e2:	3001      	adds	r0, #1
 800b0e4:	d1c0      	bne.n	800b068 <_printf_float+0x300>
 800b0e6:	e69e      	b.n	800ae26 <_printf_float+0xbe>
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	9205      	str	r2, [sp, #20]
 800b0f0:	47b8      	blx	r7
 800b0f2:	3001      	adds	r0, #1
 800b0f4:	f43f ae97 	beq.w	800ae26 <_printf_float+0xbe>
 800b0f8:	9a05      	ldr	r2, [sp, #20]
 800b0fa:	f10b 0b01 	add.w	fp, fp, #1
 800b0fe:	e7b9      	b.n	800b074 <_printf_float+0x30c>
 800b100:	ee18 3a10 	vmov	r3, s16
 800b104:	4652      	mov	r2, sl
 800b106:	4631      	mov	r1, r6
 800b108:	4628      	mov	r0, r5
 800b10a:	47b8      	blx	r7
 800b10c:	3001      	adds	r0, #1
 800b10e:	d1be      	bne.n	800b08e <_printf_float+0x326>
 800b110:	e689      	b.n	800ae26 <_printf_float+0xbe>
 800b112:	9a05      	ldr	r2, [sp, #20]
 800b114:	464b      	mov	r3, r9
 800b116:	4442      	add	r2, r8
 800b118:	4631      	mov	r1, r6
 800b11a:	4628      	mov	r0, r5
 800b11c:	47b8      	blx	r7
 800b11e:	3001      	adds	r0, #1
 800b120:	d1c1      	bne.n	800b0a6 <_printf_float+0x33e>
 800b122:	e680      	b.n	800ae26 <_printf_float+0xbe>
 800b124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b126:	2a01      	cmp	r2, #1
 800b128:	dc01      	bgt.n	800b12e <_printf_float+0x3c6>
 800b12a:	07db      	lsls	r3, r3, #31
 800b12c:	d53a      	bpl.n	800b1a4 <_printf_float+0x43c>
 800b12e:	2301      	movs	r3, #1
 800b130:	4642      	mov	r2, r8
 800b132:	4631      	mov	r1, r6
 800b134:	4628      	mov	r0, r5
 800b136:	47b8      	blx	r7
 800b138:	3001      	adds	r0, #1
 800b13a:	f43f ae74 	beq.w	800ae26 <_printf_float+0xbe>
 800b13e:	ee18 3a10 	vmov	r3, s16
 800b142:	4652      	mov	r2, sl
 800b144:	4631      	mov	r1, r6
 800b146:	4628      	mov	r0, r5
 800b148:	47b8      	blx	r7
 800b14a:	3001      	adds	r0, #1
 800b14c:	f43f ae6b 	beq.w	800ae26 <_printf_float+0xbe>
 800b150:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b154:	2200      	movs	r2, #0
 800b156:	2300      	movs	r3, #0
 800b158:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b15c:	f7f5 fcbc 	bl	8000ad8 <__aeabi_dcmpeq>
 800b160:	b9d8      	cbnz	r0, 800b19a <_printf_float+0x432>
 800b162:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b166:	f108 0201 	add.w	r2, r8, #1
 800b16a:	4631      	mov	r1, r6
 800b16c:	4628      	mov	r0, r5
 800b16e:	47b8      	blx	r7
 800b170:	3001      	adds	r0, #1
 800b172:	d10e      	bne.n	800b192 <_printf_float+0x42a>
 800b174:	e657      	b.n	800ae26 <_printf_float+0xbe>
 800b176:	2301      	movs	r3, #1
 800b178:	4652      	mov	r2, sl
 800b17a:	4631      	mov	r1, r6
 800b17c:	4628      	mov	r0, r5
 800b17e:	47b8      	blx	r7
 800b180:	3001      	adds	r0, #1
 800b182:	f43f ae50 	beq.w	800ae26 <_printf_float+0xbe>
 800b186:	f108 0801 	add.w	r8, r8, #1
 800b18a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b18c:	3b01      	subs	r3, #1
 800b18e:	4543      	cmp	r3, r8
 800b190:	dcf1      	bgt.n	800b176 <_printf_float+0x40e>
 800b192:	464b      	mov	r3, r9
 800b194:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b198:	e6da      	b.n	800af50 <_printf_float+0x1e8>
 800b19a:	f04f 0800 	mov.w	r8, #0
 800b19e:	f104 0a1a 	add.w	sl, r4, #26
 800b1a2:	e7f2      	b.n	800b18a <_printf_float+0x422>
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	4642      	mov	r2, r8
 800b1a8:	e7df      	b.n	800b16a <_printf_float+0x402>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	464a      	mov	r2, r9
 800b1ae:	4631      	mov	r1, r6
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	47b8      	blx	r7
 800b1b4:	3001      	adds	r0, #1
 800b1b6:	f43f ae36 	beq.w	800ae26 <_printf_float+0xbe>
 800b1ba:	f108 0801 	add.w	r8, r8, #1
 800b1be:	68e3      	ldr	r3, [r4, #12]
 800b1c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1c2:	1a5b      	subs	r3, r3, r1
 800b1c4:	4543      	cmp	r3, r8
 800b1c6:	dcf0      	bgt.n	800b1aa <_printf_float+0x442>
 800b1c8:	e6f8      	b.n	800afbc <_printf_float+0x254>
 800b1ca:	f04f 0800 	mov.w	r8, #0
 800b1ce:	f104 0919 	add.w	r9, r4, #25
 800b1d2:	e7f4      	b.n	800b1be <_printf_float+0x456>

0800b1d4 <_printf_common>:
 800b1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d8:	4616      	mov	r6, r2
 800b1da:	4699      	mov	r9, r3
 800b1dc:	688a      	ldr	r2, [r1, #8]
 800b1de:	690b      	ldr	r3, [r1, #16]
 800b1e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	bfb8      	it	lt
 800b1e8:	4613      	movlt	r3, r2
 800b1ea:	6033      	str	r3, [r6, #0]
 800b1ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1f0:	4607      	mov	r7, r0
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	b10a      	cbz	r2, 800b1fa <_printf_common+0x26>
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	6033      	str	r3, [r6, #0]
 800b1fa:	6823      	ldr	r3, [r4, #0]
 800b1fc:	0699      	lsls	r1, r3, #26
 800b1fe:	bf42      	ittt	mi
 800b200:	6833      	ldrmi	r3, [r6, #0]
 800b202:	3302      	addmi	r3, #2
 800b204:	6033      	strmi	r3, [r6, #0]
 800b206:	6825      	ldr	r5, [r4, #0]
 800b208:	f015 0506 	ands.w	r5, r5, #6
 800b20c:	d106      	bne.n	800b21c <_printf_common+0x48>
 800b20e:	f104 0a19 	add.w	sl, r4, #25
 800b212:	68e3      	ldr	r3, [r4, #12]
 800b214:	6832      	ldr	r2, [r6, #0]
 800b216:	1a9b      	subs	r3, r3, r2
 800b218:	42ab      	cmp	r3, r5
 800b21a:	dc26      	bgt.n	800b26a <_printf_common+0x96>
 800b21c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b220:	1e13      	subs	r3, r2, #0
 800b222:	6822      	ldr	r2, [r4, #0]
 800b224:	bf18      	it	ne
 800b226:	2301      	movne	r3, #1
 800b228:	0692      	lsls	r2, r2, #26
 800b22a:	d42b      	bmi.n	800b284 <_printf_common+0xb0>
 800b22c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b230:	4649      	mov	r1, r9
 800b232:	4638      	mov	r0, r7
 800b234:	47c0      	blx	r8
 800b236:	3001      	adds	r0, #1
 800b238:	d01e      	beq.n	800b278 <_printf_common+0xa4>
 800b23a:	6823      	ldr	r3, [r4, #0]
 800b23c:	6922      	ldr	r2, [r4, #16]
 800b23e:	f003 0306 	and.w	r3, r3, #6
 800b242:	2b04      	cmp	r3, #4
 800b244:	bf02      	ittt	eq
 800b246:	68e5      	ldreq	r5, [r4, #12]
 800b248:	6833      	ldreq	r3, [r6, #0]
 800b24a:	1aed      	subeq	r5, r5, r3
 800b24c:	68a3      	ldr	r3, [r4, #8]
 800b24e:	bf0c      	ite	eq
 800b250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b254:	2500      	movne	r5, #0
 800b256:	4293      	cmp	r3, r2
 800b258:	bfc4      	itt	gt
 800b25a:	1a9b      	subgt	r3, r3, r2
 800b25c:	18ed      	addgt	r5, r5, r3
 800b25e:	2600      	movs	r6, #0
 800b260:	341a      	adds	r4, #26
 800b262:	42b5      	cmp	r5, r6
 800b264:	d11a      	bne.n	800b29c <_printf_common+0xc8>
 800b266:	2000      	movs	r0, #0
 800b268:	e008      	b.n	800b27c <_printf_common+0xa8>
 800b26a:	2301      	movs	r3, #1
 800b26c:	4652      	mov	r2, sl
 800b26e:	4649      	mov	r1, r9
 800b270:	4638      	mov	r0, r7
 800b272:	47c0      	blx	r8
 800b274:	3001      	adds	r0, #1
 800b276:	d103      	bne.n	800b280 <_printf_common+0xac>
 800b278:	f04f 30ff 	mov.w	r0, #4294967295
 800b27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b280:	3501      	adds	r5, #1
 800b282:	e7c6      	b.n	800b212 <_printf_common+0x3e>
 800b284:	18e1      	adds	r1, r4, r3
 800b286:	1c5a      	adds	r2, r3, #1
 800b288:	2030      	movs	r0, #48	; 0x30
 800b28a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b28e:	4422      	add	r2, r4
 800b290:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b294:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b298:	3302      	adds	r3, #2
 800b29a:	e7c7      	b.n	800b22c <_printf_common+0x58>
 800b29c:	2301      	movs	r3, #1
 800b29e:	4622      	mov	r2, r4
 800b2a0:	4649      	mov	r1, r9
 800b2a2:	4638      	mov	r0, r7
 800b2a4:	47c0      	blx	r8
 800b2a6:	3001      	adds	r0, #1
 800b2a8:	d0e6      	beq.n	800b278 <_printf_common+0xa4>
 800b2aa:	3601      	adds	r6, #1
 800b2ac:	e7d9      	b.n	800b262 <_printf_common+0x8e>
	...

0800b2b0 <_printf_i>:
 800b2b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b4:	7e0f      	ldrb	r7, [r1, #24]
 800b2b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2b8:	2f78      	cmp	r7, #120	; 0x78
 800b2ba:	4691      	mov	r9, r2
 800b2bc:	4680      	mov	r8, r0
 800b2be:	460c      	mov	r4, r1
 800b2c0:	469a      	mov	sl, r3
 800b2c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b2c6:	d807      	bhi.n	800b2d8 <_printf_i+0x28>
 800b2c8:	2f62      	cmp	r7, #98	; 0x62
 800b2ca:	d80a      	bhi.n	800b2e2 <_printf_i+0x32>
 800b2cc:	2f00      	cmp	r7, #0
 800b2ce:	f000 80d4 	beq.w	800b47a <_printf_i+0x1ca>
 800b2d2:	2f58      	cmp	r7, #88	; 0x58
 800b2d4:	f000 80c0 	beq.w	800b458 <_printf_i+0x1a8>
 800b2d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b2e0:	e03a      	b.n	800b358 <_printf_i+0xa8>
 800b2e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b2e6:	2b15      	cmp	r3, #21
 800b2e8:	d8f6      	bhi.n	800b2d8 <_printf_i+0x28>
 800b2ea:	a101      	add	r1, pc, #4	; (adr r1, 800b2f0 <_printf_i+0x40>)
 800b2ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2f0:	0800b349 	.word	0x0800b349
 800b2f4:	0800b35d 	.word	0x0800b35d
 800b2f8:	0800b2d9 	.word	0x0800b2d9
 800b2fc:	0800b2d9 	.word	0x0800b2d9
 800b300:	0800b2d9 	.word	0x0800b2d9
 800b304:	0800b2d9 	.word	0x0800b2d9
 800b308:	0800b35d 	.word	0x0800b35d
 800b30c:	0800b2d9 	.word	0x0800b2d9
 800b310:	0800b2d9 	.word	0x0800b2d9
 800b314:	0800b2d9 	.word	0x0800b2d9
 800b318:	0800b2d9 	.word	0x0800b2d9
 800b31c:	0800b461 	.word	0x0800b461
 800b320:	0800b389 	.word	0x0800b389
 800b324:	0800b41b 	.word	0x0800b41b
 800b328:	0800b2d9 	.word	0x0800b2d9
 800b32c:	0800b2d9 	.word	0x0800b2d9
 800b330:	0800b483 	.word	0x0800b483
 800b334:	0800b2d9 	.word	0x0800b2d9
 800b338:	0800b389 	.word	0x0800b389
 800b33c:	0800b2d9 	.word	0x0800b2d9
 800b340:	0800b2d9 	.word	0x0800b2d9
 800b344:	0800b423 	.word	0x0800b423
 800b348:	682b      	ldr	r3, [r5, #0]
 800b34a:	1d1a      	adds	r2, r3, #4
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	602a      	str	r2, [r5, #0]
 800b350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b358:	2301      	movs	r3, #1
 800b35a:	e09f      	b.n	800b49c <_printf_i+0x1ec>
 800b35c:	6820      	ldr	r0, [r4, #0]
 800b35e:	682b      	ldr	r3, [r5, #0]
 800b360:	0607      	lsls	r7, r0, #24
 800b362:	f103 0104 	add.w	r1, r3, #4
 800b366:	6029      	str	r1, [r5, #0]
 800b368:	d501      	bpl.n	800b36e <_printf_i+0xbe>
 800b36a:	681e      	ldr	r6, [r3, #0]
 800b36c:	e003      	b.n	800b376 <_printf_i+0xc6>
 800b36e:	0646      	lsls	r6, r0, #25
 800b370:	d5fb      	bpl.n	800b36a <_printf_i+0xba>
 800b372:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b376:	2e00      	cmp	r6, #0
 800b378:	da03      	bge.n	800b382 <_printf_i+0xd2>
 800b37a:	232d      	movs	r3, #45	; 0x2d
 800b37c:	4276      	negs	r6, r6
 800b37e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b382:	485a      	ldr	r0, [pc, #360]	; (800b4ec <_printf_i+0x23c>)
 800b384:	230a      	movs	r3, #10
 800b386:	e012      	b.n	800b3ae <_printf_i+0xfe>
 800b388:	682b      	ldr	r3, [r5, #0]
 800b38a:	6820      	ldr	r0, [r4, #0]
 800b38c:	1d19      	adds	r1, r3, #4
 800b38e:	6029      	str	r1, [r5, #0]
 800b390:	0605      	lsls	r5, r0, #24
 800b392:	d501      	bpl.n	800b398 <_printf_i+0xe8>
 800b394:	681e      	ldr	r6, [r3, #0]
 800b396:	e002      	b.n	800b39e <_printf_i+0xee>
 800b398:	0641      	lsls	r1, r0, #25
 800b39a:	d5fb      	bpl.n	800b394 <_printf_i+0xe4>
 800b39c:	881e      	ldrh	r6, [r3, #0]
 800b39e:	4853      	ldr	r0, [pc, #332]	; (800b4ec <_printf_i+0x23c>)
 800b3a0:	2f6f      	cmp	r7, #111	; 0x6f
 800b3a2:	bf0c      	ite	eq
 800b3a4:	2308      	moveq	r3, #8
 800b3a6:	230a      	movne	r3, #10
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3ae:	6865      	ldr	r5, [r4, #4]
 800b3b0:	60a5      	str	r5, [r4, #8]
 800b3b2:	2d00      	cmp	r5, #0
 800b3b4:	bfa2      	ittt	ge
 800b3b6:	6821      	ldrge	r1, [r4, #0]
 800b3b8:	f021 0104 	bicge.w	r1, r1, #4
 800b3bc:	6021      	strge	r1, [r4, #0]
 800b3be:	b90e      	cbnz	r6, 800b3c4 <_printf_i+0x114>
 800b3c0:	2d00      	cmp	r5, #0
 800b3c2:	d04b      	beq.n	800b45c <_printf_i+0x1ac>
 800b3c4:	4615      	mov	r5, r2
 800b3c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b3ca:	fb03 6711 	mls	r7, r3, r1, r6
 800b3ce:	5dc7      	ldrb	r7, [r0, r7]
 800b3d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b3d4:	4637      	mov	r7, r6
 800b3d6:	42bb      	cmp	r3, r7
 800b3d8:	460e      	mov	r6, r1
 800b3da:	d9f4      	bls.n	800b3c6 <_printf_i+0x116>
 800b3dc:	2b08      	cmp	r3, #8
 800b3de:	d10b      	bne.n	800b3f8 <_printf_i+0x148>
 800b3e0:	6823      	ldr	r3, [r4, #0]
 800b3e2:	07de      	lsls	r6, r3, #31
 800b3e4:	d508      	bpl.n	800b3f8 <_printf_i+0x148>
 800b3e6:	6923      	ldr	r3, [r4, #16]
 800b3e8:	6861      	ldr	r1, [r4, #4]
 800b3ea:	4299      	cmp	r1, r3
 800b3ec:	bfde      	ittt	le
 800b3ee:	2330      	movle	r3, #48	; 0x30
 800b3f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b3f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b3f8:	1b52      	subs	r2, r2, r5
 800b3fa:	6122      	str	r2, [r4, #16]
 800b3fc:	f8cd a000 	str.w	sl, [sp]
 800b400:	464b      	mov	r3, r9
 800b402:	aa03      	add	r2, sp, #12
 800b404:	4621      	mov	r1, r4
 800b406:	4640      	mov	r0, r8
 800b408:	f7ff fee4 	bl	800b1d4 <_printf_common>
 800b40c:	3001      	adds	r0, #1
 800b40e:	d14a      	bne.n	800b4a6 <_printf_i+0x1f6>
 800b410:	f04f 30ff 	mov.w	r0, #4294967295
 800b414:	b004      	add	sp, #16
 800b416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b41a:	6823      	ldr	r3, [r4, #0]
 800b41c:	f043 0320 	orr.w	r3, r3, #32
 800b420:	6023      	str	r3, [r4, #0]
 800b422:	4833      	ldr	r0, [pc, #204]	; (800b4f0 <_printf_i+0x240>)
 800b424:	2778      	movs	r7, #120	; 0x78
 800b426:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	6829      	ldr	r1, [r5, #0]
 800b42e:	061f      	lsls	r7, r3, #24
 800b430:	f851 6b04 	ldr.w	r6, [r1], #4
 800b434:	d402      	bmi.n	800b43c <_printf_i+0x18c>
 800b436:	065f      	lsls	r7, r3, #25
 800b438:	bf48      	it	mi
 800b43a:	b2b6      	uxthmi	r6, r6
 800b43c:	07df      	lsls	r7, r3, #31
 800b43e:	bf48      	it	mi
 800b440:	f043 0320 	orrmi.w	r3, r3, #32
 800b444:	6029      	str	r1, [r5, #0]
 800b446:	bf48      	it	mi
 800b448:	6023      	strmi	r3, [r4, #0]
 800b44a:	b91e      	cbnz	r6, 800b454 <_printf_i+0x1a4>
 800b44c:	6823      	ldr	r3, [r4, #0]
 800b44e:	f023 0320 	bic.w	r3, r3, #32
 800b452:	6023      	str	r3, [r4, #0]
 800b454:	2310      	movs	r3, #16
 800b456:	e7a7      	b.n	800b3a8 <_printf_i+0xf8>
 800b458:	4824      	ldr	r0, [pc, #144]	; (800b4ec <_printf_i+0x23c>)
 800b45a:	e7e4      	b.n	800b426 <_printf_i+0x176>
 800b45c:	4615      	mov	r5, r2
 800b45e:	e7bd      	b.n	800b3dc <_printf_i+0x12c>
 800b460:	682b      	ldr	r3, [r5, #0]
 800b462:	6826      	ldr	r6, [r4, #0]
 800b464:	6961      	ldr	r1, [r4, #20]
 800b466:	1d18      	adds	r0, r3, #4
 800b468:	6028      	str	r0, [r5, #0]
 800b46a:	0635      	lsls	r5, r6, #24
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	d501      	bpl.n	800b474 <_printf_i+0x1c4>
 800b470:	6019      	str	r1, [r3, #0]
 800b472:	e002      	b.n	800b47a <_printf_i+0x1ca>
 800b474:	0670      	lsls	r0, r6, #25
 800b476:	d5fb      	bpl.n	800b470 <_printf_i+0x1c0>
 800b478:	8019      	strh	r1, [r3, #0]
 800b47a:	2300      	movs	r3, #0
 800b47c:	6123      	str	r3, [r4, #16]
 800b47e:	4615      	mov	r5, r2
 800b480:	e7bc      	b.n	800b3fc <_printf_i+0x14c>
 800b482:	682b      	ldr	r3, [r5, #0]
 800b484:	1d1a      	adds	r2, r3, #4
 800b486:	602a      	str	r2, [r5, #0]
 800b488:	681d      	ldr	r5, [r3, #0]
 800b48a:	6862      	ldr	r2, [r4, #4]
 800b48c:	2100      	movs	r1, #0
 800b48e:	4628      	mov	r0, r5
 800b490:	f7f4 fea6 	bl	80001e0 <memchr>
 800b494:	b108      	cbz	r0, 800b49a <_printf_i+0x1ea>
 800b496:	1b40      	subs	r0, r0, r5
 800b498:	6060      	str	r0, [r4, #4]
 800b49a:	6863      	ldr	r3, [r4, #4]
 800b49c:	6123      	str	r3, [r4, #16]
 800b49e:	2300      	movs	r3, #0
 800b4a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4a4:	e7aa      	b.n	800b3fc <_printf_i+0x14c>
 800b4a6:	6923      	ldr	r3, [r4, #16]
 800b4a8:	462a      	mov	r2, r5
 800b4aa:	4649      	mov	r1, r9
 800b4ac:	4640      	mov	r0, r8
 800b4ae:	47d0      	blx	sl
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	d0ad      	beq.n	800b410 <_printf_i+0x160>
 800b4b4:	6823      	ldr	r3, [r4, #0]
 800b4b6:	079b      	lsls	r3, r3, #30
 800b4b8:	d413      	bmi.n	800b4e2 <_printf_i+0x232>
 800b4ba:	68e0      	ldr	r0, [r4, #12]
 800b4bc:	9b03      	ldr	r3, [sp, #12]
 800b4be:	4298      	cmp	r0, r3
 800b4c0:	bfb8      	it	lt
 800b4c2:	4618      	movlt	r0, r3
 800b4c4:	e7a6      	b.n	800b414 <_printf_i+0x164>
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	4632      	mov	r2, r6
 800b4ca:	4649      	mov	r1, r9
 800b4cc:	4640      	mov	r0, r8
 800b4ce:	47d0      	blx	sl
 800b4d0:	3001      	adds	r0, #1
 800b4d2:	d09d      	beq.n	800b410 <_printf_i+0x160>
 800b4d4:	3501      	adds	r5, #1
 800b4d6:	68e3      	ldr	r3, [r4, #12]
 800b4d8:	9903      	ldr	r1, [sp, #12]
 800b4da:	1a5b      	subs	r3, r3, r1
 800b4dc:	42ab      	cmp	r3, r5
 800b4de:	dcf2      	bgt.n	800b4c6 <_printf_i+0x216>
 800b4e0:	e7eb      	b.n	800b4ba <_printf_i+0x20a>
 800b4e2:	2500      	movs	r5, #0
 800b4e4:	f104 0619 	add.w	r6, r4, #25
 800b4e8:	e7f5      	b.n	800b4d6 <_printf_i+0x226>
 800b4ea:	bf00      	nop
 800b4ec:	0800d9fa 	.word	0x0800d9fa
 800b4f0:	0800da0b 	.word	0x0800da0b

0800b4f4 <std>:
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	b510      	push	{r4, lr}
 800b4f8:	4604      	mov	r4, r0
 800b4fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b4fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b502:	6083      	str	r3, [r0, #8]
 800b504:	8181      	strh	r1, [r0, #12]
 800b506:	6643      	str	r3, [r0, #100]	; 0x64
 800b508:	81c2      	strh	r2, [r0, #14]
 800b50a:	6183      	str	r3, [r0, #24]
 800b50c:	4619      	mov	r1, r3
 800b50e:	2208      	movs	r2, #8
 800b510:	305c      	adds	r0, #92	; 0x5c
 800b512:	f000 f928 	bl	800b766 <memset>
 800b516:	4b0d      	ldr	r3, [pc, #52]	; (800b54c <std+0x58>)
 800b518:	6263      	str	r3, [r4, #36]	; 0x24
 800b51a:	4b0d      	ldr	r3, [pc, #52]	; (800b550 <std+0x5c>)
 800b51c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b51e:	4b0d      	ldr	r3, [pc, #52]	; (800b554 <std+0x60>)
 800b520:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b522:	4b0d      	ldr	r3, [pc, #52]	; (800b558 <std+0x64>)
 800b524:	6323      	str	r3, [r4, #48]	; 0x30
 800b526:	4b0d      	ldr	r3, [pc, #52]	; (800b55c <std+0x68>)
 800b528:	6224      	str	r4, [r4, #32]
 800b52a:	429c      	cmp	r4, r3
 800b52c:	d006      	beq.n	800b53c <std+0x48>
 800b52e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b532:	4294      	cmp	r4, r2
 800b534:	d002      	beq.n	800b53c <std+0x48>
 800b536:	33d0      	adds	r3, #208	; 0xd0
 800b538:	429c      	cmp	r4, r3
 800b53a:	d105      	bne.n	800b548 <std+0x54>
 800b53c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b544:	f000 b98c 	b.w	800b860 <__retarget_lock_init_recursive>
 800b548:	bd10      	pop	{r4, pc}
 800b54a:	bf00      	nop
 800b54c:	0800b6e1 	.word	0x0800b6e1
 800b550:	0800b703 	.word	0x0800b703
 800b554:	0800b73b 	.word	0x0800b73b
 800b558:	0800b75f 	.word	0x0800b75f
 800b55c:	20002174 	.word	0x20002174

0800b560 <stdio_exit_handler>:
 800b560:	4a02      	ldr	r2, [pc, #8]	; (800b56c <stdio_exit_handler+0xc>)
 800b562:	4903      	ldr	r1, [pc, #12]	; (800b570 <stdio_exit_handler+0x10>)
 800b564:	4803      	ldr	r0, [pc, #12]	; (800b574 <stdio_exit_handler+0x14>)
 800b566:	f000 b869 	b.w	800b63c <_fwalk_sglue>
 800b56a:	bf00      	nop
 800b56c:	20000120 	.word	0x20000120
 800b570:	0800d211 	.word	0x0800d211
 800b574:	2000012c 	.word	0x2000012c

0800b578 <cleanup_stdio>:
 800b578:	6841      	ldr	r1, [r0, #4]
 800b57a:	4b0c      	ldr	r3, [pc, #48]	; (800b5ac <cleanup_stdio+0x34>)
 800b57c:	4299      	cmp	r1, r3
 800b57e:	b510      	push	{r4, lr}
 800b580:	4604      	mov	r4, r0
 800b582:	d001      	beq.n	800b588 <cleanup_stdio+0x10>
 800b584:	f001 fe44 	bl	800d210 <_fflush_r>
 800b588:	68a1      	ldr	r1, [r4, #8]
 800b58a:	4b09      	ldr	r3, [pc, #36]	; (800b5b0 <cleanup_stdio+0x38>)
 800b58c:	4299      	cmp	r1, r3
 800b58e:	d002      	beq.n	800b596 <cleanup_stdio+0x1e>
 800b590:	4620      	mov	r0, r4
 800b592:	f001 fe3d 	bl	800d210 <_fflush_r>
 800b596:	68e1      	ldr	r1, [r4, #12]
 800b598:	4b06      	ldr	r3, [pc, #24]	; (800b5b4 <cleanup_stdio+0x3c>)
 800b59a:	4299      	cmp	r1, r3
 800b59c:	d004      	beq.n	800b5a8 <cleanup_stdio+0x30>
 800b59e:	4620      	mov	r0, r4
 800b5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5a4:	f001 be34 	b.w	800d210 <_fflush_r>
 800b5a8:	bd10      	pop	{r4, pc}
 800b5aa:	bf00      	nop
 800b5ac:	20002174 	.word	0x20002174
 800b5b0:	200021dc 	.word	0x200021dc
 800b5b4:	20002244 	.word	0x20002244

0800b5b8 <global_stdio_init.part.0>:
 800b5b8:	b510      	push	{r4, lr}
 800b5ba:	4b0b      	ldr	r3, [pc, #44]	; (800b5e8 <global_stdio_init.part.0+0x30>)
 800b5bc:	4c0b      	ldr	r4, [pc, #44]	; (800b5ec <global_stdio_init.part.0+0x34>)
 800b5be:	4a0c      	ldr	r2, [pc, #48]	; (800b5f0 <global_stdio_init.part.0+0x38>)
 800b5c0:	601a      	str	r2, [r3, #0]
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	2104      	movs	r1, #4
 800b5c8:	f7ff ff94 	bl	800b4f4 <std>
 800b5cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	2109      	movs	r1, #9
 800b5d4:	f7ff ff8e 	bl	800b4f4 <std>
 800b5d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b5dc:	2202      	movs	r2, #2
 800b5de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5e2:	2112      	movs	r1, #18
 800b5e4:	f7ff bf86 	b.w	800b4f4 <std>
 800b5e8:	200022ac 	.word	0x200022ac
 800b5ec:	20002174 	.word	0x20002174
 800b5f0:	0800b561 	.word	0x0800b561

0800b5f4 <__sfp_lock_acquire>:
 800b5f4:	4801      	ldr	r0, [pc, #4]	; (800b5fc <__sfp_lock_acquire+0x8>)
 800b5f6:	f000 b934 	b.w	800b862 <__retarget_lock_acquire_recursive>
 800b5fa:	bf00      	nop
 800b5fc:	200022b5 	.word	0x200022b5

0800b600 <__sfp_lock_release>:
 800b600:	4801      	ldr	r0, [pc, #4]	; (800b608 <__sfp_lock_release+0x8>)
 800b602:	f000 b92f 	b.w	800b864 <__retarget_lock_release_recursive>
 800b606:	bf00      	nop
 800b608:	200022b5 	.word	0x200022b5

0800b60c <__sinit>:
 800b60c:	b510      	push	{r4, lr}
 800b60e:	4604      	mov	r4, r0
 800b610:	f7ff fff0 	bl	800b5f4 <__sfp_lock_acquire>
 800b614:	6a23      	ldr	r3, [r4, #32]
 800b616:	b11b      	cbz	r3, 800b620 <__sinit+0x14>
 800b618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b61c:	f7ff bff0 	b.w	800b600 <__sfp_lock_release>
 800b620:	4b04      	ldr	r3, [pc, #16]	; (800b634 <__sinit+0x28>)
 800b622:	6223      	str	r3, [r4, #32]
 800b624:	4b04      	ldr	r3, [pc, #16]	; (800b638 <__sinit+0x2c>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1f5      	bne.n	800b618 <__sinit+0xc>
 800b62c:	f7ff ffc4 	bl	800b5b8 <global_stdio_init.part.0>
 800b630:	e7f2      	b.n	800b618 <__sinit+0xc>
 800b632:	bf00      	nop
 800b634:	0800b579 	.word	0x0800b579
 800b638:	200022ac 	.word	0x200022ac

0800b63c <_fwalk_sglue>:
 800b63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b640:	4607      	mov	r7, r0
 800b642:	4688      	mov	r8, r1
 800b644:	4614      	mov	r4, r2
 800b646:	2600      	movs	r6, #0
 800b648:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b64c:	f1b9 0901 	subs.w	r9, r9, #1
 800b650:	d505      	bpl.n	800b65e <_fwalk_sglue+0x22>
 800b652:	6824      	ldr	r4, [r4, #0]
 800b654:	2c00      	cmp	r4, #0
 800b656:	d1f7      	bne.n	800b648 <_fwalk_sglue+0xc>
 800b658:	4630      	mov	r0, r6
 800b65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b65e:	89ab      	ldrh	r3, [r5, #12]
 800b660:	2b01      	cmp	r3, #1
 800b662:	d907      	bls.n	800b674 <_fwalk_sglue+0x38>
 800b664:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b668:	3301      	adds	r3, #1
 800b66a:	d003      	beq.n	800b674 <_fwalk_sglue+0x38>
 800b66c:	4629      	mov	r1, r5
 800b66e:	4638      	mov	r0, r7
 800b670:	47c0      	blx	r8
 800b672:	4306      	orrs	r6, r0
 800b674:	3568      	adds	r5, #104	; 0x68
 800b676:	e7e9      	b.n	800b64c <_fwalk_sglue+0x10>

0800b678 <sniprintf>:
 800b678:	b40c      	push	{r2, r3}
 800b67a:	b530      	push	{r4, r5, lr}
 800b67c:	4b17      	ldr	r3, [pc, #92]	; (800b6dc <sniprintf+0x64>)
 800b67e:	1e0c      	subs	r4, r1, #0
 800b680:	681d      	ldr	r5, [r3, #0]
 800b682:	b09d      	sub	sp, #116	; 0x74
 800b684:	da08      	bge.n	800b698 <sniprintf+0x20>
 800b686:	238b      	movs	r3, #139	; 0x8b
 800b688:	602b      	str	r3, [r5, #0]
 800b68a:	f04f 30ff 	mov.w	r0, #4294967295
 800b68e:	b01d      	add	sp, #116	; 0x74
 800b690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b694:	b002      	add	sp, #8
 800b696:	4770      	bx	lr
 800b698:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b69c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b6a0:	bf14      	ite	ne
 800b6a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b6a6:	4623      	moveq	r3, r4
 800b6a8:	9304      	str	r3, [sp, #16]
 800b6aa:	9307      	str	r3, [sp, #28]
 800b6ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6b0:	9002      	str	r0, [sp, #8]
 800b6b2:	9006      	str	r0, [sp, #24]
 800b6b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b6b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b6ba:	ab21      	add	r3, sp, #132	; 0x84
 800b6bc:	a902      	add	r1, sp, #8
 800b6be:	4628      	mov	r0, r5
 800b6c0:	9301      	str	r3, [sp, #4]
 800b6c2:	f001 fc21 	bl	800cf08 <_svfiprintf_r>
 800b6c6:	1c43      	adds	r3, r0, #1
 800b6c8:	bfbc      	itt	lt
 800b6ca:	238b      	movlt	r3, #139	; 0x8b
 800b6cc:	602b      	strlt	r3, [r5, #0]
 800b6ce:	2c00      	cmp	r4, #0
 800b6d0:	d0dd      	beq.n	800b68e <sniprintf+0x16>
 800b6d2:	9b02      	ldr	r3, [sp, #8]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	701a      	strb	r2, [r3, #0]
 800b6d8:	e7d9      	b.n	800b68e <sniprintf+0x16>
 800b6da:	bf00      	nop
 800b6dc:	20000178 	.word	0x20000178

0800b6e0 <__sread>:
 800b6e0:	b510      	push	{r4, lr}
 800b6e2:	460c      	mov	r4, r1
 800b6e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6e8:	f000 f86c 	bl	800b7c4 <_read_r>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	bfab      	itete	ge
 800b6f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6f2:	89a3      	ldrhlt	r3, [r4, #12]
 800b6f4:	181b      	addge	r3, r3, r0
 800b6f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6fa:	bfac      	ite	ge
 800b6fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6fe:	81a3      	strhlt	r3, [r4, #12]
 800b700:	bd10      	pop	{r4, pc}

0800b702 <__swrite>:
 800b702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b706:	461f      	mov	r7, r3
 800b708:	898b      	ldrh	r3, [r1, #12]
 800b70a:	05db      	lsls	r3, r3, #23
 800b70c:	4605      	mov	r5, r0
 800b70e:	460c      	mov	r4, r1
 800b710:	4616      	mov	r6, r2
 800b712:	d505      	bpl.n	800b720 <__swrite+0x1e>
 800b714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b718:	2302      	movs	r3, #2
 800b71a:	2200      	movs	r2, #0
 800b71c:	f000 f840 	bl	800b7a0 <_lseek_r>
 800b720:	89a3      	ldrh	r3, [r4, #12]
 800b722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b72a:	81a3      	strh	r3, [r4, #12]
 800b72c:	4632      	mov	r2, r6
 800b72e:	463b      	mov	r3, r7
 800b730:	4628      	mov	r0, r5
 800b732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b736:	f000 b857 	b.w	800b7e8 <_write_r>

0800b73a <__sseek>:
 800b73a:	b510      	push	{r4, lr}
 800b73c:	460c      	mov	r4, r1
 800b73e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b742:	f000 f82d 	bl	800b7a0 <_lseek_r>
 800b746:	1c43      	adds	r3, r0, #1
 800b748:	89a3      	ldrh	r3, [r4, #12]
 800b74a:	bf15      	itete	ne
 800b74c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b74e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b756:	81a3      	strheq	r3, [r4, #12]
 800b758:	bf18      	it	ne
 800b75a:	81a3      	strhne	r3, [r4, #12]
 800b75c:	bd10      	pop	{r4, pc}

0800b75e <__sclose>:
 800b75e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b762:	f000 b80d 	b.w	800b780 <_close_r>

0800b766 <memset>:
 800b766:	4402      	add	r2, r0
 800b768:	4603      	mov	r3, r0
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d100      	bne.n	800b770 <memset+0xa>
 800b76e:	4770      	bx	lr
 800b770:	f803 1b01 	strb.w	r1, [r3], #1
 800b774:	e7f9      	b.n	800b76a <memset+0x4>
	...

0800b778 <_localeconv_r>:
 800b778:	4800      	ldr	r0, [pc, #0]	; (800b77c <_localeconv_r+0x4>)
 800b77a:	4770      	bx	lr
 800b77c:	2000026c 	.word	0x2000026c

0800b780 <_close_r>:
 800b780:	b538      	push	{r3, r4, r5, lr}
 800b782:	4d06      	ldr	r5, [pc, #24]	; (800b79c <_close_r+0x1c>)
 800b784:	2300      	movs	r3, #0
 800b786:	4604      	mov	r4, r0
 800b788:	4608      	mov	r0, r1
 800b78a:	602b      	str	r3, [r5, #0]
 800b78c:	f7f6 fb87 	bl	8001e9e <_close>
 800b790:	1c43      	adds	r3, r0, #1
 800b792:	d102      	bne.n	800b79a <_close_r+0x1a>
 800b794:	682b      	ldr	r3, [r5, #0]
 800b796:	b103      	cbz	r3, 800b79a <_close_r+0x1a>
 800b798:	6023      	str	r3, [r4, #0]
 800b79a:	bd38      	pop	{r3, r4, r5, pc}
 800b79c:	200022b0 	.word	0x200022b0

0800b7a0 <_lseek_r>:
 800b7a0:	b538      	push	{r3, r4, r5, lr}
 800b7a2:	4d07      	ldr	r5, [pc, #28]	; (800b7c0 <_lseek_r+0x20>)
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	4608      	mov	r0, r1
 800b7a8:	4611      	mov	r1, r2
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	602a      	str	r2, [r5, #0]
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	f7f6 fb9c 	bl	8001eec <_lseek>
 800b7b4:	1c43      	adds	r3, r0, #1
 800b7b6:	d102      	bne.n	800b7be <_lseek_r+0x1e>
 800b7b8:	682b      	ldr	r3, [r5, #0]
 800b7ba:	b103      	cbz	r3, 800b7be <_lseek_r+0x1e>
 800b7bc:	6023      	str	r3, [r4, #0]
 800b7be:	bd38      	pop	{r3, r4, r5, pc}
 800b7c0:	200022b0 	.word	0x200022b0

0800b7c4 <_read_r>:
 800b7c4:	b538      	push	{r3, r4, r5, lr}
 800b7c6:	4d07      	ldr	r5, [pc, #28]	; (800b7e4 <_read_r+0x20>)
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	4608      	mov	r0, r1
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	602a      	str	r2, [r5, #0]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	f7f6 fb2a 	bl	8001e2c <_read>
 800b7d8:	1c43      	adds	r3, r0, #1
 800b7da:	d102      	bne.n	800b7e2 <_read_r+0x1e>
 800b7dc:	682b      	ldr	r3, [r5, #0]
 800b7de:	b103      	cbz	r3, 800b7e2 <_read_r+0x1e>
 800b7e0:	6023      	str	r3, [r4, #0]
 800b7e2:	bd38      	pop	{r3, r4, r5, pc}
 800b7e4:	200022b0 	.word	0x200022b0

0800b7e8 <_write_r>:
 800b7e8:	b538      	push	{r3, r4, r5, lr}
 800b7ea:	4d07      	ldr	r5, [pc, #28]	; (800b808 <_write_r+0x20>)
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	4608      	mov	r0, r1
 800b7f0:	4611      	mov	r1, r2
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	602a      	str	r2, [r5, #0]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	f7f6 fb35 	bl	8001e66 <_write>
 800b7fc:	1c43      	adds	r3, r0, #1
 800b7fe:	d102      	bne.n	800b806 <_write_r+0x1e>
 800b800:	682b      	ldr	r3, [r5, #0]
 800b802:	b103      	cbz	r3, 800b806 <_write_r+0x1e>
 800b804:	6023      	str	r3, [r4, #0]
 800b806:	bd38      	pop	{r3, r4, r5, pc}
 800b808:	200022b0 	.word	0x200022b0

0800b80c <__errno>:
 800b80c:	4b01      	ldr	r3, [pc, #4]	; (800b814 <__errno+0x8>)
 800b80e:	6818      	ldr	r0, [r3, #0]
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop
 800b814:	20000178 	.word	0x20000178

0800b818 <__libc_init_array>:
 800b818:	b570      	push	{r4, r5, r6, lr}
 800b81a:	4d0d      	ldr	r5, [pc, #52]	; (800b850 <__libc_init_array+0x38>)
 800b81c:	4c0d      	ldr	r4, [pc, #52]	; (800b854 <__libc_init_array+0x3c>)
 800b81e:	1b64      	subs	r4, r4, r5
 800b820:	10a4      	asrs	r4, r4, #2
 800b822:	2600      	movs	r6, #0
 800b824:	42a6      	cmp	r6, r4
 800b826:	d109      	bne.n	800b83c <__libc_init_array+0x24>
 800b828:	4d0b      	ldr	r5, [pc, #44]	; (800b858 <__libc_init_array+0x40>)
 800b82a:	4c0c      	ldr	r4, [pc, #48]	; (800b85c <__libc_init_array+0x44>)
 800b82c:	f002 f894 	bl	800d958 <_init>
 800b830:	1b64      	subs	r4, r4, r5
 800b832:	10a4      	asrs	r4, r4, #2
 800b834:	2600      	movs	r6, #0
 800b836:	42a6      	cmp	r6, r4
 800b838:	d105      	bne.n	800b846 <__libc_init_array+0x2e>
 800b83a:	bd70      	pop	{r4, r5, r6, pc}
 800b83c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b840:	4798      	blx	r3
 800b842:	3601      	adds	r6, #1
 800b844:	e7ee      	b.n	800b824 <__libc_init_array+0xc>
 800b846:	f855 3b04 	ldr.w	r3, [r5], #4
 800b84a:	4798      	blx	r3
 800b84c:	3601      	adds	r6, #1
 800b84e:	e7f2      	b.n	800b836 <__libc_init_array+0x1e>
 800b850:	0800dd64 	.word	0x0800dd64
 800b854:	0800dd64 	.word	0x0800dd64
 800b858:	0800dd64 	.word	0x0800dd64
 800b85c:	0800dd68 	.word	0x0800dd68

0800b860 <__retarget_lock_init_recursive>:
 800b860:	4770      	bx	lr

0800b862 <__retarget_lock_acquire_recursive>:
 800b862:	4770      	bx	lr

0800b864 <__retarget_lock_release_recursive>:
 800b864:	4770      	bx	lr

0800b866 <quorem>:
 800b866:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86a:	6903      	ldr	r3, [r0, #16]
 800b86c:	690c      	ldr	r4, [r1, #16]
 800b86e:	42a3      	cmp	r3, r4
 800b870:	4607      	mov	r7, r0
 800b872:	db7e      	blt.n	800b972 <quorem+0x10c>
 800b874:	3c01      	subs	r4, #1
 800b876:	f101 0814 	add.w	r8, r1, #20
 800b87a:	f100 0514 	add.w	r5, r0, #20
 800b87e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b882:	9301      	str	r3, [sp, #4]
 800b884:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b88c:	3301      	adds	r3, #1
 800b88e:	429a      	cmp	r2, r3
 800b890:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b894:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b898:	fbb2 f6f3 	udiv	r6, r2, r3
 800b89c:	d331      	bcc.n	800b902 <quorem+0x9c>
 800b89e:	f04f 0e00 	mov.w	lr, #0
 800b8a2:	4640      	mov	r0, r8
 800b8a4:	46ac      	mov	ip, r5
 800b8a6:	46f2      	mov	sl, lr
 800b8a8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b8ac:	b293      	uxth	r3, r2
 800b8ae:	fb06 e303 	mla	r3, r6, r3, lr
 800b8b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b8b6:	0c1a      	lsrs	r2, r3, #16
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	ebaa 0303 	sub.w	r3, sl, r3
 800b8be:	f8dc a000 	ldr.w	sl, [ip]
 800b8c2:	fa13 f38a 	uxtah	r3, r3, sl
 800b8c6:	fb06 220e 	mla	r2, r6, lr, r2
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	9b00      	ldr	r3, [sp, #0]
 800b8ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b8d2:	b292      	uxth	r2, r2
 800b8d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b8d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8dc:	f8bd 3000 	ldrh.w	r3, [sp]
 800b8e0:	4581      	cmp	r9, r0
 800b8e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8e6:	f84c 3b04 	str.w	r3, [ip], #4
 800b8ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b8ee:	d2db      	bcs.n	800b8a8 <quorem+0x42>
 800b8f0:	f855 300b 	ldr.w	r3, [r5, fp]
 800b8f4:	b92b      	cbnz	r3, 800b902 <quorem+0x9c>
 800b8f6:	9b01      	ldr	r3, [sp, #4]
 800b8f8:	3b04      	subs	r3, #4
 800b8fa:	429d      	cmp	r5, r3
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	d32c      	bcc.n	800b95a <quorem+0xf4>
 800b900:	613c      	str	r4, [r7, #16]
 800b902:	4638      	mov	r0, r7
 800b904:	f001 f9a6 	bl	800cc54 <__mcmp>
 800b908:	2800      	cmp	r0, #0
 800b90a:	db22      	blt.n	800b952 <quorem+0xec>
 800b90c:	3601      	adds	r6, #1
 800b90e:	4629      	mov	r1, r5
 800b910:	2000      	movs	r0, #0
 800b912:	f858 2b04 	ldr.w	r2, [r8], #4
 800b916:	f8d1 c000 	ldr.w	ip, [r1]
 800b91a:	b293      	uxth	r3, r2
 800b91c:	1ac3      	subs	r3, r0, r3
 800b91e:	0c12      	lsrs	r2, r2, #16
 800b920:	fa13 f38c 	uxtah	r3, r3, ip
 800b924:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b928:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b932:	45c1      	cmp	r9, r8
 800b934:	f841 3b04 	str.w	r3, [r1], #4
 800b938:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b93c:	d2e9      	bcs.n	800b912 <quorem+0xac>
 800b93e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b942:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b946:	b922      	cbnz	r2, 800b952 <quorem+0xec>
 800b948:	3b04      	subs	r3, #4
 800b94a:	429d      	cmp	r5, r3
 800b94c:	461a      	mov	r2, r3
 800b94e:	d30a      	bcc.n	800b966 <quorem+0x100>
 800b950:	613c      	str	r4, [r7, #16]
 800b952:	4630      	mov	r0, r6
 800b954:	b003      	add	sp, #12
 800b956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95a:	6812      	ldr	r2, [r2, #0]
 800b95c:	3b04      	subs	r3, #4
 800b95e:	2a00      	cmp	r2, #0
 800b960:	d1ce      	bne.n	800b900 <quorem+0x9a>
 800b962:	3c01      	subs	r4, #1
 800b964:	e7c9      	b.n	800b8fa <quorem+0x94>
 800b966:	6812      	ldr	r2, [r2, #0]
 800b968:	3b04      	subs	r3, #4
 800b96a:	2a00      	cmp	r2, #0
 800b96c:	d1f0      	bne.n	800b950 <quorem+0xea>
 800b96e:	3c01      	subs	r4, #1
 800b970:	e7eb      	b.n	800b94a <quorem+0xe4>
 800b972:	2000      	movs	r0, #0
 800b974:	e7ee      	b.n	800b954 <quorem+0xee>
	...

0800b978 <_dtoa_r>:
 800b978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b97c:	ed2d 8b04 	vpush	{d8-d9}
 800b980:	69c5      	ldr	r5, [r0, #28]
 800b982:	b093      	sub	sp, #76	; 0x4c
 800b984:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b988:	ec57 6b10 	vmov	r6, r7, d0
 800b98c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b990:	9107      	str	r1, [sp, #28]
 800b992:	4604      	mov	r4, r0
 800b994:	920a      	str	r2, [sp, #40]	; 0x28
 800b996:	930d      	str	r3, [sp, #52]	; 0x34
 800b998:	b975      	cbnz	r5, 800b9b8 <_dtoa_r+0x40>
 800b99a:	2010      	movs	r0, #16
 800b99c:	f000 fe2a 	bl	800c5f4 <malloc>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	61e0      	str	r0, [r4, #28]
 800b9a4:	b920      	cbnz	r0, 800b9b0 <_dtoa_r+0x38>
 800b9a6:	4bae      	ldr	r3, [pc, #696]	; (800bc60 <_dtoa_r+0x2e8>)
 800b9a8:	21ef      	movs	r1, #239	; 0xef
 800b9aa:	48ae      	ldr	r0, [pc, #696]	; (800bc64 <_dtoa_r+0x2ec>)
 800b9ac:	f001 fc90 	bl	800d2d0 <__assert_func>
 800b9b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b9b4:	6005      	str	r5, [r0, #0]
 800b9b6:	60c5      	str	r5, [r0, #12]
 800b9b8:	69e3      	ldr	r3, [r4, #28]
 800b9ba:	6819      	ldr	r1, [r3, #0]
 800b9bc:	b151      	cbz	r1, 800b9d4 <_dtoa_r+0x5c>
 800b9be:	685a      	ldr	r2, [r3, #4]
 800b9c0:	604a      	str	r2, [r1, #4]
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	4093      	lsls	r3, r2
 800b9c6:	608b      	str	r3, [r1, #8]
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f000 ff07 	bl	800c7dc <_Bfree>
 800b9ce:	69e3      	ldr	r3, [r4, #28]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	601a      	str	r2, [r3, #0]
 800b9d4:	1e3b      	subs	r3, r7, #0
 800b9d6:	bfbb      	ittet	lt
 800b9d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b9dc:	9303      	strlt	r3, [sp, #12]
 800b9de:	2300      	movge	r3, #0
 800b9e0:	2201      	movlt	r2, #1
 800b9e2:	bfac      	ite	ge
 800b9e4:	f8c8 3000 	strge.w	r3, [r8]
 800b9e8:	f8c8 2000 	strlt.w	r2, [r8]
 800b9ec:	4b9e      	ldr	r3, [pc, #632]	; (800bc68 <_dtoa_r+0x2f0>)
 800b9ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b9f2:	ea33 0308 	bics.w	r3, r3, r8
 800b9f6:	d11b      	bne.n	800ba30 <_dtoa_r+0xb8>
 800b9f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9fa:	f242 730f 	movw	r3, #9999	; 0x270f
 800b9fe:	6013      	str	r3, [r2, #0]
 800ba00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ba04:	4333      	orrs	r3, r6
 800ba06:	f000 8593 	beq.w	800c530 <_dtoa_r+0xbb8>
 800ba0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba0c:	b963      	cbnz	r3, 800ba28 <_dtoa_r+0xb0>
 800ba0e:	4b97      	ldr	r3, [pc, #604]	; (800bc6c <_dtoa_r+0x2f4>)
 800ba10:	e027      	b.n	800ba62 <_dtoa_r+0xea>
 800ba12:	4b97      	ldr	r3, [pc, #604]	; (800bc70 <_dtoa_r+0x2f8>)
 800ba14:	9300      	str	r3, [sp, #0]
 800ba16:	3308      	adds	r3, #8
 800ba18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ba1a:	6013      	str	r3, [r2, #0]
 800ba1c:	9800      	ldr	r0, [sp, #0]
 800ba1e:	b013      	add	sp, #76	; 0x4c
 800ba20:	ecbd 8b04 	vpop	{d8-d9}
 800ba24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba28:	4b90      	ldr	r3, [pc, #576]	; (800bc6c <_dtoa_r+0x2f4>)
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	3303      	adds	r3, #3
 800ba2e:	e7f3      	b.n	800ba18 <_dtoa_r+0xa0>
 800ba30:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba34:	2200      	movs	r2, #0
 800ba36:	ec51 0b17 	vmov	r0, r1, d7
 800ba3a:	eeb0 8a47 	vmov.f32	s16, s14
 800ba3e:	eef0 8a67 	vmov.f32	s17, s15
 800ba42:	2300      	movs	r3, #0
 800ba44:	f7f5 f848 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba48:	4681      	mov	r9, r0
 800ba4a:	b160      	cbz	r0, 800ba66 <_dtoa_r+0xee>
 800ba4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba4e:	2301      	movs	r3, #1
 800ba50:	6013      	str	r3, [r2, #0]
 800ba52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f000 8568 	beq.w	800c52a <_dtoa_r+0xbb2>
 800ba5a:	4b86      	ldr	r3, [pc, #536]	; (800bc74 <_dtoa_r+0x2fc>)
 800ba5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ba5e:	6013      	str	r3, [r2, #0]
 800ba60:	3b01      	subs	r3, #1
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	e7da      	b.n	800ba1c <_dtoa_r+0xa4>
 800ba66:	aa10      	add	r2, sp, #64	; 0x40
 800ba68:	a911      	add	r1, sp, #68	; 0x44
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	eeb0 0a48 	vmov.f32	s0, s16
 800ba70:	eef0 0a68 	vmov.f32	s1, s17
 800ba74:	f001 f994 	bl	800cda0 <__d2b>
 800ba78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ba7c:	4682      	mov	sl, r0
 800ba7e:	2d00      	cmp	r5, #0
 800ba80:	d07f      	beq.n	800bb82 <_dtoa_r+0x20a>
 800ba82:	ee18 3a90 	vmov	r3, s17
 800ba86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ba8e:	ec51 0b18 	vmov	r0, r1, d8
 800ba92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ba96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ba9e:	4619      	mov	r1, r3
 800baa0:	2200      	movs	r2, #0
 800baa2:	4b75      	ldr	r3, [pc, #468]	; (800bc78 <_dtoa_r+0x300>)
 800baa4:	f7f4 fbf8 	bl	8000298 <__aeabi_dsub>
 800baa8:	a367      	add	r3, pc, #412	; (adr r3, 800bc48 <_dtoa_r+0x2d0>)
 800baaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baae:	f7f4 fdab 	bl	8000608 <__aeabi_dmul>
 800bab2:	a367      	add	r3, pc, #412	; (adr r3, 800bc50 <_dtoa_r+0x2d8>)
 800bab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab8:	f7f4 fbf0 	bl	800029c <__adddf3>
 800babc:	4606      	mov	r6, r0
 800babe:	4628      	mov	r0, r5
 800bac0:	460f      	mov	r7, r1
 800bac2:	f7f4 fd37 	bl	8000534 <__aeabi_i2d>
 800bac6:	a364      	add	r3, pc, #400	; (adr r3, 800bc58 <_dtoa_r+0x2e0>)
 800bac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bacc:	f7f4 fd9c 	bl	8000608 <__aeabi_dmul>
 800bad0:	4602      	mov	r2, r0
 800bad2:	460b      	mov	r3, r1
 800bad4:	4630      	mov	r0, r6
 800bad6:	4639      	mov	r1, r7
 800bad8:	f7f4 fbe0 	bl	800029c <__adddf3>
 800badc:	4606      	mov	r6, r0
 800bade:	460f      	mov	r7, r1
 800bae0:	f7f5 f842 	bl	8000b68 <__aeabi_d2iz>
 800bae4:	2200      	movs	r2, #0
 800bae6:	4683      	mov	fp, r0
 800bae8:	2300      	movs	r3, #0
 800baea:	4630      	mov	r0, r6
 800baec:	4639      	mov	r1, r7
 800baee:	f7f4 fffd 	bl	8000aec <__aeabi_dcmplt>
 800baf2:	b148      	cbz	r0, 800bb08 <_dtoa_r+0x190>
 800baf4:	4658      	mov	r0, fp
 800baf6:	f7f4 fd1d 	bl	8000534 <__aeabi_i2d>
 800bafa:	4632      	mov	r2, r6
 800bafc:	463b      	mov	r3, r7
 800bafe:	f7f4 ffeb 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb02:	b908      	cbnz	r0, 800bb08 <_dtoa_r+0x190>
 800bb04:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb08:	f1bb 0f16 	cmp.w	fp, #22
 800bb0c:	d857      	bhi.n	800bbbe <_dtoa_r+0x246>
 800bb0e:	4b5b      	ldr	r3, [pc, #364]	; (800bc7c <_dtoa_r+0x304>)
 800bb10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb18:	ec51 0b18 	vmov	r0, r1, d8
 800bb1c:	f7f4 ffe6 	bl	8000aec <__aeabi_dcmplt>
 800bb20:	2800      	cmp	r0, #0
 800bb22:	d04e      	beq.n	800bbc2 <_dtoa_r+0x24a>
 800bb24:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb28:	2300      	movs	r3, #0
 800bb2a:	930c      	str	r3, [sp, #48]	; 0x30
 800bb2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb2e:	1b5b      	subs	r3, r3, r5
 800bb30:	1e5a      	subs	r2, r3, #1
 800bb32:	bf45      	ittet	mi
 800bb34:	f1c3 0301 	rsbmi	r3, r3, #1
 800bb38:	9305      	strmi	r3, [sp, #20]
 800bb3a:	2300      	movpl	r3, #0
 800bb3c:	2300      	movmi	r3, #0
 800bb3e:	9206      	str	r2, [sp, #24]
 800bb40:	bf54      	ite	pl
 800bb42:	9305      	strpl	r3, [sp, #20]
 800bb44:	9306      	strmi	r3, [sp, #24]
 800bb46:	f1bb 0f00 	cmp.w	fp, #0
 800bb4a:	db3c      	blt.n	800bbc6 <_dtoa_r+0x24e>
 800bb4c:	9b06      	ldr	r3, [sp, #24]
 800bb4e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bb52:	445b      	add	r3, fp
 800bb54:	9306      	str	r3, [sp, #24]
 800bb56:	2300      	movs	r3, #0
 800bb58:	9308      	str	r3, [sp, #32]
 800bb5a:	9b07      	ldr	r3, [sp, #28]
 800bb5c:	2b09      	cmp	r3, #9
 800bb5e:	d868      	bhi.n	800bc32 <_dtoa_r+0x2ba>
 800bb60:	2b05      	cmp	r3, #5
 800bb62:	bfc4      	itt	gt
 800bb64:	3b04      	subgt	r3, #4
 800bb66:	9307      	strgt	r3, [sp, #28]
 800bb68:	9b07      	ldr	r3, [sp, #28]
 800bb6a:	f1a3 0302 	sub.w	r3, r3, #2
 800bb6e:	bfcc      	ite	gt
 800bb70:	2500      	movgt	r5, #0
 800bb72:	2501      	movle	r5, #1
 800bb74:	2b03      	cmp	r3, #3
 800bb76:	f200 8085 	bhi.w	800bc84 <_dtoa_r+0x30c>
 800bb7a:	e8df f003 	tbb	[pc, r3]
 800bb7e:	3b2e      	.short	0x3b2e
 800bb80:	5839      	.short	0x5839
 800bb82:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bb86:	441d      	add	r5, r3
 800bb88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bb8c:	2b20      	cmp	r3, #32
 800bb8e:	bfc1      	itttt	gt
 800bb90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bb94:	fa08 f803 	lslgt.w	r8, r8, r3
 800bb98:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bb9c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bba0:	bfd6      	itet	le
 800bba2:	f1c3 0320 	rsble	r3, r3, #32
 800bba6:	ea48 0003 	orrgt.w	r0, r8, r3
 800bbaa:	fa06 f003 	lslle.w	r0, r6, r3
 800bbae:	f7f4 fcb1 	bl	8000514 <__aeabi_ui2d>
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bbb8:	3d01      	subs	r5, #1
 800bbba:	920e      	str	r2, [sp, #56]	; 0x38
 800bbbc:	e76f      	b.n	800ba9e <_dtoa_r+0x126>
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	e7b3      	b.n	800bb2a <_dtoa_r+0x1b2>
 800bbc2:	900c      	str	r0, [sp, #48]	; 0x30
 800bbc4:	e7b2      	b.n	800bb2c <_dtoa_r+0x1b4>
 800bbc6:	9b05      	ldr	r3, [sp, #20]
 800bbc8:	eba3 030b 	sub.w	r3, r3, fp
 800bbcc:	9305      	str	r3, [sp, #20]
 800bbce:	f1cb 0300 	rsb	r3, fp, #0
 800bbd2:	9308      	str	r3, [sp, #32]
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbd8:	e7bf      	b.n	800bb5a <_dtoa_r+0x1e2>
 800bbda:	2300      	movs	r3, #0
 800bbdc:	9309      	str	r3, [sp, #36]	; 0x24
 800bbde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	dc52      	bgt.n	800bc8a <_dtoa_r+0x312>
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	9301      	str	r3, [sp, #4]
 800bbe8:	9304      	str	r3, [sp, #16]
 800bbea:	461a      	mov	r2, r3
 800bbec:	920a      	str	r2, [sp, #40]	; 0x28
 800bbee:	e00b      	b.n	800bc08 <_dtoa_r+0x290>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e7f3      	b.n	800bbdc <_dtoa_r+0x264>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	9309      	str	r3, [sp, #36]	; 0x24
 800bbf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbfa:	445b      	add	r3, fp
 800bbfc:	9301      	str	r3, [sp, #4]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	9304      	str	r3, [sp, #16]
 800bc04:	bfb8      	it	lt
 800bc06:	2301      	movlt	r3, #1
 800bc08:	69e0      	ldr	r0, [r4, #28]
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	2204      	movs	r2, #4
 800bc0e:	f102 0614 	add.w	r6, r2, #20
 800bc12:	429e      	cmp	r6, r3
 800bc14:	d93d      	bls.n	800bc92 <_dtoa_r+0x31a>
 800bc16:	6041      	str	r1, [r0, #4]
 800bc18:	4620      	mov	r0, r4
 800bc1a:	f000 fd9f 	bl	800c75c <_Balloc>
 800bc1e:	9000      	str	r0, [sp, #0]
 800bc20:	2800      	cmp	r0, #0
 800bc22:	d139      	bne.n	800bc98 <_dtoa_r+0x320>
 800bc24:	4b16      	ldr	r3, [pc, #88]	; (800bc80 <_dtoa_r+0x308>)
 800bc26:	4602      	mov	r2, r0
 800bc28:	f240 11af 	movw	r1, #431	; 0x1af
 800bc2c:	e6bd      	b.n	800b9aa <_dtoa_r+0x32>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e7e1      	b.n	800bbf6 <_dtoa_r+0x27e>
 800bc32:	2501      	movs	r5, #1
 800bc34:	2300      	movs	r3, #0
 800bc36:	9307      	str	r3, [sp, #28]
 800bc38:	9509      	str	r5, [sp, #36]	; 0x24
 800bc3a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc3e:	9301      	str	r3, [sp, #4]
 800bc40:	9304      	str	r3, [sp, #16]
 800bc42:	2200      	movs	r2, #0
 800bc44:	2312      	movs	r3, #18
 800bc46:	e7d1      	b.n	800bbec <_dtoa_r+0x274>
 800bc48:	636f4361 	.word	0x636f4361
 800bc4c:	3fd287a7 	.word	0x3fd287a7
 800bc50:	8b60c8b3 	.word	0x8b60c8b3
 800bc54:	3fc68a28 	.word	0x3fc68a28
 800bc58:	509f79fb 	.word	0x509f79fb
 800bc5c:	3fd34413 	.word	0x3fd34413
 800bc60:	0800da29 	.word	0x0800da29
 800bc64:	0800da40 	.word	0x0800da40
 800bc68:	7ff00000 	.word	0x7ff00000
 800bc6c:	0800da25 	.word	0x0800da25
 800bc70:	0800da1c 	.word	0x0800da1c
 800bc74:	0800d9f9 	.word	0x0800d9f9
 800bc78:	3ff80000 	.word	0x3ff80000
 800bc7c:	0800db30 	.word	0x0800db30
 800bc80:	0800da98 	.word	0x0800da98
 800bc84:	2301      	movs	r3, #1
 800bc86:	9309      	str	r3, [sp, #36]	; 0x24
 800bc88:	e7d7      	b.n	800bc3a <_dtoa_r+0x2c2>
 800bc8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	9304      	str	r3, [sp, #16]
 800bc90:	e7ba      	b.n	800bc08 <_dtoa_r+0x290>
 800bc92:	3101      	adds	r1, #1
 800bc94:	0052      	lsls	r2, r2, #1
 800bc96:	e7ba      	b.n	800bc0e <_dtoa_r+0x296>
 800bc98:	69e3      	ldr	r3, [r4, #28]
 800bc9a:	9a00      	ldr	r2, [sp, #0]
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	9b04      	ldr	r3, [sp, #16]
 800bca0:	2b0e      	cmp	r3, #14
 800bca2:	f200 80a8 	bhi.w	800bdf6 <_dtoa_r+0x47e>
 800bca6:	2d00      	cmp	r5, #0
 800bca8:	f000 80a5 	beq.w	800bdf6 <_dtoa_r+0x47e>
 800bcac:	f1bb 0f00 	cmp.w	fp, #0
 800bcb0:	dd38      	ble.n	800bd24 <_dtoa_r+0x3ac>
 800bcb2:	4bc0      	ldr	r3, [pc, #768]	; (800bfb4 <_dtoa_r+0x63c>)
 800bcb4:	f00b 020f 	and.w	r2, fp, #15
 800bcb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcbc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bcc0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bcc4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bcc8:	d019      	beq.n	800bcfe <_dtoa_r+0x386>
 800bcca:	4bbb      	ldr	r3, [pc, #748]	; (800bfb8 <_dtoa_r+0x640>)
 800bccc:	ec51 0b18 	vmov	r0, r1, d8
 800bcd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bcd4:	f7f4 fdc2 	bl	800085c <__aeabi_ddiv>
 800bcd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcdc:	f008 080f 	and.w	r8, r8, #15
 800bce0:	2503      	movs	r5, #3
 800bce2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bfb8 <_dtoa_r+0x640>
 800bce6:	f1b8 0f00 	cmp.w	r8, #0
 800bcea:	d10a      	bne.n	800bd02 <_dtoa_r+0x38a>
 800bcec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	463b      	mov	r3, r7
 800bcf4:	f7f4 fdb2 	bl	800085c <__aeabi_ddiv>
 800bcf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcfc:	e02b      	b.n	800bd56 <_dtoa_r+0x3de>
 800bcfe:	2502      	movs	r5, #2
 800bd00:	e7ef      	b.n	800bce2 <_dtoa_r+0x36a>
 800bd02:	f018 0f01 	tst.w	r8, #1
 800bd06:	d008      	beq.n	800bd1a <_dtoa_r+0x3a2>
 800bd08:	4630      	mov	r0, r6
 800bd0a:	4639      	mov	r1, r7
 800bd0c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bd10:	f7f4 fc7a 	bl	8000608 <__aeabi_dmul>
 800bd14:	3501      	adds	r5, #1
 800bd16:	4606      	mov	r6, r0
 800bd18:	460f      	mov	r7, r1
 800bd1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bd1e:	f109 0908 	add.w	r9, r9, #8
 800bd22:	e7e0      	b.n	800bce6 <_dtoa_r+0x36e>
 800bd24:	f000 809f 	beq.w	800be66 <_dtoa_r+0x4ee>
 800bd28:	f1cb 0600 	rsb	r6, fp, #0
 800bd2c:	4ba1      	ldr	r3, [pc, #644]	; (800bfb4 <_dtoa_r+0x63c>)
 800bd2e:	4fa2      	ldr	r7, [pc, #648]	; (800bfb8 <_dtoa_r+0x640>)
 800bd30:	f006 020f 	and.w	r2, r6, #15
 800bd34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3c:	ec51 0b18 	vmov	r0, r1, d8
 800bd40:	f7f4 fc62 	bl	8000608 <__aeabi_dmul>
 800bd44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd48:	1136      	asrs	r6, r6, #4
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	2502      	movs	r5, #2
 800bd4e:	2e00      	cmp	r6, #0
 800bd50:	d17e      	bne.n	800be50 <_dtoa_r+0x4d8>
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d1d0      	bne.n	800bcf8 <_dtoa_r+0x380>
 800bd56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd58:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f000 8084 	beq.w	800be6a <_dtoa_r+0x4f2>
 800bd62:	4b96      	ldr	r3, [pc, #600]	; (800bfbc <_dtoa_r+0x644>)
 800bd64:	2200      	movs	r2, #0
 800bd66:	4640      	mov	r0, r8
 800bd68:	4649      	mov	r1, r9
 800bd6a:	f7f4 febf 	bl	8000aec <__aeabi_dcmplt>
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	d07b      	beq.n	800be6a <_dtoa_r+0x4f2>
 800bd72:	9b04      	ldr	r3, [sp, #16]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d078      	beq.n	800be6a <_dtoa_r+0x4f2>
 800bd78:	9b01      	ldr	r3, [sp, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	dd39      	ble.n	800bdf2 <_dtoa_r+0x47a>
 800bd7e:	4b90      	ldr	r3, [pc, #576]	; (800bfc0 <_dtoa_r+0x648>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	4640      	mov	r0, r8
 800bd84:	4649      	mov	r1, r9
 800bd86:	f7f4 fc3f 	bl	8000608 <__aeabi_dmul>
 800bd8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd8e:	9e01      	ldr	r6, [sp, #4]
 800bd90:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bd94:	3501      	adds	r5, #1
 800bd96:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	f7f4 fbca 	bl	8000534 <__aeabi_i2d>
 800bda0:	4642      	mov	r2, r8
 800bda2:	464b      	mov	r3, r9
 800bda4:	f7f4 fc30 	bl	8000608 <__aeabi_dmul>
 800bda8:	4b86      	ldr	r3, [pc, #536]	; (800bfc4 <_dtoa_r+0x64c>)
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f7f4 fa76 	bl	800029c <__adddf3>
 800bdb0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bdb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdb8:	9303      	str	r3, [sp, #12]
 800bdba:	2e00      	cmp	r6, #0
 800bdbc:	d158      	bne.n	800be70 <_dtoa_r+0x4f8>
 800bdbe:	4b82      	ldr	r3, [pc, #520]	; (800bfc8 <_dtoa_r+0x650>)
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	4640      	mov	r0, r8
 800bdc4:	4649      	mov	r1, r9
 800bdc6:	f7f4 fa67 	bl	8000298 <__aeabi_dsub>
 800bdca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdce:	4680      	mov	r8, r0
 800bdd0:	4689      	mov	r9, r1
 800bdd2:	f7f4 fea9 	bl	8000b28 <__aeabi_dcmpgt>
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	f040 8296 	bne.w	800c308 <_dtoa_r+0x990>
 800bddc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bde0:	4640      	mov	r0, r8
 800bde2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bde6:	4649      	mov	r1, r9
 800bde8:	f7f4 fe80 	bl	8000aec <__aeabi_dcmplt>
 800bdec:	2800      	cmp	r0, #0
 800bdee:	f040 8289 	bne.w	800c304 <_dtoa_r+0x98c>
 800bdf2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bdf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f2c0 814e 	blt.w	800c09a <_dtoa_r+0x722>
 800bdfe:	f1bb 0f0e 	cmp.w	fp, #14
 800be02:	f300 814a 	bgt.w	800c09a <_dtoa_r+0x722>
 800be06:	4b6b      	ldr	r3, [pc, #428]	; (800bfb4 <_dtoa_r+0x63c>)
 800be08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be12:	2b00      	cmp	r3, #0
 800be14:	f280 80dc 	bge.w	800bfd0 <_dtoa_r+0x658>
 800be18:	9b04      	ldr	r3, [sp, #16]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	f300 80d8 	bgt.w	800bfd0 <_dtoa_r+0x658>
 800be20:	f040 826f 	bne.w	800c302 <_dtoa_r+0x98a>
 800be24:	4b68      	ldr	r3, [pc, #416]	; (800bfc8 <_dtoa_r+0x650>)
 800be26:	2200      	movs	r2, #0
 800be28:	4640      	mov	r0, r8
 800be2a:	4649      	mov	r1, r9
 800be2c:	f7f4 fbec 	bl	8000608 <__aeabi_dmul>
 800be30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be34:	f7f4 fe6e 	bl	8000b14 <__aeabi_dcmpge>
 800be38:	9e04      	ldr	r6, [sp, #16]
 800be3a:	4637      	mov	r7, r6
 800be3c:	2800      	cmp	r0, #0
 800be3e:	f040 8245 	bne.w	800c2cc <_dtoa_r+0x954>
 800be42:	9d00      	ldr	r5, [sp, #0]
 800be44:	2331      	movs	r3, #49	; 0x31
 800be46:	f805 3b01 	strb.w	r3, [r5], #1
 800be4a:	f10b 0b01 	add.w	fp, fp, #1
 800be4e:	e241      	b.n	800c2d4 <_dtoa_r+0x95c>
 800be50:	07f2      	lsls	r2, r6, #31
 800be52:	d505      	bpl.n	800be60 <_dtoa_r+0x4e8>
 800be54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be58:	f7f4 fbd6 	bl	8000608 <__aeabi_dmul>
 800be5c:	3501      	adds	r5, #1
 800be5e:	2301      	movs	r3, #1
 800be60:	1076      	asrs	r6, r6, #1
 800be62:	3708      	adds	r7, #8
 800be64:	e773      	b.n	800bd4e <_dtoa_r+0x3d6>
 800be66:	2502      	movs	r5, #2
 800be68:	e775      	b.n	800bd56 <_dtoa_r+0x3de>
 800be6a:	9e04      	ldr	r6, [sp, #16]
 800be6c:	465f      	mov	r7, fp
 800be6e:	e792      	b.n	800bd96 <_dtoa_r+0x41e>
 800be70:	9900      	ldr	r1, [sp, #0]
 800be72:	4b50      	ldr	r3, [pc, #320]	; (800bfb4 <_dtoa_r+0x63c>)
 800be74:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be78:	4431      	add	r1, r6
 800be7a:	9102      	str	r1, [sp, #8]
 800be7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be7e:	eeb0 9a47 	vmov.f32	s18, s14
 800be82:	eef0 9a67 	vmov.f32	s19, s15
 800be86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be8e:	2900      	cmp	r1, #0
 800be90:	d044      	beq.n	800bf1c <_dtoa_r+0x5a4>
 800be92:	494e      	ldr	r1, [pc, #312]	; (800bfcc <_dtoa_r+0x654>)
 800be94:	2000      	movs	r0, #0
 800be96:	f7f4 fce1 	bl	800085c <__aeabi_ddiv>
 800be9a:	ec53 2b19 	vmov	r2, r3, d9
 800be9e:	f7f4 f9fb 	bl	8000298 <__aeabi_dsub>
 800bea2:	9d00      	ldr	r5, [sp, #0]
 800bea4:	ec41 0b19 	vmov	d9, r0, r1
 800bea8:	4649      	mov	r1, r9
 800beaa:	4640      	mov	r0, r8
 800beac:	f7f4 fe5c 	bl	8000b68 <__aeabi_d2iz>
 800beb0:	4606      	mov	r6, r0
 800beb2:	f7f4 fb3f 	bl	8000534 <__aeabi_i2d>
 800beb6:	4602      	mov	r2, r0
 800beb8:	460b      	mov	r3, r1
 800beba:	4640      	mov	r0, r8
 800bebc:	4649      	mov	r1, r9
 800bebe:	f7f4 f9eb 	bl	8000298 <__aeabi_dsub>
 800bec2:	3630      	adds	r6, #48	; 0x30
 800bec4:	f805 6b01 	strb.w	r6, [r5], #1
 800bec8:	ec53 2b19 	vmov	r2, r3, d9
 800becc:	4680      	mov	r8, r0
 800bece:	4689      	mov	r9, r1
 800bed0:	f7f4 fe0c 	bl	8000aec <__aeabi_dcmplt>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	d164      	bne.n	800bfa2 <_dtoa_r+0x62a>
 800bed8:	4642      	mov	r2, r8
 800beda:	464b      	mov	r3, r9
 800bedc:	4937      	ldr	r1, [pc, #220]	; (800bfbc <_dtoa_r+0x644>)
 800bede:	2000      	movs	r0, #0
 800bee0:	f7f4 f9da 	bl	8000298 <__aeabi_dsub>
 800bee4:	ec53 2b19 	vmov	r2, r3, d9
 800bee8:	f7f4 fe00 	bl	8000aec <__aeabi_dcmplt>
 800beec:	2800      	cmp	r0, #0
 800beee:	f040 80b6 	bne.w	800c05e <_dtoa_r+0x6e6>
 800bef2:	9b02      	ldr	r3, [sp, #8]
 800bef4:	429d      	cmp	r5, r3
 800bef6:	f43f af7c 	beq.w	800bdf2 <_dtoa_r+0x47a>
 800befa:	4b31      	ldr	r3, [pc, #196]	; (800bfc0 <_dtoa_r+0x648>)
 800befc:	ec51 0b19 	vmov	r0, r1, d9
 800bf00:	2200      	movs	r2, #0
 800bf02:	f7f4 fb81 	bl	8000608 <__aeabi_dmul>
 800bf06:	4b2e      	ldr	r3, [pc, #184]	; (800bfc0 <_dtoa_r+0x648>)
 800bf08:	ec41 0b19 	vmov	d9, r0, r1
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	4640      	mov	r0, r8
 800bf10:	4649      	mov	r1, r9
 800bf12:	f7f4 fb79 	bl	8000608 <__aeabi_dmul>
 800bf16:	4680      	mov	r8, r0
 800bf18:	4689      	mov	r9, r1
 800bf1a:	e7c5      	b.n	800bea8 <_dtoa_r+0x530>
 800bf1c:	ec51 0b17 	vmov	r0, r1, d7
 800bf20:	f7f4 fb72 	bl	8000608 <__aeabi_dmul>
 800bf24:	9b02      	ldr	r3, [sp, #8]
 800bf26:	9d00      	ldr	r5, [sp, #0]
 800bf28:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf2a:	ec41 0b19 	vmov	d9, r0, r1
 800bf2e:	4649      	mov	r1, r9
 800bf30:	4640      	mov	r0, r8
 800bf32:	f7f4 fe19 	bl	8000b68 <__aeabi_d2iz>
 800bf36:	4606      	mov	r6, r0
 800bf38:	f7f4 fafc 	bl	8000534 <__aeabi_i2d>
 800bf3c:	3630      	adds	r6, #48	; 0x30
 800bf3e:	4602      	mov	r2, r0
 800bf40:	460b      	mov	r3, r1
 800bf42:	4640      	mov	r0, r8
 800bf44:	4649      	mov	r1, r9
 800bf46:	f7f4 f9a7 	bl	8000298 <__aeabi_dsub>
 800bf4a:	f805 6b01 	strb.w	r6, [r5], #1
 800bf4e:	9b02      	ldr	r3, [sp, #8]
 800bf50:	429d      	cmp	r5, r3
 800bf52:	4680      	mov	r8, r0
 800bf54:	4689      	mov	r9, r1
 800bf56:	f04f 0200 	mov.w	r2, #0
 800bf5a:	d124      	bne.n	800bfa6 <_dtoa_r+0x62e>
 800bf5c:	4b1b      	ldr	r3, [pc, #108]	; (800bfcc <_dtoa_r+0x654>)
 800bf5e:	ec51 0b19 	vmov	r0, r1, d9
 800bf62:	f7f4 f99b 	bl	800029c <__adddf3>
 800bf66:	4602      	mov	r2, r0
 800bf68:	460b      	mov	r3, r1
 800bf6a:	4640      	mov	r0, r8
 800bf6c:	4649      	mov	r1, r9
 800bf6e:	f7f4 fddb 	bl	8000b28 <__aeabi_dcmpgt>
 800bf72:	2800      	cmp	r0, #0
 800bf74:	d173      	bne.n	800c05e <_dtoa_r+0x6e6>
 800bf76:	ec53 2b19 	vmov	r2, r3, d9
 800bf7a:	4914      	ldr	r1, [pc, #80]	; (800bfcc <_dtoa_r+0x654>)
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	f7f4 f98b 	bl	8000298 <__aeabi_dsub>
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	4640      	mov	r0, r8
 800bf88:	4649      	mov	r1, r9
 800bf8a:	f7f4 fdaf 	bl	8000aec <__aeabi_dcmplt>
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	f43f af2f 	beq.w	800bdf2 <_dtoa_r+0x47a>
 800bf94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf96:	1e6b      	subs	r3, r5, #1
 800bf98:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf9e:	2b30      	cmp	r3, #48	; 0x30
 800bfa0:	d0f8      	beq.n	800bf94 <_dtoa_r+0x61c>
 800bfa2:	46bb      	mov	fp, r7
 800bfa4:	e04a      	b.n	800c03c <_dtoa_r+0x6c4>
 800bfa6:	4b06      	ldr	r3, [pc, #24]	; (800bfc0 <_dtoa_r+0x648>)
 800bfa8:	f7f4 fb2e 	bl	8000608 <__aeabi_dmul>
 800bfac:	4680      	mov	r8, r0
 800bfae:	4689      	mov	r9, r1
 800bfb0:	e7bd      	b.n	800bf2e <_dtoa_r+0x5b6>
 800bfb2:	bf00      	nop
 800bfb4:	0800db30 	.word	0x0800db30
 800bfb8:	0800db08 	.word	0x0800db08
 800bfbc:	3ff00000 	.word	0x3ff00000
 800bfc0:	40240000 	.word	0x40240000
 800bfc4:	401c0000 	.word	0x401c0000
 800bfc8:	40140000 	.word	0x40140000
 800bfcc:	3fe00000 	.word	0x3fe00000
 800bfd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bfd4:	9d00      	ldr	r5, [sp, #0]
 800bfd6:	4642      	mov	r2, r8
 800bfd8:	464b      	mov	r3, r9
 800bfda:	4630      	mov	r0, r6
 800bfdc:	4639      	mov	r1, r7
 800bfde:	f7f4 fc3d 	bl	800085c <__aeabi_ddiv>
 800bfe2:	f7f4 fdc1 	bl	8000b68 <__aeabi_d2iz>
 800bfe6:	9001      	str	r0, [sp, #4]
 800bfe8:	f7f4 faa4 	bl	8000534 <__aeabi_i2d>
 800bfec:	4642      	mov	r2, r8
 800bfee:	464b      	mov	r3, r9
 800bff0:	f7f4 fb0a 	bl	8000608 <__aeabi_dmul>
 800bff4:	4602      	mov	r2, r0
 800bff6:	460b      	mov	r3, r1
 800bff8:	4630      	mov	r0, r6
 800bffa:	4639      	mov	r1, r7
 800bffc:	f7f4 f94c 	bl	8000298 <__aeabi_dsub>
 800c000:	9e01      	ldr	r6, [sp, #4]
 800c002:	9f04      	ldr	r7, [sp, #16]
 800c004:	3630      	adds	r6, #48	; 0x30
 800c006:	f805 6b01 	strb.w	r6, [r5], #1
 800c00a:	9e00      	ldr	r6, [sp, #0]
 800c00c:	1bae      	subs	r6, r5, r6
 800c00e:	42b7      	cmp	r7, r6
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	d134      	bne.n	800c080 <_dtoa_r+0x708>
 800c016:	f7f4 f941 	bl	800029c <__adddf3>
 800c01a:	4642      	mov	r2, r8
 800c01c:	464b      	mov	r3, r9
 800c01e:	4606      	mov	r6, r0
 800c020:	460f      	mov	r7, r1
 800c022:	f7f4 fd81 	bl	8000b28 <__aeabi_dcmpgt>
 800c026:	b9c8      	cbnz	r0, 800c05c <_dtoa_r+0x6e4>
 800c028:	4642      	mov	r2, r8
 800c02a:	464b      	mov	r3, r9
 800c02c:	4630      	mov	r0, r6
 800c02e:	4639      	mov	r1, r7
 800c030:	f7f4 fd52 	bl	8000ad8 <__aeabi_dcmpeq>
 800c034:	b110      	cbz	r0, 800c03c <_dtoa_r+0x6c4>
 800c036:	9b01      	ldr	r3, [sp, #4]
 800c038:	07db      	lsls	r3, r3, #31
 800c03a:	d40f      	bmi.n	800c05c <_dtoa_r+0x6e4>
 800c03c:	4651      	mov	r1, sl
 800c03e:	4620      	mov	r0, r4
 800c040:	f000 fbcc 	bl	800c7dc <_Bfree>
 800c044:	2300      	movs	r3, #0
 800c046:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c048:	702b      	strb	r3, [r5, #0]
 800c04a:	f10b 0301 	add.w	r3, fp, #1
 800c04e:	6013      	str	r3, [r2, #0]
 800c050:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c052:	2b00      	cmp	r3, #0
 800c054:	f43f ace2 	beq.w	800ba1c <_dtoa_r+0xa4>
 800c058:	601d      	str	r5, [r3, #0]
 800c05a:	e4df      	b.n	800ba1c <_dtoa_r+0xa4>
 800c05c:	465f      	mov	r7, fp
 800c05e:	462b      	mov	r3, r5
 800c060:	461d      	mov	r5, r3
 800c062:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c066:	2a39      	cmp	r2, #57	; 0x39
 800c068:	d106      	bne.n	800c078 <_dtoa_r+0x700>
 800c06a:	9a00      	ldr	r2, [sp, #0]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d1f7      	bne.n	800c060 <_dtoa_r+0x6e8>
 800c070:	9900      	ldr	r1, [sp, #0]
 800c072:	2230      	movs	r2, #48	; 0x30
 800c074:	3701      	adds	r7, #1
 800c076:	700a      	strb	r2, [r1, #0]
 800c078:	781a      	ldrb	r2, [r3, #0]
 800c07a:	3201      	adds	r2, #1
 800c07c:	701a      	strb	r2, [r3, #0]
 800c07e:	e790      	b.n	800bfa2 <_dtoa_r+0x62a>
 800c080:	4ba3      	ldr	r3, [pc, #652]	; (800c310 <_dtoa_r+0x998>)
 800c082:	2200      	movs	r2, #0
 800c084:	f7f4 fac0 	bl	8000608 <__aeabi_dmul>
 800c088:	2200      	movs	r2, #0
 800c08a:	2300      	movs	r3, #0
 800c08c:	4606      	mov	r6, r0
 800c08e:	460f      	mov	r7, r1
 800c090:	f7f4 fd22 	bl	8000ad8 <__aeabi_dcmpeq>
 800c094:	2800      	cmp	r0, #0
 800c096:	d09e      	beq.n	800bfd6 <_dtoa_r+0x65e>
 800c098:	e7d0      	b.n	800c03c <_dtoa_r+0x6c4>
 800c09a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c09c:	2a00      	cmp	r2, #0
 800c09e:	f000 80ca 	beq.w	800c236 <_dtoa_r+0x8be>
 800c0a2:	9a07      	ldr	r2, [sp, #28]
 800c0a4:	2a01      	cmp	r2, #1
 800c0a6:	f300 80ad 	bgt.w	800c204 <_dtoa_r+0x88c>
 800c0aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0ac:	2a00      	cmp	r2, #0
 800c0ae:	f000 80a5 	beq.w	800c1fc <_dtoa_r+0x884>
 800c0b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c0b6:	9e08      	ldr	r6, [sp, #32]
 800c0b8:	9d05      	ldr	r5, [sp, #20]
 800c0ba:	9a05      	ldr	r2, [sp, #20]
 800c0bc:	441a      	add	r2, r3
 800c0be:	9205      	str	r2, [sp, #20]
 800c0c0:	9a06      	ldr	r2, [sp, #24]
 800c0c2:	2101      	movs	r1, #1
 800c0c4:	441a      	add	r2, r3
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	9206      	str	r2, [sp, #24]
 800c0ca:	f000 fc3d 	bl	800c948 <__i2b>
 800c0ce:	4607      	mov	r7, r0
 800c0d0:	b165      	cbz	r5, 800c0ec <_dtoa_r+0x774>
 800c0d2:	9b06      	ldr	r3, [sp, #24]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	dd09      	ble.n	800c0ec <_dtoa_r+0x774>
 800c0d8:	42ab      	cmp	r3, r5
 800c0da:	9a05      	ldr	r2, [sp, #20]
 800c0dc:	bfa8      	it	ge
 800c0de:	462b      	movge	r3, r5
 800c0e0:	1ad2      	subs	r2, r2, r3
 800c0e2:	9205      	str	r2, [sp, #20]
 800c0e4:	9a06      	ldr	r2, [sp, #24]
 800c0e6:	1aed      	subs	r5, r5, r3
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	9306      	str	r3, [sp, #24]
 800c0ec:	9b08      	ldr	r3, [sp, #32]
 800c0ee:	b1f3      	cbz	r3, 800c12e <_dtoa_r+0x7b6>
 800c0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	f000 80a3 	beq.w	800c23e <_dtoa_r+0x8c6>
 800c0f8:	2e00      	cmp	r6, #0
 800c0fa:	dd10      	ble.n	800c11e <_dtoa_r+0x7a6>
 800c0fc:	4639      	mov	r1, r7
 800c0fe:	4632      	mov	r2, r6
 800c100:	4620      	mov	r0, r4
 800c102:	f000 fce1 	bl	800cac8 <__pow5mult>
 800c106:	4652      	mov	r2, sl
 800c108:	4601      	mov	r1, r0
 800c10a:	4607      	mov	r7, r0
 800c10c:	4620      	mov	r0, r4
 800c10e:	f000 fc31 	bl	800c974 <__multiply>
 800c112:	4651      	mov	r1, sl
 800c114:	4680      	mov	r8, r0
 800c116:	4620      	mov	r0, r4
 800c118:	f000 fb60 	bl	800c7dc <_Bfree>
 800c11c:	46c2      	mov	sl, r8
 800c11e:	9b08      	ldr	r3, [sp, #32]
 800c120:	1b9a      	subs	r2, r3, r6
 800c122:	d004      	beq.n	800c12e <_dtoa_r+0x7b6>
 800c124:	4651      	mov	r1, sl
 800c126:	4620      	mov	r0, r4
 800c128:	f000 fcce 	bl	800cac8 <__pow5mult>
 800c12c:	4682      	mov	sl, r0
 800c12e:	2101      	movs	r1, #1
 800c130:	4620      	mov	r0, r4
 800c132:	f000 fc09 	bl	800c948 <__i2b>
 800c136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c138:	2b00      	cmp	r3, #0
 800c13a:	4606      	mov	r6, r0
 800c13c:	f340 8081 	ble.w	800c242 <_dtoa_r+0x8ca>
 800c140:	461a      	mov	r2, r3
 800c142:	4601      	mov	r1, r0
 800c144:	4620      	mov	r0, r4
 800c146:	f000 fcbf 	bl	800cac8 <__pow5mult>
 800c14a:	9b07      	ldr	r3, [sp, #28]
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	4606      	mov	r6, r0
 800c150:	dd7a      	ble.n	800c248 <_dtoa_r+0x8d0>
 800c152:	f04f 0800 	mov.w	r8, #0
 800c156:	6933      	ldr	r3, [r6, #16]
 800c158:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c15c:	6918      	ldr	r0, [r3, #16]
 800c15e:	f000 fba5 	bl	800c8ac <__hi0bits>
 800c162:	f1c0 0020 	rsb	r0, r0, #32
 800c166:	9b06      	ldr	r3, [sp, #24]
 800c168:	4418      	add	r0, r3
 800c16a:	f010 001f 	ands.w	r0, r0, #31
 800c16e:	f000 8094 	beq.w	800c29a <_dtoa_r+0x922>
 800c172:	f1c0 0320 	rsb	r3, r0, #32
 800c176:	2b04      	cmp	r3, #4
 800c178:	f340 8085 	ble.w	800c286 <_dtoa_r+0x90e>
 800c17c:	9b05      	ldr	r3, [sp, #20]
 800c17e:	f1c0 001c 	rsb	r0, r0, #28
 800c182:	4403      	add	r3, r0
 800c184:	9305      	str	r3, [sp, #20]
 800c186:	9b06      	ldr	r3, [sp, #24]
 800c188:	4403      	add	r3, r0
 800c18a:	4405      	add	r5, r0
 800c18c:	9306      	str	r3, [sp, #24]
 800c18e:	9b05      	ldr	r3, [sp, #20]
 800c190:	2b00      	cmp	r3, #0
 800c192:	dd05      	ble.n	800c1a0 <_dtoa_r+0x828>
 800c194:	4651      	mov	r1, sl
 800c196:	461a      	mov	r2, r3
 800c198:	4620      	mov	r0, r4
 800c19a:	f000 fcef 	bl	800cb7c <__lshift>
 800c19e:	4682      	mov	sl, r0
 800c1a0:	9b06      	ldr	r3, [sp, #24]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	dd05      	ble.n	800c1b2 <_dtoa_r+0x83a>
 800c1a6:	4631      	mov	r1, r6
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	f000 fce6 	bl	800cb7c <__lshift>
 800c1b0:	4606      	mov	r6, r0
 800c1b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d072      	beq.n	800c29e <_dtoa_r+0x926>
 800c1b8:	4631      	mov	r1, r6
 800c1ba:	4650      	mov	r0, sl
 800c1bc:	f000 fd4a 	bl	800cc54 <__mcmp>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	da6c      	bge.n	800c29e <_dtoa_r+0x926>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	4651      	mov	r1, sl
 800c1c8:	220a      	movs	r2, #10
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f000 fb28 	bl	800c820 <__multadd>
 800c1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c1d6:	4682      	mov	sl, r0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	f000 81b0 	beq.w	800c53e <_dtoa_r+0xbc6>
 800c1de:	2300      	movs	r3, #0
 800c1e0:	4639      	mov	r1, r7
 800c1e2:	220a      	movs	r2, #10
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f000 fb1b 	bl	800c820 <__multadd>
 800c1ea:	9b01      	ldr	r3, [sp, #4]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	4607      	mov	r7, r0
 800c1f0:	f300 8096 	bgt.w	800c320 <_dtoa_r+0x9a8>
 800c1f4:	9b07      	ldr	r3, [sp, #28]
 800c1f6:	2b02      	cmp	r3, #2
 800c1f8:	dc59      	bgt.n	800c2ae <_dtoa_r+0x936>
 800c1fa:	e091      	b.n	800c320 <_dtoa_r+0x9a8>
 800c1fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c202:	e758      	b.n	800c0b6 <_dtoa_r+0x73e>
 800c204:	9b04      	ldr	r3, [sp, #16]
 800c206:	1e5e      	subs	r6, r3, #1
 800c208:	9b08      	ldr	r3, [sp, #32]
 800c20a:	42b3      	cmp	r3, r6
 800c20c:	bfbf      	itttt	lt
 800c20e:	9b08      	ldrlt	r3, [sp, #32]
 800c210:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c212:	9608      	strlt	r6, [sp, #32]
 800c214:	1af3      	sublt	r3, r6, r3
 800c216:	bfb4      	ite	lt
 800c218:	18d2      	addlt	r2, r2, r3
 800c21a:	1b9e      	subge	r6, r3, r6
 800c21c:	9b04      	ldr	r3, [sp, #16]
 800c21e:	bfbc      	itt	lt
 800c220:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c222:	2600      	movlt	r6, #0
 800c224:	2b00      	cmp	r3, #0
 800c226:	bfb7      	itett	lt
 800c228:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c22c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c230:	1a9d      	sublt	r5, r3, r2
 800c232:	2300      	movlt	r3, #0
 800c234:	e741      	b.n	800c0ba <_dtoa_r+0x742>
 800c236:	9e08      	ldr	r6, [sp, #32]
 800c238:	9d05      	ldr	r5, [sp, #20]
 800c23a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c23c:	e748      	b.n	800c0d0 <_dtoa_r+0x758>
 800c23e:	9a08      	ldr	r2, [sp, #32]
 800c240:	e770      	b.n	800c124 <_dtoa_r+0x7ac>
 800c242:	9b07      	ldr	r3, [sp, #28]
 800c244:	2b01      	cmp	r3, #1
 800c246:	dc19      	bgt.n	800c27c <_dtoa_r+0x904>
 800c248:	9b02      	ldr	r3, [sp, #8]
 800c24a:	b9bb      	cbnz	r3, 800c27c <_dtoa_r+0x904>
 800c24c:	9b03      	ldr	r3, [sp, #12]
 800c24e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c252:	b99b      	cbnz	r3, 800c27c <_dtoa_r+0x904>
 800c254:	9b03      	ldr	r3, [sp, #12]
 800c256:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c25a:	0d1b      	lsrs	r3, r3, #20
 800c25c:	051b      	lsls	r3, r3, #20
 800c25e:	b183      	cbz	r3, 800c282 <_dtoa_r+0x90a>
 800c260:	9b05      	ldr	r3, [sp, #20]
 800c262:	3301      	adds	r3, #1
 800c264:	9305      	str	r3, [sp, #20]
 800c266:	9b06      	ldr	r3, [sp, #24]
 800c268:	3301      	adds	r3, #1
 800c26a:	9306      	str	r3, [sp, #24]
 800c26c:	f04f 0801 	mov.w	r8, #1
 800c270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c272:	2b00      	cmp	r3, #0
 800c274:	f47f af6f 	bne.w	800c156 <_dtoa_r+0x7de>
 800c278:	2001      	movs	r0, #1
 800c27a:	e774      	b.n	800c166 <_dtoa_r+0x7ee>
 800c27c:	f04f 0800 	mov.w	r8, #0
 800c280:	e7f6      	b.n	800c270 <_dtoa_r+0x8f8>
 800c282:	4698      	mov	r8, r3
 800c284:	e7f4      	b.n	800c270 <_dtoa_r+0x8f8>
 800c286:	d082      	beq.n	800c18e <_dtoa_r+0x816>
 800c288:	9a05      	ldr	r2, [sp, #20]
 800c28a:	331c      	adds	r3, #28
 800c28c:	441a      	add	r2, r3
 800c28e:	9205      	str	r2, [sp, #20]
 800c290:	9a06      	ldr	r2, [sp, #24]
 800c292:	441a      	add	r2, r3
 800c294:	441d      	add	r5, r3
 800c296:	9206      	str	r2, [sp, #24]
 800c298:	e779      	b.n	800c18e <_dtoa_r+0x816>
 800c29a:	4603      	mov	r3, r0
 800c29c:	e7f4      	b.n	800c288 <_dtoa_r+0x910>
 800c29e:	9b04      	ldr	r3, [sp, #16]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	dc37      	bgt.n	800c314 <_dtoa_r+0x99c>
 800c2a4:	9b07      	ldr	r3, [sp, #28]
 800c2a6:	2b02      	cmp	r3, #2
 800c2a8:	dd34      	ble.n	800c314 <_dtoa_r+0x99c>
 800c2aa:	9b04      	ldr	r3, [sp, #16]
 800c2ac:	9301      	str	r3, [sp, #4]
 800c2ae:	9b01      	ldr	r3, [sp, #4]
 800c2b0:	b963      	cbnz	r3, 800c2cc <_dtoa_r+0x954>
 800c2b2:	4631      	mov	r1, r6
 800c2b4:	2205      	movs	r2, #5
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f000 fab2 	bl	800c820 <__multadd>
 800c2bc:	4601      	mov	r1, r0
 800c2be:	4606      	mov	r6, r0
 800c2c0:	4650      	mov	r0, sl
 800c2c2:	f000 fcc7 	bl	800cc54 <__mcmp>
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	f73f adbb 	bgt.w	800be42 <_dtoa_r+0x4ca>
 800c2cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2ce:	9d00      	ldr	r5, [sp, #0]
 800c2d0:	ea6f 0b03 	mvn.w	fp, r3
 800c2d4:	f04f 0800 	mov.w	r8, #0
 800c2d8:	4631      	mov	r1, r6
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f000 fa7e 	bl	800c7dc <_Bfree>
 800c2e0:	2f00      	cmp	r7, #0
 800c2e2:	f43f aeab 	beq.w	800c03c <_dtoa_r+0x6c4>
 800c2e6:	f1b8 0f00 	cmp.w	r8, #0
 800c2ea:	d005      	beq.n	800c2f8 <_dtoa_r+0x980>
 800c2ec:	45b8      	cmp	r8, r7
 800c2ee:	d003      	beq.n	800c2f8 <_dtoa_r+0x980>
 800c2f0:	4641      	mov	r1, r8
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	f000 fa72 	bl	800c7dc <_Bfree>
 800c2f8:	4639      	mov	r1, r7
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f000 fa6e 	bl	800c7dc <_Bfree>
 800c300:	e69c      	b.n	800c03c <_dtoa_r+0x6c4>
 800c302:	2600      	movs	r6, #0
 800c304:	4637      	mov	r7, r6
 800c306:	e7e1      	b.n	800c2cc <_dtoa_r+0x954>
 800c308:	46bb      	mov	fp, r7
 800c30a:	4637      	mov	r7, r6
 800c30c:	e599      	b.n	800be42 <_dtoa_r+0x4ca>
 800c30e:	bf00      	nop
 800c310:	40240000 	.word	0x40240000
 800c314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c316:	2b00      	cmp	r3, #0
 800c318:	f000 80c8 	beq.w	800c4ac <_dtoa_r+0xb34>
 800c31c:	9b04      	ldr	r3, [sp, #16]
 800c31e:	9301      	str	r3, [sp, #4]
 800c320:	2d00      	cmp	r5, #0
 800c322:	dd05      	ble.n	800c330 <_dtoa_r+0x9b8>
 800c324:	4639      	mov	r1, r7
 800c326:	462a      	mov	r2, r5
 800c328:	4620      	mov	r0, r4
 800c32a:	f000 fc27 	bl	800cb7c <__lshift>
 800c32e:	4607      	mov	r7, r0
 800c330:	f1b8 0f00 	cmp.w	r8, #0
 800c334:	d05b      	beq.n	800c3ee <_dtoa_r+0xa76>
 800c336:	6879      	ldr	r1, [r7, #4]
 800c338:	4620      	mov	r0, r4
 800c33a:	f000 fa0f 	bl	800c75c <_Balloc>
 800c33e:	4605      	mov	r5, r0
 800c340:	b928      	cbnz	r0, 800c34e <_dtoa_r+0x9d6>
 800c342:	4b83      	ldr	r3, [pc, #524]	; (800c550 <_dtoa_r+0xbd8>)
 800c344:	4602      	mov	r2, r0
 800c346:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c34a:	f7ff bb2e 	b.w	800b9aa <_dtoa_r+0x32>
 800c34e:	693a      	ldr	r2, [r7, #16]
 800c350:	3202      	adds	r2, #2
 800c352:	0092      	lsls	r2, r2, #2
 800c354:	f107 010c 	add.w	r1, r7, #12
 800c358:	300c      	adds	r0, #12
 800c35a:	f000 ffab 	bl	800d2b4 <memcpy>
 800c35e:	2201      	movs	r2, #1
 800c360:	4629      	mov	r1, r5
 800c362:	4620      	mov	r0, r4
 800c364:	f000 fc0a 	bl	800cb7c <__lshift>
 800c368:	9b00      	ldr	r3, [sp, #0]
 800c36a:	3301      	adds	r3, #1
 800c36c:	9304      	str	r3, [sp, #16]
 800c36e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c372:	4413      	add	r3, r2
 800c374:	9308      	str	r3, [sp, #32]
 800c376:	9b02      	ldr	r3, [sp, #8]
 800c378:	f003 0301 	and.w	r3, r3, #1
 800c37c:	46b8      	mov	r8, r7
 800c37e:	9306      	str	r3, [sp, #24]
 800c380:	4607      	mov	r7, r0
 800c382:	9b04      	ldr	r3, [sp, #16]
 800c384:	4631      	mov	r1, r6
 800c386:	3b01      	subs	r3, #1
 800c388:	4650      	mov	r0, sl
 800c38a:	9301      	str	r3, [sp, #4]
 800c38c:	f7ff fa6b 	bl	800b866 <quorem>
 800c390:	4641      	mov	r1, r8
 800c392:	9002      	str	r0, [sp, #8]
 800c394:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c398:	4650      	mov	r0, sl
 800c39a:	f000 fc5b 	bl	800cc54 <__mcmp>
 800c39e:	463a      	mov	r2, r7
 800c3a0:	9005      	str	r0, [sp, #20]
 800c3a2:	4631      	mov	r1, r6
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	f000 fc71 	bl	800cc8c <__mdiff>
 800c3aa:	68c2      	ldr	r2, [r0, #12]
 800c3ac:	4605      	mov	r5, r0
 800c3ae:	bb02      	cbnz	r2, 800c3f2 <_dtoa_r+0xa7a>
 800c3b0:	4601      	mov	r1, r0
 800c3b2:	4650      	mov	r0, sl
 800c3b4:	f000 fc4e 	bl	800cc54 <__mcmp>
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	4629      	mov	r1, r5
 800c3bc:	4620      	mov	r0, r4
 800c3be:	9209      	str	r2, [sp, #36]	; 0x24
 800c3c0:	f000 fa0c 	bl	800c7dc <_Bfree>
 800c3c4:	9b07      	ldr	r3, [sp, #28]
 800c3c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3c8:	9d04      	ldr	r5, [sp, #16]
 800c3ca:	ea43 0102 	orr.w	r1, r3, r2
 800c3ce:	9b06      	ldr	r3, [sp, #24]
 800c3d0:	4319      	orrs	r1, r3
 800c3d2:	d110      	bne.n	800c3f6 <_dtoa_r+0xa7e>
 800c3d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c3d8:	d029      	beq.n	800c42e <_dtoa_r+0xab6>
 800c3da:	9b05      	ldr	r3, [sp, #20]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dd02      	ble.n	800c3e6 <_dtoa_r+0xa6e>
 800c3e0:	9b02      	ldr	r3, [sp, #8]
 800c3e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c3e6:	9b01      	ldr	r3, [sp, #4]
 800c3e8:	f883 9000 	strb.w	r9, [r3]
 800c3ec:	e774      	b.n	800c2d8 <_dtoa_r+0x960>
 800c3ee:	4638      	mov	r0, r7
 800c3f0:	e7ba      	b.n	800c368 <_dtoa_r+0x9f0>
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	e7e1      	b.n	800c3ba <_dtoa_r+0xa42>
 800c3f6:	9b05      	ldr	r3, [sp, #20]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	db04      	blt.n	800c406 <_dtoa_r+0xa8e>
 800c3fc:	9907      	ldr	r1, [sp, #28]
 800c3fe:	430b      	orrs	r3, r1
 800c400:	9906      	ldr	r1, [sp, #24]
 800c402:	430b      	orrs	r3, r1
 800c404:	d120      	bne.n	800c448 <_dtoa_r+0xad0>
 800c406:	2a00      	cmp	r2, #0
 800c408:	dded      	ble.n	800c3e6 <_dtoa_r+0xa6e>
 800c40a:	4651      	mov	r1, sl
 800c40c:	2201      	movs	r2, #1
 800c40e:	4620      	mov	r0, r4
 800c410:	f000 fbb4 	bl	800cb7c <__lshift>
 800c414:	4631      	mov	r1, r6
 800c416:	4682      	mov	sl, r0
 800c418:	f000 fc1c 	bl	800cc54 <__mcmp>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	dc03      	bgt.n	800c428 <_dtoa_r+0xab0>
 800c420:	d1e1      	bne.n	800c3e6 <_dtoa_r+0xa6e>
 800c422:	f019 0f01 	tst.w	r9, #1
 800c426:	d0de      	beq.n	800c3e6 <_dtoa_r+0xa6e>
 800c428:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c42c:	d1d8      	bne.n	800c3e0 <_dtoa_r+0xa68>
 800c42e:	9a01      	ldr	r2, [sp, #4]
 800c430:	2339      	movs	r3, #57	; 0x39
 800c432:	7013      	strb	r3, [r2, #0]
 800c434:	462b      	mov	r3, r5
 800c436:	461d      	mov	r5, r3
 800c438:	3b01      	subs	r3, #1
 800c43a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c43e:	2a39      	cmp	r2, #57	; 0x39
 800c440:	d06c      	beq.n	800c51c <_dtoa_r+0xba4>
 800c442:	3201      	adds	r2, #1
 800c444:	701a      	strb	r2, [r3, #0]
 800c446:	e747      	b.n	800c2d8 <_dtoa_r+0x960>
 800c448:	2a00      	cmp	r2, #0
 800c44a:	dd07      	ble.n	800c45c <_dtoa_r+0xae4>
 800c44c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c450:	d0ed      	beq.n	800c42e <_dtoa_r+0xab6>
 800c452:	9a01      	ldr	r2, [sp, #4]
 800c454:	f109 0301 	add.w	r3, r9, #1
 800c458:	7013      	strb	r3, [r2, #0]
 800c45a:	e73d      	b.n	800c2d8 <_dtoa_r+0x960>
 800c45c:	9b04      	ldr	r3, [sp, #16]
 800c45e:	9a08      	ldr	r2, [sp, #32]
 800c460:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c464:	4293      	cmp	r3, r2
 800c466:	d043      	beq.n	800c4f0 <_dtoa_r+0xb78>
 800c468:	4651      	mov	r1, sl
 800c46a:	2300      	movs	r3, #0
 800c46c:	220a      	movs	r2, #10
 800c46e:	4620      	mov	r0, r4
 800c470:	f000 f9d6 	bl	800c820 <__multadd>
 800c474:	45b8      	cmp	r8, r7
 800c476:	4682      	mov	sl, r0
 800c478:	f04f 0300 	mov.w	r3, #0
 800c47c:	f04f 020a 	mov.w	r2, #10
 800c480:	4641      	mov	r1, r8
 800c482:	4620      	mov	r0, r4
 800c484:	d107      	bne.n	800c496 <_dtoa_r+0xb1e>
 800c486:	f000 f9cb 	bl	800c820 <__multadd>
 800c48a:	4680      	mov	r8, r0
 800c48c:	4607      	mov	r7, r0
 800c48e:	9b04      	ldr	r3, [sp, #16]
 800c490:	3301      	adds	r3, #1
 800c492:	9304      	str	r3, [sp, #16]
 800c494:	e775      	b.n	800c382 <_dtoa_r+0xa0a>
 800c496:	f000 f9c3 	bl	800c820 <__multadd>
 800c49a:	4639      	mov	r1, r7
 800c49c:	4680      	mov	r8, r0
 800c49e:	2300      	movs	r3, #0
 800c4a0:	220a      	movs	r2, #10
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f000 f9bc 	bl	800c820 <__multadd>
 800c4a8:	4607      	mov	r7, r0
 800c4aa:	e7f0      	b.n	800c48e <_dtoa_r+0xb16>
 800c4ac:	9b04      	ldr	r3, [sp, #16]
 800c4ae:	9301      	str	r3, [sp, #4]
 800c4b0:	9d00      	ldr	r5, [sp, #0]
 800c4b2:	4631      	mov	r1, r6
 800c4b4:	4650      	mov	r0, sl
 800c4b6:	f7ff f9d6 	bl	800b866 <quorem>
 800c4ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c4be:	9b00      	ldr	r3, [sp, #0]
 800c4c0:	f805 9b01 	strb.w	r9, [r5], #1
 800c4c4:	1aea      	subs	r2, r5, r3
 800c4c6:	9b01      	ldr	r3, [sp, #4]
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	dd07      	ble.n	800c4dc <_dtoa_r+0xb64>
 800c4cc:	4651      	mov	r1, sl
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	220a      	movs	r2, #10
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	f000 f9a4 	bl	800c820 <__multadd>
 800c4d8:	4682      	mov	sl, r0
 800c4da:	e7ea      	b.n	800c4b2 <_dtoa_r+0xb3a>
 800c4dc:	9b01      	ldr	r3, [sp, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	bfc8      	it	gt
 800c4e2:	461d      	movgt	r5, r3
 800c4e4:	9b00      	ldr	r3, [sp, #0]
 800c4e6:	bfd8      	it	le
 800c4e8:	2501      	movle	r5, #1
 800c4ea:	441d      	add	r5, r3
 800c4ec:	f04f 0800 	mov.w	r8, #0
 800c4f0:	4651      	mov	r1, sl
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	f000 fb41 	bl	800cb7c <__lshift>
 800c4fa:	4631      	mov	r1, r6
 800c4fc:	4682      	mov	sl, r0
 800c4fe:	f000 fba9 	bl	800cc54 <__mcmp>
 800c502:	2800      	cmp	r0, #0
 800c504:	dc96      	bgt.n	800c434 <_dtoa_r+0xabc>
 800c506:	d102      	bne.n	800c50e <_dtoa_r+0xb96>
 800c508:	f019 0f01 	tst.w	r9, #1
 800c50c:	d192      	bne.n	800c434 <_dtoa_r+0xabc>
 800c50e:	462b      	mov	r3, r5
 800c510:	461d      	mov	r5, r3
 800c512:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c516:	2a30      	cmp	r2, #48	; 0x30
 800c518:	d0fa      	beq.n	800c510 <_dtoa_r+0xb98>
 800c51a:	e6dd      	b.n	800c2d8 <_dtoa_r+0x960>
 800c51c:	9a00      	ldr	r2, [sp, #0]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d189      	bne.n	800c436 <_dtoa_r+0xabe>
 800c522:	f10b 0b01 	add.w	fp, fp, #1
 800c526:	2331      	movs	r3, #49	; 0x31
 800c528:	e796      	b.n	800c458 <_dtoa_r+0xae0>
 800c52a:	4b0a      	ldr	r3, [pc, #40]	; (800c554 <_dtoa_r+0xbdc>)
 800c52c:	f7ff ba99 	b.w	800ba62 <_dtoa_r+0xea>
 800c530:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c532:	2b00      	cmp	r3, #0
 800c534:	f47f aa6d 	bne.w	800ba12 <_dtoa_r+0x9a>
 800c538:	4b07      	ldr	r3, [pc, #28]	; (800c558 <_dtoa_r+0xbe0>)
 800c53a:	f7ff ba92 	b.w	800ba62 <_dtoa_r+0xea>
 800c53e:	9b01      	ldr	r3, [sp, #4]
 800c540:	2b00      	cmp	r3, #0
 800c542:	dcb5      	bgt.n	800c4b0 <_dtoa_r+0xb38>
 800c544:	9b07      	ldr	r3, [sp, #28]
 800c546:	2b02      	cmp	r3, #2
 800c548:	f73f aeb1 	bgt.w	800c2ae <_dtoa_r+0x936>
 800c54c:	e7b0      	b.n	800c4b0 <_dtoa_r+0xb38>
 800c54e:	bf00      	nop
 800c550:	0800da98 	.word	0x0800da98
 800c554:	0800d9f8 	.word	0x0800d9f8
 800c558:	0800da1c 	.word	0x0800da1c

0800c55c <_free_r>:
 800c55c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c55e:	2900      	cmp	r1, #0
 800c560:	d044      	beq.n	800c5ec <_free_r+0x90>
 800c562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c566:	9001      	str	r0, [sp, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	f1a1 0404 	sub.w	r4, r1, #4
 800c56e:	bfb8      	it	lt
 800c570:	18e4      	addlt	r4, r4, r3
 800c572:	f000 f8e7 	bl	800c744 <__malloc_lock>
 800c576:	4a1e      	ldr	r2, [pc, #120]	; (800c5f0 <_free_r+0x94>)
 800c578:	9801      	ldr	r0, [sp, #4]
 800c57a:	6813      	ldr	r3, [r2, #0]
 800c57c:	b933      	cbnz	r3, 800c58c <_free_r+0x30>
 800c57e:	6063      	str	r3, [r4, #4]
 800c580:	6014      	str	r4, [r2, #0]
 800c582:	b003      	add	sp, #12
 800c584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c588:	f000 b8e2 	b.w	800c750 <__malloc_unlock>
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	d908      	bls.n	800c5a2 <_free_r+0x46>
 800c590:	6825      	ldr	r5, [r4, #0]
 800c592:	1961      	adds	r1, r4, r5
 800c594:	428b      	cmp	r3, r1
 800c596:	bf01      	itttt	eq
 800c598:	6819      	ldreq	r1, [r3, #0]
 800c59a:	685b      	ldreq	r3, [r3, #4]
 800c59c:	1949      	addeq	r1, r1, r5
 800c59e:	6021      	streq	r1, [r4, #0]
 800c5a0:	e7ed      	b.n	800c57e <_free_r+0x22>
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	b10b      	cbz	r3, 800c5ac <_free_r+0x50>
 800c5a8:	42a3      	cmp	r3, r4
 800c5aa:	d9fa      	bls.n	800c5a2 <_free_r+0x46>
 800c5ac:	6811      	ldr	r1, [r2, #0]
 800c5ae:	1855      	adds	r5, r2, r1
 800c5b0:	42a5      	cmp	r5, r4
 800c5b2:	d10b      	bne.n	800c5cc <_free_r+0x70>
 800c5b4:	6824      	ldr	r4, [r4, #0]
 800c5b6:	4421      	add	r1, r4
 800c5b8:	1854      	adds	r4, r2, r1
 800c5ba:	42a3      	cmp	r3, r4
 800c5bc:	6011      	str	r1, [r2, #0]
 800c5be:	d1e0      	bne.n	800c582 <_free_r+0x26>
 800c5c0:	681c      	ldr	r4, [r3, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	6053      	str	r3, [r2, #4]
 800c5c6:	440c      	add	r4, r1
 800c5c8:	6014      	str	r4, [r2, #0]
 800c5ca:	e7da      	b.n	800c582 <_free_r+0x26>
 800c5cc:	d902      	bls.n	800c5d4 <_free_r+0x78>
 800c5ce:	230c      	movs	r3, #12
 800c5d0:	6003      	str	r3, [r0, #0]
 800c5d2:	e7d6      	b.n	800c582 <_free_r+0x26>
 800c5d4:	6825      	ldr	r5, [r4, #0]
 800c5d6:	1961      	adds	r1, r4, r5
 800c5d8:	428b      	cmp	r3, r1
 800c5da:	bf04      	itt	eq
 800c5dc:	6819      	ldreq	r1, [r3, #0]
 800c5de:	685b      	ldreq	r3, [r3, #4]
 800c5e0:	6063      	str	r3, [r4, #4]
 800c5e2:	bf04      	itt	eq
 800c5e4:	1949      	addeq	r1, r1, r5
 800c5e6:	6021      	streq	r1, [r4, #0]
 800c5e8:	6054      	str	r4, [r2, #4]
 800c5ea:	e7ca      	b.n	800c582 <_free_r+0x26>
 800c5ec:	b003      	add	sp, #12
 800c5ee:	bd30      	pop	{r4, r5, pc}
 800c5f0:	200022b8 	.word	0x200022b8

0800c5f4 <malloc>:
 800c5f4:	4b02      	ldr	r3, [pc, #8]	; (800c600 <malloc+0xc>)
 800c5f6:	4601      	mov	r1, r0
 800c5f8:	6818      	ldr	r0, [r3, #0]
 800c5fa:	f000 b823 	b.w	800c644 <_malloc_r>
 800c5fe:	bf00      	nop
 800c600:	20000178 	.word	0x20000178

0800c604 <sbrk_aligned>:
 800c604:	b570      	push	{r4, r5, r6, lr}
 800c606:	4e0e      	ldr	r6, [pc, #56]	; (800c640 <sbrk_aligned+0x3c>)
 800c608:	460c      	mov	r4, r1
 800c60a:	6831      	ldr	r1, [r6, #0]
 800c60c:	4605      	mov	r5, r0
 800c60e:	b911      	cbnz	r1, 800c616 <sbrk_aligned+0x12>
 800c610:	f000 fe40 	bl	800d294 <_sbrk_r>
 800c614:	6030      	str	r0, [r6, #0]
 800c616:	4621      	mov	r1, r4
 800c618:	4628      	mov	r0, r5
 800c61a:	f000 fe3b 	bl	800d294 <_sbrk_r>
 800c61e:	1c43      	adds	r3, r0, #1
 800c620:	d00a      	beq.n	800c638 <sbrk_aligned+0x34>
 800c622:	1cc4      	adds	r4, r0, #3
 800c624:	f024 0403 	bic.w	r4, r4, #3
 800c628:	42a0      	cmp	r0, r4
 800c62a:	d007      	beq.n	800c63c <sbrk_aligned+0x38>
 800c62c:	1a21      	subs	r1, r4, r0
 800c62e:	4628      	mov	r0, r5
 800c630:	f000 fe30 	bl	800d294 <_sbrk_r>
 800c634:	3001      	adds	r0, #1
 800c636:	d101      	bne.n	800c63c <sbrk_aligned+0x38>
 800c638:	f04f 34ff 	mov.w	r4, #4294967295
 800c63c:	4620      	mov	r0, r4
 800c63e:	bd70      	pop	{r4, r5, r6, pc}
 800c640:	200022bc 	.word	0x200022bc

0800c644 <_malloc_r>:
 800c644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c648:	1ccd      	adds	r5, r1, #3
 800c64a:	f025 0503 	bic.w	r5, r5, #3
 800c64e:	3508      	adds	r5, #8
 800c650:	2d0c      	cmp	r5, #12
 800c652:	bf38      	it	cc
 800c654:	250c      	movcc	r5, #12
 800c656:	2d00      	cmp	r5, #0
 800c658:	4607      	mov	r7, r0
 800c65a:	db01      	blt.n	800c660 <_malloc_r+0x1c>
 800c65c:	42a9      	cmp	r1, r5
 800c65e:	d905      	bls.n	800c66c <_malloc_r+0x28>
 800c660:	230c      	movs	r3, #12
 800c662:	603b      	str	r3, [r7, #0]
 800c664:	2600      	movs	r6, #0
 800c666:	4630      	mov	r0, r6
 800c668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c66c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c740 <_malloc_r+0xfc>
 800c670:	f000 f868 	bl	800c744 <__malloc_lock>
 800c674:	f8d8 3000 	ldr.w	r3, [r8]
 800c678:	461c      	mov	r4, r3
 800c67a:	bb5c      	cbnz	r4, 800c6d4 <_malloc_r+0x90>
 800c67c:	4629      	mov	r1, r5
 800c67e:	4638      	mov	r0, r7
 800c680:	f7ff ffc0 	bl	800c604 <sbrk_aligned>
 800c684:	1c43      	adds	r3, r0, #1
 800c686:	4604      	mov	r4, r0
 800c688:	d155      	bne.n	800c736 <_malloc_r+0xf2>
 800c68a:	f8d8 4000 	ldr.w	r4, [r8]
 800c68e:	4626      	mov	r6, r4
 800c690:	2e00      	cmp	r6, #0
 800c692:	d145      	bne.n	800c720 <_malloc_r+0xdc>
 800c694:	2c00      	cmp	r4, #0
 800c696:	d048      	beq.n	800c72a <_malloc_r+0xe6>
 800c698:	6823      	ldr	r3, [r4, #0]
 800c69a:	4631      	mov	r1, r6
 800c69c:	4638      	mov	r0, r7
 800c69e:	eb04 0903 	add.w	r9, r4, r3
 800c6a2:	f000 fdf7 	bl	800d294 <_sbrk_r>
 800c6a6:	4581      	cmp	r9, r0
 800c6a8:	d13f      	bne.n	800c72a <_malloc_r+0xe6>
 800c6aa:	6821      	ldr	r1, [r4, #0]
 800c6ac:	1a6d      	subs	r5, r5, r1
 800c6ae:	4629      	mov	r1, r5
 800c6b0:	4638      	mov	r0, r7
 800c6b2:	f7ff ffa7 	bl	800c604 <sbrk_aligned>
 800c6b6:	3001      	adds	r0, #1
 800c6b8:	d037      	beq.n	800c72a <_malloc_r+0xe6>
 800c6ba:	6823      	ldr	r3, [r4, #0]
 800c6bc:	442b      	add	r3, r5
 800c6be:	6023      	str	r3, [r4, #0]
 800c6c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d038      	beq.n	800c73a <_malloc_r+0xf6>
 800c6c8:	685a      	ldr	r2, [r3, #4]
 800c6ca:	42a2      	cmp	r2, r4
 800c6cc:	d12b      	bne.n	800c726 <_malloc_r+0xe2>
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	605a      	str	r2, [r3, #4]
 800c6d2:	e00f      	b.n	800c6f4 <_malloc_r+0xb0>
 800c6d4:	6822      	ldr	r2, [r4, #0]
 800c6d6:	1b52      	subs	r2, r2, r5
 800c6d8:	d41f      	bmi.n	800c71a <_malloc_r+0xd6>
 800c6da:	2a0b      	cmp	r2, #11
 800c6dc:	d917      	bls.n	800c70e <_malloc_r+0xca>
 800c6de:	1961      	adds	r1, r4, r5
 800c6e0:	42a3      	cmp	r3, r4
 800c6e2:	6025      	str	r5, [r4, #0]
 800c6e4:	bf18      	it	ne
 800c6e6:	6059      	strne	r1, [r3, #4]
 800c6e8:	6863      	ldr	r3, [r4, #4]
 800c6ea:	bf08      	it	eq
 800c6ec:	f8c8 1000 	streq.w	r1, [r8]
 800c6f0:	5162      	str	r2, [r4, r5]
 800c6f2:	604b      	str	r3, [r1, #4]
 800c6f4:	4638      	mov	r0, r7
 800c6f6:	f104 060b 	add.w	r6, r4, #11
 800c6fa:	f000 f829 	bl	800c750 <__malloc_unlock>
 800c6fe:	f026 0607 	bic.w	r6, r6, #7
 800c702:	1d23      	adds	r3, r4, #4
 800c704:	1af2      	subs	r2, r6, r3
 800c706:	d0ae      	beq.n	800c666 <_malloc_r+0x22>
 800c708:	1b9b      	subs	r3, r3, r6
 800c70a:	50a3      	str	r3, [r4, r2]
 800c70c:	e7ab      	b.n	800c666 <_malloc_r+0x22>
 800c70e:	42a3      	cmp	r3, r4
 800c710:	6862      	ldr	r2, [r4, #4]
 800c712:	d1dd      	bne.n	800c6d0 <_malloc_r+0x8c>
 800c714:	f8c8 2000 	str.w	r2, [r8]
 800c718:	e7ec      	b.n	800c6f4 <_malloc_r+0xb0>
 800c71a:	4623      	mov	r3, r4
 800c71c:	6864      	ldr	r4, [r4, #4]
 800c71e:	e7ac      	b.n	800c67a <_malloc_r+0x36>
 800c720:	4634      	mov	r4, r6
 800c722:	6876      	ldr	r6, [r6, #4]
 800c724:	e7b4      	b.n	800c690 <_malloc_r+0x4c>
 800c726:	4613      	mov	r3, r2
 800c728:	e7cc      	b.n	800c6c4 <_malloc_r+0x80>
 800c72a:	230c      	movs	r3, #12
 800c72c:	603b      	str	r3, [r7, #0]
 800c72e:	4638      	mov	r0, r7
 800c730:	f000 f80e 	bl	800c750 <__malloc_unlock>
 800c734:	e797      	b.n	800c666 <_malloc_r+0x22>
 800c736:	6025      	str	r5, [r4, #0]
 800c738:	e7dc      	b.n	800c6f4 <_malloc_r+0xb0>
 800c73a:	605b      	str	r3, [r3, #4]
 800c73c:	deff      	udf	#255	; 0xff
 800c73e:	bf00      	nop
 800c740:	200022b8 	.word	0x200022b8

0800c744 <__malloc_lock>:
 800c744:	4801      	ldr	r0, [pc, #4]	; (800c74c <__malloc_lock+0x8>)
 800c746:	f7ff b88c 	b.w	800b862 <__retarget_lock_acquire_recursive>
 800c74a:	bf00      	nop
 800c74c:	200022b4 	.word	0x200022b4

0800c750 <__malloc_unlock>:
 800c750:	4801      	ldr	r0, [pc, #4]	; (800c758 <__malloc_unlock+0x8>)
 800c752:	f7ff b887 	b.w	800b864 <__retarget_lock_release_recursive>
 800c756:	bf00      	nop
 800c758:	200022b4 	.word	0x200022b4

0800c75c <_Balloc>:
 800c75c:	b570      	push	{r4, r5, r6, lr}
 800c75e:	69c6      	ldr	r6, [r0, #28]
 800c760:	4604      	mov	r4, r0
 800c762:	460d      	mov	r5, r1
 800c764:	b976      	cbnz	r6, 800c784 <_Balloc+0x28>
 800c766:	2010      	movs	r0, #16
 800c768:	f7ff ff44 	bl	800c5f4 <malloc>
 800c76c:	4602      	mov	r2, r0
 800c76e:	61e0      	str	r0, [r4, #28]
 800c770:	b920      	cbnz	r0, 800c77c <_Balloc+0x20>
 800c772:	4b18      	ldr	r3, [pc, #96]	; (800c7d4 <_Balloc+0x78>)
 800c774:	4818      	ldr	r0, [pc, #96]	; (800c7d8 <_Balloc+0x7c>)
 800c776:	216b      	movs	r1, #107	; 0x6b
 800c778:	f000 fdaa 	bl	800d2d0 <__assert_func>
 800c77c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c780:	6006      	str	r6, [r0, #0]
 800c782:	60c6      	str	r6, [r0, #12]
 800c784:	69e6      	ldr	r6, [r4, #28]
 800c786:	68f3      	ldr	r3, [r6, #12]
 800c788:	b183      	cbz	r3, 800c7ac <_Balloc+0x50>
 800c78a:	69e3      	ldr	r3, [r4, #28]
 800c78c:	68db      	ldr	r3, [r3, #12]
 800c78e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c792:	b9b8      	cbnz	r0, 800c7c4 <_Balloc+0x68>
 800c794:	2101      	movs	r1, #1
 800c796:	fa01 f605 	lsl.w	r6, r1, r5
 800c79a:	1d72      	adds	r2, r6, #5
 800c79c:	0092      	lsls	r2, r2, #2
 800c79e:	4620      	mov	r0, r4
 800c7a0:	f000 fdb4 	bl	800d30c <_calloc_r>
 800c7a4:	b160      	cbz	r0, 800c7c0 <_Balloc+0x64>
 800c7a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c7aa:	e00e      	b.n	800c7ca <_Balloc+0x6e>
 800c7ac:	2221      	movs	r2, #33	; 0x21
 800c7ae:	2104      	movs	r1, #4
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	f000 fdab 	bl	800d30c <_calloc_r>
 800c7b6:	69e3      	ldr	r3, [r4, #28]
 800c7b8:	60f0      	str	r0, [r6, #12]
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1e4      	bne.n	800c78a <_Balloc+0x2e>
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	bd70      	pop	{r4, r5, r6, pc}
 800c7c4:	6802      	ldr	r2, [r0, #0]
 800c7c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c7d0:	e7f7      	b.n	800c7c2 <_Balloc+0x66>
 800c7d2:	bf00      	nop
 800c7d4:	0800da29 	.word	0x0800da29
 800c7d8:	0800daa9 	.word	0x0800daa9

0800c7dc <_Bfree>:
 800c7dc:	b570      	push	{r4, r5, r6, lr}
 800c7de:	69c6      	ldr	r6, [r0, #28]
 800c7e0:	4605      	mov	r5, r0
 800c7e2:	460c      	mov	r4, r1
 800c7e4:	b976      	cbnz	r6, 800c804 <_Bfree+0x28>
 800c7e6:	2010      	movs	r0, #16
 800c7e8:	f7ff ff04 	bl	800c5f4 <malloc>
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	61e8      	str	r0, [r5, #28]
 800c7f0:	b920      	cbnz	r0, 800c7fc <_Bfree+0x20>
 800c7f2:	4b09      	ldr	r3, [pc, #36]	; (800c818 <_Bfree+0x3c>)
 800c7f4:	4809      	ldr	r0, [pc, #36]	; (800c81c <_Bfree+0x40>)
 800c7f6:	218f      	movs	r1, #143	; 0x8f
 800c7f8:	f000 fd6a 	bl	800d2d0 <__assert_func>
 800c7fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c800:	6006      	str	r6, [r0, #0]
 800c802:	60c6      	str	r6, [r0, #12]
 800c804:	b13c      	cbz	r4, 800c816 <_Bfree+0x3a>
 800c806:	69eb      	ldr	r3, [r5, #28]
 800c808:	6862      	ldr	r2, [r4, #4]
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c810:	6021      	str	r1, [r4, #0]
 800c812:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c816:	bd70      	pop	{r4, r5, r6, pc}
 800c818:	0800da29 	.word	0x0800da29
 800c81c:	0800daa9 	.word	0x0800daa9

0800c820 <__multadd>:
 800c820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c824:	690d      	ldr	r5, [r1, #16]
 800c826:	4607      	mov	r7, r0
 800c828:	460c      	mov	r4, r1
 800c82a:	461e      	mov	r6, r3
 800c82c:	f101 0c14 	add.w	ip, r1, #20
 800c830:	2000      	movs	r0, #0
 800c832:	f8dc 3000 	ldr.w	r3, [ip]
 800c836:	b299      	uxth	r1, r3
 800c838:	fb02 6101 	mla	r1, r2, r1, r6
 800c83c:	0c1e      	lsrs	r6, r3, #16
 800c83e:	0c0b      	lsrs	r3, r1, #16
 800c840:	fb02 3306 	mla	r3, r2, r6, r3
 800c844:	b289      	uxth	r1, r1
 800c846:	3001      	adds	r0, #1
 800c848:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c84c:	4285      	cmp	r5, r0
 800c84e:	f84c 1b04 	str.w	r1, [ip], #4
 800c852:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c856:	dcec      	bgt.n	800c832 <__multadd+0x12>
 800c858:	b30e      	cbz	r6, 800c89e <__multadd+0x7e>
 800c85a:	68a3      	ldr	r3, [r4, #8]
 800c85c:	42ab      	cmp	r3, r5
 800c85e:	dc19      	bgt.n	800c894 <__multadd+0x74>
 800c860:	6861      	ldr	r1, [r4, #4]
 800c862:	4638      	mov	r0, r7
 800c864:	3101      	adds	r1, #1
 800c866:	f7ff ff79 	bl	800c75c <_Balloc>
 800c86a:	4680      	mov	r8, r0
 800c86c:	b928      	cbnz	r0, 800c87a <__multadd+0x5a>
 800c86e:	4602      	mov	r2, r0
 800c870:	4b0c      	ldr	r3, [pc, #48]	; (800c8a4 <__multadd+0x84>)
 800c872:	480d      	ldr	r0, [pc, #52]	; (800c8a8 <__multadd+0x88>)
 800c874:	21ba      	movs	r1, #186	; 0xba
 800c876:	f000 fd2b 	bl	800d2d0 <__assert_func>
 800c87a:	6922      	ldr	r2, [r4, #16]
 800c87c:	3202      	adds	r2, #2
 800c87e:	f104 010c 	add.w	r1, r4, #12
 800c882:	0092      	lsls	r2, r2, #2
 800c884:	300c      	adds	r0, #12
 800c886:	f000 fd15 	bl	800d2b4 <memcpy>
 800c88a:	4621      	mov	r1, r4
 800c88c:	4638      	mov	r0, r7
 800c88e:	f7ff ffa5 	bl	800c7dc <_Bfree>
 800c892:	4644      	mov	r4, r8
 800c894:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c898:	3501      	adds	r5, #1
 800c89a:	615e      	str	r6, [r3, #20]
 800c89c:	6125      	str	r5, [r4, #16]
 800c89e:	4620      	mov	r0, r4
 800c8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a4:	0800da98 	.word	0x0800da98
 800c8a8:	0800daa9 	.word	0x0800daa9

0800c8ac <__hi0bits>:
 800c8ac:	0c03      	lsrs	r3, r0, #16
 800c8ae:	041b      	lsls	r3, r3, #16
 800c8b0:	b9d3      	cbnz	r3, 800c8e8 <__hi0bits+0x3c>
 800c8b2:	0400      	lsls	r0, r0, #16
 800c8b4:	2310      	movs	r3, #16
 800c8b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c8ba:	bf04      	itt	eq
 800c8bc:	0200      	lsleq	r0, r0, #8
 800c8be:	3308      	addeq	r3, #8
 800c8c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c8c4:	bf04      	itt	eq
 800c8c6:	0100      	lsleq	r0, r0, #4
 800c8c8:	3304      	addeq	r3, #4
 800c8ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c8ce:	bf04      	itt	eq
 800c8d0:	0080      	lsleq	r0, r0, #2
 800c8d2:	3302      	addeq	r3, #2
 800c8d4:	2800      	cmp	r0, #0
 800c8d6:	db05      	blt.n	800c8e4 <__hi0bits+0x38>
 800c8d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c8dc:	f103 0301 	add.w	r3, r3, #1
 800c8e0:	bf08      	it	eq
 800c8e2:	2320      	moveq	r3, #32
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	4770      	bx	lr
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	e7e4      	b.n	800c8b6 <__hi0bits+0xa>

0800c8ec <__lo0bits>:
 800c8ec:	6803      	ldr	r3, [r0, #0]
 800c8ee:	f013 0207 	ands.w	r2, r3, #7
 800c8f2:	d00c      	beq.n	800c90e <__lo0bits+0x22>
 800c8f4:	07d9      	lsls	r1, r3, #31
 800c8f6:	d422      	bmi.n	800c93e <__lo0bits+0x52>
 800c8f8:	079a      	lsls	r2, r3, #30
 800c8fa:	bf49      	itett	mi
 800c8fc:	085b      	lsrmi	r3, r3, #1
 800c8fe:	089b      	lsrpl	r3, r3, #2
 800c900:	6003      	strmi	r3, [r0, #0]
 800c902:	2201      	movmi	r2, #1
 800c904:	bf5c      	itt	pl
 800c906:	6003      	strpl	r3, [r0, #0]
 800c908:	2202      	movpl	r2, #2
 800c90a:	4610      	mov	r0, r2
 800c90c:	4770      	bx	lr
 800c90e:	b299      	uxth	r1, r3
 800c910:	b909      	cbnz	r1, 800c916 <__lo0bits+0x2a>
 800c912:	0c1b      	lsrs	r3, r3, #16
 800c914:	2210      	movs	r2, #16
 800c916:	b2d9      	uxtb	r1, r3
 800c918:	b909      	cbnz	r1, 800c91e <__lo0bits+0x32>
 800c91a:	3208      	adds	r2, #8
 800c91c:	0a1b      	lsrs	r3, r3, #8
 800c91e:	0719      	lsls	r1, r3, #28
 800c920:	bf04      	itt	eq
 800c922:	091b      	lsreq	r3, r3, #4
 800c924:	3204      	addeq	r2, #4
 800c926:	0799      	lsls	r1, r3, #30
 800c928:	bf04      	itt	eq
 800c92a:	089b      	lsreq	r3, r3, #2
 800c92c:	3202      	addeq	r2, #2
 800c92e:	07d9      	lsls	r1, r3, #31
 800c930:	d403      	bmi.n	800c93a <__lo0bits+0x4e>
 800c932:	085b      	lsrs	r3, r3, #1
 800c934:	f102 0201 	add.w	r2, r2, #1
 800c938:	d003      	beq.n	800c942 <__lo0bits+0x56>
 800c93a:	6003      	str	r3, [r0, #0]
 800c93c:	e7e5      	b.n	800c90a <__lo0bits+0x1e>
 800c93e:	2200      	movs	r2, #0
 800c940:	e7e3      	b.n	800c90a <__lo0bits+0x1e>
 800c942:	2220      	movs	r2, #32
 800c944:	e7e1      	b.n	800c90a <__lo0bits+0x1e>
	...

0800c948 <__i2b>:
 800c948:	b510      	push	{r4, lr}
 800c94a:	460c      	mov	r4, r1
 800c94c:	2101      	movs	r1, #1
 800c94e:	f7ff ff05 	bl	800c75c <_Balloc>
 800c952:	4602      	mov	r2, r0
 800c954:	b928      	cbnz	r0, 800c962 <__i2b+0x1a>
 800c956:	4b05      	ldr	r3, [pc, #20]	; (800c96c <__i2b+0x24>)
 800c958:	4805      	ldr	r0, [pc, #20]	; (800c970 <__i2b+0x28>)
 800c95a:	f240 1145 	movw	r1, #325	; 0x145
 800c95e:	f000 fcb7 	bl	800d2d0 <__assert_func>
 800c962:	2301      	movs	r3, #1
 800c964:	6144      	str	r4, [r0, #20]
 800c966:	6103      	str	r3, [r0, #16]
 800c968:	bd10      	pop	{r4, pc}
 800c96a:	bf00      	nop
 800c96c:	0800da98 	.word	0x0800da98
 800c970:	0800daa9 	.word	0x0800daa9

0800c974 <__multiply>:
 800c974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c978:	4691      	mov	r9, r2
 800c97a:	690a      	ldr	r2, [r1, #16]
 800c97c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c980:	429a      	cmp	r2, r3
 800c982:	bfb8      	it	lt
 800c984:	460b      	movlt	r3, r1
 800c986:	460c      	mov	r4, r1
 800c988:	bfbc      	itt	lt
 800c98a:	464c      	movlt	r4, r9
 800c98c:	4699      	movlt	r9, r3
 800c98e:	6927      	ldr	r7, [r4, #16]
 800c990:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c994:	68a3      	ldr	r3, [r4, #8]
 800c996:	6861      	ldr	r1, [r4, #4]
 800c998:	eb07 060a 	add.w	r6, r7, sl
 800c99c:	42b3      	cmp	r3, r6
 800c99e:	b085      	sub	sp, #20
 800c9a0:	bfb8      	it	lt
 800c9a2:	3101      	addlt	r1, #1
 800c9a4:	f7ff feda 	bl	800c75c <_Balloc>
 800c9a8:	b930      	cbnz	r0, 800c9b8 <__multiply+0x44>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	4b44      	ldr	r3, [pc, #272]	; (800cac0 <__multiply+0x14c>)
 800c9ae:	4845      	ldr	r0, [pc, #276]	; (800cac4 <__multiply+0x150>)
 800c9b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c9b4:	f000 fc8c 	bl	800d2d0 <__assert_func>
 800c9b8:	f100 0514 	add.w	r5, r0, #20
 800c9bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c9c0:	462b      	mov	r3, r5
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	4543      	cmp	r3, r8
 800c9c6:	d321      	bcc.n	800ca0c <__multiply+0x98>
 800c9c8:	f104 0314 	add.w	r3, r4, #20
 800c9cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c9d0:	f109 0314 	add.w	r3, r9, #20
 800c9d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c9d8:	9202      	str	r2, [sp, #8]
 800c9da:	1b3a      	subs	r2, r7, r4
 800c9dc:	3a15      	subs	r2, #21
 800c9de:	f022 0203 	bic.w	r2, r2, #3
 800c9e2:	3204      	adds	r2, #4
 800c9e4:	f104 0115 	add.w	r1, r4, #21
 800c9e8:	428f      	cmp	r7, r1
 800c9ea:	bf38      	it	cc
 800c9ec:	2204      	movcc	r2, #4
 800c9ee:	9201      	str	r2, [sp, #4]
 800c9f0:	9a02      	ldr	r2, [sp, #8]
 800c9f2:	9303      	str	r3, [sp, #12]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d80c      	bhi.n	800ca12 <__multiply+0x9e>
 800c9f8:	2e00      	cmp	r6, #0
 800c9fa:	dd03      	ble.n	800ca04 <__multiply+0x90>
 800c9fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d05b      	beq.n	800cabc <__multiply+0x148>
 800ca04:	6106      	str	r6, [r0, #16]
 800ca06:	b005      	add	sp, #20
 800ca08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca0c:	f843 2b04 	str.w	r2, [r3], #4
 800ca10:	e7d8      	b.n	800c9c4 <__multiply+0x50>
 800ca12:	f8b3 a000 	ldrh.w	sl, [r3]
 800ca16:	f1ba 0f00 	cmp.w	sl, #0
 800ca1a:	d024      	beq.n	800ca66 <__multiply+0xf2>
 800ca1c:	f104 0e14 	add.w	lr, r4, #20
 800ca20:	46a9      	mov	r9, r5
 800ca22:	f04f 0c00 	mov.w	ip, #0
 800ca26:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ca2a:	f8d9 1000 	ldr.w	r1, [r9]
 800ca2e:	fa1f fb82 	uxth.w	fp, r2
 800ca32:	b289      	uxth	r1, r1
 800ca34:	fb0a 110b 	mla	r1, sl, fp, r1
 800ca38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ca3c:	f8d9 2000 	ldr.w	r2, [r9]
 800ca40:	4461      	add	r1, ip
 800ca42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca46:	fb0a c20b 	mla	r2, sl, fp, ip
 800ca4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ca4e:	b289      	uxth	r1, r1
 800ca50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca54:	4577      	cmp	r7, lr
 800ca56:	f849 1b04 	str.w	r1, [r9], #4
 800ca5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca5e:	d8e2      	bhi.n	800ca26 <__multiply+0xb2>
 800ca60:	9a01      	ldr	r2, [sp, #4]
 800ca62:	f845 c002 	str.w	ip, [r5, r2]
 800ca66:	9a03      	ldr	r2, [sp, #12]
 800ca68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ca6c:	3304      	adds	r3, #4
 800ca6e:	f1b9 0f00 	cmp.w	r9, #0
 800ca72:	d021      	beq.n	800cab8 <__multiply+0x144>
 800ca74:	6829      	ldr	r1, [r5, #0]
 800ca76:	f104 0c14 	add.w	ip, r4, #20
 800ca7a:	46ae      	mov	lr, r5
 800ca7c:	f04f 0a00 	mov.w	sl, #0
 800ca80:	f8bc b000 	ldrh.w	fp, [ip]
 800ca84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ca88:	fb09 220b 	mla	r2, r9, fp, r2
 800ca8c:	4452      	add	r2, sl
 800ca8e:	b289      	uxth	r1, r1
 800ca90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca94:	f84e 1b04 	str.w	r1, [lr], #4
 800ca98:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ca9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800caa0:	f8be 1000 	ldrh.w	r1, [lr]
 800caa4:	fb09 110a 	mla	r1, r9, sl, r1
 800caa8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800caac:	4567      	cmp	r7, ip
 800caae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cab2:	d8e5      	bhi.n	800ca80 <__multiply+0x10c>
 800cab4:	9a01      	ldr	r2, [sp, #4]
 800cab6:	50a9      	str	r1, [r5, r2]
 800cab8:	3504      	adds	r5, #4
 800caba:	e799      	b.n	800c9f0 <__multiply+0x7c>
 800cabc:	3e01      	subs	r6, #1
 800cabe:	e79b      	b.n	800c9f8 <__multiply+0x84>
 800cac0:	0800da98 	.word	0x0800da98
 800cac4:	0800daa9 	.word	0x0800daa9

0800cac8 <__pow5mult>:
 800cac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cacc:	4615      	mov	r5, r2
 800cace:	f012 0203 	ands.w	r2, r2, #3
 800cad2:	4606      	mov	r6, r0
 800cad4:	460f      	mov	r7, r1
 800cad6:	d007      	beq.n	800cae8 <__pow5mult+0x20>
 800cad8:	4c25      	ldr	r4, [pc, #148]	; (800cb70 <__pow5mult+0xa8>)
 800cada:	3a01      	subs	r2, #1
 800cadc:	2300      	movs	r3, #0
 800cade:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cae2:	f7ff fe9d 	bl	800c820 <__multadd>
 800cae6:	4607      	mov	r7, r0
 800cae8:	10ad      	asrs	r5, r5, #2
 800caea:	d03d      	beq.n	800cb68 <__pow5mult+0xa0>
 800caec:	69f4      	ldr	r4, [r6, #28]
 800caee:	b97c      	cbnz	r4, 800cb10 <__pow5mult+0x48>
 800caf0:	2010      	movs	r0, #16
 800caf2:	f7ff fd7f 	bl	800c5f4 <malloc>
 800caf6:	4602      	mov	r2, r0
 800caf8:	61f0      	str	r0, [r6, #28]
 800cafa:	b928      	cbnz	r0, 800cb08 <__pow5mult+0x40>
 800cafc:	4b1d      	ldr	r3, [pc, #116]	; (800cb74 <__pow5mult+0xac>)
 800cafe:	481e      	ldr	r0, [pc, #120]	; (800cb78 <__pow5mult+0xb0>)
 800cb00:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cb04:	f000 fbe4 	bl	800d2d0 <__assert_func>
 800cb08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb0c:	6004      	str	r4, [r0, #0]
 800cb0e:	60c4      	str	r4, [r0, #12]
 800cb10:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cb14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb18:	b94c      	cbnz	r4, 800cb2e <__pow5mult+0x66>
 800cb1a:	f240 2171 	movw	r1, #625	; 0x271
 800cb1e:	4630      	mov	r0, r6
 800cb20:	f7ff ff12 	bl	800c948 <__i2b>
 800cb24:	2300      	movs	r3, #0
 800cb26:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb2a:	4604      	mov	r4, r0
 800cb2c:	6003      	str	r3, [r0, #0]
 800cb2e:	f04f 0900 	mov.w	r9, #0
 800cb32:	07eb      	lsls	r3, r5, #31
 800cb34:	d50a      	bpl.n	800cb4c <__pow5mult+0x84>
 800cb36:	4639      	mov	r1, r7
 800cb38:	4622      	mov	r2, r4
 800cb3a:	4630      	mov	r0, r6
 800cb3c:	f7ff ff1a 	bl	800c974 <__multiply>
 800cb40:	4639      	mov	r1, r7
 800cb42:	4680      	mov	r8, r0
 800cb44:	4630      	mov	r0, r6
 800cb46:	f7ff fe49 	bl	800c7dc <_Bfree>
 800cb4a:	4647      	mov	r7, r8
 800cb4c:	106d      	asrs	r5, r5, #1
 800cb4e:	d00b      	beq.n	800cb68 <__pow5mult+0xa0>
 800cb50:	6820      	ldr	r0, [r4, #0]
 800cb52:	b938      	cbnz	r0, 800cb64 <__pow5mult+0x9c>
 800cb54:	4622      	mov	r2, r4
 800cb56:	4621      	mov	r1, r4
 800cb58:	4630      	mov	r0, r6
 800cb5a:	f7ff ff0b 	bl	800c974 <__multiply>
 800cb5e:	6020      	str	r0, [r4, #0]
 800cb60:	f8c0 9000 	str.w	r9, [r0]
 800cb64:	4604      	mov	r4, r0
 800cb66:	e7e4      	b.n	800cb32 <__pow5mult+0x6a>
 800cb68:	4638      	mov	r0, r7
 800cb6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb6e:	bf00      	nop
 800cb70:	0800dbf8 	.word	0x0800dbf8
 800cb74:	0800da29 	.word	0x0800da29
 800cb78:	0800daa9 	.word	0x0800daa9

0800cb7c <__lshift>:
 800cb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb80:	460c      	mov	r4, r1
 800cb82:	6849      	ldr	r1, [r1, #4]
 800cb84:	6923      	ldr	r3, [r4, #16]
 800cb86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb8a:	68a3      	ldr	r3, [r4, #8]
 800cb8c:	4607      	mov	r7, r0
 800cb8e:	4691      	mov	r9, r2
 800cb90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb94:	f108 0601 	add.w	r6, r8, #1
 800cb98:	42b3      	cmp	r3, r6
 800cb9a:	db0b      	blt.n	800cbb4 <__lshift+0x38>
 800cb9c:	4638      	mov	r0, r7
 800cb9e:	f7ff fddd 	bl	800c75c <_Balloc>
 800cba2:	4605      	mov	r5, r0
 800cba4:	b948      	cbnz	r0, 800cbba <__lshift+0x3e>
 800cba6:	4602      	mov	r2, r0
 800cba8:	4b28      	ldr	r3, [pc, #160]	; (800cc4c <__lshift+0xd0>)
 800cbaa:	4829      	ldr	r0, [pc, #164]	; (800cc50 <__lshift+0xd4>)
 800cbac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cbb0:	f000 fb8e 	bl	800d2d0 <__assert_func>
 800cbb4:	3101      	adds	r1, #1
 800cbb6:	005b      	lsls	r3, r3, #1
 800cbb8:	e7ee      	b.n	800cb98 <__lshift+0x1c>
 800cbba:	2300      	movs	r3, #0
 800cbbc:	f100 0114 	add.w	r1, r0, #20
 800cbc0:	f100 0210 	add.w	r2, r0, #16
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	4553      	cmp	r3, sl
 800cbc8:	db33      	blt.n	800cc32 <__lshift+0xb6>
 800cbca:	6920      	ldr	r0, [r4, #16]
 800cbcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbd0:	f104 0314 	add.w	r3, r4, #20
 800cbd4:	f019 091f 	ands.w	r9, r9, #31
 800cbd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cbdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cbe0:	d02b      	beq.n	800cc3a <__lshift+0xbe>
 800cbe2:	f1c9 0e20 	rsb	lr, r9, #32
 800cbe6:	468a      	mov	sl, r1
 800cbe8:	2200      	movs	r2, #0
 800cbea:	6818      	ldr	r0, [r3, #0]
 800cbec:	fa00 f009 	lsl.w	r0, r0, r9
 800cbf0:	4310      	orrs	r0, r2
 800cbf2:	f84a 0b04 	str.w	r0, [sl], #4
 800cbf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbfa:	459c      	cmp	ip, r3
 800cbfc:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc00:	d8f3      	bhi.n	800cbea <__lshift+0x6e>
 800cc02:	ebac 0304 	sub.w	r3, ip, r4
 800cc06:	3b15      	subs	r3, #21
 800cc08:	f023 0303 	bic.w	r3, r3, #3
 800cc0c:	3304      	adds	r3, #4
 800cc0e:	f104 0015 	add.w	r0, r4, #21
 800cc12:	4584      	cmp	ip, r0
 800cc14:	bf38      	it	cc
 800cc16:	2304      	movcc	r3, #4
 800cc18:	50ca      	str	r2, [r1, r3]
 800cc1a:	b10a      	cbz	r2, 800cc20 <__lshift+0xa4>
 800cc1c:	f108 0602 	add.w	r6, r8, #2
 800cc20:	3e01      	subs	r6, #1
 800cc22:	4638      	mov	r0, r7
 800cc24:	612e      	str	r6, [r5, #16]
 800cc26:	4621      	mov	r1, r4
 800cc28:	f7ff fdd8 	bl	800c7dc <_Bfree>
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc32:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc36:	3301      	adds	r3, #1
 800cc38:	e7c5      	b.n	800cbc6 <__lshift+0x4a>
 800cc3a:	3904      	subs	r1, #4
 800cc3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc40:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc44:	459c      	cmp	ip, r3
 800cc46:	d8f9      	bhi.n	800cc3c <__lshift+0xc0>
 800cc48:	e7ea      	b.n	800cc20 <__lshift+0xa4>
 800cc4a:	bf00      	nop
 800cc4c:	0800da98 	.word	0x0800da98
 800cc50:	0800daa9 	.word	0x0800daa9

0800cc54 <__mcmp>:
 800cc54:	b530      	push	{r4, r5, lr}
 800cc56:	6902      	ldr	r2, [r0, #16]
 800cc58:	690c      	ldr	r4, [r1, #16]
 800cc5a:	1b12      	subs	r2, r2, r4
 800cc5c:	d10e      	bne.n	800cc7c <__mcmp+0x28>
 800cc5e:	f100 0314 	add.w	r3, r0, #20
 800cc62:	3114      	adds	r1, #20
 800cc64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cc68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cc6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cc70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cc74:	42a5      	cmp	r5, r4
 800cc76:	d003      	beq.n	800cc80 <__mcmp+0x2c>
 800cc78:	d305      	bcc.n	800cc86 <__mcmp+0x32>
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	4610      	mov	r0, r2
 800cc7e:	bd30      	pop	{r4, r5, pc}
 800cc80:	4283      	cmp	r3, r0
 800cc82:	d3f3      	bcc.n	800cc6c <__mcmp+0x18>
 800cc84:	e7fa      	b.n	800cc7c <__mcmp+0x28>
 800cc86:	f04f 32ff 	mov.w	r2, #4294967295
 800cc8a:	e7f7      	b.n	800cc7c <__mcmp+0x28>

0800cc8c <__mdiff>:
 800cc8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc90:	460c      	mov	r4, r1
 800cc92:	4606      	mov	r6, r0
 800cc94:	4611      	mov	r1, r2
 800cc96:	4620      	mov	r0, r4
 800cc98:	4690      	mov	r8, r2
 800cc9a:	f7ff ffdb 	bl	800cc54 <__mcmp>
 800cc9e:	1e05      	subs	r5, r0, #0
 800cca0:	d110      	bne.n	800ccc4 <__mdiff+0x38>
 800cca2:	4629      	mov	r1, r5
 800cca4:	4630      	mov	r0, r6
 800cca6:	f7ff fd59 	bl	800c75c <_Balloc>
 800ccaa:	b930      	cbnz	r0, 800ccba <__mdiff+0x2e>
 800ccac:	4b3a      	ldr	r3, [pc, #232]	; (800cd98 <__mdiff+0x10c>)
 800ccae:	4602      	mov	r2, r0
 800ccb0:	f240 2137 	movw	r1, #567	; 0x237
 800ccb4:	4839      	ldr	r0, [pc, #228]	; (800cd9c <__mdiff+0x110>)
 800ccb6:	f000 fb0b 	bl	800d2d0 <__assert_func>
 800ccba:	2301      	movs	r3, #1
 800ccbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ccc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccc4:	bfa4      	itt	ge
 800ccc6:	4643      	movge	r3, r8
 800ccc8:	46a0      	movge	r8, r4
 800ccca:	4630      	mov	r0, r6
 800cccc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ccd0:	bfa6      	itte	ge
 800ccd2:	461c      	movge	r4, r3
 800ccd4:	2500      	movge	r5, #0
 800ccd6:	2501      	movlt	r5, #1
 800ccd8:	f7ff fd40 	bl	800c75c <_Balloc>
 800ccdc:	b920      	cbnz	r0, 800cce8 <__mdiff+0x5c>
 800ccde:	4b2e      	ldr	r3, [pc, #184]	; (800cd98 <__mdiff+0x10c>)
 800cce0:	4602      	mov	r2, r0
 800cce2:	f240 2145 	movw	r1, #581	; 0x245
 800cce6:	e7e5      	b.n	800ccb4 <__mdiff+0x28>
 800cce8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ccec:	6926      	ldr	r6, [r4, #16]
 800ccee:	60c5      	str	r5, [r0, #12]
 800ccf0:	f104 0914 	add.w	r9, r4, #20
 800ccf4:	f108 0514 	add.w	r5, r8, #20
 800ccf8:	f100 0e14 	add.w	lr, r0, #20
 800ccfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cd00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cd04:	f108 0210 	add.w	r2, r8, #16
 800cd08:	46f2      	mov	sl, lr
 800cd0a:	2100      	movs	r1, #0
 800cd0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cd10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cd14:	fa11 f88b 	uxtah	r8, r1, fp
 800cd18:	b299      	uxth	r1, r3
 800cd1a:	0c1b      	lsrs	r3, r3, #16
 800cd1c:	eba8 0801 	sub.w	r8, r8, r1
 800cd20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cd24:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cd28:	fa1f f888 	uxth.w	r8, r8
 800cd2c:	1419      	asrs	r1, r3, #16
 800cd2e:	454e      	cmp	r6, r9
 800cd30:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cd34:	f84a 3b04 	str.w	r3, [sl], #4
 800cd38:	d8e8      	bhi.n	800cd0c <__mdiff+0x80>
 800cd3a:	1b33      	subs	r3, r6, r4
 800cd3c:	3b15      	subs	r3, #21
 800cd3e:	f023 0303 	bic.w	r3, r3, #3
 800cd42:	3304      	adds	r3, #4
 800cd44:	3415      	adds	r4, #21
 800cd46:	42a6      	cmp	r6, r4
 800cd48:	bf38      	it	cc
 800cd4a:	2304      	movcc	r3, #4
 800cd4c:	441d      	add	r5, r3
 800cd4e:	4473      	add	r3, lr
 800cd50:	469e      	mov	lr, r3
 800cd52:	462e      	mov	r6, r5
 800cd54:	4566      	cmp	r6, ip
 800cd56:	d30e      	bcc.n	800cd76 <__mdiff+0xea>
 800cd58:	f10c 0203 	add.w	r2, ip, #3
 800cd5c:	1b52      	subs	r2, r2, r5
 800cd5e:	f022 0203 	bic.w	r2, r2, #3
 800cd62:	3d03      	subs	r5, #3
 800cd64:	45ac      	cmp	ip, r5
 800cd66:	bf38      	it	cc
 800cd68:	2200      	movcc	r2, #0
 800cd6a:	4413      	add	r3, r2
 800cd6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cd70:	b17a      	cbz	r2, 800cd92 <__mdiff+0x106>
 800cd72:	6107      	str	r7, [r0, #16]
 800cd74:	e7a4      	b.n	800ccc0 <__mdiff+0x34>
 800cd76:	f856 8b04 	ldr.w	r8, [r6], #4
 800cd7a:	fa11 f288 	uxtah	r2, r1, r8
 800cd7e:	1414      	asrs	r4, r2, #16
 800cd80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cd84:	b292      	uxth	r2, r2
 800cd86:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cd8a:	f84e 2b04 	str.w	r2, [lr], #4
 800cd8e:	1421      	asrs	r1, r4, #16
 800cd90:	e7e0      	b.n	800cd54 <__mdiff+0xc8>
 800cd92:	3f01      	subs	r7, #1
 800cd94:	e7ea      	b.n	800cd6c <__mdiff+0xe0>
 800cd96:	bf00      	nop
 800cd98:	0800da98 	.word	0x0800da98
 800cd9c:	0800daa9 	.word	0x0800daa9

0800cda0 <__d2b>:
 800cda0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cda4:	460f      	mov	r7, r1
 800cda6:	2101      	movs	r1, #1
 800cda8:	ec59 8b10 	vmov	r8, r9, d0
 800cdac:	4616      	mov	r6, r2
 800cdae:	f7ff fcd5 	bl	800c75c <_Balloc>
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	b930      	cbnz	r0, 800cdc4 <__d2b+0x24>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	4b24      	ldr	r3, [pc, #144]	; (800ce4c <__d2b+0xac>)
 800cdba:	4825      	ldr	r0, [pc, #148]	; (800ce50 <__d2b+0xb0>)
 800cdbc:	f240 310f 	movw	r1, #783	; 0x30f
 800cdc0:	f000 fa86 	bl	800d2d0 <__assert_func>
 800cdc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cdc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cdcc:	bb2d      	cbnz	r5, 800ce1a <__d2b+0x7a>
 800cdce:	9301      	str	r3, [sp, #4]
 800cdd0:	f1b8 0300 	subs.w	r3, r8, #0
 800cdd4:	d026      	beq.n	800ce24 <__d2b+0x84>
 800cdd6:	4668      	mov	r0, sp
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	f7ff fd87 	bl	800c8ec <__lo0bits>
 800cdde:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cde2:	b1e8      	cbz	r0, 800ce20 <__d2b+0x80>
 800cde4:	f1c0 0320 	rsb	r3, r0, #32
 800cde8:	fa02 f303 	lsl.w	r3, r2, r3
 800cdec:	430b      	orrs	r3, r1
 800cdee:	40c2      	lsrs	r2, r0
 800cdf0:	6163      	str	r3, [r4, #20]
 800cdf2:	9201      	str	r2, [sp, #4]
 800cdf4:	9b01      	ldr	r3, [sp, #4]
 800cdf6:	61a3      	str	r3, [r4, #24]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	bf14      	ite	ne
 800cdfc:	2202      	movne	r2, #2
 800cdfe:	2201      	moveq	r2, #1
 800ce00:	6122      	str	r2, [r4, #16]
 800ce02:	b1bd      	cbz	r5, 800ce34 <__d2b+0x94>
 800ce04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ce08:	4405      	add	r5, r0
 800ce0a:	603d      	str	r5, [r7, #0]
 800ce0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ce10:	6030      	str	r0, [r6, #0]
 800ce12:	4620      	mov	r0, r4
 800ce14:	b003      	add	sp, #12
 800ce16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce1e:	e7d6      	b.n	800cdce <__d2b+0x2e>
 800ce20:	6161      	str	r1, [r4, #20]
 800ce22:	e7e7      	b.n	800cdf4 <__d2b+0x54>
 800ce24:	a801      	add	r0, sp, #4
 800ce26:	f7ff fd61 	bl	800c8ec <__lo0bits>
 800ce2a:	9b01      	ldr	r3, [sp, #4]
 800ce2c:	6163      	str	r3, [r4, #20]
 800ce2e:	3020      	adds	r0, #32
 800ce30:	2201      	movs	r2, #1
 800ce32:	e7e5      	b.n	800ce00 <__d2b+0x60>
 800ce34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ce3c:	6038      	str	r0, [r7, #0]
 800ce3e:	6918      	ldr	r0, [r3, #16]
 800ce40:	f7ff fd34 	bl	800c8ac <__hi0bits>
 800ce44:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce48:	e7e2      	b.n	800ce10 <__d2b+0x70>
 800ce4a:	bf00      	nop
 800ce4c:	0800da98 	.word	0x0800da98
 800ce50:	0800daa9 	.word	0x0800daa9

0800ce54 <__ssputs_r>:
 800ce54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce58:	688e      	ldr	r6, [r1, #8]
 800ce5a:	461f      	mov	r7, r3
 800ce5c:	42be      	cmp	r6, r7
 800ce5e:	680b      	ldr	r3, [r1, #0]
 800ce60:	4682      	mov	sl, r0
 800ce62:	460c      	mov	r4, r1
 800ce64:	4690      	mov	r8, r2
 800ce66:	d82c      	bhi.n	800cec2 <__ssputs_r+0x6e>
 800ce68:	898a      	ldrh	r2, [r1, #12]
 800ce6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce6e:	d026      	beq.n	800cebe <__ssputs_r+0x6a>
 800ce70:	6965      	ldr	r5, [r4, #20]
 800ce72:	6909      	ldr	r1, [r1, #16]
 800ce74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce78:	eba3 0901 	sub.w	r9, r3, r1
 800ce7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce80:	1c7b      	adds	r3, r7, #1
 800ce82:	444b      	add	r3, r9
 800ce84:	106d      	asrs	r5, r5, #1
 800ce86:	429d      	cmp	r5, r3
 800ce88:	bf38      	it	cc
 800ce8a:	461d      	movcc	r5, r3
 800ce8c:	0553      	lsls	r3, r2, #21
 800ce8e:	d527      	bpl.n	800cee0 <__ssputs_r+0x8c>
 800ce90:	4629      	mov	r1, r5
 800ce92:	f7ff fbd7 	bl	800c644 <_malloc_r>
 800ce96:	4606      	mov	r6, r0
 800ce98:	b360      	cbz	r0, 800cef4 <__ssputs_r+0xa0>
 800ce9a:	6921      	ldr	r1, [r4, #16]
 800ce9c:	464a      	mov	r2, r9
 800ce9e:	f000 fa09 	bl	800d2b4 <memcpy>
 800cea2:	89a3      	ldrh	r3, [r4, #12]
 800cea4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceac:	81a3      	strh	r3, [r4, #12]
 800ceae:	6126      	str	r6, [r4, #16]
 800ceb0:	6165      	str	r5, [r4, #20]
 800ceb2:	444e      	add	r6, r9
 800ceb4:	eba5 0509 	sub.w	r5, r5, r9
 800ceb8:	6026      	str	r6, [r4, #0]
 800ceba:	60a5      	str	r5, [r4, #8]
 800cebc:	463e      	mov	r6, r7
 800cebe:	42be      	cmp	r6, r7
 800cec0:	d900      	bls.n	800cec4 <__ssputs_r+0x70>
 800cec2:	463e      	mov	r6, r7
 800cec4:	6820      	ldr	r0, [r4, #0]
 800cec6:	4632      	mov	r2, r6
 800cec8:	4641      	mov	r1, r8
 800ceca:	f000 f9c9 	bl	800d260 <memmove>
 800cece:	68a3      	ldr	r3, [r4, #8]
 800ced0:	1b9b      	subs	r3, r3, r6
 800ced2:	60a3      	str	r3, [r4, #8]
 800ced4:	6823      	ldr	r3, [r4, #0]
 800ced6:	4433      	add	r3, r6
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	2000      	movs	r0, #0
 800cedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee0:	462a      	mov	r2, r5
 800cee2:	f000 fa3b 	bl	800d35c <_realloc_r>
 800cee6:	4606      	mov	r6, r0
 800cee8:	2800      	cmp	r0, #0
 800ceea:	d1e0      	bne.n	800ceae <__ssputs_r+0x5a>
 800ceec:	6921      	ldr	r1, [r4, #16]
 800ceee:	4650      	mov	r0, sl
 800cef0:	f7ff fb34 	bl	800c55c <_free_r>
 800cef4:	230c      	movs	r3, #12
 800cef6:	f8ca 3000 	str.w	r3, [sl]
 800cefa:	89a3      	ldrh	r3, [r4, #12]
 800cefc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf00:	81a3      	strh	r3, [r4, #12]
 800cf02:	f04f 30ff 	mov.w	r0, #4294967295
 800cf06:	e7e9      	b.n	800cedc <__ssputs_r+0x88>

0800cf08 <_svfiprintf_r>:
 800cf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0c:	4698      	mov	r8, r3
 800cf0e:	898b      	ldrh	r3, [r1, #12]
 800cf10:	061b      	lsls	r3, r3, #24
 800cf12:	b09d      	sub	sp, #116	; 0x74
 800cf14:	4607      	mov	r7, r0
 800cf16:	460d      	mov	r5, r1
 800cf18:	4614      	mov	r4, r2
 800cf1a:	d50e      	bpl.n	800cf3a <_svfiprintf_r+0x32>
 800cf1c:	690b      	ldr	r3, [r1, #16]
 800cf1e:	b963      	cbnz	r3, 800cf3a <_svfiprintf_r+0x32>
 800cf20:	2140      	movs	r1, #64	; 0x40
 800cf22:	f7ff fb8f 	bl	800c644 <_malloc_r>
 800cf26:	6028      	str	r0, [r5, #0]
 800cf28:	6128      	str	r0, [r5, #16]
 800cf2a:	b920      	cbnz	r0, 800cf36 <_svfiprintf_r+0x2e>
 800cf2c:	230c      	movs	r3, #12
 800cf2e:	603b      	str	r3, [r7, #0]
 800cf30:	f04f 30ff 	mov.w	r0, #4294967295
 800cf34:	e0d0      	b.n	800d0d8 <_svfiprintf_r+0x1d0>
 800cf36:	2340      	movs	r3, #64	; 0x40
 800cf38:	616b      	str	r3, [r5, #20]
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf3e:	2320      	movs	r3, #32
 800cf40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf44:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf48:	2330      	movs	r3, #48	; 0x30
 800cf4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d0f0 <_svfiprintf_r+0x1e8>
 800cf4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf52:	f04f 0901 	mov.w	r9, #1
 800cf56:	4623      	mov	r3, r4
 800cf58:	469a      	mov	sl, r3
 800cf5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf5e:	b10a      	cbz	r2, 800cf64 <_svfiprintf_r+0x5c>
 800cf60:	2a25      	cmp	r2, #37	; 0x25
 800cf62:	d1f9      	bne.n	800cf58 <_svfiprintf_r+0x50>
 800cf64:	ebba 0b04 	subs.w	fp, sl, r4
 800cf68:	d00b      	beq.n	800cf82 <_svfiprintf_r+0x7a>
 800cf6a:	465b      	mov	r3, fp
 800cf6c:	4622      	mov	r2, r4
 800cf6e:	4629      	mov	r1, r5
 800cf70:	4638      	mov	r0, r7
 800cf72:	f7ff ff6f 	bl	800ce54 <__ssputs_r>
 800cf76:	3001      	adds	r0, #1
 800cf78:	f000 80a9 	beq.w	800d0ce <_svfiprintf_r+0x1c6>
 800cf7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf7e:	445a      	add	r2, fp
 800cf80:	9209      	str	r2, [sp, #36]	; 0x24
 800cf82:	f89a 3000 	ldrb.w	r3, [sl]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	f000 80a1 	beq.w	800d0ce <_svfiprintf_r+0x1c6>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf96:	f10a 0a01 	add.w	sl, sl, #1
 800cf9a:	9304      	str	r3, [sp, #16]
 800cf9c:	9307      	str	r3, [sp, #28]
 800cf9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfa2:	931a      	str	r3, [sp, #104]	; 0x68
 800cfa4:	4654      	mov	r4, sl
 800cfa6:	2205      	movs	r2, #5
 800cfa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfac:	4850      	ldr	r0, [pc, #320]	; (800d0f0 <_svfiprintf_r+0x1e8>)
 800cfae:	f7f3 f917 	bl	80001e0 <memchr>
 800cfb2:	9a04      	ldr	r2, [sp, #16]
 800cfb4:	b9d8      	cbnz	r0, 800cfee <_svfiprintf_r+0xe6>
 800cfb6:	06d0      	lsls	r0, r2, #27
 800cfb8:	bf44      	itt	mi
 800cfba:	2320      	movmi	r3, #32
 800cfbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfc0:	0711      	lsls	r1, r2, #28
 800cfc2:	bf44      	itt	mi
 800cfc4:	232b      	movmi	r3, #43	; 0x2b
 800cfc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfca:	f89a 3000 	ldrb.w	r3, [sl]
 800cfce:	2b2a      	cmp	r3, #42	; 0x2a
 800cfd0:	d015      	beq.n	800cffe <_svfiprintf_r+0xf6>
 800cfd2:	9a07      	ldr	r2, [sp, #28]
 800cfd4:	4654      	mov	r4, sl
 800cfd6:	2000      	movs	r0, #0
 800cfd8:	f04f 0c0a 	mov.w	ip, #10
 800cfdc:	4621      	mov	r1, r4
 800cfde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfe2:	3b30      	subs	r3, #48	; 0x30
 800cfe4:	2b09      	cmp	r3, #9
 800cfe6:	d94d      	bls.n	800d084 <_svfiprintf_r+0x17c>
 800cfe8:	b1b0      	cbz	r0, 800d018 <_svfiprintf_r+0x110>
 800cfea:	9207      	str	r2, [sp, #28]
 800cfec:	e014      	b.n	800d018 <_svfiprintf_r+0x110>
 800cfee:	eba0 0308 	sub.w	r3, r0, r8
 800cff2:	fa09 f303 	lsl.w	r3, r9, r3
 800cff6:	4313      	orrs	r3, r2
 800cff8:	9304      	str	r3, [sp, #16]
 800cffa:	46a2      	mov	sl, r4
 800cffc:	e7d2      	b.n	800cfa4 <_svfiprintf_r+0x9c>
 800cffe:	9b03      	ldr	r3, [sp, #12]
 800d000:	1d19      	adds	r1, r3, #4
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	9103      	str	r1, [sp, #12]
 800d006:	2b00      	cmp	r3, #0
 800d008:	bfbb      	ittet	lt
 800d00a:	425b      	neglt	r3, r3
 800d00c:	f042 0202 	orrlt.w	r2, r2, #2
 800d010:	9307      	strge	r3, [sp, #28]
 800d012:	9307      	strlt	r3, [sp, #28]
 800d014:	bfb8      	it	lt
 800d016:	9204      	strlt	r2, [sp, #16]
 800d018:	7823      	ldrb	r3, [r4, #0]
 800d01a:	2b2e      	cmp	r3, #46	; 0x2e
 800d01c:	d10c      	bne.n	800d038 <_svfiprintf_r+0x130>
 800d01e:	7863      	ldrb	r3, [r4, #1]
 800d020:	2b2a      	cmp	r3, #42	; 0x2a
 800d022:	d134      	bne.n	800d08e <_svfiprintf_r+0x186>
 800d024:	9b03      	ldr	r3, [sp, #12]
 800d026:	1d1a      	adds	r2, r3, #4
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	9203      	str	r2, [sp, #12]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	bfb8      	it	lt
 800d030:	f04f 33ff 	movlt.w	r3, #4294967295
 800d034:	3402      	adds	r4, #2
 800d036:	9305      	str	r3, [sp, #20]
 800d038:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d100 <_svfiprintf_r+0x1f8>
 800d03c:	7821      	ldrb	r1, [r4, #0]
 800d03e:	2203      	movs	r2, #3
 800d040:	4650      	mov	r0, sl
 800d042:	f7f3 f8cd 	bl	80001e0 <memchr>
 800d046:	b138      	cbz	r0, 800d058 <_svfiprintf_r+0x150>
 800d048:	9b04      	ldr	r3, [sp, #16]
 800d04a:	eba0 000a 	sub.w	r0, r0, sl
 800d04e:	2240      	movs	r2, #64	; 0x40
 800d050:	4082      	lsls	r2, r0
 800d052:	4313      	orrs	r3, r2
 800d054:	3401      	adds	r4, #1
 800d056:	9304      	str	r3, [sp, #16]
 800d058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d05c:	4825      	ldr	r0, [pc, #148]	; (800d0f4 <_svfiprintf_r+0x1ec>)
 800d05e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d062:	2206      	movs	r2, #6
 800d064:	f7f3 f8bc 	bl	80001e0 <memchr>
 800d068:	2800      	cmp	r0, #0
 800d06a:	d038      	beq.n	800d0de <_svfiprintf_r+0x1d6>
 800d06c:	4b22      	ldr	r3, [pc, #136]	; (800d0f8 <_svfiprintf_r+0x1f0>)
 800d06e:	bb1b      	cbnz	r3, 800d0b8 <_svfiprintf_r+0x1b0>
 800d070:	9b03      	ldr	r3, [sp, #12]
 800d072:	3307      	adds	r3, #7
 800d074:	f023 0307 	bic.w	r3, r3, #7
 800d078:	3308      	adds	r3, #8
 800d07a:	9303      	str	r3, [sp, #12]
 800d07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d07e:	4433      	add	r3, r6
 800d080:	9309      	str	r3, [sp, #36]	; 0x24
 800d082:	e768      	b.n	800cf56 <_svfiprintf_r+0x4e>
 800d084:	fb0c 3202 	mla	r2, ip, r2, r3
 800d088:	460c      	mov	r4, r1
 800d08a:	2001      	movs	r0, #1
 800d08c:	e7a6      	b.n	800cfdc <_svfiprintf_r+0xd4>
 800d08e:	2300      	movs	r3, #0
 800d090:	3401      	adds	r4, #1
 800d092:	9305      	str	r3, [sp, #20]
 800d094:	4619      	mov	r1, r3
 800d096:	f04f 0c0a 	mov.w	ip, #10
 800d09a:	4620      	mov	r0, r4
 800d09c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0a0:	3a30      	subs	r2, #48	; 0x30
 800d0a2:	2a09      	cmp	r2, #9
 800d0a4:	d903      	bls.n	800d0ae <_svfiprintf_r+0x1a6>
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d0c6      	beq.n	800d038 <_svfiprintf_r+0x130>
 800d0aa:	9105      	str	r1, [sp, #20]
 800d0ac:	e7c4      	b.n	800d038 <_svfiprintf_r+0x130>
 800d0ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0b2:	4604      	mov	r4, r0
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e7f0      	b.n	800d09a <_svfiprintf_r+0x192>
 800d0b8:	ab03      	add	r3, sp, #12
 800d0ba:	9300      	str	r3, [sp, #0]
 800d0bc:	462a      	mov	r2, r5
 800d0be:	4b0f      	ldr	r3, [pc, #60]	; (800d0fc <_svfiprintf_r+0x1f4>)
 800d0c0:	a904      	add	r1, sp, #16
 800d0c2:	4638      	mov	r0, r7
 800d0c4:	f7fd fe50 	bl	800ad68 <_printf_float>
 800d0c8:	1c42      	adds	r2, r0, #1
 800d0ca:	4606      	mov	r6, r0
 800d0cc:	d1d6      	bne.n	800d07c <_svfiprintf_r+0x174>
 800d0ce:	89ab      	ldrh	r3, [r5, #12]
 800d0d0:	065b      	lsls	r3, r3, #25
 800d0d2:	f53f af2d 	bmi.w	800cf30 <_svfiprintf_r+0x28>
 800d0d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0d8:	b01d      	add	sp, #116	; 0x74
 800d0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0de:	ab03      	add	r3, sp, #12
 800d0e0:	9300      	str	r3, [sp, #0]
 800d0e2:	462a      	mov	r2, r5
 800d0e4:	4b05      	ldr	r3, [pc, #20]	; (800d0fc <_svfiprintf_r+0x1f4>)
 800d0e6:	a904      	add	r1, sp, #16
 800d0e8:	4638      	mov	r0, r7
 800d0ea:	f7fe f8e1 	bl	800b2b0 <_printf_i>
 800d0ee:	e7eb      	b.n	800d0c8 <_svfiprintf_r+0x1c0>
 800d0f0:	0800dc04 	.word	0x0800dc04
 800d0f4:	0800dc0e 	.word	0x0800dc0e
 800d0f8:	0800ad69 	.word	0x0800ad69
 800d0fc:	0800ce55 	.word	0x0800ce55
 800d100:	0800dc0a 	.word	0x0800dc0a

0800d104 <__sflush_r>:
 800d104:	898a      	ldrh	r2, [r1, #12]
 800d106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d10a:	4605      	mov	r5, r0
 800d10c:	0710      	lsls	r0, r2, #28
 800d10e:	460c      	mov	r4, r1
 800d110:	d458      	bmi.n	800d1c4 <__sflush_r+0xc0>
 800d112:	684b      	ldr	r3, [r1, #4]
 800d114:	2b00      	cmp	r3, #0
 800d116:	dc05      	bgt.n	800d124 <__sflush_r+0x20>
 800d118:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	dc02      	bgt.n	800d124 <__sflush_r+0x20>
 800d11e:	2000      	movs	r0, #0
 800d120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d126:	2e00      	cmp	r6, #0
 800d128:	d0f9      	beq.n	800d11e <__sflush_r+0x1a>
 800d12a:	2300      	movs	r3, #0
 800d12c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d130:	682f      	ldr	r7, [r5, #0]
 800d132:	6a21      	ldr	r1, [r4, #32]
 800d134:	602b      	str	r3, [r5, #0]
 800d136:	d032      	beq.n	800d19e <__sflush_r+0x9a>
 800d138:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d13a:	89a3      	ldrh	r3, [r4, #12]
 800d13c:	075a      	lsls	r2, r3, #29
 800d13e:	d505      	bpl.n	800d14c <__sflush_r+0x48>
 800d140:	6863      	ldr	r3, [r4, #4]
 800d142:	1ac0      	subs	r0, r0, r3
 800d144:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d146:	b10b      	cbz	r3, 800d14c <__sflush_r+0x48>
 800d148:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d14a:	1ac0      	subs	r0, r0, r3
 800d14c:	2300      	movs	r3, #0
 800d14e:	4602      	mov	r2, r0
 800d150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d152:	6a21      	ldr	r1, [r4, #32]
 800d154:	4628      	mov	r0, r5
 800d156:	47b0      	blx	r6
 800d158:	1c43      	adds	r3, r0, #1
 800d15a:	89a3      	ldrh	r3, [r4, #12]
 800d15c:	d106      	bne.n	800d16c <__sflush_r+0x68>
 800d15e:	6829      	ldr	r1, [r5, #0]
 800d160:	291d      	cmp	r1, #29
 800d162:	d82b      	bhi.n	800d1bc <__sflush_r+0xb8>
 800d164:	4a29      	ldr	r2, [pc, #164]	; (800d20c <__sflush_r+0x108>)
 800d166:	410a      	asrs	r2, r1
 800d168:	07d6      	lsls	r6, r2, #31
 800d16a:	d427      	bmi.n	800d1bc <__sflush_r+0xb8>
 800d16c:	2200      	movs	r2, #0
 800d16e:	6062      	str	r2, [r4, #4]
 800d170:	04d9      	lsls	r1, r3, #19
 800d172:	6922      	ldr	r2, [r4, #16]
 800d174:	6022      	str	r2, [r4, #0]
 800d176:	d504      	bpl.n	800d182 <__sflush_r+0x7e>
 800d178:	1c42      	adds	r2, r0, #1
 800d17a:	d101      	bne.n	800d180 <__sflush_r+0x7c>
 800d17c:	682b      	ldr	r3, [r5, #0]
 800d17e:	b903      	cbnz	r3, 800d182 <__sflush_r+0x7e>
 800d180:	6560      	str	r0, [r4, #84]	; 0x54
 800d182:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d184:	602f      	str	r7, [r5, #0]
 800d186:	2900      	cmp	r1, #0
 800d188:	d0c9      	beq.n	800d11e <__sflush_r+0x1a>
 800d18a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d18e:	4299      	cmp	r1, r3
 800d190:	d002      	beq.n	800d198 <__sflush_r+0x94>
 800d192:	4628      	mov	r0, r5
 800d194:	f7ff f9e2 	bl	800c55c <_free_r>
 800d198:	2000      	movs	r0, #0
 800d19a:	6360      	str	r0, [r4, #52]	; 0x34
 800d19c:	e7c0      	b.n	800d120 <__sflush_r+0x1c>
 800d19e:	2301      	movs	r3, #1
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	47b0      	blx	r6
 800d1a4:	1c41      	adds	r1, r0, #1
 800d1a6:	d1c8      	bne.n	800d13a <__sflush_r+0x36>
 800d1a8:	682b      	ldr	r3, [r5, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d0c5      	beq.n	800d13a <__sflush_r+0x36>
 800d1ae:	2b1d      	cmp	r3, #29
 800d1b0:	d001      	beq.n	800d1b6 <__sflush_r+0xb2>
 800d1b2:	2b16      	cmp	r3, #22
 800d1b4:	d101      	bne.n	800d1ba <__sflush_r+0xb6>
 800d1b6:	602f      	str	r7, [r5, #0]
 800d1b8:	e7b1      	b.n	800d11e <__sflush_r+0x1a>
 800d1ba:	89a3      	ldrh	r3, [r4, #12]
 800d1bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1c0:	81a3      	strh	r3, [r4, #12]
 800d1c2:	e7ad      	b.n	800d120 <__sflush_r+0x1c>
 800d1c4:	690f      	ldr	r7, [r1, #16]
 800d1c6:	2f00      	cmp	r7, #0
 800d1c8:	d0a9      	beq.n	800d11e <__sflush_r+0x1a>
 800d1ca:	0793      	lsls	r3, r2, #30
 800d1cc:	680e      	ldr	r6, [r1, #0]
 800d1ce:	bf08      	it	eq
 800d1d0:	694b      	ldreq	r3, [r1, #20]
 800d1d2:	600f      	str	r7, [r1, #0]
 800d1d4:	bf18      	it	ne
 800d1d6:	2300      	movne	r3, #0
 800d1d8:	eba6 0807 	sub.w	r8, r6, r7
 800d1dc:	608b      	str	r3, [r1, #8]
 800d1de:	f1b8 0f00 	cmp.w	r8, #0
 800d1e2:	dd9c      	ble.n	800d11e <__sflush_r+0x1a>
 800d1e4:	6a21      	ldr	r1, [r4, #32]
 800d1e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d1e8:	4643      	mov	r3, r8
 800d1ea:	463a      	mov	r2, r7
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	47b0      	blx	r6
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	dc06      	bgt.n	800d202 <__sflush_r+0xfe>
 800d1f4:	89a3      	ldrh	r3, [r4, #12]
 800d1f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1fa:	81a3      	strh	r3, [r4, #12]
 800d1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d200:	e78e      	b.n	800d120 <__sflush_r+0x1c>
 800d202:	4407      	add	r7, r0
 800d204:	eba8 0800 	sub.w	r8, r8, r0
 800d208:	e7e9      	b.n	800d1de <__sflush_r+0xda>
 800d20a:	bf00      	nop
 800d20c:	dfbffffe 	.word	0xdfbffffe

0800d210 <_fflush_r>:
 800d210:	b538      	push	{r3, r4, r5, lr}
 800d212:	690b      	ldr	r3, [r1, #16]
 800d214:	4605      	mov	r5, r0
 800d216:	460c      	mov	r4, r1
 800d218:	b913      	cbnz	r3, 800d220 <_fflush_r+0x10>
 800d21a:	2500      	movs	r5, #0
 800d21c:	4628      	mov	r0, r5
 800d21e:	bd38      	pop	{r3, r4, r5, pc}
 800d220:	b118      	cbz	r0, 800d22a <_fflush_r+0x1a>
 800d222:	6a03      	ldr	r3, [r0, #32]
 800d224:	b90b      	cbnz	r3, 800d22a <_fflush_r+0x1a>
 800d226:	f7fe f9f1 	bl	800b60c <__sinit>
 800d22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d0f3      	beq.n	800d21a <_fflush_r+0xa>
 800d232:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d234:	07d0      	lsls	r0, r2, #31
 800d236:	d404      	bmi.n	800d242 <_fflush_r+0x32>
 800d238:	0599      	lsls	r1, r3, #22
 800d23a:	d402      	bmi.n	800d242 <_fflush_r+0x32>
 800d23c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d23e:	f7fe fb10 	bl	800b862 <__retarget_lock_acquire_recursive>
 800d242:	4628      	mov	r0, r5
 800d244:	4621      	mov	r1, r4
 800d246:	f7ff ff5d 	bl	800d104 <__sflush_r>
 800d24a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d24c:	07da      	lsls	r2, r3, #31
 800d24e:	4605      	mov	r5, r0
 800d250:	d4e4      	bmi.n	800d21c <_fflush_r+0xc>
 800d252:	89a3      	ldrh	r3, [r4, #12]
 800d254:	059b      	lsls	r3, r3, #22
 800d256:	d4e1      	bmi.n	800d21c <_fflush_r+0xc>
 800d258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d25a:	f7fe fb03 	bl	800b864 <__retarget_lock_release_recursive>
 800d25e:	e7dd      	b.n	800d21c <_fflush_r+0xc>

0800d260 <memmove>:
 800d260:	4288      	cmp	r0, r1
 800d262:	b510      	push	{r4, lr}
 800d264:	eb01 0402 	add.w	r4, r1, r2
 800d268:	d902      	bls.n	800d270 <memmove+0x10>
 800d26a:	4284      	cmp	r4, r0
 800d26c:	4623      	mov	r3, r4
 800d26e:	d807      	bhi.n	800d280 <memmove+0x20>
 800d270:	1e43      	subs	r3, r0, #1
 800d272:	42a1      	cmp	r1, r4
 800d274:	d008      	beq.n	800d288 <memmove+0x28>
 800d276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d27a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d27e:	e7f8      	b.n	800d272 <memmove+0x12>
 800d280:	4402      	add	r2, r0
 800d282:	4601      	mov	r1, r0
 800d284:	428a      	cmp	r2, r1
 800d286:	d100      	bne.n	800d28a <memmove+0x2a>
 800d288:	bd10      	pop	{r4, pc}
 800d28a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d28e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d292:	e7f7      	b.n	800d284 <memmove+0x24>

0800d294 <_sbrk_r>:
 800d294:	b538      	push	{r3, r4, r5, lr}
 800d296:	4d06      	ldr	r5, [pc, #24]	; (800d2b0 <_sbrk_r+0x1c>)
 800d298:	2300      	movs	r3, #0
 800d29a:	4604      	mov	r4, r0
 800d29c:	4608      	mov	r0, r1
 800d29e:	602b      	str	r3, [r5, #0]
 800d2a0:	f7f4 fe32 	bl	8001f08 <_sbrk>
 800d2a4:	1c43      	adds	r3, r0, #1
 800d2a6:	d102      	bne.n	800d2ae <_sbrk_r+0x1a>
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	b103      	cbz	r3, 800d2ae <_sbrk_r+0x1a>
 800d2ac:	6023      	str	r3, [r4, #0]
 800d2ae:	bd38      	pop	{r3, r4, r5, pc}
 800d2b0:	200022b0 	.word	0x200022b0

0800d2b4 <memcpy>:
 800d2b4:	440a      	add	r2, r1
 800d2b6:	4291      	cmp	r1, r2
 800d2b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2bc:	d100      	bne.n	800d2c0 <memcpy+0xc>
 800d2be:	4770      	bx	lr
 800d2c0:	b510      	push	{r4, lr}
 800d2c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2ca:	4291      	cmp	r1, r2
 800d2cc:	d1f9      	bne.n	800d2c2 <memcpy+0xe>
 800d2ce:	bd10      	pop	{r4, pc}

0800d2d0 <__assert_func>:
 800d2d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2d2:	4614      	mov	r4, r2
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	4b09      	ldr	r3, [pc, #36]	; (800d2fc <__assert_func+0x2c>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4605      	mov	r5, r0
 800d2dc:	68d8      	ldr	r0, [r3, #12]
 800d2de:	b14c      	cbz	r4, 800d2f4 <__assert_func+0x24>
 800d2e0:	4b07      	ldr	r3, [pc, #28]	; (800d300 <__assert_func+0x30>)
 800d2e2:	9100      	str	r1, [sp, #0]
 800d2e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2e8:	4906      	ldr	r1, [pc, #24]	; (800d304 <__assert_func+0x34>)
 800d2ea:	462b      	mov	r3, r5
 800d2ec:	f000 f872 	bl	800d3d4 <fiprintf>
 800d2f0:	f000 f882 	bl	800d3f8 <abort>
 800d2f4:	4b04      	ldr	r3, [pc, #16]	; (800d308 <__assert_func+0x38>)
 800d2f6:	461c      	mov	r4, r3
 800d2f8:	e7f3      	b.n	800d2e2 <__assert_func+0x12>
 800d2fa:	bf00      	nop
 800d2fc:	20000178 	.word	0x20000178
 800d300:	0800dc1f 	.word	0x0800dc1f
 800d304:	0800dc2c 	.word	0x0800dc2c
 800d308:	0800dc5a 	.word	0x0800dc5a

0800d30c <_calloc_r>:
 800d30c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d30e:	fba1 2402 	umull	r2, r4, r1, r2
 800d312:	b94c      	cbnz	r4, 800d328 <_calloc_r+0x1c>
 800d314:	4611      	mov	r1, r2
 800d316:	9201      	str	r2, [sp, #4]
 800d318:	f7ff f994 	bl	800c644 <_malloc_r>
 800d31c:	9a01      	ldr	r2, [sp, #4]
 800d31e:	4605      	mov	r5, r0
 800d320:	b930      	cbnz	r0, 800d330 <_calloc_r+0x24>
 800d322:	4628      	mov	r0, r5
 800d324:	b003      	add	sp, #12
 800d326:	bd30      	pop	{r4, r5, pc}
 800d328:	220c      	movs	r2, #12
 800d32a:	6002      	str	r2, [r0, #0]
 800d32c:	2500      	movs	r5, #0
 800d32e:	e7f8      	b.n	800d322 <_calloc_r+0x16>
 800d330:	4621      	mov	r1, r4
 800d332:	f7fe fa18 	bl	800b766 <memset>
 800d336:	e7f4      	b.n	800d322 <_calloc_r+0x16>

0800d338 <__ascii_mbtowc>:
 800d338:	b082      	sub	sp, #8
 800d33a:	b901      	cbnz	r1, 800d33e <__ascii_mbtowc+0x6>
 800d33c:	a901      	add	r1, sp, #4
 800d33e:	b142      	cbz	r2, 800d352 <__ascii_mbtowc+0x1a>
 800d340:	b14b      	cbz	r3, 800d356 <__ascii_mbtowc+0x1e>
 800d342:	7813      	ldrb	r3, [r2, #0]
 800d344:	600b      	str	r3, [r1, #0]
 800d346:	7812      	ldrb	r2, [r2, #0]
 800d348:	1e10      	subs	r0, r2, #0
 800d34a:	bf18      	it	ne
 800d34c:	2001      	movne	r0, #1
 800d34e:	b002      	add	sp, #8
 800d350:	4770      	bx	lr
 800d352:	4610      	mov	r0, r2
 800d354:	e7fb      	b.n	800d34e <__ascii_mbtowc+0x16>
 800d356:	f06f 0001 	mvn.w	r0, #1
 800d35a:	e7f8      	b.n	800d34e <__ascii_mbtowc+0x16>

0800d35c <_realloc_r>:
 800d35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d360:	4680      	mov	r8, r0
 800d362:	4614      	mov	r4, r2
 800d364:	460e      	mov	r6, r1
 800d366:	b921      	cbnz	r1, 800d372 <_realloc_r+0x16>
 800d368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d36c:	4611      	mov	r1, r2
 800d36e:	f7ff b969 	b.w	800c644 <_malloc_r>
 800d372:	b92a      	cbnz	r2, 800d380 <_realloc_r+0x24>
 800d374:	f7ff f8f2 	bl	800c55c <_free_r>
 800d378:	4625      	mov	r5, r4
 800d37a:	4628      	mov	r0, r5
 800d37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d380:	f000 f841 	bl	800d406 <_malloc_usable_size_r>
 800d384:	4284      	cmp	r4, r0
 800d386:	4607      	mov	r7, r0
 800d388:	d802      	bhi.n	800d390 <_realloc_r+0x34>
 800d38a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d38e:	d812      	bhi.n	800d3b6 <_realloc_r+0x5a>
 800d390:	4621      	mov	r1, r4
 800d392:	4640      	mov	r0, r8
 800d394:	f7ff f956 	bl	800c644 <_malloc_r>
 800d398:	4605      	mov	r5, r0
 800d39a:	2800      	cmp	r0, #0
 800d39c:	d0ed      	beq.n	800d37a <_realloc_r+0x1e>
 800d39e:	42bc      	cmp	r4, r7
 800d3a0:	4622      	mov	r2, r4
 800d3a2:	4631      	mov	r1, r6
 800d3a4:	bf28      	it	cs
 800d3a6:	463a      	movcs	r2, r7
 800d3a8:	f7ff ff84 	bl	800d2b4 <memcpy>
 800d3ac:	4631      	mov	r1, r6
 800d3ae:	4640      	mov	r0, r8
 800d3b0:	f7ff f8d4 	bl	800c55c <_free_r>
 800d3b4:	e7e1      	b.n	800d37a <_realloc_r+0x1e>
 800d3b6:	4635      	mov	r5, r6
 800d3b8:	e7df      	b.n	800d37a <_realloc_r+0x1e>

0800d3ba <__ascii_wctomb>:
 800d3ba:	b149      	cbz	r1, 800d3d0 <__ascii_wctomb+0x16>
 800d3bc:	2aff      	cmp	r2, #255	; 0xff
 800d3be:	bf85      	ittet	hi
 800d3c0:	238a      	movhi	r3, #138	; 0x8a
 800d3c2:	6003      	strhi	r3, [r0, #0]
 800d3c4:	700a      	strbls	r2, [r1, #0]
 800d3c6:	f04f 30ff 	movhi.w	r0, #4294967295
 800d3ca:	bf98      	it	ls
 800d3cc:	2001      	movls	r0, #1
 800d3ce:	4770      	bx	lr
 800d3d0:	4608      	mov	r0, r1
 800d3d2:	4770      	bx	lr

0800d3d4 <fiprintf>:
 800d3d4:	b40e      	push	{r1, r2, r3}
 800d3d6:	b503      	push	{r0, r1, lr}
 800d3d8:	4601      	mov	r1, r0
 800d3da:	ab03      	add	r3, sp, #12
 800d3dc:	4805      	ldr	r0, [pc, #20]	; (800d3f4 <fiprintf+0x20>)
 800d3de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3e2:	6800      	ldr	r0, [r0, #0]
 800d3e4:	9301      	str	r3, [sp, #4]
 800d3e6:	f000 f83f 	bl	800d468 <_vfiprintf_r>
 800d3ea:	b002      	add	sp, #8
 800d3ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3f0:	b003      	add	sp, #12
 800d3f2:	4770      	bx	lr
 800d3f4:	20000178 	.word	0x20000178

0800d3f8 <abort>:
 800d3f8:	b508      	push	{r3, lr}
 800d3fa:	2006      	movs	r0, #6
 800d3fc:	f000 fa0c 	bl	800d818 <raise>
 800d400:	2001      	movs	r0, #1
 800d402:	f7f4 fd09 	bl	8001e18 <_exit>

0800d406 <_malloc_usable_size_r>:
 800d406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d40a:	1f18      	subs	r0, r3, #4
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	bfbc      	itt	lt
 800d410:	580b      	ldrlt	r3, [r1, r0]
 800d412:	18c0      	addlt	r0, r0, r3
 800d414:	4770      	bx	lr

0800d416 <__sfputc_r>:
 800d416:	6893      	ldr	r3, [r2, #8]
 800d418:	3b01      	subs	r3, #1
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	b410      	push	{r4}
 800d41e:	6093      	str	r3, [r2, #8]
 800d420:	da08      	bge.n	800d434 <__sfputc_r+0x1e>
 800d422:	6994      	ldr	r4, [r2, #24]
 800d424:	42a3      	cmp	r3, r4
 800d426:	db01      	blt.n	800d42c <__sfputc_r+0x16>
 800d428:	290a      	cmp	r1, #10
 800d42a:	d103      	bne.n	800d434 <__sfputc_r+0x1e>
 800d42c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d430:	f000 b934 	b.w	800d69c <__swbuf_r>
 800d434:	6813      	ldr	r3, [r2, #0]
 800d436:	1c58      	adds	r0, r3, #1
 800d438:	6010      	str	r0, [r2, #0]
 800d43a:	7019      	strb	r1, [r3, #0]
 800d43c:	4608      	mov	r0, r1
 800d43e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d442:	4770      	bx	lr

0800d444 <__sfputs_r>:
 800d444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d446:	4606      	mov	r6, r0
 800d448:	460f      	mov	r7, r1
 800d44a:	4614      	mov	r4, r2
 800d44c:	18d5      	adds	r5, r2, r3
 800d44e:	42ac      	cmp	r4, r5
 800d450:	d101      	bne.n	800d456 <__sfputs_r+0x12>
 800d452:	2000      	movs	r0, #0
 800d454:	e007      	b.n	800d466 <__sfputs_r+0x22>
 800d456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d45a:	463a      	mov	r2, r7
 800d45c:	4630      	mov	r0, r6
 800d45e:	f7ff ffda 	bl	800d416 <__sfputc_r>
 800d462:	1c43      	adds	r3, r0, #1
 800d464:	d1f3      	bne.n	800d44e <__sfputs_r+0xa>
 800d466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d468 <_vfiprintf_r>:
 800d468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d46c:	460d      	mov	r5, r1
 800d46e:	b09d      	sub	sp, #116	; 0x74
 800d470:	4614      	mov	r4, r2
 800d472:	4698      	mov	r8, r3
 800d474:	4606      	mov	r6, r0
 800d476:	b118      	cbz	r0, 800d480 <_vfiprintf_r+0x18>
 800d478:	6a03      	ldr	r3, [r0, #32]
 800d47a:	b90b      	cbnz	r3, 800d480 <_vfiprintf_r+0x18>
 800d47c:	f7fe f8c6 	bl	800b60c <__sinit>
 800d480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d482:	07d9      	lsls	r1, r3, #31
 800d484:	d405      	bmi.n	800d492 <_vfiprintf_r+0x2a>
 800d486:	89ab      	ldrh	r3, [r5, #12]
 800d488:	059a      	lsls	r2, r3, #22
 800d48a:	d402      	bmi.n	800d492 <_vfiprintf_r+0x2a>
 800d48c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d48e:	f7fe f9e8 	bl	800b862 <__retarget_lock_acquire_recursive>
 800d492:	89ab      	ldrh	r3, [r5, #12]
 800d494:	071b      	lsls	r3, r3, #28
 800d496:	d501      	bpl.n	800d49c <_vfiprintf_r+0x34>
 800d498:	692b      	ldr	r3, [r5, #16]
 800d49a:	b99b      	cbnz	r3, 800d4c4 <_vfiprintf_r+0x5c>
 800d49c:	4629      	mov	r1, r5
 800d49e:	4630      	mov	r0, r6
 800d4a0:	f000 f93a 	bl	800d718 <__swsetup_r>
 800d4a4:	b170      	cbz	r0, 800d4c4 <_vfiprintf_r+0x5c>
 800d4a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4a8:	07dc      	lsls	r4, r3, #31
 800d4aa:	d504      	bpl.n	800d4b6 <_vfiprintf_r+0x4e>
 800d4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b0:	b01d      	add	sp, #116	; 0x74
 800d4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4b6:	89ab      	ldrh	r3, [r5, #12]
 800d4b8:	0598      	lsls	r0, r3, #22
 800d4ba:	d4f7      	bmi.n	800d4ac <_vfiprintf_r+0x44>
 800d4bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4be:	f7fe f9d1 	bl	800b864 <__retarget_lock_release_recursive>
 800d4c2:	e7f3      	b.n	800d4ac <_vfiprintf_r+0x44>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d4c8:	2320      	movs	r3, #32
 800d4ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4d2:	2330      	movs	r3, #48	; 0x30
 800d4d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d688 <_vfiprintf_r+0x220>
 800d4d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4dc:	f04f 0901 	mov.w	r9, #1
 800d4e0:	4623      	mov	r3, r4
 800d4e2:	469a      	mov	sl, r3
 800d4e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4e8:	b10a      	cbz	r2, 800d4ee <_vfiprintf_r+0x86>
 800d4ea:	2a25      	cmp	r2, #37	; 0x25
 800d4ec:	d1f9      	bne.n	800d4e2 <_vfiprintf_r+0x7a>
 800d4ee:	ebba 0b04 	subs.w	fp, sl, r4
 800d4f2:	d00b      	beq.n	800d50c <_vfiprintf_r+0xa4>
 800d4f4:	465b      	mov	r3, fp
 800d4f6:	4622      	mov	r2, r4
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	f7ff ffa2 	bl	800d444 <__sfputs_r>
 800d500:	3001      	adds	r0, #1
 800d502:	f000 80a9 	beq.w	800d658 <_vfiprintf_r+0x1f0>
 800d506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d508:	445a      	add	r2, fp
 800d50a:	9209      	str	r2, [sp, #36]	; 0x24
 800d50c:	f89a 3000 	ldrb.w	r3, [sl]
 800d510:	2b00      	cmp	r3, #0
 800d512:	f000 80a1 	beq.w	800d658 <_vfiprintf_r+0x1f0>
 800d516:	2300      	movs	r3, #0
 800d518:	f04f 32ff 	mov.w	r2, #4294967295
 800d51c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d520:	f10a 0a01 	add.w	sl, sl, #1
 800d524:	9304      	str	r3, [sp, #16]
 800d526:	9307      	str	r3, [sp, #28]
 800d528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d52c:	931a      	str	r3, [sp, #104]	; 0x68
 800d52e:	4654      	mov	r4, sl
 800d530:	2205      	movs	r2, #5
 800d532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d536:	4854      	ldr	r0, [pc, #336]	; (800d688 <_vfiprintf_r+0x220>)
 800d538:	f7f2 fe52 	bl	80001e0 <memchr>
 800d53c:	9a04      	ldr	r2, [sp, #16]
 800d53e:	b9d8      	cbnz	r0, 800d578 <_vfiprintf_r+0x110>
 800d540:	06d1      	lsls	r1, r2, #27
 800d542:	bf44      	itt	mi
 800d544:	2320      	movmi	r3, #32
 800d546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d54a:	0713      	lsls	r3, r2, #28
 800d54c:	bf44      	itt	mi
 800d54e:	232b      	movmi	r3, #43	; 0x2b
 800d550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d554:	f89a 3000 	ldrb.w	r3, [sl]
 800d558:	2b2a      	cmp	r3, #42	; 0x2a
 800d55a:	d015      	beq.n	800d588 <_vfiprintf_r+0x120>
 800d55c:	9a07      	ldr	r2, [sp, #28]
 800d55e:	4654      	mov	r4, sl
 800d560:	2000      	movs	r0, #0
 800d562:	f04f 0c0a 	mov.w	ip, #10
 800d566:	4621      	mov	r1, r4
 800d568:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d56c:	3b30      	subs	r3, #48	; 0x30
 800d56e:	2b09      	cmp	r3, #9
 800d570:	d94d      	bls.n	800d60e <_vfiprintf_r+0x1a6>
 800d572:	b1b0      	cbz	r0, 800d5a2 <_vfiprintf_r+0x13a>
 800d574:	9207      	str	r2, [sp, #28]
 800d576:	e014      	b.n	800d5a2 <_vfiprintf_r+0x13a>
 800d578:	eba0 0308 	sub.w	r3, r0, r8
 800d57c:	fa09 f303 	lsl.w	r3, r9, r3
 800d580:	4313      	orrs	r3, r2
 800d582:	9304      	str	r3, [sp, #16]
 800d584:	46a2      	mov	sl, r4
 800d586:	e7d2      	b.n	800d52e <_vfiprintf_r+0xc6>
 800d588:	9b03      	ldr	r3, [sp, #12]
 800d58a:	1d19      	adds	r1, r3, #4
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	9103      	str	r1, [sp, #12]
 800d590:	2b00      	cmp	r3, #0
 800d592:	bfbb      	ittet	lt
 800d594:	425b      	neglt	r3, r3
 800d596:	f042 0202 	orrlt.w	r2, r2, #2
 800d59a:	9307      	strge	r3, [sp, #28]
 800d59c:	9307      	strlt	r3, [sp, #28]
 800d59e:	bfb8      	it	lt
 800d5a0:	9204      	strlt	r2, [sp, #16]
 800d5a2:	7823      	ldrb	r3, [r4, #0]
 800d5a4:	2b2e      	cmp	r3, #46	; 0x2e
 800d5a6:	d10c      	bne.n	800d5c2 <_vfiprintf_r+0x15a>
 800d5a8:	7863      	ldrb	r3, [r4, #1]
 800d5aa:	2b2a      	cmp	r3, #42	; 0x2a
 800d5ac:	d134      	bne.n	800d618 <_vfiprintf_r+0x1b0>
 800d5ae:	9b03      	ldr	r3, [sp, #12]
 800d5b0:	1d1a      	adds	r2, r3, #4
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	9203      	str	r2, [sp, #12]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	bfb8      	it	lt
 800d5ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5be:	3402      	adds	r4, #2
 800d5c0:	9305      	str	r3, [sp, #20]
 800d5c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d698 <_vfiprintf_r+0x230>
 800d5c6:	7821      	ldrb	r1, [r4, #0]
 800d5c8:	2203      	movs	r2, #3
 800d5ca:	4650      	mov	r0, sl
 800d5cc:	f7f2 fe08 	bl	80001e0 <memchr>
 800d5d0:	b138      	cbz	r0, 800d5e2 <_vfiprintf_r+0x17a>
 800d5d2:	9b04      	ldr	r3, [sp, #16]
 800d5d4:	eba0 000a 	sub.w	r0, r0, sl
 800d5d8:	2240      	movs	r2, #64	; 0x40
 800d5da:	4082      	lsls	r2, r0
 800d5dc:	4313      	orrs	r3, r2
 800d5de:	3401      	adds	r4, #1
 800d5e0:	9304      	str	r3, [sp, #16]
 800d5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5e6:	4829      	ldr	r0, [pc, #164]	; (800d68c <_vfiprintf_r+0x224>)
 800d5e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5ec:	2206      	movs	r2, #6
 800d5ee:	f7f2 fdf7 	bl	80001e0 <memchr>
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	d03f      	beq.n	800d676 <_vfiprintf_r+0x20e>
 800d5f6:	4b26      	ldr	r3, [pc, #152]	; (800d690 <_vfiprintf_r+0x228>)
 800d5f8:	bb1b      	cbnz	r3, 800d642 <_vfiprintf_r+0x1da>
 800d5fa:	9b03      	ldr	r3, [sp, #12]
 800d5fc:	3307      	adds	r3, #7
 800d5fe:	f023 0307 	bic.w	r3, r3, #7
 800d602:	3308      	adds	r3, #8
 800d604:	9303      	str	r3, [sp, #12]
 800d606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d608:	443b      	add	r3, r7
 800d60a:	9309      	str	r3, [sp, #36]	; 0x24
 800d60c:	e768      	b.n	800d4e0 <_vfiprintf_r+0x78>
 800d60e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d612:	460c      	mov	r4, r1
 800d614:	2001      	movs	r0, #1
 800d616:	e7a6      	b.n	800d566 <_vfiprintf_r+0xfe>
 800d618:	2300      	movs	r3, #0
 800d61a:	3401      	adds	r4, #1
 800d61c:	9305      	str	r3, [sp, #20]
 800d61e:	4619      	mov	r1, r3
 800d620:	f04f 0c0a 	mov.w	ip, #10
 800d624:	4620      	mov	r0, r4
 800d626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d62a:	3a30      	subs	r2, #48	; 0x30
 800d62c:	2a09      	cmp	r2, #9
 800d62e:	d903      	bls.n	800d638 <_vfiprintf_r+0x1d0>
 800d630:	2b00      	cmp	r3, #0
 800d632:	d0c6      	beq.n	800d5c2 <_vfiprintf_r+0x15a>
 800d634:	9105      	str	r1, [sp, #20]
 800d636:	e7c4      	b.n	800d5c2 <_vfiprintf_r+0x15a>
 800d638:	fb0c 2101 	mla	r1, ip, r1, r2
 800d63c:	4604      	mov	r4, r0
 800d63e:	2301      	movs	r3, #1
 800d640:	e7f0      	b.n	800d624 <_vfiprintf_r+0x1bc>
 800d642:	ab03      	add	r3, sp, #12
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	462a      	mov	r2, r5
 800d648:	4b12      	ldr	r3, [pc, #72]	; (800d694 <_vfiprintf_r+0x22c>)
 800d64a:	a904      	add	r1, sp, #16
 800d64c:	4630      	mov	r0, r6
 800d64e:	f7fd fb8b 	bl	800ad68 <_printf_float>
 800d652:	4607      	mov	r7, r0
 800d654:	1c78      	adds	r0, r7, #1
 800d656:	d1d6      	bne.n	800d606 <_vfiprintf_r+0x19e>
 800d658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d65a:	07d9      	lsls	r1, r3, #31
 800d65c:	d405      	bmi.n	800d66a <_vfiprintf_r+0x202>
 800d65e:	89ab      	ldrh	r3, [r5, #12]
 800d660:	059a      	lsls	r2, r3, #22
 800d662:	d402      	bmi.n	800d66a <_vfiprintf_r+0x202>
 800d664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d666:	f7fe f8fd 	bl	800b864 <__retarget_lock_release_recursive>
 800d66a:	89ab      	ldrh	r3, [r5, #12]
 800d66c:	065b      	lsls	r3, r3, #25
 800d66e:	f53f af1d 	bmi.w	800d4ac <_vfiprintf_r+0x44>
 800d672:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d674:	e71c      	b.n	800d4b0 <_vfiprintf_r+0x48>
 800d676:	ab03      	add	r3, sp, #12
 800d678:	9300      	str	r3, [sp, #0]
 800d67a:	462a      	mov	r2, r5
 800d67c:	4b05      	ldr	r3, [pc, #20]	; (800d694 <_vfiprintf_r+0x22c>)
 800d67e:	a904      	add	r1, sp, #16
 800d680:	4630      	mov	r0, r6
 800d682:	f7fd fe15 	bl	800b2b0 <_printf_i>
 800d686:	e7e4      	b.n	800d652 <_vfiprintf_r+0x1ea>
 800d688:	0800dc04 	.word	0x0800dc04
 800d68c:	0800dc0e 	.word	0x0800dc0e
 800d690:	0800ad69 	.word	0x0800ad69
 800d694:	0800d445 	.word	0x0800d445
 800d698:	0800dc0a 	.word	0x0800dc0a

0800d69c <__swbuf_r>:
 800d69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69e:	460e      	mov	r6, r1
 800d6a0:	4614      	mov	r4, r2
 800d6a2:	4605      	mov	r5, r0
 800d6a4:	b118      	cbz	r0, 800d6ae <__swbuf_r+0x12>
 800d6a6:	6a03      	ldr	r3, [r0, #32]
 800d6a8:	b90b      	cbnz	r3, 800d6ae <__swbuf_r+0x12>
 800d6aa:	f7fd ffaf 	bl	800b60c <__sinit>
 800d6ae:	69a3      	ldr	r3, [r4, #24]
 800d6b0:	60a3      	str	r3, [r4, #8]
 800d6b2:	89a3      	ldrh	r3, [r4, #12]
 800d6b4:	071a      	lsls	r2, r3, #28
 800d6b6:	d525      	bpl.n	800d704 <__swbuf_r+0x68>
 800d6b8:	6923      	ldr	r3, [r4, #16]
 800d6ba:	b31b      	cbz	r3, 800d704 <__swbuf_r+0x68>
 800d6bc:	6823      	ldr	r3, [r4, #0]
 800d6be:	6922      	ldr	r2, [r4, #16]
 800d6c0:	1a98      	subs	r0, r3, r2
 800d6c2:	6963      	ldr	r3, [r4, #20]
 800d6c4:	b2f6      	uxtb	r6, r6
 800d6c6:	4283      	cmp	r3, r0
 800d6c8:	4637      	mov	r7, r6
 800d6ca:	dc04      	bgt.n	800d6d6 <__swbuf_r+0x3a>
 800d6cc:	4621      	mov	r1, r4
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	f7ff fd9e 	bl	800d210 <_fflush_r>
 800d6d4:	b9e0      	cbnz	r0, 800d710 <__swbuf_r+0x74>
 800d6d6:	68a3      	ldr	r3, [r4, #8]
 800d6d8:	3b01      	subs	r3, #1
 800d6da:	60a3      	str	r3, [r4, #8]
 800d6dc:	6823      	ldr	r3, [r4, #0]
 800d6de:	1c5a      	adds	r2, r3, #1
 800d6e0:	6022      	str	r2, [r4, #0]
 800d6e2:	701e      	strb	r6, [r3, #0]
 800d6e4:	6962      	ldr	r2, [r4, #20]
 800d6e6:	1c43      	adds	r3, r0, #1
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d004      	beq.n	800d6f6 <__swbuf_r+0x5a>
 800d6ec:	89a3      	ldrh	r3, [r4, #12]
 800d6ee:	07db      	lsls	r3, r3, #31
 800d6f0:	d506      	bpl.n	800d700 <__swbuf_r+0x64>
 800d6f2:	2e0a      	cmp	r6, #10
 800d6f4:	d104      	bne.n	800d700 <__swbuf_r+0x64>
 800d6f6:	4621      	mov	r1, r4
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	f7ff fd89 	bl	800d210 <_fflush_r>
 800d6fe:	b938      	cbnz	r0, 800d710 <__swbuf_r+0x74>
 800d700:	4638      	mov	r0, r7
 800d702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d704:	4621      	mov	r1, r4
 800d706:	4628      	mov	r0, r5
 800d708:	f000 f806 	bl	800d718 <__swsetup_r>
 800d70c:	2800      	cmp	r0, #0
 800d70e:	d0d5      	beq.n	800d6bc <__swbuf_r+0x20>
 800d710:	f04f 37ff 	mov.w	r7, #4294967295
 800d714:	e7f4      	b.n	800d700 <__swbuf_r+0x64>
	...

0800d718 <__swsetup_r>:
 800d718:	b538      	push	{r3, r4, r5, lr}
 800d71a:	4b2a      	ldr	r3, [pc, #168]	; (800d7c4 <__swsetup_r+0xac>)
 800d71c:	4605      	mov	r5, r0
 800d71e:	6818      	ldr	r0, [r3, #0]
 800d720:	460c      	mov	r4, r1
 800d722:	b118      	cbz	r0, 800d72c <__swsetup_r+0x14>
 800d724:	6a03      	ldr	r3, [r0, #32]
 800d726:	b90b      	cbnz	r3, 800d72c <__swsetup_r+0x14>
 800d728:	f7fd ff70 	bl	800b60c <__sinit>
 800d72c:	89a3      	ldrh	r3, [r4, #12]
 800d72e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d732:	0718      	lsls	r0, r3, #28
 800d734:	d422      	bmi.n	800d77c <__swsetup_r+0x64>
 800d736:	06d9      	lsls	r1, r3, #27
 800d738:	d407      	bmi.n	800d74a <__swsetup_r+0x32>
 800d73a:	2309      	movs	r3, #9
 800d73c:	602b      	str	r3, [r5, #0]
 800d73e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d742:	81a3      	strh	r3, [r4, #12]
 800d744:	f04f 30ff 	mov.w	r0, #4294967295
 800d748:	e034      	b.n	800d7b4 <__swsetup_r+0x9c>
 800d74a:	0758      	lsls	r0, r3, #29
 800d74c:	d512      	bpl.n	800d774 <__swsetup_r+0x5c>
 800d74e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d750:	b141      	cbz	r1, 800d764 <__swsetup_r+0x4c>
 800d752:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d756:	4299      	cmp	r1, r3
 800d758:	d002      	beq.n	800d760 <__swsetup_r+0x48>
 800d75a:	4628      	mov	r0, r5
 800d75c:	f7fe fefe 	bl	800c55c <_free_r>
 800d760:	2300      	movs	r3, #0
 800d762:	6363      	str	r3, [r4, #52]	; 0x34
 800d764:	89a3      	ldrh	r3, [r4, #12]
 800d766:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d76a:	81a3      	strh	r3, [r4, #12]
 800d76c:	2300      	movs	r3, #0
 800d76e:	6063      	str	r3, [r4, #4]
 800d770:	6923      	ldr	r3, [r4, #16]
 800d772:	6023      	str	r3, [r4, #0]
 800d774:	89a3      	ldrh	r3, [r4, #12]
 800d776:	f043 0308 	orr.w	r3, r3, #8
 800d77a:	81a3      	strh	r3, [r4, #12]
 800d77c:	6923      	ldr	r3, [r4, #16]
 800d77e:	b94b      	cbnz	r3, 800d794 <__swsetup_r+0x7c>
 800d780:	89a3      	ldrh	r3, [r4, #12]
 800d782:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d78a:	d003      	beq.n	800d794 <__swsetup_r+0x7c>
 800d78c:	4621      	mov	r1, r4
 800d78e:	4628      	mov	r0, r5
 800d790:	f000 f884 	bl	800d89c <__smakebuf_r>
 800d794:	89a0      	ldrh	r0, [r4, #12]
 800d796:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d79a:	f010 0301 	ands.w	r3, r0, #1
 800d79e:	d00a      	beq.n	800d7b6 <__swsetup_r+0x9e>
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	60a3      	str	r3, [r4, #8]
 800d7a4:	6963      	ldr	r3, [r4, #20]
 800d7a6:	425b      	negs	r3, r3
 800d7a8:	61a3      	str	r3, [r4, #24]
 800d7aa:	6923      	ldr	r3, [r4, #16]
 800d7ac:	b943      	cbnz	r3, 800d7c0 <__swsetup_r+0xa8>
 800d7ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d7b2:	d1c4      	bne.n	800d73e <__swsetup_r+0x26>
 800d7b4:	bd38      	pop	{r3, r4, r5, pc}
 800d7b6:	0781      	lsls	r1, r0, #30
 800d7b8:	bf58      	it	pl
 800d7ba:	6963      	ldrpl	r3, [r4, #20]
 800d7bc:	60a3      	str	r3, [r4, #8]
 800d7be:	e7f4      	b.n	800d7aa <__swsetup_r+0x92>
 800d7c0:	2000      	movs	r0, #0
 800d7c2:	e7f7      	b.n	800d7b4 <__swsetup_r+0x9c>
 800d7c4:	20000178 	.word	0x20000178

0800d7c8 <_raise_r>:
 800d7c8:	291f      	cmp	r1, #31
 800d7ca:	b538      	push	{r3, r4, r5, lr}
 800d7cc:	4604      	mov	r4, r0
 800d7ce:	460d      	mov	r5, r1
 800d7d0:	d904      	bls.n	800d7dc <_raise_r+0x14>
 800d7d2:	2316      	movs	r3, #22
 800d7d4:	6003      	str	r3, [r0, #0]
 800d7d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7da:	bd38      	pop	{r3, r4, r5, pc}
 800d7dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d7de:	b112      	cbz	r2, 800d7e6 <_raise_r+0x1e>
 800d7e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7e4:	b94b      	cbnz	r3, 800d7fa <_raise_r+0x32>
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	f000 f830 	bl	800d84c <_getpid_r>
 800d7ec:	462a      	mov	r2, r5
 800d7ee:	4601      	mov	r1, r0
 800d7f0:	4620      	mov	r0, r4
 800d7f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7f6:	f000 b817 	b.w	800d828 <_kill_r>
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d00a      	beq.n	800d814 <_raise_r+0x4c>
 800d7fe:	1c59      	adds	r1, r3, #1
 800d800:	d103      	bne.n	800d80a <_raise_r+0x42>
 800d802:	2316      	movs	r3, #22
 800d804:	6003      	str	r3, [r0, #0]
 800d806:	2001      	movs	r0, #1
 800d808:	e7e7      	b.n	800d7da <_raise_r+0x12>
 800d80a:	2400      	movs	r4, #0
 800d80c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d810:	4628      	mov	r0, r5
 800d812:	4798      	blx	r3
 800d814:	2000      	movs	r0, #0
 800d816:	e7e0      	b.n	800d7da <_raise_r+0x12>

0800d818 <raise>:
 800d818:	4b02      	ldr	r3, [pc, #8]	; (800d824 <raise+0xc>)
 800d81a:	4601      	mov	r1, r0
 800d81c:	6818      	ldr	r0, [r3, #0]
 800d81e:	f7ff bfd3 	b.w	800d7c8 <_raise_r>
 800d822:	bf00      	nop
 800d824:	20000178 	.word	0x20000178

0800d828 <_kill_r>:
 800d828:	b538      	push	{r3, r4, r5, lr}
 800d82a:	4d07      	ldr	r5, [pc, #28]	; (800d848 <_kill_r+0x20>)
 800d82c:	2300      	movs	r3, #0
 800d82e:	4604      	mov	r4, r0
 800d830:	4608      	mov	r0, r1
 800d832:	4611      	mov	r1, r2
 800d834:	602b      	str	r3, [r5, #0]
 800d836:	f7f4 fadf 	bl	8001df8 <_kill>
 800d83a:	1c43      	adds	r3, r0, #1
 800d83c:	d102      	bne.n	800d844 <_kill_r+0x1c>
 800d83e:	682b      	ldr	r3, [r5, #0]
 800d840:	b103      	cbz	r3, 800d844 <_kill_r+0x1c>
 800d842:	6023      	str	r3, [r4, #0]
 800d844:	bd38      	pop	{r3, r4, r5, pc}
 800d846:	bf00      	nop
 800d848:	200022b0 	.word	0x200022b0

0800d84c <_getpid_r>:
 800d84c:	f7f4 bacc 	b.w	8001de8 <_getpid>

0800d850 <__swhatbuf_r>:
 800d850:	b570      	push	{r4, r5, r6, lr}
 800d852:	460c      	mov	r4, r1
 800d854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d858:	2900      	cmp	r1, #0
 800d85a:	b096      	sub	sp, #88	; 0x58
 800d85c:	4615      	mov	r5, r2
 800d85e:	461e      	mov	r6, r3
 800d860:	da0d      	bge.n	800d87e <__swhatbuf_r+0x2e>
 800d862:	89a3      	ldrh	r3, [r4, #12]
 800d864:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d868:	f04f 0100 	mov.w	r1, #0
 800d86c:	bf0c      	ite	eq
 800d86e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d872:	2340      	movne	r3, #64	; 0x40
 800d874:	2000      	movs	r0, #0
 800d876:	6031      	str	r1, [r6, #0]
 800d878:	602b      	str	r3, [r5, #0]
 800d87a:	b016      	add	sp, #88	; 0x58
 800d87c:	bd70      	pop	{r4, r5, r6, pc}
 800d87e:	466a      	mov	r2, sp
 800d880:	f000 f848 	bl	800d914 <_fstat_r>
 800d884:	2800      	cmp	r0, #0
 800d886:	dbec      	blt.n	800d862 <__swhatbuf_r+0x12>
 800d888:	9901      	ldr	r1, [sp, #4]
 800d88a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d88e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d892:	4259      	negs	r1, r3
 800d894:	4159      	adcs	r1, r3
 800d896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d89a:	e7eb      	b.n	800d874 <__swhatbuf_r+0x24>

0800d89c <__smakebuf_r>:
 800d89c:	898b      	ldrh	r3, [r1, #12]
 800d89e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8a0:	079d      	lsls	r5, r3, #30
 800d8a2:	4606      	mov	r6, r0
 800d8a4:	460c      	mov	r4, r1
 800d8a6:	d507      	bpl.n	800d8b8 <__smakebuf_r+0x1c>
 800d8a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	6123      	str	r3, [r4, #16]
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	6163      	str	r3, [r4, #20]
 800d8b4:	b002      	add	sp, #8
 800d8b6:	bd70      	pop	{r4, r5, r6, pc}
 800d8b8:	ab01      	add	r3, sp, #4
 800d8ba:	466a      	mov	r2, sp
 800d8bc:	f7ff ffc8 	bl	800d850 <__swhatbuf_r>
 800d8c0:	9900      	ldr	r1, [sp, #0]
 800d8c2:	4605      	mov	r5, r0
 800d8c4:	4630      	mov	r0, r6
 800d8c6:	f7fe febd 	bl	800c644 <_malloc_r>
 800d8ca:	b948      	cbnz	r0, 800d8e0 <__smakebuf_r+0x44>
 800d8cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8d0:	059a      	lsls	r2, r3, #22
 800d8d2:	d4ef      	bmi.n	800d8b4 <__smakebuf_r+0x18>
 800d8d4:	f023 0303 	bic.w	r3, r3, #3
 800d8d8:	f043 0302 	orr.w	r3, r3, #2
 800d8dc:	81a3      	strh	r3, [r4, #12]
 800d8de:	e7e3      	b.n	800d8a8 <__smakebuf_r+0xc>
 800d8e0:	89a3      	ldrh	r3, [r4, #12]
 800d8e2:	6020      	str	r0, [r4, #0]
 800d8e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8e8:	81a3      	strh	r3, [r4, #12]
 800d8ea:	9b00      	ldr	r3, [sp, #0]
 800d8ec:	6163      	str	r3, [r4, #20]
 800d8ee:	9b01      	ldr	r3, [sp, #4]
 800d8f0:	6120      	str	r0, [r4, #16]
 800d8f2:	b15b      	cbz	r3, 800d90c <__smakebuf_r+0x70>
 800d8f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8f8:	4630      	mov	r0, r6
 800d8fa:	f000 f81d 	bl	800d938 <_isatty_r>
 800d8fe:	b128      	cbz	r0, 800d90c <__smakebuf_r+0x70>
 800d900:	89a3      	ldrh	r3, [r4, #12]
 800d902:	f023 0303 	bic.w	r3, r3, #3
 800d906:	f043 0301 	orr.w	r3, r3, #1
 800d90a:	81a3      	strh	r3, [r4, #12]
 800d90c:	89a3      	ldrh	r3, [r4, #12]
 800d90e:	431d      	orrs	r5, r3
 800d910:	81a5      	strh	r5, [r4, #12]
 800d912:	e7cf      	b.n	800d8b4 <__smakebuf_r+0x18>

0800d914 <_fstat_r>:
 800d914:	b538      	push	{r3, r4, r5, lr}
 800d916:	4d07      	ldr	r5, [pc, #28]	; (800d934 <_fstat_r+0x20>)
 800d918:	2300      	movs	r3, #0
 800d91a:	4604      	mov	r4, r0
 800d91c:	4608      	mov	r0, r1
 800d91e:	4611      	mov	r1, r2
 800d920:	602b      	str	r3, [r5, #0]
 800d922:	f7f4 fac8 	bl	8001eb6 <_fstat>
 800d926:	1c43      	adds	r3, r0, #1
 800d928:	d102      	bne.n	800d930 <_fstat_r+0x1c>
 800d92a:	682b      	ldr	r3, [r5, #0]
 800d92c:	b103      	cbz	r3, 800d930 <_fstat_r+0x1c>
 800d92e:	6023      	str	r3, [r4, #0]
 800d930:	bd38      	pop	{r3, r4, r5, pc}
 800d932:	bf00      	nop
 800d934:	200022b0 	.word	0x200022b0

0800d938 <_isatty_r>:
 800d938:	b538      	push	{r3, r4, r5, lr}
 800d93a:	4d06      	ldr	r5, [pc, #24]	; (800d954 <_isatty_r+0x1c>)
 800d93c:	2300      	movs	r3, #0
 800d93e:	4604      	mov	r4, r0
 800d940:	4608      	mov	r0, r1
 800d942:	602b      	str	r3, [r5, #0]
 800d944:	f7f4 fac7 	bl	8001ed6 <_isatty>
 800d948:	1c43      	adds	r3, r0, #1
 800d94a:	d102      	bne.n	800d952 <_isatty_r+0x1a>
 800d94c:	682b      	ldr	r3, [r5, #0]
 800d94e:	b103      	cbz	r3, 800d952 <_isatty_r+0x1a>
 800d950:	6023      	str	r3, [r4, #0]
 800d952:	bd38      	pop	{r3, r4, r5, pc}
 800d954:	200022b0 	.word	0x200022b0

0800d958 <_init>:
 800d958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d95a:	bf00      	nop
 800d95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d95e:	bc08      	pop	{r3}
 800d960:	469e      	mov	lr, r3
 800d962:	4770      	bx	lr

0800d964 <_fini>:
 800d964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d966:	bf00      	nop
 800d968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d96a:	bc08      	pop	{r3}
 800d96c:	469e      	mov	lr, r3
 800d96e:	4770      	bx	lr
