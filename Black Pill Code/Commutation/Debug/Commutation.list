
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0800a0f0  0800a0f0  0001a0f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a47c  0800a47c  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  0800a47c  0800a47c  0001a47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a484  0800a484  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a484  0800a484  0001a484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a488  0800a488  0001a488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800a48c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010510  20000264  0800a6f0  00020264  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010774  0800a6f0  00020774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e9d  00000000  00000000  000202d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c79  00000000  00000000  00031174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001048  00000000  00000000  00033df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca5  00000000  00000000  00034e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001998e  00000000  00000000  00035add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015193  00000000  00000000  0004f46b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bde5  00000000  00000000  000645fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053c4  00000000  00000000  001003e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  001057a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000264 	.word	0x20000264
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a0d8 	.word	0x0800a0d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000268 	.word	0x20000268
 80001dc:	0800a0d8 	.word	0x0800a0d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <PrepareCommutation>:
uint8_t StopSequence(void);
uint8_t ChangePWM (void);

/* Private function ----------------------------------------------------------*/

uint8_t PrepareCommutation (char Direction) {
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]

	// Read IDR for Hall Sensor status
	uint16_t Hall = (GPIOA->IDR & 0b111) - 1 + 6 * Direction;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <PrepareCommutation+0x7c>)
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	4619      	mov	r1, r3
 8000fb0:	0049      	lsls	r1, r1, #1
 8000fb2:	440b      	add	r3, r1
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4413      	add	r3, r2
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	81fb      	strh	r3, [r7, #14]

	// Set Registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8000fc0:	89fa      	ldrh	r2, [r7, #14]
 8000fc2:	4914      	ldr	r1, [pc, #80]	; (8001014 <PrepareCommutation+0x80>)
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	440b      	add	r3, r1
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <PrepareCommutation+0x84>)
 8000fd2:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 8000fd4:	89fa      	ldrh	r2, [r7, #14]
 8000fd6:	490f      	ldr	r1, [pc, #60]	; (8001014 <PrepareCommutation+0x80>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	881a      	ldrh	r2, [r3, #0]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <PrepareCommutation+0x84>)
 8000fe8:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 8000fea:	89fa      	ldrh	r2, [r7, #14]
 8000fec:	4909      	ldr	r1, [pc, #36]	; (8001014 <PrepareCommutation+0x80>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	881a      	ldrh	r2, [r3, #0]
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <PrepareCommutation+0x84>)
 8000ffe:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 8001000:	2300      	movs	r3, #0

}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40020000 	.word	0x40020000
 8001014:	20000000 	.word	0x20000000
 8001018:	40010000 	.word	0x40010000
 800101c:	00000000 	.word	0x00000000

08001020 <StartupSequence>:

uint8_t StartupSequence (char Direction) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]

	// Initialize some variables
	Fapb1tclk = HAL_RCC_GetPCLK1Freq() * 2;
 800102a:	f004 fda3 	bl	8005b74 <HAL_RCC_GetPCLK1Freq>
 800102e:	4603      	mov	r3, r0
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4a61      	ldr	r2, [pc, #388]	; (80011b8 <StartupSequence+0x198>)
 8001034:	6013      	str	r3, [r2, #0]
	Fapb2tclk = HAL_RCC_GetPCLK2Freq() * 2;
 8001036:	f004 fdb1 	bl	8005b9c <HAL_RCC_GetPCLK2Freq>
 800103a:	4603      	mov	r3, r0
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4a5f      	ldr	r2, [pc, #380]	; (80011bc <StartupSequence+0x19c>)
 8001040:	6013      	str	r3, [r2, #0]
	RPMConst = (Fapb2tclk / (TIM9->PSC + 1)) * 1.35;
 8001042:	4b5e      	ldr	r3, [pc, #376]	; (80011bc <StartupSequence+0x19c>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b5e      	ldr	r3, [pc, #376]	; (80011c0 <StartupSequence+0x1a0>)
 8001048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104a:	3301      	adds	r3, #1
 800104c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa5f 	bl	8000514 <__aeabi_ui2d>
 8001056:	a356      	add	r3, pc, #344	; (adr r3, 80011b0 <StartupSequence+0x190>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff fad4 	bl	8000608 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fda6 	bl	8000bb8 <__aeabi_d2uiz>
 800106c:	4603      	mov	r3, r0
 800106e:	4a55      	ldr	r2, [pc, #340]	; (80011c4 <StartupSequence+0x1a4>)
 8001070:	6013      	str	r3, [r2, #0]

	ChangePWM();
 8001072:	f000 f913 	bl	800129c <ChangePWM>

	// Set first commutation state according to Hall sensors
	if (PrepareCommutation (Direction + 6 * 2)) {
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	330c      	adds	r3, #12
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff89 	bl	8000f94 <PrepareCommutation>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <StartupSequence+0x6c>
		return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e08a      	b.n	80011a2 <StartupSequence+0x182>
	}

	// Start HallSensor timer
	HAL_TIMEx_HallSensor_Start (&htim2);
 800108c:	484e      	ldr	r0, [pc, #312]	; (80011c8 <StartupSequence+0x1a8>)
 800108e:	f006 f9d9 	bl	8007444 <HAL_TIMEx_HallSensor_Start>

	// Start all PWM signals on TIM1
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 8001092:	2100      	movs	r1, #0
 8001094:	484d      	ldr	r0, [pc, #308]	; (80011cc <StartupSequence+0x1ac>)
 8001096:	f004 fec5 	bl	8005e24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 800109a:	2104      	movs	r1, #4
 800109c:	484b      	ldr	r0, [pc, #300]	; (80011cc <StartupSequence+0x1ac>)
 800109e:	f004 fec1 	bl	8005e24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 80010a2:	2108      	movs	r1, #8
 80010a4:	4849      	ldr	r0, [pc, #292]	; (80011cc <StartupSequence+0x1ac>)
 80010a6:	f004 febd 	bl	8005e24 <HAL_TIM_PWM_Start>

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 80010aa:	4b49      	ldr	r3, [pc, #292]	; (80011d0 <StartupSequence+0x1b0>)
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	4a48      	ldr	r2, [pc, #288]	; (80011d0 <StartupSequence+0x1b0>)
 80010b0:	f023 0320 	bic.w	r3, r3, #32
 80010b4:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 80010b6:	4b46      	ldr	r3, [pc, #280]	; (80011d0 <StartupSequence+0x1b0>)
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	4a45      	ldr	r2, [pc, #276]	; (80011d0 <StartupSequence+0x1b0>)
 80010bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010c0:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 80010c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010d0:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 80010d2:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <StartupSequence+0x1a0>)
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	4a3a      	ldr	r2, [pc, #232]	; (80011c0 <StartupSequence+0x1a0>)
 80010d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010dc:	60d3      	str	r3, [r2, #12]

	// Start Interrupts
	HAL_TIM_Base_Start_IT (&htim1);
 80010de:	483b      	ldr	r0, [pc, #236]	; (80011cc <StartupSequence+0x1ac>)
 80010e0:	f004 fdc0 	bl	8005c64 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim2);
 80010e4:	4838      	ldr	r0, [pc, #224]	; (80011c8 <StartupSequence+0x1a8>)
 80010e6:	f004 fdbd 	bl	8005c64 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim9);
 80010ea:	483a      	ldr	r0, [pc, #232]	; (80011d4 <StartupSequence+0x1b4>)
 80010ec:	f004 fdba 	bl	8005c64 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT (&htim9, TIM_CHANNEL_2);
 80010f0:	2104      	movs	r1, #4
 80010f2:	4838      	ldr	r0, [pc, #224]	; (80011d4 <StartupSequence+0x1b4>)
 80010f4:	f004 fffa 	bl	80060ec <HAL_TIM_IC_Start_IT>
	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	// HAL_ADC_Start_IT(&hadc1);
	// HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);

	// Clear all interrupt triggers
	TIM1->SR &= ~TIM_SR_COMIF;		// Clear Commutation interrupt flag
 80010f8:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <StartupSequence+0x1b0>)
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	4a34      	ldr	r2, [pc, #208]	; (80011d0 <StartupSequence+0x1b0>)
 80010fe:	f023 0320 	bic.w	r3, r3, #32
 8001102:	6113      	str	r3, [r2, #16]
	TIM1->SR &= ~TIM_SR_BIF;		// Clear Break interrupt flag
 8001104:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <StartupSequence+0x1b0>)
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	4a31      	ldr	r2, [pc, #196]	; (80011d0 <StartupSequence+0x1b0>)
 800110a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800110e:	6113      	str	r3, [r2, #16]
	TIM2->SR &= ~TIM_SR_TIF;		// Clear timer 2 interrupt flag
 8001110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800111e:	6113      	str	r3, [r2, #16]
	TIM9->SR &= ~TIM_SR_TIF;		// Clear timer 9 interrupt flag
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <StartupSequence+0x1a0>)
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	4a26      	ldr	r2, [pc, #152]	; (80011c0 <StartupSequence+0x1a0>)
 8001126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800112a:	6113      	str	r3, [r2, #16]

	// Enable interrupts
	TIM1->DIER |= TIM_DIER_COMIE;	// Enable Commutation events in DIER register
 800112c:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <StartupSequence+0x1b0>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <StartupSequence+0x1b0>)
 8001132:	f043 0320 	orr.w	r3, r3, #32
 8001136:	60d3      	str	r3, [r2, #12]
	TIM2->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 2
 8001138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001146:	60d3      	str	r3, [r2, #12]
	TIM9->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 9
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <StartupSequence+0x1a0>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	4a1c      	ldr	r2, [pc, #112]	; (80011c0 <StartupSequence+0x1a0>)
 800114e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001152:	60d3      	str	r3, [r2, #12]

	// Write some registers
	ADC1->CR1  |= ADC_CR1_EOCIE;	// Enable ADC interrupts
 8001154:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <StartupSequence+0x1b8>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4a1f      	ldr	r2, [pc, #124]	; (80011d8 <StartupSequence+0x1b8>)
 800115a:	f043 0320 	orr.w	r3, r3, #32
 800115e:	6053      	str	r3, [r2, #4]
	TIM1->CR2  |= TIM_CR2_CCPC; 	// Set CCPC in CR2 to preload CCxE, CCxNE and OCxM bits
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <StartupSequence+0x1b0>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	4a1a      	ldr	r2, [pc, #104]	; (80011d0 <StartupSequence+0x1b0>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	6053      	str	r3, [r2, #4]
	TIM1->BDTR &= ~TIM_BDTR_DTG;	// Reset DTG bits
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <StartupSequence+0x1b0>)
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <StartupSequence+0x1b0>)
 8001172:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001176:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR |= 0x800F;			// Set dead-time to 100ns and make sure to enable MOE bit
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <StartupSequence+0x1b0>)
 800117a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117c:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <StartupSequence+0x1b0>)
 800117e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001182:	f043 030f 	orr.w	r3, r3, #15
 8001186:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->EGR  |= TIM_EGR_COMG; 	// Set COMG bit in EGR for first commutation
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <StartupSequence+0x1b0>)
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <StartupSequence+0x1b0>)
 800118e:	f043 0320 	orr.w	r3, r3, #32
 8001192:	6153      	str	r3, [r2, #20]
	TIM1->DIER |= TIM_DIER_COMIE; 	// Enable commutation events in DIER register
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <StartupSequence+0x1b0>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <StartupSequence+0x1b0>)
 800119a:	f043 0320 	orr.w	r3, r3, #32
 800119e:	60d3      	str	r3, [r2, #12]

	return HAL_OK;
 80011a0:	2300      	movs	r3, #0

}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	f3af 8000 	nop.w
 80011b0:	9999999a 	.word	0x9999999a
 80011b4:	3ff59999 	.word	0x3ff59999
 80011b8:	20000280 	.word	0x20000280
 80011bc:	20000284 	.word	0x20000284
 80011c0:	40014000 	.word	0x40014000
 80011c4:	20000288 	.word	0x20000288
 80011c8:	20010504 	.word	0x20010504
 80011cc:	200104bc 	.word	0x200104bc
 80011d0:	40010000 	.word	0x40010000
 80011d4:	200105dc 	.word	0x200105dc
 80011d8:	40012000 	.word	0x40012000

080011dc <StopSequence>:

uint8_t StopSequence(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0

	// Stop HallSensor timer
	HAL_TIMEx_HallSensor_Stop (&htim2);
 80011e0:	4828      	ldr	r0, [pc, #160]	; (8001284 <StopSequence+0xa8>)
 80011e2:	f006 f9af 	bl	8007544 <HAL_TIMEx_HallSensor_Stop>

	// Disable all output channels
	TIM1->CCER  = 0x0000;
 80011e6:	4b28      	ldr	r3, [pc, #160]	; (8001288 <StopSequence+0xac>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = 0x0000;
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <StopSequence+0xac>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = 0x0000;
 80011f2:	4b25      	ldr	r3, [pc, #148]	; (8001288 <StopSequence+0xac>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]

	// Perform one last commutation event if not already disabled
	if ( (TIM1->DIER & TIM_DIER_COMIE) >= 1 ) { 		// If COMIE bit in DIER is set commutation events are still enabled
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <StopSequence+0xac>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	f003 0320 	and.w	r3, r3, #32
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <StopSequence+0x34>

		TIM1->EGR |= TIM_EGR_COMG; 						// Trigger commutation event
 8001204:	4b20      	ldr	r3, [pc, #128]	; (8001288 <StopSequence+0xac>)
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	4a1f      	ldr	r2, [pc, #124]	; (8001288 <StopSequence+0xac>)
 800120a:	f043 0320 	orr.w	r3, r3, #32
 800120e:	6153      	str	r3, [r2, #20]
		// while ( (TIM1->SR & TIM_SR_COMIF) >= 1 ); 	// Wait until commutation event has happened

	}

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <StopSequence+0xac>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <StopSequence+0xac>)
 8001216:	f023 0320 	bic.w	r3, r3, #32
 800121a:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <StopSequence+0xac>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	4a19      	ldr	r2, [pc, #100]	; (8001288 <StopSequence+0xac>)
 8001222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001226:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 8001228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001236:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <StopSequence+0xb0>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	4a13      	ldr	r2, [pc, #76]	; (800128c <StopSequence+0xb0>)
 800123e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001242:	60d3      	str	r3, [r2, #12]

	// Stop interrupts
	HAL_TIM_Base_Stop_IT (&htim1);
 8001244:	4812      	ldr	r0, [pc, #72]	; (8001290 <StopSequence+0xb4>)
 8001246:	f004 fd6f 	bl	8005d28 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim2);
 800124a:	480e      	ldr	r0, [pc, #56]	; (8001284 <StopSequence+0xa8>)
 800124c:	f004 fd6c 	bl	8005d28 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim9);
 8001250:	4810      	ldr	r0, [pc, #64]	; (8001294 <StopSequence+0xb8>)
 8001252:	f004 fd69 	bl	8005d28 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Stop_IT (&htim9, TIM_CHANNEL_2);
 8001256:	2104      	movs	r1, #4
 8001258:	480e      	ldr	r0, [pc, #56]	; (8001294 <StopSequence+0xb8>)
 800125a:	f005 f861 	bl	8006320 <HAL_TIM_IC_Stop_IT>

	// Stop PWM Timers
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_1);
 800125e:	2100      	movs	r1, #0
 8001260:	480b      	ldr	r0, [pc, #44]	; (8001290 <StopSequence+0xb4>)
 8001262:	f004 fe8f 	bl	8005f84 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_2);
 8001266:	2104      	movs	r1, #4
 8001268:	4809      	ldr	r0, [pc, #36]	; (8001290 <StopSequence+0xb4>)
 800126a:	f004 fe8b 	bl	8005f84 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_3);
 800126e:	2108      	movs	r1, #8
 8001270:	4807      	ldr	r0, [pc, #28]	; (8001290 <StopSequence+0xb4>)
 8001272:	f004 fe87 	bl	8005f84 <HAL_TIM_PWM_Stop>

	Registers[RPMReg] = 0;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <StopSequence+0xbc>)
 8001278:	2200      	movs	r2, #0
 800127a:	80da      	strh	r2, [r3, #6]

	return HAL_OK;
 800127c:	2300      	movs	r3, #0

}
 800127e:	4618      	mov	r0, r3
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20010504 	.word	0x20010504
 8001288:	40010000 	.word	0x40010000
 800128c:	40014000 	.word	0x40014000
 8001290:	200104bc 	.word	0x200104bc
 8001294:	200105dc 	.word	0x200105dc
 8001298:	200102ec 	.word	0x200102ec

0800129c <ChangePWM>:

uint8_t ChangePWM (void) {
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0

	uint32_t PWM = (Registers[PWMReg] * TIM1->ARR) / 100; // Calculate required CCRx value
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <ChangePWM+0x6c>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <ChangePWM+0x70>)
 80012aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	4a17      	ldr	r2, [pc, #92]	; (8001310 <ChangePWM+0x74>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	607b      	str	r3, [r7, #4]

	if (PWM >= TIM1->ARR - 60) {
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <ChangePWM+0x70>)
 80012bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012be:	3b3c      	subs	r3, #60	; 0x3c
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d303      	bcc.n	80012ce <ChangePWM+0x32>
		PWM = TIM1->ARR - 60;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <ChangePWM+0x70>)
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	3b3c      	subs	r3, #60	; 0x3c
 80012cc:	607b      	str	r3, [r7, #4]
	}

	TIM1->CR1 |= TIM_CR1_UDIS; 	// Disable Update Events
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <ChangePWM+0x70>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <ChangePWM+0x70>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6013      	str	r3, [r2, #0]
	TIM1->CCR1 = PWM;	  		// Set new PWM for channel 1
 80012da:	4a0c      	ldr	r2, [pc, #48]	; (800130c <ChangePWM+0x70>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = PWM;	  		// Set new PWM for channel 2
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <ChangePWM+0x70>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = PWM;	  		// Set new PWM for channel 3
 80012e6:	4a09      	ldr	r2, [pc, #36]	; (800130c <ChangePWM+0x70>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_UDIS; // Enable Update Events
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <ChangePWM+0x70>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <ChangePWM+0x70>)
 80012f2:	f023 0302 	bic.w	r3, r3, #2
 80012f6:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 80012f8:	2300      	movs	r3, #0

}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200102ec 	.word	0x200102ec
 800130c:	40010000 	.word	0x40010000
 8001310:	51eb851f 	.word	0x51eb851f

08001314 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800131a:	463b      	mov	r3, r7
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001326:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <MX_ADC1_Init+0x9c>)
 8001328:	4a22      	ldr	r2, [pc, #136]	; (80013b4 <MX_ADC1_Init+0xa0>)
 800132a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800132c:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <MX_ADC1_Init+0x9c>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MX_ADC1_Init+0x9c>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_ADC1_Init+0x9c>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <MX_ADC1_Init+0x9c>)
 8001340:	2200      	movs	r2, #0
 8001342:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001344:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <MX_ADC1_Init+0x9c>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_ADC1_Init+0x9c>)
 800134e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_ADC1_Init+0x9c>)
 8001356:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_ADC1_Init+0x9c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <MX_ADC1_Init+0x9c>)
 8001364:	2201      	movs	r2, #1
 8001366:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_ADC1_Init+0x9c>)
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_ADC1_Init+0x9c>)
 8001372:	2201      	movs	r2, #1
 8001374:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001376:	480e      	ldr	r0, [pc, #56]	; (80013b0 <MX_ADC1_Init+0x9c>)
 8001378:	f001 fa32 	bl	80027e0 <HAL_ADC_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001382:	f000 fc2b 	bl	8001bdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001386:	2309      	movs	r3, #9
 8001388:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800138a:	2301      	movs	r3, #1
 800138c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800138e:	2301      	movs	r3, #1
 8001390:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	4619      	mov	r1, r3
 8001396:	4806      	ldr	r0, [pc, #24]	; (80013b0 <MX_ADC1_Init+0x9c>)
 8001398:	f001 fb96 	bl	8002ac8 <HAL_ADC_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80013a2:	f000 fc1b 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20010298 	.word	0x20010298
 80013b4:	40012000 	.word	0x40012000

080013b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <HAL_ADC_MspInit+0x8c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d12f      	bne.n	800143a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <HAL_ADC_MspInit+0x90>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a19      	ldr	r2, [pc, #100]	; (8001448 <HAL_ADC_MspInit+0x90>)
 80013e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <HAL_ADC_MspInit+0x90>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_ADC_MspInit+0x90>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <HAL_ADC_MspInit+0x90>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_ADC_MspInit+0x90>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001412:	2302      	movs	r3, #2
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001416:	2303      	movs	r3, #3
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	4809      	ldr	r0, [pc, #36]	; (800144c <HAL_ADC_MspInit+0x94>)
 8001426:	f001 fec9 	bl	80031bc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2012      	movs	r0, #18
 8001430:	f001 fe5d 	bl	80030ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001434:	2012      	movs	r0, #18
 8001436:	f001 fe76 	bl	8003126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	; 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40012000 	.word	0x40012000
 8001448:	40023800 	.word	0x40023800
 800144c:	40020400 	.word	0x40020400

08001450 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

	TotalCurrent -= Current[Ci];
 8001458:	4b39      	ldr	r3, [pc, #228]	; (8001540 <HAL_ADC_ConvCpltCallback+0xf0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a39      	ldr	r2, [pc, #228]	; (8001544 <HAL_ADC_ConvCpltCallback+0xf4>)
 800145e:	8812      	ldrh	r2, [r2, #0]
 8001460:	4611      	mov	r1, r2
 8001462:	4a39      	ldr	r2, [pc, #228]	; (8001548 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001464:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	4a35      	ldr	r2, [pc, #212]	; (8001540 <HAL_ADC_ConvCpltCallback+0xf0>)
 800146c:	6013      	str	r3, [r2, #0]
	Current[Ci] = HAL_ADC_GetValue(&hadc1);
 800146e:	4837      	ldr	r0, [pc, #220]	; (800154c <HAL_ADC_ConvCpltCallback+0xfc>)
 8001470:	f001 fb09 	bl	8002a86 <HAL_ADC_GetValue>
 8001474:	4601      	mov	r1, r0
 8001476:	4b33      	ldr	r3, [pc, #204]	; (8001544 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	b289      	uxth	r1, r1
 800147e:	4b32      	ldr	r3, [pc, #200]	; (8001548 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001480:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	TotalCurrent += Current[Ci];
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b2f      	ldr	r3, [pc, #188]	; (8001548 <HAL_ADC_ConvCpltCallback+0xf8>)
 800148c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001490:	461a      	mov	r2, r3
 8001492:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4413      	add	r3, r2
 8001498:	4a29      	ldr	r2, [pc, #164]	; (8001540 <HAL_ADC_ConvCpltCallback+0xf0>)
 800149a:	6013      	str	r3, [r2, #0]

	Ci++;
 800149c:	4b29      	ldr	r3, [pc, #164]	; (8001544 <HAL_ADC_ConvCpltCallback+0xf4>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	4b27      	ldr	r3, [pc, #156]	; (8001544 <HAL_ADC_ConvCpltCallback+0xf4>)
 80014a6:	801a      	strh	r2, [r3, #0]

	if ( Ci >= AvgSizeCur - 1 ) {
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_ADC_ConvCpltCallback+0xf4>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d902      	bls.n	80014ba <HAL_ADC_ConvCpltCallback+0x6a>
		Ci = 0;
 80014b4:	4b23      	ldr	r3, [pc, #140]	; (8001544 <HAL_ADC_ConvCpltCallback+0xf4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	801a      	strh	r2, [r3, #0]
	}

	float current = (3.3 * (TotalCurrent / AvgSizeCur)) / 40960 / 0.015;
 80014ba:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	0bdb      	lsrs	r3, r3, #15
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f827 	bl	8000514 <__aeabi_ui2d>
 80014c6:	a31a      	add	r3, pc, #104	; (adr r3, 8001530 <HAL_ADC_ConvCpltCallback+0xe0>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7ff f89c 	bl	8000608 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <HAL_ADC_ConvCpltCallback+0x100>)
 80014de:	f7ff f9bd 	bl	800085c <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	a313      	add	r3, pc, #76	; (adr r3, 8001538 <HAL_ADC_ConvCpltCallback+0xe8>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f9b4 	bl	800085c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fb7c 	bl	8000bf8 <__aeabi_d2f>
 8001500:	4603      	mov	r3, r0
 8001502:	60fb      	str	r3, [r7, #12]
	Registers[CurReg] = current * 1000;
 8001504:	edd7 7a03 	vldr	s15, [r7, #12]
 8001508:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001554 <HAL_ADC_ConvCpltCallback+0x104>
 800150c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001514:	ee17 3a90 	vmov	r3, s15
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <HAL_ADC_ConvCpltCallback+0x108>)
 800151c:	809a      	strh	r2, [r3, #4]

	Counter++;
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_ADC_ConvCpltCallback+0x10c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <HAL_ADC_ConvCpltCallback+0x10c>)
 8001526:	6013      	str	r3, [r2, #0]

}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	66666666 	.word	0x66666666
 8001534:	400a6666 	.word	0x400a6666
 8001538:	eb851eb8 	.word	0xeb851eb8
 800153c:	3f8eb851 	.word	0x3f8eb851
 8001540:	2000028c 	.word	0x2000028c
 8001544:	20000294 	.word	0x20000294
 8001548:	20000298 	.word	0x20000298
 800154c:	20010298 	.word	0x20010298
 8001550:	40e40000 	.word	0x40e40000
 8001554:	447a0000 	.word	0x447a0000
 8001558:	200102ec 	.word	0x200102ec
 800155c:	20000290 	.word	0x20000290

08001560 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b45      	ldr	r3, [pc, #276]	; (8001690 <MX_GPIO_Init+0x130>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a44      	ldr	r2, [pc, #272]	; (8001690 <MX_GPIO_Init+0x130>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b42      	ldr	r3, [pc, #264]	; (8001690 <MX_GPIO_Init+0x130>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b3e      	ldr	r3, [pc, #248]	; (8001690 <MX_GPIO_Init+0x130>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a3d      	ldr	r2, [pc, #244]	; (8001690 <MX_GPIO_Init+0x130>)
 800159c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b3b      	ldr	r3, [pc, #236]	; (8001690 <MX_GPIO_Init+0x130>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	4b37      	ldr	r3, [pc, #220]	; (8001690 <MX_GPIO_Init+0x130>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a36      	ldr	r2, [pc, #216]	; (8001690 <MX_GPIO_Init+0x130>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <MX_GPIO_Init+0x130>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4b30      	ldr	r3, [pc, #192]	; (8001690 <MX_GPIO_Init+0x130>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a2f      	ldr	r2, [pc, #188]	; (8001690 <MX_GPIO_Init+0x130>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <MX_GPIO_Init+0x130>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ec:	4829      	ldr	r0, [pc, #164]	; (8001694 <MX_GPIO_Init+0x134>)
 80015ee:	f001 ff69 	bl	80034c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	4822      	ldr	r0, [pc, #136]	; (8001694 <MX_GPIO_Init+0x134>)
 800160c:	f001 fdd6 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001610:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001616:	2303      	movs	r3, #3
 8001618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	481b      	ldr	r0, [pc, #108]	; (8001694 <MX_GPIO_Init+0x134>)
 8001626:	f001 fdc9 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800162a:	f649 03f0 	movw	r3, #39152	; 0x98f0
 800162e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001630:	2303      	movs	r3, #3
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4816      	ldr	r0, [pc, #88]	; (8001698 <MX_GPIO_Init+0x138>)
 8001640:	f001 fdbc 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB12 PB5
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5
 8001644:	f241 2325 	movw	r3, #4645	; 0x1225
 8001648:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164a:	2303      	movs	r3, #3
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4810      	ldr	r0, [pc, #64]	; (800169c <MX_GPIO_Init+0x13c>)
 800165a:	f001 fdaf 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800165e:	2310      	movs	r3, #16
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001662:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001668:	2302      	movs	r3, #2
 800166a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	480a      	ldr	r0, [pc, #40]	; (800169c <MX_GPIO_Init+0x13c>)
 8001674:	f001 fda2 	bl	80031bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	200a      	movs	r0, #10
 800167e:	f001 fd36 	bl	80030ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001682:	200a      	movs	r0, #10
 8001684:	f001 fd4f 	bl	8003126 <HAL_NVIC_EnableIRQ>

}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	; 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	40020800 	.word	0x40020800
 8001698:	40020000 	.word	0x40020000
 800169c:	40020400 	.word	0x40020400

080016a0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <MX_I2C1_Init+0x50>)
 80016a6:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <MX_I2C1_Init+0x54>)
 80016a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_I2C1_Init+0x50>)
 80016ac:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <MX_I2C1_Init+0x58>)
 80016ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_I2C1_Init+0x50>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_I2C1_Init+0x50>)
 80016b8:	2220      	movs	r2, #32
 80016ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_I2C1_Init+0x50>)
 80016be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <MX_I2C1_Init+0x50>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_I2C1_Init+0x50>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <MX_I2C1_Init+0x50>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_I2C1_Init+0x50>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <MX_I2C1_Init+0x50>)
 80016de:	f001 ff2f 	bl	8003540 <HAL_I2C_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016e8:	f000 fa78 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20010300 	.word	0x20010300
 80016f4:	40005400 	.word	0x40005400
 80016f8:	000186a0 	.word	0x000186a0

080016fc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_I2C2_Init+0x50>)
 8001702:	4a13      	ldr	r2, [pc, #76]	; (8001750 <MX_I2C2_Init+0x54>)
 8001704:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_I2C2_Init+0x50>)
 8001708:	4a12      	ldr	r2, [pc, #72]	; (8001754 <MX_I2C2_Init+0x58>)
 800170a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_I2C2_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_I2C2_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_I2C2_Init+0x50>)
 800171a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800171e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <MX_I2C2_Init+0x50>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_I2C2_Init+0x50>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <MX_I2C2_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_I2C2_Init+0x50>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001738:	4804      	ldr	r0, [pc, #16]	; (800174c <MX_I2C2_Init+0x50>)
 800173a:	f001 ff01 	bl	8003540 <HAL_I2C_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001744:	f000 fa4a 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20010354 	.word	0x20010354
 8001750:	40005800 	.word	0x40005800
 8001754:	000186a0 	.word	0x000186a0

08001758 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	; 0x30
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a42      	ldr	r2, [pc, #264]	; (8001880 <HAL_I2C_MspInit+0x128>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d13c      	bne.n	80017f4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
 800177e:	4b41      	ldr	r3, [pc, #260]	; (8001884 <HAL_I2C_MspInit+0x12c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a40      	ldr	r2, [pc, #256]	; (8001884 <HAL_I2C_MspInit+0x12c>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b3e      	ldr	r3, [pc, #248]	; (8001884 <HAL_I2C_MspInit+0x12c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001796:	23c0      	movs	r3, #192	; 0xc0
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179a:	2312      	movs	r3, #18
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179e:	2301      	movs	r3, #1
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017a6:	2304      	movs	r3, #4
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	4835      	ldr	r0, [pc, #212]	; (8001888 <HAL_I2C_MspInit+0x130>)
 80017b2:	f001 fd03 	bl	80031bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	4b32      	ldr	r3, [pc, #200]	; (8001884 <HAL_I2C_MspInit+0x12c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a31      	ldr	r2, [pc, #196]	; (8001884 <HAL_I2C_MspInit+0x12c>)
 80017c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <HAL_I2C_MspInit+0x12c>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	201f      	movs	r0, #31
 80017d8:	f001 fc89 	bl	80030ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017dc:	201f      	movs	r0, #31
 80017de:	f001 fca2 	bl	8003126 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2020      	movs	r0, #32
 80017e8:	f001 fc81 	bl	80030ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80017ec:	2020      	movs	r0, #32
 80017ee:	f001 fc9a 	bl	8003126 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80017f2:	e041      	b.n	8001878 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a24      	ldr	r2, [pc, #144]	; (800188c <HAL_I2C_MspInit+0x134>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d13c      	bne.n	8001878 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <HAL_I2C_MspInit+0x12c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a1f      	ldr	r2, [pc, #124]	; (8001884 <HAL_I2C_MspInit+0x12c>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <HAL_I2C_MspInit+0x12c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800181a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001820:	2312      	movs	r3, #18
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001824:	2301      	movs	r3, #1
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800182c:	2304      	movs	r3, #4
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	4619      	mov	r1, r3
 8001836:	4814      	ldr	r0, [pc, #80]	; (8001888 <HAL_I2C_MspInit+0x130>)
 8001838:	f001 fcc0 	bl	80031bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800183c:	2308      	movs	r3, #8
 800183e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001840:	2312      	movs	r3, #18
 8001842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001844:	2301      	movs	r3, #1
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800184c:	2309      	movs	r3, #9
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	4619      	mov	r1, r3
 8001856:	480c      	ldr	r0, [pc, #48]	; (8001888 <HAL_I2C_MspInit+0x130>)
 8001858:	f001 fcb0 	bl	80031bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_I2C_MspInit+0x12c>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_I2C_MspInit+0x12c>)
 8001866:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800186a:	6413      	str	r3, [r2, #64]	; 0x40
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_I2C_MspInit+0x12c>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	bf00      	nop
 800187a:	3730      	adds	r7, #48	; 0x30
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40005400 	.word	0x40005400
 8001884:	40023800 	.word	0x40023800
 8001888:	40020400 	.word	0x40020400
 800188c:	40005800 	.word	0x40005800

08001890 <HAL_I2C_ListenCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

extern void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef* i2cHandle) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

	if (i2cHandle->Instance == I2C1) {
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <HAL_I2C_ListenCpltCallback+0x20>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d102      	bne.n	80018a8 <HAL_I2C_ListenCpltCallback+0x18>
		HAL_I2C_EnableListen_IT (i2cHandle);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f002 f876 	bl	8003994 <HAL_I2C_EnableListen_IT>
	}

}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40005400 	.word	0x40005400

080018b4 <HAL_I2C_AddrCallback>:

extern void HAL_I2C_AddrCallback (I2C_HandleTypeDef* i2cHandle, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	70fb      	strb	r3, [r7, #3]
 80018c0:	4613      	mov	r3, r2
 80018c2:	803b      	strh	r3, [r7, #0]

	if (i2cHandle->Instance == I2C1) {
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a14      	ldr	r2, [pc, #80]	; (800191c <HAL_I2C_AddrCallback+0x68>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d122      	bne.n	8001914 <HAL_I2C_AddrCallback+0x60>
		if ( TransferDirection == I2C_DIRECTION_TRANSMIT ) { // If the master wants to transmit the data
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d10d      	bne.n	80018f0 <HAL_I2C_AddrCallback+0x3c>

			RxCount = 0;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_I2C_AddrCallback+0x6c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_FIRST_FRAME);
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_I2C_AddrCallback+0x6c>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_I2C_AddrCallback+0x70>)
 80018e2:	18d1      	adds	r1, r2, r3
 80018e4:	2301      	movs	r3, #1
 80018e6:	2201      	movs	r2, #1
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f001 ffe0 	bl	80038ae <HAL_I2C_Slave_Seq_Receive_IT>

		}

	}

}
 80018ee:	e011      	b.n	8001914 <HAL_I2C_AddrCallback+0x60>
			TxCount = 0;
 80018f0:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <HAL_I2C_AddrCallback+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
			StartReg = RxData[0];
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_I2C_AddrCallback+0x70>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_I2C_AddrCallback+0x78>)
 80018fe:	601a      	str	r2, [r3, #0]
			ret = HAL_I2C_Slave_Seq_Transmit_IT(i2cHandle, (uint8_t *) 0x01, 1, I2C_FIRST_AND_LAST_FRAME);
 8001900:	2308      	movs	r3, #8
 8001902:	2201      	movs	r2, #1
 8001904:	2101      	movs	r1, #1
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f001 ff5e 	bl	80037c8 <HAL_I2C_Slave_Seq_Transmit_IT>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <HAL_I2C_AddrCallback+0x7c>)
 8001912:	701a      	strb	r2, [r3, #0]
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40005400 	.word	0x40005400
 8001920:	200102e1 	.word	0x200102e1
 8001924:	200102e4 	.word	0x200102e4
 8001928:	200102e0 	.word	0x200102e0
 800192c:	200102f4 	.word	0x200102f4
 8001930:	200103ac 	.word	0x200103ac

08001934 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback (I2C_HandleTypeDef* i2cHandle) {
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
		// HAL_I2C_Slave_Seq_Transmit_IT (i2cHandle, (uint8_t *) (Registers[TxCount + StartReg] >> 8), 1, I2C_NEXT_FRAME);
		// HAL_I2C_Slave_Seq_Transmit_IT (i2cHandle, (uint8_t *) (Registers[TxCount + StartReg] & 0xFF), 1, I2C_NEXT_FRAME);

	}

}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback (I2C_HandleTypeDef* i2cHandle) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

	if (i2cHandle->Instance == I2C1) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d128      	bne.n	80019ac <HAL_I2C_SlaveRxCpltCallback+0x64>

		RxCount++;
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	3301      	adds	r3, #1
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001964:	701a      	strb	r2, [r3, #0]

		if ( RxCount < RxSize ) {
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b05      	cmp	r3, #5
 800196c:	d818      	bhi.n	80019a0 <HAL_I2C_SlaveRxCpltCallback+0x58>

			if (RxCount == RxSize - 1) {
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b05      	cmp	r3, #5
 8001974:	d10a      	bne.n	800198c <HAL_I2C_SlaveRxCpltCallback+0x44>
				HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_LAST_FRAME);
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <HAL_I2C_SlaveRxCpltCallback+0x74>)
 800197e:	18d1      	adds	r1, r2, r3
 8001980:	2320      	movs	r3, #32
 8001982:	2201      	movs	r2, #1
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f001 ff92 	bl	80038ae <HAL_I2C_Slave_Seq_Receive_IT>
 800198a:	e009      	b.n	80019a0 <HAL_I2C_SlaveRxCpltCallback+0x58>
			} else {
				HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_NEXT_FRAME);
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8001994:	18d1      	adds	r1, r2, r3
 8001996:	2304      	movs	r3, #4
 8001998:	2201      	movs	r2, #1
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f001 ff87 	bl	80038ae <HAL_I2C_Slave_Seq_Receive_IT>
			}
		}

		if ( RxCount == RxSize) {
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b06      	cmp	r3, #6
 80019a6:	d101      	bne.n	80019ac <HAL_I2C_SlaveRxCpltCallback+0x64>
			ProcessData();
 80019a8:	f000 f836 	bl	8001a18 <ProcessData>
		}

	}

}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40005400 	.word	0x40005400
 80019b8:	200102e1 	.word	0x200102e1
 80019bc:	200102e4 	.word	0x200102e4

080019c0 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback (I2C_HandleTypeDef* i2cHandle) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

	if (i2cHandle->Instance == I2C1) {
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <HAL_I2C_ErrorCallback+0x50>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d11a      	bne.n	8001a08 <HAL_I2C_ErrorCallback+0x48>

		if ( HAL_I2C_GetError (i2cHandle) == 4) {
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f002 fa38 	bl	8003e48 <HAL_I2C_GetError>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d111      	bne.n	8001a02 <HAL_I2C_ErrorCallback+0x42>

			__HAL_I2C_CLEAR_FLAG (i2cHandle, I2C_FLAG_AF); 	// Clear AF flag
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019e6:	615a      	str	r2, [r3, #20]

			if ( TxCount == 0) { 						// Error while recieving
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_I2C_ErrorCallback+0x54>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <HAL_I2C_ErrorCallback+0x36>
				ProcessData();
 80019f0:	f000 f812 	bl	8001a18 <ProcessData>
 80019f4:	e005      	b.n	8001a02 <HAL_I2C_ErrorCallback+0x42>
			} else { 									// Error while transmitting
				TxCount--;
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <HAL_I2C_ErrorCallback+0x54>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_I2C_ErrorCallback+0x54>)
 8001a00:	701a      	strb	r2, [r3, #0]
			}

		}

	HAL_I2C_EnableListen_IT(i2cHandle);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f001 ffc6 	bl	8003994 <HAL_I2C_EnableListen_IT>

	}

}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40005400 	.word	0x40005400
 8001a14:	200102e0 	.word	0x200102e0

08001a18 <ProcessData>:

void ProcessData (void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0

	StartReg = RxData[0]; 			// Start address of registers to be written
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <ProcessData+0x98>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <ProcessData+0x9c>)
 8001a26:	601a      	str	r2, [r3, #0]
	NumReg = RxCount - 1; 			// Number of registers to be written
 8001a28:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <ProcessData+0xa0>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	4a23      	ldr	r2, [pc, #140]	; (8001abc <ProcessData+0xa4>)
 8001a30:	6013      	str	r3, [r2, #0]
	EndReg = StartReg + NumReg - 1; // Last register to be written
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <ProcessData+0x9c>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <ProcessData+0xa4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	4a20      	ldr	r2, [pc, #128]	; (8001ac0 <ProcessData+0xa8>)
 8001a40:	6013      	str	r3, [r2, #0]
	if (EndReg > RxSize) {
		//Error_Handler();
	}

	// Write data into the register using a for loop
	for (int i = 2; i < NumReg + 1; i++) {
 8001a42:	2302      	movs	r3, #2
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	e00f      	b.n	8001a68 <ProcessData+0x50>
		Registers[StartReg++] = RxData[i];
 8001a48:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <ProcessData+0x98>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	7818      	ldrb	r0, [r3, #0]
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <ProcessData+0x9c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	4917      	ldr	r1, [pc, #92]	; (8001ab4 <ProcessData+0x9c>)
 8001a58:	600a      	str	r2, [r1, #0]
 8001a5a:	b281      	uxth	r1, r0
 8001a5c:	4a19      	ldr	r2, [pc, #100]	; (8001ac4 <ProcessData+0xac>)
 8001a5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 2; i < NumReg + 1; i++) {
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3301      	adds	r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <ProcessData+0xa4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	ddea      	ble.n	8001a48 <ProcessData+0x30>
	}

	// If the PWM is higher than 0 but the motor is not turning then startup
	if ( Registers[PWMReg] > 0 && Registers[RPMReg] == 0) {
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <ProcessData+0xac>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <ProcessData+0x76>
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <ProcessData+0xac>)
 8001a7c:	88db      	ldrh	r3, [r3, #6]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d105      	bne.n	8001a8e <ProcessData+0x76>
		StartupSequence(Registers[DirReg]);
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <ProcessData+0xac>)
 8001a84:	885b      	ldrh	r3, [r3, #2]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fac9 	bl	8001020 <StartupSequence>
	}

	// If the PWM is 0 but the motor is still turning shutdown
	if ( Registers[PWMReg] == 0 && Registers[RPMReg] > 0 ) {
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <ProcessData+0xac>)
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
		//StopSequence();
	}

	// Call some functions
	ChangePWM(); 				// Update PWM values
 8001a94:	f7ff fc02 	bl	800129c <ChangePWM>
	memset(RxData, 0, RxSize); 	// Empty the RxData array
 8001a98:	2206      	movs	r2, #6
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4804      	ldr	r0, [pc, #16]	; (8001ab0 <ProcessData+0x98>)
 8001a9e:	f006 fbc8 	bl	8008232 <memset>

	Buzzer = 1;
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <ProcessData+0xb0>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200102e4 	.word	0x200102e4
 8001ab4:	200102f4 	.word	0x200102f4
 8001ab8:	200102e1 	.word	0x200102e1
 8001abc:	200102f8 	.word	0x200102f8
 8001ac0:	200102fc 	.word	0x200102fc
 8001ac4:	200102ec 	.word	0x200102ec
 8001ac8:	200103a8 	.word	0x200103a8

08001acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ad0:	f000 fe14 	bl	80026fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad4:	f000 f818 	bl	8001b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad8:	f7ff fd42 	bl	8001560 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001adc:	f000 fa74 	bl	8001fc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ae0:	f000 fb2c 	bl	800213c <MX_TIM2_Init>
  MX_TIM9_Init();
 8001ae4:	f000 fc1e 	bl	8002324 <MX_TIM9_Init>
  MX_I2C1_Init();
 8001ae8:	f7ff fdda 	bl	80016a0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001aec:	f7ff fc12 	bl	8001314 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001af0:	f7ff fe04 	bl	80016fc <MX_I2C2_Init>
  MX_TIM4_Init();
 8001af4:	f000 fbc2 	bl	800227c <MX_TIM4_Init>
  MX_TIM3_Init();
 8001af8:	f000 fb6a 	bl	80021d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_I2C_EnableListen_IT (&hi2c1);
 8001afc:	4801      	ldr	r0, [pc, #4]	; (8001b04 <main+0x38>)
 8001afe:	f001 ff49 	bl	8003994 <HAL_I2C_EnableListen_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <main+0x36>
 8001b04:	20010300 	.word	0x20010300

08001b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b094      	sub	sp, #80	; 0x50
 8001b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b0e:	f107 0320 	add.w	r3, r7, #32
 8001b12:	2230      	movs	r2, #48	; 0x30
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f006 fb8b 	bl	8008232 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <SystemClock_Config+0xcc>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	4a27      	ldr	r2, [pc, #156]	; (8001bd4 <SystemClock_Config+0xcc>)
 8001b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3c:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <SystemClock_Config+0xcc>)
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b48:	2300      	movs	r3, #0
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <SystemClock_Config+0xd0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a21      	ldr	r2, [pc, #132]	; (8001bd8 <SystemClock_Config+0xd0>)
 8001b52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <SystemClock_Config+0xd0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b64:	2301      	movs	r3, #1
 8001b66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b78:	2319      	movs	r3, #25
 8001b7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001b7c:	23c0      	movs	r3, #192	; 0xc0
 8001b7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b80:	2302      	movs	r3, #2
 8001b82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b84:	2304      	movs	r3, #4
 8001b86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b88:	f107 0320 	add.w	r3, r7, #32
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 fbc1 	bl	8005314 <HAL_RCC_OscConfig>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b98:	f000 f820 	bl	8001bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	2103      	movs	r1, #3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 fe22 	bl	8005804 <HAL_RCC_ClockConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bc6:	f000 f809 	bl	8001bdc <Error_Handler>
  }
}
 8001bca:	bf00      	nop
 8001bcc:	3750      	adds	r7, #80	; 0x50
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40007000 	.word	0x40007000

08001bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be0:	b672      	cpsid	i
}
 8001be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <Error_Handler+0x8>
	...

08001be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_MspInit+0x4c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <HAL_MspInit+0x4c>)
 8001bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_MspInit+0x4c>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	603b      	str	r3, [r7, #0]
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_MspInit+0x4c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_MspInit+0x4c>)
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_MspInit+0x4c>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <NMI_Handler+0x4>

08001c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <HardFault_Handler+0x4>

08001c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <MemManage_Handler+0x4>

08001c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <BusFault_Handler+0x4>

08001c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <UsageFault_Handler+0x4>

08001c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c84:	f000 fd8c 	bl	80027a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

	Buzzer = 1;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <EXTI4_IRQHandler+0x14>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001c96:	2010      	movs	r0, #16
 8001c98:	f001 fc2e 	bl	80034f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200103a8 	.word	0x200103a8

08001ca4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <ADC_IRQHandler+0x10>)
 8001caa:	f000 fddc 	bl	8002866 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20010298 	.word	0x20010298

08001cb8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	if ( (TIM9->SR & TIM_SR_CC2IF) >= 1) { // If the CC2IF is set it means a input capture has happened
 8001cbc:	4b2c      	ldr	r3, [pc, #176]	; (8001d70 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d03f      	beq.n	8001d48 <TIM1_BRK_TIM9_IRQHandler+0x90>

		Total -= RPM[i];
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a2a      	ldr	r2, [pc, #168]	; (8001d78 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001cce:	8812      	ldrh	r2, [r2, #0]
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4a2a      	ldr	r2, [pc, #168]	; (8001d7c <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001cd4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	4a26      	ldr	r2, [pc, #152]	; (8001d74 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001cdc:	6013      	str	r3, [r2, #0]
		RPM[i] = RPMConst / (TIM9->CCR2);
 8001cde:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <TIM1_BRK_TIM9_IRQHandler+0xc8>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce6:	fbb2 f1f3 	udiv	r1, r2, r3
 8001cea:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	b289      	uxth	r1, r1
 8001cf2:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001cf4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		Total += RPM[i];
 8001cf8:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001d00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001d0e:	6013      	str	r3, [r2, #0]

		i++;
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001d1a:	801a      	strh	r2, [r3, #0]

		if ( i >= AvgSize - 1 ) {
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	2b7e      	cmp	r3, #126	; 0x7e
 8001d22:	d902      	bls.n	8001d2a <TIM1_BRK_TIM9_IRQHandler+0x72>
			i = 0;
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	801a      	strh	r2, [r3, #0]
		}

		Registers[RPMReg] = Total / AvgSize;
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	09db      	lsrs	r3, r3, #7
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001d34:	80da      	strh	r2, [r3, #6]

		// If maximum RPM is exceeded -> shutdown
		if ( Registers[RPMReg] > MaximumRPM ) {
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001d38:	88db      	ldrh	r3, [r3, #6]
 8001d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d90e      	bls.n	8001d60 <TIM1_BRK_TIM9_IRQHandler+0xa8>
			StopSequence();
 8001d42:	f7ff fa4b 	bl	80011dc <StopSequence>
 8001d46:	e00b      	b.n	8001d60 <TIM1_BRK_TIM9_IRQHandler+0xa8>
		}
	} else {
		Registers[RPMReg] = 0; // If the CC2IF was not set it means the timer has overflowed and the motor is thus stationary
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	80da      	strh	r2, [r3, #6]
		Total = 0;
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
		memset(RPM, 0, AvgSize * 2);
 8001d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4808      	ldr	r0, [pc, #32]	; (8001d7c <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001d5c:	f006 fa69 	bl	8008232 <memset>
	}


  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d60:	4809      	ldr	r0, [pc, #36]	; (8001d88 <TIM1_BRK_TIM9_IRQHandler+0xd0>)
 8001d62:	f004 fb8b 	bl	800647c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001d66:	4809      	ldr	r0, [pc, #36]	; (8001d8c <TIM1_BRK_TIM9_IRQHandler+0xd4>)
 8001d68:	f004 fb88 	bl	800647c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40014000 	.word	0x40014000
 8001d74:	200103b0 	.word	0x200103b0
 8001d78:	200104b4 	.word	0x200104b4
 8001d7c:	200103b4 	.word	0x200103b4
 8001d80:	20000288 	.word	0x20000288
 8001d84:	200102ec 	.word	0x200102ec
 8001d88:	200104bc 	.word	0x200104bc
 8001d8c:	200105dc 	.word	0x200105dc

08001d90 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	PrepareCommutation (Registers[DirReg]); // Set next Commutation states
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 8001d96:	885b      	ldrh	r3, [r3, #2]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff f8fa 	bl	8000f94 <PrepareCommutation>

	TIM1->SR &= ~TIM_SR_COMIF; 				// Reset COMIF in SR register
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8001da6:	f023 0320 	bic.w	r3, r3, #32
 8001daa:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dac:	4804      	ldr	r0, [pc, #16]	; (8001dc0 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 8001dae:	f004 fb65 	bl	800647c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200102ec 	.word	0x200102ec
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	200104bc 	.word	0x200104bc

08001dc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	// Reset Timer 9 counter.
	TIM9->CNT = 0x0;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <TIM2_IRQHandler+0x20>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24

	// Set COMG bit in EGR
	TIM1->EGR |= TIM_EGR_COMG;
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <TIM2_IRQHandler+0x24>)
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <TIM2_IRQHandler+0x24>)
 8001dd4:	f043 0320 	orr.w	r3, r3, #32
 8001dd8:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dda:	4804      	ldr	r0, [pc, #16]	; (8001dec <TIM2_IRQHandler+0x28>)
 8001ddc:	f004 fb4e 	bl	800647c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40014000 	.word	0x40014000
 8001de8:	40010000 	.word	0x40010000
 8001dec:	20010504 	.word	0x20010504

08001df0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <I2C1_EV_IRQHandler+0x10>)
 8001df6:	f001 fe03 	bl	8003a00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20010300 	.word	0x20010300

08001e04 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <I2C1_ER_IRQHandler+0x10>)
 8001e0a:	f001 ff4c 	bl	8003ca6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20010300 	.word	0x20010300

08001e18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return 1;
 8001e1c:	2301      	movs	r3, #1
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_kill>:

int _kill(int pid, int sig)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e32:	f006 fa51 	bl	80082d8 <__errno>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2216      	movs	r2, #22
 8001e3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_exit>:

void _exit (int status)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ffe7 	bl	8001e28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e5a:	e7fe      	b.n	8001e5a <_exit+0x12>

08001e5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e00a      	b.n	8001e84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e6e:	f3af 8000 	nop.w
 8001e72:	4601      	mov	r1, r0
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	60ba      	str	r2, [r7, #8]
 8001e7a:	b2ca      	uxtb	r2, r1
 8001e7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dbf0      	blt.n	8001e6e <_read+0x12>
  }

  return len;
 8001e8c:	687b      	ldr	r3, [r7, #4]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	e009      	b.n	8001ebc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	60ba      	str	r2, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	dbf1      	blt.n	8001ea8 <_write+0x12>
  }
  return len;
 8001ec4:	687b      	ldr	r3, [r7, #4]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <_close>:

int _close(int file)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_isatty>:

int _isatty(int file)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f0e:	2301      	movs	r3, #1
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <_sbrk+0x5c>)
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <_sbrk+0x60>)
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <_sbrk+0x64>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <_sbrk+0x68>)
 8001f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d207      	bcs.n	8001f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f68:	f006 f9b6 	bl	80082d8 <__errno>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	220c      	movs	r2, #12
 8001f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	e009      	b.n	8001f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <_sbrk+0x64>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <_sbrk+0x64>)
 8001f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20020000 	.word	0x20020000
 8001f98:	00000400 	.word	0x00000400
 8001f9c:	200104b8 	.word	0x200104b8
 8001fa0:	20010778 	.word	0x20010778

08001fa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <SystemInit+0x20>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <SystemInit+0x20>)
 8001fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b096      	sub	sp, #88	; 0x58
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001fce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
 8001fdc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe8:	f107 0320 	add.w	r3, r7, #32
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
 8001ff8:	615a      	str	r2, [r3, #20]
 8001ffa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	2220      	movs	r2, #32
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f006 f915 	bl	8008232 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002008:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <MX_TIM1_Init+0x16c>)
 800200a:	4a4b      	ldr	r2, [pc, #300]	; (8002138 <MX_TIM1_Init+0x170>)
 800200c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800200e:	4b49      	ldr	r3, [pc, #292]	; (8002134 <MX_TIM1_Init+0x16c>)
 8002010:	2200      	movs	r2, #0
 8002012:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002014:	4b47      	ldr	r3, [pc, #284]	; (8002134 <MX_TIM1_Init+0x16c>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 800201a:	4b46      	ldr	r3, [pc, #280]	; (8002134 <MX_TIM1_Init+0x16c>)
 800201c:	f240 727f 	movw	r2, #1919	; 0x77f
 8002020:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002022:	4b44      	ldr	r3, [pc, #272]	; (8002134 <MX_TIM1_Init+0x16c>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002028:	4b42      	ldr	r3, [pc, #264]	; (8002134 <MX_TIM1_Init+0x16c>)
 800202a:	2200      	movs	r2, #0
 800202c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <MX_TIM1_Init+0x16c>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002034:	483f      	ldr	r0, [pc, #252]	; (8002134 <MX_TIM1_Init+0x16c>)
 8002036:	f003 fdc5 	bl	8005bc4 <HAL_TIM_Base_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002040:	f7ff fdcc 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002044:	483b      	ldr	r0, [pc, #236]	; (8002134 <MX_TIM1_Init+0x16c>)
 8002046:	f003 fe9e 	bl	8005d86 <HAL_TIM_PWM_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8002050:	f7ff fdc4 	bl	8001bdc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002054:	2304      	movs	r3, #4
 8002056:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002058:	2300      	movs	r3, #0
 800205a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800205c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002060:	4619      	mov	r1, r3
 8002062:	4834      	ldr	r0, [pc, #208]	; (8002134 <MX_TIM1_Init+0x16c>)
 8002064:	f004 fc70 	bl	8006948 <HAL_TIM_SlaveConfigSynchro>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800206e:	f7ff fdb5 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800207a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800207e:	4619      	mov	r1, r3
 8002080:	482c      	ldr	r0, [pc, #176]	; (8002134 <MX_TIM1_Init+0x16c>)
 8002082:	f005 fa97 	bl	80075b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800208c:	f7ff fda6 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002090:	2360      	movs	r3, #96	; 0x60
 8002092:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002098:	2300      	movs	r3, #0
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020a4:	2300      	movs	r3, #0
 80020a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020a8:	2300      	movs	r3, #0
 80020aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ac:	f107 0320 	add.w	r3, r7, #32
 80020b0:	2200      	movs	r2, #0
 80020b2:	4619      	mov	r1, r3
 80020b4:	481f      	ldr	r0, [pc, #124]	; (8002134 <MX_TIM1_Init+0x16c>)
 80020b6:	f004 fb85 	bl	80067c4 <HAL_TIM_PWM_ConfigChannel>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80020c0:	f7ff fd8c 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020c4:	f107 0320 	add.w	r3, r7, #32
 80020c8:	2204      	movs	r2, #4
 80020ca:	4619      	mov	r1, r3
 80020cc:	4819      	ldr	r0, [pc, #100]	; (8002134 <MX_TIM1_Init+0x16c>)
 80020ce:	f004 fb79 	bl	80067c4 <HAL_TIM_PWM_ConfigChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80020d8:	f7ff fd80 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020dc:	f107 0320 	add.w	r3, r7, #32
 80020e0:	2208      	movs	r2, #8
 80020e2:	4619      	mov	r1, r3
 80020e4:	4813      	ldr	r0, [pc, #76]	; (8002134 <MX_TIM1_Init+0x16c>)
 80020e6:	f004 fb6d 	bl	80067c4 <HAL_TIM_PWM_ConfigChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80020f0:	f7ff fd74 	bl	8001bdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800210c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002112:	463b      	mov	r3, r7
 8002114:	4619      	mov	r1, r3
 8002116:	4807      	ldr	r0, [pc, #28]	; (8002134 <MX_TIM1_Init+0x16c>)
 8002118:	f005 faba 	bl	8007690 <HAL_TIMEx_ConfigBreakDeadTime>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8002122:	f7ff fd5b 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002126:	4803      	ldr	r0, [pc, #12]	; (8002134 <MX_TIM1_Init+0x16c>)
 8002128:	f000 fa62 	bl	80025f0 <HAL_TIM_MspPostInit>

}
 800212c:	bf00      	nop
 800212e:	3758      	adds	r7, #88	; 0x58
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	200104bc 	.word	0x200104bc
 8002138:	40010000 	.word	0x40010000

0800213c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002150:	463b      	mov	r3, r7
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002158:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <MX_TIM2_Init+0x90>)
 800215a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800215e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <MX_TIM2_Init+0x90>)
 8002162:	2200      	movs	r2, #0
 8002164:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002166:	4b19      	ldr	r3, [pc, #100]	; (80021cc <MX_TIM2_Init+0x90>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <MX_TIM2_Init+0x90>)
 800216e:	f04f 32ff 	mov.w	r2, #4294967295
 8002172:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002174:	4b15      	ldr	r3, [pc, #84]	; (80021cc <MX_TIM2_Init+0x90>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217a:	4b14      	ldr	r3, [pc, #80]	; (80021cc <MX_TIM2_Init+0x90>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	4619      	mov	r1, r3
 8002196:	480d      	ldr	r0, [pc, #52]	; (80021cc <MX_TIM2_Init+0x90>)
 8002198:	f005 f8aa 	bl	80072f0 <HAL_TIMEx_HallSensor_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80021a2:	f7ff fd1b 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80021a6:	2350      	movs	r3, #80	; 0x50
 80021a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021ae:	463b      	mov	r3, r7
 80021b0:	4619      	mov	r1, r3
 80021b2:	4806      	ldr	r0, [pc, #24]	; (80021cc <MX_TIM2_Init+0x90>)
 80021b4:	f005 f9fe 	bl	80075b4 <HAL_TIMEx_MasterConfigSynchronization>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80021be:	f7ff fd0d 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021c2:	bf00      	nop
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20010504 	.word	0x20010504

080021d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d6:	f107 0320 	add.w	r3, r7, #32
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	60da      	str	r2, [r3, #12]
 80021ec:	611a      	str	r2, [r3, #16]
 80021ee:	615a      	str	r2, [r3, #20]
 80021f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <MX_TIM3_Init+0xa4>)
 80021f4:	4a20      	ldr	r2, [pc, #128]	; (8002278 <MX_TIM3_Init+0xa8>)
 80021f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021f8:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <MX_TIM3_Init+0xa4>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <MX_TIM3_Init+0xa4>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 959;
 8002204:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <MX_TIM3_Init+0xa4>)
 8002206:	f240 32bf 	movw	r2, #959	; 0x3bf
 800220a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <MX_TIM3_Init+0xa4>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <MX_TIM3_Init+0xa4>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002218:	4816      	ldr	r0, [pc, #88]	; (8002274 <MX_TIM3_Init+0xa4>)
 800221a:	f003 fdb4 	bl	8005d86 <HAL_TIM_PWM_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002224:	f7ff fcda 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002228:	2320      	movs	r3, #32
 800222a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002230:	f107 0320 	add.w	r3, r7, #32
 8002234:	4619      	mov	r1, r3
 8002236:	480f      	ldr	r0, [pc, #60]	; (8002274 <MX_TIM3_Init+0xa4>)
 8002238:	f005 f9bc 	bl	80075b4 <HAL_TIMEx_MasterConfigSynchronization>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002242:	f7ff fccb 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002246:	2360      	movs	r3, #96	; 0x60
 8002248:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	2200      	movs	r2, #0
 800225a:	4619      	mov	r1, r3
 800225c:	4805      	ldr	r0, [pc, #20]	; (8002274 <MX_TIM3_Init+0xa4>)
 800225e:	f004 fab1 	bl	80067c4 <HAL_TIM_PWM_ConfigChannel>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002268:	f7ff fcb8 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800226c:	bf00      	nop
 800226e:	3728      	adds	r7, #40	; 0x28
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	2001054c 	.word	0x2001054c
 8002278:	40000400 	.word	0x40000400

0800227c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800228c:	463b      	mov	r3, r7
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002298:	4b20      	ldr	r3, [pc, #128]	; (800231c <MX_TIM4_Init+0xa0>)
 800229a:	4a21      	ldr	r2, [pc, #132]	; (8002320 <MX_TIM4_Init+0xa4>)
 800229c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800229e:	4b1f      	ldr	r3, [pc, #124]	; (800231c <MX_TIM4_Init+0xa0>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a4:	4b1d      	ldr	r3, [pc, #116]	; (800231c <MX_TIM4_Init+0xa0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <MX_TIM4_Init+0xa0>)
 80022ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <MX_TIM4_Init+0xa0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <MX_TIM4_Init+0xa0>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80022be:	4817      	ldr	r0, [pc, #92]	; (800231c <MX_TIM4_Init+0xa0>)
 80022c0:	f003 fec4 	bl	800604c <HAL_TIM_IC_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80022ca:	f7ff fc87 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022d6:	f107 0310 	add.w	r3, r7, #16
 80022da:	4619      	mov	r1, r3
 80022dc:	480f      	ldr	r0, [pc, #60]	; (800231c <MX_TIM4_Init+0xa0>)
 80022de:	f005 f969 	bl	80075b4 <HAL_TIMEx_MasterConfigSynchronization>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80022e8:	f7ff fc78 	bl	8001bdc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022ec:	2300      	movs	r3, #0
 80022ee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022f0:	2301      	movs	r3, #1
 80022f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80022fc:	463b      	mov	r3, r7
 80022fe:	2208      	movs	r2, #8
 8002300:	4619      	mov	r1, r3
 8002302:	4806      	ldr	r0, [pc, #24]	; (800231c <MX_TIM4_Init+0xa0>)
 8002304:	f004 f9c2 	bl	800668c <HAL_TIM_IC_ConfigChannel>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800230e:	f7ff fc65 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20010594 	.word	0x20010594
 8002320:	40000800 	.word	0x40000800

08002324 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800232a:	463b      	mov	r3, r7
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002336:	4b19      	ldr	r3, [pc, #100]	; (800239c <MX_TIM9_Init+0x78>)
 8002338:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <MX_TIM9_Init+0x7c>)
 800233a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1499;
 800233c:	4b17      	ldr	r3, [pc, #92]	; (800239c <MX_TIM9_Init+0x78>)
 800233e:	f240 52db 	movw	r2, #1499	; 0x5db
 8002342:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <MX_TIM9_Init+0x78>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 63999;
 800234a:	4b14      	ldr	r3, [pc, #80]	; (800239c <MX_TIM9_Init+0x78>)
 800234c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002350:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002352:	4b12      	ldr	r3, [pc, #72]	; (800239c <MX_TIM9_Init+0x78>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <MX_TIM9_Init+0x78>)
 800235a:	2200      	movs	r2, #0
 800235c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 800235e:	480f      	ldr	r0, [pc, #60]	; (800239c <MX_TIM9_Init+0x78>)
 8002360:	f003 fe74 	bl	800604c <HAL_TIM_IC_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800236a:	f7ff fc37 	bl	8001bdc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800236e:	2300      	movs	r3, #0
 8002370:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002372:	2301      	movs	r3, #1
 8002374:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 800237a:	2302      	movs	r3, #2
 800237c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800237e:	463b      	mov	r3, r7
 8002380:	2204      	movs	r2, #4
 8002382:	4619      	mov	r1, r3
 8002384:	4805      	ldr	r0, [pc, #20]	; (800239c <MX_TIM9_Init+0x78>)
 8002386:	f004 f981 	bl	800668c <HAL_TIM_IC_ConfigChannel>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM9_Init+0x70>
  {
    Error_Handler();
 8002390:	f7ff fc24 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002394:	bf00      	nop
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	200105dc 	.word	0x200105dc
 80023a0:	40014000 	.word	0x40014000

080023a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a12      	ldr	r2, [pc, #72]	; (80023fc <HAL_TIM_Base_MspInit+0x58>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d11d      	bne.n	80023f2 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_TIM_Base_MspInit+0x5c>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	4a10      	ldr	r2, [pc, #64]	; (8002400 <HAL_TIM_Base_MspInit+0x5c>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6453      	str	r3, [r2, #68]	; 0x44
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_TIM_Base_MspInit+0x5c>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2100      	movs	r1, #0
 80023d6:	2018      	movs	r0, #24
 80023d8:	f000 fe89 	bl	80030ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80023dc:	2018      	movs	r0, #24
 80023de:	f000 fea2 	bl	8003126 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	201a      	movs	r0, #26
 80023e8:	f000 fe81 	bl	80030ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80023ec:	201a      	movs	r0, #26
 80023ee:	f000 fe9a 	bl	8003126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40010000 	.word	0x40010000
 8002400:	40023800 	.word	0x40023800

08002404 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002424:	d133      	bne.n	800248e <HAL_TIMEx_HallSensor_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	4a1a      	ldr	r2, [pc, #104]	; (8002498 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6413      	str	r3, [r2, #64]	; 0x40
 8002436:	4b18      	ldr	r3, [pc, #96]	; (8002498 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a13      	ldr	r2, [pc, #76]	; (8002498 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800245e:	2307      	movs	r3, #7
 8002460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002466:	2301      	movs	r3, #1
 8002468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800246e:	2301      	movs	r3, #1
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4619      	mov	r1, r3
 8002478:	4808      	ldr	r0, [pc, #32]	; (800249c <HAL_TIMEx_HallSensor_MspInit+0x98>)
 800247a:	f000 fe9f 	bl	80031bc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	2100      	movs	r1, #0
 8002482:	201c      	movs	r0, #28
 8002484:	f000 fe33 	bl	80030ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002488:	201c      	movs	r0, #28
 800248a:	f000 fe4c 	bl	8003126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800248e:	bf00      	nop
 8002490:	3728      	adds	r7, #40	; 0x28
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	40020000 	.word	0x40020000

080024a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0b      	ldr	r2, [pc, #44]	; (80024dc <HAL_TIM_PWM_MspInit+0x3c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d10d      	bne.n	80024ce <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_TIM_PWM_MspInit+0x40>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <HAL_TIM_PWM_MspInit+0x40>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	6413      	str	r3, [r2, #64]	; 0x40
 80024c2:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <HAL_TIM_PWM_MspInit+0x40>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40000400 	.word	0x40000400
 80024e0:	40023800 	.word	0x40023800

080024e4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08c      	sub	sp, #48	; 0x30
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 031c 	add.w	r3, r7, #28
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM4)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a36      	ldr	r2, [pc, #216]	; (80025dc <HAL_TIM_IC_MspInit+0xf8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d12d      	bne.n	8002562 <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	4b35      	ldr	r3, [pc, #212]	; (80025e0 <HAL_TIM_IC_MspInit+0xfc>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a34      	ldr	r2, [pc, #208]	; (80025e0 <HAL_TIM_IC_MspInit+0xfc>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b32      	ldr	r3, [pc, #200]	; (80025e0 <HAL_TIM_IC_MspInit+0xfc>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	61bb      	str	r3, [r7, #24]
 8002520:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	4b2e      	ldr	r3, [pc, #184]	; (80025e0 <HAL_TIM_IC_MspInit+0xfc>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a2d      	ldr	r2, [pc, #180]	; (80025e0 <HAL_TIM_IC_MspInit+0xfc>)
 800252c:	f043 0302 	orr.w	r3, r3, #2
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_TIM_IC_MspInit+0xfc>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800253e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	2302      	movs	r3, #2
 8002546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254c:	2300      	movs	r3, #0
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002550:	2302      	movs	r3, #2
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002554:	f107 031c 	add.w	r3, r7, #28
 8002558:	4619      	mov	r1, r3
 800255a:	4822      	ldr	r0, [pc, #136]	; (80025e4 <HAL_TIM_IC_MspInit+0x100>)
 800255c:	f000 fe2e 	bl	80031bc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002560:	e038      	b.n	80025d4 <HAL_TIM_IC_MspInit+0xf0>
  else if(tim_icHandle->Instance==TIM9)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a20      	ldr	r2, [pc, #128]	; (80025e8 <HAL_TIM_IC_MspInit+0x104>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d133      	bne.n	80025d4 <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800256c:	2300      	movs	r3, #0
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_TIM_IC_MspInit+0xfc>)
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	4a1a      	ldr	r2, [pc, #104]	; (80025e0 <HAL_TIM_IC_MspInit+0xfc>)
 8002576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257a:	6453      	str	r3, [r2, #68]	; 0x44
 800257c:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <HAL_TIM_IC_MspInit+0xfc>)
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <HAL_TIM_IC_MspInit+0xfc>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	4a13      	ldr	r2, [pc, #76]	; (80025e0 <HAL_TIM_IC_MspInit+0xfc>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6313      	str	r3, [r2, #48]	; 0x30
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_TIM_IC_MspInit+0xfc>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025a4:	2308      	movs	r3, #8
 80025a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ac:	2301      	movs	r3, #1
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80025b4:	2303      	movs	r3, #3
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b8:	f107 031c 	add.w	r3, r7, #28
 80025bc:	4619      	mov	r1, r3
 80025be:	480b      	ldr	r0, [pc, #44]	; (80025ec <HAL_TIM_IC_MspInit+0x108>)
 80025c0:	f000 fdfc 	bl	80031bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80025c4:	2200      	movs	r2, #0
 80025c6:	2100      	movs	r1, #0
 80025c8:	2018      	movs	r0, #24
 80025ca:	f000 fd90 	bl	80030ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80025ce:	2018      	movs	r0, #24
 80025d0:	f000 fda9 	bl	8003126 <HAL_NVIC_EnableIRQ>
}
 80025d4:	bf00      	nop
 80025d6:	3730      	adds	r7, #48	; 0x30
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40000800 	.word	0x40000800
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020400 	.word	0x40020400
 80025e8:	40014000 	.word	0x40014000
 80025ec:	40020000 	.word	0x40020000

080025f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a22      	ldr	r2, [pc, #136]	; (8002698 <HAL_TIM_MspPostInit+0xa8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d13d      	bne.n	800268e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	4b21      	ldr	r3, [pc, #132]	; (800269c <HAL_TIM_MspPostInit+0xac>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a20      	ldr	r2, [pc, #128]	; (800269c <HAL_TIM_MspPostInit+0xac>)
 800261c:	f043 0302 	orr.w	r3, r3, #2
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	4b1e      	ldr	r3, [pc, #120]	; (800269c <HAL_TIM_MspPostInit+0xac>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <HAL_TIM_MspPostInit+0xac>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a19      	ldr	r2, [pc, #100]	; (800269c <HAL_TIM_MspPostInit+0xac>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b17      	ldr	r3, [pc, #92]	; (800269c <HAL_TIM_MspPostInit+0xac>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800264a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800264e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002658:	2300      	movs	r3, #0
 800265a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800265c:	2301      	movs	r3, #1
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	4619      	mov	r1, r3
 8002666:	480e      	ldr	r0, [pc, #56]	; (80026a0 <HAL_TIM_MspPostInit+0xb0>)
 8002668:	f000 fda8 	bl	80031bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800266c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	2300      	movs	r3, #0
 800267c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800267e:	2301      	movs	r3, #1
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	4619      	mov	r1, r3
 8002688:	4806      	ldr	r0, [pc, #24]	; (80026a4 <HAL_TIM_MspPostInit+0xb4>)
 800268a:	f000 fd97 	bl	80031bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800268e:	bf00      	nop
 8002690:	3728      	adds	r7, #40	; 0x28
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40010000 	.word	0x40010000
 800269c:	40023800 	.word	0x40023800
 80026a0:	40020400 	.word	0x40020400
 80026a4:	40020000 	.word	0x40020000

080026a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026ac:	480d      	ldr	r0, [pc, #52]	; (80026e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026ae:	490e      	ldr	r1, [pc, #56]	; (80026e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026b0:	4a0e      	ldr	r2, [pc, #56]	; (80026ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b4:	e002      	b.n	80026bc <LoopCopyDataInit>

080026b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ba:	3304      	adds	r3, #4

080026bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c0:	d3f9      	bcc.n	80026b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c2:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026c4:	4c0b      	ldr	r4, [pc, #44]	; (80026f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c8:	e001      	b.n	80026ce <LoopFillZerobss>

080026ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026cc:	3204      	adds	r2, #4

080026ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d0:	d3fb      	bcc.n	80026ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026d2:	f7ff fc67 	bl	8001fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026d6:	f005 fe05 	bl	80082e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026da:	f7ff f9f7 	bl	8001acc <main>
  bx  lr    
 80026de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e8:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 80026ec:	0800a48c 	.word	0x0800a48c
  ldr r2, =_sbss
 80026f0:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 80026f4:	20010774 	.word	0x20010774

080026f8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f8:	e7fe      	b.n	80026f8 <DMA1_Stream0_IRQHandler>
	...

080026fc <HAL_Init>:
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4b0e      	ldr	r3, [pc, #56]	; (800273c <HAL_Init+0x40>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0d      	ldr	r2, [pc, #52]	; (800273c <HAL_Init+0x40>)
 8002706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_Init+0x40>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0a      	ldr	r2, [pc, #40]	; (800273c <HAL_Init+0x40>)
 8002712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_Init+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a07      	ldr	r2, [pc, #28]	; (800273c <HAL_Init+0x40>)
 800271e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	2003      	movs	r0, #3
 8002726:	f000 fcd7 	bl	80030d8 <HAL_NVIC_SetPriorityGrouping>
 800272a:	200f      	movs	r0, #15
 800272c:	f000 f808 	bl	8002740 <HAL_InitTick>
 8002730:	f7ff fa5a 	bl	8001be8 <HAL_MspInit>
 8002734:	2300      	movs	r3, #0
 8002736:	4618      	mov	r0, r3
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40023c00 	.word	0x40023c00

08002740 <HAL_InitTick>:
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_InitTick+0x54>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_InitTick+0x58>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4619      	mov	r1, r3
 8002752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002756:	fbb3 f3f1 	udiv	r3, r3, r1
 800275a:	fbb2 f3f3 	udiv	r3, r2, r3
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fcef 	bl	8003142 <HAL_SYSTICK_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_InitTick+0x2e>
 800276a:	2301      	movs	r3, #1
 800276c:	e00e      	b.n	800278c <HAL_InitTick+0x4c>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b0f      	cmp	r3, #15
 8002772:	d80a      	bhi.n	800278a <HAL_InitTick+0x4a>
 8002774:	2200      	movs	r2, #0
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	f04f 30ff 	mov.w	r0, #4294967295
 800277c:	f000 fcb7 	bl	80030ee <HAL_NVIC_SetPriority>
 8002780:	4a06      	ldr	r2, [pc, #24]	; (800279c <HAL_InitTick+0x5c>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	2300      	movs	r3, #0
 8002788:	e000      	b.n	800278c <HAL_InitTick+0x4c>
 800278a:	2301      	movs	r3, #1
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000090 	.word	0x20000090
 8002798:	20000098 	.word	0x20000098
 800279c:	20000094 	.word	0x20000094

080027a0 <HAL_IncTick>:
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_IncTick+0x20>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_IncTick+0x24>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <HAL_IncTick+0x24>)
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000098 	.word	0x20000098
 80027c4:	20010624 	.word	0x20010624

080027c8 <HAL_GetTick>:
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <HAL_GetTick+0x14>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20010624 	.word	0x20010624

080027e0 <HAL_ADC_Init>:
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_ADC_Init+0x16>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e033      	b.n	800285e <HAL_ADC_Init+0x7e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_ADC_Init+0x32>
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe fdda 	bl	80013b8 <HAL_ADC_MspInit>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	645a      	str	r2, [r3, #68]	; 0x44
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	2b00      	cmp	r3, #0
 800281c:	d118      	bne.n	8002850 <HAL_ADC_Init+0x70>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002826:	f023 0302 	bic.w	r3, r3, #2
 800282a:	f043 0202 	orr.w	r2, r3, #2
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fa7a 	bl	8002d2c <ADC_Init>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	645a      	str	r2, [r3, #68]	; 0x44
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f023 0303 	bic.w	r3, r3, #3
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
 800284e:	e001      	b.n	8002854 <HAL_ADC_Init+0x74>
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_ADC_IRQHandler>:
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d049      	beq.n	8002930 <HAL_ADC_IRQHandler+0xca>
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d046      	beq.n	8002930 <HAL_ADC_IRQHandler+0xca>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d105      	bne.n	80028ba <HAL_ADC_IRQHandler+0x54>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d12b      	bne.n	8002920 <HAL_ADC_IRQHandler+0xba>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	7e1b      	ldrb	r3, [r3, #24]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d127      	bne.n	8002920 <HAL_ADC_IRQHandler+0xba>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <HAL_ADC_IRQHandler+0x86>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d119      	bne.n	8002920 <HAL_ADC_IRQHandler+0xba>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0220 	bic.w	r2, r2, #32
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	641a      	str	r2, [r3, #64]	; 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d105      	bne.n	8002920 <HAL_ADC_IRQHandler+0xba>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f043 0201 	orr.w	r2, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	641a      	str	r2, [r3, #64]	; 0x40
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7fe fd95 	bl	8001450 <HAL_ADC_ConvCpltCallback>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f06f 0212 	mvn.w	r2, #18
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d057      	beq.n	80029f6 <HAL_ADC_IRQHandler+0x190>
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d054      	beq.n	80029f6 <HAL_ADC_IRQHandler+0x190>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <HAL_ADC_IRQHandler+0xfe>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d139      	bne.n	80029e6 <HAL_ADC_IRQHandler+0x180>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d006      	beq.n	800298e <HAL_ADC_IRQHandler+0x128>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298a:	2b00      	cmp	r3, #0
 800298c:	d12b      	bne.n	80029e6 <HAL_ADC_IRQHandler+0x180>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d124      	bne.n	80029e6 <HAL_ADC_IRQHandler+0x180>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d11d      	bne.n	80029e6 <HAL_ADC_IRQHandler+0x180>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7e1b      	ldrb	r3, [r3, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d119      	bne.n	80029e6 <HAL_ADC_IRQHandler+0x180>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d105      	bne.n	80029e6 <HAL_ADC_IRQHandler+0x180>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f043 0201 	orr.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fa9c 	bl	8002f24 <HAL_ADCEx_InjectedConvCpltCallback>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 020c 	mvn.w	r2, #12
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d017      	beq.n	8002a3c <HAL_ADC_IRQHandler+0x1d6>
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d014      	beq.n	8002a3c <HAL_ADC_IRQHandler+0x1d6>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d10d      	bne.n	8002a3c <HAL_ADC_IRQHandler+0x1d6>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f837 	bl	8002aa0 <HAL_ADC_LevelOutOfWindowCallback>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f06f 0201 	mvn.w	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d015      	beq.n	8002a7e <HAL_ADC_IRQHandler+0x218>
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d012      	beq.n	8002a7e <HAL_ADC_IRQHandler+0x218>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5c:	f043 0202 	orr.w	r2, r3, #2
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	645a      	str	r2, [r3, #68]	; 0x44
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0220 	mvn.w	r2, #32
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f820 	bl	8002ab4 <HAL_ADC_ErrorCallback>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0220 	mvn.w	r2, #32
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_ADC_GetValue>:
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_ADC_LevelOutOfWindowCallback>:
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_ADC_ErrorCallback>:
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_ADC_ConfigChannel>:
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x1c>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e113      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x244>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b09      	cmp	r3, #9
 8002af2:	d925      	bls.n	8002b40 <HAL_ADC_ConfigChannel+0x78>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68d9      	ldr	r1, [r3, #12]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	4613      	mov	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4413      	add	r3, r2
 8002b08:	3b1e      	subs	r3, #30
 8002b0a:	2207      	movs	r2, #7
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43da      	mvns	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	400a      	ands	r2, r1
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68d9      	ldr	r1, [r3, #12]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4403      	add	r3, r0
 8002b32:	3b1e      	subs	r3, #30
 8002b34:	409a      	lsls	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	e022      	b.n	8002b86 <HAL_ADC_ConfigChannel+0xbe>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6919      	ldr	r1, [r3, #16]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4613      	mov	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4413      	add	r3, r2
 8002b54:	2207      	movs	r2, #7
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	400a      	ands	r2, r1
 8002b62:	611a      	str	r2, [r3, #16]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6919      	ldr	r1, [r3, #16]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	4618      	mov	r0, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4403      	add	r3, r0
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	611a      	str	r2, [r3, #16]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d824      	bhi.n	8002bd8 <HAL_ADC_ConfigChannel+0x110>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3b05      	subs	r3, #5
 8002ba0:	221f      	movs	r2, #31
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	400a      	ands	r2, r1
 8002bae:	635a      	str	r2, [r3, #52]	; 0x34
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3b05      	subs	r3, #5
 8002bca:	fa00 f203 	lsl.w	r2, r0, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bd6:	e04c      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x1aa>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b0c      	cmp	r3, #12
 8002bde:	d824      	bhi.n	8002c2a <HAL_ADC_ConfigChannel+0x162>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	3b23      	subs	r3, #35	; 0x23
 8002bf2:	221f      	movs	r2, #31
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43da      	mvns	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	400a      	ands	r2, r1
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4618      	mov	r0, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	3b23      	subs	r3, #35	; 0x23
 8002c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
 8002c28:	e023      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x1aa>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	3b41      	subs	r3, #65	; 0x41
 8002c3c:	221f      	movs	r2, #31
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	400a      	ands	r2, r1
 8002c4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	4618      	mov	r0, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	3b41      	subs	r3, #65	; 0x41
 8002c66:	fa00 f203 	lsl.w	r2, r0, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c72:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <HAL_ADC_ConfigChannel+0x250>)
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a28      	ldr	r2, [pc, #160]	; (8002d1c <HAL_ADC_ConfigChannel+0x254>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d10f      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x1d8>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b12      	cmp	r3, #18
 8002c86:	d10b      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x1d8>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	605a      	str	r2, [r3, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <HAL_ADC_ConfigChannel+0x254>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d12b      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x23a>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1c      	ldr	r2, [pc, #112]	; (8002d20 <HAL_ADC_ConfigChannel+0x258>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <HAL_ADC_ConfigChannel+0x1f4>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b11      	cmp	r3, #17
 8002cba:	d122      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x23a>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a11      	ldr	r2, [pc, #68]	; (8002d20 <HAL_ADC_ConfigChannel+0x258>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d111      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x23a>
 8002cde:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <HAL_ADC_ConfigChannel+0x25c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a11      	ldr	r2, [pc, #68]	; (8002d28 <HAL_ADC_ConfigChannel+0x260>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	0c9a      	lsrs	r2, r3, #18
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	e002      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x234>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f9      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x22e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	40012300 	.word	0x40012300
 8002d1c:	40012000 	.word	0x40012000
 8002d20:	10000012 	.word	0x10000012
 8002d24:	20000090 	.word	0x20000090
 8002d28:	431bde83 	.word	0x431bde83

08002d2c <ADC_Init>:
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	4b79      	ldr	r3, [pc, #484]	; (8002f1c <ADC_Init+0x1f0>)
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	021a      	lsls	r2, r3, #8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6899      	ldr	r1, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	609a      	str	r2, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	4a58      	ldr	r2, [pc, #352]	; (8002f20 <ADC_Init+0x1f4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d022      	beq.n	8002e0a <ADC_Init+0xde>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6899      	ldr	r1, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002df4:	609a      	str	r2, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6899      	ldr	r1, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	e00f      	b.n	8002e2a <ADC_Init+0xfe>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e18:	609a      	str	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e28:	609a      	str	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0202 	bic.w	r2, r2, #2
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6899      	ldr	r1, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	7e1b      	ldrb	r3, [r3, #24]
 8002e44:	005a      	lsls	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01b      	beq.n	8002e90 <ADC_Init+0x164>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	3b01      	subs	r3, #1
 8002e84:	035a      	lsls	r2, r3, #13
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	e007      	b.n	8002ea0 <ADC_Init+0x174>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002eae:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	051a      	lsls	r2, r3, #20
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6899      	ldr	r1, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ee2:	025a      	lsls	r2, r3, #9
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6899      	ldr	r1, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	029a      	lsls	r2, r3, #10
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	40012300 	.word	0x40012300
 8002f20:	0f000001 	.word	0x0f000001

08002f24 <HAL_ADCEx_InjectedConvCpltCallback>:
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <__NVIC_SetPriorityGrouping>:
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <__NVIC_SetPriorityGrouping+0x44>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f54:	4013      	ands	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	021a      	lsls	r2, r3, #8
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <__NVIC_SetPriorityGrouping+0x44>)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	60d3      	str	r3, [r2, #12]
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <__NVIC_GetPriorityGrouping>:
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <__NVIC_GetPriorityGrouping+0x18>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	4618      	mov	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <__NVIC_EnableIRQ>:
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	db0b      	blt.n	8002fc6 <__NVIC_EnableIRQ+0x2a>
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	f003 021f 	and.w	r2, r3, #31
 8002fb4:	4907      	ldr	r1, [pc, #28]	; (8002fd4 <__NVIC_EnableIRQ+0x38>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000e100 	.word	0xe000e100

08002fd8 <__NVIC_SetPriority>:
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	6039      	str	r1, [r7, #0]
 8002fe2:	71fb      	strb	r3, [r7, #7]
 8002fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	db0a      	blt.n	8003002 <__NVIC_SetPriority+0x2a>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	490c      	ldr	r1, [pc, #48]	; (8003024 <__NVIC_SetPriority+0x4c>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	0112      	lsls	r2, r2, #4
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003000:	e00a      	b.n	8003018 <__NVIC_SetPriority+0x40>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4908      	ldr	r1, [pc, #32]	; (8003028 <__NVIC_SetPriority+0x50>)
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	3b04      	subs	r3, #4
 8003010:	0112      	lsls	r2, r2, #4
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	440b      	add	r3, r1
 8003016:	761a      	strb	r2, [r3, #24]
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000e100 	.word	0xe000e100
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <NVIC_EncodePriority>:
 800302c:	b480      	push	{r7}
 800302e:	b089      	sub	sp, #36	; 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	61fb      	str	r3, [r7, #28]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f1c3 0307 	rsb	r3, r3, #7
 8003046:	2b04      	cmp	r3, #4
 8003048:	bf28      	it	cs
 800304a:	2304      	movcs	r3, #4
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3304      	adds	r3, #4
 8003052:	2b06      	cmp	r3, #6
 8003054:	d902      	bls.n	800305c <NVIC_EncodePriority+0x30>
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3b03      	subs	r3, #3
 800305a:	e000      	b.n	800305e <NVIC_EncodePriority+0x32>
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	f04f 32ff 	mov.w	r2, #4294967295
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43da      	mvns	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	401a      	ands	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	409a      	lsls	r2, r3
 8003074:	f04f 31ff 	mov.w	r1, #4294967295
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	fa01 f303 	lsl.w	r3, r1, r3
 800307e:	43d9      	mvns	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	400b      	ands	r3, r1
 8003084:	4313      	orrs	r3, r2
 8003086:	4618      	mov	r0, r3
 8003088:	3724      	adds	r7, #36	; 0x24
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <SysTick_Config>:
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030a4:	d301      	bcc.n	80030aa <SysTick_Config+0x16>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e00f      	b.n	80030ca <SysTick_Config+0x36>
 80030aa:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <SysTick_Config+0x40>)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	6053      	str	r3, [r2, #4]
 80030b2:	210f      	movs	r1, #15
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295
 80030b8:	f7ff ff8e 	bl	8002fd8 <__NVIC_SetPriority>
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <SysTick_Config+0x40>)
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
 80030c2:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <SysTick_Config+0x40>)
 80030c4:	2207      	movs	r2, #7
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	2300      	movs	r3, #0
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	e000e010 	.word	0xe000e010

080030d8 <HAL_NVIC_SetPriorityGrouping>:
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ff29 	bl	8002f38 <__NVIC_SetPriorityGrouping>
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_NVIC_SetPriority>:
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b086      	sub	sp, #24
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	4603      	mov	r3, r0
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	73fb      	strb	r3, [r7, #15]
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	f7ff ff3e 	bl	8002f80 <__NVIC_GetPriorityGrouping>
 8003104:	6178      	str	r0, [r7, #20]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	6978      	ldr	r0, [r7, #20]
 800310c:	f7ff ff8e 	bl	800302c <NVIC_EncodePriority>
 8003110:	4602      	mov	r2, r0
 8003112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003116:	4611      	mov	r1, r2
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff ff5d 	bl	8002fd8 <__NVIC_SetPriority>
 800311e:	bf00      	nop
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_NVIC_EnableIRQ>:
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	4603      	mov	r3, r0
 800312e:	71fb      	strb	r3, [r7, #7]
 8003130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ff31 	bl	8002f9c <__NVIC_EnableIRQ>
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_SYSTICK_Config>:
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ffa2 	bl	8003094 <SysTick_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_DMA_Abort_IT>:
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d004      	beq.n	8003178 <HAL_DMA_Abort_IT+0x1e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	655a      	str	r2, [r3, #84]	; 0x54
 8003174:	2301      	movs	r3, #1
 8003176:	e00c      	b.n	8003192 <HAL_DMA_Abort_IT+0x38>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2205      	movs	r2, #5
 800317c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	2300      	movs	r3, #0
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_DMA_GetState>:
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <HAL_GPIO_Init>:
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	2300      	movs	r3, #0
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	e159      	b.n	800348c <HAL_GPIO_Init+0x2d0>
 80031d8:	2201      	movs	r2, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4013      	ands	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	f040 8148 	bne.w	8003486 <HAL_GPIO_Init+0x2ca>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d005      	beq.n	800320e <HAL_GPIO_Init+0x52>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d130      	bne.n	8003270 <HAL_GPIO_Init+0xb4>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	61bb      	str	r3, [r7, #24]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	2203      	movs	r2, #3
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	609a      	str	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	2201      	movs	r2, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 0201 	and.w	r2, r3, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b03      	cmp	r3, #3
 800327a:	d017      	beq.n	80032ac <HAL_GPIO_Init+0xf0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	2203      	movs	r2, #3
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	60da      	str	r2, [r3, #12]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d123      	bne.n	8003300 <HAL_GPIO_Init+0x144>
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	08da      	lsrs	r2, r3, #3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3208      	adds	r2, #8
 80032c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	220f      	movs	r2, #15
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	08da      	lsrs	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3208      	adds	r2, #8
 80032fa:	69b9      	ldr	r1, [r7, #24]
 80032fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	2203      	movs	r2, #3
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0203 	and.w	r2, r3, #3
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80a2 	beq.w	8003486 <HAL_GPIO_Init+0x2ca>
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	4b57      	ldr	r3, [pc, #348]	; (80034a4 <HAL_GPIO_Init+0x2e8>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	4a56      	ldr	r2, [pc, #344]	; (80034a4 <HAL_GPIO_Init+0x2e8>)
 800334c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003350:	6453      	str	r3, [r2, #68]	; 0x44
 8003352:	4b54      	ldr	r3, [pc, #336]	; (80034a4 <HAL_GPIO_Init+0x2e8>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4a52      	ldr	r2, [pc, #328]	; (80034a8 <HAL_GPIO_Init+0x2ec>)
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	089b      	lsrs	r3, r3, #2
 8003364:	3302      	adds	r3, #2
 8003366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	220f      	movs	r2, #15
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4013      	ands	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a49      	ldr	r2, [pc, #292]	; (80034ac <HAL_GPIO_Init+0x2f0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d019      	beq.n	80033be <HAL_GPIO_Init+0x202>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a48      	ldr	r2, [pc, #288]	; (80034b0 <HAL_GPIO_Init+0x2f4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d013      	beq.n	80033ba <HAL_GPIO_Init+0x1fe>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a47      	ldr	r2, [pc, #284]	; (80034b4 <HAL_GPIO_Init+0x2f8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00d      	beq.n	80033b6 <HAL_GPIO_Init+0x1fa>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a46      	ldr	r2, [pc, #280]	; (80034b8 <HAL_GPIO_Init+0x2fc>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d007      	beq.n	80033b2 <HAL_GPIO_Init+0x1f6>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a45      	ldr	r2, [pc, #276]	; (80034bc <HAL_GPIO_Init+0x300>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d101      	bne.n	80033ae <HAL_GPIO_Init+0x1f2>
 80033aa:	2304      	movs	r3, #4
 80033ac:	e008      	b.n	80033c0 <HAL_GPIO_Init+0x204>
 80033ae:	2307      	movs	r3, #7
 80033b0:	e006      	b.n	80033c0 <HAL_GPIO_Init+0x204>
 80033b2:	2303      	movs	r3, #3
 80033b4:	e004      	b.n	80033c0 <HAL_GPIO_Init+0x204>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e002      	b.n	80033c0 <HAL_GPIO_Init+0x204>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <HAL_GPIO_Init+0x204>
 80033be:	2300      	movs	r3, #0
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	f002 0203 	and.w	r2, r2, #3
 80033c6:	0092      	lsls	r2, r2, #2
 80033c8:	4093      	lsls	r3, r2
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	4935      	ldr	r1, [pc, #212]	; (80034a8 <HAL_GPIO_Init+0x2ec>)
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	089b      	lsrs	r3, r3, #2
 80033d6:	3302      	adds	r3, #2
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80033de:	4b38      	ldr	r3, [pc, #224]	; (80034c0 <HAL_GPIO_Init+0x304>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_Init+0x246>
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	4a2f      	ldr	r2, [pc, #188]	; (80034c0 <HAL_GPIO_Init+0x304>)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	6093      	str	r3, [r2, #8]
 8003408:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <HAL_GPIO_Init+0x304>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_GPIO_Init+0x270>
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	4a24      	ldr	r2, [pc, #144]	; (80034c0 <HAL_GPIO_Init+0x304>)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	60d3      	str	r3, [r2, #12]
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <HAL_GPIO_Init+0x304>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	43db      	mvns	r3, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x29a>
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	4a1a      	ldr	r2, [pc, #104]	; (80034c0 <HAL_GPIO_Init+0x304>)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	6053      	str	r3, [r2, #4]
 800345c:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <HAL_GPIO_Init+0x304>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x2c4>
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
 8003480:	4a0f      	ldr	r2, [pc, #60]	; (80034c0 <HAL_GPIO_Init+0x304>)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3301      	adds	r3, #1
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b0f      	cmp	r3, #15
 8003490:	f67f aea2 	bls.w	80031d8 <HAL_GPIO_Init+0x1c>
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	3724      	adds	r7, #36	; 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40013800 	.word	0x40013800
 80034ac:	40020000 	.word	0x40020000
 80034b0:	40020400 	.word	0x40020400
 80034b4:	40020800 	.word	0x40020800
 80034b8:	40020c00 	.word	0x40020c00
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40013c00 	.word	0x40013c00

080034c4 <HAL_GPIO_WritePin>:
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	807b      	strh	r3, [r7, #2]
 80034d0:	4613      	mov	r3, r2
 80034d2:	707b      	strb	r3, [r7, #1]
 80034d4:	787b      	ldrb	r3, [r7, #1]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_WritePin+0x1e>
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	619a      	str	r2, [r3, #24]
 80034e0:	e003      	b.n	80034ea <HAL_GPIO_WritePin+0x26>
 80034e2:	887b      	ldrh	r3, [r7, #2]
 80034e4:	041a      	lsls	r2, r3, #16
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	619a      	str	r2, [r3, #24]
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <HAL_GPIO_EXTI_IRQHandler>:
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	80fb      	strh	r3, [r7, #6]
 8003502:	4b08      	ldr	r3, [pc, #32]	; (8003524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d006      	beq.n	800351c <HAL_GPIO_EXTI_IRQHandler+0x24>
 800350e:	4a05      	ldr	r2, [pc, #20]	; (8003524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	6153      	str	r3, [r2, #20]
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f806 	bl	8003528 <HAL_GPIO_EXTI_Callback>
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40013c00 	.word	0x40013c00

08003528 <HAL_GPIO_EXTI_Callback>:
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	80fb      	strh	r3, [r7, #6]
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <HAL_I2C_Init>:
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_I2C_Init+0x12>
 800354e:	2301      	movs	r3, #1
 8003550:	e12b      	b.n	80037aa <HAL_I2C_Init+0x26a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_I2C_Init+0x2c>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fe f8f6 	bl	8001758 <HAL_I2C_MspInit>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2224      	movs	r2, #36	; 0x24
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	f002 fae6 	bl	8005b74 <HAL_RCC_GetPCLK1Freq>
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4a81      	ldr	r2, [pc, #516]	; (80037b4 <HAL_I2C_Init+0x274>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d807      	bhi.n	80035c4 <HAL_I2C_Init+0x84>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a80      	ldr	r2, [pc, #512]	; (80037b8 <HAL_I2C_Init+0x278>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	bf94      	ite	ls
 80035bc:	2301      	movls	r3, #1
 80035be:	2300      	movhi	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e006      	b.n	80035d2 <HAL_I2C_Init+0x92>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4a7d      	ldr	r2, [pc, #500]	; (80037bc <HAL_I2C_Init+0x27c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	bf94      	ite	ls
 80035cc:	2301      	movls	r3, #1
 80035ce:	2300      	movhi	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_I2C_Init+0x9a>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0e7      	b.n	80037aa <HAL_I2C_Init+0x26a>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4a78      	ldr	r2, [pc, #480]	; (80037c0 <HAL_I2C_Init+0x280>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	0c9b      	lsrs	r3, r3, #18
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4a6a      	ldr	r2, [pc, #424]	; (80037b4 <HAL_I2C_Init+0x274>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d802      	bhi.n	8003614 <HAL_I2C_Init+0xd4>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3301      	adds	r3, #1
 8003612:	e009      	b.n	8003628 <HAL_I2C_Init+0xe8>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	4a69      	ldr	r2, [pc, #420]	; (80037c4 <HAL_I2C_Init+0x284>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	099b      	lsrs	r3, r3, #6
 8003626:	3301      	adds	r3, #1
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	430b      	orrs	r3, r1
 800362e:	6213      	str	r3, [r2, #32]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800363a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	495c      	ldr	r1, [pc, #368]	; (80037b4 <HAL_I2C_Init+0x274>)
 8003644:	428b      	cmp	r3, r1
 8003646:	d819      	bhi.n	800367c <HAL_I2C_Init+0x13c>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1e59      	subs	r1, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fbb1 f3f3 	udiv	r3, r1, r3
 8003656:	1c59      	adds	r1, r3, #1
 8003658:	f640 73fc 	movw	r3, #4092	; 0xffc
 800365c:	400b      	ands	r3, r1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_I2C_Init+0x138>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1e59      	subs	r1, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003670:	3301      	adds	r3, #1
 8003672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003676:	e051      	b.n	800371c <HAL_I2C_Init+0x1dc>
 8003678:	2304      	movs	r3, #4
 800367a:	e04f      	b.n	800371c <HAL_I2C_Init+0x1dc>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d111      	bne.n	80036a8 <HAL_I2C_Init+0x168>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1e58      	subs	r0, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	440b      	add	r3, r1
 8003692:	fbb0 f3f3 	udiv	r3, r0, r3
 8003696:	3301      	adds	r3, #1
 8003698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e012      	b.n	80036ce <HAL_I2C_Init+0x18e>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1e58      	subs	r0, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	0099      	lsls	r1, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80036be:	3301      	adds	r3, #1
 80036c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_I2C_Init+0x196>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e022      	b.n	800371c <HAL_I2C_Init+0x1dc>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10e      	bne.n	80036fc <HAL_I2C_Init+0x1bc>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1e58      	subs	r0, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6859      	ldr	r1, [r3, #4]
 80036e6:	460b      	mov	r3, r1
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	440b      	add	r3, r1
 80036ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f0:	3301      	adds	r3, #1
 80036f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036fa:	e00f      	b.n	800371c <HAL_I2C_Init+0x1dc>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1e58      	subs	r0, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	0099      	lsls	r1, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003712:	3301      	adds	r3, #1
 8003714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	6809      	ldr	r1, [r1, #0]
 8003720:	4313      	orrs	r3, r2
 8003722:	61cb      	str	r3, [r1, #28]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800374a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6911      	ldr	r1, [r2, #16]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68d2      	ldr	r2, [r2, #12]
 8003756:	4311      	orrs	r1, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	430b      	orrs	r3, r1
 800375e:	6093      	str	r3, [r2, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	60da      	str	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037a8:	2300      	movs	r3, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	000186a0 	.word	0x000186a0
 80037b8:	001e847f 	.word	0x001e847f
 80037bc:	003d08ff 	.word	0x003d08ff
 80037c0:	431bde83 	.word	0x431bde83
 80037c4:	10624dd3 	.word	0x10624dd3

080037c8 <HAL_I2C_Slave_Seq_Transmit_IT>:
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	80fb      	strh	r3, [r7, #6]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037e4:	2b28      	cmp	r3, #40	; 0x28
 80037e6:	d15b      	bne.n	80038a0 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e054      	b.n	80038a2 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8003802:	2302      	movs	r3, #2
 8003804:	e04d      	b.n	80038a2 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d007      	beq.n	800382c <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2229      	movs	r2, #41	; 0x29
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	625a      	str	r2, [r3, #36]	; 0x24
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	851a      	strh	r2, [r3, #40]	; 0x28
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	62da      	str	r2, [r3, #44]	; 0x2c
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800389a:	605a      	str	r2, [r3, #4]
 800389c:	2300      	movs	r3, #0
 800389e:	e000      	b.n	80038a2 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 80038a0:	2302      	movs	r3, #2
 80038a2:	4618      	mov	r0, r3
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_I2C_Slave_Seq_Receive_IT>:
 80038ae:	b480      	push	{r7}
 80038b0:	b087      	sub	sp, #28
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	4613      	mov	r3, r2
 80038bc:	80fb      	strh	r3, [r7, #6]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038ca:	2b28      	cmp	r3, #40	; 0x28
 80038cc:	d15b      	bne.n	8003986 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_I2C_Slave_Seq_Receive_IT+0x30>
 80038da:	2301      	movs	r3, #1
 80038dc:	e054      	b.n	8003988 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e04d      	b.n	8003988 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d007      	beq.n	8003912 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	222a      	movs	r2, #42	; 0x2a
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	641a      	str	r2, [r3, #64]	; 0x40
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	88fa      	ldrh	r2, [r7, #6]
 8003942:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	851a      	strh	r2, [r3, #40]	; 0x28
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	62da      	str	r2, [r3, #44]	; 0x2c
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	2300      	movs	r3, #0
 8003984:	e000      	b.n	8003988 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8003986:	2302      	movs	r3, #2
 8003988:	4618      	mov	r0, r3
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_I2C_EnableListen_IT>:
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d124      	bne.n	80039f2 <HAL_I2C_EnableListen_IT+0x5e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2228      	movs	r2, #40	; 0x28
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d007      	beq.n	80039ce <HAL_I2C_EnableListen_IT+0x3a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0201 	orr.w	r2, r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	2300      	movs	r3, #0
 80039f0:	e000      	b.n	80039f4 <HAL_I2C_EnableListen_IT+0x60>
 80039f2:	2302      	movs	r3, #2
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_I2C_EV_IRQHandler>:
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a28:	73bb      	strb	r3, [r7, #14]
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d003      	beq.n	8003a38 <HAL_I2C_EV_IRQHandler+0x38>
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b40      	cmp	r3, #64	; 0x40
 8003a34:	f040 80b1 	bne.w	8003b9a <HAL_I2C_EV_IRQHandler+0x19a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10d      	bne.n	8003a6e <HAL_I2C_EV_IRQHandler+0x6e>
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a58:	d003      	beq.n	8003a62 <HAL_I2C_EV_IRQHandler+0x62>
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a60:	d101      	bne.n	8003a66 <HAL_I2C_EV_IRQHandler+0x66>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_I2C_EV_IRQHandler+0x68>
 8003a66:	2300      	movs	r3, #0
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	f000 8114 	beq.w	8003c96 <HAL_I2C_EV_IRQHandler+0x296>
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00b      	beq.n	8003a90 <HAL_I2C_EV_IRQHandler+0x90>
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d006      	beq.n	8003a90 <HAL_I2C_EV_IRQHandler+0x90>
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f001 fc2a 	bl	80052dc <I2C_ConvertOtherXferOptions>
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fd34 	bl	80044f6 <I2C_Master_SB>
 8003a8e:	e083      	b.n	8003b98 <HAL_I2C_EV_IRQHandler+0x198>
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d008      	beq.n	8003aac <HAL_I2C_EV_IRQHandler+0xac>
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_I2C_EV_IRQHandler+0xac>
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fdac 	bl	8004602 <I2C_Master_ADD10>
 8003aaa:	e075      	b.n	8003b98 <HAL_I2C_EV_IRQHandler+0x198>
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_I2C_EV_IRQHandler+0xc8>
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_I2C_EV_IRQHandler+0xc8>
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fdc8 	bl	8004656 <I2C_Master_ADDR>
 8003ac6:	e067      	b.n	8003b98 <HAL_I2C_EV_IRQHandler+0x198>
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d036      	beq.n	8003b40 <HAL_I2C_EV_IRQHandler+0x140>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae0:	f000 80db 	beq.w	8003c9a <HAL_I2C_EV_IRQHandler+0x29a>
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00d      	beq.n	8003b0a <HAL_I2C_EV_IRQHandler+0x10a>
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_I2C_EV_IRQHandler+0x10a>
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d103      	bne.n	8003b0a <HAL_I2C_EV_IRQHandler+0x10a>
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f9ac 	bl	8003e60 <I2C_MasterTransmit_TXE>
 8003b08:	e046      	b.n	8003b98 <HAL_I2C_EV_IRQHandler+0x198>
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80c2 	beq.w	8003c9a <HAL_I2C_EV_IRQHandler+0x29a>
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80bc 	beq.w	8003c9a <HAL_I2C_EV_IRQHandler+0x29a>
 8003b22:	7bbb      	ldrb	r3, [r7, #14]
 8003b24:	2b21      	cmp	r3, #33	; 0x21
 8003b26:	d103      	bne.n	8003b30 <HAL_I2C_EV_IRQHandler+0x130>
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 fa35 	bl	8003f98 <I2C_MasterTransmit_BTF>
 8003b2e:	e0b4      	b.n	8003c9a <HAL_I2C_EV_IRQHandler+0x29a>
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
 8003b32:	2b40      	cmp	r3, #64	; 0x40
 8003b34:	f040 80b1 	bne.w	8003c9a <HAL_I2C_EV_IRQHandler+0x29a>
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 faa3 	bl	8004084 <I2C_MemoryTransmit_TXE_BTF>
 8003b3e:	e0ac      	b.n	8003c9a <HAL_I2C_EV_IRQHandler+0x29a>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b4e:	f000 80a4 	beq.w	8003c9a <HAL_I2C_EV_IRQHandler+0x29a>
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00d      	beq.n	8003b78 <HAL_I2C_EV_IRQHandler+0x178>
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <HAL_I2C_EV_IRQHandler+0x178>
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d103      	bne.n	8003b78 <HAL_I2C_EV_IRQHandler+0x178>
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fb1b 	bl	80041ac <I2C_MasterReceive_RXNE>
 8003b76:	e00f      	b.n	8003b98 <HAL_I2C_EV_IRQHandler+0x198>
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 808b 	beq.w	8003c9a <HAL_I2C_EV_IRQHandler+0x29a>
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8085 	beq.w	8003c9a <HAL_I2C_EV_IRQHandler+0x29a>
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fbc6 	bl	8004322 <I2C_MasterReceive_BTF>
 8003b96:	e080      	b.n	8003c9a <HAL_I2C_EV_IRQHandler+0x29a>
 8003b98:	e07f      	b.n	8003c9a <HAL_I2C_EV_IRQHandler+0x29a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <HAL_I2C_EV_IRQHandler+0x1ac>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	e007      	b.n	8003bbc <HAL_I2C_EV_IRQHandler+0x1bc>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	61fb      	str	r3, [r7, #28]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d011      	beq.n	8003bea <HAL_I2C_EV_IRQHandler+0x1ea>
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00c      	beq.n	8003bea <HAL_I2C_EV_IRQHandler+0x1ea>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_I2C_EV_IRQHandler+0x1e0>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	61bb      	str	r3, [r7, #24]
 8003be0:	69b9      	ldr	r1, [r7, #24]
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 ff86 	bl	8004af4 <I2C_Slave_ADDR>
 8003be8:	e05a      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_I2C_EV_IRQHandler+0x206>
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_I2C_EV_IRQHandler+0x206>
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 ffc0 	bl	8004b84 <I2C_Slave_STOPF>
 8003c04:	e04c      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003c06:	7bbb      	ldrb	r3, [r7, #14]
 8003c08:	2b21      	cmp	r3, #33	; 0x21
 8003c0a:	d002      	beq.n	8003c12 <HAL_I2C_EV_IRQHandler+0x212>
 8003c0c:	7bbb      	ldrb	r3, [r7, #14]
 8003c0e:	2b29      	cmp	r3, #41	; 0x29
 8003c10:	d120      	bne.n	8003c54 <HAL_I2C_EV_IRQHandler+0x254>
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00d      	beq.n	8003c38 <HAL_I2C_EV_IRQHandler+0x238>
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_I2C_EV_IRQHandler+0x238>
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d103      	bne.n	8003c38 <HAL_I2C_EV_IRQHandler+0x238>
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fea1 	bl	8004978 <I2C_SlaveTransmit_TXE>
 8003c36:	e032      	b.n	8003c9e <HAL_I2C_EV_IRQHandler+0x29e>
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d02d      	beq.n	8003c9e <HAL_I2C_EV_IRQHandler+0x29e>
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d028      	beq.n	8003c9e <HAL_I2C_EV_IRQHandler+0x29e>
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fed0 	bl	80049f2 <I2C_SlaveTransmit_BTF>
 8003c52:	e024      	b.n	8003c9e <HAL_I2C_EV_IRQHandler+0x29e>
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00d      	beq.n	8003c7a <HAL_I2C_EV_IRQHandler+0x27a>
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_I2C_EV_IRQHandler+0x27a>
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d103      	bne.n	8003c7a <HAL_I2C_EV_IRQHandler+0x27a>
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fede 	bl	8004a34 <I2C_SlaveReceive_RXNE>
 8003c78:	e012      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00d      	beq.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d008      	beq.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 ff0e 	bl	8004ab0 <I2C_SlaveReceive_BTF>
 8003c94:	e004      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003c96:	bf00      	nop
 8003c98:	e002      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003c9a:	bf00      	nop
 8003c9c:	e000      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003c9e:	bf00      	nop
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_I2C_ER_IRQHandler>:
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b08a      	sub	sp, #40	; 0x28
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	623b      	str	r3, [r7, #32]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cc8:	76fb      	strb	r3, [r7, #27]
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00d      	beq.n	8003cf0 <HAL_I2C_ER_IRQHandler+0x4a>
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <HAL_I2C_ER_IRQHandler+0x4a>
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cee:	615a      	str	r2, [r3, #20]
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00d      	beq.n	8003d16 <HAL_I2C_ER_IRQHandler+0x70>
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_I2C_ER_IRQHandler+0x70>
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	f043 0302 	orr.w	r3, r3, #2
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003d14:	615a      	str	r2, [r3, #20]
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d03e      	beq.n	8003d9e <HAL_I2C_ER_IRQHandler+0xf8>
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d039      	beq.n	8003d9e <HAL_I2C_ER_IRQHandler+0xf8>
 8003d2a:	7efb      	ldrb	r3, [r7, #27]
 8003d2c:	76bb      	strb	r3, [r7, #26]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3c:	74fb      	strb	r3, [r7, #19]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	7ebb      	ldrb	r3, [r7, #26]
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	d112      	bne.n	8003d70 <HAL_I2C_ER_IRQHandler+0xca>
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10f      	bne.n	8003d70 <HAL_I2C_ER_IRQHandler+0xca>
 8003d50:	7cfb      	ldrb	r3, [r7, #19]
 8003d52:	2b21      	cmp	r3, #33	; 0x21
 8003d54:	d008      	beq.n	8003d68 <HAL_I2C_ER_IRQHandler+0xc2>
 8003d56:	7cfb      	ldrb	r3, [r7, #19]
 8003d58:	2b29      	cmp	r3, #41	; 0x29
 8003d5a:	d005      	beq.n	8003d68 <HAL_I2C_ER_IRQHandler+0xc2>
 8003d5c:	7cfb      	ldrb	r3, [r7, #19]
 8003d5e:	2b28      	cmp	r3, #40	; 0x28
 8003d60:	d106      	bne.n	8003d70 <HAL_I2C_ER_IRQHandler+0xca>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b21      	cmp	r3, #33	; 0x21
 8003d66:	d103      	bne.n	8003d70 <HAL_I2C_ER_IRQHandler+0xca>
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f001 f83b 	bl	8004de4 <I2C_Slave_AF>
 8003d6e:	e016      	b.n	8003d9e <HAL_I2C_ER_IRQHandler+0xf8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d78:	615a      	str	r2, [r3, #20]
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	f043 0304 	orr.w	r3, r3, #4
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
 8003d82:	7efb      	ldrb	r3, [r7, #27]
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d002      	beq.n	8003d8e <HAL_I2C_ER_IRQHandler+0xe8>
 8003d88:	7efb      	ldrb	r3, [r7, #27]
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d107      	bne.n	8003d9e <HAL_I2C_ER_IRQHandler+0xf8>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00d      	beq.n	8003dc4 <HAL_I2C_ER_IRQHandler+0x11e>
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <HAL_I2C_ER_IRQHandler+0x11e>
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	f043 0308 	orr.w	r3, r3, #8
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003dc2:	615a      	str	r2, [r3, #20]
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_I2C_ER_IRQHandler+0x136>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f001 f874 	bl	8004ec4 <I2C_ITError>
 8003ddc:	bf00      	nop
 8003dde:	3728      	adds	r7, #40	; 0x28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_I2C_MasterTxCpltCallback>:
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_I2C_MasterRxCpltCallback>:
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_I2C_MemTxCpltCallback>:
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_I2C_MemRxCpltCallback>:
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_I2C_AbortCpltCallback>:
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_I2C_GetError>:
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <I2C_MasterTransmit_TXE>:
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6e:	73fb      	strb	r3, [r7, #15]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e76:	73bb      	strb	r3, [r7, #14]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d150      	bne.n	8003f28 <I2C_MasterTransmit_TXE+0xc8>
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	2b21      	cmp	r3, #33	; 0x21
 8003e8a:	d14d      	bne.n	8003f28 <I2C_MasterTransmit_TXE+0xc8>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d01d      	beq.n	8003ece <I2C_MasterTransmit_TXE+0x6e>
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d01a      	beq.n	8003ece <I2C_MasterTransmit_TXE+0x6e>
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e9e:	d016      	beq.n	8003ece <I2C_MasterTransmit_TXE+0x6e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003eae:	605a      	str	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2211      	movs	r2, #17
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff ff8c 	bl	8003de4 <HAL_I2C_MasterTxCpltCallback>
 8003ecc:	e060      	b.n	8003f90 <I2C_MasterTransmit_TXE+0x130>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b40      	cmp	r3, #64	; 0x40
 8003f06:	d107      	bne.n	8003f18 <I2C_MasterTransmit_TXE+0xb8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ff7b 	bl	8003e0c <HAL_I2C_MemTxCpltCallback>
 8003f16:	e03b      	b.n	8003f90 <I2C_MasterTransmit_TXE+0x130>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff5f 	bl	8003de4 <HAL_I2C_MasterTxCpltCallback>
 8003f26:	e033      	b.n	8003f90 <I2C_MasterTransmit_TXE+0x130>
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b21      	cmp	r3, #33	; 0x21
 8003f2c:	d005      	beq.n	8003f3a <I2C_MasterTransmit_TXE+0xda>
 8003f2e:	7bbb      	ldrb	r3, [r7, #14]
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d12d      	bne.n	8003f90 <I2C_MasterTransmit_TXE+0x130>
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	2b22      	cmp	r3, #34	; 0x22
 8003f38:	d12a      	bne.n	8003f90 <I2C_MasterTransmit_TXE+0x130>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d108      	bne.n	8003f56 <I2C_MasterTransmit_TXE+0xf6>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	e01c      	b.n	8003f90 <I2C_MasterTransmit_TXE+0x130>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b40      	cmp	r3, #64	; 0x40
 8003f60:	d103      	bne.n	8003f6a <I2C_MasterTransmit_TXE+0x10a>
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f88e 	bl	8004084 <I2C_MemoryTransmit_TXE_BTF>
 8003f68:	e012      	b.n	8003f90 <I2C_MasterTransmit_TXE+0x130>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	781a      	ldrb	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	611a      	str	r2, [r3, #16]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	625a      	str	r2, [r3, #36]	; 0x24
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f8e:	e7ff      	b.n	8003f90 <I2C_MasterTransmit_TXE+0x130>
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <I2C_MasterTransmit_BTF>:
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b21      	cmp	r3, #33	; 0x21
 8003fb0:	d164      	bne.n	800407c <I2C_MasterTransmit_BTF+0xe4>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d012      	beq.n	8003fe2 <I2C_MasterTransmit_BTF+0x4a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fe0:	e04c      	b.n	800407c <I2C_MasterTransmit_BTF+0xe4>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d01d      	beq.n	8004024 <I2C_MasterTransmit_BTF+0x8c>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d01a      	beq.n	8004024 <I2C_MasterTransmit_BTF+0x8c>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ff4:	d016      	beq.n	8004024 <I2C_MasterTransmit_BTF+0x8c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004004:	605a      	str	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2211      	movs	r2, #17
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff fee1 	bl	8003de4 <HAL_I2C_MasterTxCpltCallback>
 8004022:	e02b      	b.n	800407c <I2C_MasterTransmit_BTF+0xe4>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004032:	605a      	str	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	631a      	str	r2, [r3, #48]	; 0x30
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	d107      	bne.n	800406e <I2C_MasterTransmit_BTF+0xd6>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff fed0 	bl	8003e0c <HAL_I2C_MemTxCpltCallback>
 800406c:	e006      	b.n	800407c <I2C_MasterTransmit_BTF+0xe4>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff feb4 	bl	8003de4 <HAL_I2C_MasterTxCpltCallback>
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <I2C_MemoryTransmit_TXE_BTF>:
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004092:	73fb      	strb	r3, [r7, #15]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004098:	2b00      	cmp	r3, #0
 800409a:	d11d      	bne.n	80040d8 <I2C_MemoryTransmit_TXE_BTF+0x54>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d10b      	bne.n	80040bc <I2C_MemoryTransmit_TXE_BTF+0x38>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	611a      	str	r2, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b4:	1c9a      	adds	r2, r3, #2
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	651a      	str	r2, [r3, #80]	; 0x50
 80040ba:	e073      	b.n	80041a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	121b      	asrs	r3, r3, #8
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	611a      	str	r2, [r3, #16]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	651a      	str	r2, [r3, #80]	; 0x50
 80040d6:	e065      	b.n	80041a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d10b      	bne.n	80040f8 <I2C_MemoryTransmit_TXE_BTF+0x74>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	611a      	str	r2, [r3, #16]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	651a      	str	r2, [r3, #80]	; 0x50
 80040f6:	e055      	b.n	80041a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d151      	bne.n	80041a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	2b22      	cmp	r3, #34	; 0x22
 8004104:	d10d      	bne.n	8004122 <I2C_MemoryTransmit_TXE_BTF+0x9e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	651a      	str	r2, [r3, #80]	; 0x50
 8004120:	e040      	b.n	80041a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d015      	beq.n	8004158 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b21      	cmp	r3, #33	; 0x21
 8004130:	d112      	bne.n	8004158 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	781a      	ldrb	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	611a      	str	r2, [r3, #16]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	625a      	str	r2, [r3, #36]	; 0x24
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004156:	e025      	b.n	80041a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d120      	bne.n	80041a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	2b21      	cmp	r3, #33	; 0x21
 8004166:	d11d      	bne.n	80041a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004176:	605a      	str	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2220      	movs	r2, #32
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff fe34 	bl	8003e0c <HAL_I2C_MemTxCpltCallback>
 80041a4:	bf00      	nop
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <I2C_MasterReceive_RXNE>:
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b22      	cmp	r3, #34	; 0x22
 80041be:	f040 80ac 	bne.w	800431a <I2C_MasterReceive_RXNE+0x16e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d921      	bls.n	8004214 <I2C_MasterReceive_RXNE+0x68>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	625a      	str	r2, [r3, #36]	; 0x24
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	f040 808c 	bne.w	800431a <I2C_MasterReceive_RXNE+0x16e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004210:	605a      	str	r2, [r3, #4]
 8004212:	e082      	b.n	800431a <I2C_MasterReceive_RXNE+0x16e>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	2b02      	cmp	r3, #2
 800421a:	d075      	beq.n	8004308 <I2C_MasterReceive_RXNE+0x15c>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d002      	beq.n	8004228 <I2C_MasterReceive_RXNE+0x7c>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d16f      	bne.n	8004308 <I2C_MasterReceive_RXNE+0x15c>
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f001 f825 	bl	8005278 <I2C_WaitOnSTOPRequestThroughIT>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d142      	bne.n	80042ba <I2C_MasterReceive_RXNE+0x10e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004252:	605a      	str	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	625a      	str	r2, [r3, #36]	; 0x24
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b40      	cmp	r3, #64	; 0x40
 800428c:	d10a      	bne.n	80042a4 <I2C_MasterReceive_RXNE+0xf8>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	; 0x30
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff fdbf 	bl	8003e20 <HAL_I2C_MemRxCpltCallback>
 80042a2:	e03a      	b.n	800431a <I2C_MasterReceive_RXNE+0x16e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2212      	movs	r2, #18
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff fda0 	bl	8003df8 <HAL_I2C_MasterRxCpltCallback>
 80042b8:	e02f      	b.n	800431a <I2C_MasterReceive_RXNE+0x16e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	701a      	strb	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7fd fb5d 	bl	80019c0 <HAL_I2C_ErrorCallback>
 8004306:	e008      	b.n	800431a <I2C_MasterReceive_RXNE+0x16e>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004316:	605a      	str	r2, [r3, #4]
 8004318:	e7ff      	b.n	800431a <I2C_MasterReceive_RXNE+0x16e>
 800431a:	bf00      	nop
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <I2C_MasterReceive_BTF>:
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b04      	cmp	r3, #4
 8004338:	d11b      	bne.n	8004372 <I2C_MasterReceive_BTF+0x50>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004348:	605a      	str	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004370:	e0bd      	b.n	80044ee <I2C_MasterReceive_BTF+0x1cc>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b03      	cmp	r3, #3
 800437a:	d129      	bne.n	80043d0 <I2C_MasterReceive_BTF+0xae>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438a:	605a      	str	r2, [r3, #4]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b04      	cmp	r3, #4
 8004390:	d00a      	beq.n	80043a8 <I2C_MasterReceive_BTF+0x86>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d007      	beq.n	80043a8 <I2C_MasterReceive_BTF+0x86>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	625a      	str	r2, [r3, #36]	; 0x24
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043ce:	e08e      	b.n	80044ee <I2C_MasterReceive_BTF+0x1cc>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d176      	bne.n	80044c8 <I2C_MasterReceive_BTF+0x1a6>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d002      	beq.n	80043e6 <I2C_MasterReceive_BTF+0xc4>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d108      	bne.n	80043f8 <I2C_MasterReceive_BTF+0xd6>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	e019      	b.n	800442c <I2C_MasterReceive_BTF+0x10a>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d002      	beq.n	8004404 <I2C_MasterReceive_BTF+0xe2>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d108      	bne.n	8004416 <I2C_MasterReceive_BTF+0xf4>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	e00a      	b.n	800442c <I2C_MasterReceive_BTF+0x10a>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b10      	cmp	r3, #16
 800441a:	d007      	beq.n	800442c <I2C_MasterReceive_BTF+0x10a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	625a      	str	r2, [r3, #36]	; 0x24
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	625a      	str	r2, [r3, #36]	; 0x24
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004486:	605a      	str	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	d10a      	bne.n	80044b2 <I2C_MasterReceive_BTF+0x190>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff fcb8 	bl	8003e20 <HAL_I2C_MemRxCpltCallback>
 80044b0:	e01d      	b.n	80044ee <I2C_MasterReceive_BTF+0x1cc>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2212      	movs	r2, #18
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff fc99 	bl	8003df8 <HAL_I2C_MasterRxCpltCallback>
 80044c6:	e012      	b.n	80044ee <I2C_MasterReceive_BTF+0x1cc>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691a      	ldr	r2, [r3, #16]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	625a      	str	r2, [r3, #36]	; 0x24
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044ee:	bf00      	nop
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <I2C_Master_SB>:
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b40      	cmp	r3, #64	; 0x40
 8004508:	d117      	bne.n	800453a <I2C_Master_SB+0x44>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <I2C_Master_SB+0x30>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004522:	611a      	str	r2, [r3, #16]
 8004524:	e067      	b.n	80045f6 <I2C_Master_SB+0x100>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	b2db      	uxtb	r3, r3
 800452c:	f043 0301 	orr.w	r3, r3, #1
 8004530:	b2da      	uxtb	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	611a      	str	r2, [r3, #16]
 8004538:	e05d      	b.n	80045f6 <I2C_Master_SB+0x100>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004542:	d133      	bne.n	80045ac <I2C_Master_SB+0xb6>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b21      	cmp	r3, #33	; 0x21
 800454e:	d109      	bne.n	8004564 <I2C_Master_SB+0x6e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004554:	b2db      	uxtb	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004560:	611a      	str	r2, [r3, #16]
 8004562:	e008      	b.n	8004576 <I2C_Master_SB+0x80>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	b2da      	uxtb	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	611a      	str	r2, [r3, #16]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457a:	2b00      	cmp	r3, #0
 800457c:	d004      	beq.n	8004588 <I2C_Master_SB+0x92>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004584:	2b00      	cmp	r3, #0
 8004586:	d108      	bne.n	800459a <I2C_Master_SB+0xa4>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	2b00      	cmp	r3, #0
 800458e:	d032      	beq.n	80045f6 <I2C_Master_SB+0x100>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d02d      	beq.n	80045f6 <I2C_Master_SB+0x100>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	e024      	b.n	80045f6 <I2C_Master_SB+0x100>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10e      	bne.n	80045d2 <I2C_Master_SB+0xdc>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	11db      	asrs	r3, r3, #7
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f003 0306 	and.w	r3, r3, #6
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	f063 030f 	orn	r3, r3, #15
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	611a      	str	r2, [r3, #16]
 80045d0:	e011      	b.n	80045f6 <I2C_Master_SB+0x100>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d10d      	bne.n	80045f6 <I2C_Master_SB+0x100>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	b29b      	uxth	r3, r3
 80045e0:	11db      	asrs	r3, r3, #7
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f003 0306 	and.w	r3, r3, #6
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	f063 030e 	orn	r3, r3, #14
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	611a      	str	r2, [r3, #16]
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <I2C_Master_ADD10>:
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	b2da      	uxtb	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	611a      	str	r2, [r3, #16]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <I2C_Master_ADD10+0x26>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d108      	bne.n	800463a <I2C_Master_ADD10+0x38>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00c      	beq.n	800464a <I2C_Master_ADD10+0x48>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <I2C_Master_ADD10+0x48>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004648:	605a      	str	r2, [r3, #4]
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <I2C_Master_ADDR>:
 8004656:	b480      	push	{r7}
 8004658:	b091      	sub	sp, #68	; 0x44
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	63bb      	str	r3, [r7, #56]	; 0x38
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	637b      	str	r3, [r7, #52]	; 0x34
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b22      	cmp	r3, #34	; 0x22
 800467e:	f040 8169 	bne.w	8004954 <I2C_Master_ADDR+0x2fe>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10f      	bne.n	80046aa <I2C_Master_ADDR+0x54>
 800468a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800468e:	2b40      	cmp	r3, #64	; 0x40
 8004690:	d10b      	bne.n	80046aa <I2C_Master_ADDR+0x54>
 8004692:	2300      	movs	r3, #0
 8004694:	633b      	str	r3, [r7, #48]	; 0x30
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	633b      	str	r3, [r7, #48]	; 0x30
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	633b      	str	r3, [r7, #48]	; 0x30
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	e160      	b.n	800496c <I2C_Master_ADDR+0x316>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d11d      	bne.n	80046ee <I2C_Master_ADDR+0x98>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046ba:	d118      	bne.n	80046ee <I2C_Master_ADDR+0x98>
 80046bc:	2300      	movs	r3, #0
 80046be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	651a      	str	r2, [r3, #80]	; 0x50
 80046ec:	e13e      	b.n	800496c <I2C_Master_ADDR+0x316>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d113      	bne.n	8004720 <I2C_Master_ADDR+0xca>
 80046f8:	2300      	movs	r3, #0
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28
 800470c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	e115      	b.n	800494c <I2C_Master_ADDR+0x2f6>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b01      	cmp	r3, #1
 8004728:	f040 808a 	bne.w	8004840 <I2C_Master_ADDR+0x1ea>
 800472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004732:	d137      	bne.n	80047a4 <I2C_Master_ADDR+0x14e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800474e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004752:	d113      	bne.n	800477c <I2C_Master_ADDR+0x126>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	2300      	movs	r3, #0
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	e0e7      	b.n	800494c <I2C_Master_ADDR+0x2f6>
 800477c:	2300      	movs	r3, #0
 800477e:	623b      	str	r3, [r7, #32]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	623b      	str	r3, [r7, #32]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	623b      	str	r3, [r7, #32]
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	e0d3      	b.n	800494c <I2C_Master_ADDR+0x2f6>
 80047a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d02e      	beq.n	8004808 <I2C_Master_ADDR+0x1b2>
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d02b      	beq.n	8004808 <I2C_Master_ADDR+0x1b2>
 80047b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b2:	2b12      	cmp	r3, #18
 80047b4:	d102      	bne.n	80047bc <I2C_Master_ADDR+0x166>
 80047b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d125      	bne.n	8004808 <I2C_Master_ADDR+0x1b2>
 80047bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d00e      	beq.n	80047e0 <I2C_Master_ADDR+0x18a>
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d00b      	beq.n	80047e0 <I2C_Master_ADDR+0x18a>
 80047c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ca:	2b10      	cmp	r3, #16
 80047cc:	d008      	beq.n	80047e0 <I2C_Master_ADDR+0x18a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e007      	b.n	80047f0 <I2C_Master_ADDR+0x19a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	2300      	movs	r3, #0
 80047f2:	61fb      	str	r3, [r7, #28]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	61fb      	str	r3, [r7, #28]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	61fb      	str	r3, [r7, #28]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	e0a1      	b.n	800494c <I2C_Master_ADDR+0x2f6>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	2300      	movs	r3, #0
 800481a:	61bb      	str	r3, [r7, #24]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	61bb      	str	r3, [r7, #24]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	61bb      	str	r3, [r7, #24]
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	e085      	b.n	800494c <I2C_Master_ADDR+0x2f6>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d14d      	bne.n	80048e6 <I2C_Master_ADDR+0x290>
 800484a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484c:	2b04      	cmp	r3, #4
 800484e:	d016      	beq.n	800487e <I2C_Master_ADDR+0x228>
 8004850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004852:	2b02      	cmp	r3, #2
 8004854:	d013      	beq.n	800487e <I2C_Master_ADDR+0x228>
 8004856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004858:	2b10      	cmp	r3, #16
 800485a:	d010      	beq.n	800487e <I2C_Master_ADDR+0x228>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	e007      	b.n	800488e <I2C_Master_ADDR+0x238>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800489c:	d117      	bne.n	80048ce <I2C_Master_ADDR+0x278>
 800489e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048a4:	d00b      	beq.n	80048be <I2C_Master_ADDR+0x268>
 80048a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d008      	beq.n	80048be <I2C_Master_ADDR+0x268>
 80048ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d005      	beq.n	80048be <I2C_Master_ADDR+0x268>
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d002      	beq.n	80048be <I2C_Master_ADDR+0x268>
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d107      	bne.n	80048ce <I2C_Master_ADDR+0x278>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	e032      	b.n	800494c <I2C_Master_ADDR+0x2f6>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004904:	d117      	bne.n	8004936 <I2C_Master_ADDR+0x2e0>
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800490c:	d00b      	beq.n	8004926 <I2C_Master_ADDR+0x2d0>
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	2b01      	cmp	r3, #1
 8004912:	d008      	beq.n	8004926 <I2C_Master_ADDR+0x2d0>
 8004914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004916:	2b08      	cmp	r3, #8
 8004918:	d005      	beq.n	8004926 <I2C_Master_ADDR+0x2d0>
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491c:	2b10      	cmp	r3, #16
 800491e:	d002      	beq.n	8004926 <I2C_Master_ADDR+0x2d0>
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	2b20      	cmp	r3, #32
 8004924:	d107      	bne.n	8004936 <I2C_Master_ADDR+0x2e0>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004934:	605a      	str	r2, [r3, #4]
 8004936:	2300      	movs	r3, #0
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	651a      	str	r2, [r3, #80]	; 0x50
 8004952:	e00b      	b.n	800496c <I2C_Master_ADDR+0x316>
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	e7ff      	b.n	800496c <I2C_Master_ADDR+0x316>
 800496c:	bf00      	nop
 800496e:	3744      	adds	r7, #68	; 0x44
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <I2C_SlaveTransmit_TXE>:
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004986:	73fb      	strb	r3, [r7, #15]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d02b      	beq.n	80049ea <I2C_SlaveTransmit_TXE+0x72>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	781a      	ldrb	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	611a      	str	r2, [r3, #16]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	625a      	str	r2, [r3, #36]	; 0x24
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d114      	bne.n	80049ea <I2C_SlaveTransmit_TXE+0x72>
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	2b29      	cmp	r3, #41	; 0x29
 80049c4:	d111      	bne.n	80049ea <I2C_SlaveTransmit_TXE+0x72>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d4:	605a      	str	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2221      	movs	r2, #33	; 0x21
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2228      	movs	r2, #40	; 0x28
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7fc ffa5 	bl	8001934 <HAL_I2C_SlaveTxCpltCallback>
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <I2C_SlaveTransmit_BTF>:
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d011      	beq.n	8004a28 <I2C_SlaveTransmit_BTF+0x36>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	611a      	str	r2, [r3, #16]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <I2C_SlaveReceive_RXNE>:
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a42:	73fb      	strb	r3, [r7, #15]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d02c      	beq.n	8004aa8 <I2C_SlaveReceive_RXNE+0x74>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d114      	bne.n	8004aa8 <I2C_SlaveReceive_RXNE+0x74>
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	2b2a      	cmp	r3, #42	; 0x2a
 8004a82:	d111      	bne.n	8004aa8 <I2C_SlaveReceive_RXNE+0x74>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a92:	605a      	str	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2222      	movs	r2, #34	; 0x22
 8004a98:	631a      	str	r2, [r3, #48]	; 0x30
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2228      	movs	r2, #40	; 0x28
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fc ff50 	bl	8001948 <HAL_I2C_SlaveRxCpltCallback>
 8004aa8:	bf00      	nop
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <I2C_SlaveReceive_BTF>:
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d012      	beq.n	8004ae8 <I2C_SlaveReceive_BTF+0x38>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	701a      	strb	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	625a      	str	r2, [r3, #36]	; 0x24
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <I2C_Slave_ADDR>:
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
 8004afe:	2300      	movs	r3, #0
 8004b00:	73fb      	strb	r3, [r7, #15]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b0e:	2b28      	cmp	r3, #40	; 0x28
 8004b10:	d125      	bne.n	8004b5e <I2C_Slave_ADDR+0x6a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <I2C_Slave_ADDR+0x3c>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d103      	bne.n	8004b42 <I2C_Slave_ADDR+0x4e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	81bb      	strh	r3, [r7, #12]
 8004b40:	e002      	b.n	8004b48 <I2C_Slave_ADDR+0x54>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	81bb      	strh	r3, [r7, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b50:	89ba      	ldrh	r2, [r7, #12]
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	4619      	mov	r1, r3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fc feac 	bl	80018b4 <HAL_I2C_AddrCallback>
 8004b5c:	e00e      	b.n	8004b7c <I2C_Slave_ADDR+0x88>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	60bb      	str	r3, [r7, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	60bb      	str	r3, [r7, #8]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b7c:	bf00      	nop
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <I2C_Slave_STOPF>:
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b92:	73fb      	strb	r3, [r7, #15]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ba2:	605a      	str	r2, [r3, #4]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	60bb      	str	r3, [r7, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be0:	d172      	bne.n	8004cc8 <I2C_Slave_STOPF+0x144>
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	2b22      	cmp	r3, #34	; 0x22
 8004be6:	d002      	beq.n	8004bee <I2C_Slave_STOPF+0x6a>
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	2b2a      	cmp	r3, #42	; 0x2a
 8004bec:	d135      	bne.n	8004c5a <I2C_Slave_STOPF+0xd6>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <I2C_Slave_STOPF+0x8e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f043 0204 	orr.w	r2, r3, #4
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	641a      	str	r2, [r3, #64]	; 0x40
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c20:	605a      	str	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fe fab9 	bl	800319e <HAL_DMA_GetState>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d049      	beq.n	8004cc6 <I2C_Slave_STOPF+0x142>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	4a69      	ldr	r2, [pc, #420]	; (8004ddc <I2C_Slave_STOPF+0x258>)
 8004c38:	651a      	str	r2, [r3, #80]	; 0x50
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fa8b 	bl	800315a <HAL_DMA_Abort_IT>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d03d      	beq.n	8004cc6 <I2C_Slave_STOPF+0x142>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c54:	4610      	mov	r0, r2
 8004c56:	4798      	blx	r3
 8004c58:	e035      	b.n	8004cc6 <I2C_Slave_STOPF+0x142>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <I2C_Slave_STOPF+0xfa>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f043 0204 	orr.w	r2, r3, #4
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe fa83 	bl	800319e <HAL_DMA_GetState>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d014      	beq.n	8004cc8 <I2C_Slave_STOPF+0x144>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	4a4e      	ldr	r2, [pc, #312]	; (8004ddc <I2C_Slave_STOPF+0x258>)
 8004ca4:	651a      	str	r2, [r3, #80]	; 0x50
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fe fa55 	bl	800315a <HAL_DMA_Abort_IT>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d008      	beq.n	8004cc8 <I2C_Slave_STOPF+0x144>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	4798      	blx	r3
 8004cc4:	e000      	b.n	8004cc8 <I2C_Slave_STOPF+0x144>
 8004cc6:	bf00      	nop
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d03e      	beq.n	8004d50 <I2C_Slave_STOPF+0x1cc>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d112      	bne.n	8004d06 <I2C_Slave_STOPF+0x182>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b40      	cmp	r3, #64	; 0x40
 8004d12:	d112      	bne.n	8004d3a <I2C_Slave_STOPF+0x1b6>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	625a      	str	r2, [r3, #36]	; 0x24
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <I2C_Slave_STOPF+0x1cc>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	f043 0204 	orr.w	r2, r3, #4
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	641a      	str	r2, [r3, #64]	; 0x40
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <I2C_Slave_STOPF+0x1dc>
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f8b3 	bl	8004ec4 <I2C_ITError>
 8004d5e:	e039      	b.n	8004dd4 <I2C_Slave_STOPF+0x250>
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b2a      	cmp	r3, #42	; 0x2a
 8004d64:	d109      	bne.n	8004d7a <I2C_Slave_STOPF+0x1f6>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2228      	movs	r2, #40	; 0x28
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7fc fde7 	bl	8001948 <HAL_I2C_SlaveRxCpltCallback>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b28      	cmp	r3, #40	; 0x28
 8004d84:	d111      	bne.n	8004daa <I2C_Slave_STOPF+0x226>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <I2C_Slave_STOPF+0x25c>)
 8004d8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	631a      	str	r2, [r3, #48]	; 0x30
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7fc fd74 	bl	8001890 <HAL_I2C_ListenCpltCallback>
 8004da8:	e014      	b.n	8004dd4 <I2C_Slave_STOPF+0x250>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	2b22      	cmp	r3, #34	; 0x22
 8004db0:	d002      	beq.n	8004db8 <I2C_Slave_STOPF+0x234>
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	2b22      	cmp	r3, #34	; 0x22
 8004db6:	d10d      	bne.n	8004dd4 <I2C_Slave_STOPF+0x250>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fc fdba 	bl	8001948 <HAL_I2C_SlaveRxCpltCallback>
 8004dd4:	bf00      	nop
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	08005129 	.word	0x08005129
 8004de0:	ffff0000 	.word	0xffff0000

08004de4 <I2C_Slave_AF>:
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df2:	73fb      	strb	r3, [r7, #15]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	60bb      	str	r3, [r7, #8]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d002      	beq.n	8004e06 <I2C_Slave_AF+0x22>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d129      	bne.n	8004e5a <I2C_Slave_AF+0x76>
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
 8004e08:	2b28      	cmp	r3, #40	; 0x28
 8004e0a:	d126      	bne.n	8004e5a <I2C_Slave_AF+0x76>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a2c      	ldr	r2, [pc, #176]	; (8004ec0 <I2C_Slave_AF+0xdc>)
 8004e10:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e20:	605a      	str	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e2a:	615a      	str	r2, [r3, #20]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fc fd1c 	bl	8001890 <HAL_I2C_ListenCpltCallback>
 8004e58:	e02e      	b.n	8004eb8 <I2C_Slave_AF+0xd4>
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	2b21      	cmp	r3, #33	; 0x21
 8004e5e:	d126      	bne.n	8004eae <I2C_Slave_AF+0xca>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a17      	ldr	r2, [pc, #92]	; (8004ec0 <I2C_Slave_AF+0xdc>)
 8004e64:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2221      	movs	r2, #33	; 0x21
 8004e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e8a:	605a      	str	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e94:	615a      	str	r2, [r3, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fc fd44 	bl	8001934 <HAL_I2C_SlaveTxCpltCallback>
 8004eac:	e004      	b.n	8004eb8 <I2C_Slave_AF+0xd4>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004eb6:	615a      	str	r2, [r3, #20]
 8004eb8:	bf00      	nop
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	ffff0000 	.word	0xffff0000

08004ec4 <I2C_ITError>:
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed2:	73fb      	strb	r3, [r7, #15]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eda:	73bb      	strb	r3, [r7, #14]
 8004edc:	7bbb      	ldrb	r3, [r7, #14]
 8004ede:	2b10      	cmp	r3, #16
 8004ee0:	d002      	beq.n	8004ee8 <I2C_ITError+0x24>
 8004ee2:	7bbb      	ldrb	r3, [r7, #14]
 8004ee4:	2b40      	cmp	r3, #64	; 0x40
 8004ee6:	d10a      	bne.n	8004efe <I2C_ITError+0x3a>
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	2b22      	cmp	r3, #34	; 0x22
 8004eec:	d107      	bne.n	8004efe <I2C_ITError+0x3a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f04:	2b28      	cmp	r3, #40	; 0x28
 8004f06:	d107      	bne.n	8004f18 <I2C_ITError+0x54>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2228      	movs	r2, #40	; 0x28
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f16:	e015      	b.n	8004f44 <I2C_ITError+0x80>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f26:	d00a      	beq.n	8004f3e <I2C_ITError+0x7a>
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	2b60      	cmp	r3, #96	; 0x60
 8004f2c:	d007      	beq.n	8004f3e <I2C_ITError+0x7a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f52:	d162      	bne.n	800501a <I2C_ITError+0x156>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f62:	605a      	str	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d020      	beq.n	8004fb4 <I2C_ITError+0xf0>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f76:	4a6a      	ldr	r2, [pc, #424]	; (8005120 <I2C_ITError+0x25c>)
 8004f78:	651a      	str	r2, [r3, #80]	; 0x50
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fe f8eb 	bl	800315a <HAL_DMA_Abort_IT>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 8089 	beq.w	800509e <I2C_ITError+0x1da>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0201 	bic.w	r2, r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fae:	4610      	mov	r0, r2
 8004fb0:	4798      	blx	r3
 8004fb2:	e074      	b.n	800509e <I2C_ITError+0x1da>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	4a59      	ldr	r2, [pc, #356]	; (8005120 <I2C_ITError+0x25c>)
 8004fba:	651a      	str	r2, [r3, #80]	; 0x50
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fe f8ca 	bl	800315a <HAL_DMA_Abort_IT>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d068      	beq.n	800509e <I2C_ITError+0x1da>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd6:	2b40      	cmp	r3, #64	; 0x40
 8004fd8:	d10b      	bne.n	8004ff2 <I2C_ITError+0x12e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	701a      	strb	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0201 	bic.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005014:	4610      	mov	r0, r2
 8005016:	4798      	blx	r3
 8005018:	e041      	b.n	800509e <I2C_ITError+0x1da>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b60      	cmp	r3, #96	; 0x60
 8005024:	d125      	bne.n	8005072 <I2C_ITError+0x1ae>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2220      	movs	r2, #32
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	641a      	str	r2, [r3, #64]	; 0x40
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503e:	2b40      	cmp	r3, #64	; 0x40
 8005040:	d10b      	bne.n	800505a <I2C_ITError+0x196>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	701a      	strb	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	625a      	str	r2, [r3, #36]	; 0x24
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0201 	bic.w	r2, r2, #1
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fe fee2 	bl	8003e34 <HAL_I2C_AbortCpltCallback>
 8005070:	e015      	b.n	800509e <I2C_ITError+0x1da>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d10b      	bne.n	8005098 <I2C_ITError+0x1d4>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	625a      	str	r2, [r3, #36]	; 0x24
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7fc fc91 	bl	80019c0 <HAL_I2C_ErrorCallback>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	60bb      	str	r3, [r7, #8]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10e      	bne.n	80050cc <I2C_ITError+0x208>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d109      	bne.n	80050cc <I2C_ITError+0x208>
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d104      	bne.n	80050cc <I2C_ITError+0x208>
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d007      	beq.n	80050dc <I2C_ITError+0x218>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050da:	605a      	str	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e2:	73fb      	strb	r3, [r7, #15]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d113      	bne.n	8005118 <I2C_ITError+0x254>
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b28      	cmp	r3, #40	; 0x28
 80050f4:	d110      	bne.n	8005118 <I2C_ITError+0x254>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a0a      	ldr	r2, [pc, #40]	; (8005124 <I2C_ITError+0x260>)
 80050fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	631a      	str	r2, [r3, #48]	; 0x30
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fc fbbc 	bl	8001890 <HAL_I2C_ListenCpltCallback>
 8005118:	bf00      	nop
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	08005129 	.word	0x08005129
 8005124:	ffff0000 	.word	0xffff0000

08005128 <I2C_DMAAbort>:
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005140:	74fb      	strb	r3, [r7, #19]
 8005142:	4b4b      	ldr	r3, [pc, #300]	; (8005270 <I2C_DMAAbort+0x148>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	08db      	lsrs	r3, r3, #3
 8005148:	4a4a      	ldr	r2, [pc, #296]	; (8005274 <I2C_DMAAbort+0x14c>)
 800514a:	fba2 2303 	umull	r2, r3, r2, r3
 800514e:	0a1a      	lsrs	r2, r3, #8
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	00da      	lsls	r2, r3, #3
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <I2C_DMAAbort+0x48>
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	641a      	str	r2, [r3, #64]	; 0x40
 800516e:	e00a      	b.n	8005186 <I2C_DMAAbort+0x5e>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3b01      	subs	r3, #1
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005184:	d0ea      	beq.n	800515c <I2C_DMAAbort+0x34>
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <I2C_DMAAbort+0x6e>
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005192:	2200      	movs	r2, #0
 8005194:	63da      	str	r2, [r3, #60]	; 0x3c
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <I2C_DMAAbort+0x7e>
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	2200      	movs	r2, #0
 80051a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2200      	movs	r2, #0
 80051ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <I2C_DMAAbort+0xa4>
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c8:	2200      	movs	r2, #0
 80051ca:	651a      	str	r2, [r3, #80]	; 0x50
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <I2C_DMAAbort+0xb4>
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	2200      	movs	r2, #0
 80051da:	651a      	str	r2, [r3, #80]	; 0x50
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0201 	bic.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b60      	cmp	r3, #96	; 0x60
 80051f6:	d10e      	bne.n	8005216 <I2C_DMAAbort+0xee>
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2200      	movs	r2, #0
 800520c:	641a      	str	r2, [r3, #64]	; 0x40
 800520e:	6978      	ldr	r0, [r7, #20]
 8005210:	f7fe fe10 	bl	8003e34 <HAL_I2C_AbortCpltCallback>
 8005214:	e027      	b.n	8005266 <I2C_DMAAbort+0x13e>
 8005216:	7cfb      	ldrb	r3, [r7, #19]
 8005218:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800521c:	2b28      	cmp	r3, #40	; 0x28
 800521e:	d117      	bne.n	8005250 <I2C_DMAAbort+0x128>
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2200      	movs	r2, #0
 8005244:	631a      	str	r2, [r3, #48]	; 0x30
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2228      	movs	r2, #40	; 0x28
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800524e:	e007      	b.n	8005260 <I2C_DMAAbort+0x138>
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005260:	6978      	ldr	r0, [r7, #20]
 8005262:	f7fc fbad 	bl	80019c0 <HAL_I2C_ErrorCallback>
 8005266:	bf00      	nop
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	20000090 	.word	0x20000090
 8005274:	14f8b589 	.word	0x14f8b589

08005278 <I2C_WaitOnSTOPRequestThroughIT>:
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	4b13      	ldr	r3, [pc, #76]	; (80052d4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	08db      	lsrs	r3, r3, #3
 800528a:	4a13      	ldr	r2, [pc, #76]	; (80052d8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	0a1a      	lsrs	r2, r3, #8
 8005292:	4613      	mov	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3b01      	subs	r3, #1
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d107      	bne.n	80052b6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f043 0220 	orr.w	r2, r3, #32
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	641a      	str	r2, [r3, #64]	; 0x40
 80052b2:	2301      	movs	r3, #1
 80052b4:	e008      	b.n	80052c8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052c4:	d0e9      	beq.n	800529a <I2C_WaitOnSTOPRequestThroughIT+0x22>
 80052c6:	2300      	movs	r3, #0
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	20000090 	.word	0x20000090
 80052d8:	14f8b589 	.word	0x14f8b589

080052dc <I2C_ConvertOtherXferOptions>:
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80052ec:	d103      	bne.n	80052f6 <I2C_ConvertOtherXferOptions+0x1a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80052f4:	e007      	b.n	8005306 <I2C_ConvertOtherXferOptions+0x2a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80052fe:	d102      	bne.n	8005306 <I2C_ConvertOtherXferOptions+0x2a>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2208      	movs	r2, #8
 8005304:	62da      	str	r2, [r3, #44]	; 0x2c
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
	...

08005314 <HAL_RCC_OscConfig>:
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_RCC_OscConfig+0x12>
 8005322:	2301      	movs	r3, #1
 8005324:	e267      	b.n	80057f6 <HAL_RCC_OscConfig+0x4e2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d075      	beq.n	800541e <HAL_RCC_OscConfig+0x10a>
 8005332:	4b88      	ldr	r3, [pc, #544]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 030c 	and.w	r3, r3, #12
 800533a:	2b04      	cmp	r3, #4
 800533c:	d00c      	beq.n	8005358 <HAL_RCC_OscConfig+0x44>
 800533e:	4b85      	ldr	r3, [pc, #532]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 030c 	and.w	r3, r3, #12
 8005346:	2b08      	cmp	r3, #8
 8005348:	d112      	bne.n	8005370 <HAL_RCC_OscConfig+0x5c>
 800534a:	4b82      	ldr	r3, [pc, #520]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005356:	d10b      	bne.n	8005370 <HAL_RCC_OscConfig+0x5c>
 8005358:	4b7e      	ldr	r3, [pc, #504]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d05b      	beq.n	800541c <HAL_RCC_OscConfig+0x108>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d157      	bne.n	800541c <HAL_RCC_OscConfig+0x108>
 800536c:	2301      	movs	r3, #1
 800536e:	e242      	b.n	80057f6 <HAL_RCC_OscConfig+0x4e2>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005378:	d106      	bne.n	8005388 <HAL_RCC_OscConfig+0x74>
 800537a:	4b76      	ldr	r3, [pc, #472]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a75      	ldr	r2, [pc, #468]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 8005380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	e01d      	b.n	80053c4 <HAL_RCC_OscConfig+0xb0>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005390:	d10c      	bne.n	80053ac <HAL_RCC_OscConfig+0x98>
 8005392:	4b70      	ldr	r3, [pc, #448]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a6f      	ldr	r2, [pc, #444]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 8005398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	4b6d      	ldr	r3, [pc, #436]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a6c      	ldr	r2, [pc, #432]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 80053a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	e00b      	b.n	80053c4 <HAL_RCC_OscConfig+0xb0>
 80053ac:	4b69      	ldr	r3, [pc, #420]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a68      	ldr	r2, [pc, #416]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 80053b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	4b66      	ldr	r3, [pc, #408]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a65      	ldr	r2, [pc, #404]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 80053be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d013      	beq.n	80053f4 <HAL_RCC_OscConfig+0xe0>
 80053cc:	f7fd f9fc 	bl	80027c8 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0xd2>
 80053d4:	f7fd f9f8 	bl	80027c8 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b64      	cmp	r3, #100	; 0x64
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0xd2>
 80053e2:	2303      	movs	r3, #3
 80053e4:	e207      	b.n	80057f6 <HAL_RCC_OscConfig+0x4e2>
 80053e6:	4b5b      	ldr	r3, [pc, #364]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0f0      	beq.n	80053d4 <HAL_RCC_OscConfig+0xc0>
 80053f2:	e014      	b.n	800541e <HAL_RCC_OscConfig+0x10a>
 80053f4:	f7fd f9e8 	bl	80027c8 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0xfa>
 80053fc:	f7fd f9e4 	bl	80027c8 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b64      	cmp	r3, #100	; 0x64
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0xfa>
 800540a:	2303      	movs	r3, #3
 800540c:	e1f3      	b.n	80057f6 <HAL_RCC_OscConfig+0x4e2>
 800540e:	4b51      	ldr	r3, [pc, #324]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f0      	bne.n	80053fc <HAL_RCC_OscConfig+0xe8>
 800541a:	e000      	b.n	800541e <HAL_RCC_OscConfig+0x10a>
 800541c:	bf00      	nop
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d063      	beq.n	80054f2 <HAL_RCC_OscConfig+0x1de>
 800542a:	4b4a      	ldr	r3, [pc, #296]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 030c 	and.w	r3, r3, #12
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00b      	beq.n	800544e <HAL_RCC_OscConfig+0x13a>
 8005436:	4b47      	ldr	r3, [pc, #284]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 030c 	and.w	r3, r3, #12
 800543e:	2b08      	cmp	r3, #8
 8005440:	d11c      	bne.n	800547c <HAL_RCC_OscConfig+0x168>
 8005442:	4b44      	ldr	r3, [pc, #272]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d116      	bne.n	800547c <HAL_RCC_OscConfig+0x168>
 800544e:	4b41      	ldr	r3, [pc, #260]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <HAL_RCC_OscConfig+0x152>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d001      	beq.n	8005466 <HAL_RCC_OscConfig+0x152>
 8005462:	2301      	movs	r3, #1
 8005464:	e1c7      	b.n	80057f6 <HAL_RCC_OscConfig+0x4e2>
 8005466:	4b3b      	ldr	r3, [pc, #236]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	4937      	ldr	r1, [pc, #220]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 8005476:	4313      	orrs	r3, r2
 8005478:	600b      	str	r3, [r1, #0]
 800547a:	e03a      	b.n	80054f2 <HAL_RCC_OscConfig+0x1de>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d020      	beq.n	80054c6 <HAL_RCC_OscConfig+0x1b2>
 8005484:	4b34      	ldr	r3, [pc, #208]	; (8005558 <HAL_RCC_OscConfig+0x244>)
 8005486:	2201      	movs	r2, #1
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	f7fd f99d 	bl	80027c8 <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x190>
 8005492:	f7fd f999 	bl	80027c8 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x190>
 80054a0:	2303      	movs	r3, #3
 80054a2:	e1a8      	b.n	80057f6 <HAL_RCC_OscConfig+0x4e2>
 80054a4:	4b2b      	ldr	r3, [pc, #172]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0f0      	beq.n	8005492 <HAL_RCC_OscConfig+0x17e>
 80054b0:	4b28      	ldr	r3, [pc, #160]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	4925      	ldr	r1, [pc, #148]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	600b      	str	r3, [r1, #0]
 80054c4:	e015      	b.n	80054f2 <HAL_RCC_OscConfig+0x1de>
 80054c6:	4b24      	ldr	r3, [pc, #144]	; (8005558 <HAL_RCC_OscConfig+0x244>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	f7fd f97c 	bl	80027c8 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x1d2>
 80054d4:	f7fd f978 	bl	80027c8 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x1d2>
 80054e2:	2303      	movs	r3, #3
 80054e4:	e187      	b.n	80057f6 <HAL_RCC_OscConfig+0x4e2>
 80054e6:	4b1b      	ldr	r3, [pc, #108]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f0      	bne.n	80054d4 <HAL_RCC_OscConfig+0x1c0>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d036      	beq.n	800556c <HAL_RCC_OscConfig+0x258>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d016      	beq.n	8005534 <HAL_RCC_OscConfig+0x220>
 8005506:	4b15      	ldr	r3, [pc, #84]	; (800555c <HAL_RCC_OscConfig+0x248>)
 8005508:	2201      	movs	r2, #1
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	f7fd f95c 	bl	80027c8 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x212>
 8005514:	f7fd f958 	bl	80027c8 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x212>
 8005522:	2303      	movs	r3, #3
 8005524:	e167      	b.n	80057f6 <HAL_RCC_OscConfig+0x4e2>
 8005526:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <HAL_RCC_OscConfig+0x240>)
 8005528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0f0      	beq.n	8005514 <HAL_RCC_OscConfig+0x200>
 8005532:	e01b      	b.n	800556c <HAL_RCC_OscConfig+0x258>
 8005534:	4b09      	ldr	r3, [pc, #36]	; (800555c <HAL_RCC_OscConfig+0x248>)
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	f7fd f945 	bl	80027c8 <HAL_GetTick>
 800553e:	6138      	str	r0, [r7, #16]
 8005540:	e00e      	b.n	8005560 <HAL_RCC_OscConfig+0x24c>
 8005542:	f7fd f941 	bl	80027c8 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d907      	bls.n	8005560 <HAL_RCC_OscConfig+0x24c>
 8005550:	2303      	movs	r3, #3
 8005552:	e150      	b.n	80057f6 <HAL_RCC_OscConfig+0x4e2>
 8005554:	40023800 	.word	0x40023800
 8005558:	42470000 	.word	0x42470000
 800555c:	42470e80 	.word	0x42470e80
 8005560:	4b88      	ldr	r3, [pc, #544]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 8005562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1ea      	bne.n	8005542 <HAL_RCC_OscConfig+0x22e>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 8097 	beq.w	80056a8 <HAL_RCC_OscConfig+0x394>
 800557a:	2300      	movs	r3, #0
 800557c:	75fb      	strb	r3, [r7, #23]
 800557e:	4b81      	ldr	r3, [pc, #516]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10f      	bne.n	80055aa <HAL_RCC_OscConfig+0x296>
 800558a:	2300      	movs	r3, #0
 800558c:	60bb      	str	r3, [r7, #8]
 800558e:	4b7d      	ldr	r3, [pc, #500]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	4a7c      	ldr	r2, [pc, #496]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 8005594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005598:	6413      	str	r3, [r2, #64]	; 0x40
 800559a:	4b7a      	ldr	r3, [pc, #488]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a2:	60bb      	str	r3, [r7, #8]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2301      	movs	r3, #1
 80055a8:	75fb      	strb	r3, [r7, #23]
 80055aa:	4b77      	ldr	r3, [pc, #476]	; (8005788 <HAL_RCC_OscConfig+0x474>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d118      	bne.n	80055e8 <HAL_RCC_OscConfig+0x2d4>
 80055b6:	4b74      	ldr	r3, [pc, #464]	; (8005788 <HAL_RCC_OscConfig+0x474>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a73      	ldr	r2, [pc, #460]	; (8005788 <HAL_RCC_OscConfig+0x474>)
 80055bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	f7fd f901 	bl	80027c8 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]
 80055c8:	e008      	b.n	80055dc <HAL_RCC_OscConfig+0x2c8>
 80055ca:	f7fd f8fd 	bl	80027c8 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x2c8>
 80055d8:	2303      	movs	r3, #3
 80055da:	e10c      	b.n	80057f6 <HAL_RCC_OscConfig+0x4e2>
 80055dc:	4b6a      	ldr	r3, [pc, #424]	; (8005788 <HAL_RCC_OscConfig+0x474>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0f0      	beq.n	80055ca <HAL_RCC_OscConfig+0x2b6>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d106      	bne.n	80055fe <HAL_RCC_OscConfig+0x2ea>
 80055f0:	4b64      	ldr	r3, [pc, #400]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 80055f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f4:	4a63      	ldr	r2, [pc, #396]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 80055f6:	f043 0301 	orr.w	r3, r3, #1
 80055fa:	6713      	str	r3, [r2, #112]	; 0x70
 80055fc:	e01c      	b.n	8005638 <HAL_RCC_OscConfig+0x324>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2b05      	cmp	r3, #5
 8005604:	d10c      	bne.n	8005620 <HAL_RCC_OscConfig+0x30c>
 8005606:	4b5f      	ldr	r3, [pc, #380]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 8005608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560a:	4a5e      	ldr	r2, [pc, #376]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 800560c:	f043 0304 	orr.w	r3, r3, #4
 8005610:	6713      	str	r3, [r2, #112]	; 0x70
 8005612:	4b5c      	ldr	r3, [pc, #368]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 8005614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005616:	4a5b      	ldr	r2, [pc, #364]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 8005618:	f043 0301 	orr.w	r3, r3, #1
 800561c:	6713      	str	r3, [r2, #112]	; 0x70
 800561e:	e00b      	b.n	8005638 <HAL_RCC_OscConfig+0x324>
 8005620:	4b58      	ldr	r3, [pc, #352]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 8005622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005624:	4a57      	ldr	r2, [pc, #348]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	6713      	str	r3, [r2, #112]	; 0x70
 800562c:	4b55      	ldr	r3, [pc, #340]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	4a54      	ldr	r2, [pc, #336]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 8005632:	f023 0304 	bic.w	r3, r3, #4
 8005636:	6713      	str	r3, [r2, #112]	; 0x70
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d015      	beq.n	800566c <HAL_RCC_OscConfig+0x358>
 8005640:	f7fd f8c2 	bl	80027c8 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]
 8005646:	e00a      	b.n	800565e <HAL_RCC_OscConfig+0x34a>
 8005648:	f7fd f8be 	bl	80027c8 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	f241 3288 	movw	r2, #5000	; 0x1388
 8005656:	4293      	cmp	r3, r2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x34a>
 800565a:	2303      	movs	r3, #3
 800565c:	e0cb      	b.n	80057f6 <HAL_RCC_OscConfig+0x4e2>
 800565e:	4b49      	ldr	r3, [pc, #292]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 8005660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0ee      	beq.n	8005648 <HAL_RCC_OscConfig+0x334>
 800566a:	e014      	b.n	8005696 <HAL_RCC_OscConfig+0x382>
 800566c:	f7fd f8ac 	bl	80027c8 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]
 8005672:	e00a      	b.n	800568a <HAL_RCC_OscConfig+0x376>
 8005674:	f7fd f8a8 	bl	80027c8 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005682:	4293      	cmp	r3, r2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x376>
 8005686:	2303      	movs	r3, #3
 8005688:	e0b5      	b.n	80057f6 <HAL_RCC_OscConfig+0x4e2>
 800568a:	4b3e      	ldr	r3, [pc, #248]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1ee      	bne.n	8005674 <HAL_RCC_OscConfig+0x360>
 8005696:	7dfb      	ldrb	r3, [r7, #23]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d105      	bne.n	80056a8 <HAL_RCC_OscConfig+0x394>
 800569c:	4b39      	ldr	r3, [pc, #228]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 800569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a0:	4a38      	ldr	r2, [pc, #224]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 80056a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056a6:	6413      	str	r3, [r2, #64]	; 0x40
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 80a1 	beq.w	80057f4 <HAL_RCC_OscConfig+0x4e0>
 80056b2:	4b34      	ldr	r3, [pc, #208]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 030c 	and.w	r3, r3, #12
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d05c      	beq.n	8005778 <HAL_RCC_OscConfig+0x464>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d141      	bne.n	800574a <HAL_RCC_OscConfig+0x436>
 80056c6:	4b31      	ldr	r3, [pc, #196]	; (800578c <HAL_RCC_OscConfig+0x478>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	f7fd f87c 	bl	80027c8 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x3d2>
 80056d4:	f7fd f878 	bl	80027c8 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x3d2>
 80056e2:	2303      	movs	r3, #3
 80056e4:	e087      	b.n	80057f6 <HAL_RCC_OscConfig+0x4e2>
 80056e6:	4b27      	ldr	r3, [pc, #156]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f0      	bne.n	80056d4 <HAL_RCC_OscConfig+0x3c0>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69da      	ldr	r2, [r3, #28]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	019b      	lsls	r3, r3, #6
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005708:	085b      	lsrs	r3, r3, #1
 800570a:	3b01      	subs	r3, #1
 800570c:	041b      	lsls	r3, r3, #16
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	061b      	lsls	r3, r3, #24
 8005716:	491b      	ldr	r1, [pc, #108]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 8005718:	4313      	orrs	r3, r2
 800571a:	604b      	str	r3, [r1, #4]
 800571c:	4b1b      	ldr	r3, [pc, #108]	; (800578c <HAL_RCC_OscConfig+0x478>)
 800571e:	2201      	movs	r2, #1
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	f7fd f851 	bl	80027c8 <HAL_GetTick>
 8005726:	6138      	str	r0, [r7, #16]
 8005728:	e008      	b.n	800573c <HAL_RCC_OscConfig+0x428>
 800572a:	f7fd f84d 	bl	80027c8 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x428>
 8005738:	2303      	movs	r3, #3
 800573a:	e05c      	b.n	80057f6 <HAL_RCC_OscConfig+0x4e2>
 800573c:	4b11      	ldr	r3, [pc, #68]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0f0      	beq.n	800572a <HAL_RCC_OscConfig+0x416>
 8005748:	e054      	b.n	80057f4 <HAL_RCC_OscConfig+0x4e0>
 800574a:	4b10      	ldr	r3, [pc, #64]	; (800578c <HAL_RCC_OscConfig+0x478>)
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	f7fd f83a 	bl	80027c8 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x456>
 8005758:	f7fd f836 	bl	80027c8 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x456>
 8005766:	2303      	movs	r3, #3
 8005768:	e045      	b.n	80057f6 <HAL_RCC_OscConfig+0x4e2>
 800576a:	4b06      	ldr	r3, [pc, #24]	; (8005784 <HAL_RCC_OscConfig+0x470>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f0      	bne.n	8005758 <HAL_RCC_OscConfig+0x444>
 8005776:	e03d      	b.n	80057f4 <HAL_RCC_OscConfig+0x4e0>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d107      	bne.n	8005790 <HAL_RCC_OscConfig+0x47c>
 8005780:	2301      	movs	r3, #1
 8005782:	e038      	b.n	80057f6 <HAL_RCC_OscConfig+0x4e2>
 8005784:	40023800 	.word	0x40023800
 8005788:	40007000 	.word	0x40007000
 800578c:	42470060 	.word	0x42470060
 8005790:	4b1b      	ldr	r3, [pc, #108]	; (8005800 <HAL_RCC_OscConfig+0x4ec>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d028      	beq.n	80057f0 <HAL_RCC_OscConfig+0x4dc>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d121      	bne.n	80057f0 <HAL_RCC_OscConfig+0x4dc>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d11a      	bne.n	80057f0 <HAL_RCC_OscConfig+0x4dc>
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057c0:	4013      	ands	r3, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057c6:	0192      	lsls	r2, r2, #6
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d111      	bne.n	80057f0 <HAL_RCC_OscConfig+0x4dc>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d6:	085b      	lsrs	r3, r3, #1
 80057d8:	3b01      	subs	r3, #1
 80057da:	041b      	lsls	r3, r3, #16
 80057dc:	429a      	cmp	r2, r3
 80057de:	d107      	bne.n	80057f0 <HAL_RCC_OscConfig+0x4dc>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	061b      	lsls	r3, r3, #24
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d001      	beq.n	80057f4 <HAL_RCC_OscConfig+0x4e0>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e000      	b.n	80057f6 <HAL_RCC_OscConfig+0x4e2>
 80057f4:	2300      	movs	r3, #0
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	40023800 	.word	0x40023800

08005804 <HAL_RCC_ClockConfig>:
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <HAL_RCC_ClockConfig+0x14>
 8005814:	2301      	movs	r3, #1
 8005816:	e0cc      	b.n	80059b2 <HAL_RCC_ClockConfig+0x1ae>
 8005818:	4b68      	ldr	r3, [pc, #416]	; (80059bc <HAL_RCC_ClockConfig+0x1b8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d90c      	bls.n	8005840 <HAL_RCC_ClockConfig+0x3c>
 8005826:	4b65      	ldr	r3, [pc, #404]	; (80059bc <HAL_RCC_ClockConfig+0x1b8>)
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	4b63      	ldr	r3, [pc, #396]	; (80059bc <HAL_RCC_ClockConfig+0x1b8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d001      	beq.n	8005840 <HAL_RCC_ClockConfig+0x3c>
 800583c:	2301      	movs	r3, #1
 800583e:	e0b8      	b.n	80059b2 <HAL_RCC_ClockConfig+0x1ae>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d020      	beq.n	800588e <HAL_RCC_ClockConfig+0x8a>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b00      	cmp	r3, #0
 8005856:	d005      	beq.n	8005864 <HAL_RCC_ClockConfig+0x60>
 8005858:	4b59      	ldr	r3, [pc, #356]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	4a58      	ldr	r2, [pc, #352]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005862:	6093      	str	r3, [r2, #8]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b00      	cmp	r3, #0
 800586e:	d005      	beq.n	800587c <HAL_RCC_ClockConfig+0x78>
 8005870:	4b53      	ldr	r3, [pc, #332]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	4a52      	ldr	r2, [pc, #328]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005876:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800587a:	6093      	str	r3, [r2, #8]
 800587c:	4b50      	ldr	r3, [pc, #320]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	494d      	ldr	r1, [pc, #308]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	4313      	orrs	r3, r2
 800588c:	608b      	str	r3, [r1, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d044      	beq.n	8005924 <HAL_RCC_ClockConfig+0x120>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d107      	bne.n	80058b2 <HAL_RCC_ClockConfig+0xae>
 80058a2:	4b47      	ldr	r3, [pc, #284]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d119      	bne.n	80058e2 <HAL_RCC_ClockConfig+0xde>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e07f      	b.n	80059b2 <HAL_RCC_ClockConfig+0x1ae>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d003      	beq.n	80058c2 <HAL_RCC_ClockConfig+0xbe>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d107      	bne.n	80058d2 <HAL_RCC_ClockConfig+0xce>
 80058c2:	4b3f      	ldr	r3, [pc, #252]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <HAL_RCC_ClockConfig+0xde>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e06f      	b.n	80059b2 <HAL_RCC_ClockConfig+0x1ae>
 80058d2:	4b3b      	ldr	r3, [pc, #236]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_RCC_ClockConfig+0xde>
 80058de:	2301      	movs	r3, #1
 80058e0:	e067      	b.n	80059b2 <HAL_RCC_ClockConfig+0x1ae>
 80058e2:	4b37      	ldr	r3, [pc, #220]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f023 0203 	bic.w	r2, r3, #3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	4934      	ldr	r1, [pc, #208]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	608b      	str	r3, [r1, #8]
 80058f4:	f7fc ff68 	bl	80027c8 <HAL_GetTick>
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	e00a      	b.n	8005912 <HAL_RCC_ClockConfig+0x10e>
 80058fc:	f7fc ff64 	bl	80027c8 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	f241 3288 	movw	r2, #5000	; 0x1388
 800590a:	4293      	cmp	r3, r2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_ClockConfig+0x10e>
 800590e:	2303      	movs	r3, #3
 8005910:	e04f      	b.n	80059b2 <HAL_RCC_ClockConfig+0x1ae>
 8005912:	4b2b      	ldr	r3, [pc, #172]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 020c 	and.w	r2, r3, #12
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	429a      	cmp	r2, r3
 8005922:	d1eb      	bne.n	80058fc <HAL_RCC_ClockConfig+0xf8>
 8005924:	4b25      	ldr	r3, [pc, #148]	; (80059bc <HAL_RCC_ClockConfig+0x1b8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d20c      	bcs.n	800594c <HAL_RCC_ClockConfig+0x148>
 8005932:	4b22      	ldr	r3, [pc, #136]	; (80059bc <HAL_RCC_ClockConfig+0x1b8>)
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	4b20      	ldr	r3, [pc, #128]	; (80059bc <HAL_RCC_ClockConfig+0x1b8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0307 	and.w	r3, r3, #7
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d001      	beq.n	800594c <HAL_RCC_ClockConfig+0x148>
 8005948:	2301      	movs	r3, #1
 800594a:	e032      	b.n	80059b2 <HAL_RCC_ClockConfig+0x1ae>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <HAL_RCC_ClockConfig+0x166>
 8005958:	4b19      	ldr	r3, [pc, #100]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	4916      	ldr	r1, [pc, #88]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	4313      	orrs	r3, r2
 8005968:	608b      	str	r3, [r1, #8]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d009      	beq.n	800598a <HAL_RCC_ClockConfig+0x186>
 8005976:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	490e      	ldr	r1, [pc, #56]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005986:	4313      	orrs	r3, r2
 8005988:	608b      	str	r3, [r1, #8]
 800598a:	f000 f821 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 800598e:	4602      	mov	r2, r0
 8005990:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	091b      	lsrs	r3, r3, #4
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	490a      	ldr	r1, [pc, #40]	; (80059c4 <HAL_RCC_ClockConfig+0x1c0>)
 800599c:	5ccb      	ldrb	r3, [r1, r3]
 800599e:	fa22 f303 	lsr.w	r3, r2, r3
 80059a2:	4a09      	ldr	r2, [pc, #36]	; (80059c8 <HAL_RCC_ClockConfig+0x1c4>)
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	4b09      	ldr	r3, [pc, #36]	; (80059cc <HAL_RCC_ClockConfig+0x1c8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fc fec8 	bl	8002740 <HAL_InitTick>
 80059b0:	2300      	movs	r3, #0
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40023c00 	.word	0x40023c00
 80059c0:	40023800 	.word	0x40023800
 80059c4:	0800a0f0 	.word	0x0800a0f0
 80059c8:	20000090 	.word	0x20000090
 80059cc:	20000094 	.word	0x20000094

080059d0 <HAL_RCC_GetSysClockFreq>:
 80059d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059d4:	b090      	sub	sp, #64	; 0x40
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	2300      	movs	r3, #0
 80059da:	637b      	str	r3, [r7, #52]	; 0x34
 80059dc:	2300      	movs	r3, #0
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e0:	2300      	movs	r3, #0
 80059e2:	633b      	str	r3, [r7, #48]	; 0x30
 80059e4:	2300      	movs	r3, #0
 80059e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80059e8:	4b59      	ldr	r3, [pc, #356]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x180>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 030c 	and.w	r3, r3, #12
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d00d      	beq.n	8005a10 <HAL_RCC_GetSysClockFreq+0x40>
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	f200 80a1 	bhi.w	8005b3c <HAL_RCC_GetSysClockFreq+0x16c>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <HAL_RCC_GetSysClockFreq+0x34>
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d003      	beq.n	8005a0a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a02:	e09b      	b.n	8005b3c <HAL_RCC_GetSysClockFreq+0x16c>
 8005a04:	4b53      	ldr	r3, [pc, #332]	; (8005b54 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a08:	e09b      	b.n	8005b42 <HAL_RCC_GetSysClockFreq+0x172>
 8005a0a:	4b53      	ldr	r3, [pc, #332]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a0e:	e098      	b.n	8005b42 <HAL_RCC_GetSysClockFreq+0x172>
 8005a10:	4b4f      	ldr	r3, [pc, #316]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
 8005a1a:	4b4d      	ldr	r3, [pc, #308]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d028      	beq.n	8005a78 <HAL_RCC_GetSysClockFreq+0xa8>
 8005a26:	4b4a      	ldr	r3, [pc, #296]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	099b      	lsrs	r3, r3, #6
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	623b      	str	r3, [r7, #32]
 8005a30:	627a      	str	r2, [r7, #36]	; 0x24
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005a38:	2100      	movs	r1, #0
 8005a3a:	4b47      	ldr	r3, [pc, #284]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a3c:	fb03 f201 	mul.w	r2, r3, r1
 8005a40:	2300      	movs	r3, #0
 8005a42:	fb00 f303 	mul.w	r3, r0, r3
 8005a46:	4413      	add	r3, r2
 8005a48:	4a43      	ldr	r2, [pc, #268]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a4a:	fba0 1202 	umull	r1, r2, r0, r2
 8005a4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a50:	460a      	mov	r2, r1
 8005a52:	62ba      	str	r2, [r7, #40]	; 0x28
 8005a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a56:	4413      	add	r3, r2
 8005a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	61fa      	str	r2, [r7, #28]
 8005a62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005a6a:	f7fb f915 	bl	8000c98 <__aeabi_uldivmod>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	4613      	mov	r3, r2
 8005a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a76:	e053      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x150>
 8005a78:	4b35      	ldr	r3, [pc, #212]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	099b      	lsrs	r3, r3, #6
 8005a7e:	2200      	movs	r2, #0
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	617a      	str	r2, [r7, #20]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005a8a:	f04f 0b00 	mov.w	fp, #0
 8005a8e:	4652      	mov	r2, sl
 8005a90:	465b      	mov	r3, fp
 8005a92:	f04f 0000 	mov.w	r0, #0
 8005a96:	f04f 0100 	mov.w	r1, #0
 8005a9a:	0159      	lsls	r1, r3, #5
 8005a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005aa0:	0150      	lsls	r0, r2, #5
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	ebb2 080a 	subs.w	r8, r2, sl
 8005aaa:	eb63 090b 	sbc.w	r9, r3, fp
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	f04f 0300 	mov.w	r3, #0
 8005ab6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005aba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005abe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005ac2:	ebb2 0408 	subs.w	r4, r2, r8
 8005ac6:	eb63 0509 	sbc.w	r5, r3, r9
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	00eb      	lsls	r3, r5, #3
 8005ad4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ad8:	00e2      	lsls	r2, r4, #3
 8005ada:	4614      	mov	r4, r2
 8005adc:	461d      	mov	r5, r3
 8005ade:	eb14 030a 	adds.w	r3, r4, sl
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	eb45 030b 	adc.w	r3, r5, fp
 8005ae8:	607b      	str	r3, [r7, #4]
 8005aea:	f04f 0200 	mov.w	r2, #0
 8005aee:	f04f 0300 	mov.w	r3, #0
 8005af2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005af6:	4629      	mov	r1, r5
 8005af8:	028b      	lsls	r3, r1, #10
 8005afa:	4621      	mov	r1, r4
 8005afc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b00:	4621      	mov	r1, r4
 8005b02:	028a      	lsls	r2, r1, #10
 8005b04:	4610      	mov	r0, r2
 8005b06:	4619      	mov	r1, r3
 8005b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	60bb      	str	r3, [r7, #8]
 8005b0e:	60fa      	str	r2, [r7, #12]
 8005b10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b14:	f7fb f8c0 	bl	8000c98 <__aeabi_uldivmod>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b20:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	0c1b      	lsrs	r3, r3, #16
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b38:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b3a:	e002      	b.n	8005b42 <HAL_RCC_GetSysClockFreq+0x172>
 8005b3c:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b40:	bf00      	nop
 8005b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b44:	4618      	mov	r0, r3
 8005b46:	3740      	adds	r7, #64	; 0x40
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b4e:	bf00      	nop
 8005b50:	40023800 	.word	0x40023800
 8005b54:	00f42400 	.word	0x00f42400
 8005b58:	017d7840 	.word	0x017d7840

08005b5c <HAL_RCC_GetHCLKFreq>:
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	4b03      	ldr	r3, [pc, #12]	; (8005b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	20000090 	.word	0x20000090

08005b74 <HAL_RCC_GetPCLK1Freq>:
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	f7ff fff0 	bl	8005b5c <HAL_RCC_GetHCLKFreq>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	0a9b      	lsrs	r3, r3, #10
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	4903      	ldr	r1, [pc, #12]	; (8005b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b8a:	5ccb      	ldrb	r3, [r1, r3]
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b90:	4618      	mov	r0, r3
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40023800 	.word	0x40023800
 8005b98:	0800a100 	.word	0x0800a100

08005b9c <HAL_RCC_GetPCLK2Freq>:
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	f7ff ffdc 	bl	8005b5c <HAL_RCC_GetHCLKFreq>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	0b5b      	lsrs	r3, r3, #13
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	4903      	ldr	r1, [pc, #12]	; (8005bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bb2:	5ccb      	ldrb	r3, [r1, r3]
 8005bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb8:	4618      	mov	r0, r3
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40023800 	.word	0x40023800
 8005bc0:	0800a100 	.word	0x0800a100

08005bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e041      	b.n	8005c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d106      	bne.n	8005bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fc fbda 	bl	80023a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3304      	adds	r3, #4
 8005c00:	4619      	mov	r1, r3
 8005c02:	4610      	mov	r0, r2
 8005c04:	f000 ff14 	bl	8006a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d001      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e044      	b.n	8005d06 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1e      	ldr	r2, [pc, #120]	; (8005d14 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d018      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca6:	d013      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1a      	ldr	r2, [pc, #104]	; (8005d18 <HAL_TIM_Base_Start_IT+0xb4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00e      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a19      	ldr	r2, [pc, #100]	; (8005d1c <HAL_TIM_Base_Start_IT+0xb8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d009      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <HAL_TIM_Base_Start_IT+0xbc>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d004      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a16      	ldr	r2, [pc, #88]	; (8005d24 <HAL_TIM_Base_Start_IT+0xc0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d111      	bne.n	8005cf4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b06      	cmp	r3, #6
 8005ce0:	d010      	beq.n	8005d04 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f042 0201 	orr.w	r2, r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf2:	e007      	b.n	8005d04 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	40010000 	.word	0x40010000
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	40000800 	.word	0x40000800
 8005d20:	40000c00 	.word	0x40000c00
 8005d24:	40014000 	.word	0x40014000

08005d28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0201 	bic.w	r2, r2, #1
 8005d3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6a1a      	ldr	r2, [r3, #32]
 8005d46:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10f      	bne.n	8005d70 <HAL_TIM_Base_Stop_IT+0x48>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6a1a      	ldr	r2, [r3, #32]
 8005d56:	f240 4344 	movw	r3, #1092	; 0x444
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d107      	bne.n	8005d70 <HAL_TIM_Base_Stop_IT+0x48>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0201 	bic.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e041      	b.n	8005e1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d106      	bne.n	8005db2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7fc fb77 	bl	80024a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2202      	movs	r2, #2
 8005db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	f000 fe33 	bl	8006a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d109      	bne.n	8005e48 <HAL_TIM_PWM_Start+0x24>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	bf14      	ite	ne
 8005e40:	2301      	movne	r3, #1
 8005e42:	2300      	moveq	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	e022      	b.n	8005e8e <HAL_TIM_PWM_Start+0x6a>
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d109      	bne.n	8005e62 <HAL_TIM_PWM_Start+0x3e>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	bf14      	ite	ne
 8005e5a:	2301      	movne	r3, #1
 8005e5c:	2300      	moveq	r3, #0
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	e015      	b.n	8005e8e <HAL_TIM_PWM_Start+0x6a>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d109      	bne.n	8005e7c <HAL_TIM_PWM_Start+0x58>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	bf14      	ite	ne
 8005e74:	2301      	movne	r3, #1
 8005e76:	2300      	moveq	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	e008      	b.n	8005e8e <HAL_TIM_PWM_Start+0x6a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	bf14      	ite	ne
 8005e88:	2301      	movne	r3, #1
 8005e8a:	2300      	moveq	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e068      	b.n	8005f68 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d104      	bne.n	8005ea6 <HAL_TIM_PWM_Start+0x82>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ea4:	e013      	b.n	8005ece <HAL_TIM_PWM_Start+0xaa>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	d104      	bne.n	8005eb6 <HAL_TIM_PWM_Start+0x92>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005eb4:	e00b      	b.n	8005ece <HAL_TIM_PWM_Start+0xaa>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d104      	bne.n	8005ec6 <HAL_TIM_PWM_Start+0xa2>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ec4:	e003      	b.n	8005ece <HAL_TIM_PWM_Start+0xaa>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f001 f9e5 	bl	80072a6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a23      	ldr	r2, [pc, #140]	; (8005f70 <HAL_TIM_PWM_Start+0x14c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d107      	bne.n	8005ef6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ef4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1d      	ldr	r2, [pc, #116]	; (8005f70 <HAL_TIM_PWM_Start+0x14c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d018      	beq.n	8005f32 <HAL_TIM_PWM_Start+0x10e>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f08:	d013      	beq.n	8005f32 <HAL_TIM_PWM_Start+0x10e>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a19      	ldr	r2, [pc, #100]	; (8005f74 <HAL_TIM_PWM_Start+0x150>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00e      	beq.n	8005f32 <HAL_TIM_PWM_Start+0x10e>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a17      	ldr	r2, [pc, #92]	; (8005f78 <HAL_TIM_PWM_Start+0x154>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <HAL_TIM_PWM_Start+0x10e>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a16      	ldr	r2, [pc, #88]	; (8005f7c <HAL_TIM_PWM_Start+0x158>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d004      	beq.n	8005f32 <HAL_TIM_PWM_Start+0x10e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a14      	ldr	r2, [pc, #80]	; (8005f80 <HAL_TIM_PWM_Start+0x15c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d111      	bne.n	8005f56 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b06      	cmp	r3, #6
 8005f42:	d010      	beq.n	8005f66 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0201 	orr.w	r2, r2, #1
 8005f52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f54:	e007      	b.n	8005f66 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f042 0201 	orr.w	r2, r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	40010000 	.word	0x40010000
 8005f74:	40000400 	.word	0x40000400
 8005f78:	40000800 	.word	0x40000800
 8005f7c:	40000c00 	.word	0x40000c00
 8005f80:	40014000 	.word	0x40014000

08005f84 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2200      	movs	r2, #0
 8005f94:	6839      	ldr	r1, [r7, #0]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f001 f985 	bl	80072a6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a29      	ldr	r2, [pc, #164]	; (8006048 <HAL_TIM_PWM_Stop+0xc4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d117      	bne.n	8005fd6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6a1a      	ldr	r2, [r3, #32]
 8005fac:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10f      	bne.n	8005fd6 <HAL_TIM_PWM_Stop+0x52>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6a1a      	ldr	r2, [r3, #32]
 8005fbc:	f240 4344 	movw	r3, #1092	; 0x444
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d107      	bne.n	8005fd6 <HAL_TIM_PWM_Stop+0x52>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6a1a      	ldr	r2, [r3, #32]
 8005fdc:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10f      	bne.n	8006006 <HAL_TIM_PWM_Stop+0x82>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6a1a      	ldr	r2, [r3, #32]
 8005fec:	f240 4344 	movw	r3, #1092	; 0x444
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d107      	bne.n	8006006 <HAL_TIM_PWM_Stop+0x82>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0201 	bic.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d104      	bne.n	8006016 <HAL_TIM_PWM_Stop+0x92>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006014:	e013      	b.n	800603e <HAL_TIM_PWM_Stop+0xba>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b04      	cmp	r3, #4
 800601a:	d104      	bne.n	8006026 <HAL_TIM_PWM_Stop+0xa2>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006024:	e00b      	b.n	800603e <HAL_TIM_PWM_Stop+0xba>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b08      	cmp	r3, #8
 800602a:	d104      	bne.n	8006036 <HAL_TIM_PWM_Stop+0xb2>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006034:	e003      	b.n	800603e <HAL_TIM_PWM_Stop+0xba>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40010000 	.word	0x40010000

0800604c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e041      	b.n	80060e2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d106      	bne.n	8006078 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fc fa36 	bl	80024e4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3304      	adds	r3, #4
 8006088:	4619      	mov	r1, r3
 800608a:	4610      	mov	r0, r2
 800608c:	f000 fcd0 	bl	8006a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d104      	bne.n	800610a <HAL_TIM_IC_Start_IT+0x1e>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006106:	b2db      	uxtb	r3, r3
 8006108:	e013      	b.n	8006132 <HAL_TIM_IC_Start_IT+0x46>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b04      	cmp	r3, #4
 800610e:	d104      	bne.n	800611a <HAL_TIM_IC_Start_IT+0x2e>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006116:	b2db      	uxtb	r3, r3
 8006118:	e00b      	b.n	8006132 <HAL_TIM_IC_Start_IT+0x46>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b08      	cmp	r3, #8
 800611e:	d104      	bne.n	800612a <HAL_TIM_IC_Start_IT+0x3e>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006126:	b2db      	uxtb	r3, r3
 8006128:	e003      	b.n	8006132 <HAL_TIM_IC_Start_IT+0x46>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006130:	b2db      	uxtb	r3, r3
 8006132:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d104      	bne.n	8006144 <HAL_TIM_IC_Start_IT+0x58>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006140:	b2db      	uxtb	r3, r3
 8006142:	e013      	b.n	800616c <HAL_TIM_IC_Start_IT+0x80>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b04      	cmp	r3, #4
 8006148:	d104      	bne.n	8006154 <HAL_TIM_IC_Start_IT+0x68>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006150:	b2db      	uxtb	r3, r3
 8006152:	e00b      	b.n	800616c <HAL_TIM_IC_Start_IT+0x80>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b08      	cmp	r3, #8
 8006158:	d104      	bne.n	8006164 <HAL_TIM_IC_Start_IT+0x78>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006160:	b2db      	uxtb	r3, r3
 8006162:	e003      	b.n	800616c <HAL_TIM_IC_Start_IT+0x80>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800616a:	b2db      	uxtb	r3, r3
 800616c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800616e:	7bbb      	ldrb	r3, [r7, #14]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d102      	bne.n	800617a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006174:	7b7b      	ldrb	r3, [r7, #13]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d001      	beq.n	800617e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e0c2      	b.n	8006304 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d104      	bne.n	800618e <HAL_TIM_IC_Start_IT+0xa2>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800618c:	e013      	b.n	80061b6 <HAL_TIM_IC_Start_IT+0xca>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b04      	cmp	r3, #4
 8006192:	d104      	bne.n	800619e <HAL_TIM_IC_Start_IT+0xb2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800619c:	e00b      	b.n	80061b6 <HAL_TIM_IC_Start_IT+0xca>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d104      	bne.n	80061ae <HAL_TIM_IC_Start_IT+0xc2>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061ac:	e003      	b.n	80061b6 <HAL_TIM_IC_Start_IT+0xca>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2202      	movs	r2, #2
 80061b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d104      	bne.n	80061c6 <HAL_TIM_IC_Start_IT+0xda>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061c4:	e013      	b.n	80061ee <HAL_TIM_IC_Start_IT+0x102>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	d104      	bne.n	80061d6 <HAL_TIM_IC_Start_IT+0xea>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061d4:	e00b      	b.n	80061ee <HAL_TIM_IC_Start_IT+0x102>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d104      	bne.n	80061e6 <HAL_TIM_IC_Start_IT+0xfa>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e4:	e003      	b.n	80061ee <HAL_TIM_IC_Start_IT+0x102>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2202      	movs	r2, #2
 80061ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b0c      	cmp	r3, #12
 80061f2:	d841      	bhi.n	8006278 <HAL_TIM_IC_Start_IT+0x18c>
 80061f4:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <HAL_TIM_IC_Start_IT+0x110>)
 80061f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fa:	bf00      	nop
 80061fc:	08006231 	.word	0x08006231
 8006200:	08006279 	.word	0x08006279
 8006204:	08006279 	.word	0x08006279
 8006208:	08006279 	.word	0x08006279
 800620c:	08006243 	.word	0x08006243
 8006210:	08006279 	.word	0x08006279
 8006214:	08006279 	.word	0x08006279
 8006218:	08006279 	.word	0x08006279
 800621c:	08006255 	.word	0x08006255
 8006220:	08006279 	.word	0x08006279
 8006224:	08006279 	.word	0x08006279
 8006228:	08006279 	.word	0x08006279
 800622c:	08006267 	.word	0x08006267
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0202 	orr.w	r2, r2, #2
 800623e:	60da      	str	r2, [r3, #12]
      break;
 8006240:	e01d      	b.n	800627e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68da      	ldr	r2, [r3, #12]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f042 0204 	orr.w	r2, r2, #4
 8006250:	60da      	str	r2, [r3, #12]
      break;
 8006252:	e014      	b.n	800627e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0208 	orr.w	r2, r2, #8
 8006262:	60da      	str	r2, [r3, #12]
      break;
 8006264:	e00b      	b.n	800627e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68da      	ldr	r2, [r3, #12]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0210 	orr.w	r2, r2, #16
 8006274:	60da      	str	r2, [r3, #12]
      break;
 8006276:	e002      	b.n	800627e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	73fb      	strb	r3, [r7, #15]
      break;
 800627c:	bf00      	nop
  }

  if (status == HAL_OK)
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d13e      	bne.n	8006302 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2201      	movs	r2, #1
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	4618      	mov	r0, r3
 800628e:	f001 f80a 	bl	80072a6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1d      	ldr	r2, [pc, #116]	; (800630c <HAL_TIM_IC_Start_IT+0x220>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d018      	beq.n	80062ce <HAL_TIM_IC_Start_IT+0x1e2>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a4:	d013      	beq.n	80062ce <HAL_TIM_IC_Start_IT+0x1e2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a19      	ldr	r2, [pc, #100]	; (8006310 <HAL_TIM_IC_Start_IT+0x224>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00e      	beq.n	80062ce <HAL_TIM_IC_Start_IT+0x1e2>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a17      	ldr	r2, [pc, #92]	; (8006314 <HAL_TIM_IC_Start_IT+0x228>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d009      	beq.n	80062ce <HAL_TIM_IC_Start_IT+0x1e2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a16      	ldr	r2, [pc, #88]	; (8006318 <HAL_TIM_IC_Start_IT+0x22c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d004      	beq.n	80062ce <HAL_TIM_IC_Start_IT+0x1e2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a14      	ldr	r2, [pc, #80]	; (800631c <HAL_TIM_IC_Start_IT+0x230>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d111      	bne.n	80062f2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b06      	cmp	r3, #6
 80062de:	d010      	beq.n	8006302 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f0:	e007      	b.n	8006302 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0201 	orr.w	r2, r2, #1
 8006300:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006302:	7bfb      	ldrb	r3, [r7, #15]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	40010000 	.word	0x40010000
 8006310:	40000400 	.word	0x40000400
 8006314:	40000800 	.word	0x40000800
 8006318:	40000c00 	.word	0x40000c00
 800631c:	40014000 	.word	0x40014000

08006320 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b0c      	cmp	r3, #12
 8006332:	d841      	bhi.n	80063b8 <HAL_TIM_IC_Stop_IT+0x98>
 8006334:	a201      	add	r2, pc, #4	; (adr r2, 800633c <HAL_TIM_IC_Stop_IT+0x1c>)
 8006336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633a:	bf00      	nop
 800633c:	08006371 	.word	0x08006371
 8006340:	080063b9 	.word	0x080063b9
 8006344:	080063b9 	.word	0x080063b9
 8006348:	080063b9 	.word	0x080063b9
 800634c:	08006383 	.word	0x08006383
 8006350:	080063b9 	.word	0x080063b9
 8006354:	080063b9 	.word	0x080063b9
 8006358:	080063b9 	.word	0x080063b9
 800635c:	08006395 	.word	0x08006395
 8006360:	080063b9 	.word	0x080063b9
 8006364:	080063b9 	.word	0x080063b9
 8006368:	080063b9 	.word	0x080063b9
 800636c:	080063a7 	.word	0x080063a7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0202 	bic.w	r2, r2, #2
 800637e:	60da      	str	r2, [r3, #12]
      break;
 8006380:	e01d      	b.n	80063be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0204 	bic.w	r2, r2, #4
 8006390:	60da      	str	r2, [r3, #12]
      break;
 8006392:	e014      	b.n	80063be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0208 	bic.w	r2, r2, #8
 80063a2:	60da      	str	r2, [r3, #12]
      break;
 80063a4:	e00b      	b.n	80063be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0210 	bic.w	r2, r2, #16
 80063b4:	60da      	str	r2, [r3, #12]
      break;
 80063b6:	e002      	b.n	80063be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
      break;
 80063bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80063be:	7bfb      	ldrb	r3, [r7, #15]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d156      	bne.n	8006472 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2200      	movs	r2, #0
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 ff6a 	bl	80072a6 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6a1a      	ldr	r2, [r3, #32]
 80063d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80063dc:	4013      	ands	r3, r2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10f      	bne.n	8006402 <HAL_TIM_IC_Stop_IT+0xe2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6a1a      	ldr	r2, [r3, #32]
 80063e8:	f240 4344 	movw	r3, #1092	; 0x444
 80063ec:	4013      	ands	r3, r2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d107      	bne.n	8006402 <HAL_TIM_IC_Stop_IT+0xe2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0201 	bic.w	r2, r2, #1
 8006400:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d104      	bne.n	8006412 <HAL_TIM_IC_Stop_IT+0xf2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006410:	e013      	b.n	800643a <HAL_TIM_IC_Stop_IT+0x11a>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b04      	cmp	r3, #4
 8006416:	d104      	bne.n	8006422 <HAL_TIM_IC_Stop_IT+0x102>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006420:	e00b      	b.n	800643a <HAL_TIM_IC_Stop_IT+0x11a>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b08      	cmp	r3, #8
 8006426:	d104      	bne.n	8006432 <HAL_TIM_IC_Stop_IT+0x112>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006430:	e003      	b.n	800643a <HAL_TIM_IC_Stop_IT+0x11a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d104      	bne.n	800644a <HAL_TIM_IC_Stop_IT+0x12a>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006448:	e013      	b.n	8006472 <HAL_TIM_IC_Stop_IT+0x152>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b04      	cmp	r3, #4
 800644e:	d104      	bne.n	800645a <HAL_TIM_IC_Stop_IT+0x13a>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006458:	e00b      	b.n	8006472 <HAL_TIM_IC_Stop_IT+0x152>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b08      	cmp	r3, #8
 800645e:	d104      	bne.n	800646a <HAL_TIM_IC_Stop_IT+0x14a>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006468:	e003      	b.n	8006472 <HAL_TIM_IC_Stop_IT+0x152>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8006472:	7bfb      	ldrb	r3, [r7, #15]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b02      	cmp	r3, #2
 8006490:	d122      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b02      	cmp	r3, #2
 800649e:	d11b      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f06f 0202 	mvn.w	r2, #2
 80064a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fa98 	bl	80069f4 <HAL_TIM_IC_CaptureCallback>
 80064c4:	e005      	b.n	80064d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fa8a 	bl	80069e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fa9b 	bl	8006a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0304 	and.w	r3, r3, #4
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d122      	bne.n	800652c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d11b      	bne.n	800652c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0204 	mvn.w	r2, #4
 80064fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2202      	movs	r2, #2
 8006502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fa6e 	bl	80069f4 <HAL_TIM_IC_CaptureCallback>
 8006518:	e005      	b.n	8006526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fa60 	bl	80069e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fa71 	bl	8006a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	2b08      	cmp	r3, #8
 8006538:	d122      	bne.n	8006580 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	2b08      	cmp	r3, #8
 8006546:	d11b      	bne.n	8006580 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0208 	mvn.w	r2, #8
 8006550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2204      	movs	r2, #4
 8006556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	f003 0303 	and.w	r3, r3, #3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fa44 	bl	80069f4 <HAL_TIM_IC_CaptureCallback>
 800656c:	e005      	b.n	800657a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fa36 	bl	80069e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fa47 	bl	8006a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	f003 0310 	and.w	r3, r3, #16
 800658a:	2b10      	cmp	r3, #16
 800658c:	d122      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f003 0310 	and.w	r3, r3, #16
 8006598:	2b10      	cmp	r3, #16
 800659a:	d11b      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f06f 0210 	mvn.w	r2, #16
 80065a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2208      	movs	r2, #8
 80065aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fa1a 	bl	80069f4 <HAL_TIM_IC_CaptureCallback>
 80065c0:	e005      	b.n	80065ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fa0c 	bl	80069e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fa1d 	bl	8006a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d10e      	bne.n	8006600 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d107      	bne.n	8006600 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0201 	mvn.w	r2, #1
 80065f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f9e6 	bl	80069cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660a:	2b80      	cmp	r3, #128	; 0x80
 800660c:	d10e      	bne.n	800662c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006618:	2b80      	cmp	r3, #128	; 0x80
 800661a:	d107      	bne.n	800662c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f001 f88e 	bl	8007748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006636:	2b40      	cmp	r3, #64	; 0x40
 8006638:	d10e      	bne.n	8006658 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006644:	2b40      	cmp	r3, #64	; 0x40
 8006646:	d107      	bne.n	8006658 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f9e2 	bl	8006a1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b20      	cmp	r3, #32
 8006664:	d10e      	bne.n	8006684 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b20      	cmp	r3, #32
 8006672:	d107      	bne.n	8006684 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0220 	mvn.w	r2, #32
 800667c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f001 f858 	bl	8007734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006684:	bf00      	nop
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d101      	bne.n	80066aa <HAL_TIM_IC_ConfigChannel+0x1e>
 80066a6:	2302      	movs	r3, #2
 80066a8:	e088      	b.n	80067bc <HAL_TIM_IC_ConfigChannel+0x130>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d11b      	bne.n	80066f0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6818      	ldr	r0, [r3, #0]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	6819      	ldr	r1, [r3, #0]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f000 fc50 	bl	8006f6c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699a      	ldr	r2, [r3, #24]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 020c 	bic.w	r2, r2, #12
 80066da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6999      	ldr	r1, [r3, #24]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	689a      	ldr	r2, [r3, #8]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	619a      	str	r2, [r3, #24]
 80066ee:	e060      	b.n	80067b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	d11c      	bne.n	8006730 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	6819      	ldr	r1, [r3, #0]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f000 fcc8 	bl	800709a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699a      	ldr	r2, [r3, #24]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006718:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6999      	ldr	r1, [r3, #24]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	021a      	lsls	r2, r3, #8
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	619a      	str	r2, [r3, #24]
 800672e:	e040      	b.n	80067b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b08      	cmp	r3, #8
 8006734:	d11b      	bne.n	800676e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6818      	ldr	r0, [r3, #0]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	6819      	ldr	r1, [r3, #0]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f000 fd15 	bl	8007174 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69da      	ldr	r2, [r3, #28]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 020c 	bic.w	r2, r2, #12
 8006758:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69d9      	ldr	r1, [r3, #28]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	61da      	str	r2, [r3, #28]
 800676c:	e021      	b.n	80067b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b0c      	cmp	r3, #12
 8006772:	d11c      	bne.n	80067ae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6818      	ldr	r0, [r3, #0]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	6819      	ldr	r1, [r3, #0]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f000 fd32 	bl	80071ec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	69da      	ldr	r2, [r3, #28]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006796:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	69d9      	ldr	r1, [r3, #28]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	021a      	lsls	r2, r3, #8
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	61da      	str	r2, [r3, #28]
 80067ac:	e001      	b.n	80067b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d101      	bne.n	80067e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067de:	2302      	movs	r3, #2
 80067e0:	e0ae      	b.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b0c      	cmp	r3, #12
 80067ee:	f200 809f 	bhi.w	8006930 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80067f2:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f8:	0800682d 	.word	0x0800682d
 80067fc:	08006931 	.word	0x08006931
 8006800:	08006931 	.word	0x08006931
 8006804:	08006931 	.word	0x08006931
 8006808:	0800686d 	.word	0x0800686d
 800680c:	08006931 	.word	0x08006931
 8006810:	08006931 	.word	0x08006931
 8006814:	08006931 	.word	0x08006931
 8006818:	080068af 	.word	0x080068af
 800681c:	08006931 	.word	0x08006931
 8006820:	08006931 	.word	0x08006931
 8006824:	08006931 	.word	0x08006931
 8006828:	080068ef 	.word	0x080068ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68b9      	ldr	r1, [r7, #8]
 8006832:	4618      	mov	r0, r3
 8006834:	f000 f97c 	bl	8006b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699a      	ldr	r2, [r3, #24]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f042 0208 	orr.w	r2, r2, #8
 8006846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699a      	ldr	r2, [r3, #24]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0204 	bic.w	r2, r2, #4
 8006856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6999      	ldr	r1, [r3, #24]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	691a      	ldr	r2, [r3, #16]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	619a      	str	r2, [r3, #24]
      break;
 800686a:	e064      	b.n	8006936 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68b9      	ldr	r1, [r7, #8]
 8006872:	4618      	mov	r0, r3
 8006874:	f000 f9c2 	bl	8006bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699a      	ldr	r2, [r3, #24]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6999      	ldr	r1, [r3, #24]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	021a      	lsls	r2, r3, #8
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	619a      	str	r2, [r3, #24]
      break;
 80068ac:	e043      	b.n	8006936 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68b9      	ldr	r1, [r7, #8]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fa0d 	bl	8006cd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	69da      	ldr	r2, [r3, #28]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f042 0208 	orr.w	r2, r2, #8
 80068c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69da      	ldr	r2, [r3, #28]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0204 	bic.w	r2, r2, #4
 80068d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69d9      	ldr	r1, [r3, #28]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	691a      	ldr	r2, [r3, #16]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	61da      	str	r2, [r3, #28]
      break;
 80068ec:	e023      	b.n	8006936 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68b9      	ldr	r1, [r7, #8]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fa57 	bl	8006da8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69da      	ldr	r2, [r3, #28]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69da      	ldr	r2, [r3, #28]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69d9      	ldr	r1, [r3, #28]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	021a      	lsls	r2, r3, #8
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	61da      	str	r2, [r3, #28]
      break;
 800692e:	e002      	b.n	8006936 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	75fb      	strb	r3, [r7, #23]
      break;
 8006934:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800693e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_TIM_SlaveConfigSynchro+0x18>
 800695c:	2302      	movs	r3, #2
 800695e:	e031      	b.n	80069c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fa68 	bl	8006e48 <TIM_SlaveTimer_SetConfig>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d009      	beq.n	8006992 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e018      	b.n	80069c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069b0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3708      	adds	r7, #8
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a34      	ldr	r2, [pc, #208]	; (8006b14 <TIM_Base_SetConfig+0xe4>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00f      	beq.n	8006a68 <TIM_Base_SetConfig+0x38>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a4e:	d00b      	beq.n	8006a68 <TIM_Base_SetConfig+0x38>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a31      	ldr	r2, [pc, #196]	; (8006b18 <TIM_Base_SetConfig+0xe8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d007      	beq.n	8006a68 <TIM_Base_SetConfig+0x38>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a30      	ldr	r2, [pc, #192]	; (8006b1c <TIM_Base_SetConfig+0xec>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d003      	beq.n	8006a68 <TIM_Base_SetConfig+0x38>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a2f      	ldr	r2, [pc, #188]	; (8006b20 <TIM_Base_SetConfig+0xf0>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d108      	bne.n	8006a7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a25      	ldr	r2, [pc, #148]	; (8006b14 <TIM_Base_SetConfig+0xe4>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d01b      	beq.n	8006aba <TIM_Base_SetConfig+0x8a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a88:	d017      	beq.n	8006aba <TIM_Base_SetConfig+0x8a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a22      	ldr	r2, [pc, #136]	; (8006b18 <TIM_Base_SetConfig+0xe8>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <TIM_Base_SetConfig+0x8a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a21      	ldr	r2, [pc, #132]	; (8006b1c <TIM_Base_SetConfig+0xec>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00f      	beq.n	8006aba <TIM_Base_SetConfig+0x8a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a20      	ldr	r2, [pc, #128]	; (8006b20 <TIM_Base_SetConfig+0xf0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00b      	beq.n	8006aba <TIM_Base_SetConfig+0x8a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a1f      	ldr	r2, [pc, #124]	; (8006b24 <TIM_Base_SetConfig+0xf4>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d007      	beq.n	8006aba <TIM_Base_SetConfig+0x8a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a1e      	ldr	r2, [pc, #120]	; (8006b28 <TIM_Base_SetConfig+0xf8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d003      	beq.n	8006aba <TIM_Base_SetConfig+0x8a>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a1d      	ldr	r2, [pc, #116]	; (8006b2c <TIM_Base_SetConfig+0xfc>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d108      	bne.n	8006acc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a08      	ldr	r2, [pc, #32]	; (8006b14 <TIM_Base_SetConfig+0xe4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d103      	bne.n	8006b00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	691a      	ldr	r2, [r3, #16]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	615a      	str	r2, [r3, #20]
}
 8006b06:	bf00      	nop
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	40010000 	.word	0x40010000
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40000800 	.word	0x40000800
 8006b20:	40000c00 	.word	0x40000c00
 8006b24:	40014000 	.word	0x40014000
 8006b28:	40014400 	.word	0x40014400
 8006b2c:	40014800 	.word	0x40014800

08006b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	f023 0201 	bic.w	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 0303 	bic.w	r3, r3, #3
 8006b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f023 0302 	bic.w	r3, r3, #2
 8006b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a1c      	ldr	r2, [pc, #112]	; (8006bf8 <TIM_OC1_SetConfig+0xc8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d10c      	bne.n	8006ba6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f023 0308 	bic.w	r3, r3, #8
 8006b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f023 0304 	bic.w	r3, r3, #4
 8006ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a13      	ldr	r2, [pc, #76]	; (8006bf8 <TIM_OC1_SetConfig+0xc8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d111      	bne.n	8006bd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	621a      	str	r2, [r3, #32]
}
 8006bec:	bf00      	nop
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	40010000 	.word	0x40010000

08006bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	f023 0210 	bic.w	r2, r3, #16
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	021b      	lsls	r3, r3, #8
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f023 0320 	bic.w	r3, r3, #32
 8006c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a1e      	ldr	r2, [pc, #120]	; (8006cd0 <TIM_OC2_SetConfig+0xd4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d10d      	bne.n	8006c78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	011b      	lsls	r3, r3, #4
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a15      	ldr	r2, [pc, #84]	; (8006cd0 <TIM_OC2_SetConfig+0xd4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d113      	bne.n	8006ca8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	621a      	str	r2, [r3, #32]
}
 8006cc2:	bf00      	nop
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	40010000 	.word	0x40010000

08006cd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 0303 	bic.w	r3, r3, #3
 8006d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	021b      	lsls	r3, r3, #8
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a1d      	ldr	r2, [pc, #116]	; (8006da4 <TIM_OC3_SetConfig+0xd0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d10d      	bne.n	8006d4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	021b      	lsls	r3, r3, #8
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a14      	ldr	r2, [pc, #80]	; (8006da4 <TIM_OC3_SetConfig+0xd0>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d113      	bne.n	8006d7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	621a      	str	r2, [r3, #32]
}
 8006d98:	bf00      	nop
 8006d9a:	371c      	adds	r7, #28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	40010000 	.word	0x40010000

08006da8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	031b      	lsls	r3, r3, #12
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a10      	ldr	r2, [pc, #64]	; (8006e44 <TIM_OC4_SetConfig+0x9c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d109      	bne.n	8006e1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	019b      	lsls	r3, r3, #6
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	621a      	str	r2, [r3, #32]
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40010000 	.word	0x40010000

08006e48 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e64:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	f023 0307 	bic.w	r3, r3, #7
 8006e76:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2b70      	cmp	r3, #112	; 0x70
 8006e90:	d01a      	beq.n	8006ec8 <TIM_SlaveTimer_SetConfig+0x80>
 8006e92:	2b70      	cmp	r3, #112	; 0x70
 8006e94:	d860      	bhi.n	8006f58 <TIM_SlaveTimer_SetConfig+0x110>
 8006e96:	2b60      	cmp	r3, #96	; 0x60
 8006e98:	d054      	beq.n	8006f44 <TIM_SlaveTimer_SetConfig+0xfc>
 8006e9a:	2b60      	cmp	r3, #96	; 0x60
 8006e9c:	d85c      	bhi.n	8006f58 <TIM_SlaveTimer_SetConfig+0x110>
 8006e9e:	2b50      	cmp	r3, #80	; 0x50
 8006ea0:	d046      	beq.n	8006f30 <TIM_SlaveTimer_SetConfig+0xe8>
 8006ea2:	2b50      	cmp	r3, #80	; 0x50
 8006ea4:	d858      	bhi.n	8006f58 <TIM_SlaveTimer_SetConfig+0x110>
 8006ea6:	2b40      	cmp	r3, #64	; 0x40
 8006ea8:	d019      	beq.n	8006ede <TIM_SlaveTimer_SetConfig+0x96>
 8006eaa:	2b40      	cmp	r3, #64	; 0x40
 8006eac:	d854      	bhi.n	8006f58 <TIM_SlaveTimer_SetConfig+0x110>
 8006eae:	2b30      	cmp	r3, #48	; 0x30
 8006eb0:	d055      	beq.n	8006f5e <TIM_SlaveTimer_SetConfig+0x116>
 8006eb2:	2b30      	cmp	r3, #48	; 0x30
 8006eb4:	d850      	bhi.n	8006f58 <TIM_SlaveTimer_SetConfig+0x110>
 8006eb6:	2b20      	cmp	r3, #32
 8006eb8:	d051      	beq.n	8006f5e <TIM_SlaveTimer_SetConfig+0x116>
 8006eba:	2b20      	cmp	r3, #32
 8006ebc:	d84c      	bhi.n	8006f58 <TIM_SlaveTimer_SetConfig+0x110>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d04d      	beq.n	8006f5e <TIM_SlaveTimer_SetConfig+0x116>
 8006ec2:	2b10      	cmp	r3, #16
 8006ec4:	d04b      	beq.n	8006f5e <TIM_SlaveTimer_SetConfig+0x116>
 8006ec6:	e047      	b.n	8006f58 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6818      	ldr	r0, [r3, #0]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	68d9      	ldr	r1, [r3, #12]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	f000 f9c5 	bl	8007266 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006edc:	e040      	b.n	8006f60 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b05      	cmp	r3, #5
 8006ee4:	d101      	bne.n	8006eea <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e03b      	b.n	8006f62 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6a1a      	ldr	r2, [r3, #32]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0201 	bic.w	r2, r2, #1
 8006f00:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f10:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	011b      	lsls	r3, r3, #4
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	621a      	str	r2, [r3, #32]
      break;
 8006f2e:	e017      	b.n	8006f60 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6818      	ldr	r0, [r3, #0]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	6899      	ldr	r1, [r3, #8]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f000 f87d 	bl	800703c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006f42:	e00d      	b.n	8006f60 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6818      	ldr	r0, [r3, #0]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	6899      	ldr	r1, [r3, #8]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	461a      	mov	r2, r3
 8006f52:	f000 f8df 	bl	8007114 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006f56:	e003      	b.n	8006f60 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f5c:	e000      	b.n	8006f60 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006f5e:	bf00      	nop
  }

  return status;
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
	...

08006f6c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	f023 0201 	bic.w	r2, r3, #1
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4a24      	ldr	r2, [pc, #144]	; (8007028 <TIM_TI1_SetConfig+0xbc>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d013      	beq.n	8006fc2 <TIM_TI1_SetConfig+0x56>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa0:	d00f      	beq.n	8006fc2 <TIM_TI1_SetConfig+0x56>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	4a21      	ldr	r2, [pc, #132]	; (800702c <TIM_TI1_SetConfig+0xc0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d00b      	beq.n	8006fc2 <TIM_TI1_SetConfig+0x56>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4a20      	ldr	r2, [pc, #128]	; (8007030 <TIM_TI1_SetConfig+0xc4>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d007      	beq.n	8006fc2 <TIM_TI1_SetConfig+0x56>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4a1f      	ldr	r2, [pc, #124]	; (8007034 <TIM_TI1_SetConfig+0xc8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d003      	beq.n	8006fc2 <TIM_TI1_SetConfig+0x56>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4a1e      	ldr	r2, [pc, #120]	; (8007038 <TIM_TI1_SetConfig+0xcc>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d101      	bne.n	8006fc6 <TIM_TI1_SetConfig+0x5a>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e000      	b.n	8006fc8 <TIM_TI1_SetConfig+0x5c>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d008      	beq.n	8006fde <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f023 0303 	bic.w	r3, r3, #3
 8006fd2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	e003      	b.n	8006fe6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f043 0301 	orr.w	r3, r3, #1
 8006fe4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	011b      	lsls	r3, r3, #4
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f023 030a 	bic.w	r3, r3, #10
 8007000:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f003 030a 	and.w	r3, r3, #10
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	4313      	orrs	r3, r2
 800700c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	621a      	str	r2, [r3, #32]
}
 800701a:	bf00      	nop
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	40010000 	.word	0x40010000
 800702c:	40000400 	.word	0x40000400
 8007030:	40000800 	.word	0x40000800
 8007034:	40000c00 	.word	0x40000c00
 8007038:	40014000 	.word	0x40014000

0800703c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	f023 0201 	bic.w	r2, r3, #1
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4313      	orrs	r3, r2
 8007070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f023 030a 	bic.w	r3, r3, #10
 8007078:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	4313      	orrs	r3, r2
 8007080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	621a      	str	r2, [r3, #32]
}
 800708e:	bf00      	nop
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800709a:	b480      	push	{r7}
 800709c:	b087      	sub	sp, #28
 800709e:	af00      	add	r7, sp, #0
 80070a0:	60f8      	str	r0, [r7, #12]
 80070a2:	60b9      	str	r1, [r7, #8]
 80070a4:	607a      	str	r2, [r7, #4]
 80070a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	f023 0210 	bic.w	r2, r3, #16
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	031b      	lsls	r3, r3, #12
 80070de:	b29b      	uxth	r3, r3
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	621a      	str	r2, [r3, #32]
}
 8007108:	bf00      	nop
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	f023 0210 	bic.w	r2, r3, #16
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800713e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	031b      	lsls	r3, r3, #12
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	4313      	orrs	r3, r2
 8007148:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007150:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	4313      	orrs	r3, r2
 800715a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	621a      	str	r2, [r3, #32]
}
 8007168:	bf00      	nop
 800716a:	371c      	adds	r7, #28
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
 8007180:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f023 0303 	bic.w	r3, r3, #3
 80071a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80071c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	621a      	str	r2, [r3, #32]
}
 80071e0:	bf00      	nop
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007218:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	021b      	lsls	r3, r3, #8
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800722a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	031b      	lsls	r3, r3, #12
 8007230:	b29b      	uxth	r3, r3
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800723e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	031b      	lsls	r3, r3, #12
 8007244:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	4313      	orrs	r3, r2
 800724c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	621a      	str	r2, [r3, #32]
}
 800725a:	bf00      	nop
 800725c:	371c      	adds	r7, #28
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007266:	b480      	push	{r7}
 8007268:	b087      	sub	sp, #28
 800726a:	af00      	add	r7, sp, #0
 800726c:	60f8      	str	r0, [r7, #12]
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	607a      	str	r2, [r7, #4]
 8007272:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007280:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	021a      	lsls	r2, r3, #8
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	431a      	orrs	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	4313      	orrs	r3, r2
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	4313      	orrs	r3, r2
 8007292:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	609a      	str	r2, [r3, #8]
}
 800729a:	bf00      	nop
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b087      	sub	sp, #28
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f003 031f 	and.w	r3, r3, #31
 80072b8:	2201      	movs	r2, #1
 80072ba:	fa02 f303 	lsl.w	r3, r2, r3
 80072be:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a1a      	ldr	r2, [r3, #32]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	43db      	mvns	r3, r3
 80072c8:	401a      	ands	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a1a      	ldr	r2, [r3, #32]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f003 031f 	and.w	r3, r3, #31
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	fa01 f303 	lsl.w	r3, r1, r3
 80072de:	431a      	orrs	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	621a      	str	r2, [r3, #32]
}
 80072e4:	bf00      	nop
 80072e6:	371c      	adds	r7, #28
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08a      	sub	sp, #40	; 0x28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e09a      	b.n	800743a <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b00      	cmp	r3, #0
 800730e:	d106      	bne.n	800731e <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7fb f873 	bl	8002404 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2202      	movs	r2, #2
 8007322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	3304      	adds	r3, #4
 800732e:	4619      	mov	r1, r3
 8007330:	4610      	mov	r0, r2
 8007332:	f7ff fb7d 	bl	8006a30 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6818      	ldr	r0, [r3, #0]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	6819      	ldr	r1, [r3, #0]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2203      	movs	r2, #3
 8007344:	f7ff fe12 	bl	8006f6c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	699a      	ldr	r2, [r3, #24]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 020c 	bic.w	r2, r2, #12
 8007356:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6999      	ldr	r1, [r3, #24]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007378:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007388:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	689a      	ldr	r2, [r3, #8]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007398:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0207 	bic.w	r2, r2, #7
 80073a8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f042 0204 	orr.w	r2, r2, #4
 80073b8:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80073ba:	2300      	movs	r3, #0
 80073bc:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80073be:	2300      	movs	r3, #0
 80073c0:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80073c2:	2370      	movs	r3, #112	; 0x70
 80073c4:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80073c6:	2300      	movs	r3, #0
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80073ca:	2300      	movs	r3, #0
 80073cc:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f107 020c 	add.w	r2, r7, #12
 80073e0:	4611      	mov	r1, r2
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff fc0a 	bl	8006bfc <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80073f6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8007406:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3728      	adds	r7, #40	; 0x28
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007452:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800745a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007462:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800746a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d108      	bne.n	8007484 <HAL_TIMEx_HallSensor_Start+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007472:	7bbb      	ldrb	r3, [r7, #14]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d105      	bne.n	8007484 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007478:	7b7b      	ldrb	r3, [r7, #13]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d102      	bne.n	8007484 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800747e:	7b3b      	ldrb	r3, [r7, #12]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d001      	beq.n	8007488 <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e04f      	b.n	8007528 <HAL_TIMEx_HallSensor_Start+0xe4>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2202      	movs	r2, #2
 800748c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2202      	movs	r2, #2
 8007494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2201      	movs	r2, #1
 80074ae:	2100      	movs	r1, #0
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7ff fef8 	bl	80072a6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a1d      	ldr	r2, [pc, #116]	; (8007530 <HAL_TIMEx_HallSensor_Start+0xec>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d018      	beq.n	80074f2 <HAL_TIMEx_HallSensor_Start+0xae>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c8:	d013      	beq.n	80074f2 <HAL_TIMEx_HallSensor_Start+0xae>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a19      	ldr	r2, [pc, #100]	; (8007534 <HAL_TIMEx_HallSensor_Start+0xf0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00e      	beq.n	80074f2 <HAL_TIMEx_HallSensor_Start+0xae>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a17      	ldr	r2, [pc, #92]	; (8007538 <HAL_TIMEx_HallSensor_Start+0xf4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d009      	beq.n	80074f2 <HAL_TIMEx_HallSensor_Start+0xae>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a16      	ldr	r2, [pc, #88]	; (800753c <HAL_TIMEx_HallSensor_Start+0xf8>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d004      	beq.n	80074f2 <HAL_TIMEx_HallSensor_Start+0xae>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a14      	ldr	r2, [pc, #80]	; (8007540 <HAL_TIMEx_HallSensor_Start+0xfc>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d111      	bne.n	8007516 <HAL_TIMEx_HallSensor_Start+0xd2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f003 0307 	and.w	r3, r3, #7
 80074fc:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b06      	cmp	r3, #6
 8007502:	d010      	beq.n	8007526 <HAL_TIMEx_HallSensor_Start+0xe2>
    {
      __HAL_TIM_ENABLE(htim);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f042 0201 	orr.w	r2, r2, #1
 8007512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007514:	e007      	b.n	8007526 <HAL_TIMEx_HallSensor_Start+0xe2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f042 0201 	orr.w	r2, r2, #1
 8007524:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40010000 	.word	0x40010000
 8007534:	40000400 	.word	0x40000400
 8007538:	40000800 	.word	0x40000800
 800753c:	40000c00 	.word	0x40000c00
 8007540:	40014000 	.word	0x40014000

08007544 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2200      	movs	r2, #0
 8007552:	2100      	movs	r1, #0
 8007554:	4618      	mov	r0, r3
 8007556:	f7ff fea6 	bl	80072a6 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6a1a      	ldr	r2, [r3, #32]
 8007560:	f241 1311 	movw	r3, #4369	; 0x1111
 8007564:	4013      	ands	r3, r2
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10f      	bne.n	800758a <HAL_TIMEx_HallSensor_Stop+0x46>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6a1a      	ldr	r2, [r3, #32]
 8007570:	f240 4344 	movw	r3, #1092	; 0x444
 8007574:	4013      	ands	r3, r2
 8007576:	2b00      	cmp	r3, #0
 8007578:	d107      	bne.n	800758a <HAL_TIMEx_HallSensor_Stop+0x46>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0201 	bic.w	r2, r2, #1
 8007588:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d101      	bne.n	80075cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075c8:	2302      	movs	r3, #2
 80075ca:	e050      	b.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2202      	movs	r2, #2
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a1c      	ldr	r2, [pc, #112]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d018      	beq.n	8007642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007618:	d013      	beq.n	8007642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a18      	ldr	r2, [pc, #96]	; (8007680 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d00e      	beq.n	8007642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a16      	ldr	r2, [pc, #88]	; (8007684 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d009      	beq.n	8007642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a15      	ldr	r2, [pc, #84]	; (8007688 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d004      	beq.n	8007642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a13      	ldr	r2, [pc, #76]	; (800768c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d10c      	bne.n	800765c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	4313      	orrs	r3, r2
 8007652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	40010000 	.word	0x40010000
 8007680:	40000400 	.word	0x40000400
 8007684:	40000800 	.word	0x40000800
 8007688:	40000c00 	.word	0x40000c00
 800768c:	40014000 	.word	0x40014000

08007690 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d101      	bne.n	80076ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076a8:	2302      	movs	r3, #2
 80076aa:	e03d      	b.n	8007728 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	4313      	orrs	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <__cvt>:
 800775c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007760:	ec55 4b10 	vmov	r4, r5, d0
 8007764:	2d00      	cmp	r5, #0
 8007766:	460e      	mov	r6, r1
 8007768:	4619      	mov	r1, r3
 800776a:	462b      	mov	r3, r5
 800776c:	bfbb      	ittet	lt
 800776e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007772:	461d      	movlt	r5, r3
 8007774:	2300      	movge	r3, #0
 8007776:	232d      	movlt	r3, #45	; 0x2d
 8007778:	700b      	strb	r3, [r1, #0]
 800777a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800777c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007780:	4691      	mov	r9, r2
 8007782:	f023 0820 	bic.w	r8, r3, #32
 8007786:	bfbc      	itt	lt
 8007788:	4622      	movlt	r2, r4
 800778a:	4614      	movlt	r4, r2
 800778c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007790:	d005      	beq.n	800779e <__cvt+0x42>
 8007792:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007796:	d100      	bne.n	800779a <__cvt+0x3e>
 8007798:	3601      	adds	r6, #1
 800779a:	2102      	movs	r1, #2
 800779c:	e000      	b.n	80077a0 <__cvt+0x44>
 800779e:	2103      	movs	r1, #3
 80077a0:	ab03      	add	r3, sp, #12
 80077a2:	9301      	str	r3, [sp, #4]
 80077a4:	ab02      	add	r3, sp, #8
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	ec45 4b10 	vmov	d0, r4, r5
 80077ac:	4653      	mov	r3, sl
 80077ae:	4632      	mov	r2, r6
 80077b0:	f000 fe4a 	bl	8008448 <_dtoa_r>
 80077b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077b8:	4607      	mov	r7, r0
 80077ba:	d102      	bne.n	80077c2 <__cvt+0x66>
 80077bc:	f019 0f01 	tst.w	r9, #1
 80077c0:	d022      	beq.n	8007808 <__cvt+0xac>
 80077c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077c6:	eb07 0906 	add.w	r9, r7, r6
 80077ca:	d110      	bne.n	80077ee <__cvt+0x92>
 80077cc:	783b      	ldrb	r3, [r7, #0]
 80077ce:	2b30      	cmp	r3, #48	; 0x30
 80077d0:	d10a      	bne.n	80077e8 <__cvt+0x8c>
 80077d2:	2200      	movs	r2, #0
 80077d4:	2300      	movs	r3, #0
 80077d6:	4620      	mov	r0, r4
 80077d8:	4629      	mov	r1, r5
 80077da:	f7f9 f97d 	bl	8000ad8 <__aeabi_dcmpeq>
 80077de:	b918      	cbnz	r0, 80077e8 <__cvt+0x8c>
 80077e0:	f1c6 0601 	rsb	r6, r6, #1
 80077e4:	f8ca 6000 	str.w	r6, [sl]
 80077e8:	f8da 3000 	ldr.w	r3, [sl]
 80077ec:	4499      	add	r9, r3
 80077ee:	2200      	movs	r2, #0
 80077f0:	2300      	movs	r3, #0
 80077f2:	4620      	mov	r0, r4
 80077f4:	4629      	mov	r1, r5
 80077f6:	f7f9 f96f 	bl	8000ad8 <__aeabi_dcmpeq>
 80077fa:	b108      	cbz	r0, 8007800 <__cvt+0xa4>
 80077fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007800:	2230      	movs	r2, #48	; 0x30
 8007802:	9b03      	ldr	r3, [sp, #12]
 8007804:	454b      	cmp	r3, r9
 8007806:	d307      	bcc.n	8007818 <__cvt+0xbc>
 8007808:	9b03      	ldr	r3, [sp, #12]
 800780a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800780c:	1bdb      	subs	r3, r3, r7
 800780e:	4638      	mov	r0, r7
 8007810:	6013      	str	r3, [r2, #0]
 8007812:	b004      	add	sp, #16
 8007814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007818:	1c59      	adds	r1, r3, #1
 800781a:	9103      	str	r1, [sp, #12]
 800781c:	701a      	strb	r2, [r3, #0]
 800781e:	e7f0      	b.n	8007802 <__cvt+0xa6>

08007820 <__exponent>:
 8007820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007822:	4603      	mov	r3, r0
 8007824:	2900      	cmp	r1, #0
 8007826:	bfb8      	it	lt
 8007828:	4249      	neglt	r1, r1
 800782a:	f803 2b02 	strb.w	r2, [r3], #2
 800782e:	bfb4      	ite	lt
 8007830:	222d      	movlt	r2, #45	; 0x2d
 8007832:	222b      	movge	r2, #43	; 0x2b
 8007834:	2909      	cmp	r1, #9
 8007836:	7042      	strb	r2, [r0, #1]
 8007838:	dd2a      	ble.n	8007890 <__exponent+0x70>
 800783a:	f10d 0207 	add.w	r2, sp, #7
 800783e:	4617      	mov	r7, r2
 8007840:	260a      	movs	r6, #10
 8007842:	4694      	mov	ip, r2
 8007844:	fb91 f5f6 	sdiv	r5, r1, r6
 8007848:	fb06 1415 	mls	r4, r6, r5, r1
 800784c:	3430      	adds	r4, #48	; 0x30
 800784e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007852:	460c      	mov	r4, r1
 8007854:	2c63      	cmp	r4, #99	; 0x63
 8007856:	f102 32ff 	add.w	r2, r2, #4294967295
 800785a:	4629      	mov	r1, r5
 800785c:	dcf1      	bgt.n	8007842 <__exponent+0x22>
 800785e:	3130      	adds	r1, #48	; 0x30
 8007860:	f1ac 0402 	sub.w	r4, ip, #2
 8007864:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007868:	1c41      	adds	r1, r0, #1
 800786a:	4622      	mov	r2, r4
 800786c:	42ba      	cmp	r2, r7
 800786e:	d30a      	bcc.n	8007886 <__exponent+0x66>
 8007870:	f10d 0209 	add.w	r2, sp, #9
 8007874:	eba2 020c 	sub.w	r2, r2, ip
 8007878:	42bc      	cmp	r4, r7
 800787a:	bf88      	it	hi
 800787c:	2200      	movhi	r2, #0
 800787e:	4413      	add	r3, r2
 8007880:	1a18      	subs	r0, r3, r0
 8007882:	b003      	add	sp, #12
 8007884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007886:	f812 5b01 	ldrb.w	r5, [r2], #1
 800788a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800788e:	e7ed      	b.n	800786c <__exponent+0x4c>
 8007890:	2330      	movs	r3, #48	; 0x30
 8007892:	3130      	adds	r1, #48	; 0x30
 8007894:	7083      	strb	r3, [r0, #2]
 8007896:	70c1      	strb	r1, [r0, #3]
 8007898:	1d03      	adds	r3, r0, #4
 800789a:	e7f1      	b.n	8007880 <__exponent+0x60>

0800789c <_printf_float>:
 800789c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a0:	ed2d 8b02 	vpush	{d8}
 80078a4:	b08d      	sub	sp, #52	; 0x34
 80078a6:	460c      	mov	r4, r1
 80078a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80078ac:	4616      	mov	r6, r2
 80078ae:	461f      	mov	r7, r3
 80078b0:	4605      	mov	r5, r0
 80078b2:	f000 fcc7 	bl	8008244 <_localeconv_r>
 80078b6:	f8d0 a000 	ldr.w	sl, [r0]
 80078ba:	4650      	mov	r0, sl
 80078bc:	f7f8 fce0 	bl	8000280 <strlen>
 80078c0:	2300      	movs	r3, #0
 80078c2:	930a      	str	r3, [sp, #40]	; 0x28
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	9305      	str	r3, [sp, #20]
 80078c8:	f8d8 3000 	ldr.w	r3, [r8]
 80078cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80078d0:	3307      	adds	r3, #7
 80078d2:	f023 0307 	bic.w	r3, r3, #7
 80078d6:	f103 0208 	add.w	r2, r3, #8
 80078da:	f8c8 2000 	str.w	r2, [r8]
 80078de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078e6:	9307      	str	r3, [sp, #28]
 80078e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80078ec:	ee08 0a10 	vmov	s16, r0
 80078f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80078f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078f8:	4b9e      	ldr	r3, [pc, #632]	; (8007b74 <_printf_float+0x2d8>)
 80078fa:	f04f 32ff 	mov.w	r2, #4294967295
 80078fe:	f7f9 f91d 	bl	8000b3c <__aeabi_dcmpun>
 8007902:	bb88      	cbnz	r0, 8007968 <_printf_float+0xcc>
 8007904:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007908:	4b9a      	ldr	r3, [pc, #616]	; (8007b74 <_printf_float+0x2d8>)
 800790a:	f04f 32ff 	mov.w	r2, #4294967295
 800790e:	f7f9 f8f7 	bl	8000b00 <__aeabi_dcmple>
 8007912:	bb48      	cbnz	r0, 8007968 <_printf_float+0xcc>
 8007914:	2200      	movs	r2, #0
 8007916:	2300      	movs	r3, #0
 8007918:	4640      	mov	r0, r8
 800791a:	4649      	mov	r1, r9
 800791c:	f7f9 f8e6 	bl	8000aec <__aeabi_dcmplt>
 8007920:	b110      	cbz	r0, 8007928 <_printf_float+0x8c>
 8007922:	232d      	movs	r3, #45	; 0x2d
 8007924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007928:	4a93      	ldr	r2, [pc, #588]	; (8007b78 <_printf_float+0x2dc>)
 800792a:	4b94      	ldr	r3, [pc, #592]	; (8007b7c <_printf_float+0x2e0>)
 800792c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007930:	bf94      	ite	ls
 8007932:	4690      	movls	r8, r2
 8007934:	4698      	movhi	r8, r3
 8007936:	2303      	movs	r3, #3
 8007938:	6123      	str	r3, [r4, #16]
 800793a:	9b05      	ldr	r3, [sp, #20]
 800793c:	f023 0304 	bic.w	r3, r3, #4
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	f04f 0900 	mov.w	r9, #0
 8007946:	9700      	str	r7, [sp, #0]
 8007948:	4633      	mov	r3, r6
 800794a:	aa0b      	add	r2, sp, #44	; 0x2c
 800794c:	4621      	mov	r1, r4
 800794e:	4628      	mov	r0, r5
 8007950:	f000 f9da 	bl	8007d08 <_printf_common>
 8007954:	3001      	adds	r0, #1
 8007956:	f040 8090 	bne.w	8007a7a <_printf_float+0x1de>
 800795a:	f04f 30ff 	mov.w	r0, #4294967295
 800795e:	b00d      	add	sp, #52	; 0x34
 8007960:	ecbd 8b02 	vpop	{d8}
 8007964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007968:	4642      	mov	r2, r8
 800796a:	464b      	mov	r3, r9
 800796c:	4640      	mov	r0, r8
 800796e:	4649      	mov	r1, r9
 8007970:	f7f9 f8e4 	bl	8000b3c <__aeabi_dcmpun>
 8007974:	b140      	cbz	r0, 8007988 <_printf_float+0xec>
 8007976:	464b      	mov	r3, r9
 8007978:	2b00      	cmp	r3, #0
 800797a:	bfbc      	itt	lt
 800797c:	232d      	movlt	r3, #45	; 0x2d
 800797e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007982:	4a7f      	ldr	r2, [pc, #508]	; (8007b80 <_printf_float+0x2e4>)
 8007984:	4b7f      	ldr	r3, [pc, #508]	; (8007b84 <_printf_float+0x2e8>)
 8007986:	e7d1      	b.n	800792c <_printf_float+0x90>
 8007988:	6863      	ldr	r3, [r4, #4]
 800798a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800798e:	9206      	str	r2, [sp, #24]
 8007990:	1c5a      	adds	r2, r3, #1
 8007992:	d13f      	bne.n	8007a14 <_printf_float+0x178>
 8007994:	2306      	movs	r3, #6
 8007996:	6063      	str	r3, [r4, #4]
 8007998:	9b05      	ldr	r3, [sp, #20]
 800799a:	6861      	ldr	r1, [r4, #4]
 800799c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80079a0:	2300      	movs	r3, #0
 80079a2:	9303      	str	r3, [sp, #12]
 80079a4:	ab0a      	add	r3, sp, #40	; 0x28
 80079a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80079aa:	ab09      	add	r3, sp, #36	; 0x24
 80079ac:	ec49 8b10 	vmov	d0, r8, r9
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	6022      	str	r2, [r4, #0]
 80079b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079b8:	4628      	mov	r0, r5
 80079ba:	f7ff fecf 	bl	800775c <__cvt>
 80079be:	9b06      	ldr	r3, [sp, #24]
 80079c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079c2:	2b47      	cmp	r3, #71	; 0x47
 80079c4:	4680      	mov	r8, r0
 80079c6:	d108      	bne.n	80079da <_printf_float+0x13e>
 80079c8:	1cc8      	adds	r0, r1, #3
 80079ca:	db02      	blt.n	80079d2 <_printf_float+0x136>
 80079cc:	6863      	ldr	r3, [r4, #4]
 80079ce:	4299      	cmp	r1, r3
 80079d0:	dd41      	ble.n	8007a56 <_printf_float+0x1ba>
 80079d2:	f1ab 0302 	sub.w	r3, fp, #2
 80079d6:	fa5f fb83 	uxtb.w	fp, r3
 80079da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079de:	d820      	bhi.n	8007a22 <_printf_float+0x186>
 80079e0:	3901      	subs	r1, #1
 80079e2:	465a      	mov	r2, fp
 80079e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079e8:	9109      	str	r1, [sp, #36]	; 0x24
 80079ea:	f7ff ff19 	bl	8007820 <__exponent>
 80079ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079f0:	1813      	adds	r3, r2, r0
 80079f2:	2a01      	cmp	r2, #1
 80079f4:	4681      	mov	r9, r0
 80079f6:	6123      	str	r3, [r4, #16]
 80079f8:	dc02      	bgt.n	8007a00 <_printf_float+0x164>
 80079fa:	6822      	ldr	r2, [r4, #0]
 80079fc:	07d2      	lsls	r2, r2, #31
 80079fe:	d501      	bpl.n	8007a04 <_printf_float+0x168>
 8007a00:	3301      	adds	r3, #1
 8007a02:	6123      	str	r3, [r4, #16]
 8007a04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d09c      	beq.n	8007946 <_printf_float+0xaa>
 8007a0c:	232d      	movs	r3, #45	; 0x2d
 8007a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a12:	e798      	b.n	8007946 <_printf_float+0xaa>
 8007a14:	9a06      	ldr	r2, [sp, #24]
 8007a16:	2a47      	cmp	r2, #71	; 0x47
 8007a18:	d1be      	bne.n	8007998 <_printf_float+0xfc>
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1bc      	bne.n	8007998 <_printf_float+0xfc>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e7b9      	b.n	8007996 <_printf_float+0xfa>
 8007a22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a26:	d118      	bne.n	8007a5a <_printf_float+0x1be>
 8007a28:	2900      	cmp	r1, #0
 8007a2a:	6863      	ldr	r3, [r4, #4]
 8007a2c:	dd0b      	ble.n	8007a46 <_printf_float+0x1aa>
 8007a2e:	6121      	str	r1, [r4, #16]
 8007a30:	b913      	cbnz	r3, 8007a38 <_printf_float+0x19c>
 8007a32:	6822      	ldr	r2, [r4, #0]
 8007a34:	07d0      	lsls	r0, r2, #31
 8007a36:	d502      	bpl.n	8007a3e <_printf_float+0x1a2>
 8007a38:	3301      	adds	r3, #1
 8007a3a:	440b      	add	r3, r1
 8007a3c:	6123      	str	r3, [r4, #16]
 8007a3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a40:	f04f 0900 	mov.w	r9, #0
 8007a44:	e7de      	b.n	8007a04 <_printf_float+0x168>
 8007a46:	b913      	cbnz	r3, 8007a4e <_printf_float+0x1b2>
 8007a48:	6822      	ldr	r2, [r4, #0]
 8007a4a:	07d2      	lsls	r2, r2, #31
 8007a4c:	d501      	bpl.n	8007a52 <_printf_float+0x1b6>
 8007a4e:	3302      	adds	r3, #2
 8007a50:	e7f4      	b.n	8007a3c <_printf_float+0x1a0>
 8007a52:	2301      	movs	r3, #1
 8007a54:	e7f2      	b.n	8007a3c <_printf_float+0x1a0>
 8007a56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a5c:	4299      	cmp	r1, r3
 8007a5e:	db05      	blt.n	8007a6c <_printf_float+0x1d0>
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	6121      	str	r1, [r4, #16]
 8007a64:	07d8      	lsls	r0, r3, #31
 8007a66:	d5ea      	bpl.n	8007a3e <_printf_float+0x1a2>
 8007a68:	1c4b      	adds	r3, r1, #1
 8007a6a:	e7e7      	b.n	8007a3c <_printf_float+0x1a0>
 8007a6c:	2900      	cmp	r1, #0
 8007a6e:	bfd4      	ite	le
 8007a70:	f1c1 0202 	rsble	r2, r1, #2
 8007a74:	2201      	movgt	r2, #1
 8007a76:	4413      	add	r3, r2
 8007a78:	e7e0      	b.n	8007a3c <_printf_float+0x1a0>
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	055a      	lsls	r2, r3, #21
 8007a7e:	d407      	bmi.n	8007a90 <_printf_float+0x1f4>
 8007a80:	6923      	ldr	r3, [r4, #16]
 8007a82:	4642      	mov	r2, r8
 8007a84:	4631      	mov	r1, r6
 8007a86:	4628      	mov	r0, r5
 8007a88:	47b8      	blx	r7
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	d12c      	bne.n	8007ae8 <_printf_float+0x24c>
 8007a8e:	e764      	b.n	800795a <_printf_float+0xbe>
 8007a90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a94:	f240 80e0 	bls.w	8007c58 <_printf_float+0x3bc>
 8007a98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f7f9 f81a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d034      	beq.n	8007b12 <_printf_float+0x276>
 8007aa8:	4a37      	ldr	r2, [pc, #220]	; (8007b88 <_printf_float+0x2ec>)
 8007aaa:	2301      	movs	r3, #1
 8007aac:	4631      	mov	r1, r6
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b8      	blx	r7
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	f43f af51 	beq.w	800795a <_printf_float+0xbe>
 8007ab8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007abc:	429a      	cmp	r2, r3
 8007abe:	db02      	blt.n	8007ac6 <_printf_float+0x22a>
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	07d8      	lsls	r0, r3, #31
 8007ac4:	d510      	bpl.n	8007ae8 <_printf_float+0x24c>
 8007ac6:	ee18 3a10 	vmov	r3, s16
 8007aca:	4652      	mov	r2, sl
 8007acc:	4631      	mov	r1, r6
 8007ace:	4628      	mov	r0, r5
 8007ad0:	47b8      	blx	r7
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	f43f af41 	beq.w	800795a <_printf_float+0xbe>
 8007ad8:	f04f 0800 	mov.w	r8, #0
 8007adc:	f104 091a 	add.w	r9, r4, #26
 8007ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	4543      	cmp	r3, r8
 8007ae6:	dc09      	bgt.n	8007afc <_printf_float+0x260>
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	079b      	lsls	r3, r3, #30
 8007aec:	f100 8107 	bmi.w	8007cfe <_printf_float+0x462>
 8007af0:	68e0      	ldr	r0, [r4, #12]
 8007af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007af4:	4298      	cmp	r0, r3
 8007af6:	bfb8      	it	lt
 8007af8:	4618      	movlt	r0, r3
 8007afa:	e730      	b.n	800795e <_printf_float+0xc2>
 8007afc:	2301      	movs	r3, #1
 8007afe:	464a      	mov	r2, r9
 8007b00:	4631      	mov	r1, r6
 8007b02:	4628      	mov	r0, r5
 8007b04:	47b8      	blx	r7
 8007b06:	3001      	adds	r0, #1
 8007b08:	f43f af27 	beq.w	800795a <_printf_float+0xbe>
 8007b0c:	f108 0801 	add.w	r8, r8, #1
 8007b10:	e7e6      	b.n	8007ae0 <_printf_float+0x244>
 8007b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	dc39      	bgt.n	8007b8c <_printf_float+0x2f0>
 8007b18:	4a1b      	ldr	r2, [pc, #108]	; (8007b88 <_printf_float+0x2ec>)
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4628      	mov	r0, r5
 8007b20:	47b8      	blx	r7
 8007b22:	3001      	adds	r0, #1
 8007b24:	f43f af19 	beq.w	800795a <_printf_float+0xbe>
 8007b28:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	d102      	bne.n	8007b36 <_printf_float+0x29a>
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	07d9      	lsls	r1, r3, #31
 8007b34:	d5d8      	bpl.n	8007ae8 <_printf_float+0x24c>
 8007b36:	ee18 3a10 	vmov	r3, s16
 8007b3a:	4652      	mov	r2, sl
 8007b3c:	4631      	mov	r1, r6
 8007b3e:	4628      	mov	r0, r5
 8007b40:	47b8      	blx	r7
 8007b42:	3001      	adds	r0, #1
 8007b44:	f43f af09 	beq.w	800795a <_printf_float+0xbe>
 8007b48:	f04f 0900 	mov.w	r9, #0
 8007b4c:	f104 0a1a 	add.w	sl, r4, #26
 8007b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b52:	425b      	negs	r3, r3
 8007b54:	454b      	cmp	r3, r9
 8007b56:	dc01      	bgt.n	8007b5c <_printf_float+0x2c0>
 8007b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b5a:	e792      	b.n	8007a82 <_printf_float+0x1e6>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	4652      	mov	r2, sl
 8007b60:	4631      	mov	r1, r6
 8007b62:	4628      	mov	r0, r5
 8007b64:	47b8      	blx	r7
 8007b66:	3001      	adds	r0, #1
 8007b68:	f43f aef7 	beq.w	800795a <_printf_float+0xbe>
 8007b6c:	f109 0901 	add.w	r9, r9, #1
 8007b70:	e7ee      	b.n	8007b50 <_printf_float+0x2b4>
 8007b72:	bf00      	nop
 8007b74:	7fefffff 	.word	0x7fefffff
 8007b78:	0800a108 	.word	0x0800a108
 8007b7c:	0800a10c 	.word	0x0800a10c
 8007b80:	0800a110 	.word	0x0800a110
 8007b84:	0800a114 	.word	0x0800a114
 8007b88:	0800a118 	.word	0x0800a118
 8007b8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b90:	429a      	cmp	r2, r3
 8007b92:	bfa8      	it	ge
 8007b94:	461a      	movge	r2, r3
 8007b96:	2a00      	cmp	r2, #0
 8007b98:	4691      	mov	r9, r2
 8007b9a:	dc37      	bgt.n	8007c0c <_printf_float+0x370>
 8007b9c:	f04f 0b00 	mov.w	fp, #0
 8007ba0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ba4:	f104 021a 	add.w	r2, r4, #26
 8007ba8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007baa:	9305      	str	r3, [sp, #20]
 8007bac:	eba3 0309 	sub.w	r3, r3, r9
 8007bb0:	455b      	cmp	r3, fp
 8007bb2:	dc33      	bgt.n	8007c1c <_printf_float+0x380>
 8007bb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	db3b      	blt.n	8007c34 <_printf_float+0x398>
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	07da      	lsls	r2, r3, #31
 8007bc0:	d438      	bmi.n	8007c34 <_printf_float+0x398>
 8007bc2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007bc6:	eba2 0903 	sub.w	r9, r2, r3
 8007bca:	9b05      	ldr	r3, [sp, #20]
 8007bcc:	1ad2      	subs	r2, r2, r3
 8007bce:	4591      	cmp	r9, r2
 8007bd0:	bfa8      	it	ge
 8007bd2:	4691      	movge	r9, r2
 8007bd4:	f1b9 0f00 	cmp.w	r9, #0
 8007bd8:	dc35      	bgt.n	8007c46 <_printf_float+0x3aa>
 8007bda:	f04f 0800 	mov.w	r8, #0
 8007bde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007be2:	f104 0a1a 	add.w	sl, r4, #26
 8007be6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bea:	1a9b      	subs	r3, r3, r2
 8007bec:	eba3 0309 	sub.w	r3, r3, r9
 8007bf0:	4543      	cmp	r3, r8
 8007bf2:	f77f af79 	ble.w	8007ae8 <_printf_float+0x24c>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	4652      	mov	r2, sl
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	47b8      	blx	r7
 8007c00:	3001      	adds	r0, #1
 8007c02:	f43f aeaa 	beq.w	800795a <_printf_float+0xbe>
 8007c06:	f108 0801 	add.w	r8, r8, #1
 8007c0a:	e7ec      	b.n	8007be6 <_printf_float+0x34a>
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	4631      	mov	r1, r6
 8007c10:	4642      	mov	r2, r8
 8007c12:	4628      	mov	r0, r5
 8007c14:	47b8      	blx	r7
 8007c16:	3001      	adds	r0, #1
 8007c18:	d1c0      	bne.n	8007b9c <_printf_float+0x300>
 8007c1a:	e69e      	b.n	800795a <_printf_float+0xbe>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	4631      	mov	r1, r6
 8007c20:	4628      	mov	r0, r5
 8007c22:	9205      	str	r2, [sp, #20]
 8007c24:	47b8      	blx	r7
 8007c26:	3001      	adds	r0, #1
 8007c28:	f43f ae97 	beq.w	800795a <_printf_float+0xbe>
 8007c2c:	9a05      	ldr	r2, [sp, #20]
 8007c2e:	f10b 0b01 	add.w	fp, fp, #1
 8007c32:	e7b9      	b.n	8007ba8 <_printf_float+0x30c>
 8007c34:	ee18 3a10 	vmov	r3, s16
 8007c38:	4652      	mov	r2, sl
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	47b8      	blx	r7
 8007c40:	3001      	adds	r0, #1
 8007c42:	d1be      	bne.n	8007bc2 <_printf_float+0x326>
 8007c44:	e689      	b.n	800795a <_printf_float+0xbe>
 8007c46:	9a05      	ldr	r2, [sp, #20]
 8007c48:	464b      	mov	r3, r9
 8007c4a:	4442      	add	r2, r8
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	4628      	mov	r0, r5
 8007c50:	47b8      	blx	r7
 8007c52:	3001      	adds	r0, #1
 8007c54:	d1c1      	bne.n	8007bda <_printf_float+0x33e>
 8007c56:	e680      	b.n	800795a <_printf_float+0xbe>
 8007c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c5a:	2a01      	cmp	r2, #1
 8007c5c:	dc01      	bgt.n	8007c62 <_printf_float+0x3c6>
 8007c5e:	07db      	lsls	r3, r3, #31
 8007c60:	d53a      	bpl.n	8007cd8 <_printf_float+0x43c>
 8007c62:	2301      	movs	r3, #1
 8007c64:	4642      	mov	r2, r8
 8007c66:	4631      	mov	r1, r6
 8007c68:	4628      	mov	r0, r5
 8007c6a:	47b8      	blx	r7
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	f43f ae74 	beq.w	800795a <_printf_float+0xbe>
 8007c72:	ee18 3a10 	vmov	r3, s16
 8007c76:	4652      	mov	r2, sl
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	47b8      	blx	r7
 8007c7e:	3001      	adds	r0, #1
 8007c80:	f43f ae6b 	beq.w	800795a <_printf_float+0xbe>
 8007c84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c88:	2200      	movs	r2, #0
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007c90:	f7f8 ff22 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c94:	b9d8      	cbnz	r0, 8007cce <_printf_float+0x432>
 8007c96:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007c9a:	f108 0201 	add.w	r2, r8, #1
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	47b8      	blx	r7
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	d10e      	bne.n	8007cc6 <_printf_float+0x42a>
 8007ca8:	e657      	b.n	800795a <_printf_float+0xbe>
 8007caa:	2301      	movs	r3, #1
 8007cac:	4652      	mov	r2, sl
 8007cae:	4631      	mov	r1, r6
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	47b8      	blx	r7
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	f43f ae50 	beq.w	800795a <_printf_float+0xbe>
 8007cba:	f108 0801 	add.w	r8, r8, #1
 8007cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	4543      	cmp	r3, r8
 8007cc4:	dcf1      	bgt.n	8007caa <_printf_float+0x40e>
 8007cc6:	464b      	mov	r3, r9
 8007cc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ccc:	e6da      	b.n	8007a84 <_printf_float+0x1e8>
 8007cce:	f04f 0800 	mov.w	r8, #0
 8007cd2:	f104 0a1a 	add.w	sl, r4, #26
 8007cd6:	e7f2      	b.n	8007cbe <_printf_float+0x422>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	4642      	mov	r2, r8
 8007cdc:	e7df      	b.n	8007c9e <_printf_float+0x402>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	464a      	mov	r2, r9
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	47b8      	blx	r7
 8007ce8:	3001      	adds	r0, #1
 8007cea:	f43f ae36 	beq.w	800795a <_printf_float+0xbe>
 8007cee:	f108 0801 	add.w	r8, r8, #1
 8007cf2:	68e3      	ldr	r3, [r4, #12]
 8007cf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007cf6:	1a5b      	subs	r3, r3, r1
 8007cf8:	4543      	cmp	r3, r8
 8007cfa:	dcf0      	bgt.n	8007cde <_printf_float+0x442>
 8007cfc:	e6f8      	b.n	8007af0 <_printf_float+0x254>
 8007cfe:	f04f 0800 	mov.w	r8, #0
 8007d02:	f104 0919 	add.w	r9, r4, #25
 8007d06:	e7f4      	b.n	8007cf2 <_printf_float+0x456>

08007d08 <_printf_common>:
 8007d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d0c:	4616      	mov	r6, r2
 8007d0e:	4699      	mov	r9, r3
 8007d10:	688a      	ldr	r2, [r1, #8]
 8007d12:	690b      	ldr	r3, [r1, #16]
 8007d14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	bfb8      	it	lt
 8007d1c:	4613      	movlt	r3, r2
 8007d1e:	6033      	str	r3, [r6, #0]
 8007d20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d24:	4607      	mov	r7, r0
 8007d26:	460c      	mov	r4, r1
 8007d28:	b10a      	cbz	r2, 8007d2e <_printf_common+0x26>
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	6033      	str	r3, [r6, #0]
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	0699      	lsls	r1, r3, #26
 8007d32:	bf42      	ittt	mi
 8007d34:	6833      	ldrmi	r3, [r6, #0]
 8007d36:	3302      	addmi	r3, #2
 8007d38:	6033      	strmi	r3, [r6, #0]
 8007d3a:	6825      	ldr	r5, [r4, #0]
 8007d3c:	f015 0506 	ands.w	r5, r5, #6
 8007d40:	d106      	bne.n	8007d50 <_printf_common+0x48>
 8007d42:	f104 0a19 	add.w	sl, r4, #25
 8007d46:	68e3      	ldr	r3, [r4, #12]
 8007d48:	6832      	ldr	r2, [r6, #0]
 8007d4a:	1a9b      	subs	r3, r3, r2
 8007d4c:	42ab      	cmp	r3, r5
 8007d4e:	dc26      	bgt.n	8007d9e <_printf_common+0x96>
 8007d50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d54:	1e13      	subs	r3, r2, #0
 8007d56:	6822      	ldr	r2, [r4, #0]
 8007d58:	bf18      	it	ne
 8007d5a:	2301      	movne	r3, #1
 8007d5c:	0692      	lsls	r2, r2, #26
 8007d5e:	d42b      	bmi.n	8007db8 <_printf_common+0xb0>
 8007d60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d64:	4649      	mov	r1, r9
 8007d66:	4638      	mov	r0, r7
 8007d68:	47c0      	blx	r8
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d01e      	beq.n	8007dac <_printf_common+0xa4>
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	6922      	ldr	r2, [r4, #16]
 8007d72:	f003 0306 	and.w	r3, r3, #6
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	bf02      	ittt	eq
 8007d7a:	68e5      	ldreq	r5, [r4, #12]
 8007d7c:	6833      	ldreq	r3, [r6, #0]
 8007d7e:	1aed      	subeq	r5, r5, r3
 8007d80:	68a3      	ldr	r3, [r4, #8]
 8007d82:	bf0c      	ite	eq
 8007d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d88:	2500      	movne	r5, #0
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	bfc4      	itt	gt
 8007d8e:	1a9b      	subgt	r3, r3, r2
 8007d90:	18ed      	addgt	r5, r5, r3
 8007d92:	2600      	movs	r6, #0
 8007d94:	341a      	adds	r4, #26
 8007d96:	42b5      	cmp	r5, r6
 8007d98:	d11a      	bne.n	8007dd0 <_printf_common+0xc8>
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	e008      	b.n	8007db0 <_printf_common+0xa8>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	4652      	mov	r2, sl
 8007da2:	4649      	mov	r1, r9
 8007da4:	4638      	mov	r0, r7
 8007da6:	47c0      	blx	r8
 8007da8:	3001      	adds	r0, #1
 8007daa:	d103      	bne.n	8007db4 <_printf_common+0xac>
 8007dac:	f04f 30ff 	mov.w	r0, #4294967295
 8007db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db4:	3501      	adds	r5, #1
 8007db6:	e7c6      	b.n	8007d46 <_printf_common+0x3e>
 8007db8:	18e1      	adds	r1, r4, r3
 8007dba:	1c5a      	adds	r2, r3, #1
 8007dbc:	2030      	movs	r0, #48	; 0x30
 8007dbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dc2:	4422      	add	r2, r4
 8007dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007dcc:	3302      	adds	r3, #2
 8007dce:	e7c7      	b.n	8007d60 <_printf_common+0x58>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	4622      	mov	r2, r4
 8007dd4:	4649      	mov	r1, r9
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	47c0      	blx	r8
 8007dda:	3001      	adds	r0, #1
 8007ddc:	d0e6      	beq.n	8007dac <_printf_common+0xa4>
 8007dde:	3601      	adds	r6, #1
 8007de0:	e7d9      	b.n	8007d96 <_printf_common+0x8e>
	...

08007de4 <_printf_i>:
 8007de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007de8:	7e0f      	ldrb	r7, [r1, #24]
 8007dea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007dec:	2f78      	cmp	r7, #120	; 0x78
 8007dee:	4691      	mov	r9, r2
 8007df0:	4680      	mov	r8, r0
 8007df2:	460c      	mov	r4, r1
 8007df4:	469a      	mov	sl, r3
 8007df6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dfa:	d807      	bhi.n	8007e0c <_printf_i+0x28>
 8007dfc:	2f62      	cmp	r7, #98	; 0x62
 8007dfe:	d80a      	bhi.n	8007e16 <_printf_i+0x32>
 8007e00:	2f00      	cmp	r7, #0
 8007e02:	f000 80d4 	beq.w	8007fae <_printf_i+0x1ca>
 8007e06:	2f58      	cmp	r7, #88	; 0x58
 8007e08:	f000 80c0 	beq.w	8007f8c <_printf_i+0x1a8>
 8007e0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e14:	e03a      	b.n	8007e8c <_printf_i+0xa8>
 8007e16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e1a:	2b15      	cmp	r3, #21
 8007e1c:	d8f6      	bhi.n	8007e0c <_printf_i+0x28>
 8007e1e:	a101      	add	r1, pc, #4	; (adr r1, 8007e24 <_printf_i+0x40>)
 8007e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e24:	08007e7d 	.word	0x08007e7d
 8007e28:	08007e91 	.word	0x08007e91
 8007e2c:	08007e0d 	.word	0x08007e0d
 8007e30:	08007e0d 	.word	0x08007e0d
 8007e34:	08007e0d 	.word	0x08007e0d
 8007e38:	08007e0d 	.word	0x08007e0d
 8007e3c:	08007e91 	.word	0x08007e91
 8007e40:	08007e0d 	.word	0x08007e0d
 8007e44:	08007e0d 	.word	0x08007e0d
 8007e48:	08007e0d 	.word	0x08007e0d
 8007e4c:	08007e0d 	.word	0x08007e0d
 8007e50:	08007f95 	.word	0x08007f95
 8007e54:	08007ebd 	.word	0x08007ebd
 8007e58:	08007f4f 	.word	0x08007f4f
 8007e5c:	08007e0d 	.word	0x08007e0d
 8007e60:	08007e0d 	.word	0x08007e0d
 8007e64:	08007fb7 	.word	0x08007fb7
 8007e68:	08007e0d 	.word	0x08007e0d
 8007e6c:	08007ebd 	.word	0x08007ebd
 8007e70:	08007e0d 	.word	0x08007e0d
 8007e74:	08007e0d 	.word	0x08007e0d
 8007e78:	08007f57 	.word	0x08007f57
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	1d1a      	adds	r2, r3, #4
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	602a      	str	r2, [r5, #0]
 8007e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e09f      	b.n	8007fd0 <_printf_i+0x1ec>
 8007e90:	6820      	ldr	r0, [r4, #0]
 8007e92:	682b      	ldr	r3, [r5, #0]
 8007e94:	0607      	lsls	r7, r0, #24
 8007e96:	f103 0104 	add.w	r1, r3, #4
 8007e9a:	6029      	str	r1, [r5, #0]
 8007e9c:	d501      	bpl.n	8007ea2 <_printf_i+0xbe>
 8007e9e:	681e      	ldr	r6, [r3, #0]
 8007ea0:	e003      	b.n	8007eaa <_printf_i+0xc6>
 8007ea2:	0646      	lsls	r6, r0, #25
 8007ea4:	d5fb      	bpl.n	8007e9e <_printf_i+0xba>
 8007ea6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007eaa:	2e00      	cmp	r6, #0
 8007eac:	da03      	bge.n	8007eb6 <_printf_i+0xd2>
 8007eae:	232d      	movs	r3, #45	; 0x2d
 8007eb0:	4276      	negs	r6, r6
 8007eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eb6:	485a      	ldr	r0, [pc, #360]	; (8008020 <_printf_i+0x23c>)
 8007eb8:	230a      	movs	r3, #10
 8007eba:	e012      	b.n	8007ee2 <_printf_i+0xfe>
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	6820      	ldr	r0, [r4, #0]
 8007ec0:	1d19      	adds	r1, r3, #4
 8007ec2:	6029      	str	r1, [r5, #0]
 8007ec4:	0605      	lsls	r5, r0, #24
 8007ec6:	d501      	bpl.n	8007ecc <_printf_i+0xe8>
 8007ec8:	681e      	ldr	r6, [r3, #0]
 8007eca:	e002      	b.n	8007ed2 <_printf_i+0xee>
 8007ecc:	0641      	lsls	r1, r0, #25
 8007ece:	d5fb      	bpl.n	8007ec8 <_printf_i+0xe4>
 8007ed0:	881e      	ldrh	r6, [r3, #0]
 8007ed2:	4853      	ldr	r0, [pc, #332]	; (8008020 <_printf_i+0x23c>)
 8007ed4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ed6:	bf0c      	ite	eq
 8007ed8:	2308      	moveq	r3, #8
 8007eda:	230a      	movne	r3, #10
 8007edc:	2100      	movs	r1, #0
 8007ede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ee2:	6865      	ldr	r5, [r4, #4]
 8007ee4:	60a5      	str	r5, [r4, #8]
 8007ee6:	2d00      	cmp	r5, #0
 8007ee8:	bfa2      	ittt	ge
 8007eea:	6821      	ldrge	r1, [r4, #0]
 8007eec:	f021 0104 	bicge.w	r1, r1, #4
 8007ef0:	6021      	strge	r1, [r4, #0]
 8007ef2:	b90e      	cbnz	r6, 8007ef8 <_printf_i+0x114>
 8007ef4:	2d00      	cmp	r5, #0
 8007ef6:	d04b      	beq.n	8007f90 <_printf_i+0x1ac>
 8007ef8:	4615      	mov	r5, r2
 8007efa:	fbb6 f1f3 	udiv	r1, r6, r3
 8007efe:	fb03 6711 	mls	r7, r3, r1, r6
 8007f02:	5dc7      	ldrb	r7, [r0, r7]
 8007f04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f08:	4637      	mov	r7, r6
 8007f0a:	42bb      	cmp	r3, r7
 8007f0c:	460e      	mov	r6, r1
 8007f0e:	d9f4      	bls.n	8007efa <_printf_i+0x116>
 8007f10:	2b08      	cmp	r3, #8
 8007f12:	d10b      	bne.n	8007f2c <_printf_i+0x148>
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	07de      	lsls	r6, r3, #31
 8007f18:	d508      	bpl.n	8007f2c <_printf_i+0x148>
 8007f1a:	6923      	ldr	r3, [r4, #16]
 8007f1c:	6861      	ldr	r1, [r4, #4]
 8007f1e:	4299      	cmp	r1, r3
 8007f20:	bfde      	ittt	le
 8007f22:	2330      	movle	r3, #48	; 0x30
 8007f24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f2c:	1b52      	subs	r2, r2, r5
 8007f2e:	6122      	str	r2, [r4, #16]
 8007f30:	f8cd a000 	str.w	sl, [sp]
 8007f34:	464b      	mov	r3, r9
 8007f36:	aa03      	add	r2, sp, #12
 8007f38:	4621      	mov	r1, r4
 8007f3a:	4640      	mov	r0, r8
 8007f3c:	f7ff fee4 	bl	8007d08 <_printf_common>
 8007f40:	3001      	adds	r0, #1
 8007f42:	d14a      	bne.n	8007fda <_printf_i+0x1f6>
 8007f44:	f04f 30ff 	mov.w	r0, #4294967295
 8007f48:	b004      	add	sp, #16
 8007f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	f043 0320 	orr.w	r3, r3, #32
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	4833      	ldr	r0, [pc, #204]	; (8008024 <_printf_i+0x240>)
 8007f58:	2778      	movs	r7, #120	; 0x78
 8007f5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	6829      	ldr	r1, [r5, #0]
 8007f62:	061f      	lsls	r7, r3, #24
 8007f64:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f68:	d402      	bmi.n	8007f70 <_printf_i+0x18c>
 8007f6a:	065f      	lsls	r7, r3, #25
 8007f6c:	bf48      	it	mi
 8007f6e:	b2b6      	uxthmi	r6, r6
 8007f70:	07df      	lsls	r7, r3, #31
 8007f72:	bf48      	it	mi
 8007f74:	f043 0320 	orrmi.w	r3, r3, #32
 8007f78:	6029      	str	r1, [r5, #0]
 8007f7a:	bf48      	it	mi
 8007f7c:	6023      	strmi	r3, [r4, #0]
 8007f7e:	b91e      	cbnz	r6, 8007f88 <_printf_i+0x1a4>
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	f023 0320 	bic.w	r3, r3, #32
 8007f86:	6023      	str	r3, [r4, #0]
 8007f88:	2310      	movs	r3, #16
 8007f8a:	e7a7      	b.n	8007edc <_printf_i+0xf8>
 8007f8c:	4824      	ldr	r0, [pc, #144]	; (8008020 <_printf_i+0x23c>)
 8007f8e:	e7e4      	b.n	8007f5a <_printf_i+0x176>
 8007f90:	4615      	mov	r5, r2
 8007f92:	e7bd      	b.n	8007f10 <_printf_i+0x12c>
 8007f94:	682b      	ldr	r3, [r5, #0]
 8007f96:	6826      	ldr	r6, [r4, #0]
 8007f98:	6961      	ldr	r1, [r4, #20]
 8007f9a:	1d18      	adds	r0, r3, #4
 8007f9c:	6028      	str	r0, [r5, #0]
 8007f9e:	0635      	lsls	r5, r6, #24
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	d501      	bpl.n	8007fa8 <_printf_i+0x1c4>
 8007fa4:	6019      	str	r1, [r3, #0]
 8007fa6:	e002      	b.n	8007fae <_printf_i+0x1ca>
 8007fa8:	0670      	lsls	r0, r6, #25
 8007faa:	d5fb      	bpl.n	8007fa4 <_printf_i+0x1c0>
 8007fac:	8019      	strh	r1, [r3, #0]
 8007fae:	2300      	movs	r3, #0
 8007fb0:	6123      	str	r3, [r4, #16]
 8007fb2:	4615      	mov	r5, r2
 8007fb4:	e7bc      	b.n	8007f30 <_printf_i+0x14c>
 8007fb6:	682b      	ldr	r3, [r5, #0]
 8007fb8:	1d1a      	adds	r2, r3, #4
 8007fba:	602a      	str	r2, [r5, #0]
 8007fbc:	681d      	ldr	r5, [r3, #0]
 8007fbe:	6862      	ldr	r2, [r4, #4]
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	f7f8 f90c 	bl	80001e0 <memchr>
 8007fc8:	b108      	cbz	r0, 8007fce <_printf_i+0x1ea>
 8007fca:	1b40      	subs	r0, r0, r5
 8007fcc:	6060      	str	r0, [r4, #4]
 8007fce:	6863      	ldr	r3, [r4, #4]
 8007fd0:	6123      	str	r3, [r4, #16]
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fd8:	e7aa      	b.n	8007f30 <_printf_i+0x14c>
 8007fda:	6923      	ldr	r3, [r4, #16]
 8007fdc:	462a      	mov	r2, r5
 8007fde:	4649      	mov	r1, r9
 8007fe0:	4640      	mov	r0, r8
 8007fe2:	47d0      	blx	sl
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d0ad      	beq.n	8007f44 <_printf_i+0x160>
 8007fe8:	6823      	ldr	r3, [r4, #0]
 8007fea:	079b      	lsls	r3, r3, #30
 8007fec:	d413      	bmi.n	8008016 <_printf_i+0x232>
 8007fee:	68e0      	ldr	r0, [r4, #12]
 8007ff0:	9b03      	ldr	r3, [sp, #12]
 8007ff2:	4298      	cmp	r0, r3
 8007ff4:	bfb8      	it	lt
 8007ff6:	4618      	movlt	r0, r3
 8007ff8:	e7a6      	b.n	8007f48 <_printf_i+0x164>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	4649      	mov	r1, r9
 8008000:	4640      	mov	r0, r8
 8008002:	47d0      	blx	sl
 8008004:	3001      	adds	r0, #1
 8008006:	d09d      	beq.n	8007f44 <_printf_i+0x160>
 8008008:	3501      	adds	r5, #1
 800800a:	68e3      	ldr	r3, [r4, #12]
 800800c:	9903      	ldr	r1, [sp, #12]
 800800e:	1a5b      	subs	r3, r3, r1
 8008010:	42ab      	cmp	r3, r5
 8008012:	dcf2      	bgt.n	8007ffa <_printf_i+0x216>
 8008014:	e7eb      	b.n	8007fee <_printf_i+0x20a>
 8008016:	2500      	movs	r5, #0
 8008018:	f104 0619 	add.w	r6, r4, #25
 800801c:	e7f5      	b.n	800800a <_printf_i+0x226>
 800801e:	bf00      	nop
 8008020:	0800a11a 	.word	0x0800a11a
 8008024:	0800a12b 	.word	0x0800a12b

08008028 <std>:
 8008028:	2300      	movs	r3, #0
 800802a:	b510      	push	{r4, lr}
 800802c:	4604      	mov	r4, r0
 800802e:	e9c0 3300 	strd	r3, r3, [r0]
 8008032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008036:	6083      	str	r3, [r0, #8]
 8008038:	8181      	strh	r1, [r0, #12]
 800803a:	6643      	str	r3, [r0, #100]	; 0x64
 800803c:	81c2      	strh	r2, [r0, #14]
 800803e:	6183      	str	r3, [r0, #24]
 8008040:	4619      	mov	r1, r3
 8008042:	2208      	movs	r2, #8
 8008044:	305c      	adds	r0, #92	; 0x5c
 8008046:	f000 f8f4 	bl	8008232 <memset>
 800804a:	4b0d      	ldr	r3, [pc, #52]	; (8008080 <std+0x58>)
 800804c:	6263      	str	r3, [r4, #36]	; 0x24
 800804e:	4b0d      	ldr	r3, [pc, #52]	; (8008084 <std+0x5c>)
 8008050:	62a3      	str	r3, [r4, #40]	; 0x28
 8008052:	4b0d      	ldr	r3, [pc, #52]	; (8008088 <std+0x60>)
 8008054:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008056:	4b0d      	ldr	r3, [pc, #52]	; (800808c <std+0x64>)
 8008058:	6323      	str	r3, [r4, #48]	; 0x30
 800805a:	4b0d      	ldr	r3, [pc, #52]	; (8008090 <std+0x68>)
 800805c:	6224      	str	r4, [r4, #32]
 800805e:	429c      	cmp	r4, r3
 8008060:	d006      	beq.n	8008070 <std+0x48>
 8008062:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008066:	4294      	cmp	r4, r2
 8008068:	d002      	beq.n	8008070 <std+0x48>
 800806a:	33d0      	adds	r3, #208	; 0xd0
 800806c:	429c      	cmp	r4, r3
 800806e:	d105      	bne.n	800807c <std+0x54>
 8008070:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008078:	f000 b958 	b.w	800832c <__retarget_lock_init_recursive>
 800807c:	bd10      	pop	{r4, pc}
 800807e:	bf00      	nop
 8008080:	080081ad 	.word	0x080081ad
 8008084:	080081cf 	.word	0x080081cf
 8008088:	08008207 	.word	0x08008207
 800808c:	0800822b 	.word	0x0800822b
 8008090:	20010628 	.word	0x20010628

08008094 <stdio_exit_handler>:
 8008094:	4a02      	ldr	r2, [pc, #8]	; (80080a0 <stdio_exit_handler+0xc>)
 8008096:	4903      	ldr	r1, [pc, #12]	; (80080a4 <stdio_exit_handler+0x10>)
 8008098:	4803      	ldr	r0, [pc, #12]	; (80080a8 <stdio_exit_handler+0x14>)
 800809a:	f000 b869 	b.w	8008170 <_fwalk_sglue>
 800809e:	bf00      	nop
 80080a0:	2000009c 	.word	0x2000009c
 80080a4:	08009a31 	.word	0x08009a31
 80080a8:	200000a8 	.word	0x200000a8

080080ac <cleanup_stdio>:
 80080ac:	6841      	ldr	r1, [r0, #4]
 80080ae:	4b0c      	ldr	r3, [pc, #48]	; (80080e0 <cleanup_stdio+0x34>)
 80080b0:	4299      	cmp	r1, r3
 80080b2:	b510      	push	{r4, lr}
 80080b4:	4604      	mov	r4, r0
 80080b6:	d001      	beq.n	80080bc <cleanup_stdio+0x10>
 80080b8:	f001 fcba 	bl	8009a30 <_fflush_r>
 80080bc:	68a1      	ldr	r1, [r4, #8]
 80080be:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <cleanup_stdio+0x38>)
 80080c0:	4299      	cmp	r1, r3
 80080c2:	d002      	beq.n	80080ca <cleanup_stdio+0x1e>
 80080c4:	4620      	mov	r0, r4
 80080c6:	f001 fcb3 	bl	8009a30 <_fflush_r>
 80080ca:	68e1      	ldr	r1, [r4, #12]
 80080cc:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <cleanup_stdio+0x3c>)
 80080ce:	4299      	cmp	r1, r3
 80080d0:	d004      	beq.n	80080dc <cleanup_stdio+0x30>
 80080d2:	4620      	mov	r0, r4
 80080d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080d8:	f001 bcaa 	b.w	8009a30 <_fflush_r>
 80080dc:	bd10      	pop	{r4, pc}
 80080de:	bf00      	nop
 80080e0:	20010628 	.word	0x20010628
 80080e4:	20010690 	.word	0x20010690
 80080e8:	200106f8 	.word	0x200106f8

080080ec <global_stdio_init.part.0>:
 80080ec:	b510      	push	{r4, lr}
 80080ee:	4b0b      	ldr	r3, [pc, #44]	; (800811c <global_stdio_init.part.0+0x30>)
 80080f0:	4c0b      	ldr	r4, [pc, #44]	; (8008120 <global_stdio_init.part.0+0x34>)
 80080f2:	4a0c      	ldr	r2, [pc, #48]	; (8008124 <global_stdio_init.part.0+0x38>)
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	4620      	mov	r0, r4
 80080f8:	2200      	movs	r2, #0
 80080fa:	2104      	movs	r1, #4
 80080fc:	f7ff ff94 	bl	8008028 <std>
 8008100:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008104:	2201      	movs	r2, #1
 8008106:	2109      	movs	r1, #9
 8008108:	f7ff ff8e 	bl	8008028 <std>
 800810c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008110:	2202      	movs	r2, #2
 8008112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008116:	2112      	movs	r1, #18
 8008118:	f7ff bf86 	b.w	8008028 <std>
 800811c:	20010760 	.word	0x20010760
 8008120:	20010628 	.word	0x20010628
 8008124:	08008095 	.word	0x08008095

08008128 <__sfp_lock_acquire>:
 8008128:	4801      	ldr	r0, [pc, #4]	; (8008130 <__sfp_lock_acquire+0x8>)
 800812a:	f000 b900 	b.w	800832e <__retarget_lock_acquire_recursive>
 800812e:	bf00      	nop
 8008130:	20010769 	.word	0x20010769

08008134 <__sfp_lock_release>:
 8008134:	4801      	ldr	r0, [pc, #4]	; (800813c <__sfp_lock_release+0x8>)
 8008136:	f000 b8fb 	b.w	8008330 <__retarget_lock_release_recursive>
 800813a:	bf00      	nop
 800813c:	20010769 	.word	0x20010769

08008140 <__sinit>:
 8008140:	b510      	push	{r4, lr}
 8008142:	4604      	mov	r4, r0
 8008144:	f7ff fff0 	bl	8008128 <__sfp_lock_acquire>
 8008148:	6a23      	ldr	r3, [r4, #32]
 800814a:	b11b      	cbz	r3, 8008154 <__sinit+0x14>
 800814c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008150:	f7ff bff0 	b.w	8008134 <__sfp_lock_release>
 8008154:	4b04      	ldr	r3, [pc, #16]	; (8008168 <__sinit+0x28>)
 8008156:	6223      	str	r3, [r4, #32]
 8008158:	4b04      	ldr	r3, [pc, #16]	; (800816c <__sinit+0x2c>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1f5      	bne.n	800814c <__sinit+0xc>
 8008160:	f7ff ffc4 	bl	80080ec <global_stdio_init.part.0>
 8008164:	e7f2      	b.n	800814c <__sinit+0xc>
 8008166:	bf00      	nop
 8008168:	080080ad 	.word	0x080080ad
 800816c:	20010760 	.word	0x20010760

08008170 <_fwalk_sglue>:
 8008170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008174:	4607      	mov	r7, r0
 8008176:	4688      	mov	r8, r1
 8008178:	4614      	mov	r4, r2
 800817a:	2600      	movs	r6, #0
 800817c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008180:	f1b9 0901 	subs.w	r9, r9, #1
 8008184:	d505      	bpl.n	8008192 <_fwalk_sglue+0x22>
 8008186:	6824      	ldr	r4, [r4, #0]
 8008188:	2c00      	cmp	r4, #0
 800818a:	d1f7      	bne.n	800817c <_fwalk_sglue+0xc>
 800818c:	4630      	mov	r0, r6
 800818e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008192:	89ab      	ldrh	r3, [r5, #12]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d907      	bls.n	80081a8 <_fwalk_sglue+0x38>
 8008198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800819c:	3301      	adds	r3, #1
 800819e:	d003      	beq.n	80081a8 <_fwalk_sglue+0x38>
 80081a0:	4629      	mov	r1, r5
 80081a2:	4638      	mov	r0, r7
 80081a4:	47c0      	blx	r8
 80081a6:	4306      	orrs	r6, r0
 80081a8:	3568      	adds	r5, #104	; 0x68
 80081aa:	e7e9      	b.n	8008180 <_fwalk_sglue+0x10>

080081ac <__sread>:
 80081ac:	b510      	push	{r4, lr}
 80081ae:	460c      	mov	r4, r1
 80081b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b4:	f000 f86c 	bl	8008290 <_read_r>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	bfab      	itete	ge
 80081bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081be:	89a3      	ldrhlt	r3, [r4, #12]
 80081c0:	181b      	addge	r3, r3, r0
 80081c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081c6:	bfac      	ite	ge
 80081c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80081ca:	81a3      	strhlt	r3, [r4, #12]
 80081cc:	bd10      	pop	{r4, pc}

080081ce <__swrite>:
 80081ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d2:	461f      	mov	r7, r3
 80081d4:	898b      	ldrh	r3, [r1, #12]
 80081d6:	05db      	lsls	r3, r3, #23
 80081d8:	4605      	mov	r5, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	4616      	mov	r6, r2
 80081de:	d505      	bpl.n	80081ec <__swrite+0x1e>
 80081e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e4:	2302      	movs	r3, #2
 80081e6:	2200      	movs	r2, #0
 80081e8:	f000 f840 	bl	800826c <_lseek_r>
 80081ec:	89a3      	ldrh	r3, [r4, #12]
 80081ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081f6:	81a3      	strh	r3, [r4, #12]
 80081f8:	4632      	mov	r2, r6
 80081fa:	463b      	mov	r3, r7
 80081fc:	4628      	mov	r0, r5
 80081fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008202:	f000 b857 	b.w	80082b4 <_write_r>

08008206 <__sseek>:
 8008206:	b510      	push	{r4, lr}
 8008208:	460c      	mov	r4, r1
 800820a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800820e:	f000 f82d 	bl	800826c <_lseek_r>
 8008212:	1c43      	adds	r3, r0, #1
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	bf15      	itete	ne
 8008218:	6560      	strne	r0, [r4, #84]	; 0x54
 800821a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800821e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008222:	81a3      	strheq	r3, [r4, #12]
 8008224:	bf18      	it	ne
 8008226:	81a3      	strhne	r3, [r4, #12]
 8008228:	bd10      	pop	{r4, pc}

0800822a <__sclose>:
 800822a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800822e:	f000 b80d 	b.w	800824c <_close_r>

08008232 <memset>:
 8008232:	4402      	add	r2, r0
 8008234:	4603      	mov	r3, r0
 8008236:	4293      	cmp	r3, r2
 8008238:	d100      	bne.n	800823c <memset+0xa>
 800823a:	4770      	bx	lr
 800823c:	f803 1b01 	strb.w	r1, [r3], #1
 8008240:	e7f9      	b.n	8008236 <memset+0x4>
	...

08008244 <_localeconv_r>:
 8008244:	4800      	ldr	r0, [pc, #0]	; (8008248 <_localeconv_r+0x4>)
 8008246:	4770      	bx	lr
 8008248:	200001e8 	.word	0x200001e8

0800824c <_close_r>:
 800824c:	b538      	push	{r3, r4, r5, lr}
 800824e:	4d06      	ldr	r5, [pc, #24]	; (8008268 <_close_r+0x1c>)
 8008250:	2300      	movs	r3, #0
 8008252:	4604      	mov	r4, r0
 8008254:	4608      	mov	r0, r1
 8008256:	602b      	str	r3, [r5, #0]
 8008258:	f7f9 fe39 	bl	8001ece <_close>
 800825c:	1c43      	adds	r3, r0, #1
 800825e:	d102      	bne.n	8008266 <_close_r+0x1a>
 8008260:	682b      	ldr	r3, [r5, #0]
 8008262:	b103      	cbz	r3, 8008266 <_close_r+0x1a>
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	bd38      	pop	{r3, r4, r5, pc}
 8008268:	20010764 	.word	0x20010764

0800826c <_lseek_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4d07      	ldr	r5, [pc, #28]	; (800828c <_lseek_r+0x20>)
 8008270:	4604      	mov	r4, r0
 8008272:	4608      	mov	r0, r1
 8008274:	4611      	mov	r1, r2
 8008276:	2200      	movs	r2, #0
 8008278:	602a      	str	r2, [r5, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	f7f9 fe4e 	bl	8001f1c <_lseek>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	d102      	bne.n	800828a <_lseek_r+0x1e>
 8008284:	682b      	ldr	r3, [r5, #0]
 8008286:	b103      	cbz	r3, 800828a <_lseek_r+0x1e>
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	bd38      	pop	{r3, r4, r5, pc}
 800828c:	20010764 	.word	0x20010764

08008290 <_read_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	4d07      	ldr	r5, [pc, #28]	; (80082b0 <_read_r+0x20>)
 8008294:	4604      	mov	r4, r0
 8008296:	4608      	mov	r0, r1
 8008298:	4611      	mov	r1, r2
 800829a:	2200      	movs	r2, #0
 800829c:	602a      	str	r2, [r5, #0]
 800829e:	461a      	mov	r2, r3
 80082a0:	f7f9 fddc 	bl	8001e5c <_read>
 80082a4:	1c43      	adds	r3, r0, #1
 80082a6:	d102      	bne.n	80082ae <_read_r+0x1e>
 80082a8:	682b      	ldr	r3, [r5, #0]
 80082aa:	b103      	cbz	r3, 80082ae <_read_r+0x1e>
 80082ac:	6023      	str	r3, [r4, #0]
 80082ae:	bd38      	pop	{r3, r4, r5, pc}
 80082b0:	20010764 	.word	0x20010764

080082b4 <_write_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4d07      	ldr	r5, [pc, #28]	; (80082d4 <_write_r+0x20>)
 80082b8:	4604      	mov	r4, r0
 80082ba:	4608      	mov	r0, r1
 80082bc:	4611      	mov	r1, r2
 80082be:	2200      	movs	r2, #0
 80082c0:	602a      	str	r2, [r5, #0]
 80082c2:	461a      	mov	r2, r3
 80082c4:	f7f9 fde7 	bl	8001e96 <_write>
 80082c8:	1c43      	adds	r3, r0, #1
 80082ca:	d102      	bne.n	80082d2 <_write_r+0x1e>
 80082cc:	682b      	ldr	r3, [r5, #0]
 80082ce:	b103      	cbz	r3, 80082d2 <_write_r+0x1e>
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	20010764 	.word	0x20010764

080082d8 <__errno>:
 80082d8:	4b01      	ldr	r3, [pc, #4]	; (80082e0 <__errno+0x8>)
 80082da:	6818      	ldr	r0, [r3, #0]
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	200000f4 	.word	0x200000f4

080082e4 <__libc_init_array>:
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	4d0d      	ldr	r5, [pc, #52]	; (800831c <__libc_init_array+0x38>)
 80082e8:	4c0d      	ldr	r4, [pc, #52]	; (8008320 <__libc_init_array+0x3c>)
 80082ea:	1b64      	subs	r4, r4, r5
 80082ec:	10a4      	asrs	r4, r4, #2
 80082ee:	2600      	movs	r6, #0
 80082f0:	42a6      	cmp	r6, r4
 80082f2:	d109      	bne.n	8008308 <__libc_init_array+0x24>
 80082f4:	4d0b      	ldr	r5, [pc, #44]	; (8008324 <__libc_init_array+0x40>)
 80082f6:	4c0c      	ldr	r4, [pc, #48]	; (8008328 <__libc_init_array+0x44>)
 80082f8:	f001 feee 	bl	800a0d8 <_init>
 80082fc:	1b64      	subs	r4, r4, r5
 80082fe:	10a4      	asrs	r4, r4, #2
 8008300:	2600      	movs	r6, #0
 8008302:	42a6      	cmp	r6, r4
 8008304:	d105      	bne.n	8008312 <__libc_init_array+0x2e>
 8008306:	bd70      	pop	{r4, r5, r6, pc}
 8008308:	f855 3b04 	ldr.w	r3, [r5], #4
 800830c:	4798      	blx	r3
 800830e:	3601      	adds	r6, #1
 8008310:	e7ee      	b.n	80082f0 <__libc_init_array+0xc>
 8008312:	f855 3b04 	ldr.w	r3, [r5], #4
 8008316:	4798      	blx	r3
 8008318:	3601      	adds	r6, #1
 800831a:	e7f2      	b.n	8008302 <__libc_init_array+0x1e>
 800831c:	0800a484 	.word	0x0800a484
 8008320:	0800a484 	.word	0x0800a484
 8008324:	0800a484 	.word	0x0800a484
 8008328:	0800a488 	.word	0x0800a488

0800832c <__retarget_lock_init_recursive>:
 800832c:	4770      	bx	lr

0800832e <__retarget_lock_acquire_recursive>:
 800832e:	4770      	bx	lr

08008330 <__retarget_lock_release_recursive>:
 8008330:	4770      	bx	lr

08008332 <quorem>:
 8008332:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008336:	6903      	ldr	r3, [r0, #16]
 8008338:	690c      	ldr	r4, [r1, #16]
 800833a:	42a3      	cmp	r3, r4
 800833c:	4607      	mov	r7, r0
 800833e:	db7e      	blt.n	800843e <quorem+0x10c>
 8008340:	3c01      	subs	r4, #1
 8008342:	f101 0814 	add.w	r8, r1, #20
 8008346:	f100 0514 	add.w	r5, r0, #20
 800834a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008354:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008358:	3301      	adds	r3, #1
 800835a:	429a      	cmp	r2, r3
 800835c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008360:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008364:	fbb2 f6f3 	udiv	r6, r2, r3
 8008368:	d331      	bcc.n	80083ce <quorem+0x9c>
 800836a:	f04f 0e00 	mov.w	lr, #0
 800836e:	4640      	mov	r0, r8
 8008370:	46ac      	mov	ip, r5
 8008372:	46f2      	mov	sl, lr
 8008374:	f850 2b04 	ldr.w	r2, [r0], #4
 8008378:	b293      	uxth	r3, r2
 800837a:	fb06 e303 	mla	r3, r6, r3, lr
 800837e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008382:	0c1a      	lsrs	r2, r3, #16
 8008384:	b29b      	uxth	r3, r3
 8008386:	ebaa 0303 	sub.w	r3, sl, r3
 800838a:	f8dc a000 	ldr.w	sl, [ip]
 800838e:	fa13 f38a 	uxtah	r3, r3, sl
 8008392:	fb06 220e 	mla	r2, r6, lr, r2
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	9b00      	ldr	r3, [sp, #0]
 800839a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800839e:	b292      	uxth	r2, r2
 80083a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80083a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80083ac:	4581      	cmp	r9, r0
 80083ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083b2:	f84c 3b04 	str.w	r3, [ip], #4
 80083b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80083ba:	d2db      	bcs.n	8008374 <quorem+0x42>
 80083bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80083c0:	b92b      	cbnz	r3, 80083ce <quorem+0x9c>
 80083c2:	9b01      	ldr	r3, [sp, #4]
 80083c4:	3b04      	subs	r3, #4
 80083c6:	429d      	cmp	r5, r3
 80083c8:	461a      	mov	r2, r3
 80083ca:	d32c      	bcc.n	8008426 <quorem+0xf4>
 80083cc:	613c      	str	r4, [r7, #16]
 80083ce:	4638      	mov	r0, r7
 80083d0:	f001 f9a8 	bl	8009724 <__mcmp>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	db22      	blt.n	800841e <quorem+0xec>
 80083d8:	3601      	adds	r6, #1
 80083da:	4629      	mov	r1, r5
 80083dc:	2000      	movs	r0, #0
 80083de:	f858 2b04 	ldr.w	r2, [r8], #4
 80083e2:	f8d1 c000 	ldr.w	ip, [r1]
 80083e6:	b293      	uxth	r3, r2
 80083e8:	1ac3      	subs	r3, r0, r3
 80083ea:	0c12      	lsrs	r2, r2, #16
 80083ec:	fa13 f38c 	uxtah	r3, r3, ip
 80083f0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80083f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083fe:	45c1      	cmp	r9, r8
 8008400:	f841 3b04 	str.w	r3, [r1], #4
 8008404:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008408:	d2e9      	bcs.n	80083de <quorem+0xac>
 800840a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800840e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008412:	b922      	cbnz	r2, 800841e <quorem+0xec>
 8008414:	3b04      	subs	r3, #4
 8008416:	429d      	cmp	r5, r3
 8008418:	461a      	mov	r2, r3
 800841a:	d30a      	bcc.n	8008432 <quorem+0x100>
 800841c:	613c      	str	r4, [r7, #16]
 800841e:	4630      	mov	r0, r6
 8008420:	b003      	add	sp, #12
 8008422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008426:	6812      	ldr	r2, [r2, #0]
 8008428:	3b04      	subs	r3, #4
 800842a:	2a00      	cmp	r2, #0
 800842c:	d1ce      	bne.n	80083cc <quorem+0x9a>
 800842e:	3c01      	subs	r4, #1
 8008430:	e7c9      	b.n	80083c6 <quorem+0x94>
 8008432:	6812      	ldr	r2, [r2, #0]
 8008434:	3b04      	subs	r3, #4
 8008436:	2a00      	cmp	r2, #0
 8008438:	d1f0      	bne.n	800841c <quorem+0xea>
 800843a:	3c01      	subs	r4, #1
 800843c:	e7eb      	b.n	8008416 <quorem+0xe4>
 800843e:	2000      	movs	r0, #0
 8008440:	e7ee      	b.n	8008420 <quorem+0xee>
 8008442:	0000      	movs	r0, r0
 8008444:	0000      	movs	r0, r0
	...

08008448 <_dtoa_r>:
 8008448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844c:	ed2d 8b04 	vpush	{d8-d9}
 8008450:	69c5      	ldr	r5, [r0, #28]
 8008452:	b093      	sub	sp, #76	; 0x4c
 8008454:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008458:	ec57 6b10 	vmov	r6, r7, d0
 800845c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008460:	9107      	str	r1, [sp, #28]
 8008462:	4604      	mov	r4, r0
 8008464:	920a      	str	r2, [sp, #40]	; 0x28
 8008466:	930d      	str	r3, [sp, #52]	; 0x34
 8008468:	b975      	cbnz	r5, 8008488 <_dtoa_r+0x40>
 800846a:	2010      	movs	r0, #16
 800846c:	f000 fe2a 	bl	80090c4 <malloc>
 8008470:	4602      	mov	r2, r0
 8008472:	61e0      	str	r0, [r4, #28]
 8008474:	b920      	cbnz	r0, 8008480 <_dtoa_r+0x38>
 8008476:	4bae      	ldr	r3, [pc, #696]	; (8008730 <_dtoa_r+0x2e8>)
 8008478:	21ef      	movs	r1, #239	; 0xef
 800847a:	48ae      	ldr	r0, [pc, #696]	; (8008734 <_dtoa_r+0x2ec>)
 800847c:	f001 fb1e 	bl	8009abc <__assert_func>
 8008480:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008484:	6005      	str	r5, [r0, #0]
 8008486:	60c5      	str	r5, [r0, #12]
 8008488:	69e3      	ldr	r3, [r4, #28]
 800848a:	6819      	ldr	r1, [r3, #0]
 800848c:	b151      	cbz	r1, 80084a4 <_dtoa_r+0x5c>
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	604a      	str	r2, [r1, #4]
 8008492:	2301      	movs	r3, #1
 8008494:	4093      	lsls	r3, r2
 8008496:	608b      	str	r3, [r1, #8]
 8008498:	4620      	mov	r0, r4
 800849a:	f000 ff07 	bl	80092ac <_Bfree>
 800849e:	69e3      	ldr	r3, [r4, #28]
 80084a0:	2200      	movs	r2, #0
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	1e3b      	subs	r3, r7, #0
 80084a6:	bfbb      	ittet	lt
 80084a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80084ac:	9303      	strlt	r3, [sp, #12]
 80084ae:	2300      	movge	r3, #0
 80084b0:	2201      	movlt	r2, #1
 80084b2:	bfac      	ite	ge
 80084b4:	f8c8 3000 	strge.w	r3, [r8]
 80084b8:	f8c8 2000 	strlt.w	r2, [r8]
 80084bc:	4b9e      	ldr	r3, [pc, #632]	; (8008738 <_dtoa_r+0x2f0>)
 80084be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80084c2:	ea33 0308 	bics.w	r3, r3, r8
 80084c6:	d11b      	bne.n	8008500 <_dtoa_r+0xb8>
 80084c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80084ce:	6013      	str	r3, [r2, #0]
 80084d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80084d4:	4333      	orrs	r3, r6
 80084d6:	f000 8593 	beq.w	8009000 <_dtoa_r+0xbb8>
 80084da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084dc:	b963      	cbnz	r3, 80084f8 <_dtoa_r+0xb0>
 80084de:	4b97      	ldr	r3, [pc, #604]	; (800873c <_dtoa_r+0x2f4>)
 80084e0:	e027      	b.n	8008532 <_dtoa_r+0xea>
 80084e2:	4b97      	ldr	r3, [pc, #604]	; (8008740 <_dtoa_r+0x2f8>)
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	3308      	adds	r3, #8
 80084e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	9800      	ldr	r0, [sp, #0]
 80084ee:	b013      	add	sp, #76	; 0x4c
 80084f0:	ecbd 8b04 	vpop	{d8-d9}
 80084f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f8:	4b90      	ldr	r3, [pc, #576]	; (800873c <_dtoa_r+0x2f4>)
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	3303      	adds	r3, #3
 80084fe:	e7f3      	b.n	80084e8 <_dtoa_r+0xa0>
 8008500:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008504:	2200      	movs	r2, #0
 8008506:	ec51 0b17 	vmov	r0, r1, d7
 800850a:	eeb0 8a47 	vmov.f32	s16, s14
 800850e:	eef0 8a67 	vmov.f32	s17, s15
 8008512:	2300      	movs	r3, #0
 8008514:	f7f8 fae0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008518:	4681      	mov	r9, r0
 800851a:	b160      	cbz	r0, 8008536 <_dtoa_r+0xee>
 800851c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800851e:	2301      	movs	r3, #1
 8008520:	6013      	str	r3, [r2, #0]
 8008522:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 8568 	beq.w	8008ffa <_dtoa_r+0xbb2>
 800852a:	4b86      	ldr	r3, [pc, #536]	; (8008744 <_dtoa_r+0x2fc>)
 800852c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	3b01      	subs	r3, #1
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	e7da      	b.n	80084ec <_dtoa_r+0xa4>
 8008536:	aa10      	add	r2, sp, #64	; 0x40
 8008538:	a911      	add	r1, sp, #68	; 0x44
 800853a:	4620      	mov	r0, r4
 800853c:	eeb0 0a48 	vmov.f32	s0, s16
 8008540:	eef0 0a68 	vmov.f32	s1, s17
 8008544:	f001 f994 	bl	8009870 <__d2b>
 8008548:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800854c:	4682      	mov	sl, r0
 800854e:	2d00      	cmp	r5, #0
 8008550:	d07f      	beq.n	8008652 <_dtoa_r+0x20a>
 8008552:	ee18 3a90 	vmov	r3, s17
 8008556:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800855a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800855e:	ec51 0b18 	vmov	r0, r1, d8
 8008562:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008566:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800856a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800856e:	4619      	mov	r1, r3
 8008570:	2200      	movs	r2, #0
 8008572:	4b75      	ldr	r3, [pc, #468]	; (8008748 <_dtoa_r+0x300>)
 8008574:	f7f7 fe90 	bl	8000298 <__aeabi_dsub>
 8008578:	a367      	add	r3, pc, #412	; (adr r3, 8008718 <_dtoa_r+0x2d0>)
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f7f8 f843 	bl	8000608 <__aeabi_dmul>
 8008582:	a367      	add	r3, pc, #412	; (adr r3, 8008720 <_dtoa_r+0x2d8>)
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	f7f7 fe88 	bl	800029c <__adddf3>
 800858c:	4606      	mov	r6, r0
 800858e:	4628      	mov	r0, r5
 8008590:	460f      	mov	r7, r1
 8008592:	f7f7 ffcf 	bl	8000534 <__aeabi_i2d>
 8008596:	a364      	add	r3, pc, #400	; (adr r3, 8008728 <_dtoa_r+0x2e0>)
 8008598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859c:	f7f8 f834 	bl	8000608 <__aeabi_dmul>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	4630      	mov	r0, r6
 80085a6:	4639      	mov	r1, r7
 80085a8:	f7f7 fe78 	bl	800029c <__adddf3>
 80085ac:	4606      	mov	r6, r0
 80085ae:	460f      	mov	r7, r1
 80085b0:	f7f8 fada 	bl	8000b68 <__aeabi_d2iz>
 80085b4:	2200      	movs	r2, #0
 80085b6:	4683      	mov	fp, r0
 80085b8:	2300      	movs	r3, #0
 80085ba:	4630      	mov	r0, r6
 80085bc:	4639      	mov	r1, r7
 80085be:	f7f8 fa95 	bl	8000aec <__aeabi_dcmplt>
 80085c2:	b148      	cbz	r0, 80085d8 <_dtoa_r+0x190>
 80085c4:	4658      	mov	r0, fp
 80085c6:	f7f7 ffb5 	bl	8000534 <__aeabi_i2d>
 80085ca:	4632      	mov	r2, r6
 80085cc:	463b      	mov	r3, r7
 80085ce:	f7f8 fa83 	bl	8000ad8 <__aeabi_dcmpeq>
 80085d2:	b908      	cbnz	r0, 80085d8 <_dtoa_r+0x190>
 80085d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80085d8:	f1bb 0f16 	cmp.w	fp, #22
 80085dc:	d857      	bhi.n	800868e <_dtoa_r+0x246>
 80085de:	4b5b      	ldr	r3, [pc, #364]	; (800874c <_dtoa_r+0x304>)
 80085e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e8:	ec51 0b18 	vmov	r0, r1, d8
 80085ec:	f7f8 fa7e 	bl	8000aec <__aeabi_dcmplt>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d04e      	beq.n	8008692 <_dtoa_r+0x24a>
 80085f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80085f8:	2300      	movs	r3, #0
 80085fa:	930c      	str	r3, [sp, #48]	; 0x30
 80085fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085fe:	1b5b      	subs	r3, r3, r5
 8008600:	1e5a      	subs	r2, r3, #1
 8008602:	bf45      	ittet	mi
 8008604:	f1c3 0301 	rsbmi	r3, r3, #1
 8008608:	9305      	strmi	r3, [sp, #20]
 800860a:	2300      	movpl	r3, #0
 800860c:	2300      	movmi	r3, #0
 800860e:	9206      	str	r2, [sp, #24]
 8008610:	bf54      	ite	pl
 8008612:	9305      	strpl	r3, [sp, #20]
 8008614:	9306      	strmi	r3, [sp, #24]
 8008616:	f1bb 0f00 	cmp.w	fp, #0
 800861a:	db3c      	blt.n	8008696 <_dtoa_r+0x24e>
 800861c:	9b06      	ldr	r3, [sp, #24]
 800861e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008622:	445b      	add	r3, fp
 8008624:	9306      	str	r3, [sp, #24]
 8008626:	2300      	movs	r3, #0
 8008628:	9308      	str	r3, [sp, #32]
 800862a:	9b07      	ldr	r3, [sp, #28]
 800862c:	2b09      	cmp	r3, #9
 800862e:	d868      	bhi.n	8008702 <_dtoa_r+0x2ba>
 8008630:	2b05      	cmp	r3, #5
 8008632:	bfc4      	itt	gt
 8008634:	3b04      	subgt	r3, #4
 8008636:	9307      	strgt	r3, [sp, #28]
 8008638:	9b07      	ldr	r3, [sp, #28]
 800863a:	f1a3 0302 	sub.w	r3, r3, #2
 800863e:	bfcc      	ite	gt
 8008640:	2500      	movgt	r5, #0
 8008642:	2501      	movle	r5, #1
 8008644:	2b03      	cmp	r3, #3
 8008646:	f200 8085 	bhi.w	8008754 <_dtoa_r+0x30c>
 800864a:	e8df f003 	tbb	[pc, r3]
 800864e:	3b2e      	.short	0x3b2e
 8008650:	5839      	.short	0x5839
 8008652:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008656:	441d      	add	r5, r3
 8008658:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800865c:	2b20      	cmp	r3, #32
 800865e:	bfc1      	itttt	gt
 8008660:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008664:	fa08 f803 	lslgt.w	r8, r8, r3
 8008668:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800866c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008670:	bfd6      	itet	le
 8008672:	f1c3 0320 	rsble	r3, r3, #32
 8008676:	ea48 0003 	orrgt.w	r0, r8, r3
 800867a:	fa06 f003 	lslle.w	r0, r6, r3
 800867e:	f7f7 ff49 	bl	8000514 <__aeabi_ui2d>
 8008682:	2201      	movs	r2, #1
 8008684:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008688:	3d01      	subs	r5, #1
 800868a:	920e      	str	r2, [sp, #56]	; 0x38
 800868c:	e76f      	b.n	800856e <_dtoa_r+0x126>
 800868e:	2301      	movs	r3, #1
 8008690:	e7b3      	b.n	80085fa <_dtoa_r+0x1b2>
 8008692:	900c      	str	r0, [sp, #48]	; 0x30
 8008694:	e7b2      	b.n	80085fc <_dtoa_r+0x1b4>
 8008696:	9b05      	ldr	r3, [sp, #20]
 8008698:	eba3 030b 	sub.w	r3, r3, fp
 800869c:	9305      	str	r3, [sp, #20]
 800869e:	f1cb 0300 	rsb	r3, fp, #0
 80086a2:	9308      	str	r3, [sp, #32]
 80086a4:	2300      	movs	r3, #0
 80086a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80086a8:	e7bf      	b.n	800862a <_dtoa_r+0x1e2>
 80086aa:	2300      	movs	r3, #0
 80086ac:	9309      	str	r3, [sp, #36]	; 0x24
 80086ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	dc52      	bgt.n	800875a <_dtoa_r+0x312>
 80086b4:	2301      	movs	r3, #1
 80086b6:	9301      	str	r3, [sp, #4]
 80086b8:	9304      	str	r3, [sp, #16]
 80086ba:	461a      	mov	r2, r3
 80086bc:	920a      	str	r2, [sp, #40]	; 0x28
 80086be:	e00b      	b.n	80086d8 <_dtoa_r+0x290>
 80086c0:	2301      	movs	r3, #1
 80086c2:	e7f3      	b.n	80086ac <_dtoa_r+0x264>
 80086c4:	2300      	movs	r3, #0
 80086c6:	9309      	str	r3, [sp, #36]	; 0x24
 80086c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ca:	445b      	add	r3, fp
 80086cc:	9301      	str	r3, [sp, #4]
 80086ce:	3301      	adds	r3, #1
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	bfb8      	it	lt
 80086d6:	2301      	movlt	r3, #1
 80086d8:	69e0      	ldr	r0, [r4, #28]
 80086da:	2100      	movs	r1, #0
 80086dc:	2204      	movs	r2, #4
 80086de:	f102 0614 	add.w	r6, r2, #20
 80086e2:	429e      	cmp	r6, r3
 80086e4:	d93d      	bls.n	8008762 <_dtoa_r+0x31a>
 80086e6:	6041      	str	r1, [r0, #4]
 80086e8:	4620      	mov	r0, r4
 80086ea:	f000 fd9f 	bl	800922c <_Balloc>
 80086ee:	9000      	str	r0, [sp, #0]
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d139      	bne.n	8008768 <_dtoa_r+0x320>
 80086f4:	4b16      	ldr	r3, [pc, #88]	; (8008750 <_dtoa_r+0x308>)
 80086f6:	4602      	mov	r2, r0
 80086f8:	f240 11af 	movw	r1, #431	; 0x1af
 80086fc:	e6bd      	b.n	800847a <_dtoa_r+0x32>
 80086fe:	2301      	movs	r3, #1
 8008700:	e7e1      	b.n	80086c6 <_dtoa_r+0x27e>
 8008702:	2501      	movs	r5, #1
 8008704:	2300      	movs	r3, #0
 8008706:	9307      	str	r3, [sp, #28]
 8008708:	9509      	str	r5, [sp, #36]	; 0x24
 800870a:	f04f 33ff 	mov.w	r3, #4294967295
 800870e:	9301      	str	r3, [sp, #4]
 8008710:	9304      	str	r3, [sp, #16]
 8008712:	2200      	movs	r2, #0
 8008714:	2312      	movs	r3, #18
 8008716:	e7d1      	b.n	80086bc <_dtoa_r+0x274>
 8008718:	636f4361 	.word	0x636f4361
 800871c:	3fd287a7 	.word	0x3fd287a7
 8008720:	8b60c8b3 	.word	0x8b60c8b3
 8008724:	3fc68a28 	.word	0x3fc68a28
 8008728:	509f79fb 	.word	0x509f79fb
 800872c:	3fd34413 	.word	0x3fd34413
 8008730:	0800a149 	.word	0x0800a149
 8008734:	0800a160 	.word	0x0800a160
 8008738:	7ff00000 	.word	0x7ff00000
 800873c:	0800a145 	.word	0x0800a145
 8008740:	0800a13c 	.word	0x0800a13c
 8008744:	0800a119 	.word	0x0800a119
 8008748:	3ff80000 	.word	0x3ff80000
 800874c:	0800a250 	.word	0x0800a250
 8008750:	0800a1b8 	.word	0x0800a1b8
 8008754:	2301      	movs	r3, #1
 8008756:	9309      	str	r3, [sp, #36]	; 0x24
 8008758:	e7d7      	b.n	800870a <_dtoa_r+0x2c2>
 800875a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	9304      	str	r3, [sp, #16]
 8008760:	e7ba      	b.n	80086d8 <_dtoa_r+0x290>
 8008762:	3101      	adds	r1, #1
 8008764:	0052      	lsls	r2, r2, #1
 8008766:	e7ba      	b.n	80086de <_dtoa_r+0x296>
 8008768:	69e3      	ldr	r3, [r4, #28]
 800876a:	9a00      	ldr	r2, [sp, #0]
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	9b04      	ldr	r3, [sp, #16]
 8008770:	2b0e      	cmp	r3, #14
 8008772:	f200 80a8 	bhi.w	80088c6 <_dtoa_r+0x47e>
 8008776:	2d00      	cmp	r5, #0
 8008778:	f000 80a5 	beq.w	80088c6 <_dtoa_r+0x47e>
 800877c:	f1bb 0f00 	cmp.w	fp, #0
 8008780:	dd38      	ble.n	80087f4 <_dtoa_r+0x3ac>
 8008782:	4bc0      	ldr	r3, [pc, #768]	; (8008a84 <_dtoa_r+0x63c>)
 8008784:	f00b 020f 	and.w	r2, fp, #15
 8008788:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800878c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008790:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008794:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008798:	d019      	beq.n	80087ce <_dtoa_r+0x386>
 800879a:	4bbb      	ldr	r3, [pc, #748]	; (8008a88 <_dtoa_r+0x640>)
 800879c:	ec51 0b18 	vmov	r0, r1, d8
 80087a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087a4:	f7f8 f85a 	bl	800085c <__aeabi_ddiv>
 80087a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087ac:	f008 080f 	and.w	r8, r8, #15
 80087b0:	2503      	movs	r5, #3
 80087b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008a88 <_dtoa_r+0x640>
 80087b6:	f1b8 0f00 	cmp.w	r8, #0
 80087ba:	d10a      	bne.n	80087d2 <_dtoa_r+0x38a>
 80087bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087c0:	4632      	mov	r2, r6
 80087c2:	463b      	mov	r3, r7
 80087c4:	f7f8 f84a 	bl	800085c <__aeabi_ddiv>
 80087c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087cc:	e02b      	b.n	8008826 <_dtoa_r+0x3de>
 80087ce:	2502      	movs	r5, #2
 80087d0:	e7ef      	b.n	80087b2 <_dtoa_r+0x36a>
 80087d2:	f018 0f01 	tst.w	r8, #1
 80087d6:	d008      	beq.n	80087ea <_dtoa_r+0x3a2>
 80087d8:	4630      	mov	r0, r6
 80087da:	4639      	mov	r1, r7
 80087dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80087e0:	f7f7 ff12 	bl	8000608 <__aeabi_dmul>
 80087e4:	3501      	adds	r5, #1
 80087e6:	4606      	mov	r6, r0
 80087e8:	460f      	mov	r7, r1
 80087ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80087ee:	f109 0908 	add.w	r9, r9, #8
 80087f2:	e7e0      	b.n	80087b6 <_dtoa_r+0x36e>
 80087f4:	f000 809f 	beq.w	8008936 <_dtoa_r+0x4ee>
 80087f8:	f1cb 0600 	rsb	r6, fp, #0
 80087fc:	4ba1      	ldr	r3, [pc, #644]	; (8008a84 <_dtoa_r+0x63c>)
 80087fe:	4fa2      	ldr	r7, [pc, #648]	; (8008a88 <_dtoa_r+0x640>)
 8008800:	f006 020f 	and.w	r2, r6, #15
 8008804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880c:	ec51 0b18 	vmov	r0, r1, d8
 8008810:	f7f7 fefa 	bl	8000608 <__aeabi_dmul>
 8008814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008818:	1136      	asrs	r6, r6, #4
 800881a:	2300      	movs	r3, #0
 800881c:	2502      	movs	r5, #2
 800881e:	2e00      	cmp	r6, #0
 8008820:	d17e      	bne.n	8008920 <_dtoa_r+0x4d8>
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1d0      	bne.n	80087c8 <_dtoa_r+0x380>
 8008826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008828:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 8084 	beq.w	800893a <_dtoa_r+0x4f2>
 8008832:	4b96      	ldr	r3, [pc, #600]	; (8008a8c <_dtoa_r+0x644>)
 8008834:	2200      	movs	r2, #0
 8008836:	4640      	mov	r0, r8
 8008838:	4649      	mov	r1, r9
 800883a:	f7f8 f957 	bl	8000aec <__aeabi_dcmplt>
 800883e:	2800      	cmp	r0, #0
 8008840:	d07b      	beq.n	800893a <_dtoa_r+0x4f2>
 8008842:	9b04      	ldr	r3, [sp, #16]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d078      	beq.n	800893a <_dtoa_r+0x4f2>
 8008848:	9b01      	ldr	r3, [sp, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	dd39      	ble.n	80088c2 <_dtoa_r+0x47a>
 800884e:	4b90      	ldr	r3, [pc, #576]	; (8008a90 <_dtoa_r+0x648>)
 8008850:	2200      	movs	r2, #0
 8008852:	4640      	mov	r0, r8
 8008854:	4649      	mov	r1, r9
 8008856:	f7f7 fed7 	bl	8000608 <__aeabi_dmul>
 800885a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800885e:	9e01      	ldr	r6, [sp, #4]
 8008860:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008864:	3501      	adds	r5, #1
 8008866:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800886a:	4628      	mov	r0, r5
 800886c:	f7f7 fe62 	bl	8000534 <__aeabi_i2d>
 8008870:	4642      	mov	r2, r8
 8008872:	464b      	mov	r3, r9
 8008874:	f7f7 fec8 	bl	8000608 <__aeabi_dmul>
 8008878:	4b86      	ldr	r3, [pc, #536]	; (8008a94 <_dtoa_r+0x64c>)
 800887a:	2200      	movs	r2, #0
 800887c:	f7f7 fd0e 	bl	800029c <__adddf3>
 8008880:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008888:	9303      	str	r3, [sp, #12]
 800888a:	2e00      	cmp	r6, #0
 800888c:	d158      	bne.n	8008940 <_dtoa_r+0x4f8>
 800888e:	4b82      	ldr	r3, [pc, #520]	; (8008a98 <_dtoa_r+0x650>)
 8008890:	2200      	movs	r2, #0
 8008892:	4640      	mov	r0, r8
 8008894:	4649      	mov	r1, r9
 8008896:	f7f7 fcff 	bl	8000298 <__aeabi_dsub>
 800889a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800889e:	4680      	mov	r8, r0
 80088a0:	4689      	mov	r9, r1
 80088a2:	f7f8 f941 	bl	8000b28 <__aeabi_dcmpgt>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	f040 8296 	bne.w	8008dd8 <_dtoa_r+0x990>
 80088ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80088b0:	4640      	mov	r0, r8
 80088b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088b6:	4649      	mov	r1, r9
 80088b8:	f7f8 f918 	bl	8000aec <__aeabi_dcmplt>
 80088bc:	2800      	cmp	r0, #0
 80088be:	f040 8289 	bne.w	8008dd4 <_dtoa_r+0x98c>
 80088c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80088c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f2c0 814e 	blt.w	8008b6a <_dtoa_r+0x722>
 80088ce:	f1bb 0f0e 	cmp.w	fp, #14
 80088d2:	f300 814a 	bgt.w	8008b6a <_dtoa_r+0x722>
 80088d6:	4b6b      	ldr	r3, [pc, #428]	; (8008a84 <_dtoa_r+0x63c>)
 80088d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80088dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f280 80dc 	bge.w	8008aa0 <_dtoa_r+0x658>
 80088e8:	9b04      	ldr	r3, [sp, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f300 80d8 	bgt.w	8008aa0 <_dtoa_r+0x658>
 80088f0:	f040 826f 	bne.w	8008dd2 <_dtoa_r+0x98a>
 80088f4:	4b68      	ldr	r3, [pc, #416]	; (8008a98 <_dtoa_r+0x650>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	4640      	mov	r0, r8
 80088fa:	4649      	mov	r1, r9
 80088fc:	f7f7 fe84 	bl	8000608 <__aeabi_dmul>
 8008900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008904:	f7f8 f906 	bl	8000b14 <__aeabi_dcmpge>
 8008908:	9e04      	ldr	r6, [sp, #16]
 800890a:	4637      	mov	r7, r6
 800890c:	2800      	cmp	r0, #0
 800890e:	f040 8245 	bne.w	8008d9c <_dtoa_r+0x954>
 8008912:	9d00      	ldr	r5, [sp, #0]
 8008914:	2331      	movs	r3, #49	; 0x31
 8008916:	f805 3b01 	strb.w	r3, [r5], #1
 800891a:	f10b 0b01 	add.w	fp, fp, #1
 800891e:	e241      	b.n	8008da4 <_dtoa_r+0x95c>
 8008920:	07f2      	lsls	r2, r6, #31
 8008922:	d505      	bpl.n	8008930 <_dtoa_r+0x4e8>
 8008924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008928:	f7f7 fe6e 	bl	8000608 <__aeabi_dmul>
 800892c:	3501      	adds	r5, #1
 800892e:	2301      	movs	r3, #1
 8008930:	1076      	asrs	r6, r6, #1
 8008932:	3708      	adds	r7, #8
 8008934:	e773      	b.n	800881e <_dtoa_r+0x3d6>
 8008936:	2502      	movs	r5, #2
 8008938:	e775      	b.n	8008826 <_dtoa_r+0x3de>
 800893a:	9e04      	ldr	r6, [sp, #16]
 800893c:	465f      	mov	r7, fp
 800893e:	e792      	b.n	8008866 <_dtoa_r+0x41e>
 8008940:	9900      	ldr	r1, [sp, #0]
 8008942:	4b50      	ldr	r3, [pc, #320]	; (8008a84 <_dtoa_r+0x63c>)
 8008944:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008948:	4431      	add	r1, r6
 800894a:	9102      	str	r1, [sp, #8]
 800894c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800894e:	eeb0 9a47 	vmov.f32	s18, s14
 8008952:	eef0 9a67 	vmov.f32	s19, s15
 8008956:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800895a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800895e:	2900      	cmp	r1, #0
 8008960:	d044      	beq.n	80089ec <_dtoa_r+0x5a4>
 8008962:	494e      	ldr	r1, [pc, #312]	; (8008a9c <_dtoa_r+0x654>)
 8008964:	2000      	movs	r0, #0
 8008966:	f7f7 ff79 	bl	800085c <__aeabi_ddiv>
 800896a:	ec53 2b19 	vmov	r2, r3, d9
 800896e:	f7f7 fc93 	bl	8000298 <__aeabi_dsub>
 8008972:	9d00      	ldr	r5, [sp, #0]
 8008974:	ec41 0b19 	vmov	d9, r0, r1
 8008978:	4649      	mov	r1, r9
 800897a:	4640      	mov	r0, r8
 800897c:	f7f8 f8f4 	bl	8000b68 <__aeabi_d2iz>
 8008980:	4606      	mov	r6, r0
 8008982:	f7f7 fdd7 	bl	8000534 <__aeabi_i2d>
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	4640      	mov	r0, r8
 800898c:	4649      	mov	r1, r9
 800898e:	f7f7 fc83 	bl	8000298 <__aeabi_dsub>
 8008992:	3630      	adds	r6, #48	; 0x30
 8008994:	f805 6b01 	strb.w	r6, [r5], #1
 8008998:	ec53 2b19 	vmov	r2, r3, d9
 800899c:	4680      	mov	r8, r0
 800899e:	4689      	mov	r9, r1
 80089a0:	f7f8 f8a4 	bl	8000aec <__aeabi_dcmplt>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d164      	bne.n	8008a72 <_dtoa_r+0x62a>
 80089a8:	4642      	mov	r2, r8
 80089aa:	464b      	mov	r3, r9
 80089ac:	4937      	ldr	r1, [pc, #220]	; (8008a8c <_dtoa_r+0x644>)
 80089ae:	2000      	movs	r0, #0
 80089b0:	f7f7 fc72 	bl	8000298 <__aeabi_dsub>
 80089b4:	ec53 2b19 	vmov	r2, r3, d9
 80089b8:	f7f8 f898 	bl	8000aec <__aeabi_dcmplt>
 80089bc:	2800      	cmp	r0, #0
 80089be:	f040 80b6 	bne.w	8008b2e <_dtoa_r+0x6e6>
 80089c2:	9b02      	ldr	r3, [sp, #8]
 80089c4:	429d      	cmp	r5, r3
 80089c6:	f43f af7c 	beq.w	80088c2 <_dtoa_r+0x47a>
 80089ca:	4b31      	ldr	r3, [pc, #196]	; (8008a90 <_dtoa_r+0x648>)
 80089cc:	ec51 0b19 	vmov	r0, r1, d9
 80089d0:	2200      	movs	r2, #0
 80089d2:	f7f7 fe19 	bl	8000608 <__aeabi_dmul>
 80089d6:	4b2e      	ldr	r3, [pc, #184]	; (8008a90 <_dtoa_r+0x648>)
 80089d8:	ec41 0b19 	vmov	d9, r0, r1
 80089dc:	2200      	movs	r2, #0
 80089de:	4640      	mov	r0, r8
 80089e0:	4649      	mov	r1, r9
 80089e2:	f7f7 fe11 	bl	8000608 <__aeabi_dmul>
 80089e6:	4680      	mov	r8, r0
 80089e8:	4689      	mov	r9, r1
 80089ea:	e7c5      	b.n	8008978 <_dtoa_r+0x530>
 80089ec:	ec51 0b17 	vmov	r0, r1, d7
 80089f0:	f7f7 fe0a 	bl	8000608 <__aeabi_dmul>
 80089f4:	9b02      	ldr	r3, [sp, #8]
 80089f6:	9d00      	ldr	r5, [sp, #0]
 80089f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80089fa:	ec41 0b19 	vmov	d9, r0, r1
 80089fe:	4649      	mov	r1, r9
 8008a00:	4640      	mov	r0, r8
 8008a02:	f7f8 f8b1 	bl	8000b68 <__aeabi_d2iz>
 8008a06:	4606      	mov	r6, r0
 8008a08:	f7f7 fd94 	bl	8000534 <__aeabi_i2d>
 8008a0c:	3630      	adds	r6, #48	; 0x30
 8008a0e:	4602      	mov	r2, r0
 8008a10:	460b      	mov	r3, r1
 8008a12:	4640      	mov	r0, r8
 8008a14:	4649      	mov	r1, r9
 8008a16:	f7f7 fc3f 	bl	8000298 <__aeabi_dsub>
 8008a1a:	f805 6b01 	strb.w	r6, [r5], #1
 8008a1e:	9b02      	ldr	r3, [sp, #8]
 8008a20:	429d      	cmp	r5, r3
 8008a22:	4680      	mov	r8, r0
 8008a24:	4689      	mov	r9, r1
 8008a26:	f04f 0200 	mov.w	r2, #0
 8008a2a:	d124      	bne.n	8008a76 <_dtoa_r+0x62e>
 8008a2c:	4b1b      	ldr	r3, [pc, #108]	; (8008a9c <_dtoa_r+0x654>)
 8008a2e:	ec51 0b19 	vmov	r0, r1, d9
 8008a32:	f7f7 fc33 	bl	800029c <__adddf3>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4640      	mov	r0, r8
 8008a3c:	4649      	mov	r1, r9
 8008a3e:	f7f8 f873 	bl	8000b28 <__aeabi_dcmpgt>
 8008a42:	2800      	cmp	r0, #0
 8008a44:	d173      	bne.n	8008b2e <_dtoa_r+0x6e6>
 8008a46:	ec53 2b19 	vmov	r2, r3, d9
 8008a4a:	4914      	ldr	r1, [pc, #80]	; (8008a9c <_dtoa_r+0x654>)
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	f7f7 fc23 	bl	8000298 <__aeabi_dsub>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	4640      	mov	r0, r8
 8008a58:	4649      	mov	r1, r9
 8008a5a:	f7f8 f847 	bl	8000aec <__aeabi_dcmplt>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	f43f af2f 	beq.w	80088c2 <_dtoa_r+0x47a>
 8008a64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008a66:	1e6b      	subs	r3, r5, #1
 8008a68:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a6e:	2b30      	cmp	r3, #48	; 0x30
 8008a70:	d0f8      	beq.n	8008a64 <_dtoa_r+0x61c>
 8008a72:	46bb      	mov	fp, r7
 8008a74:	e04a      	b.n	8008b0c <_dtoa_r+0x6c4>
 8008a76:	4b06      	ldr	r3, [pc, #24]	; (8008a90 <_dtoa_r+0x648>)
 8008a78:	f7f7 fdc6 	bl	8000608 <__aeabi_dmul>
 8008a7c:	4680      	mov	r8, r0
 8008a7e:	4689      	mov	r9, r1
 8008a80:	e7bd      	b.n	80089fe <_dtoa_r+0x5b6>
 8008a82:	bf00      	nop
 8008a84:	0800a250 	.word	0x0800a250
 8008a88:	0800a228 	.word	0x0800a228
 8008a8c:	3ff00000 	.word	0x3ff00000
 8008a90:	40240000 	.word	0x40240000
 8008a94:	401c0000 	.word	0x401c0000
 8008a98:	40140000 	.word	0x40140000
 8008a9c:	3fe00000 	.word	0x3fe00000
 8008aa0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008aa4:	9d00      	ldr	r5, [sp, #0]
 8008aa6:	4642      	mov	r2, r8
 8008aa8:	464b      	mov	r3, r9
 8008aaa:	4630      	mov	r0, r6
 8008aac:	4639      	mov	r1, r7
 8008aae:	f7f7 fed5 	bl	800085c <__aeabi_ddiv>
 8008ab2:	f7f8 f859 	bl	8000b68 <__aeabi_d2iz>
 8008ab6:	9001      	str	r0, [sp, #4]
 8008ab8:	f7f7 fd3c 	bl	8000534 <__aeabi_i2d>
 8008abc:	4642      	mov	r2, r8
 8008abe:	464b      	mov	r3, r9
 8008ac0:	f7f7 fda2 	bl	8000608 <__aeabi_dmul>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4630      	mov	r0, r6
 8008aca:	4639      	mov	r1, r7
 8008acc:	f7f7 fbe4 	bl	8000298 <__aeabi_dsub>
 8008ad0:	9e01      	ldr	r6, [sp, #4]
 8008ad2:	9f04      	ldr	r7, [sp, #16]
 8008ad4:	3630      	adds	r6, #48	; 0x30
 8008ad6:	f805 6b01 	strb.w	r6, [r5], #1
 8008ada:	9e00      	ldr	r6, [sp, #0]
 8008adc:	1bae      	subs	r6, r5, r6
 8008ade:	42b7      	cmp	r7, r6
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	d134      	bne.n	8008b50 <_dtoa_r+0x708>
 8008ae6:	f7f7 fbd9 	bl	800029c <__adddf3>
 8008aea:	4642      	mov	r2, r8
 8008aec:	464b      	mov	r3, r9
 8008aee:	4606      	mov	r6, r0
 8008af0:	460f      	mov	r7, r1
 8008af2:	f7f8 f819 	bl	8000b28 <__aeabi_dcmpgt>
 8008af6:	b9c8      	cbnz	r0, 8008b2c <_dtoa_r+0x6e4>
 8008af8:	4642      	mov	r2, r8
 8008afa:	464b      	mov	r3, r9
 8008afc:	4630      	mov	r0, r6
 8008afe:	4639      	mov	r1, r7
 8008b00:	f7f7 ffea 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b04:	b110      	cbz	r0, 8008b0c <_dtoa_r+0x6c4>
 8008b06:	9b01      	ldr	r3, [sp, #4]
 8008b08:	07db      	lsls	r3, r3, #31
 8008b0a:	d40f      	bmi.n	8008b2c <_dtoa_r+0x6e4>
 8008b0c:	4651      	mov	r1, sl
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 fbcc 	bl	80092ac <_Bfree>
 8008b14:	2300      	movs	r3, #0
 8008b16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b18:	702b      	strb	r3, [r5, #0]
 8008b1a:	f10b 0301 	add.w	r3, fp, #1
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f43f ace2 	beq.w	80084ec <_dtoa_r+0xa4>
 8008b28:	601d      	str	r5, [r3, #0]
 8008b2a:	e4df      	b.n	80084ec <_dtoa_r+0xa4>
 8008b2c:	465f      	mov	r7, fp
 8008b2e:	462b      	mov	r3, r5
 8008b30:	461d      	mov	r5, r3
 8008b32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b36:	2a39      	cmp	r2, #57	; 0x39
 8008b38:	d106      	bne.n	8008b48 <_dtoa_r+0x700>
 8008b3a:	9a00      	ldr	r2, [sp, #0]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d1f7      	bne.n	8008b30 <_dtoa_r+0x6e8>
 8008b40:	9900      	ldr	r1, [sp, #0]
 8008b42:	2230      	movs	r2, #48	; 0x30
 8008b44:	3701      	adds	r7, #1
 8008b46:	700a      	strb	r2, [r1, #0]
 8008b48:	781a      	ldrb	r2, [r3, #0]
 8008b4a:	3201      	adds	r2, #1
 8008b4c:	701a      	strb	r2, [r3, #0]
 8008b4e:	e790      	b.n	8008a72 <_dtoa_r+0x62a>
 8008b50:	4ba3      	ldr	r3, [pc, #652]	; (8008de0 <_dtoa_r+0x998>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	f7f7 fd58 	bl	8000608 <__aeabi_dmul>
 8008b58:	2200      	movs	r2, #0
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	4606      	mov	r6, r0
 8008b5e:	460f      	mov	r7, r1
 8008b60:	f7f7 ffba 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d09e      	beq.n	8008aa6 <_dtoa_r+0x65e>
 8008b68:	e7d0      	b.n	8008b0c <_dtoa_r+0x6c4>
 8008b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b6c:	2a00      	cmp	r2, #0
 8008b6e:	f000 80ca 	beq.w	8008d06 <_dtoa_r+0x8be>
 8008b72:	9a07      	ldr	r2, [sp, #28]
 8008b74:	2a01      	cmp	r2, #1
 8008b76:	f300 80ad 	bgt.w	8008cd4 <_dtoa_r+0x88c>
 8008b7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b7c:	2a00      	cmp	r2, #0
 8008b7e:	f000 80a5 	beq.w	8008ccc <_dtoa_r+0x884>
 8008b82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008b86:	9e08      	ldr	r6, [sp, #32]
 8008b88:	9d05      	ldr	r5, [sp, #20]
 8008b8a:	9a05      	ldr	r2, [sp, #20]
 8008b8c:	441a      	add	r2, r3
 8008b8e:	9205      	str	r2, [sp, #20]
 8008b90:	9a06      	ldr	r2, [sp, #24]
 8008b92:	2101      	movs	r1, #1
 8008b94:	441a      	add	r2, r3
 8008b96:	4620      	mov	r0, r4
 8008b98:	9206      	str	r2, [sp, #24]
 8008b9a:	f000 fc3d 	bl	8009418 <__i2b>
 8008b9e:	4607      	mov	r7, r0
 8008ba0:	b165      	cbz	r5, 8008bbc <_dtoa_r+0x774>
 8008ba2:	9b06      	ldr	r3, [sp, #24]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	dd09      	ble.n	8008bbc <_dtoa_r+0x774>
 8008ba8:	42ab      	cmp	r3, r5
 8008baa:	9a05      	ldr	r2, [sp, #20]
 8008bac:	bfa8      	it	ge
 8008bae:	462b      	movge	r3, r5
 8008bb0:	1ad2      	subs	r2, r2, r3
 8008bb2:	9205      	str	r2, [sp, #20]
 8008bb4:	9a06      	ldr	r2, [sp, #24]
 8008bb6:	1aed      	subs	r5, r5, r3
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	9306      	str	r3, [sp, #24]
 8008bbc:	9b08      	ldr	r3, [sp, #32]
 8008bbe:	b1f3      	cbz	r3, 8008bfe <_dtoa_r+0x7b6>
 8008bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 80a3 	beq.w	8008d0e <_dtoa_r+0x8c6>
 8008bc8:	2e00      	cmp	r6, #0
 8008bca:	dd10      	ble.n	8008bee <_dtoa_r+0x7a6>
 8008bcc:	4639      	mov	r1, r7
 8008bce:	4632      	mov	r2, r6
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f000 fce1 	bl	8009598 <__pow5mult>
 8008bd6:	4652      	mov	r2, sl
 8008bd8:	4601      	mov	r1, r0
 8008bda:	4607      	mov	r7, r0
 8008bdc:	4620      	mov	r0, r4
 8008bde:	f000 fc31 	bl	8009444 <__multiply>
 8008be2:	4651      	mov	r1, sl
 8008be4:	4680      	mov	r8, r0
 8008be6:	4620      	mov	r0, r4
 8008be8:	f000 fb60 	bl	80092ac <_Bfree>
 8008bec:	46c2      	mov	sl, r8
 8008bee:	9b08      	ldr	r3, [sp, #32]
 8008bf0:	1b9a      	subs	r2, r3, r6
 8008bf2:	d004      	beq.n	8008bfe <_dtoa_r+0x7b6>
 8008bf4:	4651      	mov	r1, sl
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f000 fcce 	bl	8009598 <__pow5mult>
 8008bfc:	4682      	mov	sl, r0
 8008bfe:	2101      	movs	r1, #1
 8008c00:	4620      	mov	r0, r4
 8008c02:	f000 fc09 	bl	8009418 <__i2b>
 8008c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	4606      	mov	r6, r0
 8008c0c:	f340 8081 	ble.w	8008d12 <_dtoa_r+0x8ca>
 8008c10:	461a      	mov	r2, r3
 8008c12:	4601      	mov	r1, r0
 8008c14:	4620      	mov	r0, r4
 8008c16:	f000 fcbf 	bl	8009598 <__pow5mult>
 8008c1a:	9b07      	ldr	r3, [sp, #28]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	4606      	mov	r6, r0
 8008c20:	dd7a      	ble.n	8008d18 <_dtoa_r+0x8d0>
 8008c22:	f04f 0800 	mov.w	r8, #0
 8008c26:	6933      	ldr	r3, [r6, #16]
 8008c28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008c2c:	6918      	ldr	r0, [r3, #16]
 8008c2e:	f000 fba5 	bl	800937c <__hi0bits>
 8008c32:	f1c0 0020 	rsb	r0, r0, #32
 8008c36:	9b06      	ldr	r3, [sp, #24]
 8008c38:	4418      	add	r0, r3
 8008c3a:	f010 001f 	ands.w	r0, r0, #31
 8008c3e:	f000 8094 	beq.w	8008d6a <_dtoa_r+0x922>
 8008c42:	f1c0 0320 	rsb	r3, r0, #32
 8008c46:	2b04      	cmp	r3, #4
 8008c48:	f340 8085 	ble.w	8008d56 <_dtoa_r+0x90e>
 8008c4c:	9b05      	ldr	r3, [sp, #20]
 8008c4e:	f1c0 001c 	rsb	r0, r0, #28
 8008c52:	4403      	add	r3, r0
 8008c54:	9305      	str	r3, [sp, #20]
 8008c56:	9b06      	ldr	r3, [sp, #24]
 8008c58:	4403      	add	r3, r0
 8008c5a:	4405      	add	r5, r0
 8008c5c:	9306      	str	r3, [sp, #24]
 8008c5e:	9b05      	ldr	r3, [sp, #20]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dd05      	ble.n	8008c70 <_dtoa_r+0x828>
 8008c64:	4651      	mov	r1, sl
 8008c66:	461a      	mov	r2, r3
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 fcef 	bl	800964c <__lshift>
 8008c6e:	4682      	mov	sl, r0
 8008c70:	9b06      	ldr	r3, [sp, #24]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	dd05      	ble.n	8008c82 <_dtoa_r+0x83a>
 8008c76:	4631      	mov	r1, r6
 8008c78:	461a      	mov	r2, r3
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f000 fce6 	bl	800964c <__lshift>
 8008c80:	4606      	mov	r6, r0
 8008c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d072      	beq.n	8008d6e <_dtoa_r+0x926>
 8008c88:	4631      	mov	r1, r6
 8008c8a:	4650      	mov	r0, sl
 8008c8c:	f000 fd4a 	bl	8009724 <__mcmp>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	da6c      	bge.n	8008d6e <_dtoa_r+0x926>
 8008c94:	2300      	movs	r3, #0
 8008c96:	4651      	mov	r1, sl
 8008c98:	220a      	movs	r2, #10
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f000 fb28 	bl	80092f0 <__multadd>
 8008ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ca2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ca6:	4682      	mov	sl, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f000 81b0 	beq.w	800900e <_dtoa_r+0xbc6>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	220a      	movs	r2, #10
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f000 fb1b 	bl	80092f0 <__multadd>
 8008cba:	9b01      	ldr	r3, [sp, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	4607      	mov	r7, r0
 8008cc0:	f300 8096 	bgt.w	8008df0 <_dtoa_r+0x9a8>
 8008cc4:	9b07      	ldr	r3, [sp, #28]
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	dc59      	bgt.n	8008d7e <_dtoa_r+0x936>
 8008cca:	e091      	b.n	8008df0 <_dtoa_r+0x9a8>
 8008ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008cd2:	e758      	b.n	8008b86 <_dtoa_r+0x73e>
 8008cd4:	9b04      	ldr	r3, [sp, #16]
 8008cd6:	1e5e      	subs	r6, r3, #1
 8008cd8:	9b08      	ldr	r3, [sp, #32]
 8008cda:	42b3      	cmp	r3, r6
 8008cdc:	bfbf      	itttt	lt
 8008cde:	9b08      	ldrlt	r3, [sp, #32]
 8008ce0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008ce2:	9608      	strlt	r6, [sp, #32]
 8008ce4:	1af3      	sublt	r3, r6, r3
 8008ce6:	bfb4      	ite	lt
 8008ce8:	18d2      	addlt	r2, r2, r3
 8008cea:	1b9e      	subge	r6, r3, r6
 8008cec:	9b04      	ldr	r3, [sp, #16]
 8008cee:	bfbc      	itt	lt
 8008cf0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008cf2:	2600      	movlt	r6, #0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	bfb7      	itett	lt
 8008cf8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008cfc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008d00:	1a9d      	sublt	r5, r3, r2
 8008d02:	2300      	movlt	r3, #0
 8008d04:	e741      	b.n	8008b8a <_dtoa_r+0x742>
 8008d06:	9e08      	ldr	r6, [sp, #32]
 8008d08:	9d05      	ldr	r5, [sp, #20]
 8008d0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008d0c:	e748      	b.n	8008ba0 <_dtoa_r+0x758>
 8008d0e:	9a08      	ldr	r2, [sp, #32]
 8008d10:	e770      	b.n	8008bf4 <_dtoa_r+0x7ac>
 8008d12:	9b07      	ldr	r3, [sp, #28]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	dc19      	bgt.n	8008d4c <_dtoa_r+0x904>
 8008d18:	9b02      	ldr	r3, [sp, #8]
 8008d1a:	b9bb      	cbnz	r3, 8008d4c <_dtoa_r+0x904>
 8008d1c:	9b03      	ldr	r3, [sp, #12]
 8008d1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d22:	b99b      	cbnz	r3, 8008d4c <_dtoa_r+0x904>
 8008d24:	9b03      	ldr	r3, [sp, #12]
 8008d26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d2a:	0d1b      	lsrs	r3, r3, #20
 8008d2c:	051b      	lsls	r3, r3, #20
 8008d2e:	b183      	cbz	r3, 8008d52 <_dtoa_r+0x90a>
 8008d30:	9b05      	ldr	r3, [sp, #20]
 8008d32:	3301      	adds	r3, #1
 8008d34:	9305      	str	r3, [sp, #20]
 8008d36:	9b06      	ldr	r3, [sp, #24]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	9306      	str	r3, [sp, #24]
 8008d3c:	f04f 0801 	mov.w	r8, #1
 8008d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f47f af6f 	bne.w	8008c26 <_dtoa_r+0x7de>
 8008d48:	2001      	movs	r0, #1
 8008d4a:	e774      	b.n	8008c36 <_dtoa_r+0x7ee>
 8008d4c:	f04f 0800 	mov.w	r8, #0
 8008d50:	e7f6      	b.n	8008d40 <_dtoa_r+0x8f8>
 8008d52:	4698      	mov	r8, r3
 8008d54:	e7f4      	b.n	8008d40 <_dtoa_r+0x8f8>
 8008d56:	d082      	beq.n	8008c5e <_dtoa_r+0x816>
 8008d58:	9a05      	ldr	r2, [sp, #20]
 8008d5a:	331c      	adds	r3, #28
 8008d5c:	441a      	add	r2, r3
 8008d5e:	9205      	str	r2, [sp, #20]
 8008d60:	9a06      	ldr	r2, [sp, #24]
 8008d62:	441a      	add	r2, r3
 8008d64:	441d      	add	r5, r3
 8008d66:	9206      	str	r2, [sp, #24]
 8008d68:	e779      	b.n	8008c5e <_dtoa_r+0x816>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	e7f4      	b.n	8008d58 <_dtoa_r+0x910>
 8008d6e:	9b04      	ldr	r3, [sp, #16]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	dc37      	bgt.n	8008de4 <_dtoa_r+0x99c>
 8008d74:	9b07      	ldr	r3, [sp, #28]
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	dd34      	ble.n	8008de4 <_dtoa_r+0x99c>
 8008d7a:	9b04      	ldr	r3, [sp, #16]
 8008d7c:	9301      	str	r3, [sp, #4]
 8008d7e:	9b01      	ldr	r3, [sp, #4]
 8008d80:	b963      	cbnz	r3, 8008d9c <_dtoa_r+0x954>
 8008d82:	4631      	mov	r1, r6
 8008d84:	2205      	movs	r2, #5
 8008d86:	4620      	mov	r0, r4
 8008d88:	f000 fab2 	bl	80092f0 <__multadd>
 8008d8c:	4601      	mov	r1, r0
 8008d8e:	4606      	mov	r6, r0
 8008d90:	4650      	mov	r0, sl
 8008d92:	f000 fcc7 	bl	8009724 <__mcmp>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	f73f adbb 	bgt.w	8008912 <_dtoa_r+0x4ca>
 8008d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d9e:	9d00      	ldr	r5, [sp, #0]
 8008da0:	ea6f 0b03 	mvn.w	fp, r3
 8008da4:	f04f 0800 	mov.w	r8, #0
 8008da8:	4631      	mov	r1, r6
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 fa7e 	bl	80092ac <_Bfree>
 8008db0:	2f00      	cmp	r7, #0
 8008db2:	f43f aeab 	beq.w	8008b0c <_dtoa_r+0x6c4>
 8008db6:	f1b8 0f00 	cmp.w	r8, #0
 8008dba:	d005      	beq.n	8008dc8 <_dtoa_r+0x980>
 8008dbc:	45b8      	cmp	r8, r7
 8008dbe:	d003      	beq.n	8008dc8 <_dtoa_r+0x980>
 8008dc0:	4641      	mov	r1, r8
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 fa72 	bl	80092ac <_Bfree>
 8008dc8:	4639      	mov	r1, r7
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f000 fa6e 	bl	80092ac <_Bfree>
 8008dd0:	e69c      	b.n	8008b0c <_dtoa_r+0x6c4>
 8008dd2:	2600      	movs	r6, #0
 8008dd4:	4637      	mov	r7, r6
 8008dd6:	e7e1      	b.n	8008d9c <_dtoa_r+0x954>
 8008dd8:	46bb      	mov	fp, r7
 8008dda:	4637      	mov	r7, r6
 8008ddc:	e599      	b.n	8008912 <_dtoa_r+0x4ca>
 8008dde:	bf00      	nop
 8008de0:	40240000 	.word	0x40240000
 8008de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f000 80c8 	beq.w	8008f7c <_dtoa_r+0xb34>
 8008dec:	9b04      	ldr	r3, [sp, #16]
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	2d00      	cmp	r5, #0
 8008df2:	dd05      	ble.n	8008e00 <_dtoa_r+0x9b8>
 8008df4:	4639      	mov	r1, r7
 8008df6:	462a      	mov	r2, r5
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f000 fc27 	bl	800964c <__lshift>
 8008dfe:	4607      	mov	r7, r0
 8008e00:	f1b8 0f00 	cmp.w	r8, #0
 8008e04:	d05b      	beq.n	8008ebe <_dtoa_r+0xa76>
 8008e06:	6879      	ldr	r1, [r7, #4]
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f000 fa0f 	bl	800922c <_Balloc>
 8008e0e:	4605      	mov	r5, r0
 8008e10:	b928      	cbnz	r0, 8008e1e <_dtoa_r+0x9d6>
 8008e12:	4b83      	ldr	r3, [pc, #524]	; (8009020 <_dtoa_r+0xbd8>)
 8008e14:	4602      	mov	r2, r0
 8008e16:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008e1a:	f7ff bb2e 	b.w	800847a <_dtoa_r+0x32>
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	3202      	adds	r2, #2
 8008e22:	0092      	lsls	r2, r2, #2
 8008e24:	f107 010c 	add.w	r1, r7, #12
 8008e28:	300c      	adds	r0, #12
 8008e2a:	f000 fe39 	bl	8009aa0 <memcpy>
 8008e2e:	2201      	movs	r2, #1
 8008e30:	4629      	mov	r1, r5
 8008e32:	4620      	mov	r0, r4
 8008e34:	f000 fc0a 	bl	800964c <__lshift>
 8008e38:	9b00      	ldr	r3, [sp, #0]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	9304      	str	r3, [sp, #16]
 8008e3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e42:	4413      	add	r3, r2
 8008e44:	9308      	str	r3, [sp, #32]
 8008e46:	9b02      	ldr	r3, [sp, #8]
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	46b8      	mov	r8, r7
 8008e4e:	9306      	str	r3, [sp, #24]
 8008e50:	4607      	mov	r7, r0
 8008e52:	9b04      	ldr	r3, [sp, #16]
 8008e54:	4631      	mov	r1, r6
 8008e56:	3b01      	subs	r3, #1
 8008e58:	4650      	mov	r0, sl
 8008e5a:	9301      	str	r3, [sp, #4]
 8008e5c:	f7ff fa69 	bl	8008332 <quorem>
 8008e60:	4641      	mov	r1, r8
 8008e62:	9002      	str	r0, [sp, #8]
 8008e64:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008e68:	4650      	mov	r0, sl
 8008e6a:	f000 fc5b 	bl	8009724 <__mcmp>
 8008e6e:	463a      	mov	r2, r7
 8008e70:	9005      	str	r0, [sp, #20]
 8008e72:	4631      	mov	r1, r6
 8008e74:	4620      	mov	r0, r4
 8008e76:	f000 fc71 	bl	800975c <__mdiff>
 8008e7a:	68c2      	ldr	r2, [r0, #12]
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	bb02      	cbnz	r2, 8008ec2 <_dtoa_r+0xa7a>
 8008e80:	4601      	mov	r1, r0
 8008e82:	4650      	mov	r0, sl
 8008e84:	f000 fc4e 	bl	8009724 <__mcmp>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	9209      	str	r2, [sp, #36]	; 0x24
 8008e90:	f000 fa0c 	bl	80092ac <_Bfree>
 8008e94:	9b07      	ldr	r3, [sp, #28]
 8008e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e98:	9d04      	ldr	r5, [sp, #16]
 8008e9a:	ea43 0102 	orr.w	r1, r3, r2
 8008e9e:	9b06      	ldr	r3, [sp, #24]
 8008ea0:	4319      	orrs	r1, r3
 8008ea2:	d110      	bne.n	8008ec6 <_dtoa_r+0xa7e>
 8008ea4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ea8:	d029      	beq.n	8008efe <_dtoa_r+0xab6>
 8008eaa:	9b05      	ldr	r3, [sp, #20]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	dd02      	ble.n	8008eb6 <_dtoa_r+0xa6e>
 8008eb0:	9b02      	ldr	r3, [sp, #8]
 8008eb2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008eb6:	9b01      	ldr	r3, [sp, #4]
 8008eb8:	f883 9000 	strb.w	r9, [r3]
 8008ebc:	e774      	b.n	8008da8 <_dtoa_r+0x960>
 8008ebe:	4638      	mov	r0, r7
 8008ec0:	e7ba      	b.n	8008e38 <_dtoa_r+0x9f0>
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	e7e1      	b.n	8008e8a <_dtoa_r+0xa42>
 8008ec6:	9b05      	ldr	r3, [sp, #20]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	db04      	blt.n	8008ed6 <_dtoa_r+0xa8e>
 8008ecc:	9907      	ldr	r1, [sp, #28]
 8008ece:	430b      	orrs	r3, r1
 8008ed0:	9906      	ldr	r1, [sp, #24]
 8008ed2:	430b      	orrs	r3, r1
 8008ed4:	d120      	bne.n	8008f18 <_dtoa_r+0xad0>
 8008ed6:	2a00      	cmp	r2, #0
 8008ed8:	dded      	ble.n	8008eb6 <_dtoa_r+0xa6e>
 8008eda:	4651      	mov	r1, sl
 8008edc:	2201      	movs	r2, #1
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f000 fbb4 	bl	800964c <__lshift>
 8008ee4:	4631      	mov	r1, r6
 8008ee6:	4682      	mov	sl, r0
 8008ee8:	f000 fc1c 	bl	8009724 <__mcmp>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	dc03      	bgt.n	8008ef8 <_dtoa_r+0xab0>
 8008ef0:	d1e1      	bne.n	8008eb6 <_dtoa_r+0xa6e>
 8008ef2:	f019 0f01 	tst.w	r9, #1
 8008ef6:	d0de      	beq.n	8008eb6 <_dtoa_r+0xa6e>
 8008ef8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008efc:	d1d8      	bne.n	8008eb0 <_dtoa_r+0xa68>
 8008efe:	9a01      	ldr	r2, [sp, #4]
 8008f00:	2339      	movs	r3, #57	; 0x39
 8008f02:	7013      	strb	r3, [r2, #0]
 8008f04:	462b      	mov	r3, r5
 8008f06:	461d      	mov	r5, r3
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f0e:	2a39      	cmp	r2, #57	; 0x39
 8008f10:	d06c      	beq.n	8008fec <_dtoa_r+0xba4>
 8008f12:	3201      	adds	r2, #1
 8008f14:	701a      	strb	r2, [r3, #0]
 8008f16:	e747      	b.n	8008da8 <_dtoa_r+0x960>
 8008f18:	2a00      	cmp	r2, #0
 8008f1a:	dd07      	ble.n	8008f2c <_dtoa_r+0xae4>
 8008f1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008f20:	d0ed      	beq.n	8008efe <_dtoa_r+0xab6>
 8008f22:	9a01      	ldr	r2, [sp, #4]
 8008f24:	f109 0301 	add.w	r3, r9, #1
 8008f28:	7013      	strb	r3, [r2, #0]
 8008f2a:	e73d      	b.n	8008da8 <_dtoa_r+0x960>
 8008f2c:	9b04      	ldr	r3, [sp, #16]
 8008f2e:	9a08      	ldr	r2, [sp, #32]
 8008f30:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d043      	beq.n	8008fc0 <_dtoa_r+0xb78>
 8008f38:	4651      	mov	r1, sl
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	220a      	movs	r2, #10
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f000 f9d6 	bl	80092f0 <__multadd>
 8008f44:	45b8      	cmp	r8, r7
 8008f46:	4682      	mov	sl, r0
 8008f48:	f04f 0300 	mov.w	r3, #0
 8008f4c:	f04f 020a 	mov.w	r2, #10
 8008f50:	4641      	mov	r1, r8
 8008f52:	4620      	mov	r0, r4
 8008f54:	d107      	bne.n	8008f66 <_dtoa_r+0xb1e>
 8008f56:	f000 f9cb 	bl	80092f0 <__multadd>
 8008f5a:	4680      	mov	r8, r0
 8008f5c:	4607      	mov	r7, r0
 8008f5e:	9b04      	ldr	r3, [sp, #16]
 8008f60:	3301      	adds	r3, #1
 8008f62:	9304      	str	r3, [sp, #16]
 8008f64:	e775      	b.n	8008e52 <_dtoa_r+0xa0a>
 8008f66:	f000 f9c3 	bl	80092f0 <__multadd>
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	4680      	mov	r8, r0
 8008f6e:	2300      	movs	r3, #0
 8008f70:	220a      	movs	r2, #10
 8008f72:	4620      	mov	r0, r4
 8008f74:	f000 f9bc 	bl	80092f0 <__multadd>
 8008f78:	4607      	mov	r7, r0
 8008f7a:	e7f0      	b.n	8008f5e <_dtoa_r+0xb16>
 8008f7c:	9b04      	ldr	r3, [sp, #16]
 8008f7e:	9301      	str	r3, [sp, #4]
 8008f80:	9d00      	ldr	r5, [sp, #0]
 8008f82:	4631      	mov	r1, r6
 8008f84:	4650      	mov	r0, sl
 8008f86:	f7ff f9d4 	bl	8008332 <quorem>
 8008f8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008f8e:	9b00      	ldr	r3, [sp, #0]
 8008f90:	f805 9b01 	strb.w	r9, [r5], #1
 8008f94:	1aea      	subs	r2, r5, r3
 8008f96:	9b01      	ldr	r3, [sp, #4]
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	dd07      	ble.n	8008fac <_dtoa_r+0xb64>
 8008f9c:	4651      	mov	r1, sl
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	220a      	movs	r2, #10
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 f9a4 	bl	80092f0 <__multadd>
 8008fa8:	4682      	mov	sl, r0
 8008faa:	e7ea      	b.n	8008f82 <_dtoa_r+0xb3a>
 8008fac:	9b01      	ldr	r3, [sp, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	bfc8      	it	gt
 8008fb2:	461d      	movgt	r5, r3
 8008fb4:	9b00      	ldr	r3, [sp, #0]
 8008fb6:	bfd8      	it	le
 8008fb8:	2501      	movle	r5, #1
 8008fba:	441d      	add	r5, r3
 8008fbc:	f04f 0800 	mov.w	r8, #0
 8008fc0:	4651      	mov	r1, sl
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f000 fb41 	bl	800964c <__lshift>
 8008fca:	4631      	mov	r1, r6
 8008fcc:	4682      	mov	sl, r0
 8008fce:	f000 fba9 	bl	8009724 <__mcmp>
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	dc96      	bgt.n	8008f04 <_dtoa_r+0xabc>
 8008fd6:	d102      	bne.n	8008fde <_dtoa_r+0xb96>
 8008fd8:	f019 0f01 	tst.w	r9, #1
 8008fdc:	d192      	bne.n	8008f04 <_dtoa_r+0xabc>
 8008fde:	462b      	mov	r3, r5
 8008fe0:	461d      	mov	r5, r3
 8008fe2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fe6:	2a30      	cmp	r2, #48	; 0x30
 8008fe8:	d0fa      	beq.n	8008fe0 <_dtoa_r+0xb98>
 8008fea:	e6dd      	b.n	8008da8 <_dtoa_r+0x960>
 8008fec:	9a00      	ldr	r2, [sp, #0]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d189      	bne.n	8008f06 <_dtoa_r+0xabe>
 8008ff2:	f10b 0b01 	add.w	fp, fp, #1
 8008ff6:	2331      	movs	r3, #49	; 0x31
 8008ff8:	e796      	b.n	8008f28 <_dtoa_r+0xae0>
 8008ffa:	4b0a      	ldr	r3, [pc, #40]	; (8009024 <_dtoa_r+0xbdc>)
 8008ffc:	f7ff ba99 	b.w	8008532 <_dtoa_r+0xea>
 8009000:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009002:	2b00      	cmp	r3, #0
 8009004:	f47f aa6d 	bne.w	80084e2 <_dtoa_r+0x9a>
 8009008:	4b07      	ldr	r3, [pc, #28]	; (8009028 <_dtoa_r+0xbe0>)
 800900a:	f7ff ba92 	b.w	8008532 <_dtoa_r+0xea>
 800900e:	9b01      	ldr	r3, [sp, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	dcb5      	bgt.n	8008f80 <_dtoa_r+0xb38>
 8009014:	9b07      	ldr	r3, [sp, #28]
 8009016:	2b02      	cmp	r3, #2
 8009018:	f73f aeb1 	bgt.w	8008d7e <_dtoa_r+0x936>
 800901c:	e7b0      	b.n	8008f80 <_dtoa_r+0xb38>
 800901e:	bf00      	nop
 8009020:	0800a1b8 	.word	0x0800a1b8
 8009024:	0800a118 	.word	0x0800a118
 8009028:	0800a13c 	.word	0x0800a13c

0800902c <_free_r>:
 800902c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800902e:	2900      	cmp	r1, #0
 8009030:	d044      	beq.n	80090bc <_free_r+0x90>
 8009032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009036:	9001      	str	r0, [sp, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	f1a1 0404 	sub.w	r4, r1, #4
 800903e:	bfb8      	it	lt
 8009040:	18e4      	addlt	r4, r4, r3
 8009042:	f000 f8e7 	bl	8009214 <__malloc_lock>
 8009046:	4a1e      	ldr	r2, [pc, #120]	; (80090c0 <_free_r+0x94>)
 8009048:	9801      	ldr	r0, [sp, #4]
 800904a:	6813      	ldr	r3, [r2, #0]
 800904c:	b933      	cbnz	r3, 800905c <_free_r+0x30>
 800904e:	6063      	str	r3, [r4, #4]
 8009050:	6014      	str	r4, [r2, #0]
 8009052:	b003      	add	sp, #12
 8009054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009058:	f000 b8e2 	b.w	8009220 <__malloc_unlock>
 800905c:	42a3      	cmp	r3, r4
 800905e:	d908      	bls.n	8009072 <_free_r+0x46>
 8009060:	6825      	ldr	r5, [r4, #0]
 8009062:	1961      	adds	r1, r4, r5
 8009064:	428b      	cmp	r3, r1
 8009066:	bf01      	itttt	eq
 8009068:	6819      	ldreq	r1, [r3, #0]
 800906a:	685b      	ldreq	r3, [r3, #4]
 800906c:	1949      	addeq	r1, r1, r5
 800906e:	6021      	streq	r1, [r4, #0]
 8009070:	e7ed      	b.n	800904e <_free_r+0x22>
 8009072:	461a      	mov	r2, r3
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	b10b      	cbz	r3, 800907c <_free_r+0x50>
 8009078:	42a3      	cmp	r3, r4
 800907a:	d9fa      	bls.n	8009072 <_free_r+0x46>
 800907c:	6811      	ldr	r1, [r2, #0]
 800907e:	1855      	adds	r5, r2, r1
 8009080:	42a5      	cmp	r5, r4
 8009082:	d10b      	bne.n	800909c <_free_r+0x70>
 8009084:	6824      	ldr	r4, [r4, #0]
 8009086:	4421      	add	r1, r4
 8009088:	1854      	adds	r4, r2, r1
 800908a:	42a3      	cmp	r3, r4
 800908c:	6011      	str	r1, [r2, #0]
 800908e:	d1e0      	bne.n	8009052 <_free_r+0x26>
 8009090:	681c      	ldr	r4, [r3, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	6053      	str	r3, [r2, #4]
 8009096:	440c      	add	r4, r1
 8009098:	6014      	str	r4, [r2, #0]
 800909a:	e7da      	b.n	8009052 <_free_r+0x26>
 800909c:	d902      	bls.n	80090a4 <_free_r+0x78>
 800909e:	230c      	movs	r3, #12
 80090a0:	6003      	str	r3, [r0, #0]
 80090a2:	e7d6      	b.n	8009052 <_free_r+0x26>
 80090a4:	6825      	ldr	r5, [r4, #0]
 80090a6:	1961      	adds	r1, r4, r5
 80090a8:	428b      	cmp	r3, r1
 80090aa:	bf04      	itt	eq
 80090ac:	6819      	ldreq	r1, [r3, #0]
 80090ae:	685b      	ldreq	r3, [r3, #4]
 80090b0:	6063      	str	r3, [r4, #4]
 80090b2:	bf04      	itt	eq
 80090b4:	1949      	addeq	r1, r1, r5
 80090b6:	6021      	streq	r1, [r4, #0]
 80090b8:	6054      	str	r4, [r2, #4]
 80090ba:	e7ca      	b.n	8009052 <_free_r+0x26>
 80090bc:	b003      	add	sp, #12
 80090be:	bd30      	pop	{r4, r5, pc}
 80090c0:	2001076c 	.word	0x2001076c

080090c4 <malloc>:
 80090c4:	4b02      	ldr	r3, [pc, #8]	; (80090d0 <malloc+0xc>)
 80090c6:	4601      	mov	r1, r0
 80090c8:	6818      	ldr	r0, [r3, #0]
 80090ca:	f000 b823 	b.w	8009114 <_malloc_r>
 80090ce:	bf00      	nop
 80090d0:	200000f4 	.word	0x200000f4

080090d4 <sbrk_aligned>:
 80090d4:	b570      	push	{r4, r5, r6, lr}
 80090d6:	4e0e      	ldr	r6, [pc, #56]	; (8009110 <sbrk_aligned+0x3c>)
 80090d8:	460c      	mov	r4, r1
 80090da:	6831      	ldr	r1, [r6, #0]
 80090dc:	4605      	mov	r5, r0
 80090de:	b911      	cbnz	r1, 80090e6 <sbrk_aligned+0x12>
 80090e0:	f000 fcce 	bl	8009a80 <_sbrk_r>
 80090e4:	6030      	str	r0, [r6, #0]
 80090e6:	4621      	mov	r1, r4
 80090e8:	4628      	mov	r0, r5
 80090ea:	f000 fcc9 	bl	8009a80 <_sbrk_r>
 80090ee:	1c43      	adds	r3, r0, #1
 80090f0:	d00a      	beq.n	8009108 <sbrk_aligned+0x34>
 80090f2:	1cc4      	adds	r4, r0, #3
 80090f4:	f024 0403 	bic.w	r4, r4, #3
 80090f8:	42a0      	cmp	r0, r4
 80090fa:	d007      	beq.n	800910c <sbrk_aligned+0x38>
 80090fc:	1a21      	subs	r1, r4, r0
 80090fe:	4628      	mov	r0, r5
 8009100:	f000 fcbe 	bl	8009a80 <_sbrk_r>
 8009104:	3001      	adds	r0, #1
 8009106:	d101      	bne.n	800910c <sbrk_aligned+0x38>
 8009108:	f04f 34ff 	mov.w	r4, #4294967295
 800910c:	4620      	mov	r0, r4
 800910e:	bd70      	pop	{r4, r5, r6, pc}
 8009110:	20010770 	.word	0x20010770

08009114 <_malloc_r>:
 8009114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009118:	1ccd      	adds	r5, r1, #3
 800911a:	f025 0503 	bic.w	r5, r5, #3
 800911e:	3508      	adds	r5, #8
 8009120:	2d0c      	cmp	r5, #12
 8009122:	bf38      	it	cc
 8009124:	250c      	movcc	r5, #12
 8009126:	2d00      	cmp	r5, #0
 8009128:	4607      	mov	r7, r0
 800912a:	db01      	blt.n	8009130 <_malloc_r+0x1c>
 800912c:	42a9      	cmp	r1, r5
 800912e:	d905      	bls.n	800913c <_malloc_r+0x28>
 8009130:	230c      	movs	r3, #12
 8009132:	603b      	str	r3, [r7, #0]
 8009134:	2600      	movs	r6, #0
 8009136:	4630      	mov	r0, r6
 8009138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800913c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009210 <_malloc_r+0xfc>
 8009140:	f000 f868 	bl	8009214 <__malloc_lock>
 8009144:	f8d8 3000 	ldr.w	r3, [r8]
 8009148:	461c      	mov	r4, r3
 800914a:	bb5c      	cbnz	r4, 80091a4 <_malloc_r+0x90>
 800914c:	4629      	mov	r1, r5
 800914e:	4638      	mov	r0, r7
 8009150:	f7ff ffc0 	bl	80090d4 <sbrk_aligned>
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	4604      	mov	r4, r0
 8009158:	d155      	bne.n	8009206 <_malloc_r+0xf2>
 800915a:	f8d8 4000 	ldr.w	r4, [r8]
 800915e:	4626      	mov	r6, r4
 8009160:	2e00      	cmp	r6, #0
 8009162:	d145      	bne.n	80091f0 <_malloc_r+0xdc>
 8009164:	2c00      	cmp	r4, #0
 8009166:	d048      	beq.n	80091fa <_malloc_r+0xe6>
 8009168:	6823      	ldr	r3, [r4, #0]
 800916a:	4631      	mov	r1, r6
 800916c:	4638      	mov	r0, r7
 800916e:	eb04 0903 	add.w	r9, r4, r3
 8009172:	f000 fc85 	bl	8009a80 <_sbrk_r>
 8009176:	4581      	cmp	r9, r0
 8009178:	d13f      	bne.n	80091fa <_malloc_r+0xe6>
 800917a:	6821      	ldr	r1, [r4, #0]
 800917c:	1a6d      	subs	r5, r5, r1
 800917e:	4629      	mov	r1, r5
 8009180:	4638      	mov	r0, r7
 8009182:	f7ff ffa7 	bl	80090d4 <sbrk_aligned>
 8009186:	3001      	adds	r0, #1
 8009188:	d037      	beq.n	80091fa <_malloc_r+0xe6>
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	442b      	add	r3, r5
 800918e:	6023      	str	r3, [r4, #0]
 8009190:	f8d8 3000 	ldr.w	r3, [r8]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d038      	beq.n	800920a <_malloc_r+0xf6>
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	42a2      	cmp	r2, r4
 800919c:	d12b      	bne.n	80091f6 <_malloc_r+0xe2>
 800919e:	2200      	movs	r2, #0
 80091a0:	605a      	str	r2, [r3, #4]
 80091a2:	e00f      	b.n	80091c4 <_malloc_r+0xb0>
 80091a4:	6822      	ldr	r2, [r4, #0]
 80091a6:	1b52      	subs	r2, r2, r5
 80091a8:	d41f      	bmi.n	80091ea <_malloc_r+0xd6>
 80091aa:	2a0b      	cmp	r2, #11
 80091ac:	d917      	bls.n	80091de <_malloc_r+0xca>
 80091ae:	1961      	adds	r1, r4, r5
 80091b0:	42a3      	cmp	r3, r4
 80091b2:	6025      	str	r5, [r4, #0]
 80091b4:	bf18      	it	ne
 80091b6:	6059      	strne	r1, [r3, #4]
 80091b8:	6863      	ldr	r3, [r4, #4]
 80091ba:	bf08      	it	eq
 80091bc:	f8c8 1000 	streq.w	r1, [r8]
 80091c0:	5162      	str	r2, [r4, r5]
 80091c2:	604b      	str	r3, [r1, #4]
 80091c4:	4638      	mov	r0, r7
 80091c6:	f104 060b 	add.w	r6, r4, #11
 80091ca:	f000 f829 	bl	8009220 <__malloc_unlock>
 80091ce:	f026 0607 	bic.w	r6, r6, #7
 80091d2:	1d23      	adds	r3, r4, #4
 80091d4:	1af2      	subs	r2, r6, r3
 80091d6:	d0ae      	beq.n	8009136 <_malloc_r+0x22>
 80091d8:	1b9b      	subs	r3, r3, r6
 80091da:	50a3      	str	r3, [r4, r2]
 80091dc:	e7ab      	b.n	8009136 <_malloc_r+0x22>
 80091de:	42a3      	cmp	r3, r4
 80091e0:	6862      	ldr	r2, [r4, #4]
 80091e2:	d1dd      	bne.n	80091a0 <_malloc_r+0x8c>
 80091e4:	f8c8 2000 	str.w	r2, [r8]
 80091e8:	e7ec      	b.n	80091c4 <_malloc_r+0xb0>
 80091ea:	4623      	mov	r3, r4
 80091ec:	6864      	ldr	r4, [r4, #4]
 80091ee:	e7ac      	b.n	800914a <_malloc_r+0x36>
 80091f0:	4634      	mov	r4, r6
 80091f2:	6876      	ldr	r6, [r6, #4]
 80091f4:	e7b4      	b.n	8009160 <_malloc_r+0x4c>
 80091f6:	4613      	mov	r3, r2
 80091f8:	e7cc      	b.n	8009194 <_malloc_r+0x80>
 80091fa:	230c      	movs	r3, #12
 80091fc:	603b      	str	r3, [r7, #0]
 80091fe:	4638      	mov	r0, r7
 8009200:	f000 f80e 	bl	8009220 <__malloc_unlock>
 8009204:	e797      	b.n	8009136 <_malloc_r+0x22>
 8009206:	6025      	str	r5, [r4, #0]
 8009208:	e7dc      	b.n	80091c4 <_malloc_r+0xb0>
 800920a:	605b      	str	r3, [r3, #4]
 800920c:	deff      	udf	#255	; 0xff
 800920e:	bf00      	nop
 8009210:	2001076c 	.word	0x2001076c

08009214 <__malloc_lock>:
 8009214:	4801      	ldr	r0, [pc, #4]	; (800921c <__malloc_lock+0x8>)
 8009216:	f7ff b88a 	b.w	800832e <__retarget_lock_acquire_recursive>
 800921a:	bf00      	nop
 800921c:	20010768 	.word	0x20010768

08009220 <__malloc_unlock>:
 8009220:	4801      	ldr	r0, [pc, #4]	; (8009228 <__malloc_unlock+0x8>)
 8009222:	f7ff b885 	b.w	8008330 <__retarget_lock_release_recursive>
 8009226:	bf00      	nop
 8009228:	20010768 	.word	0x20010768

0800922c <_Balloc>:
 800922c:	b570      	push	{r4, r5, r6, lr}
 800922e:	69c6      	ldr	r6, [r0, #28]
 8009230:	4604      	mov	r4, r0
 8009232:	460d      	mov	r5, r1
 8009234:	b976      	cbnz	r6, 8009254 <_Balloc+0x28>
 8009236:	2010      	movs	r0, #16
 8009238:	f7ff ff44 	bl	80090c4 <malloc>
 800923c:	4602      	mov	r2, r0
 800923e:	61e0      	str	r0, [r4, #28]
 8009240:	b920      	cbnz	r0, 800924c <_Balloc+0x20>
 8009242:	4b18      	ldr	r3, [pc, #96]	; (80092a4 <_Balloc+0x78>)
 8009244:	4818      	ldr	r0, [pc, #96]	; (80092a8 <_Balloc+0x7c>)
 8009246:	216b      	movs	r1, #107	; 0x6b
 8009248:	f000 fc38 	bl	8009abc <__assert_func>
 800924c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009250:	6006      	str	r6, [r0, #0]
 8009252:	60c6      	str	r6, [r0, #12]
 8009254:	69e6      	ldr	r6, [r4, #28]
 8009256:	68f3      	ldr	r3, [r6, #12]
 8009258:	b183      	cbz	r3, 800927c <_Balloc+0x50>
 800925a:	69e3      	ldr	r3, [r4, #28]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009262:	b9b8      	cbnz	r0, 8009294 <_Balloc+0x68>
 8009264:	2101      	movs	r1, #1
 8009266:	fa01 f605 	lsl.w	r6, r1, r5
 800926a:	1d72      	adds	r2, r6, #5
 800926c:	0092      	lsls	r2, r2, #2
 800926e:	4620      	mov	r0, r4
 8009270:	f000 fc42 	bl	8009af8 <_calloc_r>
 8009274:	b160      	cbz	r0, 8009290 <_Balloc+0x64>
 8009276:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800927a:	e00e      	b.n	800929a <_Balloc+0x6e>
 800927c:	2221      	movs	r2, #33	; 0x21
 800927e:	2104      	movs	r1, #4
 8009280:	4620      	mov	r0, r4
 8009282:	f000 fc39 	bl	8009af8 <_calloc_r>
 8009286:	69e3      	ldr	r3, [r4, #28]
 8009288:	60f0      	str	r0, [r6, #12]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1e4      	bne.n	800925a <_Balloc+0x2e>
 8009290:	2000      	movs	r0, #0
 8009292:	bd70      	pop	{r4, r5, r6, pc}
 8009294:	6802      	ldr	r2, [r0, #0]
 8009296:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800929a:	2300      	movs	r3, #0
 800929c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092a0:	e7f7      	b.n	8009292 <_Balloc+0x66>
 80092a2:	bf00      	nop
 80092a4:	0800a149 	.word	0x0800a149
 80092a8:	0800a1c9 	.word	0x0800a1c9

080092ac <_Bfree>:
 80092ac:	b570      	push	{r4, r5, r6, lr}
 80092ae:	69c6      	ldr	r6, [r0, #28]
 80092b0:	4605      	mov	r5, r0
 80092b2:	460c      	mov	r4, r1
 80092b4:	b976      	cbnz	r6, 80092d4 <_Bfree+0x28>
 80092b6:	2010      	movs	r0, #16
 80092b8:	f7ff ff04 	bl	80090c4 <malloc>
 80092bc:	4602      	mov	r2, r0
 80092be:	61e8      	str	r0, [r5, #28]
 80092c0:	b920      	cbnz	r0, 80092cc <_Bfree+0x20>
 80092c2:	4b09      	ldr	r3, [pc, #36]	; (80092e8 <_Bfree+0x3c>)
 80092c4:	4809      	ldr	r0, [pc, #36]	; (80092ec <_Bfree+0x40>)
 80092c6:	218f      	movs	r1, #143	; 0x8f
 80092c8:	f000 fbf8 	bl	8009abc <__assert_func>
 80092cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092d0:	6006      	str	r6, [r0, #0]
 80092d2:	60c6      	str	r6, [r0, #12]
 80092d4:	b13c      	cbz	r4, 80092e6 <_Bfree+0x3a>
 80092d6:	69eb      	ldr	r3, [r5, #28]
 80092d8:	6862      	ldr	r2, [r4, #4]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092e0:	6021      	str	r1, [r4, #0]
 80092e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092e6:	bd70      	pop	{r4, r5, r6, pc}
 80092e8:	0800a149 	.word	0x0800a149
 80092ec:	0800a1c9 	.word	0x0800a1c9

080092f0 <__multadd>:
 80092f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f4:	690d      	ldr	r5, [r1, #16]
 80092f6:	4607      	mov	r7, r0
 80092f8:	460c      	mov	r4, r1
 80092fa:	461e      	mov	r6, r3
 80092fc:	f101 0c14 	add.w	ip, r1, #20
 8009300:	2000      	movs	r0, #0
 8009302:	f8dc 3000 	ldr.w	r3, [ip]
 8009306:	b299      	uxth	r1, r3
 8009308:	fb02 6101 	mla	r1, r2, r1, r6
 800930c:	0c1e      	lsrs	r6, r3, #16
 800930e:	0c0b      	lsrs	r3, r1, #16
 8009310:	fb02 3306 	mla	r3, r2, r6, r3
 8009314:	b289      	uxth	r1, r1
 8009316:	3001      	adds	r0, #1
 8009318:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800931c:	4285      	cmp	r5, r0
 800931e:	f84c 1b04 	str.w	r1, [ip], #4
 8009322:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009326:	dcec      	bgt.n	8009302 <__multadd+0x12>
 8009328:	b30e      	cbz	r6, 800936e <__multadd+0x7e>
 800932a:	68a3      	ldr	r3, [r4, #8]
 800932c:	42ab      	cmp	r3, r5
 800932e:	dc19      	bgt.n	8009364 <__multadd+0x74>
 8009330:	6861      	ldr	r1, [r4, #4]
 8009332:	4638      	mov	r0, r7
 8009334:	3101      	adds	r1, #1
 8009336:	f7ff ff79 	bl	800922c <_Balloc>
 800933a:	4680      	mov	r8, r0
 800933c:	b928      	cbnz	r0, 800934a <__multadd+0x5a>
 800933e:	4602      	mov	r2, r0
 8009340:	4b0c      	ldr	r3, [pc, #48]	; (8009374 <__multadd+0x84>)
 8009342:	480d      	ldr	r0, [pc, #52]	; (8009378 <__multadd+0x88>)
 8009344:	21ba      	movs	r1, #186	; 0xba
 8009346:	f000 fbb9 	bl	8009abc <__assert_func>
 800934a:	6922      	ldr	r2, [r4, #16]
 800934c:	3202      	adds	r2, #2
 800934e:	f104 010c 	add.w	r1, r4, #12
 8009352:	0092      	lsls	r2, r2, #2
 8009354:	300c      	adds	r0, #12
 8009356:	f000 fba3 	bl	8009aa0 <memcpy>
 800935a:	4621      	mov	r1, r4
 800935c:	4638      	mov	r0, r7
 800935e:	f7ff ffa5 	bl	80092ac <_Bfree>
 8009362:	4644      	mov	r4, r8
 8009364:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009368:	3501      	adds	r5, #1
 800936a:	615e      	str	r6, [r3, #20]
 800936c:	6125      	str	r5, [r4, #16]
 800936e:	4620      	mov	r0, r4
 8009370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009374:	0800a1b8 	.word	0x0800a1b8
 8009378:	0800a1c9 	.word	0x0800a1c9

0800937c <__hi0bits>:
 800937c:	0c03      	lsrs	r3, r0, #16
 800937e:	041b      	lsls	r3, r3, #16
 8009380:	b9d3      	cbnz	r3, 80093b8 <__hi0bits+0x3c>
 8009382:	0400      	lsls	r0, r0, #16
 8009384:	2310      	movs	r3, #16
 8009386:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800938a:	bf04      	itt	eq
 800938c:	0200      	lsleq	r0, r0, #8
 800938e:	3308      	addeq	r3, #8
 8009390:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009394:	bf04      	itt	eq
 8009396:	0100      	lsleq	r0, r0, #4
 8009398:	3304      	addeq	r3, #4
 800939a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800939e:	bf04      	itt	eq
 80093a0:	0080      	lsleq	r0, r0, #2
 80093a2:	3302      	addeq	r3, #2
 80093a4:	2800      	cmp	r0, #0
 80093a6:	db05      	blt.n	80093b4 <__hi0bits+0x38>
 80093a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80093ac:	f103 0301 	add.w	r3, r3, #1
 80093b0:	bf08      	it	eq
 80093b2:	2320      	moveq	r3, #32
 80093b4:	4618      	mov	r0, r3
 80093b6:	4770      	bx	lr
 80093b8:	2300      	movs	r3, #0
 80093ba:	e7e4      	b.n	8009386 <__hi0bits+0xa>

080093bc <__lo0bits>:
 80093bc:	6803      	ldr	r3, [r0, #0]
 80093be:	f013 0207 	ands.w	r2, r3, #7
 80093c2:	d00c      	beq.n	80093de <__lo0bits+0x22>
 80093c4:	07d9      	lsls	r1, r3, #31
 80093c6:	d422      	bmi.n	800940e <__lo0bits+0x52>
 80093c8:	079a      	lsls	r2, r3, #30
 80093ca:	bf49      	itett	mi
 80093cc:	085b      	lsrmi	r3, r3, #1
 80093ce:	089b      	lsrpl	r3, r3, #2
 80093d0:	6003      	strmi	r3, [r0, #0]
 80093d2:	2201      	movmi	r2, #1
 80093d4:	bf5c      	itt	pl
 80093d6:	6003      	strpl	r3, [r0, #0]
 80093d8:	2202      	movpl	r2, #2
 80093da:	4610      	mov	r0, r2
 80093dc:	4770      	bx	lr
 80093de:	b299      	uxth	r1, r3
 80093e0:	b909      	cbnz	r1, 80093e6 <__lo0bits+0x2a>
 80093e2:	0c1b      	lsrs	r3, r3, #16
 80093e4:	2210      	movs	r2, #16
 80093e6:	b2d9      	uxtb	r1, r3
 80093e8:	b909      	cbnz	r1, 80093ee <__lo0bits+0x32>
 80093ea:	3208      	adds	r2, #8
 80093ec:	0a1b      	lsrs	r3, r3, #8
 80093ee:	0719      	lsls	r1, r3, #28
 80093f0:	bf04      	itt	eq
 80093f2:	091b      	lsreq	r3, r3, #4
 80093f4:	3204      	addeq	r2, #4
 80093f6:	0799      	lsls	r1, r3, #30
 80093f8:	bf04      	itt	eq
 80093fa:	089b      	lsreq	r3, r3, #2
 80093fc:	3202      	addeq	r2, #2
 80093fe:	07d9      	lsls	r1, r3, #31
 8009400:	d403      	bmi.n	800940a <__lo0bits+0x4e>
 8009402:	085b      	lsrs	r3, r3, #1
 8009404:	f102 0201 	add.w	r2, r2, #1
 8009408:	d003      	beq.n	8009412 <__lo0bits+0x56>
 800940a:	6003      	str	r3, [r0, #0]
 800940c:	e7e5      	b.n	80093da <__lo0bits+0x1e>
 800940e:	2200      	movs	r2, #0
 8009410:	e7e3      	b.n	80093da <__lo0bits+0x1e>
 8009412:	2220      	movs	r2, #32
 8009414:	e7e1      	b.n	80093da <__lo0bits+0x1e>
	...

08009418 <__i2b>:
 8009418:	b510      	push	{r4, lr}
 800941a:	460c      	mov	r4, r1
 800941c:	2101      	movs	r1, #1
 800941e:	f7ff ff05 	bl	800922c <_Balloc>
 8009422:	4602      	mov	r2, r0
 8009424:	b928      	cbnz	r0, 8009432 <__i2b+0x1a>
 8009426:	4b05      	ldr	r3, [pc, #20]	; (800943c <__i2b+0x24>)
 8009428:	4805      	ldr	r0, [pc, #20]	; (8009440 <__i2b+0x28>)
 800942a:	f240 1145 	movw	r1, #325	; 0x145
 800942e:	f000 fb45 	bl	8009abc <__assert_func>
 8009432:	2301      	movs	r3, #1
 8009434:	6144      	str	r4, [r0, #20]
 8009436:	6103      	str	r3, [r0, #16]
 8009438:	bd10      	pop	{r4, pc}
 800943a:	bf00      	nop
 800943c:	0800a1b8 	.word	0x0800a1b8
 8009440:	0800a1c9 	.word	0x0800a1c9

08009444 <__multiply>:
 8009444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009448:	4691      	mov	r9, r2
 800944a:	690a      	ldr	r2, [r1, #16]
 800944c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009450:	429a      	cmp	r2, r3
 8009452:	bfb8      	it	lt
 8009454:	460b      	movlt	r3, r1
 8009456:	460c      	mov	r4, r1
 8009458:	bfbc      	itt	lt
 800945a:	464c      	movlt	r4, r9
 800945c:	4699      	movlt	r9, r3
 800945e:	6927      	ldr	r7, [r4, #16]
 8009460:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009464:	68a3      	ldr	r3, [r4, #8]
 8009466:	6861      	ldr	r1, [r4, #4]
 8009468:	eb07 060a 	add.w	r6, r7, sl
 800946c:	42b3      	cmp	r3, r6
 800946e:	b085      	sub	sp, #20
 8009470:	bfb8      	it	lt
 8009472:	3101      	addlt	r1, #1
 8009474:	f7ff feda 	bl	800922c <_Balloc>
 8009478:	b930      	cbnz	r0, 8009488 <__multiply+0x44>
 800947a:	4602      	mov	r2, r0
 800947c:	4b44      	ldr	r3, [pc, #272]	; (8009590 <__multiply+0x14c>)
 800947e:	4845      	ldr	r0, [pc, #276]	; (8009594 <__multiply+0x150>)
 8009480:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009484:	f000 fb1a 	bl	8009abc <__assert_func>
 8009488:	f100 0514 	add.w	r5, r0, #20
 800948c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009490:	462b      	mov	r3, r5
 8009492:	2200      	movs	r2, #0
 8009494:	4543      	cmp	r3, r8
 8009496:	d321      	bcc.n	80094dc <__multiply+0x98>
 8009498:	f104 0314 	add.w	r3, r4, #20
 800949c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80094a0:	f109 0314 	add.w	r3, r9, #20
 80094a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80094a8:	9202      	str	r2, [sp, #8]
 80094aa:	1b3a      	subs	r2, r7, r4
 80094ac:	3a15      	subs	r2, #21
 80094ae:	f022 0203 	bic.w	r2, r2, #3
 80094b2:	3204      	adds	r2, #4
 80094b4:	f104 0115 	add.w	r1, r4, #21
 80094b8:	428f      	cmp	r7, r1
 80094ba:	bf38      	it	cc
 80094bc:	2204      	movcc	r2, #4
 80094be:	9201      	str	r2, [sp, #4]
 80094c0:	9a02      	ldr	r2, [sp, #8]
 80094c2:	9303      	str	r3, [sp, #12]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d80c      	bhi.n	80094e2 <__multiply+0x9e>
 80094c8:	2e00      	cmp	r6, #0
 80094ca:	dd03      	ble.n	80094d4 <__multiply+0x90>
 80094cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d05b      	beq.n	800958c <__multiply+0x148>
 80094d4:	6106      	str	r6, [r0, #16]
 80094d6:	b005      	add	sp, #20
 80094d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094dc:	f843 2b04 	str.w	r2, [r3], #4
 80094e0:	e7d8      	b.n	8009494 <__multiply+0x50>
 80094e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80094e6:	f1ba 0f00 	cmp.w	sl, #0
 80094ea:	d024      	beq.n	8009536 <__multiply+0xf2>
 80094ec:	f104 0e14 	add.w	lr, r4, #20
 80094f0:	46a9      	mov	r9, r5
 80094f2:	f04f 0c00 	mov.w	ip, #0
 80094f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80094fa:	f8d9 1000 	ldr.w	r1, [r9]
 80094fe:	fa1f fb82 	uxth.w	fp, r2
 8009502:	b289      	uxth	r1, r1
 8009504:	fb0a 110b 	mla	r1, sl, fp, r1
 8009508:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800950c:	f8d9 2000 	ldr.w	r2, [r9]
 8009510:	4461      	add	r1, ip
 8009512:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009516:	fb0a c20b 	mla	r2, sl, fp, ip
 800951a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800951e:	b289      	uxth	r1, r1
 8009520:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009524:	4577      	cmp	r7, lr
 8009526:	f849 1b04 	str.w	r1, [r9], #4
 800952a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800952e:	d8e2      	bhi.n	80094f6 <__multiply+0xb2>
 8009530:	9a01      	ldr	r2, [sp, #4]
 8009532:	f845 c002 	str.w	ip, [r5, r2]
 8009536:	9a03      	ldr	r2, [sp, #12]
 8009538:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800953c:	3304      	adds	r3, #4
 800953e:	f1b9 0f00 	cmp.w	r9, #0
 8009542:	d021      	beq.n	8009588 <__multiply+0x144>
 8009544:	6829      	ldr	r1, [r5, #0]
 8009546:	f104 0c14 	add.w	ip, r4, #20
 800954a:	46ae      	mov	lr, r5
 800954c:	f04f 0a00 	mov.w	sl, #0
 8009550:	f8bc b000 	ldrh.w	fp, [ip]
 8009554:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009558:	fb09 220b 	mla	r2, r9, fp, r2
 800955c:	4452      	add	r2, sl
 800955e:	b289      	uxth	r1, r1
 8009560:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009564:	f84e 1b04 	str.w	r1, [lr], #4
 8009568:	f85c 1b04 	ldr.w	r1, [ip], #4
 800956c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009570:	f8be 1000 	ldrh.w	r1, [lr]
 8009574:	fb09 110a 	mla	r1, r9, sl, r1
 8009578:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800957c:	4567      	cmp	r7, ip
 800957e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009582:	d8e5      	bhi.n	8009550 <__multiply+0x10c>
 8009584:	9a01      	ldr	r2, [sp, #4]
 8009586:	50a9      	str	r1, [r5, r2]
 8009588:	3504      	adds	r5, #4
 800958a:	e799      	b.n	80094c0 <__multiply+0x7c>
 800958c:	3e01      	subs	r6, #1
 800958e:	e79b      	b.n	80094c8 <__multiply+0x84>
 8009590:	0800a1b8 	.word	0x0800a1b8
 8009594:	0800a1c9 	.word	0x0800a1c9

08009598 <__pow5mult>:
 8009598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800959c:	4615      	mov	r5, r2
 800959e:	f012 0203 	ands.w	r2, r2, #3
 80095a2:	4606      	mov	r6, r0
 80095a4:	460f      	mov	r7, r1
 80095a6:	d007      	beq.n	80095b8 <__pow5mult+0x20>
 80095a8:	4c25      	ldr	r4, [pc, #148]	; (8009640 <__pow5mult+0xa8>)
 80095aa:	3a01      	subs	r2, #1
 80095ac:	2300      	movs	r3, #0
 80095ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095b2:	f7ff fe9d 	bl	80092f0 <__multadd>
 80095b6:	4607      	mov	r7, r0
 80095b8:	10ad      	asrs	r5, r5, #2
 80095ba:	d03d      	beq.n	8009638 <__pow5mult+0xa0>
 80095bc:	69f4      	ldr	r4, [r6, #28]
 80095be:	b97c      	cbnz	r4, 80095e0 <__pow5mult+0x48>
 80095c0:	2010      	movs	r0, #16
 80095c2:	f7ff fd7f 	bl	80090c4 <malloc>
 80095c6:	4602      	mov	r2, r0
 80095c8:	61f0      	str	r0, [r6, #28]
 80095ca:	b928      	cbnz	r0, 80095d8 <__pow5mult+0x40>
 80095cc:	4b1d      	ldr	r3, [pc, #116]	; (8009644 <__pow5mult+0xac>)
 80095ce:	481e      	ldr	r0, [pc, #120]	; (8009648 <__pow5mult+0xb0>)
 80095d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80095d4:	f000 fa72 	bl	8009abc <__assert_func>
 80095d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095dc:	6004      	str	r4, [r0, #0]
 80095de:	60c4      	str	r4, [r0, #12]
 80095e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80095e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095e8:	b94c      	cbnz	r4, 80095fe <__pow5mult+0x66>
 80095ea:	f240 2171 	movw	r1, #625	; 0x271
 80095ee:	4630      	mov	r0, r6
 80095f0:	f7ff ff12 	bl	8009418 <__i2b>
 80095f4:	2300      	movs	r3, #0
 80095f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80095fa:	4604      	mov	r4, r0
 80095fc:	6003      	str	r3, [r0, #0]
 80095fe:	f04f 0900 	mov.w	r9, #0
 8009602:	07eb      	lsls	r3, r5, #31
 8009604:	d50a      	bpl.n	800961c <__pow5mult+0x84>
 8009606:	4639      	mov	r1, r7
 8009608:	4622      	mov	r2, r4
 800960a:	4630      	mov	r0, r6
 800960c:	f7ff ff1a 	bl	8009444 <__multiply>
 8009610:	4639      	mov	r1, r7
 8009612:	4680      	mov	r8, r0
 8009614:	4630      	mov	r0, r6
 8009616:	f7ff fe49 	bl	80092ac <_Bfree>
 800961a:	4647      	mov	r7, r8
 800961c:	106d      	asrs	r5, r5, #1
 800961e:	d00b      	beq.n	8009638 <__pow5mult+0xa0>
 8009620:	6820      	ldr	r0, [r4, #0]
 8009622:	b938      	cbnz	r0, 8009634 <__pow5mult+0x9c>
 8009624:	4622      	mov	r2, r4
 8009626:	4621      	mov	r1, r4
 8009628:	4630      	mov	r0, r6
 800962a:	f7ff ff0b 	bl	8009444 <__multiply>
 800962e:	6020      	str	r0, [r4, #0]
 8009630:	f8c0 9000 	str.w	r9, [r0]
 8009634:	4604      	mov	r4, r0
 8009636:	e7e4      	b.n	8009602 <__pow5mult+0x6a>
 8009638:	4638      	mov	r0, r7
 800963a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800963e:	bf00      	nop
 8009640:	0800a318 	.word	0x0800a318
 8009644:	0800a149 	.word	0x0800a149
 8009648:	0800a1c9 	.word	0x0800a1c9

0800964c <__lshift>:
 800964c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009650:	460c      	mov	r4, r1
 8009652:	6849      	ldr	r1, [r1, #4]
 8009654:	6923      	ldr	r3, [r4, #16]
 8009656:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800965a:	68a3      	ldr	r3, [r4, #8]
 800965c:	4607      	mov	r7, r0
 800965e:	4691      	mov	r9, r2
 8009660:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009664:	f108 0601 	add.w	r6, r8, #1
 8009668:	42b3      	cmp	r3, r6
 800966a:	db0b      	blt.n	8009684 <__lshift+0x38>
 800966c:	4638      	mov	r0, r7
 800966e:	f7ff fddd 	bl	800922c <_Balloc>
 8009672:	4605      	mov	r5, r0
 8009674:	b948      	cbnz	r0, 800968a <__lshift+0x3e>
 8009676:	4602      	mov	r2, r0
 8009678:	4b28      	ldr	r3, [pc, #160]	; (800971c <__lshift+0xd0>)
 800967a:	4829      	ldr	r0, [pc, #164]	; (8009720 <__lshift+0xd4>)
 800967c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009680:	f000 fa1c 	bl	8009abc <__assert_func>
 8009684:	3101      	adds	r1, #1
 8009686:	005b      	lsls	r3, r3, #1
 8009688:	e7ee      	b.n	8009668 <__lshift+0x1c>
 800968a:	2300      	movs	r3, #0
 800968c:	f100 0114 	add.w	r1, r0, #20
 8009690:	f100 0210 	add.w	r2, r0, #16
 8009694:	4618      	mov	r0, r3
 8009696:	4553      	cmp	r3, sl
 8009698:	db33      	blt.n	8009702 <__lshift+0xb6>
 800969a:	6920      	ldr	r0, [r4, #16]
 800969c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096a0:	f104 0314 	add.w	r3, r4, #20
 80096a4:	f019 091f 	ands.w	r9, r9, #31
 80096a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80096b0:	d02b      	beq.n	800970a <__lshift+0xbe>
 80096b2:	f1c9 0e20 	rsb	lr, r9, #32
 80096b6:	468a      	mov	sl, r1
 80096b8:	2200      	movs	r2, #0
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	fa00 f009 	lsl.w	r0, r0, r9
 80096c0:	4310      	orrs	r0, r2
 80096c2:	f84a 0b04 	str.w	r0, [sl], #4
 80096c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ca:	459c      	cmp	ip, r3
 80096cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80096d0:	d8f3      	bhi.n	80096ba <__lshift+0x6e>
 80096d2:	ebac 0304 	sub.w	r3, ip, r4
 80096d6:	3b15      	subs	r3, #21
 80096d8:	f023 0303 	bic.w	r3, r3, #3
 80096dc:	3304      	adds	r3, #4
 80096de:	f104 0015 	add.w	r0, r4, #21
 80096e2:	4584      	cmp	ip, r0
 80096e4:	bf38      	it	cc
 80096e6:	2304      	movcc	r3, #4
 80096e8:	50ca      	str	r2, [r1, r3]
 80096ea:	b10a      	cbz	r2, 80096f0 <__lshift+0xa4>
 80096ec:	f108 0602 	add.w	r6, r8, #2
 80096f0:	3e01      	subs	r6, #1
 80096f2:	4638      	mov	r0, r7
 80096f4:	612e      	str	r6, [r5, #16]
 80096f6:	4621      	mov	r1, r4
 80096f8:	f7ff fdd8 	bl	80092ac <_Bfree>
 80096fc:	4628      	mov	r0, r5
 80096fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009702:	f842 0f04 	str.w	r0, [r2, #4]!
 8009706:	3301      	adds	r3, #1
 8009708:	e7c5      	b.n	8009696 <__lshift+0x4a>
 800970a:	3904      	subs	r1, #4
 800970c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009710:	f841 2f04 	str.w	r2, [r1, #4]!
 8009714:	459c      	cmp	ip, r3
 8009716:	d8f9      	bhi.n	800970c <__lshift+0xc0>
 8009718:	e7ea      	b.n	80096f0 <__lshift+0xa4>
 800971a:	bf00      	nop
 800971c:	0800a1b8 	.word	0x0800a1b8
 8009720:	0800a1c9 	.word	0x0800a1c9

08009724 <__mcmp>:
 8009724:	b530      	push	{r4, r5, lr}
 8009726:	6902      	ldr	r2, [r0, #16]
 8009728:	690c      	ldr	r4, [r1, #16]
 800972a:	1b12      	subs	r2, r2, r4
 800972c:	d10e      	bne.n	800974c <__mcmp+0x28>
 800972e:	f100 0314 	add.w	r3, r0, #20
 8009732:	3114      	adds	r1, #20
 8009734:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009738:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800973c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009740:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009744:	42a5      	cmp	r5, r4
 8009746:	d003      	beq.n	8009750 <__mcmp+0x2c>
 8009748:	d305      	bcc.n	8009756 <__mcmp+0x32>
 800974a:	2201      	movs	r2, #1
 800974c:	4610      	mov	r0, r2
 800974e:	bd30      	pop	{r4, r5, pc}
 8009750:	4283      	cmp	r3, r0
 8009752:	d3f3      	bcc.n	800973c <__mcmp+0x18>
 8009754:	e7fa      	b.n	800974c <__mcmp+0x28>
 8009756:	f04f 32ff 	mov.w	r2, #4294967295
 800975a:	e7f7      	b.n	800974c <__mcmp+0x28>

0800975c <__mdiff>:
 800975c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009760:	460c      	mov	r4, r1
 8009762:	4606      	mov	r6, r0
 8009764:	4611      	mov	r1, r2
 8009766:	4620      	mov	r0, r4
 8009768:	4690      	mov	r8, r2
 800976a:	f7ff ffdb 	bl	8009724 <__mcmp>
 800976e:	1e05      	subs	r5, r0, #0
 8009770:	d110      	bne.n	8009794 <__mdiff+0x38>
 8009772:	4629      	mov	r1, r5
 8009774:	4630      	mov	r0, r6
 8009776:	f7ff fd59 	bl	800922c <_Balloc>
 800977a:	b930      	cbnz	r0, 800978a <__mdiff+0x2e>
 800977c:	4b3a      	ldr	r3, [pc, #232]	; (8009868 <__mdiff+0x10c>)
 800977e:	4602      	mov	r2, r0
 8009780:	f240 2137 	movw	r1, #567	; 0x237
 8009784:	4839      	ldr	r0, [pc, #228]	; (800986c <__mdiff+0x110>)
 8009786:	f000 f999 	bl	8009abc <__assert_func>
 800978a:	2301      	movs	r3, #1
 800978c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009794:	bfa4      	itt	ge
 8009796:	4643      	movge	r3, r8
 8009798:	46a0      	movge	r8, r4
 800979a:	4630      	mov	r0, r6
 800979c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80097a0:	bfa6      	itte	ge
 80097a2:	461c      	movge	r4, r3
 80097a4:	2500      	movge	r5, #0
 80097a6:	2501      	movlt	r5, #1
 80097a8:	f7ff fd40 	bl	800922c <_Balloc>
 80097ac:	b920      	cbnz	r0, 80097b8 <__mdiff+0x5c>
 80097ae:	4b2e      	ldr	r3, [pc, #184]	; (8009868 <__mdiff+0x10c>)
 80097b0:	4602      	mov	r2, r0
 80097b2:	f240 2145 	movw	r1, #581	; 0x245
 80097b6:	e7e5      	b.n	8009784 <__mdiff+0x28>
 80097b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80097bc:	6926      	ldr	r6, [r4, #16]
 80097be:	60c5      	str	r5, [r0, #12]
 80097c0:	f104 0914 	add.w	r9, r4, #20
 80097c4:	f108 0514 	add.w	r5, r8, #20
 80097c8:	f100 0e14 	add.w	lr, r0, #20
 80097cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80097d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80097d4:	f108 0210 	add.w	r2, r8, #16
 80097d8:	46f2      	mov	sl, lr
 80097da:	2100      	movs	r1, #0
 80097dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80097e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80097e4:	fa11 f88b 	uxtah	r8, r1, fp
 80097e8:	b299      	uxth	r1, r3
 80097ea:	0c1b      	lsrs	r3, r3, #16
 80097ec:	eba8 0801 	sub.w	r8, r8, r1
 80097f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80097f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80097f8:	fa1f f888 	uxth.w	r8, r8
 80097fc:	1419      	asrs	r1, r3, #16
 80097fe:	454e      	cmp	r6, r9
 8009800:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009804:	f84a 3b04 	str.w	r3, [sl], #4
 8009808:	d8e8      	bhi.n	80097dc <__mdiff+0x80>
 800980a:	1b33      	subs	r3, r6, r4
 800980c:	3b15      	subs	r3, #21
 800980e:	f023 0303 	bic.w	r3, r3, #3
 8009812:	3304      	adds	r3, #4
 8009814:	3415      	adds	r4, #21
 8009816:	42a6      	cmp	r6, r4
 8009818:	bf38      	it	cc
 800981a:	2304      	movcc	r3, #4
 800981c:	441d      	add	r5, r3
 800981e:	4473      	add	r3, lr
 8009820:	469e      	mov	lr, r3
 8009822:	462e      	mov	r6, r5
 8009824:	4566      	cmp	r6, ip
 8009826:	d30e      	bcc.n	8009846 <__mdiff+0xea>
 8009828:	f10c 0203 	add.w	r2, ip, #3
 800982c:	1b52      	subs	r2, r2, r5
 800982e:	f022 0203 	bic.w	r2, r2, #3
 8009832:	3d03      	subs	r5, #3
 8009834:	45ac      	cmp	ip, r5
 8009836:	bf38      	it	cc
 8009838:	2200      	movcc	r2, #0
 800983a:	4413      	add	r3, r2
 800983c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009840:	b17a      	cbz	r2, 8009862 <__mdiff+0x106>
 8009842:	6107      	str	r7, [r0, #16]
 8009844:	e7a4      	b.n	8009790 <__mdiff+0x34>
 8009846:	f856 8b04 	ldr.w	r8, [r6], #4
 800984a:	fa11 f288 	uxtah	r2, r1, r8
 800984e:	1414      	asrs	r4, r2, #16
 8009850:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009854:	b292      	uxth	r2, r2
 8009856:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800985a:	f84e 2b04 	str.w	r2, [lr], #4
 800985e:	1421      	asrs	r1, r4, #16
 8009860:	e7e0      	b.n	8009824 <__mdiff+0xc8>
 8009862:	3f01      	subs	r7, #1
 8009864:	e7ea      	b.n	800983c <__mdiff+0xe0>
 8009866:	bf00      	nop
 8009868:	0800a1b8 	.word	0x0800a1b8
 800986c:	0800a1c9 	.word	0x0800a1c9

08009870 <__d2b>:
 8009870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009874:	460f      	mov	r7, r1
 8009876:	2101      	movs	r1, #1
 8009878:	ec59 8b10 	vmov	r8, r9, d0
 800987c:	4616      	mov	r6, r2
 800987e:	f7ff fcd5 	bl	800922c <_Balloc>
 8009882:	4604      	mov	r4, r0
 8009884:	b930      	cbnz	r0, 8009894 <__d2b+0x24>
 8009886:	4602      	mov	r2, r0
 8009888:	4b24      	ldr	r3, [pc, #144]	; (800991c <__d2b+0xac>)
 800988a:	4825      	ldr	r0, [pc, #148]	; (8009920 <__d2b+0xb0>)
 800988c:	f240 310f 	movw	r1, #783	; 0x30f
 8009890:	f000 f914 	bl	8009abc <__assert_func>
 8009894:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009898:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800989c:	bb2d      	cbnz	r5, 80098ea <__d2b+0x7a>
 800989e:	9301      	str	r3, [sp, #4]
 80098a0:	f1b8 0300 	subs.w	r3, r8, #0
 80098a4:	d026      	beq.n	80098f4 <__d2b+0x84>
 80098a6:	4668      	mov	r0, sp
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	f7ff fd87 	bl	80093bc <__lo0bits>
 80098ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80098b2:	b1e8      	cbz	r0, 80098f0 <__d2b+0x80>
 80098b4:	f1c0 0320 	rsb	r3, r0, #32
 80098b8:	fa02 f303 	lsl.w	r3, r2, r3
 80098bc:	430b      	orrs	r3, r1
 80098be:	40c2      	lsrs	r2, r0
 80098c0:	6163      	str	r3, [r4, #20]
 80098c2:	9201      	str	r2, [sp, #4]
 80098c4:	9b01      	ldr	r3, [sp, #4]
 80098c6:	61a3      	str	r3, [r4, #24]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	bf14      	ite	ne
 80098cc:	2202      	movne	r2, #2
 80098ce:	2201      	moveq	r2, #1
 80098d0:	6122      	str	r2, [r4, #16]
 80098d2:	b1bd      	cbz	r5, 8009904 <__d2b+0x94>
 80098d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80098d8:	4405      	add	r5, r0
 80098da:	603d      	str	r5, [r7, #0]
 80098dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80098e0:	6030      	str	r0, [r6, #0]
 80098e2:	4620      	mov	r0, r4
 80098e4:	b003      	add	sp, #12
 80098e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098ee:	e7d6      	b.n	800989e <__d2b+0x2e>
 80098f0:	6161      	str	r1, [r4, #20]
 80098f2:	e7e7      	b.n	80098c4 <__d2b+0x54>
 80098f4:	a801      	add	r0, sp, #4
 80098f6:	f7ff fd61 	bl	80093bc <__lo0bits>
 80098fa:	9b01      	ldr	r3, [sp, #4]
 80098fc:	6163      	str	r3, [r4, #20]
 80098fe:	3020      	adds	r0, #32
 8009900:	2201      	movs	r2, #1
 8009902:	e7e5      	b.n	80098d0 <__d2b+0x60>
 8009904:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009908:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800990c:	6038      	str	r0, [r7, #0]
 800990e:	6918      	ldr	r0, [r3, #16]
 8009910:	f7ff fd34 	bl	800937c <__hi0bits>
 8009914:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009918:	e7e2      	b.n	80098e0 <__d2b+0x70>
 800991a:	bf00      	nop
 800991c:	0800a1b8 	.word	0x0800a1b8
 8009920:	0800a1c9 	.word	0x0800a1c9

08009924 <__sflush_r>:
 8009924:	898a      	ldrh	r2, [r1, #12]
 8009926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800992a:	4605      	mov	r5, r0
 800992c:	0710      	lsls	r0, r2, #28
 800992e:	460c      	mov	r4, r1
 8009930:	d458      	bmi.n	80099e4 <__sflush_r+0xc0>
 8009932:	684b      	ldr	r3, [r1, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	dc05      	bgt.n	8009944 <__sflush_r+0x20>
 8009938:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800993a:	2b00      	cmp	r3, #0
 800993c:	dc02      	bgt.n	8009944 <__sflush_r+0x20>
 800993e:	2000      	movs	r0, #0
 8009940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009946:	2e00      	cmp	r6, #0
 8009948:	d0f9      	beq.n	800993e <__sflush_r+0x1a>
 800994a:	2300      	movs	r3, #0
 800994c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009950:	682f      	ldr	r7, [r5, #0]
 8009952:	6a21      	ldr	r1, [r4, #32]
 8009954:	602b      	str	r3, [r5, #0]
 8009956:	d032      	beq.n	80099be <__sflush_r+0x9a>
 8009958:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	075a      	lsls	r2, r3, #29
 800995e:	d505      	bpl.n	800996c <__sflush_r+0x48>
 8009960:	6863      	ldr	r3, [r4, #4]
 8009962:	1ac0      	subs	r0, r0, r3
 8009964:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009966:	b10b      	cbz	r3, 800996c <__sflush_r+0x48>
 8009968:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800996a:	1ac0      	subs	r0, r0, r3
 800996c:	2300      	movs	r3, #0
 800996e:	4602      	mov	r2, r0
 8009970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009972:	6a21      	ldr	r1, [r4, #32]
 8009974:	4628      	mov	r0, r5
 8009976:	47b0      	blx	r6
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	89a3      	ldrh	r3, [r4, #12]
 800997c:	d106      	bne.n	800998c <__sflush_r+0x68>
 800997e:	6829      	ldr	r1, [r5, #0]
 8009980:	291d      	cmp	r1, #29
 8009982:	d82b      	bhi.n	80099dc <__sflush_r+0xb8>
 8009984:	4a29      	ldr	r2, [pc, #164]	; (8009a2c <__sflush_r+0x108>)
 8009986:	410a      	asrs	r2, r1
 8009988:	07d6      	lsls	r6, r2, #31
 800998a:	d427      	bmi.n	80099dc <__sflush_r+0xb8>
 800998c:	2200      	movs	r2, #0
 800998e:	6062      	str	r2, [r4, #4]
 8009990:	04d9      	lsls	r1, r3, #19
 8009992:	6922      	ldr	r2, [r4, #16]
 8009994:	6022      	str	r2, [r4, #0]
 8009996:	d504      	bpl.n	80099a2 <__sflush_r+0x7e>
 8009998:	1c42      	adds	r2, r0, #1
 800999a:	d101      	bne.n	80099a0 <__sflush_r+0x7c>
 800999c:	682b      	ldr	r3, [r5, #0]
 800999e:	b903      	cbnz	r3, 80099a2 <__sflush_r+0x7e>
 80099a0:	6560      	str	r0, [r4, #84]	; 0x54
 80099a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099a4:	602f      	str	r7, [r5, #0]
 80099a6:	2900      	cmp	r1, #0
 80099a8:	d0c9      	beq.n	800993e <__sflush_r+0x1a>
 80099aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099ae:	4299      	cmp	r1, r3
 80099b0:	d002      	beq.n	80099b8 <__sflush_r+0x94>
 80099b2:	4628      	mov	r0, r5
 80099b4:	f7ff fb3a 	bl	800902c <_free_r>
 80099b8:	2000      	movs	r0, #0
 80099ba:	6360      	str	r0, [r4, #52]	; 0x34
 80099bc:	e7c0      	b.n	8009940 <__sflush_r+0x1c>
 80099be:	2301      	movs	r3, #1
 80099c0:	4628      	mov	r0, r5
 80099c2:	47b0      	blx	r6
 80099c4:	1c41      	adds	r1, r0, #1
 80099c6:	d1c8      	bne.n	800995a <__sflush_r+0x36>
 80099c8:	682b      	ldr	r3, [r5, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d0c5      	beq.n	800995a <__sflush_r+0x36>
 80099ce:	2b1d      	cmp	r3, #29
 80099d0:	d001      	beq.n	80099d6 <__sflush_r+0xb2>
 80099d2:	2b16      	cmp	r3, #22
 80099d4:	d101      	bne.n	80099da <__sflush_r+0xb6>
 80099d6:	602f      	str	r7, [r5, #0]
 80099d8:	e7b1      	b.n	800993e <__sflush_r+0x1a>
 80099da:	89a3      	ldrh	r3, [r4, #12]
 80099dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099e0:	81a3      	strh	r3, [r4, #12]
 80099e2:	e7ad      	b.n	8009940 <__sflush_r+0x1c>
 80099e4:	690f      	ldr	r7, [r1, #16]
 80099e6:	2f00      	cmp	r7, #0
 80099e8:	d0a9      	beq.n	800993e <__sflush_r+0x1a>
 80099ea:	0793      	lsls	r3, r2, #30
 80099ec:	680e      	ldr	r6, [r1, #0]
 80099ee:	bf08      	it	eq
 80099f0:	694b      	ldreq	r3, [r1, #20]
 80099f2:	600f      	str	r7, [r1, #0]
 80099f4:	bf18      	it	ne
 80099f6:	2300      	movne	r3, #0
 80099f8:	eba6 0807 	sub.w	r8, r6, r7
 80099fc:	608b      	str	r3, [r1, #8]
 80099fe:	f1b8 0f00 	cmp.w	r8, #0
 8009a02:	dd9c      	ble.n	800993e <__sflush_r+0x1a>
 8009a04:	6a21      	ldr	r1, [r4, #32]
 8009a06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a08:	4643      	mov	r3, r8
 8009a0a:	463a      	mov	r2, r7
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	47b0      	blx	r6
 8009a10:	2800      	cmp	r0, #0
 8009a12:	dc06      	bgt.n	8009a22 <__sflush_r+0xfe>
 8009a14:	89a3      	ldrh	r3, [r4, #12]
 8009a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a1a:	81a3      	strh	r3, [r4, #12]
 8009a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a20:	e78e      	b.n	8009940 <__sflush_r+0x1c>
 8009a22:	4407      	add	r7, r0
 8009a24:	eba8 0800 	sub.w	r8, r8, r0
 8009a28:	e7e9      	b.n	80099fe <__sflush_r+0xda>
 8009a2a:	bf00      	nop
 8009a2c:	dfbffffe 	.word	0xdfbffffe

08009a30 <_fflush_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	690b      	ldr	r3, [r1, #16]
 8009a34:	4605      	mov	r5, r0
 8009a36:	460c      	mov	r4, r1
 8009a38:	b913      	cbnz	r3, 8009a40 <_fflush_r+0x10>
 8009a3a:	2500      	movs	r5, #0
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	bd38      	pop	{r3, r4, r5, pc}
 8009a40:	b118      	cbz	r0, 8009a4a <_fflush_r+0x1a>
 8009a42:	6a03      	ldr	r3, [r0, #32]
 8009a44:	b90b      	cbnz	r3, 8009a4a <_fflush_r+0x1a>
 8009a46:	f7fe fb7b 	bl	8008140 <__sinit>
 8009a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d0f3      	beq.n	8009a3a <_fflush_r+0xa>
 8009a52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a54:	07d0      	lsls	r0, r2, #31
 8009a56:	d404      	bmi.n	8009a62 <_fflush_r+0x32>
 8009a58:	0599      	lsls	r1, r3, #22
 8009a5a:	d402      	bmi.n	8009a62 <_fflush_r+0x32>
 8009a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a5e:	f7fe fc66 	bl	800832e <__retarget_lock_acquire_recursive>
 8009a62:	4628      	mov	r0, r5
 8009a64:	4621      	mov	r1, r4
 8009a66:	f7ff ff5d 	bl	8009924 <__sflush_r>
 8009a6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a6c:	07da      	lsls	r2, r3, #31
 8009a6e:	4605      	mov	r5, r0
 8009a70:	d4e4      	bmi.n	8009a3c <_fflush_r+0xc>
 8009a72:	89a3      	ldrh	r3, [r4, #12]
 8009a74:	059b      	lsls	r3, r3, #22
 8009a76:	d4e1      	bmi.n	8009a3c <_fflush_r+0xc>
 8009a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a7a:	f7fe fc59 	bl	8008330 <__retarget_lock_release_recursive>
 8009a7e:	e7dd      	b.n	8009a3c <_fflush_r+0xc>

08009a80 <_sbrk_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4d06      	ldr	r5, [pc, #24]	; (8009a9c <_sbrk_r+0x1c>)
 8009a84:	2300      	movs	r3, #0
 8009a86:	4604      	mov	r4, r0
 8009a88:	4608      	mov	r0, r1
 8009a8a:	602b      	str	r3, [r5, #0]
 8009a8c:	f7f8 fa54 	bl	8001f38 <_sbrk>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_sbrk_r+0x1a>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_sbrk_r+0x1a>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	20010764 	.word	0x20010764

08009aa0 <memcpy>:
 8009aa0:	440a      	add	r2, r1
 8009aa2:	4291      	cmp	r1, r2
 8009aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009aa8:	d100      	bne.n	8009aac <memcpy+0xc>
 8009aaa:	4770      	bx	lr
 8009aac:	b510      	push	{r4, lr}
 8009aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ab6:	4291      	cmp	r1, r2
 8009ab8:	d1f9      	bne.n	8009aae <memcpy+0xe>
 8009aba:	bd10      	pop	{r4, pc}

08009abc <__assert_func>:
 8009abc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009abe:	4614      	mov	r4, r2
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	4b09      	ldr	r3, [pc, #36]	; (8009ae8 <__assert_func+0x2c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	68d8      	ldr	r0, [r3, #12]
 8009aca:	b14c      	cbz	r4, 8009ae0 <__assert_func+0x24>
 8009acc:	4b07      	ldr	r3, [pc, #28]	; (8009aec <__assert_func+0x30>)
 8009ace:	9100      	str	r1, [sp, #0]
 8009ad0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ad4:	4906      	ldr	r1, [pc, #24]	; (8009af0 <__assert_func+0x34>)
 8009ad6:	462b      	mov	r3, r5
 8009ad8:	f000 f844 	bl	8009b64 <fiprintf>
 8009adc:	f000 f854 	bl	8009b88 <abort>
 8009ae0:	4b04      	ldr	r3, [pc, #16]	; (8009af4 <__assert_func+0x38>)
 8009ae2:	461c      	mov	r4, r3
 8009ae4:	e7f3      	b.n	8009ace <__assert_func+0x12>
 8009ae6:	bf00      	nop
 8009ae8:	200000f4 	.word	0x200000f4
 8009aec:	0800a32e 	.word	0x0800a32e
 8009af0:	0800a33b 	.word	0x0800a33b
 8009af4:	0800a369 	.word	0x0800a369

08009af8 <_calloc_r>:
 8009af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009afa:	fba1 2402 	umull	r2, r4, r1, r2
 8009afe:	b94c      	cbnz	r4, 8009b14 <_calloc_r+0x1c>
 8009b00:	4611      	mov	r1, r2
 8009b02:	9201      	str	r2, [sp, #4]
 8009b04:	f7ff fb06 	bl	8009114 <_malloc_r>
 8009b08:	9a01      	ldr	r2, [sp, #4]
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	b930      	cbnz	r0, 8009b1c <_calloc_r+0x24>
 8009b0e:	4628      	mov	r0, r5
 8009b10:	b003      	add	sp, #12
 8009b12:	bd30      	pop	{r4, r5, pc}
 8009b14:	220c      	movs	r2, #12
 8009b16:	6002      	str	r2, [r0, #0]
 8009b18:	2500      	movs	r5, #0
 8009b1a:	e7f8      	b.n	8009b0e <_calloc_r+0x16>
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	f7fe fb88 	bl	8008232 <memset>
 8009b22:	e7f4      	b.n	8009b0e <_calloc_r+0x16>

08009b24 <__ascii_mbtowc>:
 8009b24:	b082      	sub	sp, #8
 8009b26:	b901      	cbnz	r1, 8009b2a <__ascii_mbtowc+0x6>
 8009b28:	a901      	add	r1, sp, #4
 8009b2a:	b142      	cbz	r2, 8009b3e <__ascii_mbtowc+0x1a>
 8009b2c:	b14b      	cbz	r3, 8009b42 <__ascii_mbtowc+0x1e>
 8009b2e:	7813      	ldrb	r3, [r2, #0]
 8009b30:	600b      	str	r3, [r1, #0]
 8009b32:	7812      	ldrb	r2, [r2, #0]
 8009b34:	1e10      	subs	r0, r2, #0
 8009b36:	bf18      	it	ne
 8009b38:	2001      	movne	r0, #1
 8009b3a:	b002      	add	sp, #8
 8009b3c:	4770      	bx	lr
 8009b3e:	4610      	mov	r0, r2
 8009b40:	e7fb      	b.n	8009b3a <__ascii_mbtowc+0x16>
 8009b42:	f06f 0001 	mvn.w	r0, #1
 8009b46:	e7f8      	b.n	8009b3a <__ascii_mbtowc+0x16>

08009b48 <__ascii_wctomb>:
 8009b48:	b149      	cbz	r1, 8009b5e <__ascii_wctomb+0x16>
 8009b4a:	2aff      	cmp	r2, #255	; 0xff
 8009b4c:	bf85      	ittet	hi
 8009b4e:	238a      	movhi	r3, #138	; 0x8a
 8009b50:	6003      	strhi	r3, [r0, #0]
 8009b52:	700a      	strbls	r2, [r1, #0]
 8009b54:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b58:	bf98      	it	ls
 8009b5a:	2001      	movls	r0, #1
 8009b5c:	4770      	bx	lr
 8009b5e:	4608      	mov	r0, r1
 8009b60:	4770      	bx	lr
	...

08009b64 <fiprintf>:
 8009b64:	b40e      	push	{r1, r2, r3}
 8009b66:	b503      	push	{r0, r1, lr}
 8009b68:	4601      	mov	r1, r0
 8009b6a:	ab03      	add	r3, sp, #12
 8009b6c:	4805      	ldr	r0, [pc, #20]	; (8009b84 <fiprintf+0x20>)
 8009b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b72:	6800      	ldr	r0, [r0, #0]
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	f000 f837 	bl	8009be8 <_vfiprintf_r>
 8009b7a:	b002      	add	sp, #8
 8009b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b80:	b003      	add	sp, #12
 8009b82:	4770      	bx	lr
 8009b84:	200000f4 	.word	0x200000f4

08009b88 <abort>:
 8009b88:	b508      	push	{r3, lr}
 8009b8a:	2006      	movs	r0, #6
 8009b8c:	f000 fa04 	bl	8009f98 <raise>
 8009b90:	2001      	movs	r0, #1
 8009b92:	f7f8 f959 	bl	8001e48 <_exit>

08009b96 <__sfputc_r>:
 8009b96:	6893      	ldr	r3, [r2, #8]
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	b410      	push	{r4}
 8009b9e:	6093      	str	r3, [r2, #8]
 8009ba0:	da08      	bge.n	8009bb4 <__sfputc_r+0x1e>
 8009ba2:	6994      	ldr	r4, [r2, #24]
 8009ba4:	42a3      	cmp	r3, r4
 8009ba6:	db01      	blt.n	8009bac <__sfputc_r+0x16>
 8009ba8:	290a      	cmp	r1, #10
 8009baa:	d103      	bne.n	8009bb4 <__sfputc_r+0x1e>
 8009bac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bb0:	f000 b934 	b.w	8009e1c <__swbuf_r>
 8009bb4:	6813      	ldr	r3, [r2, #0]
 8009bb6:	1c58      	adds	r0, r3, #1
 8009bb8:	6010      	str	r0, [r2, #0]
 8009bba:	7019      	strb	r1, [r3, #0]
 8009bbc:	4608      	mov	r0, r1
 8009bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <__sfputs_r>:
 8009bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	460f      	mov	r7, r1
 8009bca:	4614      	mov	r4, r2
 8009bcc:	18d5      	adds	r5, r2, r3
 8009bce:	42ac      	cmp	r4, r5
 8009bd0:	d101      	bne.n	8009bd6 <__sfputs_r+0x12>
 8009bd2:	2000      	movs	r0, #0
 8009bd4:	e007      	b.n	8009be6 <__sfputs_r+0x22>
 8009bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bda:	463a      	mov	r2, r7
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f7ff ffda 	bl	8009b96 <__sfputc_r>
 8009be2:	1c43      	adds	r3, r0, #1
 8009be4:	d1f3      	bne.n	8009bce <__sfputs_r+0xa>
 8009be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009be8 <_vfiprintf_r>:
 8009be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bec:	460d      	mov	r5, r1
 8009bee:	b09d      	sub	sp, #116	; 0x74
 8009bf0:	4614      	mov	r4, r2
 8009bf2:	4698      	mov	r8, r3
 8009bf4:	4606      	mov	r6, r0
 8009bf6:	b118      	cbz	r0, 8009c00 <_vfiprintf_r+0x18>
 8009bf8:	6a03      	ldr	r3, [r0, #32]
 8009bfa:	b90b      	cbnz	r3, 8009c00 <_vfiprintf_r+0x18>
 8009bfc:	f7fe faa0 	bl	8008140 <__sinit>
 8009c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c02:	07d9      	lsls	r1, r3, #31
 8009c04:	d405      	bmi.n	8009c12 <_vfiprintf_r+0x2a>
 8009c06:	89ab      	ldrh	r3, [r5, #12]
 8009c08:	059a      	lsls	r2, r3, #22
 8009c0a:	d402      	bmi.n	8009c12 <_vfiprintf_r+0x2a>
 8009c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c0e:	f7fe fb8e 	bl	800832e <__retarget_lock_acquire_recursive>
 8009c12:	89ab      	ldrh	r3, [r5, #12]
 8009c14:	071b      	lsls	r3, r3, #28
 8009c16:	d501      	bpl.n	8009c1c <_vfiprintf_r+0x34>
 8009c18:	692b      	ldr	r3, [r5, #16]
 8009c1a:	b99b      	cbnz	r3, 8009c44 <_vfiprintf_r+0x5c>
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f000 f93a 	bl	8009e98 <__swsetup_r>
 8009c24:	b170      	cbz	r0, 8009c44 <_vfiprintf_r+0x5c>
 8009c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c28:	07dc      	lsls	r4, r3, #31
 8009c2a:	d504      	bpl.n	8009c36 <_vfiprintf_r+0x4e>
 8009c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c30:	b01d      	add	sp, #116	; 0x74
 8009c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c36:	89ab      	ldrh	r3, [r5, #12]
 8009c38:	0598      	lsls	r0, r3, #22
 8009c3a:	d4f7      	bmi.n	8009c2c <_vfiprintf_r+0x44>
 8009c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c3e:	f7fe fb77 	bl	8008330 <__retarget_lock_release_recursive>
 8009c42:	e7f3      	b.n	8009c2c <_vfiprintf_r+0x44>
 8009c44:	2300      	movs	r3, #0
 8009c46:	9309      	str	r3, [sp, #36]	; 0x24
 8009c48:	2320      	movs	r3, #32
 8009c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c52:	2330      	movs	r3, #48	; 0x30
 8009c54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009e08 <_vfiprintf_r+0x220>
 8009c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c5c:	f04f 0901 	mov.w	r9, #1
 8009c60:	4623      	mov	r3, r4
 8009c62:	469a      	mov	sl, r3
 8009c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c68:	b10a      	cbz	r2, 8009c6e <_vfiprintf_r+0x86>
 8009c6a:	2a25      	cmp	r2, #37	; 0x25
 8009c6c:	d1f9      	bne.n	8009c62 <_vfiprintf_r+0x7a>
 8009c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c72:	d00b      	beq.n	8009c8c <_vfiprintf_r+0xa4>
 8009c74:	465b      	mov	r3, fp
 8009c76:	4622      	mov	r2, r4
 8009c78:	4629      	mov	r1, r5
 8009c7a:	4630      	mov	r0, r6
 8009c7c:	f7ff ffa2 	bl	8009bc4 <__sfputs_r>
 8009c80:	3001      	adds	r0, #1
 8009c82:	f000 80a9 	beq.w	8009dd8 <_vfiprintf_r+0x1f0>
 8009c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c88:	445a      	add	r2, fp
 8009c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8009c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 80a1 	beq.w	8009dd8 <_vfiprintf_r+0x1f0>
 8009c96:	2300      	movs	r3, #0
 8009c98:	f04f 32ff 	mov.w	r2, #4294967295
 8009c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ca0:	f10a 0a01 	add.w	sl, sl, #1
 8009ca4:	9304      	str	r3, [sp, #16]
 8009ca6:	9307      	str	r3, [sp, #28]
 8009ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cac:	931a      	str	r3, [sp, #104]	; 0x68
 8009cae:	4654      	mov	r4, sl
 8009cb0:	2205      	movs	r2, #5
 8009cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb6:	4854      	ldr	r0, [pc, #336]	; (8009e08 <_vfiprintf_r+0x220>)
 8009cb8:	f7f6 fa92 	bl	80001e0 <memchr>
 8009cbc:	9a04      	ldr	r2, [sp, #16]
 8009cbe:	b9d8      	cbnz	r0, 8009cf8 <_vfiprintf_r+0x110>
 8009cc0:	06d1      	lsls	r1, r2, #27
 8009cc2:	bf44      	itt	mi
 8009cc4:	2320      	movmi	r3, #32
 8009cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cca:	0713      	lsls	r3, r2, #28
 8009ccc:	bf44      	itt	mi
 8009cce:	232b      	movmi	r3, #43	; 0x2b
 8009cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8009cda:	d015      	beq.n	8009d08 <_vfiprintf_r+0x120>
 8009cdc:	9a07      	ldr	r2, [sp, #28]
 8009cde:	4654      	mov	r4, sl
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	f04f 0c0a 	mov.w	ip, #10
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cec:	3b30      	subs	r3, #48	; 0x30
 8009cee:	2b09      	cmp	r3, #9
 8009cf0:	d94d      	bls.n	8009d8e <_vfiprintf_r+0x1a6>
 8009cf2:	b1b0      	cbz	r0, 8009d22 <_vfiprintf_r+0x13a>
 8009cf4:	9207      	str	r2, [sp, #28]
 8009cf6:	e014      	b.n	8009d22 <_vfiprintf_r+0x13a>
 8009cf8:	eba0 0308 	sub.w	r3, r0, r8
 8009cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8009d00:	4313      	orrs	r3, r2
 8009d02:	9304      	str	r3, [sp, #16]
 8009d04:	46a2      	mov	sl, r4
 8009d06:	e7d2      	b.n	8009cae <_vfiprintf_r+0xc6>
 8009d08:	9b03      	ldr	r3, [sp, #12]
 8009d0a:	1d19      	adds	r1, r3, #4
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	9103      	str	r1, [sp, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	bfbb      	ittet	lt
 8009d14:	425b      	neglt	r3, r3
 8009d16:	f042 0202 	orrlt.w	r2, r2, #2
 8009d1a:	9307      	strge	r3, [sp, #28]
 8009d1c:	9307      	strlt	r3, [sp, #28]
 8009d1e:	bfb8      	it	lt
 8009d20:	9204      	strlt	r2, [sp, #16]
 8009d22:	7823      	ldrb	r3, [r4, #0]
 8009d24:	2b2e      	cmp	r3, #46	; 0x2e
 8009d26:	d10c      	bne.n	8009d42 <_vfiprintf_r+0x15a>
 8009d28:	7863      	ldrb	r3, [r4, #1]
 8009d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d2c:	d134      	bne.n	8009d98 <_vfiprintf_r+0x1b0>
 8009d2e:	9b03      	ldr	r3, [sp, #12]
 8009d30:	1d1a      	adds	r2, r3, #4
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	9203      	str	r2, [sp, #12]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	bfb8      	it	lt
 8009d3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d3e:	3402      	adds	r4, #2
 8009d40:	9305      	str	r3, [sp, #20]
 8009d42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009e18 <_vfiprintf_r+0x230>
 8009d46:	7821      	ldrb	r1, [r4, #0]
 8009d48:	2203      	movs	r2, #3
 8009d4a:	4650      	mov	r0, sl
 8009d4c:	f7f6 fa48 	bl	80001e0 <memchr>
 8009d50:	b138      	cbz	r0, 8009d62 <_vfiprintf_r+0x17a>
 8009d52:	9b04      	ldr	r3, [sp, #16]
 8009d54:	eba0 000a 	sub.w	r0, r0, sl
 8009d58:	2240      	movs	r2, #64	; 0x40
 8009d5a:	4082      	lsls	r2, r0
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	3401      	adds	r4, #1
 8009d60:	9304      	str	r3, [sp, #16]
 8009d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d66:	4829      	ldr	r0, [pc, #164]	; (8009e0c <_vfiprintf_r+0x224>)
 8009d68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d6c:	2206      	movs	r2, #6
 8009d6e:	f7f6 fa37 	bl	80001e0 <memchr>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	d03f      	beq.n	8009df6 <_vfiprintf_r+0x20e>
 8009d76:	4b26      	ldr	r3, [pc, #152]	; (8009e10 <_vfiprintf_r+0x228>)
 8009d78:	bb1b      	cbnz	r3, 8009dc2 <_vfiprintf_r+0x1da>
 8009d7a:	9b03      	ldr	r3, [sp, #12]
 8009d7c:	3307      	adds	r3, #7
 8009d7e:	f023 0307 	bic.w	r3, r3, #7
 8009d82:	3308      	adds	r3, #8
 8009d84:	9303      	str	r3, [sp, #12]
 8009d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d88:	443b      	add	r3, r7
 8009d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d8c:	e768      	b.n	8009c60 <_vfiprintf_r+0x78>
 8009d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d92:	460c      	mov	r4, r1
 8009d94:	2001      	movs	r0, #1
 8009d96:	e7a6      	b.n	8009ce6 <_vfiprintf_r+0xfe>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	3401      	adds	r4, #1
 8009d9c:	9305      	str	r3, [sp, #20]
 8009d9e:	4619      	mov	r1, r3
 8009da0:	f04f 0c0a 	mov.w	ip, #10
 8009da4:	4620      	mov	r0, r4
 8009da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009daa:	3a30      	subs	r2, #48	; 0x30
 8009dac:	2a09      	cmp	r2, #9
 8009dae:	d903      	bls.n	8009db8 <_vfiprintf_r+0x1d0>
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d0c6      	beq.n	8009d42 <_vfiprintf_r+0x15a>
 8009db4:	9105      	str	r1, [sp, #20]
 8009db6:	e7c4      	b.n	8009d42 <_vfiprintf_r+0x15a>
 8009db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e7f0      	b.n	8009da4 <_vfiprintf_r+0x1bc>
 8009dc2:	ab03      	add	r3, sp, #12
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	462a      	mov	r2, r5
 8009dc8:	4b12      	ldr	r3, [pc, #72]	; (8009e14 <_vfiprintf_r+0x22c>)
 8009dca:	a904      	add	r1, sp, #16
 8009dcc:	4630      	mov	r0, r6
 8009dce:	f7fd fd65 	bl	800789c <_printf_float>
 8009dd2:	4607      	mov	r7, r0
 8009dd4:	1c78      	adds	r0, r7, #1
 8009dd6:	d1d6      	bne.n	8009d86 <_vfiprintf_r+0x19e>
 8009dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dda:	07d9      	lsls	r1, r3, #31
 8009ddc:	d405      	bmi.n	8009dea <_vfiprintf_r+0x202>
 8009dde:	89ab      	ldrh	r3, [r5, #12]
 8009de0:	059a      	lsls	r2, r3, #22
 8009de2:	d402      	bmi.n	8009dea <_vfiprintf_r+0x202>
 8009de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009de6:	f7fe faa3 	bl	8008330 <__retarget_lock_release_recursive>
 8009dea:	89ab      	ldrh	r3, [r5, #12]
 8009dec:	065b      	lsls	r3, r3, #25
 8009dee:	f53f af1d 	bmi.w	8009c2c <_vfiprintf_r+0x44>
 8009df2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009df4:	e71c      	b.n	8009c30 <_vfiprintf_r+0x48>
 8009df6:	ab03      	add	r3, sp, #12
 8009df8:	9300      	str	r3, [sp, #0]
 8009dfa:	462a      	mov	r2, r5
 8009dfc:	4b05      	ldr	r3, [pc, #20]	; (8009e14 <_vfiprintf_r+0x22c>)
 8009dfe:	a904      	add	r1, sp, #16
 8009e00:	4630      	mov	r0, r6
 8009e02:	f7fd ffef 	bl	8007de4 <_printf_i>
 8009e06:	e7e4      	b.n	8009dd2 <_vfiprintf_r+0x1ea>
 8009e08:	0800a46b 	.word	0x0800a46b
 8009e0c:	0800a475 	.word	0x0800a475
 8009e10:	0800789d 	.word	0x0800789d
 8009e14:	08009bc5 	.word	0x08009bc5
 8009e18:	0800a471 	.word	0x0800a471

08009e1c <__swbuf_r>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	460e      	mov	r6, r1
 8009e20:	4614      	mov	r4, r2
 8009e22:	4605      	mov	r5, r0
 8009e24:	b118      	cbz	r0, 8009e2e <__swbuf_r+0x12>
 8009e26:	6a03      	ldr	r3, [r0, #32]
 8009e28:	b90b      	cbnz	r3, 8009e2e <__swbuf_r+0x12>
 8009e2a:	f7fe f989 	bl	8008140 <__sinit>
 8009e2e:	69a3      	ldr	r3, [r4, #24]
 8009e30:	60a3      	str	r3, [r4, #8]
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	071a      	lsls	r2, r3, #28
 8009e36:	d525      	bpl.n	8009e84 <__swbuf_r+0x68>
 8009e38:	6923      	ldr	r3, [r4, #16]
 8009e3a:	b31b      	cbz	r3, 8009e84 <__swbuf_r+0x68>
 8009e3c:	6823      	ldr	r3, [r4, #0]
 8009e3e:	6922      	ldr	r2, [r4, #16]
 8009e40:	1a98      	subs	r0, r3, r2
 8009e42:	6963      	ldr	r3, [r4, #20]
 8009e44:	b2f6      	uxtb	r6, r6
 8009e46:	4283      	cmp	r3, r0
 8009e48:	4637      	mov	r7, r6
 8009e4a:	dc04      	bgt.n	8009e56 <__swbuf_r+0x3a>
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	4628      	mov	r0, r5
 8009e50:	f7ff fdee 	bl	8009a30 <_fflush_r>
 8009e54:	b9e0      	cbnz	r0, 8009e90 <__swbuf_r+0x74>
 8009e56:	68a3      	ldr	r3, [r4, #8]
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	60a3      	str	r3, [r4, #8]
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	1c5a      	adds	r2, r3, #1
 8009e60:	6022      	str	r2, [r4, #0]
 8009e62:	701e      	strb	r6, [r3, #0]
 8009e64:	6962      	ldr	r2, [r4, #20]
 8009e66:	1c43      	adds	r3, r0, #1
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d004      	beq.n	8009e76 <__swbuf_r+0x5a>
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	07db      	lsls	r3, r3, #31
 8009e70:	d506      	bpl.n	8009e80 <__swbuf_r+0x64>
 8009e72:	2e0a      	cmp	r6, #10
 8009e74:	d104      	bne.n	8009e80 <__swbuf_r+0x64>
 8009e76:	4621      	mov	r1, r4
 8009e78:	4628      	mov	r0, r5
 8009e7a:	f7ff fdd9 	bl	8009a30 <_fflush_r>
 8009e7e:	b938      	cbnz	r0, 8009e90 <__swbuf_r+0x74>
 8009e80:	4638      	mov	r0, r7
 8009e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e84:	4621      	mov	r1, r4
 8009e86:	4628      	mov	r0, r5
 8009e88:	f000 f806 	bl	8009e98 <__swsetup_r>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	d0d5      	beq.n	8009e3c <__swbuf_r+0x20>
 8009e90:	f04f 37ff 	mov.w	r7, #4294967295
 8009e94:	e7f4      	b.n	8009e80 <__swbuf_r+0x64>
	...

08009e98 <__swsetup_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4b2a      	ldr	r3, [pc, #168]	; (8009f44 <__swsetup_r+0xac>)
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	6818      	ldr	r0, [r3, #0]
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	b118      	cbz	r0, 8009eac <__swsetup_r+0x14>
 8009ea4:	6a03      	ldr	r3, [r0, #32]
 8009ea6:	b90b      	cbnz	r3, 8009eac <__swsetup_r+0x14>
 8009ea8:	f7fe f94a 	bl	8008140 <__sinit>
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eb2:	0718      	lsls	r0, r3, #28
 8009eb4:	d422      	bmi.n	8009efc <__swsetup_r+0x64>
 8009eb6:	06d9      	lsls	r1, r3, #27
 8009eb8:	d407      	bmi.n	8009eca <__swsetup_r+0x32>
 8009eba:	2309      	movs	r3, #9
 8009ebc:	602b      	str	r3, [r5, #0]
 8009ebe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ec2:	81a3      	strh	r3, [r4, #12]
 8009ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec8:	e034      	b.n	8009f34 <__swsetup_r+0x9c>
 8009eca:	0758      	lsls	r0, r3, #29
 8009ecc:	d512      	bpl.n	8009ef4 <__swsetup_r+0x5c>
 8009ece:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ed0:	b141      	cbz	r1, 8009ee4 <__swsetup_r+0x4c>
 8009ed2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ed6:	4299      	cmp	r1, r3
 8009ed8:	d002      	beq.n	8009ee0 <__swsetup_r+0x48>
 8009eda:	4628      	mov	r0, r5
 8009edc:	f7ff f8a6 	bl	800902c <_free_r>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	6363      	str	r3, [r4, #52]	; 0x34
 8009ee4:	89a3      	ldrh	r3, [r4, #12]
 8009ee6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009eea:	81a3      	strh	r3, [r4, #12]
 8009eec:	2300      	movs	r3, #0
 8009eee:	6063      	str	r3, [r4, #4]
 8009ef0:	6923      	ldr	r3, [r4, #16]
 8009ef2:	6023      	str	r3, [r4, #0]
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	f043 0308 	orr.w	r3, r3, #8
 8009efa:	81a3      	strh	r3, [r4, #12]
 8009efc:	6923      	ldr	r3, [r4, #16]
 8009efe:	b94b      	cbnz	r3, 8009f14 <__swsetup_r+0x7c>
 8009f00:	89a3      	ldrh	r3, [r4, #12]
 8009f02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f0a:	d003      	beq.n	8009f14 <__swsetup_r+0x7c>
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	4628      	mov	r0, r5
 8009f10:	f000 f884 	bl	800a01c <__smakebuf_r>
 8009f14:	89a0      	ldrh	r0, [r4, #12]
 8009f16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f1a:	f010 0301 	ands.w	r3, r0, #1
 8009f1e:	d00a      	beq.n	8009f36 <__swsetup_r+0x9e>
 8009f20:	2300      	movs	r3, #0
 8009f22:	60a3      	str	r3, [r4, #8]
 8009f24:	6963      	ldr	r3, [r4, #20]
 8009f26:	425b      	negs	r3, r3
 8009f28:	61a3      	str	r3, [r4, #24]
 8009f2a:	6923      	ldr	r3, [r4, #16]
 8009f2c:	b943      	cbnz	r3, 8009f40 <__swsetup_r+0xa8>
 8009f2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f32:	d1c4      	bne.n	8009ebe <__swsetup_r+0x26>
 8009f34:	bd38      	pop	{r3, r4, r5, pc}
 8009f36:	0781      	lsls	r1, r0, #30
 8009f38:	bf58      	it	pl
 8009f3a:	6963      	ldrpl	r3, [r4, #20]
 8009f3c:	60a3      	str	r3, [r4, #8]
 8009f3e:	e7f4      	b.n	8009f2a <__swsetup_r+0x92>
 8009f40:	2000      	movs	r0, #0
 8009f42:	e7f7      	b.n	8009f34 <__swsetup_r+0x9c>
 8009f44:	200000f4 	.word	0x200000f4

08009f48 <_raise_r>:
 8009f48:	291f      	cmp	r1, #31
 8009f4a:	b538      	push	{r3, r4, r5, lr}
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	460d      	mov	r5, r1
 8009f50:	d904      	bls.n	8009f5c <_raise_r+0x14>
 8009f52:	2316      	movs	r3, #22
 8009f54:	6003      	str	r3, [r0, #0]
 8009f56:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}
 8009f5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009f5e:	b112      	cbz	r2, 8009f66 <_raise_r+0x1e>
 8009f60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f64:	b94b      	cbnz	r3, 8009f7a <_raise_r+0x32>
 8009f66:	4620      	mov	r0, r4
 8009f68:	f000 f830 	bl	8009fcc <_getpid_r>
 8009f6c:	462a      	mov	r2, r5
 8009f6e:	4601      	mov	r1, r0
 8009f70:	4620      	mov	r0, r4
 8009f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f76:	f000 b817 	b.w	8009fa8 <_kill_r>
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d00a      	beq.n	8009f94 <_raise_r+0x4c>
 8009f7e:	1c59      	adds	r1, r3, #1
 8009f80:	d103      	bne.n	8009f8a <_raise_r+0x42>
 8009f82:	2316      	movs	r3, #22
 8009f84:	6003      	str	r3, [r0, #0]
 8009f86:	2001      	movs	r0, #1
 8009f88:	e7e7      	b.n	8009f5a <_raise_r+0x12>
 8009f8a:	2400      	movs	r4, #0
 8009f8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f90:	4628      	mov	r0, r5
 8009f92:	4798      	blx	r3
 8009f94:	2000      	movs	r0, #0
 8009f96:	e7e0      	b.n	8009f5a <_raise_r+0x12>

08009f98 <raise>:
 8009f98:	4b02      	ldr	r3, [pc, #8]	; (8009fa4 <raise+0xc>)
 8009f9a:	4601      	mov	r1, r0
 8009f9c:	6818      	ldr	r0, [r3, #0]
 8009f9e:	f7ff bfd3 	b.w	8009f48 <_raise_r>
 8009fa2:	bf00      	nop
 8009fa4:	200000f4 	.word	0x200000f4

08009fa8 <_kill_r>:
 8009fa8:	b538      	push	{r3, r4, r5, lr}
 8009faa:	4d07      	ldr	r5, [pc, #28]	; (8009fc8 <_kill_r+0x20>)
 8009fac:	2300      	movs	r3, #0
 8009fae:	4604      	mov	r4, r0
 8009fb0:	4608      	mov	r0, r1
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	602b      	str	r3, [r5, #0]
 8009fb6:	f7f7 ff37 	bl	8001e28 <_kill>
 8009fba:	1c43      	adds	r3, r0, #1
 8009fbc:	d102      	bne.n	8009fc4 <_kill_r+0x1c>
 8009fbe:	682b      	ldr	r3, [r5, #0]
 8009fc0:	b103      	cbz	r3, 8009fc4 <_kill_r+0x1c>
 8009fc2:	6023      	str	r3, [r4, #0]
 8009fc4:	bd38      	pop	{r3, r4, r5, pc}
 8009fc6:	bf00      	nop
 8009fc8:	20010764 	.word	0x20010764

08009fcc <_getpid_r>:
 8009fcc:	f7f7 bf24 	b.w	8001e18 <_getpid>

08009fd0 <__swhatbuf_r>:
 8009fd0:	b570      	push	{r4, r5, r6, lr}
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd8:	2900      	cmp	r1, #0
 8009fda:	b096      	sub	sp, #88	; 0x58
 8009fdc:	4615      	mov	r5, r2
 8009fde:	461e      	mov	r6, r3
 8009fe0:	da0d      	bge.n	8009ffe <__swhatbuf_r+0x2e>
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009fe8:	f04f 0100 	mov.w	r1, #0
 8009fec:	bf0c      	ite	eq
 8009fee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009ff2:	2340      	movne	r3, #64	; 0x40
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	6031      	str	r1, [r6, #0]
 8009ff8:	602b      	str	r3, [r5, #0]
 8009ffa:	b016      	add	sp, #88	; 0x58
 8009ffc:	bd70      	pop	{r4, r5, r6, pc}
 8009ffe:	466a      	mov	r2, sp
 800a000:	f000 f848 	bl	800a094 <_fstat_r>
 800a004:	2800      	cmp	r0, #0
 800a006:	dbec      	blt.n	8009fe2 <__swhatbuf_r+0x12>
 800a008:	9901      	ldr	r1, [sp, #4]
 800a00a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a00e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a012:	4259      	negs	r1, r3
 800a014:	4159      	adcs	r1, r3
 800a016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a01a:	e7eb      	b.n	8009ff4 <__swhatbuf_r+0x24>

0800a01c <__smakebuf_r>:
 800a01c:	898b      	ldrh	r3, [r1, #12]
 800a01e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a020:	079d      	lsls	r5, r3, #30
 800a022:	4606      	mov	r6, r0
 800a024:	460c      	mov	r4, r1
 800a026:	d507      	bpl.n	800a038 <__smakebuf_r+0x1c>
 800a028:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	6123      	str	r3, [r4, #16]
 800a030:	2301      	movs	r3, #1
 800a032:	6163      	str	r3, [r4, #20]
 800a034:	b002      	add	sp, #8
 800a036:	bd70      	pop	{r4, r5, r6, pc}
 800a038:	ab01      	add	r3, sp, #4
 800a03a:	466a      	mov	r2, sp
 800a03c:	f7ff ffc8 	bl	8009fd0 <__swhatbuf_r>
 800a040:	9900      	ldr	r1, [sp, #0]
 800a042:	4605      	mov	r5, r0
 800a044:	4630      	mov	r0, r6
 800a046:	f7ff f865 	bl	8009114 <_malloc_r>
 800a04a:	b948      	cbnz	r0, 800a060 <__smakebuf_r+0x44>
 800a04c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a050:	059a      	lsls	r2, r3, #22
 800a052:	d4ef      	bmi.n	800a034 <__smakebuf_r+0x18>
 800a054:	f023 0303 	bic.w	r3, r3, #3
 800a058:	f043 0302 	orr.w	r3, r3, #2
 800a05c:	81a3      	strh	r3, [r4, #12]
 800a05e:	e7e3      	b.n	800a028 <__smakebuf_r+0xc>
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	6020      	str	r0, [r4, #0]
 800a064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a068:	81a3      	strh	r3, [r4, #12]
 800a06a:	9b00      	ldr	r3, [sp, #0]
 800a06c:	6163      	str	r3, [r4, #20]
 800a06e:	9b01      	ldr	r3, [sp, #4]
 800a070:	6120      	str	r0, [r4, #16]
 800a072:	b15b      	cbz	r3, 800a08c <__smakebuf_r+0x70>
 800a074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a078:	4630      	mov	r0, r6
 800a07a:	f000 f81d 	bl	800a0b8 <_isatty_r>
 800a07e:	b128      	cbz	r0, 800a08c <__smakebuf_r+0x70>
 800a080:	89a3      	ldrh	r3, [r4, #12]
 800a082:	f023 0303 	bic.w	r3, r3, #3
 800a086:	f043 0301 	orr.w	r3, r3, #1
 800a08a:	81a3      	strh	r3, [r4, #12]
 800a08c:	89a3      	ldrh	r3, [r4, #12]
 800a08e:	431d      	orrs	r5, r3
 800a090:	81a5      	strh	r5, [r4, #12]
 800a092:	e7cf      	b.n	800a034 <__smakebuf_r+0x18>

0800a094 <_fstat_r>:
 800a094:	b538      	push	{r3, r4, r5, lr}
 800a096:	4d07      	ldr	r5, [pc, #28]	; (800a0b4 <_fstat_r+0x20>)
 800a098:	2300      	movs	r3, #0
 800a09a:	4604      	mov	r4, r0
 800a09c:	4608      	mov	r0, r1
 800a09e:	4611      	mov	r1, r2
 800a0a0:	602b      	str	r3, [r5, #0]
 800a0a2:	f7f7 ff20 	bl	8001ee6 <_fstat>
 800a0a6:	1c43      	adds	r3, r0, #1
 800a0a8:	d102      	bne.n	800a0b0 <_fstat_r+0x1c>
 800a0aa:	682b      	ldr	r3, [r5, #0]
 800a0ac:	b103      	cbz	r3, 800a0b0 <_fstat_r+0x1c>
 800a0ae:	6023      	str	r3, [r4, #0]
 800a0b0:	bd38      	pop	{r3, r4, r5, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20010764 	.word	0x20010764

0800a0b8 <_isatty_r>:
 800a0b8:	b538      	push	{r3, r4, r5, lr}
 800a0ba:	4d06      	ldr	r5, [pc, #24]	; (800a0d4 <_isatty_r+0x1c>)
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4604      	mov	r4, r0
 800a0c0:	4608      	mov	r0, r1
 800a0c2:	602b      	str	r3, [r5, #0]
 800a0c4:	f7f7 ff1f 	bl	8001f06 <_isatty>
 800a0c8:	1c43      	adds	r3, r0, #1
 800a0ca:	d102      	bne.n	800a0d2 <_isatty_r+0x1a>
 800a0cc:	682b      	ldr	r3, [r5, #0]
 800a0ce:	b103      	cbz	r3, 800a0d2 <_isatty_r+0x1a>
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	bd38      	pop	{r3, r4, r5, pc}
 800a0d4:	20010764 	.word	0x20010764

0800a0d8 <_init>:
 800a0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0da:	bf00      	nop
 800a0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0de:	bc08      	pop	{r3}
 800a0e0:	469e      	mov	lr, r3
 800a0e2:	4770      	bx	lr

0800a0e4 <_fini>:
 800a0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e6:	bf00      	nop
 800a0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ea:	bc08      	pop	{r3}
 800a0ec:	469e      	mov	lr, r3
 800a0ee:	4770      	bx	lr
